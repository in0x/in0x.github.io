var Module;
if (!Module) Module = (typeof Module !== "undefined" ? Module : null) || {};
var moduleOverrides = {};
for (var key in Module) {
 if (Module.hasOwnProperty(key)) {
  moduleOverrides[key] = Module[key];
 }
}
var ENVIRONMENT_IS_WEB = typeof window === "object";
var ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
var ENVIRONMENT_IS_NODE = typeof process === "object" && typeof require === "function" && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
 if (!Module["print"]) Module["print"] = function print(x) {
  process["stdout"].write(x + "\n");
 };
 if (!Module["printErr"]) Module["printErr"] = function printErr(x) {
  process["stderr"].write(x + "\n");
 };
 var nodeFS = require("fs");
 var nodePath = require("path");
 Module["read"] = function read(filename, binary) {
  filename = nodePath["normalize"](filename);
  var ret = nodeFS["readFileSync"](filename);
  if (!ret && filename != nodePath["resolve"](filename)) {
   filename = path.join(__dirname, "..", "src", filename);
   ret = nodeFS["readFileSync"](filename);
  }
  if (ret && !binary) ret = ret.toString();
  return ret;
 };
 Module["readBinary"] = function readBinary(filename) {
  var ret = Module["read"](filename, true);
  if (!ret.buffer) {
   ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
 };
 Module["load"] = function load(f) {
  globalEval(read(f));
 };
 if (!Module["thisProgram"]) {
  if (process["argv"].length > 1) {
   Module["thisProgram"] = process["argv"][1].replace(/\\/g, "/");
  } else {
   Module["thisProgram"] = "unknown-program";
  }
 }
 Module["arguments"] = process["argv"].slice(2);
 if (typeof module !== "undefined") {
  module["exports"] = Module;
 }
 process["on"]("uncaughtException", (function(ex) {
  if (!(ex instanceof ExitStatus)) {
   throw ex;
  }
 }));
 Module["inspect"] = (function() {
  return "[Emscripten Module object]";
 });
} else if (ENVIRONMENT_IS_SHELL) {
 if (!Module["print"]) Module["print"] = print;
 if (typeof printErr != "undefined") Module["printErr"] = printErr;
 if (typeof read != "undefined") {
  Module["read"] = read;
 } else {
  Module["read"] = function read() {
   throw "no read() available (jsc?)";
  };
 }
 Module["readBinary"] = function readBinary(f) {
  if (typeof readbuffer === "function") {
   return new Uint8Array(readbuffer(f));
  }
  var data = read(f, "binary");
  assert(typeof data === "object");
  return data;
 };
 if (typeof scriptArgs != "undefined") {
  Module["arguments"] = scriptArgs;
 } else if (typeof arguments != "undefined") {
  Module["arguments"] = arguments;
 }
} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
 Module["read"] = function read(url) {
  var xhr = new XMLHttpRequest;
  xhr.open("GET", url, false);
  xhr.send(null);
  return xhr.responseText;
 };
 if (typeof arguments != "undefined") {
  Module["arguments"] = arguments;
 }
 if (typeof console !== "undefined") {
  if (!Module["print"]) Module["print"] = function print(x) {
   console.log(x);
  };
  if (!Module["printErr"]) Module["printErr"] = function printErr(x) {
   console.log(x);
  };
 } else {
  var TRY_USE_DUMP = false;
  if (!Module["print"]) Module["print"] = TRY_USE_DUMP && typeof dump !== "undefined" ? (function(x) {
   dump(x);
  }) : (function(x) {});
 }
 if (ENVIRONMENT_IS_WORKER) {
  Module["load"] = importScripts;
 }
 if (typeof Module["setWindowTitle"] === "undefined") {
  Module["setWindowTitle"] = (function(title) {
   document.title = title;
  });
 }
} else {
 throw "Unknown runtime environment. Where are we?";
}
function globalEval(x) {
 eval.call(null, x);
}
if (!Module["load"] && Module["read"]) {
 Module["load"] = function load(f) {
  globalEval(Module["read"](f));
 };
}
if (!Module["print"]) {
 Module["print"] = (function() {});
}
if (!Module["printErr"]) {
 Module["printErr"] = Module["print"];
}
if (!Module["arguments"]) {
 Module["arguments"] = [];
}
if (!Module["thisProgram"]) {
 Module["thisProgram"] = "./this.program";
}
Module.print = Module["print"];
Module.printErr = Module["printErr"];
Module["preRun"] = [];
Module["postRun"] = [];
for (var key in moduleOverrides) {
 if (moduleOverrides.hasOwnProperty(key)) {
  Module[key] = moduleOverrides[key];
 }
}
var Runtime = {
 setTempRet0: (function(value) {
  tempRet0 = value;
 }),
 getTempRet0: (function() {
  return tempRet0;
 }),
 stackSave: (function() {
  return STACKTOP;
 }),
 stackRestore: (function(stackTop) {
  STACKTOP = stackTop;
 }),
 getNativeTypeSize: (function(type) {
  switch (type) {
  case "i1":
  case "i8":
   return 1;
  case "i16":
   return 2;
  case "i32":
   return 4;
  case "i64":
   return 8;
  case "float":
   return 4;
  case "double":
   return 8;
  default:
   {
    if (type[type.length - 1] === "*") {
     return Runtime.QUANTUM_SIZE;
    } else if (type[0] === "i") {
     var bits = parseInt(type.substr(1));
     assert(bits % 8 === 0);
     return bits / 8;
    } else {
     return 0;
    }
   }
  }
 }),
 getNativeFieldSize: (function(type) {
  return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
 }),
 STACK_ALIGN: 16,
 prepVararg: (function(ptr, type) {
  if (type === "double" || type === "i64") {
   if (ptr & 7) {
    assert((ptr & 7) === 4);
    ptr += 4;
   }
  } else {
   assert((ptr & 3) === 0);
  }
  return ptr;
 }),
 getAlignSize: (function(type, size, vararg) {
  if (!vararg && (type == "i64" || type == "double")) return 8;
  if (!type) return Math.min(size, 8);
  return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
 }),
 dynCall: (function(sig, ptr, args) {
  if (args && args.length) {
   if (!args.splice) args = Array.prototype.slice.call(args);
   args.splice(0, 0, ptr);
   return Module["dynCall_" + sig].apply(null, args);
  } else {
   return Module["dynCall_" + sig].call(null, ptr);
  }
 }),
 functionPointers: [],
 addFunction: (function(func) {
  for (var i = 0; i < Runtime.functionPointers.length; i++) {
   if (!Runtime.functionPointers[i]) {
    Runtime.functionPointers[i] = func;
    return 2 * (1 + i);
   }
  }
  throw "Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.";
 }),
 removeFunction: (function(index) {
  Runtime.functionPointers[(index - 2) / 2] = null;
 }),
 warnOnce: (function(text) {
  if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
  if (!Runtime.warnOnce.shown[text]) {
   Runtime.warnOnce.shown[text] = 1;
   Module.printErr(text);
  }
 }),
 funcWrappers: {},
 getFuncWrapper: (function(func, sig) {
  assert(sig);
  if (!Runtime.funcWrappers[sig]) {
   Runtime.funcWrappers[sig] = {};
  }
  var sigCache = Runtime.funcWrappers[sig];
  if (!sigCache[func]) {
   sigCache[func] = function dynCall_wrapper() {
    return Runtime.dynCall(sig, func, arguments);
   };
  }
  return sigCache[func];
 }),
 getCompilerSetting: (function(name) {
  throw "You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work";
 }),
 stackAlloc: (function(size) {
  var ret = STACKTOP;
  STACKTOP = STACKTOP + size | 0;
  STACKTOP = STACKTOP + 15 & -16;
  return ret;
 }),
 staticAlloc: (function(size) {
  var ret = STATICTOP;
  STATICTOP = STATICTOP + size | 0;
  STATICTOP = STATICTOP + 15 & -16;
  return ret;
 }),
 dynamicAlloc: (function(size) {
  var ret = DYNAMICTOP;
  DYNAMICTOP = DYNAMICTOP + size | 0;
  DYNAMICTOP = DYNAMICTOP + 15 & -16;
  if (DYNAMICTOP >= TOTAL_MEMORY) {
   var success = enlargeMemory();
   if (!success) {
    DYNAMICTOP = ret;
    return 0;
   }
  }
  return ret;
 }),
 alignMemory: (function(size, quantum) {
  var ret = size = Math.ceil(size / (quantum ? quantum : 16)) * (quantum ? quantum : 16);
  return ret;
 }),
 makeBigInt: (function(low, high, unsigned) {
  var ret = unsigned ? +(low >>> 0) + +(high >>> 0) * +4294967296 : +(low >>> 0) + +(high | 0) * +4294967296;
  return ret;
 }),
 GLOBAL_BASE: 8,
 QUANTUM_SIZE: 4,
 __dummy__: 0
};
Module["Runtime"] = Runtime;
var __THREW__ = 0;
var ABORT = false;
var EXITSTATUS = 0;
var undef = 0;
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function assert(condition, text) {
 if (!condition) {
  abort("Assertion failed: " + text);
 }
}
var globalScope = this;
function getCFunc(ident) {
 var func = Module["_" + ident];
 if (!func) {
  try {
   func = eval("_" + ident);
  } catch (e) {}
 }
 assert(func, "Cannot call unknown function " + ident + " (perhaps LLVM optimizations or closure removed it?)");
 return func;
}
var cwrap, ccall;
((function() {
 var JSfuncs = {
  "stackSave": (function() {
   Runtime.stackSave();
  }),
  "stackRestore": (function() {
   Runtime.stackRestore();
  }),
  "arrayToC": (function(arr) {
   var ret = Runtime.stackAlloc(arr.length);
   writeArrayToMemory(arr, ret);
   return ret;
  }),
  "stringToC": (function(str) {
   var ret = 0;
   if (str !== null && str !== undefined && str !== 0) {
    ret = Runtime.stackAlloc((str.length << 2) + 1);
    writeStringToMemory(str, ret);
   }
   return ret;
  })
 };
 var toC = {
  "string": JSfuncs["stringToC"],
  "array": JSfuncs["arrayToC"]
 };
 ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
   for (var i = 0; i < args.length; i++) {
    var converter = toC[argTypes[i]];
    if (converter) {
     if (stack === 0) stack = Runtime.stackSave();
     cArgs[i] = converter(args[i]);
    } else {
     cArgs[i] = args[i];
    }
   }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === "string") ret = Pointer_stringify(ret);
  if (stack !== 0) {
   if (opts && opts.async) {
    EmterpreterAsync.asyncFinalizers.push((function() {
     Runtime.stackRestore(stack);
    }));
    return;
   }
   Runtime.stackRestore(stack);
  }
  return ret;
 };
 var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
 function parseJSFunc(jsfunc) {
  var parsed = jsfunc.toString().match(sourceRegex).slice(1);
  return {
   arguments: parsed[0],
   body: parsed[1],
   returnValue: parsed[2]
  };
 }
 var JSsource = {};
 for (var fun in JSfuncs) {
  if (JSfuncs.hasOwnProperty(fun)) {
   JSsource[fun] = parseJSFunc(JSfuncs[fun]);
  }
 }
 cwrap = function cwrap(ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  var numericArgs = argTypes.every((function(type) {
   return type === "number";
  }));
  var numericRet = returnType !== "string";
  if (numericRet && numericArgs) {
   return cfunc;
  }
  var argNames = argTypes.map((function(x, i) {
   return "$" + i;
  }));
  var funcstr = "(function(" + argNames.join(",") + ") {";
  var nargs = argTypes.length;
  if (!numericArgs) {
   funcstr += "var stack = " + JSsource["stackSave"].body + ";";
   for (var i = 0; i < nargs; i++) {
    var arg = argNames[i], type = argTypes[i];
    if (type === "number") continue;
    var convertCode = JSsource[type + "ToC"];
    funcstr += "var " + convertCode.arguments + " = " + arg + ";";
    funcstr += convertCode.body + ";";
    funcstr += arg + "=" + convertCode.returnValue + ";";
   }
  }
  var cfuncname = parseJSFunc((function() {
   return cfunc;
  })).returnValue;
  funcstr += "var ret = " + cfuncname + "(" + argNames.join(",") + ");";
  if (!numericRet) {
   var strgfy = parseJSFunc((function() {
    return Pointer_stringify;
   })).returnValue;
   funcstr += "ret = " + strgfy + "(ret);";
  }
  if (!numericArgs) {
   funcstr += JSsource["stackRestore"].body.replace("()", "(stack)") + ";";
  }
  funcstr += "return ret})";
  return eval(funcstr);
 };
}))();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
function setValue(ptr, value, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  HEAP8[ptr >> 0] = value;
  break;
 case "i8":
  HEAP8[ptr >> 0] = value;
  break;
 case "i16":
  HEAP16[ptr >> 1] = value;
  break;
 case "i32":
  HEAP32[ptr >> 2] = value;
  break;
 case "i64":
  tempI64 = [ value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0) ], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
  break;
 case "float":
  HEAPF32[ptr >> 2] = value;
  break;
 case "double":
  HEAPF64[ptr >> 3] = value;
  break;
 default:
  abort("invalid type for setValue: " + type);
 }
}
Module["setValue"] = setValue;
function getValue(ptr, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  return HEAP8[ptr >> 0];
 case "i8":
  return HEAP8[ptr >> 0];
 case "i16":
  return HEAP16[ptr >> 1];
 case "i32":
  return HEAP32[ptr >> 2];
 case "i64":
  return HEAP32[ptr >> 2];
 case "float":
  return HEAPF32[ptr >> 2];
 case "double":
  return HEAPF64[ptr >> 3];
 default:
  abort("invalid type for setValue: " + type);
 }
 return null;
}
Module["getValue"] = getValue;
var ALLOC_NORMAL = 0;
var ALLOC_STACK = 1;
var ALLOC_STATIC = 2;
var ALLOC_DYNAMIC = 3;
var ALLOC_NONE = 4;
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;
function allocate(slab, types, allocator, ptr) {
 var zeroinit, size;
 if (typeof slab === "number") {
  zeroinit = true;
  size = slab;
 } else {
  zeroinit = false;
  size = slab.length;
 }
 var singleType = typeof types === "string" ? types : null;
 var ret;
 if (allocator == ALLOC_NONE) {
  ret = ptr;
 } else {
  ret = [ _malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc ][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
 }
 if (zeroinit) {
  var ptr = ret, stop;
  assert((ret & 3) == 0);
  stop = ret + (size & ~3);
  for (; ptr < stop; ptr += 4) {
   HEAP32[ptr >> 2] = 0;
  }
  stop = ret + size;
  while (ptr < stop) {
   HEAP8[ptr++ >> 0] = 0;
  }
  return ret;
 }
 if (singleType === "i8") {
  if (slab.subarray || slab.slice) {
   HEAPU8.set(slab, ret);
  } else {
   HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
 }
 var i = 0, type, typeSize, previousType;
 while (i < size) {
  var curr = slab[i];
  if (typeof curr === "function") {
   curr = Runtime.getFunctionIndex(curr);
  }
  type = singleType || types[i];
  if (type === 0) {
   i++;
   continue;
  }
  if (type == "i64") type = "i32";
  setValue(ret + i, curr, type);
  if (previousType !== type) {
   typeSize = Runtime.getNativeTypeSize(type);
   previousType = type;
  }
  i += typeSize;
 }
 return ret;
}
Module["allocate"] = allocate;
function getMemory(size) {
 if (!staticSealed) return Runtime.staticAlloc(size);
 if (typeof _sbrk !== "undefined" && !_sbrk.called || !runtimeInitialized) return Runtime.dynamicAlloc(size);
 return _malloc(size);
}
Module["getMemory"] = getMemory;
function Pointer_stringify(ptr, length) {
 if (length === 0 || !ptr) return "";
 var hasUtf = 0;
 var t;
 var i = 0;
 while (1) {
  t = HEAPU8[ptr + i >> 0];
  hasUtf |= t;
  if (t == 0 && !length) break;
  i++;
  if (length && i == length) break;
 }
 if (!length) length = i;
 var ret = "";
 if (hasUtf < 128) {
  var MAX_CHUNK = 1024;
  var curr;
  while (length > 0) {
   curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
   ret = ret ? ret + curr : curr;
   ptr += MAX_CHUNK;
   length -= MAX_CHUNK;
  }
  return ret;
 }
 return Module["UTF8ToString"](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;
function AsciiToString(ptr) {
 var str = "";
 while (1) {
  var ch = HEAP8[ptr++ >> 0];
  if (!ch) return str;
  str += String.fromCharCode(ch);
 }
}
Module["AsciiToString"] = AsciiToString;
function stringToAscii(str, outPtr) {
 return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;
function UTF8ArrayToString(u8Array, idx) {
 var u0, u1, u2, u3, u4, u5;
 var str = "";
 while (1) {
  u0 = u8Array[idx++];
  if (!u0) return str;
  if (!(u0 & 128)) {
   str += String.fromCharCode(u0);
   continue;
  }
  u1 = u8Array[idx++] & 63;
  if ((u0 & 224) == 192) {
   str += String.fromCharCode((u0 & 31) << 6 | u1);
   continue;
  }
  u2 = u8Array[idx++] & 63;
  if ((u0 & 240) == 224) {
   u0 = (u0 & 15) << 12 | u1 << 6 | u2;
  } else {
   u3 = u8Array[idx++] & 63;
   if ((u0 & 248) == 240) {
    u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u3;
   } else {
    u4 = u8Array[idx++] & 63;
    if ((u0 & 252) == 248) {
     u0 = (u0 & 3) << 24 | u1 << 18 | u2 << 12 | u3 << 6 | u4;
    } else {
     u5 = u8Array[idx++] & 63;
     u0 = (u0 & 1) << 30 | u1 << 24 | u2 << 18 | u3 << 12 | u4 << 6 | u5;
    }
   }
  }
  if (u0 < 65536) {
   str += String.fromCharCode(u0);
  } else {
   var ch = u0 - 65536;
   str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
  }
 }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;
function UTF8ToString(ptr) {
 return UTF8ArrayToString(HEAPU8, ptr);
}
Module["UTF8ToString"] = UTF8ToString;
function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
 if (!(maxBytesToWrite > 0)) return 0;
 var startIdx = outIdx;
 var endIdx = outIdx + maxBytesToWrite - 1;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
  if (u <= 127) {
   if (outIdx >= endIdx) break;
   outU8Array[outIdx++] = u;
  } else if (u <= 2047) {
   if (outIdx + 1 >= endIdx) break;
   outU8Array[outIdx++] = 192 | u >> 6;
   outU8Array[outIdx++] = 128 | u & 63;
  } else if (u <= 65535) {
   if (outIdx + 2 >= endIdx) break;
   outU8Array[outIdx++] = 224 | u >> 12;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  } else if (u <= 2097151) {
   if (outIdx + 3 >= endIdx) break;
   outU8Array[outIdx++] = 240 | u >> 18;
   outU8Array[outIdx++] = 128 | u >> 12 & 63;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  } else if (u <= 67108863) {
   if (outIdx + 4 >= endIdx) break;
   outU8Array[outIdx++] = 248 | u >> 24;
   outU8Array[outIdx++] = 128 | u >> 18 & 63;
   outU8Array[outIdx++] = 128 | u >> 12 & 63;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  } else {
   if (outIdx + 5 >= endIdx) break;
   outU8Array[outIdx++] = 252 | u >> 30;
   outU8Array[outIdx++] = 128 | u >> 24 & 63;
   outU8Array[outIdx++] = 128 | u >> 18 & 63;
   outU8Array[outIdx++] = 128 | u >> 12 & 63;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  }
 }
 outU8Array[outIdx] = 0;
 return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;
function stringToUTF8(str, outPtr, maxBytesToWrite) {
 return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;
function lengthBytesUTF8(str) {
 var len = 0;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
  if (u <= 127) {
   ++len;
  } else if (u <= 2047) {
   len += 2;
  } else if (u <= 65535) {
   len += 3;
  } else if (u <= 2097151) {
   len += 4;
  } else if (u <= 67108863) {
   len += 5;
  } else {
   len += 6;
  }
 }
 return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;
function UTF16ToString(ptr) {
 var i = 0;
 var str = "";
 while (1) {
  var codeUnit = HEAP16[ptr + i * 2 >> 1];
  if (codeUnit == 0) return str;
  ++i;
  str += String.fromCharCode(codeUnit);
 }
}
Module["UTF16ToString"] = UTF16ToString;
function stringToUTF16(str, outPtr, maxBytesToWrite) {
 if (maxBytesToWrite === undefined) {
  maxBytesToWrite = 2147483647;
 }
 if (maxBytesToWrite < 2) return 0;
 maxBytesToWrite -= 2;
 var startPtr = outPtr;
 var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
 for (var i = 0; i < numCharsToWrite; ++i) {
  var codeUnit = str.charCodeAt(i);
  HEAP16[outPtr >> 1] = codeUnit;
  outPtr += 2;
 }
 HEAP16[outPtr >> 1] = 0;
 return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;
function lengthBytesUTF16(str) {
 return str.length * 2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;
function UTF32ToString(ptr) {
 var i = 0;
 var str = "";
 while (1) {
  var utf32 = HEAP32[ptr + i * 4 >> 2];
  if (utf32 == 0) return str;
  ++i;
  if (utf32 >= 65536) {
   var ch = utf32 - 65536;
   str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
  } else {
   str += String.fromCharCode(utf32);
  }
 }
}
Module["UTF32ToString"] = UTF32ToString;
function stringToUTF32(str, outPtr, maxBytesToWrite) {
 if (maxBytesToWrite === undefined) {
  maxBytesToWrite = 2147483647;
 }
 if (maxBytesToWrite < 4) return 0;
 var startPtr = outPtr;
 var endPtr = startPtr + maxBytesToWrite - 4;
 for (var i = 0; i < str.length; ++i) {
  var codeUnit = str.charCodeAt(i);
  if (codeUnit >= 55296 && codeUnit <= 57343) {
   var trailSurrogate = str.charCodeAt(++i);
   codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;
  }
  HEAP32[outPtr >> 2] = codeUnit;
  outPtr += 4;
  if (outPtr + 4 > endPtr) break;
 }
 HEAP32[outPtr >> 2] = 0;
 return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;
function lengthBytesUTF32(str) {
 var len = 0;
 for (var i = 0; i < str.length; ++i) {
  var codeUnit = str.charCodeAt(i);
  if (codeUnit >= 55296 && codeUnit <= 57343) ++i;
  len += 4;
 }
 return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;
function demangle(func) {
 var hasLibcxxabi = !!Module["___cxa_demangle"];
 if (hasLibcxxabi) {
  try {
   var buf = _malloc(func.length);
   writeStringToMemory(func.substr(1), buf);
   var status = _malloc(4);
   var ret = Module["___cxa_demangle"](buf, 0, 0, status);
   if (getValue(status, "i32") === 0 && ret) {
    return Pointer_stringify(ret);
   }
  } catch (e) {} finally {
   if (buf) _free(buf);
   if (status) _free(status);
   if (ret) _free(ret);
  }
 }
 var i = 3;
 var basicTypes = {
  "v": "void",
  "b": "bool",
  "c": "char",
  "s": "short",
  "i": "int",
  "l": "long",
  "f": "float",
  "d": "double",
  "w": "wchar_t",
  "a": "signed char",
  "h": "unsigned char",
  "t": "unsigned short",
  "j": "unsigned int",
  "m": "unsigned long",
  "x": "long long",
  "y": "unsigned long long",
  "z": "..."
 };
 var subs = [];
 var first = true;
 function dump(x) {
  if (x) Module.print(x);
  Module.print(func);
  var pre = "";
  for (var a = 0; a < i; a++) pre += " ";
  Module.print(pre + "^");
 }
 function parseNested() {
  i++;
  if (func[i] === "K") i++;
  var parts = [];
  while (func[i] !== "E") {
   if (func[i] === "S") {
    i++;
    var next = func.indexOf("_", i);
    var num = func.substring(i, next) || 0;
    parts.push(subs[num] || "?");
    i = next + 1;
    continue;
   }
   if (func[i] === "C") {
    parts.push(parts[parts.length - 1]);
    i += 2;
    continue;
   }
   var size = parseInt(func.substr(i));
   var pre = size.toString().length;
   if (!size || !pre) {
    i--;
    break;
   }
   var curr = func.substr(i + pre, size);
   parts.push(curr);
   subs.push(curr);
   i += pre + size;
  }
  i++;
  return parts;
 }
 function parse(rawList, limit, allowVoid) {
  limit = limit || Infinity;
  var ret = "", list = [];
  function flushList() {
   return "(" + list.join(", ") + ")";
  }
  var name;
  if (func[i] === "N") {
   name = parseNested().join("::");
   limit--;
   if (limit === 0) return rawList ? [ name ] : name;
  } else {
   if (func[i] === "K" || first && func[i] === "L") i++;
   var size = parseInt(func.substr(i));
   if (size) {
    var pre = size.toString().length;
    name = func.substr(i + pre, size);
    i += pre + size;
   }
  }
  first = false;
  if (func[i] === "I") {
   i++;
   var iList = parse(true);
   var iRet = parse(true, 1, true);
   ret += iRet[0] + " " + name + "<" + iList.join(", ") + ">";
  } else {
   ret = name;
  }
  paramLoop : while (i < func.length && limit-- > 0) {
   var c = func[i++];
   if (c in basicTypes) {
    list.push(basicTypes[c]);
   } else {
    switch (c) {
    case "P":
     list.push(parse(true, 1, true)[0] + "*");
     break;
    case "R":
     list.push(parse(true, 1, true)[0] + "&");
     break;
    case "L":
     {
      i++;
      var end = func.indexOf("E", i);
      var size = end - i;
      list.push(func.substr(i, size));
      i += size + 2;
      break;
     }
    case "A":
     {
      var size = parseInt(func.substr(i));
      i += size.toString().length;
      if (func[i] !== "_") throw "?";
      i++;
      list.push(parse(true, 1, true)[0] + " [" + size + "]");
      break;
     }
    case "E":
     break paramLoop;
    default:
     ret += "?" + c;
     break paramLoop;
    }
   }
  }
  if (!allowVoid && list.length === 1 && list[0] === "void") list = [];
  if (rawList) {
   if (ret) {
    list.push(ret + "?");
   }
   return list;
  } else {
   return ret + flushList();
  }
 }
 var parsed = func;
 try {
  if (func == "Object._main" || func == "_main") {
   return "main()";
  }
  if (typeof func === "number") func = Pointer_stringify(func);
  if (func[0] !== "_") return func;
  if (func[1] !== "_") return func;
  if (func[2] !== "Z") return func;
  switch (func[3]) {
  case "n":
   return "operator new()";
  case "d":
   return "operator delete()";
  }
  parsed = parse();
 } catch (e) {
  parsed += "?";
 }
 if (parsed.indexOf("?") >= 0 && !hasLibcxxabi) {
  Runtime.warnOnce("warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");
 }
 return parsed;
}
function demangleAll(text) {
 return text.replace(/__Z[\w\d_]+/g, (function(x) {
  var y = demangle(x);
  return x === y ? x : x + " [" + y + "]";
 }));
}
function jsStackTrace() {
 var err = new Error;
 if (!err.stack) {
  try {
   throw new Error(0);
  } catch (e) {
   err = e;
  }
  if (!err.stack) {
   return "(no stack trace available)";
  }
 }
 return err.stack.toString();
}
function stackTrace() {
 return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
 if (x % 4096 > 0) {
  x += 4096 - x % 4096;
 }
 return x;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false;
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0;
var DYNAMIC_BASE = 0, DYNAMICTOP = 0;
function abortOnCannotGrowMemory() {
 abort("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value " + TOTAL_MEMORY + ", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ");
}
function enlargeMemory() {
 abortOnCannotGrowMemory();
}
var TOTAL_STACK = Module["TOTAL_STACK"] || 5242880;
var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 16777216;
var totalMemory = 64 * 1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2 * TOTAL_STACK) {
 if (totalMemory < 16 * 1024 * 1024) {
  totalMemory *= 2;
 } else {
  totalMemory += 16 * 1024 * 1024;
 }
}
if (totalMemory !== TOTAL_MEMORY) {
 TOTAL_MEMORY = totalMemory;
}
assert(typeof Int32Array !== "undefined" && typeof Float64Array !== "undefined" && !!(new Int32Array(1))["subarray"] && !!(new Int32Array(1))["set"], "JS engine does not provide full typed array support");
var buffer;
buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, "Typed arrays 2 must be run on a little-endian system");
Module["HEAP"] = HEAP;
Module["buffer"] = buffer;
Module["HEAP8"] = HEAP8;
Module["HEAP16"] = HEAP16;
Module["HEAP32"] = HEAP32;
Module["HEAPU8"] = HEAPU8;
Module["HEAPU16"] = HEAPU16;
Module["HEAPU32"] = HEAPU32;
Module["HEAPF32"] = HEAPF32;
Module["HEAPF64"] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
 while (callbacks.length > 0) {
  var callback = callbacks.shift();
  if (typeof callback == "function") {
   callback();
   continue;
  }
  var func = callback.func;
  if (typeof func === "number") {
   if (callback.arg === undefined) {
    Runtime.dynCall("v", func);
   } else {
    Runtime.dynCall("vi", func, [ callback.arg ]);
   }
  } else {
   func(callback.arg === undefined ? null : callback.arg);
  }
 }
}
var __ATPRERUN__ = [];
var __ATINIT__ = [];
var __ATMAIN__ = [];
var __ATEXIT__ = [];
var __ATPOSTRUN__ = [];
var runtimeInitialized = false;
var runtimeExited = false;
function preRun() {
 if (Module["preRun"]) {
  if (typeof Module["preRun"] == "function") Module["preRun"] = [ Module["preRun"] ];
  while (Module["preRun"].length) {
   addOnPreRun(Module["preRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
 if (runtimeInitialized) return;
 runtimeInitialized = true;
 callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
 callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
 callRuntimeCallbacks(__ATEXIT__);
 runtimeExited = true;
}
function postRun() {
 if (Module["postRun"]) {
  if (typeof Module["postRun"] == "function") Module["postRun"] = [ Module["postRun"] ];
  while (Module["postRun"].length) {
   addOnPostRun(Module["postRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
 __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;
function addOnInit(cb) {
 __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;
function addOnPreMain(cb) {
 __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;
function addOnExit(cb) {
 __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;
function addOnPostRun(cb) {
 __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;
function intArrayFromString(stringy, dontAddNull, length) {
 var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
 var u8array = new Array(len);
 var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
 if (dontAddNull) u8array.length = numBytesWritten;
 return u8array;
}
Module["intArrayFromString"] = intArrayFromString;
function intArrayToString(array) {
 var ret = [];
 for (var i = 0; i < array.length; i++) {
  var chr = array[i];
  if (chr > 255) {
   chr &= 255;
  }
  ret.push(String.fromCharCode(chr));
 }
 return ret.join("");
}
Module["intArrayToString"] = intArrayToString;
function writeStringToMemory(string, buffer, dontAddNull) {
 var array = intArrayFromString(string, dontAddNull);
 var i = 0;
 while (i < array.length) {
  var chr = array[i];
  HEAP8[buffer + i >> 0] = chr;
  i = i + 1;
 }
}
Module["writeStringToMemory"] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
 for (var i = 0; i < array.length; i++) {
  HEAP8[buffer++ >> 0] = array[i];
 }
}
Module["writeArrayToMemory"] = writeArrayToMemory;
function writeAsciiToMemory(str, buffer, dontAddNull) {
 for (var i = 0; i < str.length; ++i) {
  HEAP8[buffer++ >> 0] = str.charCodeAt(i);
 }
 if (!dontAddNull) HEAP8[buffer >> 0] = 0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;
function unSign(value, bits, ignore) {
 if (value >= 0) {
  return value;
 }
 return bits <= 32 ? 2 * Math.abs(1 << bits - 1) + value : Math.pow(2, bits) + value;
}
function reSign(value, bits, ignore) {
 if (value <= 0) {
  return value;
 }
 var half = bits <= 32 ? Math.abs(1 << bits - 1) : Math.pow(2, bits - 1);
 if (value >= half && (bits <= 32 || value > half)) {
  value = -2 * half + value;
 }
 return value;
}
if (!Math["imul"] || Math["imul"](4294967295, 5) !== -5) Math["imul"] = function imul(a, b) {
 var ah = a >>> 16;
 var al = a & 65535;
 var bh = b >>> 16;
 var bl = b & 65535;
 return al * bl + (ah * bl + al * bh << 16) | 0;
};
Math.imul = Math["imul"];
if (!Math["clz32"]) Math["clz32"] = (function(x) {
 x = x >>> 0;
 for (var i = 0; i < 32; i++) {
  if (x & 1 << 31 - i) return i;
 }
 return 32;
});
Math.clz32 = Math["clz32"];
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null;
function getUniqueRunDependency(id) {
 return id;
}
function addRunDependency(id) {
 runDependencies++;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
}
Module["addRunDependency"] = addRunDependency;
function removeRunDependency(id) {
 runDependencies--;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
 if (runDependencies == 0) {
  if (runDependencyWatcher !== null) {
   clearInterval(runDependencyWatcher);
   runDependencyWatcher = null;
  }
  if (dependenciesFulfilled) {
   var callback = dependenciesFulfilled;
   dependenciesFulfilled = null;
   callback();
  }
 }
}
Module["removeRunDependency"] = removeRunDependency;
Module["preloadedImages"] = {};
Module["preloadedAudios"] = {};
var memoryInitializer = null;
var ASM_CONSTS = [ (function($0, $1, $2) {
 {
  var w = $0;
  var h = $1;
  var pixels = $2;
  if (!Module["SDL2"]) Module["SDL2"] = {};
  var SDL2 = Module["SDL2"];
  if (SDL2.ctxCanvas !== Module["canvas"]) {
   SDL2.ctx = Module["createContext"](Module["canvas"], false, true);
   SDL2.ctxCanvas = Module["canvas"];
  }
  if (SDL2.w !== w || SDL2.h !== h || SDL2.imageCtx !== SDL2.ctx) {
   SDL2.image = SDL2.ctx.createImageData(w, h);
   SDL2.w = w;
   SDL2.h = h;
   SDL2.imageCtx = SDL2.ctx;
  }
  var data = SDL2.image.data;
  var src = pixels >> 2;
  var dst = 0;
  var num;
  if (typeof CanvasPixelArray !== "undefined" && data instanceof CanvasPixelArray) {
   num = data.length;
   while (dst < num) {
    var val = HEAP32[src];
    data[dst] = val & 255;
    data[dst + 1] = val >> 8 & 255;
    data[dst + 2] = val >> 16 & 255;
    data[dst + 3] = 255;
    src++;
    dst += 4;
   }
  } else {
   if (SDL2.data32Data !== data) {
    SDL2.data32 = new Int32Array(data.buffer);
    SDL2.data8 = new Uint8Array(data.buffer);
   }
   var data32 = SDL2.data32;
   num = data32.length;
   data32.set(HEAP32.subarray(src, src + num));
   var data8 = SDL2.data8;
   var i = 3;
   var j = i + 4 * num;
   if (num % 8 == 0) {
    while (i < j) {
     data8[i] = 255;
     i = i + 4 | 0;
     data8[i] = 255;
     i = i + 4 | 0;
     data8[i] = 255;
     i = i + 4 | 0;
     data8[i] = 255;
     i = i + 4 | 0;
     data8[i] = 255;
     i = i + 4 | 0;
     data8[i] = 255;
     i = i + 4 | 0;
     data8[i] = 255;
     i = i + 4 | 0;
     data8[i] = 255;
     i = i + 4 | 0;
    }
   } else {
    while (i < j) {
     data8[i] = 255;
     i = i + 4 | 0;
    }
   }
  }
  SDL2.ctx.putImageData(SDL2.image, 0, 0);
  return 0;
 }
}), (function($0) {
 {
  if (Module["canvas"]) {
   Module["canvas"].style["cursor"] = Module["Pointer_stringify"]($0);
  }
  return 0;
 }
}), (function() {
 if (Module["canvas"]) {
  Module["canvas"].style["cursor"] = "none";
 }
}), (function() {
 {
  if (typeof AudioContext !== "undefined") {
   return 1;
  } else if (typeof webkitAudioContext !== "undefined") {
   return 1;
  }
  return 0;
 }
}), (function() {
 {
  if (typeof SDL2 === "undefined") SDL2 = {};
  if (typeof SDL2.audio === "undefined") SDL2.audio = {};
  if (!SDL2.audioContext) {
   if (typeof AudioContext !== "undefined") {
    SDL2.audioContext = new AudioContext;
   } else if (typeof webkitAudioContext !== "undefined") {
    SDL2.audioContext = new webkitAudioContext;
   } else {
    return -1;
   }
  }
  return 0;
 }
}), (function() {
 {
  return SDL2.audioContext["sampleRate"];
 }
}), (function($0, $1, $2, $3) {
 {
  SDL2.audio.scriptProcessorNode = SDL2.audioContext["createScriptProcessor"]($1, 0, $0);
  SDL2.audio.scriptProcessorNode["onaudioprocess"] = (function(e) {
   SDL2.audio.currentOutputBuffer = e["outputBuffer"];
   Runtime.dynCall("vi", $2, [ $3 ]);
  });
  SDL2.audio.scriptProcessorNode["connect"](SDL2.audioContext["destination"]);
 }
}), (function($0, $1) {
 {
  var numChannels = SDL2.audio.currentOutputBuffer["numberOfChannels"];
  for (var c = 0; c < numChannels; ++c) {
   var channelData = SDL2.audio.currentOutputBuffer["getChannelData"](c);
   if (channelData.length != $1) {
    throw "Web Audio output buffer length mismatch! Destination size: " + channelData.length + " samples vs expected " + $1 + " samples!";
   }
   for (var j = 0; j < $1; ++j) {
    channelData[j] = HEAPF32[$0 + (j * numChannels + c << 2) >> 2];
   }
  }
 }
}), (function() {
 {
  return screen.width;
 }
}), (function() {
 {
  return screen.height;
 }
}), (function($0) {
 {
  if (typeof Module["setWindowTitle"] !== "undefined") {
   Module["setWindowTitle"](Module["Pointer_stringify"]($0));
  }
  return 0;
 }
}), (function($0, $1) {
 {
  Module.printErr("bad name in getProcAddress: " + [ Pointer_stringify($0), Pointer_stringify($1) ]);
 }
}) ];
function _emscripten_asm_const_0(code) {
 return ASM_CONSTS[code]();
}
function _emscripten_asm_const_1(code, a0) {
 return ASM_CONSTS[code](a0);
}
function _emscripten_asm_const_2(code, a0, a1) {
 return ASM_CONSTS[code](a0, a1);
}
function _emscripten_asm_const_3(code, a0, a1, a2) {
 return ASM_CONSTS[code](a0, a1, a2);
}
function _emscripten_asm_const_4(code, a0, a1, a2, a3) {
 return ASM_CONSTS[code](a0, a1, a2, a3);
}
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 63776;
__ATINIT__.push({
 func: (function() {
  __GLOBAL__I_000101();
 })
}, {
 func: (function() {
  __GLOBAL__sub_I_iostream_cpp();
 })
});
memoryInitializer = "triangle.html.mem";
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) {
 HEAP8[tempDoublePtr] = HEAP8[ptr];
 HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];
 HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];
 HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];
}
function copyTempDouble(ptr) {
 HEAP8[tempDoublePtr] = HEAP8[ptr];
 HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];
 HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];
 HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];
 HEAP8[tempDoublePtr + 4] = HEAP8[ptr + 4];
 HEAP8[tempDoublePtr + 5] = HEAP8[ptr + 5];
 HEAP8[tempDoublePtr + 6] = HEAP8[ptr + 6];
 HEAP8[tempDoublePtr + 7] = HEAP8[ptr + 7];
}
var JSEvents = {
 keyEvent: 0,
 mouseEvent: 0,
 wheelEvent: 0,
 uiEvent: 0,
 focusEvent: 0,
 deviceOrientationEvent: 0,
 deviceMotionEvent: 0,
 fullscreenChangeEvent: 0,
 pointerlockChangeEvent: 0,
 visibilityChangeEvent: 0,
 touchEvent: 0,
 previousFullscreenElement: null,
 previousScreenX: null,
 previousScreenY: null,
 removeEventListenersRegistered: false,
 registerRemoveEventListeners: (function() {
  if (!JSEvents.removeEventListenersRegistered) {
   __ATEXIT__.push((function() {
    for (var i = JSEvents.eventHandlers.length - 1; i >= 0; --i) {
     JSEvents._removeHandler(i);
    }
   }));
   JSEvents.removeEventListenersRegistered = true;
  }
 }),
 findEventTarget: (function(target) {
  if (target) {
   if (typeof target == "number") {
    target = Pointer_stringify(target);
   }
   if (target == "#window") return window; else if (target == "#document") return document; else if (target == "#screen") return window.screen; else if (target == "#canvas") return Module["canvas"];
   if (typeof target == "string") return document.getElementById(target); else return target;
  } else {
   return window;
  }
 }),
 deferredCalls: [],
 deferCall: (function(targetFunction, precedence, argsList) {
  function arraysHaveEqualContent(arrA, arrB) {
   if (arrA.length != arrB.length) return false;
   for (var i in arrA) {
    if (arrA[i] != arrB[i]) return false;
   }
   return true;
  }
  for (var i in JSEvents.deferredCalls) {
   var call = JSEvents.deferredCalls[i];
   if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
    return;
   }
  }
  JSEvents.deferredCalls.push({
   targetFunction: targetFunction,
   precedence: precedence,
   argsList: argsList
  });
  JSEvents.deferredCalls.sort((function(x, y) {
   return x.precedence < y.precedence;
  }));
 }),
 removeDeferredCalls: (function(targetFunction) {
  for (var i = 0; i < JSEvents.deferredCalls.length; ++i) {
   if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
    JSEvents.deferredCalls.splice(i, 1);
    --i;
   }
  }
 }),
 canPerformEventHandlerRequests: (function() {
  return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
 }),
 runDeferredCalls: (function() {
  if (!JSEvents.canPerformEventHandlerRequests()) {
   return;
  }
  for (var i = 0; i < JSEvents.deferredCalls.length; ++i) {
   var call = JSEvents.deferredCalls[i];
   JSEvents.deferredCalls.splice(i, 1);
   --i;
   call.targetFunction.apply(this, call.argsList);
  }
 }),
 inEventHandler: 0,
 currentEventHandler: null,
 eventHandlers: [],
 isInternetExplorer: (function() {
  return navigator.userAgent.indexOf("MSIE") !== -1 || navigator.appVersion.indexOf("Trident/") > 0;
 }),
 removeAllHandlersOnTarget: (function(target, eventTypeString) {
  for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
   if (JSEvents.eventHandlers[i].target == target && (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
    JSEvents._removeHandler(i--);
   }
  }
 }),
 _removeHandler: (function(i) {
  var h = JSEvents.eventHandlers[i];
  h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
  JSEvents.eventHandlers.splice(i, 1);
 }),
 registerOrRemoveHandler: (function(eventHandler) {
  var jsEventHandler = function jsEventHandler(event) {
   ++JSEvents.inEventHandler;
   JSEvents.currentEventHandler = eventHandler;
   JSEvents.runDeferredCalls();
   eventHandler.handlerFunc(event);
   JSEvents.runDeferredCalls();
   --JSEvents.inEventHandler;
  };
  if (eventHandler.callbackfunc) {
   eventHandler.eventListenerFunc = jsEventHandler;
   eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
   JSEvents.eventHandlers.push(eventHandler);
   JSEvents.registerRemoveEventListeners();
  } else {
   for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
    if (JSEvents.eventHandlers[i].target == eventHandler.target && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
     JSEvents._removeHandler(i--);
    }
   }
  }
 }),
 registerKeyEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.keyEvent) {
   JSEvents.keyEvent = _malloc(164);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   writeStringToMemory(e.key ? e.key : "", JSEvents.keyEvent + 0);
   writeStringToMemory(e.code ? e.code : "", JSEvents.keyEvent + 32);
   HEAP32[JSEvents.keyEvent + 64 >> 2] = e.location;
   HEAP32[JSEvents.keyEvent + 68 >> 2] = e.ctrlKey;
   HEAP32[JSEvents.keyEvent + 72 >> 2] = e.shiftKey;
   HEAP32[JSEvents.keyEvent + 76 >> 2] = e.altKey;
   HEAP32[JSEvents.keyEvent + 80 >> 2] = e.metaKey;
   HEAP32[JSEvents.keyEvent + 84 >> 2] = e.repeat;
   writeStringToMemory(e.locale ? e.locale : "", JSEvents.keyEvent + 88);
   writeStringToMemory(e.char ? e.char : "", JSEvents.keyEvent + 120);
   HEAP32[JSEvents.keyEvent + 152 >> 2] = e.charCode;
   HEAP32[JSEvents.keyEvent + 156 >> 2] = e.keyCode;
   HEAP32[JSEvents.keyEvent + 160 >> 2] = e.which;
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.keyEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: JSEvents.findEventTarget(target),
   allowsDeferredCalls: JSEvents.isInternetExplorer() ? false : true,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 getBoundingClientRectOrZeros: (function(target) {
  return target.getBoundingClientRect ? target.getBoundingClientRect() : {
   left: 0,
   top: 0
  };
 }),
 fillMouseEventData: (function(eventStruct, e, target) {
  HEAPF64[eventStruct >> 3] = JSEvents.tick();
  HEAP32[eventStruct + 8 >> 2] = e.screenX;
  HEAP32[eventStruct + 12 >> 2] = e.screenY;
  HEAP32[eventStruct + 16 >> 2] = e.clientX;
  HEAP32[eventStruct + 20 >> 2] = e.clientY;
  HEAP32[eventStruct + 24 >> 2] = e.ctrlKey;
  HEAP32[eventStruct + 28 >> 2] = e.shiftKey;
  HEAP32[eventStruct + 32 >> 2] = e.altKey;
  HEAP32[eventStruct + 36 >> 2] = e.metaKey;
  HEAP16[eventStruct + 40 >> 1] = e.button;
  HEAP16[eventStruct + 42 >> 1] = e.buttons;
  HEAP32[eventStruct + 44 >> 2] = e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || e.screenX - JSEvents.previousScreenX;
  HEAP32[eventStruct + 48 >> 2] = e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || e.screenY - JSEvents.previousScreenY;
  if (Module["canvas"]) {
   var rect = Module["canvas"].getBoundingClientRect();
   HEAP32[eventStruct + 60 >> 2] = e.clientX - rect.left;
   HEAP32[eventStruct + 64 >> 2] = e.clientY - rect.top;
  } else {
   HEAP32[eventStruct + 60 >> 2] = 0;
   HEAP32[eventStruct + 64 >> 2] = 0;
  }
  if (target) {
   var rect = JSEvents.getBoundingClientRectOrZeros(target);
   HEAP32[eventStruct + 52 >> 2] = e.clientX - rect.left;
   HEAP32[eventStruct + 56 >> 2] = e.clientY - rect.top;
  } else {
   HEAP32[eventStruct + 52 >> 2] = 0;
   HEAP32[eventStruct + 56 >> 2] = 0;
  }
  JSEvents.previousScreenX = e.screenX;
  JSEvents.previousScreenY = e.screenY;
 }),
 registerMouseEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.mouseEvent) {
   JSEvents.mouseEvent = _malloc(72);
  }
  target = JSEvents.findEventTarget(target);
  var handlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillMouseEventData(JSEvents.mouseEvent, e, target);
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.mouseEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: target,
   allowsDeferredCalls: eventTypeString != "mousemove" && eventTypeString != "mouseenter" && eventTypeString != "mouseleave",
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  if (JSEvents.isInternetExplorer() && eventTypeString == "mousedown") eventHandler.allowsDeferredCalls = false;
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 registerWheelEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.wheelEvent) {
   JSEvents.wheelEvent = _malloc(104);
  }
  target = JSEvents.findEventTarget(target);
  var wheelHandlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
   HEAPF64[JSEvents.wheelEvent + 72 >> 3] = e["deltaX"];
   HEAPF64[JSEvents.wheelEvent + 80 >> 3] = e["deltaY"];
   HEAPF64[JSEvents.wheelEvent + 88 >> 3] = e["deltaZ"];
   HEAP32[JSEvents.wheelEvent + 96 >> 2] = e["deltaMode"];
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.wheelEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var mouseWheelHandlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
   HEAPF64[JSEvents.wheelEvent + 72 >> 3] = e["wheelDeltaX"];
   HEAPF64[JSEvents.wheelEvent + 80 >> 3] = -e["wheelDeltaY"];
   HEAPF64[JSEvents.wheelEvent + 88 >> 3] = 0;
   HEAP32[JSEvents.wheelEvent + 96 >> 2] = 0;
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.wheelEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: target,
   allowsDeferredCalls: true,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: eventTypeString == "wheel" ? wheelHandlerFunc : mouseWheelHandlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 pageScrollPos: (function() {
  if (window.pageXOffset > 0 || window.pageYOffset > 0) {
   return [ window.pageXOffset, window.pageYOffset ];
  }
  if (typeof document.documentElement.scrollLeft !== "undefined" || typeof document.documentElement.scrollTop !== "undefined") {
   return [ document.documentElement.scrollLeft, document.documentElement.scrollTop ];
  }
  return [ document.body.scrollLeft | 0, document.body.scrollTop | 0 ];
 }),
 registerUiEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.uiEvent) {
   JSEvents.uiEvent = _malloc(36);
  }
  if (eventTypeString == "scroll" && !target) {
   target = document;
  } else {
   target = JSEvents.findEventTarget(target);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   if (e.target != target) {
    return;
   }
   var scrollPos = JSEvents.pageScrollPos();
   HEAP32[JSEvents.uiEvent >> 2] = e.detail;
   HEAP32[JSEvents.uiEvent + 4 >> 2] = document.body.clientWidth;
   HEAP32[JSEvents.uiEvent + 8 >> 2] = document.body.clientHeight;
   HEAP32[JSEvents.uiEvent + 12 >> 2] = window.innerWidth;
   HEAP32[JSEvents.uiEvent + 16 >> 2] = window.innerHeight;
   HEAP32[JSEvents.uiEvent + 20 >> 2] = window.outerWidth;
   HEAP32[JSEvents.uiEvent + 24 >> 2] = window.outerHeight;
   HEAP32[JSEvents.uiEvent + 28 >> 2] = scrollPos[0];
   HEAP32[JSEvents.uiEvent + 32 >> 2] = scrollPos[1];
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.uiEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: target,
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 getNodeNameForTarget: (function(target) {
  if (!target) return "";
  if (target == window) return "#window";
  if (target == window.screen) return "#screen";
  return target && target.nodeName ? target.nodeName : "";
 }),
 registerFocusEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.focusEvent) {
   JSEvents.focusEvent = _malloc(256);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   var nodeName = JSEvents.getNodeNameForTarget(e.target);
   var id = e.target.id ? e.target.id : "";
   writeStringToMemory(nodeName, JSEvents.focusEvent + 0);
   writeStringToMemory(id, JSEvents.focusEvent + 128);
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.focusEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: JSEvents.findEventTarget(target),
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 tick: (function() {
  if (window["performance"] && window["performance"]["now"]) return window["performance"]["now"](); else return Date.now();
 }),
 registerDeviceOrientationEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.deviceOrientationEvent) {
   JSEvents.deviceOrientationEvent = _malloc(40);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   HEAPF64[JSEvents.deviceOrientationEvent >> 3] = JSEvents.tick();
   HEAPF64[JSEvents.deviceOrientationEvent + 8 >> 3] = e.alpha;
   HEAPF64[JSEvents.deviceOrientationEvent + 16 >> 3] = e.beta;
   HEAPF64[JSEvents.deviceOrientationEvent + 24 >> 3] = e.gamma;
   HEAP32[JSEvents.deviceOrientationEvent + 32 >> 2] = e.absolute;
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.deviceOrientationEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: JSEvents.findEventTarget(target),
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 registerDeviceMotionEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.deviceMotionEvent) {
   JSEvents.deviceMotionEvent = _malloc(80);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   HEAPF64[JSEvents.deviceOrientationEvent >> 3] = JSEvents.tick();
   HEAPF64[JSEvents.deviceMotionEvent + 8 >> 3] = e.acceleration.x;
   HEAPF64[JSEvents.deviceMotionEvent + 16 >> 3] = e.acceleration.y;
   HEAPF64[JSEvents.deviceMotionEvent + 24 >> 3] = e.acceleration.z;
   HEAPF64[JSEvents.deviceMotionEvent + 32 >> 3] = e.accelerationIncludingGravity.x;
   HEAPF64[JSEvents.deviceMotionEvent + 40 >> 3] = e.accelerationIncludingGravity.y;
   HEAPF64[JSEvents.deviceMotionEvent + 48 >> 3] = e.accelerationIncludingGravity.z;
   HEAPF64[JSEvents.deviceMotionEvent + 56 >> 3] = e.rotationRate.alpha;
   HEAPF64[JSEvents.deviceMotionEvent + 64 >> 3] = e.rotationRate.beta;
   HEAPF64[JSEvents.deviceMotionEvent + 72 >> 3] = e.rotationRate.gamma;
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.deviceMotionEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: JSEvents.findEventTarget(target),
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 screenOrientation: (function() {
  if (!window.screen) return undefined;
  return window.screen.orientation || window.screen.mozOrientation || window.screen.webkitOrientation || window.screen.msOrientation;
 }),
 fillOrientationChangeEventData: (function(eventStruct, e) {
  var orientations = [ "portrait-primary", "portrait-secondary", "landscape-primary", "landscape-secondary" ];
  var orientations2 = [ "portrait", "portrait", "landscape", "landscape" ];
  var orientationString = JSEvents.screenOrientation();
  var orientation = orientations.indexOf(orientationString);
  if (orientation == -1) {
   orientation = orientations2.indexOf(orientationString);
  }
  HEAP32[eventStruct >> 2] = 1 << orientation;
  HEAP32[eventStruct + 4 >> 2] = window.orientation;
 }),
 registerOrientationChangeEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.orientationChangeEvent) {
   JSEvents.orientationChangeEvent = _malloc(8);
  }
  if (!target) {
   target = window.screen;
  } else {
   target = JSEvents.findEventTarget(target);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillOrientationChangeEventData(JSEvents.orientationChangeEvent, e);
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.orientationChangeEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  if (eventTypeString == "orientationchange" && window.screen.mozOrientation !== undefined) {
   eventTypeString = "mozorientationchange";
  }
  var eventHandler = {
   target: target,
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 fullscreenEnabled: (function() {
  return document.fullscreenEnabled || document.mozFullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
 }),
 fillFullscreenChangeEventData: (function(eventStruct, e) {
  var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
  var isFullscreen = !!fullscreenElement;
  HEAP32[eventStruct >> 2] = isFullscreen;
  HEAP32[eventStruct + 4 >> 2] = JSEvents.fullscreenEnabled();
  var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
  var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
  var id = reportedElement && reportedElement.id ? reportedElement.id : "";
  writeStringToMemory(nodeName, eventStruct + 8);
  writeStringToMemory(id, eventStruct + 136);
  HEAP32[eventStruct + 264 >> 2] = reportedElement ? reportedElement.clientWidth : 0;
  HEAP32[eventStruct + 268 >> 2] = reportedElement ? reportedElement.clientHeight : 0;
  HEAP32[eventStruct + 272 >> 2] = screen.width;
  HEAP32[eventStruct + 276 >> 2] = screen.height;
  if (isFullscreen) {
   JSEvents.previousFullscreenElement = fullscreenElement;
  }
 }),
 registerFullscreenChangeEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.fullscreenChangeEvent) {
   JSEvents.fullscreenChangeEvent = _malloc(280);
  }
  if (!target) {
   target = document;
  } else {
   target = JSEvents.findEventTarget(target);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillFullscreenChangeEventData(JSEvents.fullscreenChangeEvent, e);
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.fullscreenChangeEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: target,
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 resizeCanvasForFullscreen: (function(target, strategy) {
  var restoreOldStyle = __registerRestoreOldStyle(target);
  var cssWidth = strategy.softFullscreen ? window.innerWidth : screen.width;
  var cssHeight = strategy.softFullscreen ? window.innerHeight : screen.height;
  var rect = target.getBoundingClientRect();
  var windowedCssWidth = rect.right - rect.left;
  var windowedCssHeight = rect.bottom - rect.top;
  var windowedRttWidth = target.width;
  var windowedRttHeight = target.height;
  if (strategy.scaleMode == 3) {
   __setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
   cssWidth = windowedCssWidth;
   cssHeight = windowedCssHeight;
  } else if (strategy.scaleMode == 2) {
   if (cssWidth * windowedRttHeight < windowedRttWidth * cssHeight) {
    var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
    __setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
    cssHeight = desiredCssHeight;
   } else {
    var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
    __setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
    cssWidth = desiredCssWidth;
   }
  }
  if (!target.style.backgroundColor) target.style.backgroundColor = "black";
  if (!document.body.style.backgroundColor) document.body.style.backgroundColor = "black";
  target.style.width = cssWidth + "px";
  target.style.height = cssHeight + "px";
  if (strategy.filteringMode == 1) {
   target.style.imageRendering = "optimizeSpeed";
   target.style.imageRendering = "-moz-crisp-edges";
   target.style.imageRendering = "-o-crisp-edges";
   target.style.imageRendering = "-webkit-optimize-contrast";
   target.style.imageRendering = "optimize-contrast";
   target.style.imageRendering = "crisp-edges";
   target.style.imageRendering = "pixelated";
  }
  var dpiScale = strategy.canvasResolutionScaleMode == 2 ? window.devicePixelRatio : 1;
  if (strategy.canvasResolutionScaleMode != 0) {
   target.width = cssWidth * dpiScale;
   target.height = cssHeight * dpiScale;
   if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, target.width, target.height);
  }
  return restoreOldStyle;
 }),
 requestFullscreen: (function(target, strategy) {
  if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
   JSEvents.resizeCanvasForFullscreen(target, strategy);
  }
  if (target.requestFullscreen) {
   target.requestFullscreen();
  } else if (target.msRequestFullscreen) {
   target.msRequestFullscreen();
  } else if (target.mozRequestFullScreen) {
   target.mozRequestFullScreen();
  } else if (target.mozRequestFullscreen) {
   target.mozRequestFullscreen();
  } else if (target.webkitRequestFullscreen) {
   target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
  } else {
   if (typeof JSEvents.fullscreenEnabled() === "undefined") {
    return -1;
   } else {
    return -3;
   }
  }
  if (strategy.canvasResizedCallback) {
   Runtime.dynCall("iiii", strategy.canvasResizedCallback, [ 37, 0, strategy.canvasResizedCallbackUserData ]);
  }
  return 0;
 }),
 fillPointerlockChangeEventData: (function(eventStruct, e) {
  var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
  var isPointerlocked = !!pointerLockElement;
  HEAP32[eventStruct >> 2] = isPointerlocked;
  var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
  var id = pointerLockElement && pointerLockElement.id ? pointerLockElement.id : "";
  writeStringToMemory(nodeName, eventStruct + 4);
  writeStringToMemory(id, eventStruct + 132);
 }),
 registerPointerlockChangeEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.pointerlockChangeEvent) {
   JSEvents.pointerlockChangeEvent = _malloc(260);
  }
  if (!target) {
   target = document;
  } else {
   target = JSEvents.findEventTarget(target);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillPointerlockChangeEventData(JSEvents.pointerlockChangeEvent, e);
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.pointerlockChangeEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: target,
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 requestPointerLock: (function(target) {
  if (target.requestPointerLock) {
   target.requestPointerLock();
  } else if (target.mozRequestPointerLock) {
   target.mozRequestPointerLock();
  } else if (target.webkitRequestPointerLock) {
   target.webkitRequestPointerLock();
  } else if (target.msRequestPointerLock) {
   target.msRequestPointerLock();
  } else {
   if (document.body.requestPointerLock || document.body.mozRequestPointerLock || document.body.webkitRequestPointerLock || document.body.msRequestPointerLock) {
    return -3;
   } else {
    return -1;
   }
  }
  return 0;
 }),
 fillVisibilityChangeEventData: (function(eventStruct, e) {
  var visibilityStates = [ "hidden", "visible", "prerender", "unloaded" ];
  var visibilityState = visibilityStates.indexOf(document.visibilityState);
  HEAP32[eventStruct >> 2] = document.hidden;
  HEAP32[eventStruct + 4 >> 2] = visibilityState;
 }),
 registerVisibilityChangeEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.visibilityChangeEvent) {
   JSEvents.visibilityChangeEvent = _malloc(8);
  }
  if (!target) {
   target = document;
  } else {
   target = JSEvents.findEventTarget(target);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillVisibilityChangeEventData(JSEvents.visibilityChangeEvent, e);
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.visibilityChangeEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: target,
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 registerTouchEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.touchEvent) {
   JSEvents.touchEvent = _malloc(1684);
  }
  target = JSEvents.findEventTarget(target);
  var handlerFunc = (function(event) {
   var e = event || window.event;
   var touches = {};
   for (var i = 0; i < e.touches.length; ++i) {
    var touch = e.touches[i];
    touches[touch.identifier] = touch;
   }
   for (var i = 0; i < e.changedTouches.length; ++i) {
    var touch = e.changedTouches[i];
    touches[touch.identifier] = touch;
    touch.changed = true;
   }
   for (var i = 0; i < e.targetTouches.length; ++i) {
    var touch = e.targetTouches[i];
    touches[touch.identifier].onTarget = true;
   }
   var ptr = JSEvents.touchEvent;
   HEAP32[ptr + 4 >> 2] = e.ctrlKey;
   HEAP32[ptr + 8 >> 2] = e.shiftKey;
   HEAP32[ptr + 12 >> 2] = e.altKey;
   HEAP32[ptr + 16 >> 2] = e.metaKey;
   ptr += 20;
   var canvasRect = Module["canvas"] ? Module["canvas"].getBoundingClientRect() : undefined;
   var targetRect = JSEvents.getBoundingClientRectOrZeros(target);
   var numTouches = 0;
   for (var i in touches) {
    var t = touches[i];
    HEAP32[ptr >> 2] = t.identifier;
    HEAP32[ptr + 4 >> 2] = t.screenX;
    HEAP32[ptr + 8 >> 2] = t.screenY;
    HEAP32[ptr + 12 >> 2] = t.clientX;
    HEAP32[ptr + 16 >> 2] = t.clientY;
    HEAP32[ptr + 20 >> 2] = t.pageX;
    HEAP32[ptr + 24 >> 2] = t.pageY;
    HEAP32[ptr + 28 >> 2] = t.changed;
    HEAP32[ptr + 32 >> 2] = t.onTarget;
    if (canvasRect) {
     HEAP32[ptr + 44 >> 2] = t.clientX - canvasRect.left;
     HEAP32[ptr + 48 >> 2] = t.clientY - canvasRect.top;
    } else {
     HEAP32[ptr + 44 >> 2] = 0;
     HEAP32[ptr + 48 >> 2] = 0;
    }
    HEAP32[ptr + 36 >> 2] = t.clientX - targetRect.left;
    HEAP32[ptr + 40 >> 2] = t.clientY - targetRect.top;
    ptr += 52;
    if (++numTouches >= 32) {
     break;
    }
   }
   HEAP32[JSEvents.touchEvent >> 2] = numTouches;
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.touchEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: target,
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 fillGamepadEventData: (function(eventStruct, e) {
  HEAPF64[eventStruct >> 3] = e.timestamp;
  for (var i = 0; i < e.axes.length; ++i) {
   HEAPF64[eventStruct + i * 8 + 16 >> 3] = e.axes[i];
  }
  for (var i = 0; i < e.buttons.length; ++i) {
   if (typeof e.buttons[i] === "object") {
    HEAPF64[eventStruct + i * 8 + 528 >> 3] = e.buttons[i].value;
   } else {
    HEAPF64[eventStruct + i * 8 + 528 >> 3] = e.buttons[i];
   }
  }
  for (var i = 0; i < e.buttons.length; ++i) {
   if (typeof e.buttons[i] === "object") {
    HEAP32[eventStruct + i * 4 + 1040 >> 2] = e.buttons[i].pressed;
   } else {
    HEAP32[eventStruct + i * 4 + 1040 >> 2] = e.buttons[i] == 1;
   }
  }
  HEAP32[eventStruct + 1296 >> 2] = e.connected;
  HEAP32[eventStruct + 1300 >> 2] = e.index;
  HEAP32[eventStruct + 8 >> 2] = e.axes.length;
  HEAP32[eventStruct + 12 >> 2] = e.buttons.length;
  writeStringToMemory(e.id, eventStruct + 1304);
  writeStringToMemory(e.mapping, eventStruct + 1368);
 }),
 registerGamepadEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.gamepadEvent) {
   JSEvents.gamepadEvent = _malloc(1432);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillGamepadEventData(JSEvents.gamepadEvent, e.gamepad);
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.gamepadEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: JSEvents.findEventTarget(target),
   allowsDeferredCalls: true,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 registerBeforeUnloadEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  var handlerFunc = (function(event) {
   var e = event || window.event;
   var confirmationMessage = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, 0, userData ]);
   if (confirmationMessage) {
    confirmationMessage = Pointer_stringify(confirmationMessage);
   }
   if (confirmationMessage) {
    e.preventDefault();
    e.returnValue = confirmationMessage;
    return confirmationMessage;
   }
  });
  var eventHandler = {
   target: JSEvents.findEventTarget(target),
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 battery: (function() {
  return navigator.battery || navigator.mozBattery || navigator.webkitBattery;
 }),
 fillBatteryEventData: (function(eventStruct, e) {
  HEAPF64[eventStruct >> 3] = e.chargingTime;
  HEAPF64[eventStruct + 8 >> 3] = e.dischargingTime;
  HEAPF64[eventStruct + 16 >> 3] = e.level;
  HEAP32[eventStruct + 24 >> 2] = e.charging;
 }),
 registerBatteryEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.batteryEvent) {
   JSEvents.batteryEvent = _malloc(32);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillBatteryEventData(JSEvents.batteryEvent, JSEvents.battery());
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.batteryEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: JSEvents.findEventTarget(target),
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 registerWebGlEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!target) {
   target = Module["canvas"];
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, 0, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: JSEvents.findEventTarget(target),
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 })
};
function _emscripten_set_visibilitychange_callback(userData, useCapture, callbackfunc) {
 JSEvents.registerVisibilityChangeEventCallback(document, userData, useCapture, callbackfunc, 21, "visibilitychange");
 return 0;
}
var GL = {
 counter: 1,
 lastError: 0,
 buffers: [],
 mappedBuffers: {},
 programs: [],
 framebuffers: [],
 renderbuffers: [],
 textures: [],
 uniforms: [],
 shaders: [],
 vaos: [],
 contexts: [],
 currentContext: null,
 byteSizeByTypeRoot: 5120,
 byteSizeByType: [ 1, 1, 2, 2, 4, 4, 4, 2, 3, 4, 8 ],
 programInfos: {},
 stringCache: {},
 packAlignment: 4,
 unpackAlignment: 4,
 init: (function() {
  GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
  for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
   GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i + 1);
  }
 }),
 recordError: function recordError(errorCode) {
  if (!GL.lastError) {
   GL.lastError = errorCode;
  }
 },
 getNewId: (function(table) {
  var ret = GL.counter++;
  for (var i = table.length; i < ret; i++) {
   table[i] = null;
  }
  return ret;
 }),
 MINI_TEMP_BUFFER_SIZE: 16,
 miniTempBuffer: null,
 miniTempBufferViews: [ 0 ],
 getSource: (function(shader, count, string, length) {
  var source = "";
  for (var i = 0; i < count; ++i) {
   var frag;
   if (length) {
    var len = HEAP32[length + i * 4 >> 2];
    if (len < 0) {
     frag = Pointer_stringify(HEAP32[string + i * 4 >> 2]);
    } else {
     frag = Pointer_stringify(HEAP32[string + i * 4 >> 2], len);
    }
   } else {
    frag = Pointer_stringify(HEAP32[string + i * 4 >> 2]);
   }
   source += frag;
  }
  return source;
 }),
 createContext: (function(canvas, webGLContextAttributes) {
  if (typeof webGLContextAttributes.majorVersion === "undefined" && typeof webGLContextAttributes.minorVersion === "undefined") {
   webGLContextAttributes.majorVersion = 1;
   webGLContextAttributes.minorVersion = 0;
  }
  var ctx;
  var errorInfo = "?";
  function onContextCreationError(event) {
   errorInfo = event.statusMessage || errorInfo;
  }
  try {
   canvas.addEventListener("webglcontextcreationerror", onContextCreationError, false);
   try {
    if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
     ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
    } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
     ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
    } else {
     throw "Unsupported WebGL context version " + majorVersion + "." + minorVersion + "!";
    }
   } finally {
    canvas.removeEventListener("webglcontextcreationerror", onContextCreationError, false);
   }
   if (!ctx) throw ":(";
  } catch (e) {
   Module.print("Could not create canvas: " + [ errorInfo, e, JSON.stringify(webGLContextAttributes) ]);
   return 0;
  }
  if (!ctx) return 0;
  return GL.registerContext(ctx, webGLContextAttributes);
 }),
 registerContext: (function(ctx, webGLContextAttributes) {
  var handle = GL.getNewId(GL.contexts);
  var context = {
   handle: handle,
   version: webGLContextAttributes.majorVersion,
   GLctx: ctx
  };
  if (ctx.canvas) ctx.canvas.GLctxObject = context;
  GL.contexts[handle] = context;
  if (typeof webGLContextAttributes["enableExtensionsByDefault"] === "undefined" || webGLContextAttributes.enableExtensionsByDefault) {
   GL.initExtensions(context);
  }
  return handle;
 }),
 makeContextCurrent: (function(contextHandle) {
  var context = GL.contexts[contextHandle];
  if (!context) return false;
  GLctx = Module.ctx = context.GLctx;
  GL.currentContext = context;
  return true;
 }),
 getContext: (function(contextHandle) {
  return GL.contexts[contextHandle];
 }),
 deleteContext: (function(contextHandle) {
  if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
  if (typeof JSEvents === "object") JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas);
  if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined;
  GL.contexts[contextHandle] = null;
 }),
 initExtensions: (function(context) {
  if (!context) context = GL.currentContext;
  if (context.initExtensionsDone) return;
  context.initExtensionsDone = true;
  var GLctx = context.GLctx;
  context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  if (context.version < 2) {
   var instancedArraysExt = GLctx.getExtension("ANGLE_instanced_arrays");
   if (instancedArraysExt) {
    GLctx["vertexAttribDivisor"] = (function(index, divisor) {
     instancedArraysExt["vertexAttribDivisorANGLE"](index, divisor);
    });
    GLctx["drawArraysInstanced"] = (function(mode, first, count, primcount) {
     instancedArraysExt["drawArraysInstancedANGLE"](mode, first, count, primcount);
    });
    GLctx["drawElementsInstanced"] = (function(mode, count, type, indices, primcount) {
     instancedArraysExt["drawElementsInstancedANGLE"](mode, count, type, indices, primcount);
    });
   }
   var vaoExt = GLctx.getExtension("OES_vertex_array_object");
   if (vaoExt) {
    GLctx["createVertexArray"] = (function() {
     return vaoExt["createVertexArrayOES"]();
    });
    GLctx["deleteVertexArray"] = (function(vao) {
     vaoExt["deleteVertexArrayOES"](vao);
    });
    GLctx["bindVertexArray"] = (function(vao) {
     vaoExt["bindVertexArrayOES"](vao);
    });
    GLctx["isVertexArray"] = (function(vao) {
     return vaoExt["isVertexArrayOES"](vao);
    });
   }
   var drawBuffersExt = GLctx.getExtension("WEBGL_draw_buffers");
   if (drawBuffersExt) {
    GLctx["drawBuffers"] = (function(n, bufs) {
     drawBuffersExt["drawBuffersWEBGL"](n, bufs);
    });
   }
  }
  var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives", "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture", "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays", "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc", "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float", "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources", "EXT_shader_texture_lod" ];
  function shouldEnableAutomatically(extension) {
   var ret = false;
   automaticallyEnabledExtensions.forEach((function(include) {
    if (ext.indexOf(include) != -1) {
     ret = true;
    }
   }));
   return ret;
  }
  var exts = GLctx.getSupportedExtensions();
  if (exts && exts.length > 0) {
   GLctx.getSupportedExtensions().forEach((function(ext) {
    if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
     GLctx.getExtension(ext);
    }
   }));
  }
 }),
 populateUniformTable: (function(program) {
  var p = GL.programs[program];
  GL.programInfos[program] = {
   uniforms: {},
   maxUniformLength: 0,
   maxAttributeLength: -1
  };
  var ptable = GL.programInfos[program];
  var utable = ptable.uniforms;
  var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
  for (var i = 0; i < numUniforms; ++i) {
   var u = GLctx.getActiveUniform(p, i);
   var name = u.name;
   ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length + 1);
   if (name.indexOf("]", name.length - 1) !== -1) {
    var ls = name.lastIndexOf("[");
    name = name.slice(0, ls);
   }
   var loc = GLctx.getUniformLocation(p, name);
   var id = GL.getNewId(GL.uniforms);
   utable[name] = [ u.size, id ];
   GL.uniforms[id] = loc;
   for (var j = 1; j < u.size; ++j) {
    var n = name + "[" + j + "]";
    loc = GLctx.getUniformLocation(p, n);
    id = GL.getNewId(GL.uniforms);
    GL.uniforms[id] = loc;
   }
  }
 })
};
function _emscripten_glIsRenderbuffer(renderbuffer) {
 var rb = GL.renderbuffers[renderbuffer];
 if (!rb) return 0;
 return GLctx.isRenderbuffer(rb);
}
function _emscripten_glStencilMaskSeparate(x0, x1) {
 GLctx.stencilMaskSeparate(x0, x1);
}
function _eglWaitClient() {
 EGL.setErrorCode(12288);
 return 1;
}
var EGL = {
 errorCode: 12288,
 defaultDisplayInitialized: false,
 currentContext: 0,
 currentReadSurface: 0,
 currentDrawSurface: 0,
 stringCache: {},
 setErrorCode: (function(code) {
  EGL.errorCode = code;
 }),
 chooseConfig: (function(display, attribList, config, config_size, numConfigs) {
  if (display != 62e3) {
   EGL.setErrorCode(12296);
   return 0;
  }
  if ((!config || !config_size) && !numConfigs) {
   EGL.setErrorCode(12300);
   return 0;
  }
  if (numConfigs) {
   HEAP32[numConfigs >> 2] = 1;
  }
  if (config && config_size > 0) {
   HEAP32[config >> 2] = 62002;
  }
  EGL.setErrorCode(12288);
  return 1;
 })
};
function _eglTerminate(display) {
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 EGL.currentContext = 0;
 EGL.currentReadSurface = 0;
 EGL.currentDrawSurface = 0;
 EGL.defaultDisplayInitialized = false;
 EGL.setErrorCode(12288);
 return 1;
}
var _ceilf = Math_ceil;
function _pthread_mutex_lock() {}
function _emscripten_set_mouseleave_callback(target, userData, useCapture, callbackfunc) {
 JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 34, "mouseleave");
 return 0;
}
function _emscripten_glStencilFunc(x0, x1, x2) {
 GLctx.stencilFunc(x0, x1, x2);
}
function _emscripten_glVertexPointer() {
 throw "Legacy GL function (glVertexPointer) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.";
}
function _emscripten_glUniform3iv(location, count, value) {
 location = GL.uniforms[location];
 count *= 3;
 value = HEAP32.subarray(value >> 2, value + count * 4 >> 2);
 GLctx.uniform3iv(location, value);
}
function _emscripten_glShaderSource(shader, count, string, length) {
 var source = GL.getSource(shader, count, string, length);
 GLctx.shaderSource(GL.shaders[shader], source);
}
function _emscripten_glReleaseShaderCompiler() {}
function _emscripten_glIsTexture(texture) {
 var texture = GL.textures[texture];
 if (!texture) return 0;
 return GLctx.isTexture(texture);
}
function _emscripten_glTexParameterf(x0, x1, x2) {
 GLctx.texParameterf(x0, x1, x2);
}
var DLFCN = {
 error: null,
 errorMsg: null,
 loadedLibs: {},
 loadedLibNames: {}
};
function _dlerror() {
 if (DLFCN.errorMsg === null) {
  return 0;
 } else {
  if (DLFCN.error) _free(DLFCN.error);
  var msgArr = intArrayFromString(DLFCN.errorMsg);
  DLFCN.error = allocate(msgArr, "i8", ALLOC_NORMAL);
  DLFCN.errorMsg = null;
  return DLFCN.error;
 }
}
function _eglWaitGL() {
 return _eglWaitClient.apply(null, arguments);
}
var ERRNO_CODES = {
 EPERM: 1,
 ENOENT: 2,
 ESRCH: 3,
 EINTR: 4,
 EIO: 5,
 ENXIO: 6,
 E2BIG: 7,
 ENOEXEC: 8,
 EBADF: 9,
 ECHILD: 10,
 EAGAIN: 11,
 EWOULDBLOCK: 11,
 ENOMEM: 12,
 EACCES: 13,
 EFAULT: 14,
 ENOTBLK: 15,
 EBUSY: 16,
 EEXIST: 17,
 EXDEV: 18,
 ENODEV: 19,
 ENOTDIR: 20,
 EISDIR: 21,
 EINVAL: 22,
 ENFILE: 23,
 EMFILE: 24,
 ENOTTY: 25,
 ETXTBSY: 26,
 EFBIG: 27,
 ENOSPC: 28,
 ESPIPE: 29,
 EROFS: 30,
 EMLINK: 31,
 EPIPE: 32,
 EDOM: 33,
 ERANGE: 34,
 ENOMSG: 42,
 EIDRM: 43,
 ECHRNG: 44,
 EL2NSYNC: 45,
 EL3HLT: 46,
 EL3RST: 47,
 ELNRNG: 48,
 EUNATCH: 49,
 ENOCSI: 50,
 EL2HLT: 51,
 EDEADLK: 35,
 ENOLCK: 37,
 EBADE: 52,
 EBADR: 53,
 EXFULL: 54,
 ENOANO: 55,
 EBADRQC: 56,
 EBADSLT: 57,
 EDEADLOCK: 35,
 EBFONT: 59,
 ENOSTR: 60,
 ENODATA: 61,
 ETIME: 62,
 ENOSR: 63,
 ENONET: 64,
 ENOPKG: 65,
 EREMOTE: 66,
 ENOLINK: 67,
 EADV: 68,
 ESRMNT: 69,
 ECOMM: 70,
 EPROTO: 71,
 EMULTIHOP: 72,
 EDOTDOT: 73,
 EBADMSG: 74,
 ENOTUNIQ: 76,
 EBADFD: 77,
 EREMCHG: 78,
 ELIBACC: 79,
 ELIBBAD: 80,
 ELIBSCN: 81,
 ELIBMAX: 82,
 ELIBEXEC: 83,
 ENOSYS: 38,
 ENOTEMPTY: 39,
 ENAMETOOLONG: 36,
 ELOOP: 40,
 EOPNOTSUPP: 95,
 EPFNOSUPPORT: 96,
 ECONNRESET: 104,
 ENOBUFS: 105,
 EAFNOSUPPORT: 97,
 EPROTOTYPE: 91,
 ENOTSOCK: 88,
 ENOPROTOOPT: 92,
 ESHUTDOWN: 108,
 ECONNREFUSED: 111,
 EADDRINUSE: 98,
 ECONNABORTED: 103,
 ENETUNREACH: 101,
 ENETDOWN: 100,
 ETIMEDOUT: 110,
 EHOSTDOWN: 112,
 EHOSTUNREACH: 113,
 EINPROGRESS: 115,
 EALREADY: 114,
 EDESTADDRREQ: 89,
 EMSGSIZE: 90,
 EPROTONOSUPPORT: 93,
 ESOCKTNOSUPPORT: 94,
 EADDRNOTAVAIL: 99,
 ENETRESET: 102,
 EISCONN: 106,
 ENOTCONN: 107,
 ETOOMANYREFS: 109,
 EUSERS: 87,
 EDQUOT: 122,
 ESTALE: 116,
 ENOTSUP: 95,
 ENOMEDIUM: 123,
 EILSEQ: 84,
 EOVERFLOW: 75,
 ECANCELED: 125,
 ENOTRECOVERABLE: 131,
 EOWNERDEAD: 130,
 ESTRPIPE: 86
};
var ERRNO_MESSAGES = {
 0: "Success",
 1: "Not super-user",
 2: "No such file or directory",
 3: "No such process",
 4: "Interrupted system call",
 5: "I/O error",
 6: "No such device or address",
 7: "Arg list too long",
 8: "Exec format error",
 9: "Bad file number",
 10: "No children",
 11: "No more processes",
 12: "Not enough core",
 13: "Permission denied",
 14: "Bad address",
 15: "Block device required",
 16: "Mount device busy",
 17: "File exists",
 18: "Cross-device link",
 19: "No such device",
 20: "Not a directory",
 21: "Is a directory",
 22: "Invalid argument",
 23: "Too many open files in system",
 24: "Too many open files",
 25: "Not a typewriter",
 26: "Text file busy",
 27: "File too large",
 28: "No space left on device",
 29: "Illegal seek",
 30: "Read only file system",
 31: "Too many links",
 32: "Broken pipe",
 33: "Math arg out of domain of func",
 34: "Math result not representable",
 35: "File locking deadlock error",
 36: "File or path name too long",
 37: "No record locks available",
 38: "Function not implemented",
 39: "Directory not empty",
 40: "Too many symbolic links",
 42: "No message of desired type",
 43: "Identifier removed",
 44: "Channel number out of range",
 45: "Level 2 not synchronized",
 46: "Level 3 halted",
 47: "Level 3 reset",
 48: "Link number out of range",
 49: "Protocol driver not attached",
 50: "No CSI structure available",
 51: "Level 2 halted",
 52: "Invalid exchange",
 53: "Invalid request descriptor",
 54: "Exchange full",
 55: "No anode",
 56: "Invalid request code",
 57: "Invalid slot",
 59: "Bad font file fmt",
 60: "Device not a stream",
 61: "No data (for no delay io)",
 62: "Timer expired",
 63: "Out of streams resources",
 64: "Machine is not on the network",
 65: "Package not installed",
 66: "The object is remote",
 67: "The link has been severed",
 68: "Advertise error",
 69: "Srmount error",
 70: "Communication error on send",
 71: "Protocol error",
 72: "Multihop attempted",
 73: "Cross mount point (not really error)",
 74: "Trying to read unreadable message",
 75: "Value too large for defined data type",
 76: "Given log. name not unique",
 77: "f.d. invalid for this operation",
 78: "Remote address changed",
 79: "Can   access a needed shared lib",
 80: "Accessing a corrupted shared lib",
 81: ".lib section in a.out corrupted",
 82: "Attempting to link in too many libs",
 83: "Attempting to exec a shared library",
 84: "Illegal byte sequence",
 86: "Streams pipe error",
 87: "Too many users",
 88: "Socket operation on non-socket",
 89: "Destination address required",
 90: "Message too long",
 91: "Protocol wrong type for socket",
 92: "Protocol not available",
 93: "Unknown protocol",
 94: "Socket type not supported",
 95: "Not supported",
 96: "Protocol family not supported",
 97: "Address family not supported by protocol family",
 98: "Address already in use",
 99: "Address not available",
 100: "Network interface is not configured",
 101: "Network is unreachable",
 102: "Connection reset by network",
 103: "Connection aborted",
 104: "Connection reset by peer",
 105: "No buffer space available",
 106: "Socket is already connected",
 107: "Socket is not connected",
 108: "Can't send after socket shutdown",
 109: "Too many references",
 110: "Connection timed out",
 111: "Connection refused",
 112: "Host is down",
 113: "Host is unreachable",
 114: "Socket already connected",
 115: "Connection already in progress",
 116: "Stale file handle",
 122: "Quota exceeded",
 123: "No medium (in tape drive)",
 125: "Operation canceled",
 130: "Previous owner died",
 131: "State not recoverable"
};
function ___setErrNo(value) {
 if (Module["___errno_location"]) HEAP32[Module["___errno_location"]() >> 2] = value;
 return value;
}
var PATH = {
 splitPath: (function(filename) {
  var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
  return splitPathRe.exec(filename).slice(1);
 }),
 normalizeArray: (function(parts, allowAboveRoot) {
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
   var last = parts[i];
   if (last === ".") {
    parts.splice(i, 1);
   } else if (last === "..") {
    parts.splice(i, 1);
    up++;
   } else if (up) {
    parts.splice(i, 1);
    up--;
   }
  }
  if (allowAboveRoot) {
   for (; up--; up) {
    parts.unshift("..");
   }
  }
  return parts;
 }),
 normalize: (function(path) {
  var isAbsolute = path.charAt(0) === "/", trailingSlash = path.substr(-1) === "/";
  path = PATH.normalizeArray(path.split("/").filter((function(p) {
   return !!p;
  })), !isAbsolute).join("/");
  if (!path && !isAbsolute) {
   path = ".";
  }
  if (path && trailingSlash) {
   path += "/";
  }
  return (isAbsolute ? "/" : "") + path;
 }),
 dirname: (function(path) {
  var result = PATH.splitPath(path), root = result[0], dir = result[1];
  if (!root && !dir) {
   return ".";
  }
  if (dir) {
   dir = dir.substr(0, dir.length - 1);
  }
  return root + dir;
 }),
 basename: (function(path) {
  if (path === "/") return "/";
  var lastSlash = path.lastIndexOf("/");
  if (lastSlash === -1) return path;
  return path.substr(lastSlash + 1);
 }),
 extname: (function(path) {
  return PATH.splitPath(path)[3];
 }),
 join: (function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return PATH.normalize(paths.join("/"));
 }),
 join2: (function(l, r) {
  return PATH.normalize(l + "/" + r);
 }),
 resolve: (function() {
  var resolvedPath = "", resolvedAbsolute = false;
  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
   var path = i >= 0 ? arguments[i] : FS.cwd();
   if (typeof path !== "string") {
    throw new TypeError("Arguments to path.resolve must be strings");
   } else if (!path) {
    return "";
   }
   resolvedPath = path + "/" + resolvedPath;
   resolvedAbsolute = path.charAt(0) === "/";
  }
  resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter((function(p) {
   return !!p;
  })), !resolvedAbsolute).join("/");
  return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
 }),
 relative: (function(from, to) {
  from = PATH.resolve(from).substr(1);
  to = PATH.resolve(to).substr(1);
  function trim(arr) {
   var start = 0;
   for (; start < arr.length; start++) {
    if (arr[start] !== "") break;
   }
   var end = arr.length - 1;
   for (; end >= 0; end--) {
    if (arr[end] !== "") break;
   }
   if (start > end) return [];
   return arr.slice(start, end - start + 1);
  }
  var fromParts = trim(from.split("/"));
  var toParts = trim(to.split("/"));
  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
   if (fromParts[i] !== toParts[i]) {
    samePartsLength = i;
    break;
   }
  }
  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
   outputParts.push("..");
  }
  outputParts = outputParts.concat(toParts.slice(samePartsLength));
  return outputParts.join("/");
 })
};
var TTY = {
 ttys: [],
 init: (function() {}),
 shutdown: (function() {}),
 register: (function(dev, ops) {
  TTY.ttys[dev] = {
   input: [],
   output: [],
   ops: ops
  };
  FS.registerDevice(dev, TTY.stream_ops);
 }),
 stream_ops: {
  open: (function(stream) {
   var tty = TTY.ttys[stream.node.rdev];
   if (!tty) {
    throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
   }
   stream.tty = tty;
   stream.seekable = false;
  }),
  close: (function(stream) {
   stream.tty.ops.flush(stream.tty);
  }),
  flush: (function(stream) {
   stream.tty.ops.flush(stream.tty);
  }),
  read: (function(stream, buffer, offset, length, pos) {
   if (!stream.tty || !stream.tty.ops.get_char) {
    throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
   }
   var bytesRead = 0;
   for (var i = 0; i < length; i++) {
    var result;
    try {
     result = stream.tty.ops.get_char(stream.tty);
    } catch (e) {
     throw new FS.ErrnoError(ERRNO_CODES.EIO);
    }
    if (result === undefined && bytesRead === 0) {
     throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
    }
    if (result === null || result === undefined) break;
    bytesRead++;
    buffer[offset + i] = result;
   }
   if (bytesRead) {
    stream.node.timestamp = Date.now();
   }
   return bytesRead;
  }),
  write: (function(stream, buffer, offset, length, pos) {
   if (!stream.tty || !stream.tty.ops.put_char) {
    throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
   }
   for (var i = 0; i < length; i++) {
    try {
     stream.tty.ops.put_char(stream.tty, buffer[offset + i]);
    } catch (e) {
     throw new FS.ErrnoError(ERRNO_CODES.EIO);
    }
   }
   if (length) {
    stream.node.timestamp = Date.now();
   }
   return i;
  })
 },
 default_tty_ops: {
  get_char: (function(tty) {
   if (!tty.input.length) {
    var result = null;
    if (ENVIRONMENT_IS_NODE) {
     var BUFSIZE = 256;
     var buf = new Buffer(BUFSIZE);
     var bytesRead = 0;
     var fd = process.stdin.fd;
     var usingDevice = false;
     try {
      fd = fs.openSync("/dev/stdin", "r");
      usingDevice = true;
     } catch (e) {}
     bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
     if (usingDevice) {
      fs.closeSync(fd);
     }
     if (bytesRead > 0) {
      result = buf.slice(0, bytesRead).toString("utf-8");
     } else {
      result = null;
     }
    } else if (typeof window != "undefined" && typeof window.prompt == "function") {
     result = window.prompt("Input: ");
     if (result !== null) {
      result += "\n";
     }
    } else if (typeof readline == "function") {
     result = readline();
     if (result !== null) {
      result += "\n";
     }
    }
    if (!result) {
     return null;
    }
    tty.input = intArrayFromString(result, true);
   }
   return tty.input.shift();
  }),
  put_char: (function(tty, val) {
   if (val === null || val === 10) {
    Module["print"](UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   } else {
    if (val != 0) tty.output.push(val);
   }
  }),
  flush: (function(tty) {
   if (tty.output && tty.output.length > 0) {
    Module["print"](UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   }
  })
 },
 default_tty1_ops: {
  put_char: (function(tty, val) {
   if (val === null || val === 10) {
    Module["printErr"](UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   } else {
    if (val != 0) tty.output.push(val);
   }
  }),
  flush: (function(tty) {
   if (tty.output && tty.output.length > 0) {
    Module["printErr"](UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   }
  })
 }
};
var MEMFS = {
 ops_table: null,
 mount: (function(mount) {
  return MEMFS.createNode(null, "/", 16384 | 511, 0);
 }),
 createNode: (function(parent, name, mode, dev) {
  if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (!MEMFS.ops_table) {
   MEMFS.ops_table = {
    dir: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr,
      lookup: MEMFS.node_ops.lookup,
      mknod: MEMFS.node_ops.mknod,
      rename: MEMFS.node_ops.rename,
      unlink: MEMFS.node_ops.unlink,
      rmdir: MEMFS.node_ops.rmdir,
      readdir: MEMFS.node_ops.readdir,
      symlink: MEMFS.node_ops.symlink
     },
     stream: {
      llseek: MEMFS.stream_ops.llseek
     }
    },
    file: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr
     },
     stream: {
      llseek: MEMFS.stream_ops.llseek,
      read: MEMFS.stream_ops.read,
      write: MEMFS.stream_ops.write,
      allocate: MEMFS.stream_ops.allocate,
      mmap: MEMFS.stream_ops.mmap,
      msync: MEMFS.stream_ops.msync
     }
    },
    link: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr,
      readlink: MEMFS.node_ops.readlink
     },
     stream: {}
    },
    chrdev: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr
     },
     stream: FS.chrdev_stream_ops
    }
   };
  }
  var node = FS.createNode(parent, name, mode, dev);
  if (FS.isDir(node.mode)) {
   node.node_ops = MEMFS.ops_table.dir.node;
   node.stream_ops = MEMFS.ops_table.dir.stream;
   node.contents = {};
  } else if (FS.isFile(node.mode)) {
   node.node_ops = MEMFS.ops_table.file.node;
   node.stream_ops = MEMFS.ops_table.file.stream;
   node.usedBytes = 0;
   node.contents = null;
  } else if (FS.isLink(node.mode)) {
   node.node_ops = MEMFS.ops_table.link.node;
   node.stream_ops = MEMFS.ops_table.link.stream;
  } else if (FS.isChrdev(node.mode)) {
   node.node_ops = MEMFS.ops_table.chrdev.node;
   node.stream_ops = MEMFS.ops_table.chrdev.stream;
  }
  node.timestamp = Date.now();
  if (parent) {
   parent.contents[name] = node;
  }
  return node;
 }),
 getFileDataAsRegularArray: (function(node) {
  if (node.contents && node.contents.subarray) {
   var arr = [];
   for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
   return arr;
  }
  return node.contents;
 }),
 getFileDataAsTypedArray: (function(node) {
  if (!node.contents) return new Uint8Array;
  if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes);
  return new Uint8Array(node.contents);
 }),
 expandFileStorage: (function(node, newCapacity) {
  if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
   node.contents = MEMFS.getFileDataAsRegularArray(node);
   node.usedBytes = node.contents.length;
  }
  if (!node.contents || node.contents.subarray) {
   var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
   if (prevCapacity >= newCapacity) return;
   var CAPACITY_DOUBLING_MAX = 1024 * 1024;
   newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) | 0);
   if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);
   var oldContents = node.contents;
   node.contents = new Uint8Array(newCapacity);
   if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
   return;
  }
  if (!node.contents && newCapacity > 0) node.contents = [];
  while (node.contents.length < newCapacity) node.contents.push(0);
 }),
 resizeFileStorage: (function(node, newSize) {
  if (node.usedBytes == newSize) return;
  if (newSize == 0) {
   node.contents = null;
   node.usedBytes = 0;
   return;
  }
  if (!node.contents || node.contents.subarray) {
   var oldContents = node.contents;
   node.contents = new Uint8Array(new ArrayBuffer(newSize));
   if (oldContents) {
    node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
   }
   node.usedBytes = newSize;
   return;
  }
  if (!node.contents) node.contents = [];
  if (node.contents.length > newSize) node.contents.length = newSize; else while (node.contents.length < newSize) node.contents.push(0);
  node.usedBytes = newSize;
 }),
 node_ops: {
  getattr: (function(node) {
   var attr = {};
   attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
   attr.ino = node.id;
   attr.mode = node.mode;
   attr.nlink = 1;
   attr.uid = 0;
   attr.gid = 0;
   attr.rdev = node.rdev;
   if (FS.isDir(node.mode)) {
    attr.size = 4096;
   } else if (FS.isFile(node.mode)) {
    attr.size = node.usedBytes;
   } else if (FS.isLink(node.mode)) {
    attr.size = node.link.length;
   } else {
    attr.size = 0;
   }
   attr.atime = new Date(node.timestamp);
   attr.mtime = new Date(node.timestamp);
   attr.ctime = new Date(node.timestamp);
   attr.blksize = 4096;
   attr.blocks = Math.ceil(attr.size / attr.blksize);
   return attr;
  }),
  setattr: (function(node, attr) {
   if (attr.mode !== undefined) {
    node.mode = attr.mode;
   }
   if (attr.timestamp !== undefined) {
    node.timestamp = attr.timestamp;
   }
   if (attr.size !== undefined) {
    MEMFS.resizeFileStorage(node, attr.size);
   }
  }),
  lookup: (function(parent, name) {
   throw FS.genericErrors[ERRNO_CODES.ENOENT];
  }),
  mknod: (function(parent, name, mode, dev) {
   return MEMFS.createNode(parent, name, mode, dev);
  }),
  rename: (function(old_node, new_dir, new_name) {
   if (FS.isDir(old_node.mode)) {
    var new_node;
    try {
     new_node = FS.lookupNode(new_dir, new_name);
    } catch (e) {}
    if (new_node) {
     for (var i in new_node.contents) {
      throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
     }
    }
   }
   delete old_node.parent.contents[old_node.name];
   old_node.name = new_name;
   new_dir.contents[new_name] = old_node;
   old_node.parent = new_dir;
  }),
  unlink: (function(parent, name) {
   delete parent.contents[name];
  }),
  rmdir: (function(parent, name) {
   var node = FS.lookupNode(parent, name);
   for (var i in node.contents) {
    throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
   }
   delete parent.contents[name];
  }),
  readdir: (function(node) {
   var entries = [ ".", ".." ];
   for (var key in node.contents) {
    if (!node.contents.hasOwnProperty(key)) {
     continue;
    }
    entries.push(key);
   }
   return entries;
  }),
  symlink: (function(parent, newname, oldpath) {
   var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
   node.link = oldpath;
   return node;
  }),
  readlink: (function(node) {
   if (!FS.isLink(node.mode)) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   return node.link;
  })
 },
 stream_ops: {
  read: (function(stream, buffer, offset, length, position) {
   var contents = stream.node.contents;
   if (position >= stream.node.usedBytes) return 0;
   var size = Math.min(stream.node.usedBytes - position, length);
   assert(size >= 0);
   if (size > 8 && contents.subarray) {
    buffer.set(contents.subarray(position, position + size), offset);
   } else {
    for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
   }
   return size;
  }),
  write: (function(stream, buffer, offset, length, position, canOwn) {
   if (!length) return 0;
   var node = stream.node;
   node.timestamp = Date.now();
   if (buffer.subarray && (!node.contents || node.contents.subarray)) {
    if (canOwn) {
     node.contents = buffer.subarray(offset, offset + length);
     node.usedBytes = length;
     return length;
    } else if (node.usedBytes === 0 && position === 0) {
     node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
     node.usedBytes = length;
     return length;
    } else if (position + length <= node.usedBytes) {
     node.contents.set(buffer.subarray(offset, offset + length), position);
     return length;
    }
   }
   MEMFS.expandFileStorage(node, position + length);
   if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); else {
    for (var i = 0; i < length; i++) {
     node.contents[position + i] = buffer[offset + i];
    }
   }
   node.usedBytes = Math.max(node.usedBytes, position + length);
   return length;
  }),
  llseek: (function(stream, offset, whence) {
   var position = offset;
   if (whence === 1) {
    position += stream.position;
   } else if (whence === 2) {
    if (FS.isFile(stream.node.mode)) {
     position += stream.node.usedBytes;
    }
   }
   if (position < 0) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   return position;
  }),
  allocate: (function(stream, offset, length) {
   MEMFS.expandFileStorage(stream.node, offset + length);
   stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
  }),
  mmap: (function(stream, buffer, offset, length, position, prot, flags) {
   if (!FS.isFile(stream.node.mode)) {
    throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
   }
   var ptr;
   var allocated;
   var contents = stream.node.contents;
   if (!(flags & 2) && (contents.buffer === buffer || contents.buffer === buffer.buffer)) {
    allocated = false;
    ptr = contents.byteOffset;
   } else {
    if (position > 0 || position + length < stream.node.usedBytes) {
     if (contents.subarray) {
      contents = contents.subarray(position, position + length);
     } else {
      contents = Array.prototype.slice.call(contents, position, position + length);
     }
    }
    allocated = true;
    ptr = _malloc(length);
    if (!ptr) {
     throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
    }
    buffer.set(contents, ptr);
   }
   return {
    ptr: ptr,
    allocated: allocated
   };
  }),
  msync: (function(stream, buffer, offset, length, mmapFlags) {
   if (!FS.isFile(stream.node.mode)) {
    throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
   }
   if (mmapFlags & 2) {
    return 0;
   }
   var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
   return 0;
  })
 }
};
var IDBFS = {
 dbs: {},
 indexedDB: (function() {
  if (typeof indexedDB !== "undefined") return indexedDB;
  var ret = null;
  if (typeof window === "object") ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
  assert(ret, "IDBFS used, but indexedDB not supported");
  return ret;
 }),
 DB_VERSION: 21,
 DB_STORE_NAME: "FILE_DATA",
 mount: (function(mount) {
  return MEMFS.mount.apply(null, arguments);
 }),
 syncfs: (function(mount, populate, callback) {
  IDBFS.getLocalSet(mount, (function(err, local) {
   if (err) return callback(err);
   IDBFS.getRemoteSet(mount, (function(err, remote) {
    if (err) return callback(err);
    var src = populate ? remote : local;
    var dst = populate ? local : remote;
    IDBFS.reconcile(src, dst, callback);
   }));
  }));
 }),
 getDB: (function(name, callback) {
  var db = IDBFS.dbs[name];
  if (db) {
   return callback(null, db);
  }
  var req;
  try {
   req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
  } catch (e) {
   return callback(e);
  }
  req.onupgradeneeded = (function(e) {
   var db = e.target.result;
   var transaction = e.target.transaction;
   var fileStore;
   if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
    fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
   } else {
    fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
   }
   if (!fileStore.indexNames.contains("timestamp")) {
    fileStore.createIndex("timestamp", "timestamp", {
     unique: false
    });
   }
  });
  req.onsuccess = (function() {
   db = req.result;
   IDBFS.dbs[name] = db;
   callback(null, db);
  });
  req.onerror = (function(e) {
   callback(this.error);
   e.preventDefault();
  });
 }),
 getLocalSet: (function(mount, callback) {
  var entries = {};
  function isRealDir(p) {
   return p !== "." && p !== "..";
  }
  function toAbsolute(root) {
   return (function(p) {
    return PATH.join2(root, p);
   });
  }
  var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  while (check.length) {
   var path = check.pop();
   var stat;
   try {
    stat = FS.stat(path);
   } catch (e) {
    return callback(e);
   }
   if (FS.isDir(stat.mode)) {
    check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
   }
   entries[path] = {
    timestamp: stat.mtime
   };
  }
  return callback(null, {
   type: "local",
   entries: entries
  });
 }),
 getRemoteSet: (function(mount, callback) {
  var entries = {};
  IDBFS.getDB(mount.mountpoint, (function(err, db) {
   if (err) return callback(err);
   var transaction = db.transaction([ IDBFS.DB_STORE_NAME ], "readonly");
   transaction.onerror = (function(e) {
    callback(this.error);
    e.preventDefault();
   });
   var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
   var index = store.index("timestamp");
   index.openKeyCursor().onsuccess = (function(event) {
    var cursor = event.target.result;
    if (!cursor) {
     return callback(null, {
      type: "remote",
      db: db,
      entries: entries
     });
    }
    entries[cursor.primaryKey] = {
     timestamp: cursor.key
    };
    cursor.continue();
   });
  }));
 }),
 loadLocalEntry: (function(path, callback) {
  var stat, node;
  try {
   var lookup = FS.lookupPath(path);
   node = lookup.node;
   stat = FS.stat(path);
  } catch (e) {
   return callback(e);
  }
  if (FS.isDir(stat.mode)) {
   return callback(null, {
    timestamp: stat.mtime,
    mode: stat.mode
   });
  } else if (FS.isFile(stat.mode)) {
   node.contents = MEMFS.getFileDataAsTypedArray(node);
   return callback(null, {
    timestamp: stat.mtime,
    mode: stat.mode,
    contents: node.contents
   });
  } else {
   return callback(new Error("node type not supported"));
  }
 }),
 storeLocalEntry: (function(path, entry, callback) {
  try {
   if (FS.isDir(entry.mode)) {
    FS.mkdir(path, entry.mode);
   } else if (FS.isFile(entry.mode)) {
    FS.writeFile(path, entry.contents, {
     encoding: "binary",
     canOwn: true
    });
   } else {
    return callback(new Error("node type not supported"));
   }
   FS.chmod(path, entry.mode);
   FS.utime(path, entry.timestamp, entry.timestamp);
  } catch (e) {
   return callback(e);
  }
  callback(null);
 }),
 removeLocalEntry: (function(path, callback) {
  try {
   var lookup = FS.lookupPath(path);
   var stat = FS.stat(path);
   if (FS.isDir(stat.mode)) {
    FS.rmdir(path);
   } else if (FS.isFile(stat.mode)) {
    FS.unlink(path);
   }
  } catch (e) {
   return callback(e);
  }
  callback(null);
 }),
 loadRemoteEntry: (function(store, path, callback) {
  var req = store.get(path);
  req.onsuccess = (function(event) {
   callback(null, event.target.result);
  });
  req.onerror = (function(e) {
   callback(this.error);
   e.preventDefault();
  });
 }),
 storeRemoteEntry: (function(store, path, entry, callback) {
  var req = store.put(entry, path);
  req.onsuccess = (function() {
   callback(null);
  });
  req.onerror = (function(e) {
   callback(this.error);
   e.preventDefault();
  });
 }),
 removeRemoteEntry: (function(store, path, callback) {
  var req = store.delete(path);
  req.onsuccess = (function() {
   callback(null);
  });
  req.onerror = (function(e) {
   callback(this.error);
   e.preventDefault();
  });
 }),
 reconcile: (function(src, dst, callback) {
  var total = 0;
  var create = [];
  Object.keys(src.entries).forEach((function(key) {
   var e = src.entries[key];
   var e2 = dst.entries[key];
   if (!e2 || e.timestamp > e2.timestamp) {
    create.push(key);
    total++;
   }
  }));
  var remove = [];
  Object.keys(dst.entries).forEach((function(key) {
   var e = dst.entries[key];
   var e2 = src.entries[key];
   if (!e2) {
    remove.push(key);
    total++;
   }
  }));
  if (!total) {
   return callback(null);
  }
  var errored = false;
  var completed = 0;
  var db = src.type === "remote" ? src.db : dst.db;
  var transaction = db.transaction([ IDBFS.DB_STORE_NAME ], "readwrite");
  var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  function done(err) {
   if (err) {
    if (!done.errored) {
     done.errored = true;
     return callback(err);
    }
    return;
   }
   if (++completed >= total) {
    return callback(null);
   }
  }
  transaction.onerror = (function(e) {
   done(this.error);
   e.preventDefault();
  });
  create.sort().forEach((function(path) {
   if (dst.type === "local") {
    IDBFS.loadRemoteEntry(store, path, (function(err, entry) {
     if (err) return done(err);
     IDBFS.storeLocalEntry(path, entry, done);
    }));
   } else {
    IDBFS.loadLocalEntry(path, (function(err, entry) {
     if (err) return done(err);
     IDBFS.storeRemoteEntry(store, path, entry, done);
    }));
   }
  }));
  remove.sort().reverse().forEach((function(path) {
   if (dst.type === "local") {
    IDBFS.removeLocalEntry(path, done);
   } else {
    IDBFS.removeRemoteEntry(store, path, done);
   }
  }));
 })
};
var NODEFS = {
 isWindows: false,
 staticInit: (function() {
  NODEFS.isWindows = !!process.platform.match(/^win/);
 }),
 mount: (function(mount) {
  assert(ENVIRONMENT_IS_NODE);
  return NODEFS.createNode(null, "/", NODEFS.getMode(mount.opts.root), 0);
 }),
 createNode: (function(parent, name, mode, dev) {
  if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var node = FS.createNode(parent, name, mode);
  node.node_ops = NODEFS.node_ops;
  node.stream_ops = NODEFS.stream_ops;
  return node;
 }),
 getMode: (function(path) {
  var stat;
  try {
   stat = fs.lstatSync(path);
   if (NODEFS.isWindows) {
    stat.mode = stat.mode | (stat.mode & 146) >> 1;
   }
  } catch (e) {
   if (!e.code) throw e;
   throw new FS.ErrnoError(ERRNO_CODES[e.code]);
  }
  return stat.mode;
 }),
 realPath: (function(node) {
  var parts = [];
  while (node.parent !== node) {
   parts.push(node.name);
   node = node.parent;
  }
  parts.push(node.mount.opts.root);
  parts.reverse();
  return PATH.join.apply(null, parts);
 }),
 flagsToPermissionStringMap: {
  0: "r",
  1: "r+",
  2: "r+",
  64: "r",
  65: "r+",
  66: "r+",
  129: "rx+",
  193: "rx+",
  514: "w+",
  577: "w",
  578: "w+",
  705: "wx",
  706: "wx+",
  1024: "a",
  1025: "a",
  1026: "a+",
  1089: "a",
  1090: "a+",
  1153: "ax",
  1154: "ax+",
  1217: "ax",
  1218: "ax+",
  4096: "rs",
  4098: "rs+"
 },
 flagsToPermissionString: (function(flags) {
  flags &= ~32768;
  if (flags in NODEFS.flagsToPermissionStringMap) {
   return NODEFS.flagsToPermissionStringMap[flags];
  } else {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
 }),
 node_ops: {
  getattr: (function(node) {
   var path = NODEFS.realPath(node);
   var stat;
   try {
    stat = fs.lstatSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
   if (NODEFS.isWindows && !stat.blksize) {
    stat.blksize = 4096;
   }
   if (NODEFS.isWindows && !stat.blocks) {
    stat.blocks = (stat.size + stat.blksize - 1) / stat.blksize | 0;
   }
   return {
    dev: stat.dev,
    ino: stat.ino,
    mode: stat.mode,
    nlink: stat.nlink,
    uid: stat.uid,
    gid: stat.gid,
    rdev: stat.rdev,
    size: stat.size,
    atime: stat.atime,
    mtime: stat.mtime,
    ctime: stat.ctime,
    blksize: stat.blksize,
    blocks: stat.blocks
   };
  }),
  setattr: (function(node, attr) {
   var path = NODEFS.realPath(node);
   try {
    if (attr.mode !== undefined) {
     fs.chmodSync(path, attr.mode);
     node.mode = attr.mode;
    }
    if (attr.timestamp !== undefined) {
     var date = new Date(attr.timestamp);
     fs.utimesSync(path, date, date);
    }
    if (attr.size !== undefined) {
     fs.truncateSync(path, attr.size);
    }
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  lookup: (function(parent, name) {
   var path = PATH.join2(NODEFS.realPath(parent), name);
   var mode = NODEFS.getMode(path);
   return NODEFS.createNode(parent, name, mode);
  }),
  mknod: (function(parent, name, mode, dev) {
   var node = NODEFS.createNode(parent, name, mode, dev);
   var path = NODEFS.realPath(node);
   try {
    if (FS.isDir(node.mode)) {
     fs.mkdirSync(path, node.mode);
    } else {
     fs.writeFileSync(path, "", {
      mode: node.mode
     });
    }
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
   return node;
  }),
  rename: (function(oldNode, newDir, newName) {
   var oldPath = NODEFS.realPath(oldNode);
   var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
   try {
    fs.renameSync(oldPath, newPath);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  unlink: (function(parent, name) {
   var path = PATH.join2(NODEFS.realPath(parent), name);
   try {
    fs.unlinkSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  rmdir: (function(parent, name) {
   var path = PATH.join2(NODEFS.realPath(parent), name);
   try {
    fs.rmdirSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  readdir: (function(node) {
   var path = NODEFS.realPath(node);
   try {
    return fs.readdirSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  symlink: (function(parent, newName, oldPath) {
   var newPath = PATH.join2(NODEFS.realPath(parent), newName);
   try {
    fs.symlinkSync(oldPath, newPath);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  readlink: (function(node) {
   var path = NODEFS.realPath(node);
   try {
    path = fs.readlinkSync(path);
    path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
    return path;
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  })
 },
 stream_ops: {
  open: (function(stream) {
   var path = NODEFS.realPath(stream.node);
   try {
    if (FS.isFile(stream.node.mode)) {
     stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
    }
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  close: (function(stream) {
   try {
    if (FS.isFile(stream.node.mode) && stream.nfd) {
     fs.closeSync(stream.nfd);
    }
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  read: (function(stream, buffer, offset, length, position) {
   if (length === 0) return 0;
   var nbuffer = new Buffer(length);
   var res;
   try {
    res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
   } catch (e) {
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
   if (res > 0) {
    for (var i = 0; i < res; i++) {
     buffer[offset + i] = nbuffer[i];
    }
   }
   return res;
  }),
  write: (function(stream, buffer, offset, length, position) {
   var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
   var res;
   try {
    res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
   } catch (e) {
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
   return res;
  }),
  llseek: (function(stream, offset, whence) {
   var position = offset;
   if (whence === 1) {
    position += stream.position;
   } else if (whence === 2) {
    if (FS.isFile(stream.node.mode)) {
     try {
      var stat = fs.fstatSync(stream.nfd);
      position += stat.size;
     } catch (e) {
      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
     }
    }
   }
   if (position < 0) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   return position;
  })
 }
};
var WORKERFS = {
 DIR_MODE: 16895,
 FILE_MODE: 33279,
 reader: null,
 mount: (function(mount) {
  assert(ENVIRONMENT_IS_WORKER);
  if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync;
  var root = WORKERFS.createNode(null, "/", WORKERFS.DIR_MODE, 0);
  var createdParents = {};
  function ensureParent(path) {
   var parts = path.split("/");
   var parent = root;
   for (var i = 0; i < parts.length - 1; i++) {
    var curr = parts.slice(0, i + 1).join("/");
    if (!createdParents[curr]) {
     createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
    }
    parent = createdParents[curr];
   }
   return parent;
  }
  function base(path) {
   var parts = path.split("/");
   return parts[parts.length - 1];
  }
  Array.prototype.forEach.call(mount.opts["files"] || [], (function(file) {
   WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
  }));
  (mount.opts["blobs"] || []).forEach((function(obj) {
   WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
  }));
  (mount.opts["packages"] || []).forEach((function(pack) {
   pack["metadata"].files.forEach((function(file) {
    var name = file.filename.substr(1);
    WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack["blob"].slice(file.start, file.end));
   }));
  }));
  return root;
 }),
 createNode: (function(parent, name, mode, dev, contents, mtime) {
  var node = FS.createNode(parent, name, mode);
  node.mode = mode;
  node.node_ops = WORKERFS.node_ops;
  node.stream_ops = WORKERFS.stream_ops;
  node.timestamp = (mtime || new Date).getTime();
  assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
  if (mode === WORKERFS.FILE_MODE) {
   node.size = contents.size;
   node.contents = contents;
  } else {
   node.size = 4096;
   node.contents = {};
  }
  if (parent) {
   parent.contents[name] = node;
  }
  return node;
 }),
 node_ops: {
  getattr: (function(node) {
   return {
    dev: 1,
    ino: undefined,
    mode: node.mode,
    nlink: 1,
    uid: 0,
    gid: 0,
    rdev: undefined,
    size: node.size,
    atime: new Date(node.timestamp),
    mtime: new Date(node.timestamp),
    ctime: new Date(node.timestamp),
    blksize: 4096,
    blocks: Math.ceil(node.size / 4096)
   };
  }),
  setattr: (function(node, attr) {
   if (attr.mode !== undefined) {
    node.mode = attr.mode;
   }
   if (attr.timestamp !== undefined) {
    node.timestamp = attr.timestamp;
   }
  }),
  lookup: (function(parent, name) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }),
  mknod: (function(parent, name, mode, dev) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  rename: (function(oldNode, newDir, newName) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  unlink: (function(parent, name) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  rmdir: (function(parent, name) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  readdir: (function(node) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  symlink: (function(parent, newName, oldPath) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  readlink: (function(node) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  })
 },
 stream_ops: {
  read: (function(stream, buffer, offset, length, position) {
   if (position >= stream.node.size) return 0;
   var chunk = stream.node.contents.slice(position, position + length);
   var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
   buffer.set(new Uint8Array(ab), offset);
   return chunk.size;
  }),
  write: (function(stream, buffer, offset, length, position) {
   throw new FS.ErrnoError(ERRNO_CODES.EIO);
  }),
  llseek: (function(stream, offset, whence) {
   var position = offset;
   if (whence === 1) {
    position += stream.position;
   } else if (whence === 2) {
    if (FS.isFile(stream.node.mode)) {
     position += stream.node.size;
    }
   }
   if (position < 0) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   return position;
  })
 }
};
var _stdin = allocate(1, "i32*", ALLOC_STATIC);
var _stdout = allocate(1, "i32*", ALLOC_STATIC);
var _stderr = allocate(1, "i32*", ALLOC_STATIC);
var FS = {
 root: null,
 mounts: [],
 devices: [ null ],
 streams: [],
 nextInode: 1,
 nameTable: null,
 currentPath: "/",
 initialized: false,
 ignorePermissions: true,
 trackingDelegate: {},
 tracking: {
  openFlags: {
   READ: 1,
   WRITE: 2
  }
 },
 ErrnoError: null,
 genericErrors: {},
 filesystems: null,
 handleFSError: (function(e) {
  if (!(e instanceof FS.ErrnoError)) throw e + " : " + stackTrace();
  return ___setErrNo(e.errno);
 }),
 lookupPath: (function(path, opts) {
  path = PATH.resolve(FS.cwd(), path);
  opts = opts || {};
  if (!path) return {
   path: "",
   node: null
  };
  var defaults = {
   follow_mount: true,
   recurse_count: 0
  };
  for (var key in defaults) {
   if (opts[key] === undefined) {
    opts[key] = defaults[key];
   }
  }
  if (opts.recurse_count > 8) {
   throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
  }
  var parts = PATH.normalizeArray(path.split("/").filter((function(p) {
   return !!p;
  })), false);
  var current = FS.root;
  var current_path = "/";
  for (var i = 0; i < parts.length; i++) {
   var islast = i === parts.length - 1;
   if (islast && opts.parent) {
    break;
   }
   current = FS.lookupNode(current, parts[i]);
   current_path = PATH.join2(current_path, parts[i]);
   if (FS.isMountpoint(current)) {
    if (!islast || islast && opts.follow_mount) {
     current = current.mounted.root;
    }
   }
   if (!islast || opts.follow) {
    var count = 0;
    while (FS.isLink(current.mode)) {
     var link = FS.readlink(current_path);
     current_path = PATH.resolve(PATH.dirname(current_path), link);
     var lookup = FS.lookupPath(current_path, {
      recurse_count: opts.recurse_count
     });
     current = lookup.node;
     if (count++ > 40) {
      throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
     }
    }
   }
  }
  return {
   path: current_path,
   node: current
  };
 }),
 getPath: (function(node) {
  var path;
  while (true) {
   if (FS.isRoot(node)) {
    var mount = node.mount.mountpoint;
    if (!path) return mount;
    return mount[mount.length - 1] !== "/" ? mount + "/" + path : mount + path;
   }
   path = path ? node.name + "/" + path : node.name;
   node = node.parent;
  }
 }),
 hashName: (function(parentid, name) {
  var hash = 0;
  for (var i = 0; i < name.length; i++) {
   hash = (hash << 5) - hash + name.charCodeAt(i) | 0;
  }
  return (parentid + hash >>> 0) % FS.nameTable.length;
 }),
 hashAddNode: (function(node) {
  var hash = FS.hashName(node.parent.id, node.name);
  node.name_next = FS.nameTable[hash];
  FS.nameTable[hash] = node;
 }),
 hashRemoveNode: (function(node) {
  var hash = FS.hashName(node.parent.id, node.name);
  if (FS.nameTable[hash] === node) {
   FS.nameTable[hash] = node.name_next;
  } else {
   var current = FS.nameTable[hash];
   while (current) {
    if (current.name_next === node) {
     current.name_next = node.name_next;
     break;
    }
    current = current.name_next;
   }
  }
 }),
 lookupNode: (function(parent, name) {
  var err = FS.mayLookup(parent);
  if (err) {
   throw new FS.ErrnoError(err, parent);
  }
  var hash = FS.hashName(parent.id, name);
  for (var node = FS.nameTable[hash]; node; node = node.name_next) {
   var nodeName = node.name;
   if (node.parent.id === parent.id && nodeName === name) {
    return node;
   }
  }
  return FS.lookup(parent, name);
 }),
 createNode: (function(parent, name, mode, rdev) {
  if (!FS.FSNode) {
   FS.FSNode = (function(parent, name, mode, rdev) {
    if (!parent) {
     parent = this;
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
   });
   FS.FSNode.prototype = {};
   var readMode = 292 | 73;
   var writeMode = 146;
   Object.defineProperties(FS.FSNode.prototype, {
    read: {
     get: (function() {
      return (this.mode & readMode) === readMode;
     }),
     set: (function(val) {
      val ? this.mode |= readMode : this.mode &= ~readMode;
     })
    },
    write: {
     get: (function() {
      return (this.mode & writeMode) === writeMode;
     }),
     set: (function(val) {
      val ? this.mode |= writeMode : this.mode &= ~writeMode;
     })
    },
    isFolder: {
     get: (function() {
      return FS.isDir(this.mode);
     })
    },
    isDevice: {
     get: (function() {
      return FS.isChrdev(this.mode);
     })
    }
   });
  }
  var node = new FS.FSNode(parent, name, mode, rdev);
  FS.hashAddNode(node);
  return node;
 }),
 destroyNode: (function(node) {
  FS.hashRemoveNode(node);
 }),
 isRoot: (function(node) {
  return node === node.parent;
 }),
 isMountpoint: (function(node) {
  return !!node.mounted;
 }),
 isFile: (function(mode) {
  return (mode & 61440) === 32768;
 }),
 isDir: (function(mode) {
  return (mode & 61440) === 16384;
 }),
 isLink: (function(mode) {
  return (mode & 61440) === 40960;
 }),
 isChrdev: (function(mode) {
  return (mode & 61440) === 8192;
 }),
 isBlkdev: (function(mode) {
  return (mode & 61440) === 24576;
 }),
 isFIFO: (function(mode) {
  return (mode & 61440) === 4096;
 }),
 isSocket: (function(mode) {
  return (mode & 49152) === 49152;
 }),
 flagModes: {
  "r": 0,
  "rs": 1052672,
  "r+": 2,
  "w": 577,
  "wx": 705,
  "xw": 705,
  "w+": 578,
  "wx+": 706,
  "xw+": 706,
  "a": 1089,
  "ax": 1217,
  "xa": 1217,
  "a+": 1090,
  "ax+": 1218,
  "xa+": 1218
 },
 modeStringToFlags: (function(str) {
  var flags = FS.flagModes[str];
  if (typeof flags === "undefined") {
   throw new Error("Unknown file open mode: " + str);
  }
  return flags;
 }),
 flagsToPermissionString: (function(flag) {
  var perms = [ "r", "w", "rw" ][flag & 3];
  if (flag & 512) {
   perms += "w";
  }
  return perms;
 }),
 nodePermissions: (function(node, perms) {
  if (FS.ignorePermissions) {
   return 0;
  }
  if (perms.indexOf("r") !== -1 && !(node.mode & 292)) {
   return ERRNO_CODES.EACCES;
  } else if (perms.indexOf("w") !== -1 && !(node.mode & 146)) {
   return ERRNO_CODES.EACCES;
  } else if (perms.indexOf("x") !== -1 && !(node.mode & 73)) {
   return ERRNO_CODES.EACCES;
  }
  return 0;
 }),
 mayLookup: (function(dir) {
  var err = FS.nodePermissions(dir, "x");
  if (err) return err;
  if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
  return 0;
 }),
 mayCreate: (function(dir, name) {
  try {
   var node = FS.lookupNode(dir, name);
   return ERRNO_CODES.EEXIST;
  } catch (e) {}
  return FS.nodePermissions(dir, "wx");
 }),
 mayDelete: (function(dir, name, isdir) {
  var node;
  try {
   node = FS.lookupNode(dir, name);
  } catch (e) {
   return e.errno;
  }
  var err = FS.nodePermissions(dir, "wx");
  if (err) {
   return err;
  }
  if (isdir) {
   if (!FS.isDir(node.mode)) {
    return ERRNO_CODES.ENOTDIR;
   }
   if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
    return ERRNO_CODES.EBUSY;
   }
  } else {
   if (FS.isDir(node.mode)) {
    return ERRNO_CODES.EISDIR;
   }
  }
  return 0;
 }),
 mayOpen: (function(node, flags) {
  if (!node) {
   return ERRNO_CODES.ENOENT;
  }
  if (FS.isLink(node.mode)) {
   return ERRNO_CODES.ELOOP;
  } else if (FS.isDir(node.mode)) {
   if ((flags & 2097155) !== 0 || flags & 512) {
    return ERRNO_CODES.EISDIR;
   }
  }
  return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
 }),
 MAX_OPEN_FDS: 4096,
 nextfd: (function(fd_start, fd_end) {
  fd_start = fd_start || 0;
  fd_end = fd_end || FS.MAX_OPEN_FDS;
  for (var fd = fd_start; fd <= fd_end; fd++) {
   if (!FS.streams[fd]) {
    return fd;
   }
  }
  throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
 }),
 getStream: (function(fd) {
  return FS.streams[fd];
 }),
 createStream: (function(stream, fd_start, fd_end) {
  if (!FS.FSStream) {
   FS.FSStream = (function() {});
   FS.FSStream.prototype = {};
   Object.defineProperties(FS.FSStream.prototype, {
    object: {
     get: (function() {
      return this.node;
     }),
     set: (function(val) {
      this.node = val;
     })
    },
    isRead: {
     get: (function() {
      return (this.flags & 2097155) !== 1;
     })
    },
    isWrite: {
     get: (function() {
      return (this.flags & 2097155) !== 0;
     })
    },
    isAppend: {
     get: (function() {
      return this.flags & 1024;
     })
    }
   });
  }
  var newStream = new FS.FSStream;
  for (var p in stream) {
   newStream[p] = stream[p];
  }
  stream = newStream;
  var fd = FS.nextfd(fd_start, fd_end);
  stream.fd = fd;
  FS.streams[fd] = stream;
  return stream;
 }),
 closeStream: (function(fd) {
  FS.streams[fd] = null;
 }),
 chrdev_stream_ops: {
  open: (function(stream) {
   var device = FS.getDevice(stream.node.rdev);
   stream.stream_ops = device.stream_ops;
   if (stream.stream_ops.open) {
    stream.stream_ops.open(stream);
   }
  }),
  llseek: (function() {
   throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
  })
 },
 major: (function(dev) {
  return dev >> 8;
 }),
 minor: (function(dev) {
  return dev & 255;
 }),
 makedev: (function(ma, mi) {
  return ma << 8 | mi;
 }),
 registerDevice: (function(dev, ops) {
  FS.devices[dev] = {
   stream_ops: ops
  };
 }),
 getDevice: (function(dev) {
  return FS.devices[dev];
 }),
 getMounts: (function(mount) {
  var mounts = [];
  var check = [ mount ];
  while (check.length) {
   var m = check.pop();
   mounts.push(m);
   check.push.apply(check, m.mounts);
  }
  return mounts;
 }),
 syncfs: (function(populate, callback) {
  if (typeof populate === "function") {
   callback = populate;
   populate = false;
  }
  var mounts = FS.getMounts(FS.root.mount);
  var completed = 0;
  function done(err) {
   if (err) {
    if (!done.errored) {
     done.errored = true;
     return callback(err);
    }
    return;
   }
   if (++completed >= mounts.length) {
    callback(null);
   }
  }
  mounts.forEach((function(mount) {
   if (!mount.type.syncfs) {
    return done(null);
   }
   mount.type.syncfs(mount, populate, done);
  }));
 }),
 mount: (function(type, opts, mountpoint) {
  var root = mountpoint === "/";
  var pseudo = !mountpoint;
  var node;
  if (root && FS.root) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  } else if (!root && !pseudo) {
   var lookup = FS.lookupPath(mountpoint, {
    follow_mount: false
   });
   mountpoint = lookup.path;
   node = lookup.node;
   if (FS.isMountpoint(node)) {
    throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
   }
   if (!FS.isDir(node.mode)) {
    throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
   }
  }
  var mount = {
   type: type,
   opts: opts,
   mountpoint: mountpoint,
   mounts: []
  };
  var mountRoot = type.mount(mount);
  mountRoot.mount = mount;
  mount.root = mountRoot;
  if (root) {
   FS.root = mountRoot;
  } else if (node) {
   node.mounted = mount;
   if (node.mount) {
    node.mount.mounts.push(mount);
   }
  }
  return mountRoot;
 }),
 unmount: (function(mountpoint) {
  var lookup = FS.lookupPath(mountpoint, {
   follow_mount: false
  });
  if (!FS.isMountpoint(lookup.node)) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var node = lookup.node;
  var mount = node.mounted;
  var mounts = FS.getMounts(mount);
  Object.keys(FS.nameTable).forEach((function(hash) {
   var current = FS.nameTable[hash];
   while (current) {
    var next = current.name_next;
    if (mounts.indexOf(current.mount) !== -1) {
     FS.destroyNode(current);
    }
    current = next;
   }
  }));
  node.mounted = null;
  var idx = node.mount.mounts.indexOf(mount);
  assert(idx !== -1);
  node.mount.mounts.splice(idx, 1);
 }),
 lookup: (function(parent, name) {
  return parent.node_ops.lookup(parent, name);
 }),
 mknod: (function(path, mode, dev) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  if (!name || name === "." || name === "..") {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var err = FS.mayCreate(parent, name);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.mknod) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  return parent.node_ops.mknod(parent, name, mode, dev);
 }),
 create: (function(path, mode) {
  mode = mode !== undefined ? mode : 438;
  mode &= 4095;
  mode |= 32768;
  return FS.mknod(path, mode, 0);
 }),
 mkdir: (function(path, mode) {
  mode = mode !== undefined ? mode : 511;
  mode &= 511 | 512;
  mode |= 16384;
  return FS.mknod(path, mode, 0);
 }),
 mkdev: (function(path, mode, dev) {
  if (typeof dev === "undefined") {
   dev = mode;
   mode = 438;
  }
  mode |= 8192;
  return FS.mknod(path, mode, dev);
 }),
 symlink: (function(oldpath, newpath) {
  if (!PATH.resolve(oldpath)) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  var lookup = FS.lookupPath(newpath, {
   parent: true
  });
  var parent = lookup.node;
  if (!parent) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  var newname = PATH.basename(newpath);
  var err = FS.mayCreate(parent, newname);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.symlink) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  return parent.node_ops.symlink(parent, newname, oldpath);
 }),
 rename: (function(old_path, new_path) {
  var old_dirname = PATH.dirname(old_path);
  var new_dirname = PATH.dirname(new_path);
  var old_name = PATH.basename(old_path);
  var new_name = PATH.basename(new_path);
  var lookup, old_dir, new_dir;
  try {
   lookup = FS.lookupPath(old_path, {
    parent: true
   });
   old_dir = lookup.node;
   lookup = FS.lookupPath(new_path, {
    parent: true
   });
   new_dir = lookup.node;
  } catch (e) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  }
  if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  if (old_dir.mount !== new_dir.mount) {
   throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
  }
  var old_node = FS.lookupNode(old_dir, old_name);
  var relative = PATH.relative(old_path, new_dirname);
  if (relative.charAt(0) !== ".") {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  relative = PATH.relative(new_path, old_dirname);
  if (relative.charAt(0) !== ".") {
   throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
  }
  var new_node;
  try {
   new_node = FS.lookupNode(new_dir, new_name);
  } catch (e) {}
  if (old_node === new_node) {
   return;
  }
  var isdir = FS.isDir(old_node.mode);
  var err = FS.mayDelete(old_dir, old_name, isdir);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  err = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!old_dir.node_ops.rename) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  }
  if (new_dir !== old_dir) {
   err = FS.nodePermissions(old_dir, "w");
   if (err) {
    throw new FS.ErrnoError(err);
   }
  }
  try {
   if (FS.trackingDelegate["willMovePath"]) {
    FS.trackingDelegate["willMovePath"](old_path, new_path);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['willMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
  }
  FS.hashRemoveNode(old_node);
  try {
   old_dir.node_ops.rename(old_node, new_dir, new_name);
  } catch (e) {
   throw e;
  } finally {
   FS.hashAddNode(old_node);
  }
  try {
   if (FS.trackingDelegate["onMovePath"]) FS.trackingDelegate["onMovePath"](old_path, new_path);
  } catch (e) {
   console.log("FS.trackingDelegate['onMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
  }
 }),
 rmdir: (function(path) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  var node = FS.lookupNode(parent, name);
  var err = FS.mayDelete(parent, name, true);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.rmdir) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (FS.isMountpoint(node)) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  }
  try {
   if (FS.trackingDelegate["willDeletePath"]) {
    FS.trackingDelegate["willDeletePath"](path);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
  }
  parent.node_ops.rmdir(parent, name);
  FS.destroyNode(node);
  try {
   if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path);
  } catch (e) {
   console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
  }
 }),
 readdir: (function(path) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  var node = lookup.node;
  if (!node.node_ops.readdir) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
  }
  return node.node_ops.readdir(node);
 }),
 unlink: (function(path) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  var node = FS.lookupNode(parent, name);
  var err = FS.mayDelete(parent, name, false);
  if (err) {
   if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.unlink) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (FS.isMountpoint(node)) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  }
  try {
   if (FS.trackingDelegate["willDeletePath"]) {
    FS.trackingDelegate["willDeletePath"](path);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
  }
  parent.node_ops.unlink(parent, name);
  FS.destroyNode(node);
  try {
   if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path);
  } catch (e) {
   console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
  }
 }),
 readlink: (function(path) {
  var lookup = FS.lookupPath(path);
  var link = lookup.node;
  if (!link) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  if (!link.node_ops.readlink) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
 }),
 stat: (function(path, dontFollow) {
  var lookup = FS.lookupPath(path, {
   follow: !dontFollow
  });
  var node = lookup.node;
  if (!node) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  if (!node.node_ops.getattr) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  return node.node_ops.getattr(node);
 }),
 lstat: (function(path) {
  return FS.stat(path, true);
 }),
 chmod: (function(path, mode, dontFollow) {
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: !dontFollow
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  node.node_ops.setattr(node, {
   mode: mode & 4095 | node.mode & ~4095,
   timestamp: Date.now()
  });
 }),
 lchmod: (function(path, mode) {
  FS.chmod(path, mode, true);
 }),
 fchmod: (function(fd, mode) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  FS.chmod(stream.node, mode);
 }),
 chown: (function(path, uid, gid, dontFollow) {
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: !dontFollow
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  node.node_ops.setattr(node, {
   timestamp: Date.now()
  });
 }),
 lchown: (function(path, uid, gid) {
  FS.chown(path, uid, gid, true);
 }),
 fchown: (function(fd, uid, gid) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  FS.chown(stream.node, uid, gid);
 }),
 truncate: (function(path, len) {
  if (len < 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: true
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (FS.isDir(node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
  }
  if (!FS.isFile(node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var err = FS.nodePermissions(node, "w");
  if (err) {
   throw new FS.ErrnoError(err);
  }
  node.node_ops.setattr(node, {
   size: len,
   timestamp: Date.now()
  });
 }),
 ftruncate: (function(fd, len) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  FS.truncate(stream.node, len);
 }),
 utime: (function(path, atime, mtime) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  var node = lookup.node;
  node.node_ops.setattr(node, {
   timestamp: Math.max(atime, mtime)
  });
 }),
 open: (function(path, flags, mode, fd_start, fd_end) {
  if (path === "") {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  flags = typeof flags === "string" ? FS.modeStringToFlags(flags) : flags;
  mode = typeof mode === "undefined" ? 438 : mode;
  if (flags & 64) {
   mode = mode & 4095 | 32768;
  } else {
   mode = 0;
  }
  var node;
  if (typeof path === "object") {
   node = path;
  } else {
   path = PATH.normalize(path);
   try {
    var lookup = FS.lookupPath(path, {
     follow: !(flags & 131072)
    });
    node = lookup.node;
   } catch (e) {}
  }
  var created = false;
  if (flags & 64) {
   if (node) {
    if (flags & 128) {
     throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
    }
   } else {
    node = FS.mknod(path, mode, 0);
    created = true;
   }
  }
  if (!node) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  if (FS.isChrdev(node.mode)) {
   flags &= ~512;
  }
  if (flags & 65536 && !FS.isDir(node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
  }
  if (!created) {
   var err = FS.mayOpen(node, flags);
   if (err) {
    throw new FS.ErrnoError(err);
   }
  }
  if (flags & 512) {
   FS.truncate(node, 0);
  }
  flags &= ~(128 | 512);
  var stream = FS.createStream({
   node: node,
   path: FS.getPath(node),
   flags: flags,
   seekable: true,
   position: 0,
   stream_ops: node.stream_ops,
   ungotten: [],
   error: false
  }, fd_start, fd_end);
  if (stream.stream_ops.open) {
   stream.stream_ops.open(stream);
  }
  if (Module["logReadFiles"] && !(flags & 1)) {
   if (!FS.readFiles) FS.readFiles = {};
   if (!(path in FS.readFiles)) {
    FS.readFiles[path] = 1;
    Module["printErr"]("read file: " + path);
   }
  }
  try {
   if (FS.trackingDelegate["onOpenFile"]) {
    var trackingFlags = 0;
    if ((flags & 2097155) !== 1) {
     trackingFlags |= FS.tracking.openFlags.READ;
    }
    if ((flags & 2097155) !== 0) {
     trackingFlags |= FS.tracking.openFlags.WRITE;
    }
    FS.trackingDelegate["onOpenFile"](path, trackingFlags);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['onOpenFile']('" + path + "', flags) threw an exception: " + e.message);
  }
  return stream;
 }),
 close: (function(stream) {
  if (stream.getdents) stream.getdents = null;
  try {
   if (stream.stream_ops.close) {
    stream.stream_ops.close(stream);
   }
  } catch (e) {
   throw e;
  } finally {
   FS.closeStream(stream.fd);
  }
 }),
 llseek: (function(stream, offset, whence) {
  if (!stream.seekable || !stream.stream_ops.llseek) {
   throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
  }
  stream.position = stream.stream_ops.llseek(stream, offset, whence);
  stream.ungotten = [];
  return stream.position;
 }),
 read: (function(stream, buffer, offset, length, position) {
  if (length < 0 || position < 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  if ((stream.flags & 2097155) === 1) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  if (FS.isDir(stream.node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
  }
  if (!stream.stream_ops.read) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var seeking = true;
  if (typeof position === "undefined") {
   position = stream.position;
   seeking = false;
  } else if (!stream.seekable) {
   throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
  }
  var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
  if (!seeking) stream.position += bytesRead;
  return bytesRead;
 }),
 write: (function(stream, buffer, offset, length, position, canOwn) {
  if (length < 0 || position < 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  if (FS.isDir(stream.node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
  }
  if (!stream.stream_ops.write) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  if (stream.flags & 1024) {
   FS.llseek(stream, 0, 2);
  }
  var seeking = true;
  if (typeof position === "undefined") {
   position = stream.position;
   seeking = false;
  } else if (!stream.seekable) {
   throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
  }
  var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
  if (!seeking) stream.position += bytesWritten;
  try {
   if (stream.path && FS.trackingDelegate["onWriteToFile"]) FS.trackingDelegate["onWriteToFile"](stream.path);
  } catch (e) {
   console.log("FS.trackingDelegate['onWriteToFile']('" + path + "') threw an exception: " + e.message);
  }
  return bytesWritten;
 }),
 allocate: (function(stream, offset, length) {
  if (offset < 0 || length <= 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
  }
  if (!stream.stream_ops.allocate) {
   throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
  }
  stream.stream_ops.allocate(stream, offset, length);
 }),
 mmap: (function(stream, buffer, offset, length, position, prot, flags) {
  if ((stream.flags & 2097155) === 1) {
   throw new FS.ErrnoError(ERRNO_CODES.EACCES);
  }
  if (!stream.stream_ops.mmap) {
   throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
  }
  return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
 }),
 msync: (function(stream, buffer, offset, length, mmapFlags) {
  if (!stream || !stream.stream_ops.msync) {
   return 0;
  }
  return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
 }),
 munmap: (function(stream) {
  return 0;
 }),
 ioctl: (function(stream, cmd, arg) {
  if (!stream.stream_ops.ioctl) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
  }
  return stream.stream_ops.ioctl(stream, cmd, arg);
 }),
 readFile: (function(path, opts) {
  opts = opts || {};
  opts.flags = opts.flags || "r";
  opts.encoding = opts.encoding || "binary";
  if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
   throw new Error('Invalid encoding type "' + opts.encoding + '"');
  }
  var ret;
  var stream = FS.open(path, opts.flags);
  var stat = FS.stat(path);
  var length = stat.size;
  var buf = new Uint8Array(length);
  FS.read(stream, buf, 0, length, 0);
  if (opts.encoding === "utf8") {
   ret = UTF8ArrayToString(buf, 0);
  } else if (opts.encoding === "binary") {
   ret = buf;
  }
  FS.close(stream);
  return ret;
 }),
 writeFile: (function(path, data, opts) {
  opts = opts || {};
  opts.flags = opts.flags || "w";
  opts.encoding = opts.encoding || "utf8";
  if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
   throw new Error('Invalid encoding type "' + opts.encoding + '"');
  }
  var stream = FS.open(path, opts.flags, opts.mode);
  if (opts.encoding === "utf8") {
   var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
   var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
   FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
  } else if (opts.encoding === "binary") {
   FS.write(stream, data, 0, data.length, 0, opts.canOwn);
  }
  FS.close(stream);
 }),
 cwd: (function() {
  return FS.currentPath;
 }),
 chdir: (function(path) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  if (!FS.isDir(lookup.node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
  }
  var err = FS.nodePermissions(lookup.node, "x");
  if (err) {
   throw new FS.ErrnoError(err);
  }
  FS.currentPath = lookup.path;
 }),
 createDefaultDirectories: (function() {
  FS.mkdir("/tmp");
  FS.mkdir("/home");
  FS.mkdir("/home/web_user");
 }),
 createDefaultDevices: (function() {
  FS.mkdir("/dev");
  FS.registerDevice(FS.makedev(1, 3), {
   read: (function() {
    return 0;
   }),
   write: (function(stream, buffer, offset, length, pos) {
    return length;
   })
  });
  FS.mkdev("/dev/null", FS.makedev(1, 3));
  TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
  TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
  FS.mkdev("/dev/tty", FS.makedev(5, 0));
  FS.mkdev("/dev/tty1", FS.makedev(6, 0));
  var random_device;
  if (typeof crypto !== "undefined") {
   var randomBuffer = new Uint8Array(1);
   random_device = (function() {
    crypto.getRandomValues(randomBuffer);
    return randomBuffer[0];
   });
  } else if (ENVIRONMENT_IS_NODE) {
   random_device = (function() {
    return require("crypto").randomBytes(1)[0];
   });
  } else {
   random_device = (function() {
    return Math.random() * 256 | 0;
   });
  }
  FS.createDevice("/dev", "random", random_device);
  FS.createDevice("/dev", "urandom", random_device);
  FS.mkdir("/dev/shm");
  FS.mkdir("/dev/shm/tmp");
 }),
 createSpecialDirectories: (function() {
  FS.mkdir("/proc");
  FS.mkdir("/proc/self");
  FS.mkdir("/proc/self/fd");
  FS.mount({
   mount: (function() {
    var node = FS.createNode("/proc/self", "fd", 16384 | 511, 73);
    node.node_ops = {
     lookup: (function(parent, name) {
      var fd = +name;
      var stream = FS.getStream(fd);
      if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
      var ret = {
       parent: null,
       mount: {
        mountpoint: "fake"
       },
       node_ops: {
        readlink: (function() {
         return stream.path;
        })
       }
      };
      ret.parent = ret;
      return ret;
     })
    };
    return node;
   })
  }, {}, "/proc/self/fd");
 }),
 createStandardStreams: (function() {
  if (Module["stdin"]) {
   FS.createDevice("/dev", "stdin", Module["stdin"]);
  } else {
   FS.symlink("/dev/tty", "/dev/stdin");
  }
  if (Module["stdout"]) {
   FS.createDevice("/dev", "stdout", null, Module["stdout"]);
  } else {
   FS.symlink("/dev/tty", "/dev/stdout");
  }
  if (Module["stderr"]) {
   FS.createDevice("/dev", "stderr", null, Module["stderr"]);
  } else {
   FS.symlink("/dev/tty1", "/dev/stderr");
  }
  var stdin = FS.open("/dev/stdin", "r");
  assert(stdin.fd === 0, "invalid handle for stdin (" + stdin.fd + ")");
  var stdout = FS.open("/dev/stdout", "w");
  assert(stdout.fd === 1, "invalid handle for stdout (" + stdout.fd + ")");
  var stderr = FS.open("/dev/stderr", "w");
  assert(stderr.fd === 2, "invalid handle for stderr (" + stderr.fd + ")");
 }),
 ensureErrnoError: (function() {
  if (FS.ErrnoError) return;
  FS.ErrnoError = function ErrnoError(errno, node) {
   this.node = node;
   this.setErrno = (function(errno) {
    this.errno = errno;
    for (var key in ERRNO_CODES) {
     if (ERRNO_CODES[key] === errno) {
      this.code = key;
      break;
     }
    }
   });
   this.setErrno(errno);
   this.message = ERRNO_MESSAGES[errno];
  };
  FS.ErrnoError.prototype = new Error;
  FS.ErrnoError.prototype.constructor = FS.ErrnoError;
  [ ERRNO_CODES.ENOENT ].forEach((function(code) {
   FS.genericErrors[code] = new FS.ErrnoError(code);
   FS.genericErrors[code].stack = "<generic error, no stack>";
  }));
 }),
 staticInit: (function() {
  FS.ensureErrnoError();
  FS.nameTable = new Array(4096);
  FS.mount(MEMFS, {}, "/");
  FS.createDefaultDirectories();
  FS.createDefaultDevices();
  FS.createSpecialDirectories();
  FS.filesystems = {
   "MEMFS": MEMFS,
   "IDBFS": IDBFS,
   "NODEFS": NODEFS,
   "WORKERFS": WORKERFS
  };
 }),
 init: (function(input, output, error) {
  assert(!FS.init.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
  FS.init.initialized = true;
  FS.ensureErrnoError();
  Module["stdin"] = input || Module["stdin"];
  Module["stdout"] = output || Module["stdout"];
  Module["stderr"] = error || Module["stderr"];
  FS.createStandardStreams();
 }),
 quit: (function() {
  FS.init.initialized = false;
  var fflush = Module["_fflush"];
  if (fflush) fflush(0);
  for (var i = 0; i < FS.streams.length; i++) {
   var stream = FS.streams[i];
   if (!stream) {
    continue;
   }
   FS.close(stream);
  }
 }),
 getMode: (function(canRead, canWrite) {
  var mode = 0;
  if (canRead) mode |= 292 | 73;
  if (canWrite) mode |= 146;
  return mode;
 }),
 joinPath: (function(parts, forceRelative) {
  var path = PATH.join.apply(null, parts);
  if (forceRelative && path[0] == "/") path = path.substr(1);
  return path;
 }),
 absolutePath: (function(relative, base) {
  return PATH.resolve(base, relative);
 }),
 standardizePath: (function(path) {
  return PATH.normalize(path);
 }),
 findObject: (function(path, dontResolveLastLink) {
  var ret = FS.analyzePath(path, dontResolveLastLink);
  if (ret.exists) {
   return ret.object;
  } else {
   ___setErrNo(ret.error);
   return null;
  }
 }),
 analyzePath: (function(path, dontResolveLastLink) {
  try {
   var lookup = FS.lookupPath(path, {
    follow: !dontResolveLastLink
   });
   path = lookup.path;
  } catch (e) {}
  var ret = {
   isRoot: false,
   exists: false,
   error: 0,
   name: null,
   path: null,
   object: null,
   parentExists: false,
   parentPath: null,
   parentObject: null
  };
  try {
   var lookup = FS.lookupPath(path, {
    parent: true
   });
   ret.parentExists = true;
   ret.parentPath = lookup.path;
   ret.parentObject = lookup.node;
   ret.name = PATH.basename(path);
   lookup = FS.lookupPath(path, {
    follow: !dontResolveLastLink
   });
   ret.exists = true;
   ret.path = lookup.path;
   ret.object = lookup.node;
   ret.name = lookup.node.name;
   ret.isRoot = lookup.path === "/";
  } catch (e) {
   ret.error = e.errno;
  }
  return ret;
 }),
 createFolder: (function(parent, name, canRead, canWrite) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(canRead, canWrite);
  return FS.mkdir(path, mode);
 }),
 createPath: (function(parent, path, canRead, canWrite) {
  parent = typeof parent === "string" ? parent : FS.getPath(parent);
  var parts = path.split("/").reverse();
  while (parts.length) {
   var part = parts.pop();
   if (!part) continue;
   var current = PATH.join2(parent, part);
   try {
    FS.mkdir(current);
   } catch (e) {}
   parent = current;
  }
  return current;
 }),
 createFile: (function(parent, name, properties, canRead, canWrite) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(canRead, canWrite);
  return FS.create(path, mode);
 }),
 createDataFile: (function(parent, name, data, canRead, canWrite, canOwn) {
  var path = name ? PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name) : parent;
  var mode = FS.getMode(canRead, canWrite);
  var node = FS.create(path, mode);
  if (data) {
   if (typeof data === "string") {
    var arr = new Array(data.length);
    for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
    data = arr;
   }
   FS.chmod(node, mode | 146);
   var stream = FS.open(node, "w");
   FS.write(stream, data, 0, data.length, 0, canOwn);
   FS.close(stream);
   FS.chmod(node, mode);
  }
  return node;
 }),
 createDevice: (function(parent, name, input, output) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(!!input, !!output);
  if (!FS.createDevice.major) FS.createDevice.major = 64;
  var dev = FS.makedev(FS.createDevice.major++, 0);
  FS.registerDevice(dev, {
   open: (function(stream) {
    stream.seekable = false;
   }),
   close: (function(stream) {
    if (output && output.buffer && output.buffer.length) {
     output(10);
    }
   }),
   read: (function(stream, buffer, offset, length, pos) {
    var bytesRead = 0;
    for (var i = 0; i < length; i++) {
     var result;
     try {
      result = input();
     } catch (e) {
      throw new FS.ErrnoError(ERRNO_CODES.EIO);
     }
     if (result === undefined && bytesRead === 0) {
      throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
     }
     if (result === null || result === undefined) break;
     bytesRead++;
     buffer[offset + i] = result;
    }
    if (bytesRead) {
     stream.node.timestamp = Date.now();
    }
    return bytesRead;
   }),
   write: (function(stream, buffer, offset, length, pos) {
    for (var i = 0; i < length; i++) {
     try {
      output(buffer[offset + i]);
     } catch (e) {
      throw new FS.ErrnoError(ERRNO_CODES.EIO);
     }
    }
    if (length) {
     stream.node.timestamp = Date.now();
    }
    return i;
   })
  });
  return FS.mkdev(path, mode, dev);
 }),
 createLink: (function(parent, name, target, canRead, canWrite) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  return FS.symlink(target, path);
 }),
 forceLoadFile: (function(obj) {
  if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
  var success = true;
  if (typeof XMLHttpRequest !== "undefined") {
   throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
  } else if (Module["read"]) {
   try {
    obj.contents = intArrayFromString(Module["read"](obj.url), true);
    obj.usedBytes = obj.contents.length;
   } catch (e) {
    success = false;
   }
  } else {
   throw new Error("Cannot load without read() or XMLHttpRequest.");
  }
  if (!success) ___setErrNo(ERRNO_CODES.EIO);
  return success;
 }),
 createLazyFile: (function(parent, name, url, canRead, canWrite) {
  function LazyUint8Array() {
   this.lengthKnown = false;
   this.chunks = [];
  }
  LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
   if (idx > this.length - 1 || idx < 0) {
    return undefined;
   }
   var chunkOffset = idx % this.chunkSize;
   var chunkNum = idx / this.chunkSize | 0;
   return this.getter(chunkNum)[chunkOffset];
  };
  LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
   this.getter = getter;
  };
  LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
   var xhr = new XMLHttpRequest;
   xhr.open("HEAD", url, false);
   xhr.send(null);
   if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
   var datalength = Number(xhr.getResponseHeader("Content-length"));
   var header;
   var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
   var chunkSize = 1024 * 1024;
   if (!hasByteServing) chunkSize = datalength;
   var doXHR = (function(from, to) {
    if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
    if (to > datalength - 1) throw new Error("only " + datalength + " bytes available! programmer error!");
    var xhr = new XMLHttpRequest;
    xhr.open("GET", url, false);
    if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    if (typeof Uint8Array != "undefined") xhr.responseType = "arraybuffer";
    if (xhr.overrideMimeType) {
     xhr.overrideMimeType("text/plain; charset=x-user-defined");
    }
    xhr.send(null);
    if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
    if (xhr.response !== undefined) {
     return new Uint8Array(xhr.response || []);
    } else {
     return intArrayFromString(xhr.responseText || "", true);
    }
   });
   var lazyArray = this;
   lazyArray.setDataGetter((function(chunkNum) {
    var start = chunkNum * chunkSize;
    var end = (chunkNum + 1) * chunkSize - 1;
    end = Math.min(end, datalength - 1);
    if (typeof lazyArray.chunks[chunkNum] === "undefined") {
     lazyArray.chunks[chunkNum] = doXHR(start, end);
    }
    if (typeof lazyArray.chunks[chunkNum] === "undefined") throw new Error("doXHR failed!");
    return lazyArray.chunks[chunkNum];
   }));
   this._length = datalength;
   this._chunkSize = chunkSize;
   this.lengthKnown = true;
  };
  if (typeof XMLHttpRequest !== "undefined") {
   if (!ENVIRONMENT_IS_WORKER) throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
   var lazyArray = new LazyUint8Array;
   Object.defineProperty(lazyArray, "length", {
    get: (function() {
     if (!this.lengthKnown) {
      this.cacheLength();
     }
     return this._length;
    })
   });
   Object.defineProperty(lazyArray, "chunkSize", {
    get: (function() {
     if (!this.lengthKnown) {
      this.cacheLength();
     }
     return this._chunkSize;
    })
   });
   var properties = {
    isDevice: false,
    contents: lazyArray
   };
  } else {
   var properties = {
    isDevice: false,
    url: url
   };
  }
  var node = FS.createFile(parent, name, properties, canRead, canWrite);
  if (properties.contents) {
   node.contents = properties.contents;
  } else if (properties.url) {
   node.contents = null;
   node.url = properties.url;
  }
  Object.defineProperty(node, "usedBytes", {
   get: (function() {
    return this.contents.length;
   })
  });
  var stream_ops = {};
  var keys = Object.keys(node.stream_ops);
  keys.forEach((function(key) {
   var fn = node.stream_ops[key];
   stream_ops[key] = function forceLoadLazyFile() {
    if (!FS.forceLoadFile(node)) {
     throw new FS.ErrnoError(ERRNO_CODES.EIO);
    }
    return fn.apply(null, arguments);
   };
  }));
  stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
   if (!FS.forceLoadFile(node)) {
    throw new FS.ErrnoError(ERRNO_CODES.EIO);
   }
   var contents = stream.node.contents;
   if (position >= contents.length) return 0;
   var size = Math.min(contents.length - position, length);
   assert(size >= 0);
   if (contents.slice) {
    for (var i = 0; i < size; i++) {
     buffer[offset + i] = contents[position + i];
    }
   } else {
    for (var i = 0; i < size; i++) {
     buffer[offset + i] = contents.get(position + i);
    }
   }
   return size;
  };
  node.stream_ops = stream_ops;
  return node;
 }),
 createPreloadedFile: (function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
  Browser.init();
  var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
  var dep = getUniqueRunDependency("cp " + fullname);
  function processData(byteArray) {
   function finish(byteArray) {
    if (preFinish) preFinish();
    if (!dontCreateFile) {
     FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
    }
    if (onload) onload();
    removeRunDependency(dep);
   }
   var handled = false;
   Module["preloadPlugins"].forEach((function(plugin) {
    if (handled) return;
    if (plugin["canHandle"](fullname)) {
     plugin["handle"](byteArray, fullname, finish, (function() {
      if (onerror) onerror();
      removeRunDependency(dep);
     }));
     handled = true;
    }
   }));
   if (!handled) finish(byteArray);
  }
  addRunDependency(dep);
  if (typeof url == "string") {
   Browser.asyncLoad(url, (function(byteArray) {
    processData(byteArray);
   }), onerror);
  } else {
   processData(url);
  }
 }),
 indexedDB: (function() {
  return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
 }),
 DB_NAME: (function() {
  return "EM_FS_" + window.location.pathname;
 }),
 DB_VERSION: 20,
 DB_STORE_NAME: "FILE_DATA",
 saveFilesToDB: (function(paths, onload, onerror) {
  onload = onload || (function() {});
  onerror = onerror || (function() {});
  var indexedDB = FS.indexedDB();
  try {
   var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
  } catch (e) {
   return onerror(e);
  }
  openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
   console.log("creating db");
   var db = openRequest.result;
   db.createObjectStore(FS.DB_STORE_NAME);
  };
  openRequest.onsuccess = function openRequest_onsuccess() {
   var db = openRequest.result;
   var transaction = db.transaction([ FS.DB_STORE_NAME ], "readwrite");
   var files = transaction.objectStore(FS.DB_STORE_NAME);
   var ok = 0, fail = 0, total = paths.length;
   function finish() {
    if (fail == 0) onload(); else onerror();
   }
   paths.forEach((function(path) {
    var putRequest = files.put(FS.analyzePath(path).object.contents, path);
    putRequest.onsuccess = function putRequest_onsuccess() {
     ok++;
     if (ok + fail == total) finish();
    };
    putRequest.onerror = function putRequest_onerror() {
     fail++;
     if (ok + fail == total) finish();
    };
   }));
   transaction.onerror = onerror;
  };
  openRequest.onerror = onerror;
 }),
 loadFilesFromDB: (function(paths, onload, onerror) {
  onload = onload || (function() {});
  onerror = onerror || (function() {});
  var indexedDB = FS.indexedDB();
  try {
   var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
  } catch (e) {
   return onerror(e);
  }
  openRequest.onupgradeneeded = onerror;
  openRequest.onsuccess = function openRequest_onsuccess() {
   var db = openRequest.result;
   try {
    var transaction = db.transaction([ FS.DB_STORE_NAME ], "readonly");
   } catch (e) {
    onerror(e);
    return;
   }
   var files = transaction.objectStore(FS.DB_STORE_NAME);
   var ok = 0, fail = 0, total = paths.length;
   function finish() {
    if (fail == 0) onload(); else onerror();
   }
   paths.forEach((function(path) {
    var getRequest = files.get(path);
    getRequest.onsuccess = function getRequest_onsuccess() {
     if (FS.analyzePath(path).exists) {
      FS.unlink(path);
     }
     FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
     ok++;
     if (ok + fail == total) finish();
    };
    getRequest.onerror = function getRequest_onerror() {
     fail++;
     if (ok + fail == total) finish();
    };
   }));
   transaction.onerror = onerror;
  };
  openRequest.onerror = onerror;
 })
};
var SYSCALLS = {
 DEFAULT_POLLMASK: 5,
 mappings: {},
 umask: 511,
 calculateAt: (function(dirfd, path) {
  if (path[0] !== "/") {
   var dir;
   if (dirfd === -100) {
    dir = FS.cwd();
   } else {
    var dirstream = FS.getStream(dirfd);
    if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
    dir = dirstream.path;
   }
   path = PATH.join2(dir, path);
  }
  return path;
 }),
 doStat: (function(func, path, buf) {
  try {
   var stat = func(path);
  } catch (e) {
   if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
    return -ERRNO_CODES.ENOTDIR;
   }
   throw e;
  }
  HEAP32[buf >> 2] = stat.dev;
  HEAP32[buf + 4 >> 2] = 0;
  HEAP32[buf + 8 >> 2] = stat.ino;
  HEAP32[buf + 12 >> 2] = stat.mode;
  HEAP32[buf + 16 >> 2] = stat.nlink;
  HEAP32[buf + 20 >> 2] = stat.uid;
  HEAP32[buf + 24 >> 2] = stat.gid;
  HEAP32[buf + 28 >> 2] = stat.rdev;
  HEAP32[buf + 32 >> 2] = 0;
  HEAP32[buf + 36 >> 2] = stat.size;
  HEAP32[buf + 40 >> 2] = 4096;
  HEAP32[buf + 44 >> 2] = stat.blocks;
  HEAP32[buf + 48 >> 2] = stat.atime.getTime() / 1e3 | 0;
  HEAP32[buf + 52 >> 2] = 0;
  HEAP32[buf + 56 >> 2] = stat.mtime.getTime() / 1e3 | 0;
  HEAP32[buf + 60 >> 2] = 0;
  HEAP32[buf + 64 >> 2] = stat.ctime.getTime() / 1e3 | 0;
  HEAP32[buf + 68 >> 2] = 0;
  HEAP32[buf + 72 >> 2] = stat.ino;
  return 0;
 }),
 doMsync: (function(addr, stream, len, flags) {
  var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
  FS.msync(stream, buffer, 0, len, flags);
 }),
 doMkdir: (function(path, mode) {
  path = PATH.normalize(path);
  if (path[path.length - 1] === "/") path = path.substr(0, path.length - 1);
  FS.mkdir(path, mode, 0);
  return 0;
 }),
 doMknod: (function(path, mode, dev) {
  switch (mode & 61440) {
  case 32768:
  case 8192:
  case 24576:
  case 4096:
  case 49152:
   break;
  default:
   return -ERRNO_CODES.EINVAL;
  }
  FS.mknod(path, mode, dev);
  return 0;
 }),
 doReadlink: (function(path, buf, bufsize) {
  if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
  var ret = FS.readlink(path);
  ret = ret.slice(0, Math.max(0, bufsize));
  writeStringToMemory(ret, buf, true);
  return ret.length;
 }),
 doAccess: (function(path, amode) {
  if (amode & ~7) {
   return -ERRNO_CODES.EINVAL;
  }
  var node;
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  node = lookup.node;
  var perms = "";
  if (amode & 4) perms += "r";
  if (amode & 2) perms += "w";
  if (amode & 1) perms += "x";
  if (perms && FS.nodePermissions(node, perms)) {
   return -ERRNO_CODES.EACCES;
  }
  return 0;
 }),
 doDup: (function(path, flags, suggestFD) {
  var suggest = FS.getStream(suggestFD);
  if (suggest) FS.close(suggest);
  return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
 }),
 doReadv: (function(stream, iov, iovcnt, offset) {
  var ret = 0;
  for (var i = 0; i < iovcnt; i++) {
   var ptr = HEAP32[iov + i * 8 >> 2];
   var len = HEAP32[iov + (i * 8 + 4) >> 2];
   var curr = FS.read(stream, HEAP8, ptr, len, offset);
   if (curr < 0) return -1;
   ret += curr;
   if (curr < len) break;
  }
  return ret;
 }),
 doWritev: (function(stream, iov, iovcnt, offset) {
  var ret = 0;
  for (var i = 0; i < iovcnt; i++) {
   var ptr = HEAP32[iov + i * 8 >> 2];
   var len = HEAP32[iov + (i * 8 + 4) >> 2];
   var curr = FS.write(stream, HEAP8, ptr, len, offset);
   if (curr < 0) return -1;
   ret += curr;
  }
  return ret;
 }),
 varargs: 0,
 get: (function(varargs) {
  SYSCALLS.varargs += 4;
  var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
  return ret;
 }),
 getStr: (function() {
  var ret = Pointer_stringify(SYSCALLS.get());
  return ret;
 }),
 getStreamFromFD: (function() {
  var stream = FS.getStream(SYSCALLS.get());
  if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  return stream;
 }),
 getSocketFromFD: (function() {
  var socket = SOCKFS.getSocket(SYSCALLS.get());
  if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  return socket;
 }),
 getSocketAddress: (function(allowNull) {
  var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
  if (allowNull && addrp === 0) return null;
  var info = __read_sockaddr(addrp, addrlen);
  if (info.errno) throw new FS.ErrnoError(info.errno);
  info.addr = DNS.lookup_addr(info.addr) || info.addr;
  return info;
 }),
 get64: (function() {
  var low = SYSCALLS.get(), high = SYSCALLS.get();
  if (low >= 0) assert(high === 0); else assert(high === -1);
  return low;
 }),
 getZero: (function() {
  assert(SYSCALLS.get() === 0);
 })
};
function ___syscall54(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
  switch (op) {
  case 21505:
   {
    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
    return 0;
   }
  case 21506:
   {
    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
    return 0;
   }
  case 21519:
   {
    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
    var argp = SYSCALLS.get();
    HEAP32[argp >> 2] = 0;
    return 0;
   }
  case 21520:
   {
    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
    return -ERRNO_CODES.EINVAL;
   }
  case 21531:
   {
    var argp = SYSCALLS.get();
    return FS.ioctl(stream, op, argp);
   }
  default:
   abort("bad ioctl syscall " + op);
  }
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
function _emscripten_glSampleCoverage(x0, x1) {
 GLctx.sampleCoverage(x0, x1);
}
function _eglSwapBuffers() {
 if (!EGL.defaultDisplayInitialized) {
  EGL.setErrorCode(12289);
 } else if (!Module.ctx) {
  EGL.setErrorCode(12290);
 } else if (Module.ctx.isContextLost()) {
  EGL.setErrorCode(12302);
 } else {
  EGL.setErrorCode(12288);
  return 1;
 }
 return 0;
}
function _emscripten_glFrustum() {
 Module["printErr"]("missing function: emscripten_glFrustum");
 abort(-1);
}
function _emscripten_glGetTexParameterfv(target, pname, params) {
 if (!params) {
  GL.recordError(1281);
  return;
 }
 HEAPF32[params >> 2] = GLctx.getTexParameter(target, pname);
}
var _ceil = Math_ceil;
function _emscripten_glBindRenderbuffer(target, renderbuffer) {
 GLctx.bindRenderbuffer(target, renderbuffer ? GL.renderbuffers[renderbuffer] : null);
}
function _emscripten_glViewport(x0, x1, x2, x3) {
 GLctx.viewport(x0, x1, x2, x3);
}
function _dlclose(handle) {
 if (!DLFCN.loadedLibs[handle]) {
  DLFCN.errorMsg = "Tried to dlclose() unopened handle: " + handle;
  return 1;
 } else {
  var lib_record = DLFCN.loadedLibs[handle];
  if (--lib_record.refcount == 0) {
   if (lib_record.module.cleanups) {
    lib_record.module.cleanups.forEach((function(cleanup) {
     cleanup();
    }));
   }
   delete DLFCN.loadedLibNames[lib_record.name];
   delete DLFCN.loadedLibs[handle];
  }
  return 0;
 }
}
function _emscripten_memcpy_big(dest, src, num) {
 HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
 return dest;
}
Module["_memcpy"] = _memcpy;
function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) {
 GLctx.copyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7);
}
function _emscripten_glTexParameterfv(target, pname, params) {
 var param = HEAPF32[params >> 2];
 GLctx.texParameterf(target, pname, param);
}
function _emscripten_glLinkProgram(program) {
 GLctx.linkProgram(GL.programs[program]);
 GL.programInfos[program] = null;
 GL.populateUniformTable(program);
}
function _emscripten_glUniform3f(location, v0, v1, v2) {
 location = GL.uniforms[location];
 GLctx.uniform3f(location, v0, v1, v2);
}
function _emscripten_glGetObjectParameterivARB() {
 Module["printErr"]("missing function: emscripten_glGetObjectParameterivARB");
 abort(-1);
}
function _emscripten_glBlendFunc(x0, x1) {
 GLctx.blendFunc(x0, x1);
}
function _emscripten_glUniform3i(location, v0, v1, v2) {
 location = GL.uniforms[location];
 GLctx.uniform3i(location, v0, v1, v2);
}
function _emscripten_glStencilOp(x0, x1, x2) {
 GLctx.stencilOp(x0, x1, x2);
}
function _emscripten_glBindAttribLocation(program, index, name) {
 name = Pointer_stringify(name);
 GLctx.bindAttribLocation(GL.programs[program], index, name);
}
function _eglGetConfigAttrib(display, config, attribute, value) {
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 if (config != 62002) {
  EGL.setErrorCode(12293);
  return 0;
 }
 if (!value) {
  EGL.setErrorCode(12300);
  return 0;
 }
 EGL.setErrorCode(12288);
 switch (attribute) {
 case 12320:
  HEAP32[value >> 2] = 32;
  return 1;
 case 12321:
  HEAP32[value >> 2] = 8;
  return 1;
 case 12322:
  HEAP32[value >> 2] = 8;
  return 1;
 case 12323:
  HEAP32[value >> 2] = 8;
  return 1;
 case 12324:
  HEAP32[value >> 2] = 8;
  return 1;
 case 12325:
  HEAP32[value >> 2] = 24;
  return 1;
 case 12326:
  HEAP32[value >> 2] = 8;
  return 1;
 case 12327:
  HEAP32[value >> 2] = 12344;
  return 1;
 case 12328:
  HEAP32[value >> 2] = 62002;
  return 1;
 case 12329:
  HEAP32[value >> 2] = 0;
  return 1;
 case 12330:
  HEAP32[value >> 2] = 4096;
  return 1;
 case 12331:
  HEAP32[value >> 2] = 16777216;
  return 1;
 case 12332:
  HEAP32[value >> 2] = 4096;
  return 1;
 case 12333:
  HEAP32[value >> 2] = 0;
  return 1;
 case 12334:
  HEAP32[value >> 2] = 0;
  return 1;
 case 12335:
  HEAP32[value >> 2] = 12344;
  return 1;
 case 12337:
  HEAP32[value >> 2] = 4;
  return 1;
 case 12338:
  HEAP32[value >> 2] = 1;
  return 1;
 case 12339:
  HEAP32[value >> 2] = 4;
  return 1;
 case 12340:
  HEAP32[value >> 2] = 12344;
  return 1;
 case 12341:
 case 12342:
 case 12343:
  HEAP32[value >> 2] = -1;
  return 1;
 case 12345:
 case 12346:
  HEAP32[value >> 2] = 0;
  return 1;
 case 12347:
 case 12348:
  HEAP32[value >> 2] = 1;
  return 1;
 case 12349:
 case 12350:
  HEAP32[value >> 2] = 0;
  return 1;
 case 12351:
  HEAP32[value >> 2] = 12430;
  return 1;
 case 12352:
  HEAP32[value >> 2] = 4;
  return 1;
 case 12354:
  HEAP32[value >> 2] = 0;
  return 1;
 default:
  EGL.setErrorCode(12292);
  return 0;
 }
}
function _emscripten_glEnableVertexAttribArray(index) {
 GLctx.enableVertexAttribArray(index);
}
Module["_memset"] = _memset;
var _BDtoILow = true;
function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) {
 GLctx.copyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7);
}
function _emscripten_set_touchcancel_callback(target, userData, useCapture, callbackfunc) {
 JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel");
 return 0;
}
function ___lock() {}
function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) {
 GLctx.blendFuncSeparate(x0, x1, x2, x3);
}
function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
 if (!pointer) {
  GL.recordError(1281);
  return;
 }
 HEAP32[pointer >> 2] = GLctx.getVertexAttribOffset(index, pname);
}
function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) {
 GLctx.vertexAttrib3f(x0, x1, x2, x3);
}
function _emscripten_set_touchstart_callback(target, userData, useCapture, callbackfunc) {
 JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart");
 return 0;
}
function _emscripten_glNormalPointer() {
 Module["printErr"]("missing function: emscripten_glNormalPointer");
 abort(-1);
}
var _emscripten_GetProcAddress = undefined;
Module["_emscripten_GetProcAddress"] = _emscripten_GetProcAddress;
function _eglGetProcAddress(name_) {
 return _emscripten_GetProcAddress(name_);
}
function _emscripten_set_main_loop_timing(mode, value) {
 Browser.mainLoop.timingMode = mode;
 Browser.mainLoop.timingValue = value;
 if (!Browser.mainLoop.func) {
  return 1;
 }
 if (mode == 0) {
  Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
   setTimeout(Browser.mainLoop.runner, value);
  };
  Browser.mainLoop.method = "timeout";
 } else if (mode == 1) {
  Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
   Browser.requestAnimationFrame(Browser.mainLoop.runner);
  };
  Browser.mainLoop.method = "rAF";
 } else if (mode == 2) {
  if (!window["setImmediate"]) {
   var setImmediates = [];
   var emscriptenMainLoopMessageId = "__emcc";
   function Browser_setImmediate_messageHandler(event) {
    if (event.source === window && event.data === emscriptenMainLoopMessageId) {
     event.stopPropagation();
     setImmediates.shift()();
    }
   }
   window.addEventListener("message", Browser_setImmediate_messageHandler, true);
   window["setImmediate"] = function Browser_emulated_setImmediate(func) {
    setImmediates.push(func);
    window.postMessage(emscriptenMainLoopMessageId, "*");
   };
  }
  Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
   window["setImmediate"](Browser.mainLoop.runner);
  };
  Browser.mainLoop.method = "immediate";
 }
 return 0;
}
function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
 Module["noExitRuntime"] = true;
 assert(!Browser.mainLoop.func, "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");
 Browser.mainLoop.func = func;
 Browser.mainLoop.arg = arg;
 var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
 Browser.mainLoop.runner = function Browser_mainLoop_runner() {
  if (ABORT) return;
  if (Browser.mainLoop.queue.length > 0) {
   var start = Date.now();
   var blocker = Browser.mainLoop.queue.shift();
   blocker.func(blocker.arg);
   if (Browser.mainLoop.remainingBlockers) {
    var remaining = Browser.mainLoop.remainingBlockers;
    var next = remaining % 1 == 0 ? remaining - 1 : Math.floor(remaining);
    if (blocker.counted) {
     Browser.mainLoop.remainingBlockers = next;
    } else {
     next = next + .5;
     Browser.mainLoop.remainingBlockers = (8 * remaining + next) / 9;
    }
   }
   console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + " ms");
   Browser.mainLoop.updateStatus();
   setTimeout(Browser.mainLoop.runner, 0);
   return;
  }
  if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
  if (Browser.mainLoop.timingMode == 1 && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
   Browser.mainLoop.scheduler();
   return;
  }
  if (Browser.mainLoop.method === "timeout" && Module.ctx) {
   Module.printErr("Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!");
   Browser.mainLoop.method = "";
  }
  Browser.mainLoop.runIter((function() {
   if (typeof arg !== "undefined") {
    Runtime.dynCall("vi", func, [ arg ]);
   } else {
    Runtime.dynCall("v", func);
   }
  }));
  if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  if (typeof SDL === "object" && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  Browser.mainLoop.scheduler();
 };
 if (!noSetTiming) {
  if (fps && fps > 0) _emscripten_set_main_loop_timing(0, 1e3 / fps); else _emscripten_set_main_loop_timing(1, 1);
  Browser.mainLoop.scheduler();
 }
 if (simulateInfiniteLoop) {
  throw "SimulateInfiniteLoop";
 }
}
var Browser = {
 mainLoop: {
  scheduler: null,
  method: "",
  currentlyRunningMainloop: 0,
  func: null,
  arg: 0,
  timingMode: 0,
  timingValue: 0,
  currentFrameNumber: 0,
  queue: [],
  pause: (function() {
   Browser.mainLoop.scheduler = null;
   Browser.mainLoop.currentlyRunningMainloop++;
  }),
  resume: (function() {
   Browser.mainLoop.currentlyRunningMainloop++;
   var timingMode = Browser.mainLoop.timingMode;
   var timingValue = Browser.mainLoop.timingValue;
   var func = Browser.mainLoop.func;
   Browser.mainLoop.func = null;
   _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true);
   _emscripten_set_main_loop_timing(timingMode, timingValue);
   Browser.mainLoop.scheduler();
  }),
  updateStatus: (function() {
   if (Module["setStatus"]) {
    var message = Module["statusMessage"] || "Please wait...";
    var remaining = Browser.mainLoop.remainingBlockers;
    var expected = Browser.mainLoop.expectedBlockers;
    if (remaining) {
     if (remaining < expected) {
      Module["setStatus"](message + " (" + (expected - remaining) + "/" + expected + ")");
     } else {
      Module["setStatus"](message);
     }
    } else {
     Module["setStatus"]("");
    }
   }
  }),
  runIter: (function(func) {
   if (ABORT) return;
   if (Module["preMainLoop"]) {
    var preRet = Module["preMainLoop"]();
    if (preRet === false) {
     return;
    }
   }
   try {
    func();
   } catch (e) {
    if (e instanceof ExitStatus) {
     return;
    } else {
     if (e && typeof e === "object" && e.stack) Module.printErr("exception thrown: " + [ e, e.stack ]);
     throw e;
    }
   }
   if (Module["postMainLoop"]) Module["postMainLoop"]();
  })
 },
 isFullScreen: false,
 pointerLock: false,
 moduleContextCreatedCallbacks: [],
 workers: [],
 init: (function() {
  if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  if (Browser.initted) return;
  Browser.initted = true;
  try {
   new Blob;
   Browser.hasBlobConstructor = true;
  } catch (e) {
   Browser.hasBlobConstructor = false;
   console.log("warning: no blob constructor, cannot create blobs with mimetypes");
  }
  Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : !Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null;
  Browser.URLObject = typeof window != "undefined" ? window.URL ? window.URL : window.webkitURL : undefined;
  if (!Module.noImageDecoding && typeof Browser.URLObject === "undefined") {
   console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
   Module.noImageDecoding = true;
  }
  var imagePlugin = {};
  imagePlugin["canHandle"] = function imagePlugin_canHandle(name) {
   return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
  };
  imagePlugin["handle"] = function imagePlugin_handle(byteArray, name, onload, onerror) {
   var b = null;
   if (Browser.hasBlobConstructor) {
    try {
     b = new Blob([ byteArray ], {
      type: Browser.getMimetype(name)
     });
     if (b.size !== byteArray.length) {
      b = new Blob([ (new Uint8Array(byteArray)).buffer ], {
       type: Browser.getMimetype(name)
      });
     }
    } catch (e) {
     Runtime.warnOnce("Blob constructor present but fails: " + e + "; falling back to blob builder");
    }
   }
   if (!b) {
    var bb = new Browser.BlobBuilder;
    bb.append((new Uint8Array(byteArray)).buffer);
    b = bb.getBlob();
   }
   var url = Browser.URLObject.createObjectURL(b);
   var img = new Image;
   img.onload = function img_onload() {
    assert(img.complete, "Image " + name + " could not be decoded");
    var canvas = document.createElement("canvas");
    canvas.width = img.width;
    canvas.height = img.height;
    var ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0);
    Module["preloadedImages"][name] = canvas;
    Browser.URLObject.revokeObjectURL(url);
    if (onload) onload(byteArray);
   };
   img.onerror = function img_onerror(event) {
    console.log("Image " + url + " could not be decoded");
    if (onerror) onerror();
   };
   img.src = url;
  };
  Module["preloadPlugins"].push(imagePlugin);
  var audioPlugin = {};
  audioPlugin["canHandle"] = function audioPlugin_canHandle(name) {
   return !Module.noAudioDecoding && name.substr(-4) in {
    ".ogg": 1,
    ".wav": 1,
    ".mp3": 1
   };
  };
  audioPlugin["handle"] = function audioPlugin_handle(byteArray, name, onload, onerror) {
   var done = false;
   function finish(audio) {
    if (done) return;
    done = true;
    Module["preloadedAudios"][name] = audio;
    if (onload) onload(byteArray);
   }
   function fail() {
    if (done) return;
    done = true;
    Module["preloadedAudios"][name] = new Audio;
    if (onerror) onerror();
   }
   if (Browser.hasBlobConstructor) {
    try {
     var b = new Blob([ byteArray ], {
      type: Browser.getMimetype(name)
     });
    } catch (e) {
     return fail();
    }
    var url = Browser.URLObject.createObjectURL(b);
    var audio = new Audio;
    audio.addEventListener("canplaythrough", (function() {
     finish(audio);
    }), false);
    audio.onerror = function audio_onerror(event) {
     if (done) return;
     console.log("warning: browser could not fully decode audio " + name + ", trying slower base64 approach");
     function encode64(data) {
      var BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      var PAD = "=";
      var ret = "";
      var leftchar = 0;
      var leftbits = 0;
      for (var i = 0; i < data.length; i++) {
       leftchar = leftchar << 8 | data[i];
       leftbits += 8;
       while (leftbits >= 6) {
        var curr = leftchar >> leftbits - 6 & 63;
        leftbits -= 6;
        ret += BASE[curr];
       }
      }
      if (leftbits == 2) {
       ret += BASE[(leftchar & 3) << 4];
       ret += PAD + PAD;
      } else if (leftbits == 4) {
       ret += BASE[(leftchar & 15) << 2];
       ret += PAD;
      }
      return ret;
     }
     audio.src = "data:audio/x-" + name.substr(-3) + ";base64," + encode64(byteArray);
     finish(audio);
    };
    audio.src = url;
    Browser.safeSetTimeout((function() {
     finish(audio);
    }), 1e4);
   } else {
    return fail();
   }
  };
  Module["preloadPlugins"].push(audioPlugin);
  var canvas = Module["canvas"];
  function pointerLockChange() {
   Browser.pointerLock = document["pointerLockElement"] === canvas || document["mozPointerLockElement"] === canvas || document["webkitPointerLockElement"] === canvas || document["msPointerLockElement"] === canvas;
  }
  if (canvas) {
   canvas.requestPointerLock = canvas["requestPointerLock"] || canvas["mozRequestPointerLock"] || canvas["webkitRequestPointerLock"] || canvas["msRequestPointerLock"] || (function() {});
   canvas.exitPointerLock = document["exitPointerLock"] || document["mozExitPointerLock"] || document["webkitExitPointerLock"] || document["msExitPointerLock"] || (function() {});
   canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
   document.addEventListener("pointerlockchange", pointerLockChange, false);
   document.addEventListener("mozpointerlockchange", pointerLockChange, false);
   document.addEventListener("webkitpointerlockchange", pointerLockChange, false);
   document.addEventListener("mspointerlockchange", pointerLockChange, false);
   if (Module["elementPointerLock"]) {
    canvas.addEventListener("click", (function(ev) {
     if (!Browser.pointerLock && canvas.requestPointerLock) {
      canvas.requestPointerLock();
      ev.preventDefault();
     }
    }), false);
   }
  }
 }),
 createContext: (function(canvas, useWebGL, setInModule, webGLContextAttributes) {
  if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx;
  var ctx;
  var contextHandle;
  if (useWebGL) {
   var contextAttributes = {
    antialias: false,
    alpha: false
   };
   if (webGLContextAttributes) {
    for (var attribute in webGLContextAttributes) {
     contextAttributes[attribute] = webGLContextAttributes[attribute];
    }
   }
   contextHandle = GL.createContext(canvas, contextAttributes);
   if (contextHandle) {
    ctx = GL.getContext(contextHandle).GLctx;
   }
   canvas.style.backgroundColor = "black";
  } else {
   ctx = canvas.getContext("2d");
  }
  if (!ctx) return null;
  if (setInModule) {
   if (!useWebGL) assert(typeof GLctx === "undefined", "cannot set in module if GLctx is used, but we are a non-GL context that would replace it");
   Module.ctx = ctx;
   if (useWebGL) GL.makeContextCurrent(contextHandle);
   Module.useWebGL = useWebGL;
   Browser.moduleContextCreatedCallbacks.forEach((function(callback) {
    callback();
   }));
   Browser.init();
  }
  return ctx;
 }),
 destroyContext: (function(canvas, useWebGL, setInModule) {}),
 fullScreenHandlersInstalled: false,
 lockPointer: undefined,
 resizeCanvas: undefined,
 requestFullScreen: (function(lockPointer, resizeCanvas, vrDevice) {
  Browser.lockPointer = lockPointer;
  Browser.resizeCanvas = resizeCanvas;
  Browser.vrDevice = vrDevice;
  if (typeof Browser.lockPointer === "undefined") Browser.lockPointer = true;
  if (typeof Browser.resizeCanvas === "undefined") Browser.resizeCanvas = false;
  if (typeof Browser.vrDevice === "undefined") Browser.vrDevice = null;
  var canvas = Module["canvas"];
  function fullScreenChange() {
   Browser.isFullScreen = false;
   var canvasContainer = canvas.parentNode;
   if ((document["webkitFullScreenElement"] || document["webkitFullscreenElement"] || document["mozFullScreenElement"] || document["mozFullscreenElement"] || document["fullScreenElement"] || document["fullscreenElement"] || document["msFullScreenElement"] || document["msFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvasContainer) {
    canvas.cancelFullScreen = document["cancelFullScreen"] || document["mozCancelFullScreen"] || document["webkitCancelFullScreen"] || document["msExitFullscreen"] || document["exitFullscreen"] || (function() {});
    canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
    if (Browser.lockPointer) canvas.requestPointerLock();
    Browser.isFullScreen = true;
    if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
   } else {
    canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
    canvasContainer.parentNode.removeChild(canvasContainer);
    if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
   }
   if (Module["onFullScreen"]) Module["onFullScreen"](Browser.isFullScreen);
   Browser.updateCanvasDimensions(canvas);
  }
  if (!Browser.fullScreenHandlersInstalled) {
   Browser.fullScreenHandlersInstalled = true;
   document.addEventListener("fullscreenchange", fullScreenChange, false);
   document.addEventListener("mozfullscreenchange", fullScreenChange, false);
   document.addEventListener("webkitfullscreenchange", fullScreenChange, false);
   document.addEventListener("MSFullscreenChange", fullScreenChange, false);
  }
  var canvasContainer = document.createElement("div");
  canvas.parentNode.insertBefore(canvasContainer, canvas);
  canvasContainer.appendChild(canvas);
  canvasContainer.requestFullScreen = canvasContainer["requestFullScreen"] || canvasContainer["mozRequestFullScreen"] || canvasContainer["msRequestFullscreen"] || (canvasContainer["webkitRequestFullScreen"] ? (function() {
   canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]);
  }) : null);
  if (vrDevice) {
   canvasContainer.requestFullScreen({
    vrDisplay: vrDevice
   });
  } else {
   canvasContainer.requestFullScreen();
  }
 }),
 nextRAF: 0,
 fakeRequestAnimationFrame: (function(func) {
  var now = Date.now();
  if (Browser.nextRAF === 0) {
   Browser.nextRAF = now + 1e3 / 60;
  } else {
   while (now + 2 >= Browser.nextRAF) {
    Browser.nextRAF += 1e3 / 60;
   }
  }
  var delay = Math.max(Browser.nextRAF - now, 0);
  setTimeout(func, delay);
 }),
 requestAnimationFrame: function requestAnimationFrame(func) {
  if (typeof window === "undefined") {
   Browser.fakeRequestAnimationFrame(func);
  } else {
   if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = window["requestAnimationFrame"] || window["mozRequestAnimationFrame"] || window["webkitRequestAnimationFrame"] || window["msRequestAnimationFrame"] || window["oRequestAnimationFrame"] || Browser.fakeRequestAnimationFrame;
   }
   window.requestAnimationFrame(func);
  }
 },
 safeCallback: (function(func) {
  return (function() {
   if (!ABORT) return func.apply(null, arguments);
  });
 }),
 allowAsyncCallbacks: true,
 queuedAsyncCallbacks: [],
 pauseAsyncCallbacks: (function() {
  Browser.allowAsyncCallbacks = false;
 }),
 resumeAsyncCallbacks: (function() {
  Browser.allowAsyncCallbacks = true;
  if (Browser.queuedAsyncCallbacks.length > 0) {
   var callbacks = Browser.queuedAsyncCallbacks;
   Browser.queuedAsyncCallbacks = [];
   callbacks.forEach((function(func) {
    func();
   }));
  }
 }),
 safeRequestAnimationFrame: (function(func) {
  return Browser.requestAnimationFrame((function() {
   if (ABORT) return;
   if (Browser.allowAsyncCallbacks) {
    func();
   } else {
    Browser.queuedAsyncCallbacks.push(func);
   }
  }));
 }),
 safeSetTimeout: (function(func, timeout) {
  Module["noExitRuntime"] = true;
  return setTimeout((function() {
   if (ABORT) return;
   if (Browser.allowAsyncCallbacks) {
    func();
   } else {
    Browser.queuedAsyncCallbacks.push(func);
   }
  }), timeout);
 }),
 safeSetInterval: (function(func, timeout) {
  Module["noExitRuntime"] = true;
  return setInterval((function() {
   if (ABORT) return;
   if (Browser.allowAsyncCallbacks) {
    func();
   }
  }), timeout);
 }),
 getMimetype: (function(name) {
  return {
   "jpg": "image/jpeg",
   "jpeg": "image/jpeg",
   "png": "image/png",
   "bmp": "image/bmp",
   "ogg": "audio/ogg",
   "wav": "audio/wav",
   "mp3": "audio/mpeg"
  }[name.substr(name.lastIndexOf(".") + 1)];
 }),
 getUserMedia: (function(func) {
  if (!window.getUserMedia) {
   window.getUserMedia = navigator["getUserMedia"] || navigator["mozGetUserMedia"];
  }
  window.getUserMedia(func);
 }),
 getMovementX: (function(event) {
  return event["movementX"] || event["mozMovementX"] || event["webkitMovementX"] || 0;
 }),
 getMovementY: (function(event) {
  return event["movementY"] || event["mozMovementY"] || event["webkitMovementY"] || 0;
 }),
 getMouseWheelDelta: (function(event) {
  var delta = 0;
  switch (event.type) {
  case "DOMMouseScroll":
   delta = event.detail;
   break;
  case "mousewheel":
   delta = event.wheelDelta;
   break;
  case "wheel":
   delta = event["deltaY"];
   break;
  default:
   throw "unrecognized mouse wheel event: " + event.type;
  }
  return delta;
 }),
 mouseX: 0,
 mouseY: 0,
 mouseMovementX: 0,
 mouseMovementY: 0,
 touches: {},
 lastTouches: {},
 calculateMouseEvent: (function(event) {
  if (Browser.pointerLock) {
   if (event.type != "mousemove" && "mozMovementX" in event) {
    Browser.mouseMovementX = Browser.mouseMovementY = 0;
   } else {
    Browser.mouseMovementX = Browser.getMovementX(event);
    Browser.mouseMovementY = Browser.getMovementY(event);
   }
   if (typeof SDL != "undefined") {
    Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
    Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
   } else {
    Browser.mouseX += Browser.mouseMovementX;
    Browser.mouseY += Browser.mouseMovementY;
   }
  } else {
   var rect = Module["canvas"].getBoundingClientRect();
   var cw = Module["canvas"].width;
   var ch = Module["canvas"].height;
   var scrollX = typeof window.scrollX !== "undefined" ? window.scrollX : window.pageXOffset;
   var scrollY = typeof window.scrollY !== "undefined" ? window.scrollY : window.pageYOffset;
   if (event.type === "touchstart" || event.type === "touchend" || event.type === "touchmove") {
    var touch = event.touch;
    if (touch === undefined) {
     return;
    }
    var adjustedX = touch.pageX - (scrollX + rect.left);
    var adjustedY = touch.pageY - (scrollY + rect.top);
    adjustedX = adjustedX * (cw / rect.width);
    adjustedY = adjustedY * (ch / rect.height);
    var coords = {
     x: adjustedX,
     y: adjustedY
    };
    if (event.type === "touchstart") {
     Browser.lastTouches[touch.identifier] = coords;
     Browser.touches[touch.identifier] = coords;
    } else if (event.type === "touchend" || event.type === "touchmove") {
     var last = Browser.touches[touch.identifier];
     if (!last) last = coords;
     Browser.lastTouches[touch.identifier] = last;
     Browser.touches[touch.identifier] = coords;
    }
    return;
   }
   var x = event.pageX - (scrollX + rect.left);
   var y = event.pageY - (scrollY + rect.top);
   x = x * (cw / rect.width);
   y = y * (ch / rect.height);
   Browser.mouseMovementX = x - Browser.mouseX;
   Browser.mouseMovementY = y - Browser.mouseY;
   Browser.mouseX = x;
   Browser.mouseY = y;
  }
 }),
 xhrLoad: (function(url, onload, onerror) {
  var xhr = new XMLHttpRequest;
  xhr.open("GET", url, true);
  xhr.responseType = "arraybuffer";
  xhr.onload = function xhr_onload() {
   if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
    onload(xhr.response);
   } else {
    onerror();
   }
  };
  xhr.onerror = onerror;
  xhr.send(null);
 }),
 asyncLoad: (function(url, onload, onerror, noRunDep) {
  Browser.xhrLoad(url, (function(arrayBuffer) {
   assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
   onload(new Uint8Array(arrayBuffer));
   if (!noRunDep) removeRunDependency("al " + url);
  }), (function(event) {
   if (onerror) {
    onerror();
   } else {
    throw 'Loading data file "' + url + '" failed.';
   }
  }));
  if (!noRunDep) addRunDependency("al " + url);
 }),
 resizeListeners: [],
 updateResizeListeners: (function() {
  var canvas = Module["canvas"];
  Browser.resizeListeners.forEach((function(listener) {
   listener(canvas.width, canvas.height);
  }));
 }),
 setCanvasSize: (function(width, height, noUpdates) {
  var canvas = Module["canvas"];
  Browser.updateCanvasDimensions(canvas, width, height);
  if (!noUpdates) Browser.updateResizeListeners();
 }),
 windowedWidth: 0,
 windowedHeight: 0,
 setFullScreenCanvasSize: (function() {
  if (typeof SDL != "undefined") {
   var flags = HEAPU32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2];
   flags = flags | 8388608;
   HEAP32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2] = flags;
  }
  Browser.updateResizeListeners();
 }),
 setWindowedCanvasSize: (function() {
  if (typeof SDL != "undefined") {
   var flags = HEAPU32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2];
   flags = flags & ~8388608;
   HEAP32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2] = flags;
  }
  Browser.updateResizeListeners();
 }),
 updateCanvasDimensions: (function(canvas, wNative, hNative) {
  if (wNative && hNative) {
   canvas.widthNative = wNative;
   canvas.heightNative = hNative;
  } else {
   wNative = canvas.widthNative;
   hNative = canvas.heightNative;
  }
  var w = wNative;
  var h = hNative;
  if (Module["forcedAspectRatio"] && Module["forcedAspectRatio"] > 0) {
   if (w / h < Module["forcedAspectRatio"]) {
    w = Math.round(h * Module["forcedAspectRatio"]);
   } else {
    h = Math.round(w / Module["forcedAspectRatio"]);
   }
  }
  if ((document["webkitFullScreenElement"] || document["webkitFullscreenElement"] || document["mozFullScreenElement"] || document["mozFullscreenElement"] || document["fullScreenElement"] || document["fullscreenElement"] || document["msFullScreenElement"] || document["msFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvas.parentNode && typeof screen != "undefined") {
   var factor = Math.min(screen.width / w, screen.height / h);
   w = Math.round(w * factor);
   h = Math.round(h * factor);
  }
  if (Browser.resizeCanvas) {
   if (canvas.width != w) canvas.width = w;
   if (canvas.height != h) canvas.height = h;
   if (typeof canvas.style != "undefined") {
    canvas.style.removeProperty("width");
    canvas.style.removeProperty("height");
   }
  } else {
   if (canvas.width != wNative) canvas.width = wNative;
   if (canvas.height != hNative) canvas.height = hNative;
   if (typeof canvas.style != "undefined") {
    if (w != wNative || h != hNative) {
     canvas.style.setProperty("width", w + "px", "important");
     canvas.style.setProperty("height", h + "px", "important");
    } else {
     canvas.style.removeProperty("width");
     canvas.style.removeProperty("height");
    }
   }
  }
 }),
 wgetRequests: {},
 nextWgetRequestHandle: 0,
 getNextWgetRequestHandle: (function() {
  var handle = Browser.nextWgetRequestHandle;
  Browser.nextWgetRequestHandle++;
  return handle;
 })
};
function _emscripten_get_pointerlock_status(pointerlockStatus) {
 if (pointerlockStatus) JSEvents.fillPointerlockChangeEventData(pointerlockStatus);
 if (!document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock) {
  return -1;
 }
 return 0;
}
function _eglSwapInterval(display, interval) {
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 if (interval == 0) _emscripten_set_main_loop_timing(0, 0); else _emscripten_set_main_loop_timing(1, interval);
 EGL.setErrorCode(12288);
 return 1;
}
function emscriptenWebGLGetVertexAttrib(index, pname, params, type) {
 if (!params) {
  GL.recordError(1281);
  return;
 }
 var data = GLctx.getVertexAttrib(index, pname);
 if (typeof data == "number" || typeof data == "boolean") {
  switch (type) {
  case "Integer":
   HEAP32[params >> 2] = data;
   break;
  case "Float":
   HEAPF32[params >> 2] = data;
   break;
  case "FloatToInteger":
   HEAP32[params >> 2] = Math.fround(data);
   break;
  default:
   throw "internal emscriptenWebGLGetVertexAttrib() error, bad type: " + type;
  }
 } else {
  for (var i = 0; i < data.length; i++) {
   switch (type) {
   case "Integer":
    HEAP32[params + i >> 2] = data[i];
    break;
   case "Float":
    HEAPF32[params + i >> 2] = data[i];
    break;
   case "FloatToInteger":
    HEAP32[params + i >> 2] = Math.fround(data[i]);
    break;
   default:
    throw "internal emscriptenWebGLGetVertexAttrib() error, bad type: " + type;
   }
  }
 }
}
function _emscripten_glGetVertexAttribfv(index, pname, params) {
 emscriptenWebGLGetVertexAttrib(index, pname, params, "Float");
}
function _emscripten_set_keyup_callback(target, userData, useCapture, callbackfunc) {
 JSEvents.registerKeyEventCallback(target, userData, useCapture, callbackfunc, 3, "keyup");
 return 0;
}
function _emscripten_glDeleteShader(id) {
 if (!id) return;
 var shader = GL.shaders[id];
 if (!shader) {
  GL.recordError(1281);
  return;
 }
 GLctx.deleteShader(shader);
 GL.shaders[id] = null;
}
function ___cxa_guard_acquire(variable) {
 if (!HEAP8[variable >> 0]) {
  HEAP8[variable >> 0] = 1;
  return 1;
 }
 return 0;
}
function _emscripten_glDrawArraysInstanced(mode, first, count, primcount) {
 GLctx["drawArraysInstanced"](mode, first, count, primcount);
}
function _emscripten_glDeleteBuffers(n, buffers) {
 for (var i = 0; i < n; i++) {
  var id = HEAP32[buffers + i * 4 >> 2];
  var buffer = GL.buffers[id];
  if (!buffer) continue;
  GLctx.deleteBuffer(buffer);
  buffer.name = 0;
  GL.buffers[id] = null;
  if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
  if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
 }
}
function _emscripten_glTexParameteriv(target, pname, params) {
 var param = HEAP32[params >> 2];
 GLctx.texParameteri(target, pname, param);
}
function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
 location = GL.uniforms[location];
 var view;
 if (count === 1) {
  view = GL.miniTempBufferViews[3];
  for (var i = 0; i < 4; i++) {
   view[i] = HEAPF32[value + i * 4 >> 2];
  }
 } else {
  view = HEAPF32.subarray(value >> 2, value + count * 16 >> 2);
 }
 GLctx.uniformMatrix2fv(location, transpose, view);
}
function ___syscall5(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get();
  var stream = FS.open(pathname, flags, mode);
  return stream.fd;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
function ___syscall6(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD();
  FS.close(stream);
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
var _cos = Math_cos;
function _llvm_stacksave() {
 var self = _llvm_stacksave;
 if (!self.LLVM_SAVEDSTACKS) {
  self.LLVM_SAVEDSTACKS = [];
 }
 self.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
 return self.LLVM_SAVEDSTACKS.length - 1;
}
function _emscripten_glGetVertexAttribiv(index, pname, params) {
 emscriptenWebGLGetVertexAttrib(index, pname, params, "FloatToInteger");
}
function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
 location = GL.uniforms[location];
 var view;
 if (count === 1) {
  view = GL.miniTempBufferViews[15];
  for (var i = 0; i < 16; i++) {
   view[i] = HEAPF32[value + i * 4 >> 2];
  }
 } else {
  view = HEAPF32.subarray(value >> 2, value + count * 64 >> 2);
 }
 GLctx.uniformMatrix4fv(location, transpose, view);
}
function _emscripten_glEnableClientState() {
 Module["printErr"]("missing function: emscripten_glEnableClientState");
 abort(-1);
}
function _emscripten_glGetPointerv() {
 Module["printErr"]("missing function: emscripten_glGetPointerv");
 abort(-1);
}
function _eglChooseConfig(display, attrib_list, configs, config_size, numConfigs) {
 return EGL.chooseConfig(display, attrib_list, configs, config_size, numConfigs);
}
function ___syscall146(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
  return SYSCALLS.doWritev(stream, iov, iovcnt);
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
function ___syscall145(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
  return SYSCALLS.doReadv(stream, iov, iovcnt);
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
function _emscripten_glStencilMask(x0) {
 GLctx.stencilMask(x0);
}
function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) {
 GLctx.stencilFuncSeparate(x0, x1, x2, x3);
}
Module["_i64Subtract"] = _i64Subtract;
Module["_i64Add"] = _i64Add;
function __ZSt18uncaught_exceptionv() {
 return !!__ZSt18uncaught_exceptionv.uncaught_exception;
}
var EXCEPTIONS = {
 last: 0,
 caught: [],
 infos: {},
 deAdjust: (function(adjusted) {
  if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
  for (var ptr in EXCEPTIONS.infos) {
   var info = EXCEPTIONS.infos[ptr];
   if (info.adjusted === adjusted) {
    return ptr;
   }
  }
  return adjusted;
 }),
 addRef: (function(ptr) {
  if (!ptr) return;
  var info = EXCEPTIONS.infos[ptr];
  info.refcount++;
 }),
 decRef: (function(ptr) {
  if (!ptr) return;
  var info = EXCEPTIONS.infos[ptr];
  assert(info.refcount > 0);
  info.refcount--;
  if (info.refcount === 0) {
   if (info.destructor) {
    Runtime.dynCall("vi", info.destructor, [ ptr ]);
   }
   delete EXCEPTIONS.infos[ptr];
   ___cxa_free_exception(ptr);
  }
 }),
 clearRef: (function(ptr) {
  if (!ptr) return;
  var info = EXCEPTIONS.infos[ptr];
  info.refcount = 0;
 })
};
function ___resumeException(ptr) {
 if (!EXCEPTIONS.last) {
  EXCEPTIONS.last = ptr;
 }
 EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr));
 throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
}
function ___cxa_find_matching_catch() {
 var thrown = EXCEPTIONS.last;
 if (!thrown) {
  return (asm["setTempRet0"](0), 0) | 0;
 }
 var info = EXCEPTIONS.infos[thrown];
 var throwntype = info.type;
 if (!throwntype) {
  return (asm["setTempRet0"](0), thrown) | 0;
 }
 var typeArray = Array.prototype.slice.call(arguments);
 var pointer = Module["___cxa_is_pointer_type"](throwntype);
 if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
 HEAP32[___cxa_find_matching_catch.buffer >> 2] = thrown;
 thrown = ___cxa_find_matching_catch.buffer;
 for (var i = 0; i < typeArray.length; i++) {
  if (typeArray[i] && Module["___cxa_can_catch"](typeArray[i], throwntype, thrown)) {
   thrown = HEAP32[thrown >> 2];
   info.adjusted = thrown;
   return (asm["setTempRet0"](typeArray[i]), thrown) | 0;
  }
 }
 thrown = HEAP32[thrown >> 2];
 return (asm["setTempRet0"](throwntype), thrown) | 0;
}
function ___cxa_throw(ptr, type, destructor) {
 EXCEPTIONS.infos[ptr] = {
  ptr: ptr,
  adjusted: ptr,
  type: type,
  destructor: destructor,
  refcount: 0
 };
 EXCEPTIONS.last = ptr;
 if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
  __ZSt18uncaught_exceptionv.uncaught_exception = 1;
 } else {
  __ZSt18uncaught_exceptionv.uncaught_exception++;
 }
 throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
}
function _emscripten_set_touchend_callback(target, userData, useCapture, callbackfunc) {
 JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend");
 return 0;
}
function __setLetterbox(element, topBottom, leftRight) {
 if (JSEvents.isInternetExplorer()) {
  element.style.marginLeft = element.style.marginRight = leftRight + "px";
  element.style.marginTop = element.style.marginBottom = topBottom + "px";
 } else {
  element.style.paddingLeft = element.style.paddingRight = leftRight + "px";
  element.style.paddingTop = element.style.paddingBottom = topBottom + "px";
 }
}
function _emscripten_do_request_fullscreen(target, strategy) {
 if (typeof JSEvents.fullscreenEnabled() === "undefined") return -1;
 if (!JSEvents.fullscreenEnabled()) return -3;
 if (!target) target = "#canvas";
 target = JSEvents.findEventTarget(target);
 if (!target) return -4;
 if (!target.requestFullscreen && !target.msRequestFullscreen && !target.mozRequestFullScreen && !target.mozRequestFullscreen && !target.webkitRequestFullscreen) {
  return -3;
 }
 var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
 if (!canPerformRequests) {
  if (strategy.deferUntilInEventHandler) {
   JSEvents.deferCall(JSEvents.requestFullscreen, 1, [ target, strategy ]);
   return 1;
  } else {
   return -2;
  }
 }
 return JSEvents.requestFullscreen(target, strategy);
}
var __currentFullscreenStrategy = {};
function __registerRestoreOldStyle(canvas) {
 var oldWidth = canvas.width;
 var oldHeight = canvas.height;
 var oldCssWidth = canvas.style.width;
 var oldCssHeight = canvas.style.height;
 var oldBackgroundColor = canvas.style.backgroundColor;
 var oldDocumentBackgroundColor = document.body.style.backgroundColor;
 var oldPaddingLeft = canvas.style.paddingLeft;
 var oldPaddingRight = canvas.style.paddingRight;
 var oldPaddingTop = canvas.style.paddingTop;
 var oldPaddingBottom = canvas.style.paddingBottom;
 var oldMarginLeft = canvas.style.marginLeft;
 var oldMarginRight = canvas.style.marginRight;
 var oldMarginTop = canvas.style.marginTop;
 var oldMarginBottom = canvas.style.marginBottom;
 var oldDocumentBodyMargin = document.body.style.margin;
 var oldDocumentOverflow = document.documentElement.style.overflow;
 var oldDocumentScroll = document.body.scroll;
 var oldImageRendering = canvas.style.imageRendering;
 function restoreOldStyle() {
  var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
  if (!fullscreenElement) {
   document.removeEventListener("fullscreenchange", restoreOldStyle);
   document.removeEventListener("mozfullscreenchange", restoreOldStyle);
   document.removeEventListener("webkitfullscreenchange", restoreOldStyle);
   document.removeEventListener("MSFullscreenChange", restoreOldStyle);
   canvas.width = oldWidth;
   canvas.height = oldHeight;
   canvas.style.width = oldCssWidth;
   canvas.style.height = oldCssHeight;
   canvas.style.backgroundColor = oldBackgroundColor;
   if (!oldDocumentBackgroundColor) document.body.style.backgroundColor = "white";
   document.body.style.backgroundColor = oldDocumentBackgroundColor;
   canvas.style.paddingLeft = oldPaddingLeft;
   canvas.style.paddingRight = oldPaddingRight;
   canvas.style.paddingTop = oldPaddingTop;
   canvas.style.paddingBottom = oldPaddingBottom;
   canvas.style.marginLeft = oldMarginLeft;
   canvas.style.marginRight = oldMarginRight;
   canvas.style.marginTop = oldMarginTop;
   canvas.style.marginBottom = oldMarginBottom;
   document.body.style.margin = oldDocumentBodyMargin;
   document.documentElement.style.overflow = oldDocumentOverflow;
   document.body.scroll = oldDocumentScroll;
   canvas.style.imageRendering = oldImageRendering;
   if (canvas.GLctxObject) canvas.GLctxObject.GLctx.viewport(0, 0, oldWidth, oldHeight);
   if (__currentFullscreenStrategy.canvasResizedCallback) {
    Runtime.dynCall("iiii", __currentFullscreenStrategy.canvasResizedCallback, [ 37, 0, __currentFullscreenStrategy.canvasResizedCallbackUserData ]);
   }
  }
 }
 document.addEventListener("fullscreenchange", restoreOldStyle);
 document.addEventListener("mozfullscreenchange", restoreOldStyle);
 document.addEventListener("webkitfullscreenchange", restoreOldStyle);
 document.addEventListener("MSFullscreenChange", restoreOldStyle);
 return restoreOldStyle;
}
function _emscripten_request_fullscreen_strategy(target, deferUntilInEventHandler, fullscreenStrategy) {
 var strategy = {};
 strategy.scaleMode = HEAP32[fullscreenStrategy >> 2];
 strategy.canvasResolutionScaleMode = HEAP32[fullscreenStrategy + 4 >> 2];
 strategy.filteringMode = HEAP32[fullscreenStrategy + 8 >> 2];
 strategy.deferUntilInEventHandler = deferUntilInEventHandler;
 strategy.canvasResizedCallback = HEAP32[fullscreenStrategy + 12 >> 2];
 strategy.canvasResizedCallbackUserData = HEAP32[fullscreenStrategy + 16 >> 2];
 __currentFullscreenStrategy = strategy;
 return _emscripten_do_request_fullscreen(target, strategy);
}
function _emscripten_glDisableVertexAttribArray(index) {
 GLctx.disableVertexAttribArray(index);
}
function _emscripten_glGetProgramiv(program, pname, p) {
 if (!p) {
  GL.recordError(1281);
  return;
 }
 if (pname == 35716) {
  var log = GLctx.getProgramInfoLog(GL.programs[program]);
  if (log === null) log = "(unknown error)";
  HEAP32[p >> 2] = log.length + 1;
 } else if (pname == 35719) {
  var ptable = GL.programInfos[program];
  if (ptable) {
   HEAP32[p >> 2] = ptable.maxUniformLength;
   return;
  } else if (program < GL.counter) {
   GL.recordError(1282);
  } else {
   GL.recordError(1281);
  }
 } else if (pname == 35722) {
  var ptable = GL.programInfos[program];
  if (ptable) {
   if (ptable.maxAttributeLength == -1) {
    var program = GL.programs[program];
    var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
    ptable.maxAttributeLength = 0;
    for (var i = 0; i < numAttribs; ++i) {
     var activeAttrib = GLctx.getActiveAttrib(program, i);
     ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length + 1);
    }
   }
   HEAP32[p >> 2] = ptable.maxAttributeLength;
   return;
  } else if (program < GL.counter) {
   GL.recordError(1282);
  } else {
   GL.recordError(1281);
  }
 } else {
  HEAP32[p >> 2] = GLctx.getProgramParameter(GL.programs[program], pname);
 }
}
function _emscripten_glFinish() {
 GLctx.finish();
}
function _emscripten_glDepthFunc(x0) {
 GLctx.depthFunc(x0);
}
function _emscripten_get_num_gamepads() {
 if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
 if (navigator.getGamepads) {
  return navigator.getGamepads().length;
 } else if (navigator.webkitGetGamepads) {
  return navigator.webkitGetGamepads().length;
 }
}
function _sysconf(name) {
 switch (name) {
 case 30:
  return PAGE_SIZE;
 case 85:
  return totalMemory / PAGE_SIZE;
 case 132:
 case 133:
 case 12:
 case 137:
 case 138:
 case 15:
 case 235:
 case 16:
 case 17:
 case 18:
 case 19:
 case 20:
 case 149:
 case 13:
 case 10:
 case 236:
 case 153:
 case 9:
 case 21:
 case 22:
 case 159:
 case 154:
 case 14:
 case 77:
 case 78:
 case 139:
 case 80:
 case 81:
 case 82:
 case 68:
 case 67:
 case 164:
 case 11:
 case 29:
 case 47:
 case 48:
 case 95:
 case 52:
 case 51:
 case 46:
  return 200809;
 case 79:
  return 0;
 case 27:
 case 246:
 case 127:
 case 128:
 case 23:
 case 24:
 case 160:
 case 161:
 case 181:
 case 182:
 case 242:
 case 183:
 case 184:
 case 243:
 case 244:
 case 245:
 case 165:
 case 178:
 case 179:
 case 49:
 case 50:
 case 168:
 case 169:
 case 175:
 case 170:
 case 171:
 case 172:
 case 97:
 case 76:
 case 32:
 case 173:
 case 35:
  return -1;
 case 176:
 case 177:
 case 7:
 case 155:
 case 8:
 case 157:
 case 125:
 case 126:
 case 92:
 case 93:
 case 129:
 case 130:
 case 131:
 case 94:
 case 91:
  return 1;
 case 74:
 case 60:
 case 69:
 case 70:
 case 4:
  return 1024;
 case 31:
 case 42:
 case 72:
  return 32;
 case 87:
 case 26:
 case 33:
  return 2147483647;
 case 34:
 case 1:
  return 47839;
 case 38:
 case 36:
  return 99;
 case 43:
 case 37:
  return 2048;
 case 0:
  return 2097152;
 case 3:
  return 65536;
 case 28:
  return 32768;
 case 44:
  return 32767;
 case 75:
  return 16384;
 case 39:
  return 1e3;
 case 89:
  return 700;
 case 71:
  return 256;
 case 40:
  return 255;
 case 2:
  return 100;
 case 180:
  return 64;
 case 25:
  return 20;
 case 5:
  return 16;
 case 6:
  return 6;
 case 73:
  return 4;
 case 84:
  {
   if (typeof navigator === "object") return navigator["hardwareConcurrency"] || 1;
   return 1;
  }
 }
 ___setErrNo(ERRNO_CODES.EINVAL);
 return -1;
}
function _sigaction(signum, act, oldact) {
 return 0;
}
function _emscripten_glUniform4iv(location, count, value) {
 location = GL.uniforms[location];
 count *= 4;
 value = HEAP32.subarray(value >> 2, value + count * 4 >> 2);
 GLctx.uniform4iv(location, value);
}
function _glClear(x0) {
 GLctx.clear(x0);
}
function _emscripten_set_resize_callback(target, userData, useCapture, callbackfunc) {
 JSEvents.registerUiEventCallback(target, userData, useCapture, callbackfunc, 10, "resize");
 return 0;
}
function _emscripten_glLoadIdentity() {
 throw "Legacy GL function (glLoadIdentity) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.";
}
function _emscripten_set_element_css_size(target, width, height) {
 if (!target) {
  target = Module["canvas"];
 } else {
  target = JSEvents.findEventTarget(target);
 }
 if (!target) return -4;
 target.style.setProperty("width", width + "px");
 target.style.setProperty("height", height + "px");
 return 0;
}
function _emscripten_glAttachShader(program, shader) {
 GLctx.attachShader(GL.programs[program], GL.shaders[shader]);
}
function _emscripten_glEnable(x0) {
 GLctx.enable(x0);
}
function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
 location = GL.uniforms[location];
 var view;
 if (count === 1) {
  view = GL.miniTempBufferViews[8];
  for (var i = 0; i < 9; i++) {
   view[i] = HEAPF32[value + i * 4 >> 2];
  }
 } else {
  view = HEAPF32.subarray(value >> 2, value + count * 36 >> 2);
 }
 GLctx.uniformMatrix3fv(location, transpose, view);
}
function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
 if (!params) {
  GL.recordError(1281);
  return;
 }
 HEAP32[params >> 2] = GLctx.getRenderbufferParameter(target, pname);
}
function _emscripten_request_pointerlock(target, deferUntilInEventHandler) {
 if (!target) target = "#canvas";
 target = JSEvents.findEventTarget(target);
 if (!target) return -4;
 if (!target.requestPointerLock && !target.mozRequestPointerLock && !target.webkitRequestPointerLock && !target.msRequestPointerLock) {
  return -1;
 }
 var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
 if (!canPerformRequests) {
  if (deferUntilInEventHandler) {
   JSEvents.deferCall(JSEvents.requestPointerLock, 2, [ target ]);
   return 1;
  } else {
   return -2;
  }
 }
 return JSEvents.requestPointerLock(target);
}
function _eglCreateWindowSurface(display, config, win, attrib_list) {
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 if (config != 62002) {
  EGL.setErrorCode(12293);
  return 0;
 }
 EGL.setErrorCode(12288);
 return 62006;
}
function _emscripten_glColorPointer() {
 Module["printErr"]("missing function: emscripten_glColorPointer");
 abort(-1);
}
function _pthread_cond_broadcast() {
 return 0;
}
function _gettimeofday(ptr) {
 var now = Date.now();
 HEAP32[ptr >> 2] = now / 1e3 | 0;
 HEAP32[ptr + 4 >> 2] = now % 1e3 * 1e3 | 0;
 return 0;
}
function _emscripten_glClearStencil(x0) {
 GLctx.clearStencil(x0);
}
function _emscripten_glDetachShader(program, shader) {
 GLctx.detachShader(GL.programs[program], GL.shaders[shader]);
}
function _emscripten_get_device_pixel_ratio() {
 return window.devicePixelRatio || 1;
}
function _emscripten_glDeleteVertexArrays(n, vaos) {
 for (var i = 0; i < n; i++) {
  var id = HEAP32[vaos + i * 4 >> 2];
  GLctx["deleteVertexArray"](GL.vaos[id]);
  GL.vaos[id] = null;
 }
}
function _emscripten_glTexParameteri(x0, x1, x2) {
 GLctx.texParameteri(x0, x1, x2);
}
function _emscripten_get_element_css_size(target, width, height) {
 if (!target) {
  target = Module["canvas"];
 } else {
  target = JSEvents.findEventTarget(target);
 }
 if (!target) return -4;
 if (target.getBoundingClientRect) {
  var rect = target.getBoundingClientRect();
  HEAPF64[width >> 3] = rect.right - rect.left;
  HEAPF64[height >> 3] = rect.bottom - rect.top;
 } else {
  HEAPF64[width >> 3] = target.clientWidth;
  HEAPF64[height >> 3] = target.clientHeight;
 }
 return 0;
}
function _emscripten_glMatrixMode() {
 throw "Legacy GL function (glMatrixMode) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.";
}
var _llvm_ctlz_i32 = true;
function _emscripten_glGetTexParameteriv(target, pname, params) {
 if (!params) {
  GL.recordError(1281);
  return;
 }
 HEAP32[params >> 2] = GLctx.getTexParameter(target, pname);
}
function _eglDestroySurface(display, surface) {
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 if (surface != 62006) {
  EGL.setErrorCode(12301);
  return 1;
 }
 if (EGL.currentReadSurface == surface) {
  EGL.currentReadSurface = 0;
 }
 if (EGL.currentDrawSurface == surface) {
  EGL.currentDrawSurface = 0;
 }
 EGL.setErrorCode(12288);
 return 1;
}
function _emscripten_glGenerateMipmap(x0) {
 GLctx.generateMipmap(x0);
}
function _emscripten_glCullFace(x0) {
 GLctx.cullFace(x0);
}
function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
 location = GL.uniforms[location];
 GLctx.uniform4f(location, v0, v1, v2, v3);
}
function _emscripten_glUseProgram(program) {
 GLctx.useProgram(program ? GL.programs[program] : null);
}
function _emscripten_glHint(x0, x1) {
 GLctx.hint(x0, x1);
}
function _emscripten_glFramebufferTexture2D(target, attachment, textarget, texture, level) {
 GLctx.framebufferTexture2D(target, attachment, textarget, GL.textures[texture], level);
}
function _dlsym(handle, symbol) {
 symbol = Pointer_stringify(symbol);
 if (!DLFCN.loadedLibs[handle]) {
  DLFCN.errorMsg = "Tried to dlsym() from an unopened handle: " + handle;
  return 0;
 } else {
  var lib = DLFCN.loadedLibs[handle];
  symbol = "_" + symbol;
  if (lib.cached_functions.hasOwnProperty(symbol)) {
   return lib.cached_functions[symbol];
  }
  if (!lib.module.hasOwnProperty(symbol)) {
   DLFCN.errorMsg = 'Tried to lookup unknown symbol "' + symbol + '" in dynamic lib: ' + lib.name;
   return 0;
  } else {
   var result = lib.module[symbol];
   if (typeof result == "function") {
    result = Runtime.addFunction(result);
    lib.cached_functions = result;
   }
   return result;
  }
 }
}
function _emscripten_glUniform2fv(location, count, value) {
 location = GL.uniforms[location];
 var view;
 if (count === 1) {
  view = GL.miniTempBufferViews[1];
  view[0] = HEAPF32[value >> 2];
  view[1] = HEAPF32[value + 4 >> 2];
 } else {
  view = HEAPF32.subarray(value >> 2, value + count * 8 >> 2);
 }
 GLctx.uniform2fv(location, view);
}
var PTHREAD_SPECIFIC = {};
function _pthread_getspecific(key) {
 return PTHREAD_SPECIFIC[key] || 0;
}
function __isLeapYear(year) {
 return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
function __arraySum(array, index) {
 var sum = 0;
 for (var i = 0; i <= index; sum += array[i++]) ;
 return sum;
}
var __MONTH_DAYS_LEAP = [ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
var __MONTH_DAYS_REGULAR = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
function __addDays(date, days) {
 var newDate = new Date(date.getTime());
 while (days > 0) {
  var leap = __isLeapYear(newDate.getFullYear());
  var currentMonth = newDate.getMonth();
  var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  if (days > daysInCurrentMonth - newDate.getDate()) {
   days -= daysInCurrentMonth - newDate.getDate() + 1;
   newDate.setDate(1);
   if (currentMonth < 11) {
    newDate.setMonth(currentMonth + 1);
   } else {
    newDate.setMonth(0);
    newDate.setFullYear(newDate.getFullYear() + 1);
   }
  } else {
   newDate.setDate(newDate.getDate() + days);
   return newDate;
  }
 }
 return newDate;
}
function _strftime(s, maxsize, format, tm) {
 var tm_zone = HEAP32[tm + 40 >> 2];
 var date = {
  tm_sec: HEAP32[tm >> 2],
  tm_min: HEAP32[tm + 4 >> 2],
  tm_hour: HEAP32[tm + 8 >> 2],
  tm_mday: HEAP32[tm + 12 >> 2],
  tm_mon: HEAP32[tm + 16 >> 2],
  tm_year: HEAP32[tm + 20 >> 2],
  tm_wday: HEAP32[tm + 24 >> 2],
  tm_yday: HEAP32[tm + 28 >> 2],
  tm_isdst: HEAP32[tm + 32 >> 2],
  tm_gmtoff: HEAP32[tm + 36 >> 2],
  tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ""
 };
 var pattern = Pointer_stringify(format);
 var EXPANSION_RULES_1 = {
  "%c": "%a %b %d %H:%M:%S %Y",
  "%D": "%m/%d/%y",
  "%F": "%Y-%m-%d",
  "%h": "%b",
  "%r": "%I:%M:%S %p",
  "%R": "%H:%M",
  "%T": "%H:%M:%S",
  "%x": "%m/%d/%y",
  "%X": "%H:%M:%S"
 };
 for (var rule in EXPANSION_RULES_1) {
  pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_1[rule]);
 }
 var WEEKDAYS = [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ];
 var MONTHS = [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ];
 function leadingSomething(value, digits, character) {
  var str = typeof value === "number" ? value.toString() : value || "";
  while (str.length < digits) {
   str = character[0] + str;
  }
  return str;
 }
 function leadingNulls(value, digits) {
  return leadingSomething(value, digits, "0");
 }
 function compareByDay(date1, date2) {
  function sgn(value) {
   return value < 0 ? -1 : value > 0 ? 1 : 0;
  }
  var compare;
  if ((compare = sgn(date1.getFullYear() - date2.getFullYear())) === 0) {
   if ((compare = sgn(date1.getMonth() - date2.getMonth())) === 0) {
    compare = sgn(date1.getDate() - date2.getDate());
   }
  }
  return compare;
 }
 function getFirstWeekStartDate(janFourth) {
  switch (janFourth.getDay()) {
  case 0:
   return new Date(janFourth.getFullYear() - 1, 11, 29);
  case 1:
   return janFourth;
  case 2:
   return new Date(janFourth.getFullYear(), 0, 3);
  case 3:
   return new Date(janFourth.getFullYear(), 0, 2);
  case 4:
   return new Date(janFourth.getFullYear(), 0, 1);
  case 5:
   return new Date(janFourth.getFullYear() - 1, 11, 31);
  case 6:
   return new Date(janFourth.getFullYear() - 1, 11, 30);
  }
 }
 function getWeekBasedYear(date) {
  var thisDate = __addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);
  var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
  var janFourthNextYear = new Date(thisDate.getFullYear() + 1, 0, 4);
  var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
  var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
   if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
    return thisDate.getFullYear() + 1;
   } else {
    return thisDate.getFullYear();
   }
  } else {
   return thisDate.getFullYear() - 1;
  }
 }
 var EXPANSION_RULES_2 = {
  "%a": (function(date) {
   return WEEKDAYS[date.tm_wday].substring(0, 3);
  }),
  "%A": (function(date) {
   return WEEKDAYS[date.tm_wday];
  }),
  "%b": (function(date) {
   return MONTHS[date.tm_mon].substring(0, 3);
  }),
  "%B": (function(date) {
   return MONTHS[date.tm_mon];
  }),
  "%C": (function(date) {
   var year = date.tm_year + 1900;
   return leadingNulls(year / 100 | 0, 2);
  }),
  "%d": (function(date) {
   return leadingNulls(date.tm_mday, 2);
  }),
  "%e": (function(date) {
   return leadingSomething(date.tm_mday, 2, " ");
  }),
  "%g": (function(date) {
   return getWeekBasedYear(date).toString().substring(2);
  }),
  "%G": (function(date) {
   return getWeekBasedYear(date);
  }),
  "%H": (function(date) {
   return leadingNulls(date.tm_hour, 2);
  }),
  "%I": (function(date) {
   return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour - 12, 2);
  }),
  "%j": (function(date) {
   return leadingNulls(date.tm_mday + __arraySum(__isLeapYear(date.tm_year + 1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon - 1), 3);
  }),
  "%m": (function(date) {
   return leadingNulls(date.tm_mon + 1, 2);
  }),
  "%M": (function(date) {
   return leadingNulls(date.tm_min, 2);
  }),
  "%n": (function() {
   return "\n";
  }),
  "%p": (function(date) {
   if (date.tm_hour > 0 && date.tm_hour < 13) {
    return "AM";
   } else {
    return "PM";
   }
  }),
  "%S": (function(date) {
   return leadingNulls(date.tm_sec, 2);
  }),
  "%t": (function() {
   return "\t";
  }),
  "%u": (function(date) {
   var day = new Date(date.tm_year + 1900, date.tm_mon + 1, date.tm_mday, 0, 0, 0, 0);
   return day.getDay() || 7;
  }),
  "%U": (function(date) {
   var janFirst = new Date(date.tm_year + 1900, 0, 1);
   var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7 - janFirst.getDay());
   var endDate = new Date(date.tm_year + 1900, date.tm_mon, date.tm_mday);
   if (compareByDay(firstSunday, endDate) < 0) {
    var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
    var firstSundayUntilEndJanuary = 31 - firstSunday.getDate();
    var days = firstSundayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
    return leadingNulls(Math.ceil(days / 7), 2);
   }
   return compareByDay(firstSunday, janFirst) === 0 ? "01" : "00";
  }),
  "%V": (function(date) {
   var janFourthThisYear = new Date(date.tm_year + 1900, 0, 4);
   var janFourthNextYear = new Date(date.tm_year + 1901, 0, 4);
   var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
   var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
   var endDate = __addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);
   if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
    return "53";
   }
   if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
    return "01";
   }
   var daysDifference;
   if (firstWeekStartThisYear.getFullYear() < date.tm_year + 1900) {
    daysDifference = date.tm_yday + 32 - firstWeekStartThisYear.getDate();
   } else {
    daysDifference = date.tm_yday + 1 - firstWeekStartThisYear.getDate();
   }
   return leadingNulls(Math.ceil(daysDifference / 7), 2);
  }),
  "%w": (function(date) {
   var day = new Date(date.tm_year + 1900, date.tm_mon + 1, date.tm_mday, 0, 0, 0, 0);
   return day.getDay();
  }),
  "%W": (function(date) {
   var janFirst = new Date(date.tm_year, 0, 1);
   var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7 - janFirst.getDay() + 1);
   var endDate = new Date(date.tm_year + 1900, date.tm_mon, date.tm_mday);
   if (compareByDay(firstMonday, endDate) < 0) {
    var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
    var firstMondayUntilEndJanuary = 31 - firstMonday.getDate();
    var days = firstMondayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
    return leadingNulls(Math.ceil(days / 7), 2);
   }
   return compareByDay(firstMonday, janFirst) === 0 ? "01" : "00";
  }),
  "%y": (function(date) {
   return (date.tm_year + 1900).toString().substring(2);
  }),
  "%Y": (function(date) {
   return date.tm_year + 1900;
  }),
  "%z": (function(date) {
   var off = date.tm_gmtoff;
   var ahead = off >= 0;
   off = Math.abs(off) / 60;
   off = off / 60 * 100 + off % 60;
   return (ahead ? "+" : "-") + String("0000" + off).slice(-4);
  }),
  "%Z": (function(date) {
   return date.tm_zone;
  }),
  "%%": (function() {
   return "%";
  })
 };
 for (var rule in EXPANSION_RULES_2) {
  if (pattern.indexOf(rule) >= 0) {
   pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_2[rule](date));
  }
 }
 var bytes = intArrayFromString(pattern, false);
 if (bytes.length > maxsize) {
  return 0;
 }
 writeArrayToMemory(bytes, s);
 return bytes.length - 1;
}
function _strftime_l(s, maxsize, format, tm) {
 return _strftime(s, maxsize, format, tm);
}
function _abort() {
 Module["abort"]();
}
function _emscripten_glVertexAttribDivisor(index, divisor) {
 GLctx["vertexAttribDivisor"](index, divisor);
}
function _emscripten_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
 GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget, GL.renderbuffers[renderbuffer]);
}
function _emscripten_glDeleteFramebuffers(n, framebuffers) {
 for (var i = 0; i < n; ++i) {
  var id = HEAP32[framebuffers + i * 4 >> 2];
  var framebuffer = GL.framebuffers[id];
  if (!framebuffer) continue;
  GLctx.deleteFramebuffer(framebuffer);
  framebuffer.name = 0;
  GL.framebuffers[id] = null;
 }
}
function _emscripten_glIsBuffer(buffer) {
 var b = GL.buffers[buffer];
 if (!b) return 0;
 return GLctx.isBuffer(b);
}
function _emscripten_glUniform2iv(location, count, value) {
 location = GL.uniforms[location];
 count *= 2;
 value = HEAP32.subarray(value >> 2, value + count * 4 >> 2);
 GLctx.uniform2iv(location, value);
}
var _emscripten_asm_const = true;
function _emscripten_glVertexAttrib1fv(index, v) {
 v = HEAPF32.subarray(v >> 2, v + 4 >> 2);
 GLctx.vertexAttrib1fv(index, v);
}
var _fabs = Math_abs;
var _sqrt = Math_sqrt;
function _emscripten_glPolygonOffset(x0, x1) {
 GLctx.polygonOffset(x0, x1);
}
var _emscripten_asm_const_int = true;
function _emscripten_glUniform2f(location, v0, v1) {
 location = GL.uniforms[location];
 GLctx.uniform2f(location, v0, v1);
}
function ___unlock() {}
function _emscripten_glUniform2i(location, v0, v1) {
 location = GL.uniforms[location];
 GLctx.uniform2i(location, v0, v1);
}
function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
 for (var i = 0; i < n; i++) {
  var id = HEAP32[renderbuffers + i * 4 >> 2];
  var renderbuffer = GL.renderbuffers[id];
  if (!renderbuffer) continue;
  GLctx.deleteRenderbuffer(renderbuffer);
  renderbuffer.name = 0;
  GL.renderbuffers[id] = null;
 }
}
function _emscripten_glGetBufferParameteriv(target, value, data) {
 if (!data) {
  GL.recordError(1281);
  return;
 }
 HEAP32[data >> 2] = GLctx.getBufferParameter(target, value);
}
function emscriptenWebGLGetUniform(program, location, params, type) {
 if (!params) {
  GL.recordError(1281);
  return;
 }
 var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
 if (typeof data == "number" || typeof data == "boolean") {
  switch (type) {
  case "Integer":
   HEAP32[params >> 2] = data;
   break;
  case "Float":
   HEAPF32[params >> 2] = data;
   break;
  default:
   throw "internal emscriptenWebGLGetUniform() error, bad type: " + type;
  }
 } else {
  for (var i = 0; i < data.length; i++) {
   switch (type) {
   case "Integer":
    HEAP32[params + i >> 2] = data[i];
    break;
   case "Float":
    HEAPF32[params + i >> 2] = data[i];
    break;
   default:
    throw "internal emscriptenWebGLGetUniform() error, bad type: " + type;
   }
  }
 }
}
function _emscripten_glGetUniformiv(program, location, params) {
 emscriptenWebGLGetUniform(program, location, params, "Integer");
}
function _emscripten_glDepthMask(x0) {
 GLctx.depthMask(x0);
}
function _emscripten_set_mousedown_callback(target, userData, useCapture, callbackfunc) {
 JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 5, "mousedown");
 return 0;
}
function _emscripten_glDepthRangef(x0, x1) {
 GLctx.depthRange(x0, x1);
}
function _emscripten_glDepthRange(x0, x1) {
 GLctx.depthRange(x0, x1);
}
function _emscripten_exit_fullscreen() {
 if (typeof JSEvents.fullscreenEnabled() === "undefined") return -1;
 JSEvents.removeDeferredCalls(JSEvents.requestFullscreen);
 if (document.exitFullscreen) {
  document.exitFullscreen();
 } else if (document.msExitFullscreen) {
  document.msExitFullscreen();
 } else if (document.mozCancelFullScreen) {
  document.mozCancelFullScreen();
 } else if (document.webkitExitFullscreen) {
  document.webkitExitFullscreen();
 } else {
  return -1;
 }
 if (__currentFullscreenStrategy.canvasResizedCallback) {
  Runtime.dynCall("iiii", __currentFullscreenStrategy.canvasResizedCallback, [ 37, 0, __currentFullscreenStrategy.canvasResizedCallbackUserData ]);
 }
 return 0;
}
function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
 location = GL.uniforms[location];
 GLctx.uniform4i(location, v0, v1, v2, v3);
}
function ___syscall140(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
  var offset = offset_low;
  assert(offset_high === 0);
  FS.llseek(stream, offset, whence);
  HEAP32[result >> 2] = stream.position;
  if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null;
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
function _emscripten_glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
 var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
 HEAP32[range >> 2] = result.rangeMin;
 HEAP32[range + 4 >> 2] = result.rangeMax;
 HEAP32[precision >> 2] = result.precision;
}
function _emscripten_glUniform1fv(location, count, value) {
 location = GL.uniforms[location];
 var view;
 if (count === 1) {
  view = GL.miniTempBufferViews[0];
  view[0] = HEAPF32[value >> 2];
 } else {
  view = HEAPF32.subarray(value >> 2, value + count * 4 >> 2);
 }
 GLctx.uniform1fv(location, view);
}
function _emscripten_set_wheel_callback(target, userData, useCapture, callbackfunc) {
 target = JSEvents.findEventTarget(target);
 if (typeof target.onwheel !== "undefined") {
  JSEvents.registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "wheel");
  return 0;
 } else if (typeof target.onmousewheel !== "undefined") {
  JSEvents.registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "mousewheel");
  return 0;
 } else {
  return -1;
 }
}
function _emscripten_set_gamepaddisconnected_callback(userData, useCapture, callbackfunc) {
 if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
 JSEvents.registerGamepadEventCallback(window, userData, useCapture, callbackfunc, 27, "gamepaddisconnected");
 return 0;
}
var _atan2 = Math_atan2;
function _emscripten_glBindProgramARB() {
 Module["printErr"]("missing function: emscripten_glBindProgramARB");
 abort(-1);
}
function _emscripten_glCheckFramebufferStatus(x0) {
 return GLctx.checkFramebufferStatus(x0);
}
function _emscripten_glDeleteProgram(id) {
 if (!id) return;
 var program = GL.programs[id];
 if (!program) {
  GL.recordError(1281);
  return;
 }
 GLctx.deleteProgram(program);
 program.name = 0;
 GL.programs[id] = null;
 GL.programInfos[id] = null;
}
function _emscripten_glDisable(x0) {
 GLctx.disable(x0);
}
function _emscripten_glVertexAttrib3fv(index, v) {
 v = HEAPF32.subarray(v >> 2, v + 12 >> 2);
 GLctx.vertexAttrib3fv(index, v);
}
function _emscripten_glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
 program = GL.programs[program];
 var info = GLctx.getActiveAttrib(program, index);
 if (!info) return;
 var infoname = info.name.slice(0, Math.max(0, bufSize - 1));
 if (bufSize > 0 && name) {
  writeStringToMemory(infoname, name);
  if (length) HEAP32[length >> 2] = infoname.length;
 } else {
  if (length) HEAP32[length >> 2] = 0;
 }
 if (size) HEAP32[size >> 2] = info.size;
 if (type) HEAP32[type >> 2] = info.type;
}
function _emscripten_glIsFramebuffer(framebuffer) {
 var fb = GL.framebuffers[framebuffer];
 if (!fb) return 0;
 return GLctx.isFramebuffer(fb);
}
function _emscripten_glLineWidth(x0) {
 GLctx.lineWidth(x0);
}
function _emscripten_glGetString(name_) {
 if (GL.stringCache[name_]) return GL.stringCache[name_];
 var ret;
 switch (name_) {
 case 7936:
 case 7937:
 case 7938:
  ret = allocate(intArrayFromString(GLctx.getParameter(name_)), "i8", ALLOC_NORMAL);
  break;
 case 7939:
  var exts = GLctx.getSupportedExtensions();
  var gl_exts = [];
  for (var i in exts) {
   gl_exts.push(exts[i]);
   gl_exts.push("GL_" + exts[i]);
  }
  ret = allocate(intArrayFromString(gl_exts.join(" ")), "i8", ALLOC_NORMAL);
  break;
 case 35724:
  ret = allocate(intArrayFromString("OpenGL ES GLSL 1.00 (WebGL)"), "i8", ALLOC_NORMAL);
  break;
 default:
  GL.recordError(1280);
  return 0;
 }
 GL.stringCache[name_] = ret;
 return ret;
}
function emscriptenWebGLComputeImageSize(width, height, sizePerPixel, alignment) {
 function roundedToNextMultipleOf(x, y) {
  return Math.floor((x + y - 1) / y) * y;
 }
 var plainRowSize = width * sizePerPixel;
 var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
 return height <= 0 ? 0 : (height - 1) * alignedRowSize + plainRowSize;
}
function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
 var sizePerPixel;
 var numChannels;
 switch (format) {
 case 6406:
 case 6409:
 case 6402:
 case 6403:
  numChannels = 1;
  break;
 case 6410:
 case 33319:
  numChannels = 2;
  break;
 case 6407:
 case 35904:
  numChannels = 3;
  break;
 case 6408:
 case 35906:
  numChannels = 4;
  break;
 default:
  GL.recordError(1280);
  return {
   pixels: null,
   internalFormat: 0
  };
 }
 switch (type) {
 case 5121:
  sizePerPixel = numChannels * 1;
  break;
 case 5123:
 case 36193:
  sizePerPixel = numChannels * 2;
  break;
 case 5125:
 case 5126:
  sizePerPixel = numChannels * 4;
  break;
 case 34042:
  sizePerPixel = 4;
  break;
 case 33635:
 case 32819:
 case 32820:
  sizePerPixel = 2;
  break;
 default:
  GL.recordError(1280);
  return {
   pixels: null,
   internalFormat: 0
  };
 }
 var bytes = emscriptenWebGLComputeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
 if (type == 5121) {
  pixels = HEAPU8.subarray(pixels, pixels + bytes);
 } else if (type == 5126) {
  pixels = HEAPF32.subarray(pixels >> 2, pixels + bytes >> 2);
 } else if (type == 5125 || type == 34042) {
  pixels = HEAPU32.subarray(pixels >> 2, pixels + bytes >> 2);
 } else {
  pixels = HEAPU16.subarray(pixels >> 1, pixels + bytes >> 1);
 }
 return {
  pixels: pixels,
  internalFormat: internalFormat
 };
}
function _emscripten_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
 var pixelData;
 if (pixels) {
  pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, -1).pixels;
 } else {
  pixelData = null;
 }
 GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
}
function _emscripten_glGetAttribLocation(program, name) {
 program = GL.programs[program];
 name = Pointer_stringify(name);
 return GLctx.getAttribLocation(program, name);
}
function _emscripten_glRotatef() {
 Module["printErr"]("missing function: emscripten_glRotatef");
 abort(-1);
}
function emscriptenWebGLGet(name_, p, type) {
 if (!p) {
  GL.recordError(1281);
  return;
 }
 var ret = undefined;
 switch (name_) {
 case 36346:
  ret = 1;
  break;
 case 36344:
  if (type !== "Integer" && type !== "Integer64") {
   GL.recordError(1280);
  }
  return;
 case 36345:
  ret = 0;
  break;
 case 34466:
  var formats = GLctx.getParameter(34467);
  ret = formats.length;
  break;
 case 35738:
  ret = 5121;
  break;
 case 35739:
  ret = 6408;
  break;
 }
 if (ret === undefined) {
  var result = GLctx.getParameter(name_);
  switch (typeof result) {
  case "number":
   ret = result;
   break;
  case "boolean":
   ret = result ? 1 : 0;
   break;
  case "string":
   GL.recordError(1280);
   return;
  case "object":
   if (result === null) {
    switch (name_) {
    case 34964:
    case 35725:
    case 34965:
    case 36006:
    case 36007:
    case 32873:
    case 34068:
     {
      ret = 0;
      break;
     }
    default:
     {
      GL.recordError(1280);
      return;
     }
    }
   } else if (result instanceof Float32Array || result instanceof Uint32Array || result instanceof Int32Array || result instanceof Array) {
    for (var i = 0; i < result.length; ++i) {
     switch (type) {
     case "Integer":
      HEAP32[p + i * 4 >> 2] = result[i];
      break;
     case "Float":
      HEAPF32[p + i * 4 >> 2] = result[i];
      break;
     case "Boolean":
      HEAP8[p + i >> 0] = result[i] ? 1 : 0;
      break;
     default:
      throw "internal glGet error, bad type: " + type;
     }
    }
    return;
   } else if (result instanceof WebGLBuffer || result instanceof WebGLProgram || result instanceof WebGLFramebuffer || result instanceof WebGLRenderbuffer || result instanceof WebGLTexture) {
    ret = result.name | 0;
   } else {
    GL.recordError(1280);
    return;
   }
   break;
  default:
   GL.recordError(1280);
   return;
  }
 }
 switch (type) {
 case "Integer64":
  tempI64 = [ ret >>> 0, (tempDouble = ret, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0) ], HEAP32[p >> 2] = tempI64[0], HEAP32[p + 4 >> 2] = tempI64[1];
  break;
 case "Integer":
  HEAP32[p >> 2] = ret;
  break;
 case "Float":
  HEAPF32[p >> 2] = ret;
  break;
 case "Boolean":
  HEAP8[p >> 0] = ret ? 1 : 0;
  break;
 default:
  throw "internal glGet error, bad type: " + type;
 }
}
function _emscripten_glGetIntegerv(name_, p) {
 emscriptenWebGLGet(name_, p, "Integer");
}
function _emscripten_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
 var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
 HEAP32[params >> 2] = result;
}
function _llvm_stackrestore(p) {
 var self = _llvm_stacksave;
 var ret = self.LLVM_SAVEDSTACKS[p];
 self.LLVM_SAVEDSTACKS.splice(p, 1);
 Runtime.stackRestore(ret);
}
function _emscripten_glClientActiveTexture() {
 Module["printErr"]("missing function: emscripten_glClientActiveTexture");
 abort(-1);
}
function _emscripten_set_focus_callback(target, userData, useCapture, callbackfunc) {
 JSEvents.registerFocusEventCallback(target, userData, useCapture, callbackfunc, 13, "focus");
 return 0;
}
function _emscripten_get_gamepad_status(index, gamepadState) {
 if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
 var gamepads;
 if (navigator.getGamepads) {
  gamepads = navigator.getGamepads();
 } else if (navigator.webkitGetGamepads) {
  gamepads = navigator.webkitGetGamepads();
 }
 if (index < 0 || index >= gamepads.length) {
  return -5;
 }
 if (!gamepads[index]) {
  return -7;
 }
 JSEvents.fillGamepadEventData(gamepadState, gamepads[index]);
 return 0;
}
function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
 var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
 if (log === null) log = "(unknown error)";
 log = log.substr(0, maxLength - 1);
 if (maxLength > 0 && infoLog) {
  writeStringToMemory(log, infoLog);
  if (length) HEAP32[length >> 2] = log.length;
 } else {
  if (length) HEAP32[length >> 2] = 0;
 }
}
function _emscripten_set_mouseup_callback(target, userData, useCapture, callbackfunc) {
 JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 6, "mouseup");
 return 0;
}
function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) {
 GLctx.stencilOpSeparate(x0, x1, x2, x3);
}
var GLUT = {
 initTime: null,
 idleFunc: null,
 displayFunc: null,
 keyboardFunc: null,
 keyboardUpFunc: null,
 specialFunc: null,
 specialUpFunc: null,
 reshapeFunc: null,
 motionFunc: null,
 passiveMotionFunc: null,
 mouseFunc: null,
 buttons: 0,
 modifiers: 0,
 initWindowWidth: 256,
 initWindowHeight: 256,
 initDisplayMode: 18,
 windowX: 0,
 windowY: 0,
 windowWidth: 0,
 windowHeight: 0,
 requestedAnimationFrame: false,
 saveModifiers: (function(event) {
  GLUT.modifiers = 0;
  if (event["shiftKey"]) GLUT.modifiers += 1;
  if (event["ctrlKey"]) GLUT.modifiers += 2;
  if (event["altKey"]) GLUT.modifiers += 4;
 }),
 onMousemove: (function(event) {
  var lastX = Browser.mouseX;
  var lastY = Browser.mouseY;
  Browser.calculateMouseEvent(event);
  var newX = Browser.mouseX;
  var newY = Browser.mouseY;
  if (newX == lastX && newY == lastY) return;
  if (GLUT.buttons == 0 && event.target == Module["canvas"] && GLUT.passiveMotionFunc) {
   event.preventDefault();
   GLUT.saveModifiers(event);
   Runtime.dynCall("vii", GLUT.passiveMotionFunc, [ lastX, lastY ]);
  } else if (GLUT.buttons != 0 && GLUT.motionFunc) {
   event.preventDefault();
   GLUT.saveModifiers(event);
   Runtime.dynCall("vii", GLUT.motionFunc, [ lastX, lastY ]);
  }
 }),
 getSpecialKey: (function(keycode) {
  var key = null;
  switch (keycode) {
  case 8:
   key = 120;
   break;
  case 46:
   key = 111;
   break;
  case 112:
   key = 1;
   break;
  case 113:
   key = 2;
   break;
  case 114:
   key = 3;
   break;
  case 115:
   key = 4;
   break;
  case 116:
   key = 5;
   break;
  case 117:
   key = 6;
   break;
  case 118:
   key = 7;
   break;
  case 119:
   key = 8;
   break;
  case 120:
   key = 9;
   break;
  case 121:
   key = 10;
   break;
  case 122:
   key = 11;
   break;
  case 123:
   key = 12;
   break;
  case 37:
   key = 100;
   break;
  case 38:
   key = 101;
   break;
  case 39:
   key = 102;
   break;
  case 40:
   key = 103;
   break;
  case 33:
   key = 104;
   break;
  case 34:
   key = 105;
   break;
  case 36:
   key = 106;
   break;
  case 35:
   key = 107;
   break;
  case 45:
   key = 108;
   break;
  case 16:
  case 5:
   key = 112;
   break;
  case 6:
   key = 113;
   break;
  case 17:
  case 3:
   key = 114;
   break;
  case 4:
   key = 115;
   break;
  case 18:
  case 2:
   key = 116;
   break;
  case 1:
   key = 117;
   break;
  }
  return key;
 }),
 getASCIIKey: (function(event) {
  if (event["ctrlKey"] || event["altKey"] || event["metaKey"]) return null;
  var keycode = event["keyCode"];
  if (48 <= keycode && keycode <= 57) return keycode;
  if (65 <= keycode && keycode <= 90) return event["shiftKey"] ? keycode : keycode + 32;
  if (96 <= keycode && keycode <= 105) return keycode - 48;
  if (106 <= keycode && keycode <= 111) return keycode - 106 + 42;
  switch (keycode) {
  case 9:
  case 13:
  case 27:
  case 32:
  case 61:
   return keycode;
  }
  var s = event["shiftKey"];
  switch (keycode) {
  case 186:
   return s ? 58 : 59;
  case 187:
   return s ? 43 : 61;
  case 188:
   return s ? 60 : 44;
  case 189:
   return s ? 95 : 45;
  case 190:
   return s ? 62 : 46;
  case 191:
   return s ? 63 : 47;
  case 219:
   return s ? 123 : 91;
  case 220:
   return s ? 124 : 47;
  case 221:
   return s ? 125 : 93;
  case 222:
   return s ? 34 : 39;
  }
  return null;
 }),
 onKeydown: (function(event) {
  if (GLUT.specialFunc || GLUT.keyboardFunc) {
   var key = GLUT.getSpecialKey(event["keyCode"]);
   if (key !== null) {
    if (GLUT.specialFunc) {
     event.preventDefault();
     GLUT.saveModifiers(event);
     Runtime.dynCall("viii", GLUT.specialFunc, [ key, Browser.mouseX, Browser.mouseY ]);
    }
   } else {
    key = GLUT.getASCIIKey(event);
    if (key !== null && GLUT.keyboardFunc) {
     event.preventDefault();
     GLUT.saveModifiers(event);
     Runtime.dynCall("viii", GLUT.keyboardFunc, [ key, Browser.mouseX, Browser.mouseY ]);
    }
   }
  }
 }),
 onKeyup: (function(event) {
  if (GLUT.specialUpFunc || GLUT.keyboardUpFunc) {
   var key = GLUT.getSpecialKey(event["keyCode"]);
   if (key !== null) {
    if (GLUT.specialUpFunc) {
     event.preventDefault();
     GLUT.saveModifiers(event);
     Runtime.dynCall("viii", GLUT.specialUpFunc, [ key, Browser.mouseX, Browser.mouseY ]);
    }
   } else {
    key = GLUT.getASCIIKey(event);
    if (key !== null && GLUT.keyboardUpFunc) {
     event.preventDefault();
     GLUT.saveModifiers(event);
     Runtime.dynCall("viii", GLUT.keyboardUpFunc, [ key, Browser.mouseX, Browser.mouseY ]);
    }
   }
  }
 }),
 onMouseButtonDown: (function(event) {
  Browser.calculateMouseEvent(event);
  GLUT.buttons |= 1 << event["button"];
  if (event.target == Module["canvas"] && GLUT.mouseFunc) {
   try {
    event.target.setCapture();
   } catch (e) {}
   event.preventDefault();
   GLUT.saveModifiers(event);
   Runtime.dynCall("viiii", GLUT.mouseFunc, [ event["button"], 0, Browser.mouseX, Browser.mouseY ]);
  }
 }),
 onMouseButtonUp: (function(event) {
  Browser.calculateMouseEvent(event);
  GLUT.buttons &= ~(1 << event["button"]);
  if (GLUT.mouseFunc) {
   event.preventDefault();
   GLUT.saveModifiers(event);
   Runtime.dynCall("viiii", GLUT.mouseFunc, [ event["button"], 1, Browser.mouseX, Browser.mouseY ]);
  }
 }),
 onMouseWheel: (function(event) {
  Browser.calculateMouseEvent(event);
  var e = window.event || event;
  var delta = -Browser.getMouseWheelDelta(event);
  delta = delta == 0 ? 0 : delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1);
  var button = 3;
  if (delta < 0) {
   button = 4;
  }
  if (GLUT.mouseFunc) {
   event.preventDefault();
   GLUT.saveModifiers(event);
   Runtime.dynCall("viiii", GLUT.mouseFunc, [ button, 0, Browser.mouseX, Browser.mouseY ]);
  }
 }),
 onFullScreenEventChange: (function(event) {
  var width;
  var height;
  if (document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
   width = screen["width"];
   height = screen["height"];
  } else {
   width = GLUT.windowWidth;
   height = GLUT.windowHeight;
   document.removeEventListener("fullscreenchange", GLUT.onFullScreenEventChange, true);
   document.removeEventListener("mozfullscreenchange", GLUT.onFullScreenEventChange, true);
   document.removeEventListener("webkitfullscreenchange", GLUT.onFullScreenEventChange, true);
  }
  Browser.setCanvasSize(width, height);
  if (GLUT.reshapeFunc) {
   Runtime.dynCall("vii", GLUT.reshapeFunc, [ width, height ]);
  }
  _glutPostRedisplay();
 }),
 requestFullScreen: (function() {
  var RFS = Module["canvas"]["requestFullscreen"] || Module["canvas"]["requestFullScreen"] || Module["canvas"]["mozRequestFullScreen"] || Module["canvas"]["webkitRequestFullScreen"] || (function() {});
  RFS.apply(Module["canvas"], []);
 }),
 cancelFullScreen: (function() {
  var CFS = document["exitFullscreen"] || document["cancelFullScreen"] || document["mozCancelFullScreen"] || document["webkitCancelFullScreen"] || (function() {});
  CFS.apply(document, []);
 })
};
function _glutInitDisplayMode(mode) {
 GLUT.initDisplayMode = mode;
}
function _glutCreateWindow(name) {
 var contextAttributes = {
  antialias: (GLUT.initDisplayMode & 128) != 0,
  depth: (GLUT.initDisplayMode & 16) != 0,
  stencil: (GLUT.initDisplayMode & 32) != 0
 };
 Module.ctx = Browser.createContext(Module["canvas"], true, true, contextAttributes);
 return Module.ctx ? 1 : 0;
}
function _eglCreateContext(display, config, hmm, contextAttribs) {
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 var glesContextVersion = 1;
 for (;;) {
  var param = HEAP32[contextAttribs >> 2];
  if (param == 12440) {
   glesContextVersion = HEAP32[contextAttribs + 4 >> 2];
  } else if (param == 12344) {
   break;
  } else {
   EGL.setErrorCode(12292);
   return 0;
  }
  contextAttribs += 8;
 }
 if (glesContextVersion != 2) {
  EGL.setErrorCode(12293);
  return 0;
 }
 _glutInitDisplayMode(178);
 EGL.windowID = _glutCreateWindow();
 if (EGL.windowID != 0) {
  EGL.setErrorCode(12288);
  return 62004;
 } else {
  EGL.setErrorCode(12297);
  return 0;
 }
}
function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
 var data = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
 if (!data.pixels) {
  GL.recordError(1280);
  return;
 }
 GLctx.readPixels(x, y, width, height, format, type, data.pixels);
}
function _emscripten_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
 var heapView;
 if (data) {
  heapView = HEAPU8.subarray(data, data + imageSize);
 } else {
  heapView = null;
 }
 GLctx["compressedTexSubImage2D"](target, level, xoffset, yoffset, width, height, format, heapView);
}
function _emscripten_glGetError() {
 if (GL.lastError) {
  var error = GL.lastError;
  GL.lastError = 0;
  return error;
 } else {
  return GLctx.getError();
 }
}
function _eglBindAPI(api) {
 if (api == 12448) {
  EGL.setErrorCode(12288);
  return 1;
 } else {
  EGL.setErrorCode(12300);
  return 0;
 }
}
function _pthread_cleanup_push(routine, arg) {
 __ATEXIT__.push((function() {
  Runtime.dynCall("vi", routine, [ arg ]);
 }));
 _pthread_cleanup_push.level = __ATEXIT__.length;
}
function _emscripten_glIsEnabled(x0) {
 return GLctx.isEnabled(x0);
}
function _emscripten_set_mouseenter_callback(target, userData, useCapture, callbackfunc) {
 JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 33, "mouseenter");
 return 0;
}
Module["_memmove"] = _memmove;
function _emscripten_glClearDepthf(x0) {
 GLctx.clearDepth(x0);
}
var __sigalrm_handler = 0;
function _signal(sig, func) {
 if (sig == 14) {
  __sigalrm_handler = func;
 } else {}
 return 0;
}
function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) {
 GLctx.vertexAttrib4f(x0, x1, x2, x3, x4);
}
var _sin = Math_sin;
function _emscripten_glClear(x0) {
 GLctx.clear(x0);
}
function _emscripten_get_now() {
 if (!_emscripten_get_now.actual) {
  if (ENVIRONMENT_IS_NODE) {
   _emscripten_get_now.actual = function _emscripten_get_now_actual() {
    var t = process["hrtime"]();
    return t[0] * 1e3 + t[1] / 1e6;
   };
  } else if (typeof dateNow !== "undefined") {
   _emscripten_get_now.actual = dateNow;
  } else if (typeof self === "object" && self["performance"] && typeof self["performance"]["now"] === "function") {
   _emscripten_get_now.actual = function _emscripten_get_now_actual() {
    return self["performance"]["now"]();
   };
  } else if (typeof performance === "object" && typeof performance["now"] === "function") {
   _emscripten_get_now.actual = function _emscripten_get_now_actual() {
    return performance["now"]();
   };
  } else {
   _emscripten_get_now.actual = Date.now;
  }
 }
 return _emscripten_get_now.actual();
}
function _emscripten_get_now_is_monotonic() {
 return ENVIRONMENT_IS_NODE || typeof dateNow !== "undefined" || (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self["performance"] && self["performance"]["now"];
}
function _clock_gettime(clk_id, tp) {
 var now;
 if (clk_id === 0) {
  now = Date.now();
 } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
  now = _emscripten_get_now();
 } else {
  ___setErrNo(ERRNO_CODES.EINVAL);
  return -1;
 }
 HEAP32[tp >> 2] = now / 1e3 | 0;
 HEAP32[tp + 4 >> 2] = now % 1e3 * 1e3 * 1e3 | 0;
 return 0;
}
function _emscripten_glBindBuffer(target, buffer) {
 var bufferObj = buffer ? GL.buffers[buffer] : null;
 GLctx.bindBuffer(target, bufferObj);
}
function _emscripten_glGetUniformfv(program, location, params) {
 emscriptenWebGLGetUniform(program, location, params, "Float");
}
function _emscripten_exit_pointerlock() {
 JSEvents.removeDeferredCalls(JSEvents.requestPointerLock);
 if (document.exitPointerLock) {
  document.exitPointerLock();
 } else if (document.msExitPointerLock) {
  document.msExitPointerLock();
 } else if (document.mozExitPointerLock) {
  document.mozExitPointerLock();
 } else if (document.webkitExitPointerLock) {
  document.webkitExitPointerLock();
 } else {
  return -1;
 }
 return 0;
}
function ___cxa_pure_virtual() {
 ABORT = true;
 throw "Pure virtual function called!";
}
function _emscripten_glDrawRangeElements() {
 Module["printErr"]("missing function: emscripten_glDrawRangeElements");
 abort(-1);
}
function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
 var result = GLctx.getAttachedShaders(GL.programs[program]);
 var len = result.length;
 if (len > maxCount) {
  len = maxCount;
 }
 HEAP32[count >> 2] = len;
 for (var i = 0; i < len; ++i) {
  var id = GL.shaders.indexOf(result[i]);
  HEAP32[shaders + i * 4 >> 2] = id;
 }
}
function _emscripten_glGenRenderbuffers(n, renderbuffers) {
 for (var i = 0; i < n; i++) {
  var renderbuffer = GLctx.createRenderbuffer();
  if (!renderbuffer) {
   GL.recordError(1282);
   while (i < n) HEAP32[renderbuffers + i++ * 4 >> 2] = 0;
   return;
  }
  var id = GL.getNewId(GL.renderbuffers);
  renderbuffer.name = id;
  GL.renderbuffers[id] = renderbuffer;
  HEAP32[renderbuffers + i * 4 >> 2] = id;
 }
}
function _emscripten_glFrontFace(x0) {
 GLctx.frontFace(x0);
}
function _pthread_cond_wait() {
 return 0;
}
function _emscripten_glUniform1iv(location, count, value) {
 location = GL.uniforms[location];
 value = HEAP32.subarray(value >> 2, value + count * 4 >> 2);
 GLctx.uniform1iv(location, value);
}
function _emscripten_glTexCoordPointer() {
 Module["printErr"]("missing function: emscripten_glTexCoordPointer");
 abort(-1);
}
function _emscripten_glGetInfoLogARB() {
 Module["printErr"]("missing function: emscripten_glGetInfoLogARB");
 abort(-1);
}
function _pthread_setspecific(key, value) {
 if (!(key in PTHREAD_SPECIFIC)) {
  return ERRNO_CODES.EINVAL;
 }
 PTHREAD_SPECIFIC[key] = value;
 return 0;
}
function _emscripten_glVertexAttrib1f(x0, x1) {
 GLctx.vertexAttrib1f(x0, x1);
}
function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) {
 GLctx.renderbufferStorage(x0, x1, x2, x3);
}
function _emscripten_set_mousemove_callback(target, userData, useCapture, callbackfunc) {
 JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 8, "mousemove");
 return 0;
}
function _emscripten_glShaderBinary() {
 GL.recordError(1280);
}
function _emscripten_glIsProgram(program) {
 var program = GL.programs[program];
 if (!program) return 0;
 return GLctx.isProgram(program);
}
function ___cxa_begin_catch(ptr) {
 __ZSt18uncaught_exceptionv.uncaught_exception--;
 EXCEPTIONS.caught.push(ptr);
 EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
 return ptr;
}
function _eglInitialize(display, majorVersion, minorVersion) {
 if (display == 62e3) {
  if (majorVersion) {
   HEAP32[majorVersion >> 2] = 1;
  }
  if (minorVersion) {
   HEAP32[minorVersion >> 2] = 4;
  }
  EGL.defaultDisplayInitialized = true;
  EGL.setErrorCode(12288);
  return 1;
 } else {
  EGL.setErrorCode(12296);
  return 0;
 }
}
function _emscripten_glBlendColor(x0, x1, x2, x3) {
 GLctx.blendColor(x0, x1, x2, x3);
}
function _emscripten_glGetShaderiv(shader, pname, p) {
 if (!p) {
  GL.recordError(1281);
  return;
 }
 if (pname == 35716) {
  var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
  if (log === null) log = "(unknown error)";
  HEAP32[p >> 2] = log.length + 1;
 } else {
  HEAP32[p >> 2] = GLctx.getShaderParameter(GL.shaders[shader], pname);
 }
}
function _emscripten_set_blur_callback(target, userData, useCapture, callbackfunc) {
 JSEvents.registerFocusEventCallback(target, userData, useCapture, callbackfunc, 12, "blur");
 return 0;
}
function _emscripten_glVertexAttrib2f(x0, x1, x2) {
 GLctx.vertexAttrib2f(x0, x1, x2);
}
function _emscripten_glUniform4fv(location, count, value) {
 location = GL.uniforms[location];
 var view;
 if (count === 1) {
  view = GL.miniTempBufferViews[3];
  view[0] = HEAPF32[value >> 2];
  view[1] = HEAPF32[value + 4 >> 2];
  view[2] = HEAPF32[value + 8 >> 2];
  view[3] = HEAPF32[value + 12 >> 2];
 } else {
  view = HEAPF32.subarray(value >> 2, value + count * 16 >> 2);
 }
 GLctx.uniform4fv(location, view);
}
function _emscripten_set_fullscreenchange_callback(target, userData, useCapture, callbackfunc) {
 if (typeof JSEvents.fullscreenEnabled() === "undefined") return -1;
 if (!target) target = document; else {
  target = JSEvents.findEventTarget(target);
  if (!target) return -4;
 }
 JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange");
 JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "mozfullscreenchange");
 JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange");
 JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "msfullscreenchange");
 return 0;
}
function _emscripten_glGenFramebuffers(n, ids) {
 for (var i = 0; i < n; ++i) {
  var framebuffer = GLctx.createFramebuffer();
  if (!framebuffer) {
   GL.recordError(1282);
   while (i < n) HEAP32[ids + i++ * 4 >> 2] = 0;
   return;
  }
  var id = GL.getNewId(GL.framebuffers);
  framebuffer.name = id;
  GL.framebuffers[id] = framebuffer;
  HEAP32[ids + i * 4 >> 2] = id;
 }
}
function _emscripten_glBlendEquationSeparate(x0, x1) {
 GLctx.blendEquationSeparate(x0, x1);
}
function _eglWaitNative(nativeEngineId) {
 EGL.setErrorCode(12288);
 return 1;
}
function _usleep(useconds) {
 var msec = useconds / 1e3;
 if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self["performance"] && self["performance"]["now"]) {
  var start = self["performance"]["now"]();
  while (self["performance"]["now"]() - start < msec) {}
 } else {
  var start = Date.now();
  while (Date.now() - start < msec) {}
 }
 return 0;
}
function _nanosleep(rqtp, rmtp) {
 var seconds = HEAP32[rqtp >> 2];
 var nanoseconds = HEAP32[rqtp + 4 >> 2];
 if (rmtp !== 0) {
  HEAP32[rmtp >> 2] = 0;
  HEAP32[rmtp + 4 >> 2] = 0;
 }
 return _usleep(seconds * 1e6 + nanoseconds / 1e3);
}
function _emscripten_glBindTexture(target, texture) {
 GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
}
function _emscripten_glUniform1i(location, v0) {
 location = GL.uniforms[location];
 GLctx.uniform1i(location, v0);
}
function _emscripten_glGenTextures(n, textures) {
 for (var i = 0; i < n; i++) {
  var texture = GLctx.createTexture();
  if (!texture) {
   GL.recordError(1282);
   while (i < n) HEAP32[textures + i++ * 4 >> 2] = 0;
   return;
  }
  var id = GL.getNewId(GL.textures);
  texture.name = id;
  GL.textures[id] = texture;
  HEAP32[textures + i * 4 >> 2] = id;
 }
}
function _emscripten_glVertexAttrib2fv(index, v) {
 v = HEAPF32.subarray(v >> 2, v + 8 >> 2);
 GLctx.vertexAttrib2fv(index, v);
}
function _emscripten_glGetActiveUniform(program, index, bufSize, length, size, type, name) {
 program = GL.programs[program];
 var info = GLctx.getActiveUniform(program, index);
 if (!info) return;
 var infoname = info.name.slice(0, Math.max(0, bufSize - 1));
 if (bufSize > 0 && name) {
  writeStringToMemory(infoname, name);
  if (length) HEAP32[length >> 2] = infoname.length;
 } else {
  if (length) HEAP32[length >> 2] = 0;
 }
 if (size) HEAP32[size >> 2] = info.size;
 if (type) HEAP32[type >> 2] = info.type;
}
function _emscripten_glDeleteObjectARB() {
 Module["printErr"]("missing function: emscripten_glDeleteObjectARB");
 abort(-1);
}
function _emscripten_set_touchmove_callback(target, userData, useCapture, callbackfunc) {
 JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove");
 return 0;
}
function _emscripten_glUniform1f(location, v0) {
 location = GL.uniforms[location];
 GLctx.uniform1f(location, v0);
}
function _emscripten_glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
 GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
}
var _sqrtf = Math_sqrt;
function _emscripten_glDrawArrays(mode, first, count) {
 GLctx.drawArrays(mode, first, count);
}
function _emscripten_glGenBuffers(n, buffers) {
 for (var i = 0; i < n; i++) {
  var buffer = GLctx.createBuffer();
  if (!buffer) {
   GL.recordError(1282);
   while (i < n) HEAP32[buffers + i++ * 4 >> 2] = 0;
   return;
  }
  var id = GL.getNewId(GL.buffers);
  buffer.name = id;
  GL.buffers[id] = buffer;
  HEAP32[buffers + i * 4 >> 2] = id;
 }
}
function _emscripten_glClearDepth(x0) {
 GLctx.clearDepth(x0);
}
function _emscripten_set_keypress_callback(target, userData, useCapture, callbackfunc) {
 JSEvents.registerKeyEventCallback(target, userData, useCapture, callbackfunc, 1, "keypress");
 return 0;
}
var PTHREAD_SPECIFIC_NEXT_KEY = 1;
function _pthread_key_create(key, destructor) {
 if (key == 0) {
  return ERRNO_CODES.EINVAL;
 }
 HEAP32[key >> 2] = PTHREAD_SPECIFIC_NEXT_KEY;
 PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
 PTHREAD_SPECIFIC_NEXT_KEY++;
 return 0;
}
function _glutDestroyWindow(name) {
 Module.ctx = Browser.destroyContext(Module["canvas"], true, true);
 return 1;
}
function _eglDestroyContext(display, context) {
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 if (context != 62004) {
  EGL.setErrorCode(12294);
  return 0;
 }
 EGL.setErrorCode(12288);
 return 1;
}
function _emscripten_glGetUniformLocation(program, name) {
 name = Pointer_stringify(name);
 var arrayOffset = 0;
 if (name.indexOf("]", name.length - 1) !== -1) {
  var ls = name.lastIndexOf("[");
  var arrayIndex = name.slice(ls + 1, -1);
  if (arrayIndex.length > 0) {
   arrayOffset = parseInt(arrayIndex);
   if (arrayOffset < 0) {
    return -1;
   }
  }
  name = name.slice(0, ls);
 }
 var ptable = GL.programInfos[program];
 if (!ptable) {
  return -1;
 }
 var utable = ptable.uniforms;
 var uniformInfo = utable[name];
 if (uniformInfo && arrayOffset < uniformInfo[0]) {
  return uniformInfo[1] + arrayOffset;
 } else {
  return -1;
 }
}
function _emscripten_glVertexAttrib4fv(index, v) {
 v = HEAPF32.subarray(v >> 2, v + 16 >> 2);
 GLctx.vertexAttrib4fv(index, v);
}
function _emscripten_glScissor(x0, x1, x2, x3) {
 GLctx.scissor(x0, x1, x2, x3);
}
Module["_bitshift64Lshr"] = _bitshift64Lshr;
var _BDtoIHigh = true;
function _emscripten_glIsShader(shader) {
 var s = GL.shaders[shader];
 if (!s) return 0;
 return GLctx.isShader(s);
}
var _environ = allocate(1, "i32*", ALLOC_STATIC);
var ___environ = _environ;
function ___buildEnvironment(env) {
 var MAX_ENV_VALUES = 64;
 var TOTAL_ENV_SIZE = 1024;
 var poolPtr;
 var envPtr;
 if (!___buildEnvironment.called) {
  ___buildEnvironment.called = true;
  ENV["USER"] = ENV["LOGNAME"] = "web_user";
  ENV["PATH"] = "/";
  ENV["PWD"] = "/";
  ENV["HOME"] = "/home/web_user";
  ENV["LANG"] = "C";
  ENV["_"] = Module["thisProgram"];
  poolPtr = allocate(TOTAL_ENV_SIZE, "i8", ALLOC_STATIC);
  envPtr = allocate(MAX_ENV_VALUES * 4, "i8*", ALLOC_STATIC);
  HEAP32[envPtr >> 2] = poolPtr;
  HEAP32[_environ >> 2] = envPtr;
 } else {
  envPtr = HEAP32[_environ >> 2];
  poolPtr = HEAP32[envPtr >> 2];
 }
 var strings = [];
 var totalSize = 0;
 for (var key in env) {
  if (typeof env[key] === "string") {
   var line = key + "=" + env[key];
   strings.push(line);
   totalSize += line.length;
  }
 }
 if (totalSize > TOTAL_ENV_SIZE) {
  throw new Error("Environment size exceeded TOTAL_ENV_SIZE!");
 }
 var ptrSize = 4;
 for (var i = 0; i < strings.length; i++) {
  var line = strings[i];
  writeAsciiToMemory(line, poolPtr);
  HEAP32[envPtr + i * ptrSize >> 2] = poolPtr;
  poolPtr += line.length + 1;
 }
 HEAP32[envPtr + strings.length * ptrSize >> 2] = 0;
}
var ENV = {};
function _getenv(name) {
 if (name === 0) return 0;
 name = Pointer_stringify(name);
 if (!ENV.hasOwnProperty(name)) return 0;
 if (_getenv.ret) _free(_getenv.ret);
 _getenv.ret = allocate(intArrayFromString(ENV[name]), "i8", ALLOC_NORMAL);
 return _getenv.ret;
}
function _emscripten_glDrawBuffers(n, bufs) {
 var bufArray = [];
 for (var i = 0; i < n; i++) bufArray.push(HEAP32[bufs + i * 4 >> 2]);
 GLctx["drawBuffers"](bufArray);
}
function _pthread_mutex_unlock() {}
function _emscripten_glBindFramebuffer(target, framebuffer) {
 GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
}
function _emscripten_glBlendEquation(x0) {
 GLctx.blendEquation(x0);
}
function _emscripten_glBufferSubData(target, offset, size, data) {
 GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data + size));
}
function _emscripten_set_keydown_callback(target, userData, useCapture, callbackfunc) {
 JSEvents.registerKeyEventCallback(target, userData, useCapture, callbackfunc, 2, "keydown");
 return 0;
}
function _emscripten_glBufferData(target, size, data, usage) {
 switch (usage) {
 case 35041:
 case 35042:
  usage = 35040;
  break;
 case 35045:
 case 35046:
  usage = 35044;
  break;
 case 35049:
 case 35050:
  usage = 35048;
  break;
 }
 if (!data) {
  GLctx.bufferData(target, size, usage);
 } else {
  GLctx.bufferData(target, HEAPU8.subarray(data, data + size), usage);
 }
}
function _sbrk(bytes) {
 var self = _sbrk;
 if (!self.called) {
  DYNAMICTOP = alignMemoryPage(DYNAMICTOP);
  self.called = true;
  assert(Runtime.dynamicAlloc);
  self.alloc = Runtime.dynamicAlloc;
  Runtime.dynamicAlloc = (function() {
   abort("cannot dynamically allocate, sbrk now has control");
  });
 }
 var ret = DYNAMICTOP;
 if (bytes != 0) {
  var success = self.alloc(bytes);
  if (!success) return -1 >>> 0;
 }
 return ret;
}
Module["_bitshift64Shl"] = _bitshift64Shl;
var _BItoD = true;
function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
 var result = GLctx.getShaderSource(GL.shaders[shader]);
 if (!result) return;
 result = result.slice(0, Math.max(0, bufSize - 1));
 if (bufSize > 0 && source) {
  writeStringToMemory(result, source);
  if (length) HEAP32[length >> 2] = result.length;
 } else {
  if (length) HEAP32[length >> 2] = 0;
 }
}
Module["_llvm_bswap_i32"] = _llvm_bswap_i32;
function ___cxa_guard_release() {}
function _emscripten_set_gamepadconnected_callback(userData, useCapture, callbackfunc) {
 if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
 JSEvents.registerGamepadEventCallback(window, userData, useCapture, callbackfunc, 26, "gamepadconnected");
 return 0;
}
function _emscripten_glGetFloatv(name_, p) {
 emscriptenWebGLGet(name_, p, "Float");
}
function ___assert_fail(condition, filename, line, func) {
 ABORT = true;
 throw "Assertion failed: " + Pointer_stringify(condition) + ", at: " + [ filename ? Pointer_stringify(filename) : "unknown filename", line, func ? Pointer_stringify(func) : "unknown function" ] + " at " + stackTrace();
}
function _emscripten_glUniform3fv(location, count, value) {
 location = GL.uniforms[location];
 var view;
 if (count === 1) {
  view = GL.miniTempBufferViews[2];
  view[0] = HEAPF32[value >> 2];
  view[1] = HEAPF32[value + 4 >> 2];
  view[2] = HEAPF32[value + 8 >> 2];
 } else {
  view = HEAPF32.subarray(value >> 2, value + count * 12 >> 2);
 }
 GLctx.uniform3fv(location, view);
}
function _emscripten_glDrawElementsInstanced(mode, count, type, indices, primcount) {
 GLctx["drawElementsInstanced"](mode, count, type, indices, primcount);
}
function _eglMakeCurrent(display, draw, read, context) {
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 if (context != 0 && context != 62004) {
  EGL.setErrorCode(12294);
  return 0;
 }
 if (read != 0 && read != 62006 || draw != 0 && draw != 62006) {
  EGL.setErrorCode(12301);
  return 0;
 }
 EGL.currentContext = context;
 EGL.currentDrawSurface = draw;
 EGL.currentReadSurface = read;
 EGL.setErrorCode(12288);
 return 1;
}
function _emscripten_glDrawElements(mode, count, type, indices) {
 GLctx.drawElements(mode, count, type, indices);
}
function _atexit(func, arg) {
 __ATEXIT__.unshift({
  func: func,
  arg: arg
 });
}
function ___cxa_atexit() {
 return _atexit.apply(null, arguments);
}
function _emscripten_set_main_loop_arg(func, arg, fps, simulateInfiniteLoop) {
 _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg);
}
function _emscripten_glCreateProgram() {
 var id = GL.getNewId(GL.programs);
 var program = GLctx.createProgram();
 program.name = id;
 GL.programs[id] = program;
 return id;
}
function _pthread_once(ptr, func) {
 if (!_pthread_once.seen) _pthread_once.seen = {};
 if (ptr in _pthread_once.seen) return;
 Runtime.dynCall("v", func);
 _pthread_once.seen[ptr] = 1;
}
function _emscripten_glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
 var heapView;
 if (data) {
  heapView = HEAPU8.subarray(data, data + imageSize);
 } else {
  heapView = null;
 }
 GLctx["compressedTexImage2D"](target, level, internalFormat, width, height, border, heapView);
}
function _emscripten_glClearColor(x0, x1, x2, x3) {
 GLctx.clearColor(x0, x1, x2, x3);
}
function _emscripten_glBindVertexArray(vao) {
 GLctx["bindVertexArray"](GL.vaos[vao]);
}
var _floor = Math_floor;
function _emscripten_glLoadMatrixf() {
 Module["printErr"]("missing function: emscripten_glLoadMatrixf");
 abort(-1);
}
function _malloc(bytes) {
 var ptr = Runtime.dynamicAlloc(bytes + 8);
 return ptr + 8 & 4294967288;
}
Module["_malloc"] = _malloc;
function ___cxa_allocate_exception(size) {
 return _malloc(size);
}
function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
 var log = GLctx.getProgramInfoLog(GL.programs[program]);
 if (log === null) log = "(unknown error)";
 log = log.substr(0, maxLength - 1);
 if (maxLength > 0 && infoLog) {
  writeStringToMemory(log, infoLog);
  if (length) HEAP32[length >> 2] = log.length;
 } else {
  if (length) HEAP32[length >> 2] = 0;
 }
}
function _emscripten_glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
 var pixelData;
 if (pixels) {
  var data = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
  pixelData = data.pixels;
  internalFormat = data.internalFormat;
 } else {
  pixelData = null;
 }
 GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
}
function _emscripten_glActiveTexture(x0) {
 GLctx.activeTexture(x0);
}
function _emscripten_glFlush() {
 GLctx.flush();
}
function _emscripten_glCreateShader(shaderType) {
 var id = GL.getNewId(GL.shaders);
 GL.shaders[id] = GLctx.createShader(shaderType);
 return id;
}
function _emscripten_glValidateProgram(program) {
 GLctx.validateProgram(GL.programs[program]);
}
function _emscripten_glColorMask(x0, x1, x2, x3) {
 GLctx.colorMask(x0, x1, x2, x3);
}
function _emscripten_glPixelStorei(pname, param) {
 if (pname == 3333) {
  GL.packAlignment = param;
 } else if (pname == 3317) {
  GL.unpackAlignment = param;
 }
 GLctx.pixelStorei(pname, param);
}
function _pthread_cleanup_pop() {
 assert(_pthread_cleanup_push.level == __ATEXIT__.length, "cannot pop if something else added meanwhile!");
 __ATEXIT__.pop();
 _pthread_cleanup_push.level = __ATEXIT__.length;
}
function _emscripten_glDeleteTextures(n, textures) {
 for (var i = 0; i < n; i++) {
  var id = HEAP32[textures + i * 4 >> 2];
  var texture = GL.textures[id];
  if (!texture) continue;
  GLctx.deleteTexture(texture);
  texture.name = 0;
  GL.textures[id] = null;
 }
}
function _eglGetDisplay(nativeDisplayType) {
 EGL.setErrorCode(12288);
 return 62e3;
}
function _emscripten_set_canvas_size(width, height) {
 Browser.setCanvasSize(width, height);
}
function _emscripten_glCompileShader(shader) {
 GLctx.compileShader(GL.shaders[shader]);
}
function _emscripten_glGenVertexArrays(n, arrays) {
 for (var i = 0; i < n; i++) {
  var vao = GLctx["createVertexArray"]();
  if (!vao) {
   GL.recordError(1282);
   while (i < n) HEAP32[arrays + i++ * 4 >> 2] = 0;
   return;
  }
  var id = GL.getNewId(GL.vaos);
  vao.name = id;
  GL.vaos[id] = vao;
  HEAP32[arrays + i * 4 >> 2] = id;
 }
}
function _time(ptr) {
 var ret = Date.now() / 1e3 | 0;
 if (ptr) {
  HEAP32[ptr >> 2] = ret;
 }
 return ret;
}
function _pthread_self() {
 return 0;
}
function _emscripten_glGetBooleanv(name_, p) {
 emscriptenWebGLGet(name_, p, "Boolean");
}
function ___syscall221(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
  switch (cmd) {
  case 0:
   {
    var arg = SYSCALLS.get();
    if (arg < 0) {
     return -ERRNO_CODES.EINVAL;
    }
    var newStream;
    newStream = FS.open(stream.path, stream.flags, 0, arg);
    return newStream.fd;
   }
  case 1:
  case 2:
   return 0;
  case 3:
   return stream.flags;
  case 4:
   {
    var arg = SYSCALLS.get();
    stream.flags |= arg;
    return 0;
   }
  case 12:
  case 12:
   {
    var arg = SYSCALLS.get();
    var offset = 0;
    HEAP16[arg + offset >> 1] = 2;
    return 0;
   }
  case 13:
  case 14:
  case 13:
  case 14:
   return 0;
  case 16:
  case 8:
   return -ERRNO_CODES.EINVAL;
  case 9:
   ___setErrNo(ERRNO_CODES.EINVAL);
   return -1;
  default:
   {
    return -ERRNO_CODES.EINVAL;
   }
  }
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
var ___dso_handle = allocate(1, "i32*", ALLOC_STATIC);
var GLctx;
GL.init();
FS.staticInit();
__ATINIT__.unshift((function() {
 if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
}));
__ATMAIN__.push((function() {
 FS.ignorePermissions = false;
}));
__ATEXIT__.push((function() {
 FS.quit();
}));
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift((function() {
 TTY.init();
}));
__ATEXIT__.push((function() {
 TTY.shutdown();
}));
if (ENVIRONMENT_IS_NODE) {
 var fs = require("fs");
 var NODEJS_PATH = require("path");
 NODEFS.staticInit();
}
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) {
 Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice);
};
Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) {
 Browser.requestAnimationFrame(func);
};
Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) {
 Browser.setCanvasSize(width, height, noUpdates);
};
Module["pauseMainLoop"] = function Module_pauseMainLoop() {
 Browser.mainLoop.pause();
};
Module["resumeMainLoop"] = function Module_resumeMainLoop() {
 Browser.mainLoop.resume();
};
Module["getUserMedia"] = function Module_getUserMedia() {
 Browser.getUserMedia();
};
Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) {
 return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes);
};
___buildEnvironment(ENV);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true;
STACK_MAX = STACK_BASE + TOTAL_STACK;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");
var cttz_i8 = allocate([ 8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0 ], "i8", ALLOC_DYNAMIC);
function invoke_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 try {
  return Module["dynCall_iiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiiiid(index, a1, a2, a3, a4, a5, a6) {
 try {
  return Module["dynCall_iiiiiid"](index, a1, a2, a3, a4, a5, a6);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vd(index, a1) {
 try {
  Module["dynCall_vd"](index, a1);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vid(index, a1, a2) {
 try {
  Module["dynCall_vid"](index, a1, a2);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiiii(index, a1, a2, a3, a4, a5) {
 try {
  Module["dynCall_viiiii"](index, a1, a2, a3, a4, a5);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vi(index, a1) {
 try {
  Module["dynCall_vi"](index, a1);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vii(index, a1, a2) {
 try {
  Module["dynCall_vii"](index, a1, a2);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 try {
  return Module["dynCall_iiiiiii"](index, a1, a2, a3, a4, a5, a6);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_ii(index, a1) {
 try {
  return Module["dynCall_ii"](index, a1);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
 try {
  Module["dynCall_viiiiiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viddd(index, a1, a2, a3, a4) {
 try {
  Module["dynCall_viddd"](index, a1, a2, a3, a4);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiii(index, a1, a2, a3, a4) {
 try {
  return Module["dynCall_iiiii"](index, a1, a2, a3, a4);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vidi(index, a1, a2, a3) {
 try {
  Module["dynCall_vidi"](index, a1, a2, a3);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vidd(index, a1, a2, a3) {
 try {
  Module["dynCall_vidd"](index, a1, a2, a3);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiii(index, a1, a2, a3) {
 try {
  return Module["dynCall_iiii"](index, a1, a2, a3);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 try {
  Module["dynCall_viiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7, a8);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 try {
  Module["dynCall_viiiiii"](index, a1, a2, a3, a4, a5, a6);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viii(index, a1, a2, a3) {
 try {
  Module["dynCall_viii"](index, a1, a2, a3);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viid(index, a1, a2, a3) {
 try {
  Module["dynCall_viid"](index, a1, a2, a3);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vidddd(index, a1, a2, a3, a4, a5) {
 try {
  Module["dynCall_vidddd"](index, a1, a2, a3, a4, a5);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 try {
  return Module["dynCall_iiiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7, a8);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 try {
  Module["dynCall_viiiiiii"](index, a1, a2, a3, a4, a5, a6, a7);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
 try {
  Module["dynCall_viiiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7, a8, a9);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iii(index, a1, a2) {
 try {
  return Module["dynCall_iii"](index, a1, a2);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiiii(index, a1, a2, a3, a4, a5) {
 try {
  return Module["dynCall_iiiiii"](index, a1, a2, a3, a4, a5);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_i(index) {
 try {
  return Module["dynCall_i"](index);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiiidii(index, a1, a2, a3, a4, a5, a6, a7) {
 try {
  return Module["dynCall_iiiiidii"](index, a1, a2, a3, a4, a5, a6, a7);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
 try {
  return Module["dynCall_iiiiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7, a8, a9);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vdddddd(index, a1, a2, a3, a4, a5, a6) {
 try {
  Module["dynCall_vdddddd"](index, a1, a2, a3, a4, a5, a6);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vdddd(index, a1, a2, a3, a4) {
 try {
  Module["dynCall_vdddd"](index, a1, a2, a3, a4);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vdd(index, a1, a2) {
 try {
  Module["dynCall_vdd"](index, a1, a2);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_v(index) {
 try {
  Module["dynCall_v"](index);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vdi(index, a1, a2) {
 try {
  Module["dynCall_vdi"](index, a1, a2);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiiid(index, a1, a2, a3, a4, a5) {
 try {
  return Module["dynCall_iiiiid"](index, a1, a2, a3, a4, a5);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiii(index, a1, a2, a3, a4) {
 try {
  Module["dynCall_viiii"](index, a1, a2, a3, a4);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
Module.asmGlobalArg = {
 "Math": Math,
 "Int8Array": Int8Array,
 "Int16Array": Int16Array,
 "Int32Array": Int32Array,
 "Uint8Array": Uint8Array,
 "Uint16Array": Uint16Array,
 "Uint32Array": Uint32Array,
 "Float32Array": Float32Array,
 "Float64Array": Float64Array,
 "NaN": NaN,
 "Infinity": Infinity
};
Module.asmLibraryArg = {
 "abort": abort,
 "assert": assert,
 "invoke_iiiiiiii": invoke_iiiiiiii,
 "invoke_iiiiiid": invoke_iiiiiid,
 "invoke_vd": invoke_vd,
 "invoke_vid": invoke_vid,
 "invoke_viiiii": invoke_viiiii,
 "invoke_vi": invoke_vi,
 "invoke_vii": invoke_vii,
 "invoke_iiiiiii": invoke_iiiiiii,
 "invoke_ii": invoke_ii,
 "invoke_viiiiiiiiiii": invoke_viiiiiiiiiii,
 "invoke_viddd": invoke_viddd,
 "invoke_iiiii": invoke_iiiii,
 "invoke_vidi": invoke_vidi,
 "invoke_vidd": invoke_vidd,
 "invoke_iiii": invoke_iiii,
 "invoke_viiiiiiii": invoke_viiiiiiii,
 "invoke_viiiiii": invoke_viiiiii,
 "invoke_viii": invoke_viii,
 "invoke_viid": invoke_viid,
 "invoke_vidddd": invoke_vidddd,
 "invoke_iiiiiiiii": invoke_iiiiiiiii,
 "invoke_viiiiiii": invoke_viiiiiii,
 "invoke_viiiiiiiii": invoke_viiiiiiiii,
 "invoke_iii": invoke_iii,
 "invoke_iiiiii": invoke_iiiiii,
 "invoke_i": invoke_i,
 "invoke_iiiiidii": invoke_iiiiidii,
 "invoke_iiiiiiiiii": invoke_iiiiiiiiii,
 "invoke_vdddddd": invoke_vdddddd,
 "invoke_vdddd": invoke_vdddd,
 "invoke_vdd": invoke_vdd,
 "invoke_v": invoke_v,
 "invoke_vdi": invoke_vdi,
 "invoke_iiiiid": invoke_iiiiid,
 "invoke_viiii": invoke_viiii,
 "_emscripten_glGetTexParameterfv": _emscripten_glGetTexParameterfv,
 "_emscripten_glDeleteVertexArrays": _emscripten_glDeleteVertexArrays,
 "_emscripten_set_mouseleave_callback": _emscripten_set_mouseleave_callback,
 "_emscripten_get_element_css_size": _emscripten_get_element_css_size,
 "_emscripten_glShaderSource": _emscripten_glShaderSource,
 "_emscripten_glReleaseShaderCompiler": _emscripten_glReleaseShaderCompiler,
 "_emscripten_glBlendFuncSeparate": _emscripten_glBlendFuncSeparate,
 "_emscripten_glCopyTexImage2D": _emscripten_glCopyTexImage2D,
 "_dlsym": _dlsym,
 "_emscripten_glGetShaderPrecisionFormat": _emscripten_glGetShaderPrecisionFormat,
 "_emscripten_glGetIntegerv": _emscripten_glGetIntegerv,
 "_emscripten_glCullFace": _emscripten_glCullFace,
 "___cxa_guard_acquire": ___cxa_guard_acquire,
 "_emscripten_set_keyup_callback": _emscripten_set_keyup_callback,
 "_emscripten_glStencilMaskSeparate": _emscripten_glStencilMaskSeparate,
 "_emscripten_glViewport": _emscripten_glViewport,
 "_emscripten_glFrontFace": _emscripten_glFrontFace,
 "_eglTerminate": _eglTerminate,
 "___assert_fail": ___assert_fail,
 "_emscripten_glDrawArrays": _emscripten_glDrawArrays,
 "_emscripten_glUniform3fv": _emscripten_glUniform3fv,
 "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv,
 "_emscripten_glUseProgram": _emscripten_glUseProgram,
 "__setLetterbox": __setLetterbox,
 "_emscripten_glDepthFunc": _emscripten_glDepthFunc,
 "__addDays": __addDays,
 "_emscripten_glCompressedTexImage2D": _emscripten_glCompressedTexImage2D,
 "_emscripten_set_fullscreenchange_callback": _emscripten_set_fullscreenchange_callback,
 "_signal": _signal,
 "_emscripten_set_touchmove_callback": _emscripten_set_touchmove_callback,
 "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing,
 "_sbrk": _sbrk,
 "_emscripten_glDisableVertexAttribArray": _emscripten_glDisableVertexAttribArray,
 "_emscripten_glUniform3iv": _emscripten_glUniform3iv,
 "___cxa_begin_catch": ___cxa_begin_catch,
 "_emscripten_memcpy_big": _emscripten_memcpy_big,
 "_eglBindAPI": _eglBindAPI,
 "_emscripten_set_main_loop_arg": _emscripten_set_main_loop_arg,
 "_sysconf": _sysconf,
 "_eglCreateContext": _eglCreateContext,
 "_emscripten_glVertexPointer": _emscripten_glVertexPointer,
 "_emscripten_set_touchstart_callback": _emscripten_set_touchstart_callback,
 "emscriptenWebGLComputeImageSize": emscriptenWebGLComputeImageSize,
 "_emscripten_glGetBooleanv": _emscripten_glGetBooleanv,
 "_emscripten_glClientActiveTexture": _emscripten_glClientActiveTexture,
 "_emscripten_glVertexAttribDivisor": _emscripten_glVertexAttribDivisor,
 "_cos": _cos,
 "_llvm_stacksave": _llvm_stacksave,
 "_emscripten_glUniform1i": _emscripten_glUniform1i,
 "_pthread_getspecific": _pthread_getspecific,
 "_emscripten_glGenBuffers": _emscripten_glGenBuffers,
 "_emscripten_glDeleteObjectARB": _emscripten_glDeleteObjectARB,
 "_emscripten_glTexImage2D": _emscripten_glTexImage2D,
 "_emscripten_glVertexAttribPointer": _emscripten_glVertexAttribPointer,
 "_emscripten_glIsProgram": _emscripten_glIsProgram,
 "__isLeapYear": __isLeapYear,
 "_emscripten_request_fullscreen_strategy": _emscripten_request_fullscreen_strategy,
 "_emscripten_glBlendEquationSeparate": _emscripten_glBlendEquationSeparate,
 "_emscripten_glGetPointerv": _emscripten_glGetPointerv,
 "_emscripten_glGetString": _emscripten_glGetString,
 "_emscripten_glIsFramebuffer": _emscripten_glIsFramebuffer,
 "___cxa_atexit": ___cxa_atexit,
 "_emscripten_glIsEnabled": _emscripten_glIsEnabled,
 "_emscripten_glScissor": _emscripten_glScissor,
 "_emscripten_glFramebufferTexture2D": _emscripten_glFramebufferTexture2D,
 "_emscripten_glTexParameteriv": _emscripten_glTexParameteriv,
 "_pthread_cleanup_push": _pthread_cleanup_push,
 "_emscripten_set_element_css_size": _emscripten_set_element_css_size,
 "_emscripten_glBindProgramARB": _emscripten_glBindProgramARB,
 "_emscripten_glStencilOpSeparate": _emscripten_glStencilOpSeparate,
 "_emscripten_glGetUniformfv": _emscripten_glGetUniformfv,
 "_glutCreateWindow": _glutCreateWindow,
 "___syscall140": ___syscall140,
 "_emscripten_set_resize_callback": _emscripten_set_resize_callback,
 "_emscripten_glIsBuffer": _emscripten_glIsBuffer,
 "___syscall146": ___syscall146,
 "_dlclose": _dlclose,
 "_emscripten_glGetActiveAttrib": _emscripten_glGetActiveAttrib,
 "_emscripten_glAttachShader": _emscripten_glAttachShader,
 "_emscripten_glDrawRangeElements": _emscripten_glDrawRangeElements,
 "_emscripten_get_now_is_monotonic": _emscripten_get_now_is_monotonic,
 "_emscripten_glUniform2i": _emscripten_glUniform2i,
 "_emscripten_glUniform2f": _emscripten_glUniform2f,
 "_emscripten_glTexParameterfv": _emscripten_glTexParameterfv,
 "_emscripten_glUniformMatrix2fv": _emscripten_glUniformMatrix2fv,
 "_atan2": _atan2,
 "_emscripten_glTexParameterf": _emscripten_glTexParameterf,
 "_emscripten_glGetAttachedShaders": _emscripten_glGetAttachedShaders,
 "_emscripten_glGenTextures": _emscripten_glGenTextures,
 "_emscripten_glDrawArraysInstanced": _emscripten_glDrawArraysInstanced,
 "_llvm_stackrestore": _llvm_stackrestore,
 "___cxa_find_matching_catch": ___cxa_find_matching_catch,
 "_eglGetConfigAttrib": _eglGetConfigAttrib,
 "_emscripten_glClear": _emscripten_glClear,
 "_emscripten_glHint": _emscripten_glHint,
 "___cxa_guard_release": ___cxa_guard_release,
 "_glutInitDisplayMode": _glutInitDisplayMode,
 "_emscripten_glValidateProgram": _emscripten_glValidateProgram,
 "_emscripten_glVertexAttrib2fv": _emscripten_glVertexAttrib2fv,
 "_emscripten_glUniform3f": _emscripten_glUniform3f,
 "_emscripten_glUniform4iv": _emscripten_glUniform4iv,
 "_emscripten_glGetTexParameteriv": _emscripten_glGetTexParameteriv,
 "___setErrNo": ___setErrNo,
 "_eglGetProcAddress": _eglGetProcAddress,
 "_emscripten_glBindAttribLocation": _emscripten_glBindAttribLocation,
 "_eglSwapBuffers": _eglSwapBuffers,
 "_emscripten_set_mousedown_callback": _emscripten_set_mousedown_callback,
 "_emscripten_glDrawElements": _emscripten_glDrawElements,
 "_emscripten_set_canvas_size": _emscripten_set_canvas_size,
 "_emscripten_glVertexAttrib2f": _emscripten_glVertexAttrib2f,
 "___resumeException": ___resumeException,
 "_emscripten_glFlush": _emscripten_glFlush,
 "_emscripten_glPolygonOffset": _emscripten_glPolygonOffset,
 "_emscripten_glUniform4i": _emscripten_glUniform4i,
 "_emscripten_glCheckFramebufferStatus": _emscripten_glCheckFramebufferStatus,
 "_emscripten_glGetError": _emscripten_glGetError,
 "_emscripten_glClearDepthf": _emscripten_glClearDepthf,
 "_nanosleep": _nanosleep,
 "_emscripten_glBindFramebuffer": _emscripten_glBindFramebuffer,
 "_emscripten_set_mouseenter_callback": _emscripten_set_mouseenter_callback,
 "_emscripten_glUniform3i": _emscripten_glUniform3i,
 "_emscripten_glDeleteShader": _emscripten_glDeleteShader,
 "_pthread_once": _pthread_once,
 "_emscripten_glVertexAttrib1fv": _emscripten_glVertexAttrib1fv,
 "_fabs": _fabs,
 "_emscripten_glReadPixels": _emscripten_glReadPixels,
 "_emscripten_glMatrixMode": _emscripten_glMatrixMode,
 "_eglCreateWindowSurface": _eglCreateWindowSurface,
 "_emscripten_glClearStencil": _emscripten_glClearStencil,
 "_sin": _sin,
 "_emscripten_glGetUniformLocation": _emscripten_glGetUniformLocation,
 "emscriptenWebGLGet": emscriptenWebGLGet,
 "_emscripten_get_device_pixel_ratio": _emscripten_get_device_pixel_ratio,
 "_emscripten_set_mouseup_callback": _emscripten_set_mouseup_callback,
 "_emscripten_glEnableVertexAttribArray": _emscripten_glEnableVertexAttribArray,
 "_eglWaitClient": _eglWaitClient,
 "_emscripten_get_now": _emscripten_get_now,
 "_emscripten_glNormalPointer": _emscripten_glNormalPointer,
 "_emscripten_glBindTexture": _emscripten_glBindTexture,
 "_emscripten_glTexCoordPointer": _emscripten_glTexCoordPointer,
 "_emscripten_glEnable": _emscripten_glEnable,
 "__registerRestoreOldStyle": __registerRestoreOldStyle,
 "_emscripten_glClearDepth": _emscripten_glClearDepth,
 "___lock": ___lock,
 "_emscripten_glUniform1fv": _emscripten_glUniform1fv,
 "___syscall6": ___syscall6,
 "___syscall5": ___syscall5,
 "___syscall145": ___syscall145,
 "_emscripten_glVertexAttrib3f": _emscripten_glVertexAttrib3f,
 "_time": _time,
 "_pthread_mutex_lock": _pthread_mutex_lock,
 "_gettimeofday": _gettimeofday,
 "_emscripten_glVertexAttrib1f": _emscripten_glVertexAttrib1f,
 "_emscripten_glGetFramebufferAttachmentParameteriv": _emscripten_glGetFramebufferAttachmentParameteriv,
 "_eglWaitNative": _eglWaitNative,
 "_emscripten_asm_const_4": _emscripten_asm_const_4,
 "_emscripten_asm_const_3": _emscripten_asm_const_3,
 "_emscripten_asm_const_2": _emscripten_asm_const_2,
 "_emscripten_asm_const_1": _emscripten_asm_const_1,
 "_emscripten_glEnableClientState": _emscripten_glEnableClientState,
 "_pthread_cleanup_pop": _pthread_cleanup_pop,
 "_dlerror": _dlerror,
 "_emscripten_set_gamepadconnected_callback": _emscripten_set_gamepadconnected_callback,
 "_emscripten_glLoadIdentity": _emscripten_glLoadIdentity,
 "_emscripten_set_keypress_callback": _emscripten_set_keypress_callback,
 "_emscripten_get_gamepad_status": _emscripten_get_gamepad_status,
 "_emscripten_glUniform4f": _emscripten_glUniform4f,
 "_eglChooseConfig": _eglChooseConfig,
 "_pthread_key_create": _pthread_key_create,
 "_emscripten_glLoadMatrixf": _emscripten_glLoadMatrixf,
 "_ceilf": _ceilf,
 "_emscripten_glShaderBinary": _emscripten_glShaderBinary,
 "_emscripten_glIsTexture": _emscripten_glIsTexture,
 "___cxa_allocate_exception": ___cxa_allocate_exception,
 "_emscripten_glBlendFunc": _emscripten_glBlendFunc,
 "_emscripten_get_num_gamepads": _emscripten_get_num_gamepads,
 "___syscall221": ___syscall221,
 "_emscripten_glStencilMask": _emscripten_glStencilMask,
 "_emscripten_glUniform1iv": _emscripten_glUniform1iv,
 "_emscripten_glGetVertexAttribPointerv": _emscripten_glGetVertexAttribPointerv,
 "_emscripten_glCompressedTexSubImage2D": _emscripten_glCompressedTexSubImage2D,
 "emscriptenWebGLGetUniform": emscriptenWebGLGetUniform,
 "_emscripten_glGenRenderbuffers": _emscripten_glGenRenderbuffers,
 "_emscripten_glGetAttribLocation": _emscripten_glGetAttribLocation,
 "_emscripten_glGetActiveUniform": _emscripten_glGetActiveUniform,
 "emscriptenWebGLGetVertexAttrib": emscriptenWebGLGetVertexAttrib,
 "_emscripten_glUniform2iv": _emscripten_glUniform2iv,
 "_emscripten_glDisable": _emscripten_glDisable,
 "_eglSwapInterval": _eglSwapInterval,
 "_clock_gettime": _clock_gettime,
 "_emscripten_glDeleteProgram": _emscripten_glDeleteProgram,
 "_emscripten_glVertexAttrib4fv": _emscripten_glVertexAttrib4fv,
 "_glutDestroyWindow": _glutDestroyWindow,
 "_strftime": _strftime,
 "_emscripten_glVertexAttrib4f": _emscripten_glVertexAttrib4f,
 "_sqrtf": _sqrtf,
 "_emscripten_glGetVertexAttribiv": _emscripten_glGetVertexAttribiv,
 "_emscripten_glTexSubImage2D": _emscripten_glTexSubImage2D,
 "_emscripten_glGetProgramiv": _emscripten_glGetProgramiv,
 "_emscripten_glPixelStorei": _emscripten_glPixelStorei,
 "_emscripten_glUniformMatrix3fv": _emscripten_glUniformMatrix3fv,
 "_emscripten_glColorPointer": _emscripten_glColorPointer,
 "_emscripten_set_mousemove_callback": _emscripten_set_mousemove_callback,
 "_getenv": _getenv,
 "_emscripten_glGetBufferParameteriv": _emscripten_glGetBufferParameteriv,
 "_emscripten_glFinish": _emscripten_glFinish,
 "_pthread_cond_broadcast": _pthread_cond_broadcast,
 "_emscripten_set_gamepaddisconnected_callback": _emscripten_set_gamepaddisconnected_callback,
 "_emscripten_glDepthMask": _emscripten_glDepthMask,
 "_emscripten_glDrawBuffers": _emscripten_glDrawBuffers,
 "_emscripten_glLineWidth": _emscripten_glLineWidth,
 "_eglMakeCurrent": _eglMakeCurrent,
 "_emscripten_glGetObjectParameterivARB": _emscripten_glGetObjectParameterivARB,
 "_emscripten_exit_pointerlock": _emscripten_exit_pointerlock,
 "_emscripten_glFramebufferRenderbuffer": _emscripten_glFramebufferRenderbuffer,
 "_emscripten_glStencilFunc": _emscripten_glStencilFunc,
 "_abort": _abort,
 "_emscripten_glGetUniformiv": _emscripten_glGetUniformiv,
 "_emscripten_glGetRenderbufferParameteriv": _emscripten_glGetRenderbufferParameteriv,
 "_ceil": _ceil,
 "_emscripten_glRotatef": _emscripten_glRotatef,
 "_emscripten_glGetShaderiv": _emscripten_glGetShaderiv,
 "_emscripten_glGenFramebuffers": _emscripten_glGenFramebuffers,
 "_floor": _floor,
 "_emscripten_glUniformMatrix4fv": _emscripten_glUniformMatrix4fv,
 "_emscripten_glDrawElementsInstanced": _emscripten_glDrawElementsInstanced,
 "_pthread_cond_wait": _pthread_cond_wait,
 "_emscripten_set_blur_callback": _emscripten_set_blur_callback,
 "_emscripten_glUniform1f": _emscripten_glUniform1f,
 "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData,
 "_eglWaitGL": _eglWaitGL,
 "_emscripten_glIsRenderbuffer": _emscripten_glIsRenderbuffer,
 "___buildEnvironment": ___buildEnvironment,
 "_emscripten_glRenderbufferStorage": _emscripten_glRenderbufferStorage,
 "_eglDestroySurface": _eglDestroySurface,
 "___cxa_pure_virtual": ___cxa_pure_virtual,
 "_sigaction": _sigaction,
 "_emscripten_set_keydown_callback": _emscripten_set_keydown_callback,
 "_emscripten_glTexParameteri": _emscripten_glTexParameteri,
 "_emscripten_set_touchcancel_callback": _emscripten_set_touchcancel_callback,
 "_emscripten_glCreateShader": _emscripten_glCreateShader,
 "_emscripten_glStencilFuncSeparate": _emscripten_glStencilFuncSeparate,
 "_emscripten_glCopyTexSubImage2D": _emscripten_glCopyTexSubImage2D,
 "_eglInitialize": _eglInitialize,
 "_usleep": _usleep,
 "_emscripten_glDeleteTextures": _emscripten_glDeleteTextures,
 "_emscripten_glBindRenderbuffer": _emscripten_glBindRenderbuffer,
 "_emscripten_glBufferSubData": _emscripten_glBufferSubData,
 "_emscripten_glGetShaderSource": _emscripten_glGetShaderSource,
 "_emscripten_set_touchend_callback": _emscripten_set_touchend_callback,
 "_emscripten_exit_fullscreen": _emscripten_exit_fullscreen,
 "_emscripten_glGetVertexAttribfv": _emscripten_glGetVertexAttribfv,
 "_strftime_l": _strftime_l,
 "_emscripten_request_pointerlock": _emscripten_request_pointerlock,
 "_emscripten_glDeleteFramebuffers": _emscripten_glDeleteFramebuffers,
 "_emscripten_glVertexAttrib3fv": _emscripten_glVertexAttrib3fv,
 "_emscripten_glUniform2fv": _emscripten_glUniform2fv,
 "_emscripten_glCompileShader": _emscripten_glCompileShader,
 "_glClear": _glClear,
 "_emscripten_glFrustum": _emscripten_glFrustum,
 "_emscripten_glSampleCoverage": _emscripten_glSampleCoverage,
 "_emscripten_glDepthRangef": _emscripten_glDepthRangef,
 "_emscripten_glGetShaderInfoLog": _emscripten_glGetShaderInfoLog,
 "_emscripten_glStencilOp": _emscripten_glStencilOp,
 "_eglGetDisplay": _eglGetDisplay,
 "_emscripten_glGenerateMipmap": _emscripten_glGenerateMipmap,
 "_emscripten_glColorMask": _emscripten_glColorMask,
 "_emscripten_glLinkProgram": _emscripten_glLinkProgram,
 "_emscripten_glBlendEquation": _emscripten_glBlendEquation,
 "_emscripten_glBlendColor": _emscripten_glBlendColor,
 "_pthread_self": _pthread_self,
 "_pthread_mutex_unlock": _pthread_mutex_unlock,
 "_emscripten_glBindVertexArray": _emscripten_glBindVertexArray,
 "_sqrt": _sqrt,
 "_emscripten_get_pointerlock_status": _emscripten_get_pointerlock_status,
 "_emscripten_glActiveTexture": _emscripten_glActiveTexture,
 "_emscripten_set_wheel_callback": _emscripten_set_wheel_callback,
 "_emscripten_glDeleteBuffers": _emscripten_glDeleteBuffers,
 "___syscall54": ___syscall54,
 "___unlock": ___unlock,
 "_eglDestroyContext": _eglDestroyContext,
 "_emscripten_glDepthRange": _emscripten_glDepthRange,
 "_emscripten_set_main_loop": _emscripten_set_main_loop,
 "_emscripten_glIsShader": _emscripten_glIsShader,
 "_emscripten_glGetProgramInfoLog": _emscripten_glGetProgramInfoLog,
 "_pthread_setspecific": _pthread_setspecific,
 "_emscripten_glUniform4fv": _emscripten_glUniform4fv,
 "___cxa_throw": ___cxa_throw,
 "_emscripten_set_visibilitychange_callback": _emscripten_set_visibilitychange_callback,
 "_emscripten_set_focus_callback": _emscripten_set_focus_callback,
 "__arraySum": __arraySum,
 "_emscripten_glClearColor": _emscripten_glClearColor,
 "_emscripten_glBufferData": _emscripten_glBufferData,
 "_emscripten_glCreateProgram": _emscripten_glCreateProgram,
 "_emscripten_glGenVertexArrays": _emscripten_glGenVertexArrays,
 "_emscripten_glGetInfoLogARB": _emscripten_glGetInfoLogARB,
 "_emscripten_glDeleteRenderbuffers": _emscripten_glDeleteRenderbuffers,
 "_emscripten_glBindBuffer": _emscripten_glBindBuffer,
 "_atexit": _atexit,
 "_emscripten_glGetFloatv": _emscripten_glGetFloatv,
 "_emscripten_glDetachShader": _emscripten_glDetachShader,
 "_emscripten_asm_const_0": _emscripten_asm_const_0,
 "_emscripten_do_request_fullscreen": _emscripten_do_request_fullscreen,
 "STACKTOP": STACKTOP,
 "STACK_MAX": STACK_MAX,
 "tempDoublePtr": tempDoublePtr,
 "ABORT": ABORT,
 "cttz_i8": cttz_i8,
 "___dso_handle": ___dso_handle
};
// EMSCRIPTEN_START_ASM

var asm = (function(global,env,buffer) {

  'use asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiiiiid=env.invoke_iiiiiid;
  var invoke_vd=env.invoke_vd;
  var invoke_vid=env.invoke_vid;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viiiiiiiiiii=env.invoke_viiiiiiiiiii;
  var invoke_viddd=env.invoke_viddd;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_vidi=env.invoke_vidi;
  var invoke_vidd=env.invoke_vidd;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_viid=env.invoke_viid;
  var invoke_vidddd=env.invoke_vidddd;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_i=env.invoke_i;
  var invoke_iiiiidii=env.invoke_iiiiidii;
  var invoke_iiiiiiiiii=env.invoke_iiiiiiiiii;
  var invoke_vdddddd=env.invoke_vdddddd;
  var invoke_vdddd=env.invoke_vdddd;
  var invoke_vdd=env.invoke_vdd;
  var invoke_v=env.invoke_v;
  var invoke_vdi=env.invoke_vdi;
  var invoke_iiiiid=env.invoke_iiiiid;
  var invoke_viiii=env.invoke_viiii;
  var _emscripten_glGetTexParameterfv=env._emscripten_glGetTexParameterfv;
  var _emscripten_glDeleteVertexArrays=env._emscripten_glDeleteVertexArrays;
  var _emscripten_set_mouseleave_callback=env._emscripten_set_mouseleave_callback;
  var _emscripten_get_element_css_size=env._emscripten_get_element_css_size;
  var _emscripten_glShaderSource=env._emscripten_glShaderSource;
  var _emscripten_glReleaseShaderCompiler=env._emscripten_glReleaseShaderCompiler;
  var _emscripten_glBlendFuncSeparate=env._emscripten_glBlendFuncSeparate;
  var _emscripten_glCopyTexImage2D=env._emscripten_glCopyTexImage2D;
  var _dlsym=env._dlsym;
  var _emscripten_glGetShaderPrecisionFormat=env._emscripten_glGetShaderPrecisionFormat;
  var _emscripten_glGetIntegerv=env._emscripten_glGetIntegerv;
  var _emscripten_glCullFace=env._emscripten_glCullFace;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var _emscripten_set_keyup_callback=env._emscripten_set_keyup_callback;
  var _emscripten_glStencilMaskSeparate=env._emscripten_glStencilMaskSeparate;
  var _emscripten_glViewport=env._emscripten_glViewport;
  var _emscripten_glFrontFace=env._emscripten_glFrontFace;
  var _eglTerminate=env._eglTerminate;
  var ___assert_fail=env.___assert_fail;
  var _emscripten_glDrawArrays=env._emscripten_glDrawArrays;
  var _emscripten_glUniform3fv=env._emscripten_glUniform3fv;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _emscripten_glUseProgram=env._emscripten_glUseProgram;
  var __setLetterbox=env.__setLetterbox;
  var _emscripten_glDepthFunc=env._emscripten_glDepthFunc;
  var __addDays=env.__addDays;
  var _emscripten_glCompressedTexImage2D=env._emscripten_glCompressedTexImage2D;
  var _emscripten_set_fullscreenchange_callback=env._emscripten_set_fullscreenchange_callback;
  var _signal=env._signal;
  var _emscripten_set_touchmove_callback=env._emscripten_set_touchmove_callback;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _emscripten_glDisableVertexAttribArray=env._emscripten_glDisableVertexAttribArray;
  var _emscripten_glUniform3iv=env._emscripten_glUniform3iv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _eglBindAPI=env._eglBindAPI;
  var _emscripten_set_main_loop_arg=env._emscripten_set_main_loop_arg;
  var _sysconf=env._sysconf;
  var _eglCreateContext=env._eglCreateContext;
  var _emscripten_glVertexPointer=env._emscripten_glVertexPointer;
  var _emscripten_set_touchstart_callback=env._emscripten_set_touchstart_callback;
  var emscriptenWebGLComputeImageSize=env.emscriptenWebGLComputeImageSize;
  var _emscripten_glGetBooleanv=env._emscripten_glGetBooleanv;
  var _emscripten_glClientActiveTexture=env._emscripten_glClientActiveTexture;
  var _emscripten_glVertexAttribDivisor=env._emscripten_glVertexAttribDivisor;
  var _cos=env._cos;
  var _llvm_stacksave=env._llvm_stacksave;
  var _emscripten_glUniform1i=env._emscripten_glUniform1i;
  var _pthread_getspecific=env._pthread_getspecific;
  var _emscripten_glGenBuffers=env._emscripten_glGenBuffers;
  var _emscripten_glDeleteObjectARB=env._emscripten_glDeleteObjectARB;
  var _emscripten_glTexImage2D=env._emscripten_glTexImage2D;
  var _emscripten_glVertexAttribPointer=env._emscripten_glVertexAttribPointer;
  var _emscripten_glIsProgram=env._emscripten_glIsProgram;
  var __isLeapYear=env.__isLeapYear;
  var _emscripten_request_fullscreen_strategy=env._emscripten_request_fullscreen_strategy;
  var _emscripten_glBlendEquationSeparate=env._emscripten_glBlendEquationSeparate;
  var _emscripten_glGetPointerv=env._emscripten_glGetPointerv;
  var _emscripten_glGetString=env._emscripten_glGetString;
  var _emscripten_glIsFramebuffer=env._emscripten_glIsFramebuffer;
  var ___cxa_atexit=env.___cxa_atexit;
  var _emscripten_glIsEnabled=env._emscripten_glIsEnabled;
  var _emscripten_glScissor=env._emscripten_glScissor;
  var _emscripten_glFramebufferTexture2D=env._emscripten_glFramebufferTexture2D;
  var _emscripten_glTexParameteriv=env._emscripten_glTexParameteriv;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _emscripten_set_element_css_size=env._emscripten_set_element_css_size;
  var _emscripten_glBindProgramARB=env._emscripten_glBindProgramARB;
  var _emscripten_glStencilOpSeparate=env._emscripten_glStencilOpSeparate;
  var _emscripten_glGetUniformfv=env._emscripten_glGetUniformfv;
  var _glutCreateWindow=env._glutCreateWindow;
  var ___syscall140=env.___syscall140;
  var _emscripten_set_resize_callback=env._emscripten_set_resize_callback;
  var _emscripten_glIsBuffer=env._emscripten_glIsBuffer;
  var ___syscall146=env.___syscall146;
  var _dlclose=env._dlclose;
  var _emscripten_glGetActiveAttrib=env._emscripten_glGetActiveAttrib;
  var _emscripten_glAttachShader=env._emscripten_glAttachShader;
  var _emscripten_glDrawRangeElements=env._emscripten_glDrawRangeElements;
  var _emscripten_get_now_is_monotonic=env._emscripten_get_now_is_monotonic;
  var _emscripten_glUniform2i=env._emscripten_glUniform2i;
  var _emscripten_glUniform2f=env._emscripten_glUniform2f;
  var _emscripten_glTexParameterfv=env._emscripten_glTexParameterfv;
  var _emscripten_glUniformMatrix2fv=env._emscripten_glUniformMatrix2fv;
  var _atan2=env._atan2;
  var _emscripten_glTexParameterf=env._emscripten_glTexParameterf;
  var _emscripten_glGetAttachedShaders=env._emscripten_glGetAttachedShaders;
  var _emscripten_glGenTextures=env._emscripten_glGenTextures;
  var _emscripten_glDrawArraysInstanced=env._emscripten_glDrawArraysInstanced;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _eglGetConfigAttrib=env._eglGetConfigAttrib;
  var _emscripten_glClear=env._emscripten_glClear;
  var _emscripten_glHint=env._emscripten_glHint;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _glutInitDisplayMode=env._glutInitDisplayMode;
  var _emscripten_glValidateProgram=env._emscripten_glValidateProgram;
  var _emscripten_glVertexAttrib2fv=env._emscripten_glVertexAttrib2fv;
  var _emscripten_glUniform3f=env._emscripten_glUniform3f;
  var _emscripten_glUniform4iv=env._emscripten_glUniform4iv;
  var _emscripten_glGetTexParameteriv=env._emscripten_glGetTexParameteriv;
  var ___setErrNo=env.___setErrNo;
  var _eglGetProcAddress=env._eglGetProcAddress;
  var _emscripten_glBindAttribLocation=env._emscripten_glBindAttribLocation;
  var _eglSwapBuffers=env._eglSwapBuffers;
  var _emscripten_set_mousedown_callback=env._emscripten_set_mousedown_callback;
  var _emscripten_glDrawElements=env._emscripten_glDrawElements;
  var _emscripten_set_canvas_size=env._emscripten_set_canvas_size;
  var _emscripten_glVertexAttrib2f=env._emscripten_glVertexAttrib2f;
  var ___resumeException=env.___resumeException;
  var _emscripten_glFlush=env._emscripten_glFlush;
  var _emscripten_glPolygonOffset=env._emscripten_glPolygonOffset;
  var _emscripten_glUniform4i=env._emscripten_glUniform4i;
  var _emscripten_glCheckFramebufferStatus=env._emscripten_glCheckFramebufferStatus;
  var _emscripten_glGetError=env._emscripten_glGetError;
  var _emscripten_glClearDepthf=env._emscripten_glClearDepthf;
  var _nanosleep=env._nanosleep;
  var _emscripten_glBindFramebuffer=env._emscripten_glBindFramebuffer;
  var _emscripten_set_mouseenter_callback=env._emscripten_set_mouseenter_callback;
  var _emscripten_glUniform3i=env._emscripten_glUniform3i;
  var _emscripten_glDeleteShader=env._emscripten_glDeleteShader;
  var _pthread_once=env._pthread_once;
  var _emscripten_glVertexAttrib1fv=env._emscripten_glVertexAttrib1fv;
  var _fabs=env._fabs;
  var _emscripten_glReadPixels=env._emscripten_glReadPixels;
  var _emscripten_glMatrixMode=env._emscripten_glMatrixMode;
  var _eglCreateWindowSurface=env._eglCreateWindowSurface;
  var _emscripten_glClearStencil=env._emscripten_glClearStencil;
  var _sin=env._sin;
  var _emscripten_glGetUniformLocation=env._emscripten_glGetUniformLocation;
  var emscriptenWebGLGet=env.emscriptenWebGLGet;
  var _emscripten_get_device_pixel_ratio=env._emscripten_get_device_pixel_ratio;
  var _emscripten_set_mouseup_callback=env._emscripten_set_mouseup_callback;
  var _emscripten_glEnableVertexAttribArray=env._emscripten_glEnableVertexAttribArray;
  var _eglWaitClient=env._eglWaitClient;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_glNormalPointer=env._emscripten_glNormalPointer;
  var _emscripten_glBindTexture=env._emscripten_glBindTexture;
  var _emscripten_glTexCoordPointer=env._emscripten_glTexCoordPointer;
  var _emscripten_glEnable=env._emscripten_glEnable;
  var __registerRestoreOldStyle=env.__registerRestoreOldStyle;
  var _emscripten_glClearDepth=env._emscripten_glClearDepth;
  var ___lock=env.___lock;
  var _emscripten_glUniform1fv=env._emscripten_glUniform1fv;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var ___syscall145=env.___syscall145;
  var _emscripten_glVertexAttrib3f=env._emscripten_glVertexAttrib3f;
  var _time=env._time;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _gettimeofday=env._gettimeofday;
  var _emscripten_glVertexAttrib1f=env._emscripten_glVertexAttrib1f;
  var _emscripten_glGetFramebufferAttachmentParameteriv=env._emscripten_glGetFramebufferAttachmentParameteriv;
  var _eglWaitNative=env._eglWaitNative;
  var _emscripten_asm_const_4=env._emscripten_asm_const_4;
  var _emscripten_asm_const_3=env._emscripten_asm_const_3;
  var _emscripten_asm_const_2=env._emscripten_asm_const_2;
  var _emscripten_asm_const_1=env._emscripten_asm_const_1;
  var _emscripten_glEnableClientState=env._emscripten_glEnableClientState;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _dlerror=env._dlerror;
  var _emscripten_set_gamepadconnected_callback=env._emscripten_set_gamepadconnected_callback;
  var _emscripten_glLoadIdentity=env._emscripten_glLoadIdentity;
  var _emscripten_set_keypress_callback=env._emscripten_set_keypress_callback;
  var _emscripten_get_gamepad_status=env._emscripten_get_gamepad_status;
  var _emscripten_glUniform4f=env._emscripten_glUniform4f;
  var _eglChooseConfig=env._eglChooseConfig;
  var _pthread_key_create=env._pthread_key_create;
  var _emscripten_glLoadMatrixf=env._emscripten_glLoadMatrixf;
  var _ceilf=env._ceilf;
  var _emscripten_glShaderBinary=env._emscripten_glShaderBinary;
  var _emscripten_glIsTexture=env._emscripten_glIsTexture;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _emscripten_glBlendFunc=env._emscripten_glBlendFunc;
  var _emscripten_get_num_gamepads=env._emscripten_get_num_gamepads;
  var ___syscall221=env.___syscall221;
  var _emscripten_glStencilMask=env._emscripten_glStencilMask;
  var _emscripten_glUniform1iv=env._emscripten_glUniform1iv;
  var _emscripten_glGetVertexAttribPointerv=env._emscripten_glGetVertexAttribPointerv;
  var _emscripten_glCompressedTexSubImage2D=env._emscripten_glCompressedTexSubImage2D;
  var emscriptenWebGLGetUniform=env.emscriptenWebGLGetUniform;
  var _emscripten_glGenRenderbuffers=env._emscripten_glGenRenderbuffers;
  var _emscripten_glGetAttribLocation=env._emscripten_glGetAttribLocation;
  var _emscripten_glGetActiveUniform=env._emscripten_glGetActiveUniform;
  var emscriptenWebGLGetVertexAttrib=env.emscriptenWebGLGetVertexAttrib;
  var _emscripten_glUniform2iv=env._emscripten_glUniform2iv;
  var _emscripten_glDisable=env._emscripten_glDisable;
  var _eglSwapInterval=env._eglSwapInterval;
  var _clock_gettime=env._clock_gettime;
  var _emscripten_glDeleteProgram=env._emscripten_glDeleteProgram;
  var _emscripten_glVertexAttrib4fv=env._emscripten_glVertexAttrib4fv;
  var _glutDestroyWindow=env._glutDestroyWindow;
  var _strftime=env._strftime;
  var _emscripten_glVertexAttrib4f=env._emscripten_glVertexAttrib4f;
  var _sqrtf=env._sqrtf;
  var _emscripten_glGetVertexAttribiv=env._emscripten_glGetVertexAttribiv;
  var _emscripten_glTexSubImage2D=env._emscripten_glTexSubImage2D;
  var _emscripten_glGetProgramiv=env._emscripten_glGetProgramiv;
  var _emscripten_glPixelStorei=env._emscripten_glPixelStorei;
  var _emscripten_glUniformMatrix3fv=env._emscripten_glUniformMatrix3fv;
  var _emscripten_glColorPointer=env._emscripten_glColorPointer;
  var _emscripten_set_mousemove_callback=env._emscripten_set_mousemove_callback;
  var _getenv=env._getenv;
  var _emscripten_glGetBufferParameteriv=env._emscripten_glGetBufferParameteriv;
  var _emscripten_glFinish=env._emscripten_glFinish;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _emscripten_set_gamepaddisconnected_callback=env._emscripten_set_gamepaddisconnected_callback;
  var _emscripten_glDepthMask=env._emscripten_glDepthMask;
  var _emscripten_glDrawBuffers=env._emscripten_glDrawBuffers;
  var _emscripten_glLineWidth=env._emscripten_glLineWidth;
  var _eglMakeCurrent=env._eglMakeCurrent;
  var _emscripten_glGetObjectParameterivARB=env._emscripten_glGetObjectParameterivARB;
  var _emscripten_exit_pointerlock=env._emscripten_exit_pointerlock;
  var _emscripten_glFramebufferRenderbuffer=env._emscripten_glFramebufferRenderbuffer;
  var _emscripten_glStencilFunc=env._emscripten_glStencilFunc;
  var _abort=env._abort;
  var _emscripten_glGetUniformiv=env._emscripten_glGetUniformiv;
  var _emscripten_glGetRenderbufferParameteriv=env._emscripten_glGetRenderbufferParameteriv;
  var _ceil=env._ceil;
  var _emscripten_glRotatef=env._emscripten_glRotatef;
  var _emscripten_glGetShaderiv=env._emscripten_glGetShaderiv;
  var _emscripten_glGenFramebuffers=env._emscripten_glGenFramebuffers;
  var _floor=env._floor;
  var _emscripten_glUniformMatrix4fv=env._emscripten_glUniformMatrix4fv;
  var _emscripten_glDrawElementsInstanced=env._emscripten_glDrawElementsInstanced;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _emscripten_set_blur_callback=env._emscripten_set_blur_callback;
  var _emscripten_glUniform1f=env._emscripten_glUniform1f;
  var emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData;
  var _eglWaitGL=env._eglWaitGL;
  var _emscripten_glIsRenderbuffer=env._emscripten_glIsRenderbuffer;
  var ___buildEnvironment=env.___buildEnvironment;
  var _emscripten_glRenderbufferStorage=env._emscripten_glRenderbufferStorage;
  var _eglDestroySurface=env._eglDestroySurface;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var _sigaction=env._sigaction;
  var _emscripten_set_keydown_callback=env._emscripten_set_keydown_callback;
  var _emscripten_glTexParameteri=env._emscripten_glTexParameteri;
  var _emscripten_set_touchcancel_callback=env._emscripten_set_touchcancel_callback;
  var _emscripten_glCreateShader=env._emscripten_glCreateShader;
  var _emscripten_glStencilFuncSeparate=env._emscripten_glStencilFuncSeparate;
  var _emscripten_glCopyTexSubImage2D=env._emscripten_glCopyTexSubImage2D;
  var _eglInitialize=env._eglInitialize;
  var _usleep=env._usleep;
  var _emscripten_glDeleteTextures=env._emscripten_glDeleteTextures;
  var _emscripten_glBindRenderbuffer=env._emscripten_glBindRenderbuffer;
  var _emscripten_glBufferSubData=env._emscripten_glBufferSubData;
  var _emscripten_glGetShaderSource=env._emscripten_glGetShaderSource;
  var _emscripten_set_touchend_callback=env._emscripten_set_touchend_callback;
  var _emscripten_exit_fullscreen=env._emscripten_exit_fullscreen;
  var _emscripten_glGetVertexAttribfv=env._emscripten_glGetVertexAttribfv;
  var _strftime_l=env._strftime_l;
  var _emscripten_request_pointerlock=env._emscripten_request_pointerlock;
  var _emscripten_glDeleteFramebuffers=env._emscripten_glDeleteFramebuffers;
  var _emscripten_glVertexAttrib3fv=env._emscripten_glVertexAttrib3fv;
  var _emscripten_glUniform2fv=env._emscripten_glUniform2fv;
  var _emscripten_glCompileShader=env._emscripten_glCompileShader;
  var _glClear=env._glClear;
  var _emscripten_glFrustum=env._emscripten_glFrustum;
  var _emscripten_glSampleCoverage=env._emscripten_glSampleCoverage;
  var _emscripten_glDepthRangef=env._emscripten_glDepthRangef;
  var _emscripten_glGetShaderInfoLog=env._emscripten_glGetShaderInfoLog;
  var _emscripten_glStencilOp=env._emscripten_glStencilOp;
  var _eglGetDisplay=env._eglGetDisplay;
  var _emscripten_glGenerateMipmap=env._emscripten_glGenerateMipmap;
  var _emscripten_glColorMask=env._emscripten_glColorMask;
  var _emscripten_glLinkProgram=env._emscripten_glLinkProgram;
  var _emscripten_glBlendEquation=env._emscripten_glBlendEquation;
  var _emscripten_glBlendColor=env._emscripten_glBlendColor;
  var _pthread_self=env._pthread_self;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _emscripten_glBindVertexArray=env._emscripten_glBindVertexArray;
  var _sqrt=env._sqrt;
  var _emscripten_get_pointerlock_status=env._emscripten_get_pointerlock_status;
  var _emscripten_glActiveTexture=env._emscripten_glActiveTexture;
  var _emscripten_set_wheel_callback=env._emscripten_set_wheel_callback;
  var _emscripten_glDeleteBuffers=env._emscripten_glDeleteBuffers;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _eglDestroyContext=env._eglDestroyContext;
  var _emscripten_glDepthRange=env._emscripten_glDepthRange;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_glIsShader=env._emscripten_glIsShader;
  var _emscripten_glGetProgramInfoLog=env._emscripten_glGetProgramInfoLog;
  var _pthread_setspecific=env._pthread_setspecific;
  var _emscripten_glUniform4fv=env._emscripten_glUniform4fv;
  var ___cxa_throw=env.___cxa_throw;
  var _emscripten_set_visibilitychange_callback=env._emscripten_set_visibilitychange_callback;
  var _emscripten_set_focus_callback=env._emscripten_set_focus_callback;
  var __arraySum=env.__arraySum;
  var _emscripten_glClearColor=env._emscripten_glClearColor;
  var _emscripten_glBufferData=env._emscripten_glBufferData;
  var _emscripten_glCreateProgram=env._emscripten_glCreateProgram;
  var _emscripten_glGenVertexArrays=env._emscripten_glGenVertexArrays;
  var _emscripten_glGetInfoLogARB=env._emscripten_glGetInfoLogARB;
  var _emscripten_glDeleteRenderbuffers=env._emscripten_glDeleteRenderbuffers;
  var _emscripten_glBindBuffer=env._emscripten_glBindBuffer;
  var _atexit=env._atexit;
  var _emscripten_glGetFloatv=env._emscripten_glGetFloatv;
  var _emscripten_glDetachShader=env._emscripten_glDetachShader;
  var _emscripten_asm_const_0=env._emscripten_asm_const_0;
  var _emscripten_do_request_fullscreen=env._emscripten_do_request_fullscreen;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function _SDL_RLEBlit(i2, i35, i41, i1) {
 i2 = i2 | 0;
 i35 = i35 | 0;
 i41 = i41 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i42 = 0, i43 = 0, i44 = 0;
 i8 = i2 + 8 | 0;
 i40 = HEAP32[i8 >> 2] | 0;
 if ((HEAP32[i41 >> 2] & 2 | 0) != 0 ? (_SDL_LockSurface(i41) | 0) < 0 : 0) {
  i41 = -1;
  return i41 | 0;
 }
 i34 = HEAP32[i41 + 20 >> 2] | 0;
 i39 = i41 + 16 | 0;
 i36 = HEAP32[i39 >> 2] | 0;
 i10 = Math_imul(i36, HEAP32[i1 + 4 >> 2] | 0) | 0;
 i19 = HEAP32[i2 + 4 >> 2] | 0;
 i9 = HEAPU8[i19 + 9 >> 0] | 0;
 i10 = (Math_imul(i9, HEAP32[i1 >> 2] | 0) | 0) + i10 | 0;
 i6 = i34 + i10 | 0;
 i5 = HEAP32[i2 + 52 >> 2] | 0;
 i2 = HEAP32[i5 + 12 >> 2] | 0;
 i1 = HEAP32[i35 + 4 >> 2] | 0;
 L5 : do if (!i1) i7 = 29; else switch (i9 | 0) {
 case 1:
  {
   i4 = i1;
   while (1) {
    i1 = 0;
    do {
     i1 = (HEAPU8[i2 >> 0] | 0) + i1 | 0;
     i38 = HEAP8[i2 + 1 >> 0] | 0;
     i3 = i38 & 255;
     if (!(i38 << 24 >> 24)) if (!i1) break L5; else i2 = i2 + 2 | 0; else {
      i1 = i1 + i3 | 0;
      i2 = i2 + (i3 + 2) | 0;
     }
    } while ((i1 | 0) != (i40 | 0));
    i4 = i4 + -1 | 0;
    if (!i4) {
     i7 = 29;
     break;
    }
   }
   break;
  }
 case 2:
  {
   i4 = i1;
   while (1) {
    i1 = 0;
    do {
     i1 = (HEAPU8[i2 >> 0] | 0) + i1 | 0;
     i38 = HEAP8[i2 + 1 >> 0] | 0;
     i3 = i38 & 255;
     if (!(i38 << 24 >> 24)) if (!i1) break L5; else i2 = i2 + 2 | 0; else {
      i1 = i1 + i3 | 0;
      i2 = i2 + ((i3 << 1) + 2) | 0;
     }
    } while ((i1 | 0) != (i40 | 0));
    i4 = i4 + -1 | 0;
    if (!i4) {
     i7 = 29;
     break;
    }
   }
   break;
  }
 case 3:
  {
   i4 = i1;
   while (1) {
    i1 = 0;
    do {
     i1 = (HEAPU8[i2 >> 0] | 0) + i1 | 0;
     i38 = HEAP8[i2 + 1 >> 0] | 0;
     i3 = i38 & 255;
     if (!(i38 << 24 >> 24)) if (!i1) break L5; else i2 = i2 + 2 | 0; else {
      i1 = i1 + i3 | 0;
      i2 = i2 + ((i3 * 3 | 0) + 2) | 0;
     }
    } while ((i1 | 0) != (i40 | 0));
    i4 = i4 + -1 | 0;
    if (!i4) {
     i7 = 29;
     break;
    }
   }
   break;
  }
 case 4:
  {
   i4 = i1;
   while (1) {
    i1 = 0;
    do {
     i1 = (HEAPU16[i2 >> 1] | 0) + i1 | 0;
     i38 = HEAP16[i2 + 2 >> 1] | 0;
     i3 = i38 & 65535;
     if (!(i38 << 16 >> 16)) if (!i1) break L5; else i2 = i2 + 4 | 0; else {
      i1 = i1 + i3 | 0;
      i2 = i2 + ((i3 << 2) + 4) | 0;
     }
    } while ((i1 | 0) != (i40 | 0));
    i4 = i4 + -1 | 0;
    if (!i4) {
     i7 = 29;
     break;
    }
   }
   break;
  }
 default:
  {
   i7 = 29;
   break L5;
  }
 } while (0);
 L44 : do if ((i7 | 0) == 29) {
  i5 = HEAP8[i5 + 79 >> 0] | 0;
  i37 = i5 & 255;
  i38 = HEAP32[i35 >> 2] | 0;
  if ((i38 | 0) == 0 ? (HEAP32[i35 + 8 >> 2] | 0) == (HEAP32[i8 >> 2] | 0) : 0) {
   if (i5 << 24 >> 24 == -1) switch (i9 | 0) {
   case 1:
    {
     i1 = HEAP32[i35 + 12 >> 2] | 0;
     while (1) {
      i3 = 0;
      i5 = i2;
      while (1) {
       i3 = (HEAPU8[i5 >> 0] | 0) + i3 | 0;
       i38 = HEAP8[i5 + 1 >> 0] | 0;
       i4 = i38 & 255;
       i2 = i5 + 2 | 0;
       if (!(i38 << 24 >> 24)) {
        if (!i3) break L44;
       } else {
        _SDL_memcpy(i6 + i3 | 0, i2, i4) | 0;
        i3 = i3 + i4 | 0;
        i2 = i5 + (i4 + 2) | 0;
       }
       if ((i3 | 0) == (i40 | 0)) break; else i5 = i2;
      }
      i1 = i1 + -1 | 0;
      if (!i1) break L44; else i6 = i6 + (HEAP32[i39 >> 2] | 0) | 0;
     }
    }
   case 2:
    {
     i1 = HEAP32[i35 + 12 >> 2] | 0;
     while (1) {
      i3 = 0;
      do {
       i3 = (HEAPU8[i2 >> 0] | 0) + i3 | 0;
       i38 = HEAP8[i2 + 1 >> 0] | 0;
       i4 = i38 & 255;
       i5 = i2 + 2 | 0;
       if (!(i38 << 24 >> 24)) if (!i3) break L44; else i2 = i5; else {
        i38 = i4 << 1;
        _SDL_memcpy(i6 + (i3 << 1) | 0, i5, i38) | 0;
        i3 = i3 + i4 | 0;
        i2 = i2 + (i38 + 2) | 0;
       }
      } while ((i3 | 0) != (i40 | 0));
      i1 = i1 + -1 | 0;
      if (!i1) break L44; else i6 = i6 + (HEAP32[i39 >> 2] | 0) | 0;
     }
    }
   case 3:
    {
     i1 = HEAP32[i35 + 12 >> 2] | 0;
     while (1) {
      i3 = 0;
      do {
       i3 = (HEAPU8[i2 >> 0] | 0) + i3 | 0;
       i38 = HEAP8[i2 + 1 >> 0] | 0;
       i4 = i38 & 255;
       i5 = i2 + 2 | 0;
       if (!(i38 << 24 >> 24)) if (!i3) break L44; else i2 = i5; else {
        i38 = i4 * 3 | 0;
        _SDL_memcpy(i6 + (i3 * 3 | 0) | 0, i5, i38) | 0;
        i3 = i3 + i4 | 0;
        i2 = i2 + (i38 + 2) | 0;
       }
      } while ((i3 | 0) != (i40 | 0));
      i1 = i1 + -1 | 0;
      if (!i1) break L44; else i6 = i6 + (HEAP32[i39 >> 2] | 0) | 0;
     }
    }
   case 4:
    {
     i1 = HEAP32[i35 + 12 >> 2] | 0;
     while (1) {
      i3 = 0;
      do {
       i3 = (HEAPU16[i2 >> 1] | 0) + i3 | 0;
       i38 = HEAP16[i2 + 2 >> 1] | 0;
       i4 = i38 & 65535;
       i5 = i2 + 4 | 0;
       if (!(i38 << 16 >> 16)) if (!i3) break L44; else i2 = i5; else {
        i38 = i4 << 2;
        _SDL_memcpy(i6 + (i3 << 2) | 0, i5, i38) | 0;
        i3 = i3 + i4 | 0;
        i2 = i2 + (i38 + 4) | 0;
       }
      } while ((i3 | 0) != (i40 | 0));
      i1 = i1 + -1 | 0;
      if (!i1) break L44; else i6 = i6 + (HEAP32[i39 >> 2] | 0) | 0;
     }
    }
   default:
    break L44;
   }
   switch (i9 | 0) {
   case 4:
    {
     i16 = i19 + 12 | 0;
     i34 = HEAP32[i16 >> 2] | 0;
     i17 = i19 + 16 | 0;
     i36 = HEAP32[i17 >> 2] | 0;
     i18 = i19 + 20 | 0;
     i38 = HEAP32[i18 >> 2] | 0;
     if ((i36 | i34 | i38 | 0) == 16777215 ? (i34 | 0) == 65280 | (i36 | 0) == 65280 | (i38 | 0) == 65280 : 0) {
      i1 = HEAP32[i35 + 12 >> 2] | 0;
      if (i5 << 24 >> 24 == -128) {
       i8 = i6;
       while (1) {
        i3 = 0;
        do {
         i3 = (HEAPU16[i2 >> 1] | 0) + i3 | 0;
         i38 = HEAP16[i2 + 2 >> 1] | 0;
         i7 = i38 & 65535;
         i4 = i2 + 4 | 0;
         if (!(i38 << 16 >> 16)) if (!i3) break L44; else i2 = i4; else {
          i5 = i8 + (i3 << 2) | 0;
          i6 = 0;
          while (1) {
           i37 = HEAP32[i4 >> 2] | 0;
           i38 = HEAP32[i5 >> 2] | 0;
           HEAP32[i5 >> 2] = (((i38 & 16711422) + (i37 & 16711422) | 0) >>> 1) + (i37 & 65793 & i38);
           i6 = i6 + 1 | 0;
           if ((i6 | 0) == (i7 | 0)) break; else {
            i5 = i5 + 4 | 0;
            i4 = i4 + 4 | 0;
           }
          }
          i3 = i3 + i7 | 0;
          i2 = i2 + ((i7 << 2) + 4) | 0;
         }
        } while ((i3 | 0) != (i40 | 0));
        i1 = i1 + -1 | 0;
        if (!i1) break L44; else i8 = i8 + (HEAP32[i39 >> 2] | 0) | 0;
       }
      } else {
       i8 = i6;
       while (1) {
        i3 = 0;
        do {
         i3 = (HEAPU16[i2 >> 1] | 0) + i3 | 0;
         i38 = HEAP16[i2 + 2 >> 1] | 0;
         i7 = i38 & 65535;
         i4 = i2 + 4 | 0;
         if (!(i38 << 16 >> 16)) if (!i3) break L44; else i2 = i4; else {
          i5 = i8 + (i3 << 2) | 0;
          i6 = 0;
          while (1) {
           i36 = HEAP32[i4 >> 2] | 0;
           i38 = HEAP32[i5 >> 2] | 0;
           i35 = i38 & 16711935;
           i38 = i38 & 65280;
           HEAP32[i5 >> 2] = ((Math_imul((i36 & 16711935) - i35 | 0, i37) | 0) >>> 8) + i35 & 16711935 | ((Math_imul((i36 & 65280) - i38 | 0, i37) | 0) >>> 8) + i38 & 65280;
           i6 = i6 + 1 | 0;
           if ((i6 | 0) == (i7 | 0)) break; else {
            i5 = i5 + 4 | 0;
            i4 = i4 + 4 | 0;
           }
          }
          i3 = i3 + i7 | 0;
          i2 = i2 + ((i7 << 2) + 4) | 0;
         }
        } while ((i3 | 0) != (i40 | 0));
        i1 = i1 + -1 | 0;
        if (!i1) break L44; else i8 = i8 + (HEAP32[i39 >> 2] | 0) | 0;
       }
      }
     }
     i10 = i19 + 32 | 0;
     i11 = i19 + 28 | 0;
     i12 = i19 + 33 | 0;
     i13 = i19 + 29 | 0;
     i14 = i19 + 34 | 0;
     i15 = i19 + 30 | 0;
     i9 = i19 + 24 | 0;
     i1 = HEAP32[i35 + 12 >> 2] | 0;
     while (1) {
      i3 = 0;
      do {
       i3 = (HEAPU16[i2 >> 1] | 0) + i3 | 0;
       i38 = HEAP16[i2 + 2 >> 1] | 0;
       i8 = i38 & 65535;
       i4 = i2 + 4 | 0;
       if (!(i38 << 16 >> 16)) if (!i3) break L44; else i2 = i4; else {
        i5 = i6 + (i3 << 2) | 0;
        i7 = 0;
        while (1) {
         i32 = HEAP32[i4 >> 2] | 0;
         i33 = HEAP32[i5 >> 2] | 0;
         i23 = HEAP32[i16 >> 2] | 0;
         i35 = HEAPU8[i10 >> 0] | 0;
         i25 = HEAPU8[i11 >> 0] | 0;
         i22 = HEAP32[5992 + (i25 << 2) >> 2] | 0;
         i27 = HEAP32[i17 >> 2] | 0;
         i36 = HEAPU8[i12 >> 0] | 0;
         i29 = HEAPU8[i13 >> 0] | 0;
         i26 = HEAP32[5992 + (i29 << 2) >> 2] | 0;
         i31 = HEAP32[i18 >> 2] | 0;
         i38 = HEAPU8[i14 >> 0] | 0;
         i34 = HEAPU8[i15 >> 0] | 0;
         i30 = HEAP32[5992 + (i34 << 2) >> 2] | 0;
         i24 = HEAPU8[i22 + ((i23 & i33) >>> i35) >> 0] | 0;
         i28 = HEAPU8[i26 + ((i27 & i33) >>> i36) >> 0] | 0;
         i33 = HEAPU8[i30 + ((i31 & i33) >>> i38) >> 0] | 0;
         i35 = (((Math_imul((HEAPU8[i22 + ((i23 & i32) >>> i35) >> 0] | 0) - i24 | 0, i37) | 0) >>> 8) + i24 | 0) >>> i25 << i35;
         i36 = (((Math_imul((HEAPU8[i26 + ((i27 & i32) >>> i36) >> 0] | 0) - i28 | 0, i37) | 0) >>> 8) + i28 | 0) >>> i29 << i36;
         i38 = (((Math_imul((HEAPU8[i30 + ((i31 & i32) >>> i38) >> 0] | 0) - i33 | 0, i37) | 0) >>> 8) + i33 | 0) >>> i34 << i38;
         HEAP32[i5 >> 2] = i35 | HEAP32[i9 >> 2] | i36 | i38;
         i7 = i7 + 1 | 0;
         if ((i7 | 0) == (i8 | 0)) break; else {
          i5 = i5 + 4 | 0;
          i4 = i4 + 4 | 0;
         }
        }
        i3 = i3 + i8 | 0;
        i2 = i2 + ((i8 << 2) + 4) | 0;
       }
      } while ((i3 | 0) != (i40 | 0));
      i1 = i1 + -1 | 0;
      if (!i1) break L44; else i6 = i6 + (HEAP32[i39 >> 2] | 0) | 0;
     }
    }
   case 2:
    {
     i16 = HEAP32[i19 + 12 >> 2] | 0;
     i17 = HEAP32[i19 + 16 >> 2] | 0;
     i18 = HEAP32[i19 + 20 >> 2] | 0;
     i1 = i17 | i16 | i18;
     L137 : do if ((i1 | 0) < 65535) {
      switch (i1 | 0) {
      case 32767:
       break;
      default:
       break L137;
      }
      if ((i16 | 0) == 992 | (i17 | 0) == 992 | (i18 | 0) == 992) {
       i1 = HEAP32[i35 + 12 >> 2] | 0;
       if (i5 << 24 >> 24 == -128) i12 = i6; else {
        i9 = i37 >>> 3;
        i8 = i6;
        while (1) {
         i3 = 0;
         do {
          i3 = (HEAPU8[i2 >> 0] | 0) + i3 | 0;
          i39 = HEAP8[i2 + 1 >> 0] | 0;
          i7 = i39 & 255;
          i4 = i2 + 2 | 0;
          if (!(i39 << 24 >> 24)) if (!i3) break L44; else i2 = i4; else {
           i5 = i8 + (i3 << 1) | 0;
           i6 = 0;
           while (1) {
            i38 = HEAPU16[i4 >> 1] | 0;
            i39 = HEAPU16[i5 >> 1] | 0;
            i39 = (i39 << 16 | i39) & 65043487;
            i39 = ((Math_imul(((i38 << 16 | i38) & 65043487) - i39 | 0, i9) | 0) >>> 5) + i39 & 65043487;
            HEAP16[i5 >> 1] = i39 >>> 16 | i39;
            i6 = i6 + 1 | 0;
            if ((i6 | 0) == (i7 | 0)) break; else {
             i5 = i5 + 2 | 0;
             i4 = i4 + 2 | 0;
            }
           }
           i3 = i3 + i7 | 0;
           i2 = i2 + ((i7 << 1) + 2) | 0;
          }
         } while ((i3 | 0) != (i40 | 0));
         i1 = i1 + -1 | 0;
         if (!i1) break L44; else i8 = i8 + i36 | 0;
        }
       }
       while (1) {
        i3 = 0;
        do {
         i3 = (HEAPU8[i2 >> 0] | 0) + i3 | 0;
         i38 = HEAP8[i2 + 1 >> 0] | 0;
         i11 = i38 & 255;
         i4 = i2 + 2 | 0;
         if (!(i38 << 24 >> 24)) if (!i3) break L44; else i2 = i4; else {
          i5 = i3 << 1;
          i6 = i12 + i5 | 0;
          i7 = i4;
          do if (!((i6 ^ i7) & 3)) {
           if (!(i7 & 3)) i5 = i11; else {
            i4 = HEAP16[i4 >> 1] | 0;
            i38 = HEAP16[i6 >> 1] | 0;
            HEAP16[i6 >> 1] = (((i38 & 64478) + (i4 & 64478) | 0) >>> 1) + (i38 & i4 & 1057);
            i6 = i12 + (i5 + 2) | 0;
            i5 = i11 + -1 | 0;
            i4 = i2 + 4 | 0;
           }
           if (i5 >>> 0 > 1) {
            i9 = i5 + -2 | 0;
            i10 = i9 & -2;
            i8 = i6;
            i7 = i4;
            while (1) {
             i37 = HEAP32[i7 >> 2] | 0;
             i38 = HEAP32[i8 >> 2] | 0;
             HEAP32[i8 >> 2] = (i38 >>> 1 & 2112847343) + (i37 >>> 1 & 2112847343) + (i37 & 69272609 & i38);
             i5 = i5 + -2 | 0;
             if (i5 >>> 0 <= 1) break; else {
              i8 = i8 + 4 | 0;
              i7 = i7 + 4 | 0;
             }
            }
            i6 = i6 + (i10 + 2 << 1) | 0;
            i5 = i9 - i10 | 0;
            i4 = i4 + (i10 + 2 << 1) | 0;
           }
           if (!i5) break;
           i38 = HEAP16[i4 >> 1] | 0;
           i37 = HEAP16[i6 >> 1] | 0;
           HEAP16[i6 >> 1] = (((i37 & 64478) + (i38 & 64478) | 0) >>> 1) + (i37 & i38 & 1057);
          } else {
           i5 = i11;
           while (1) {
            i5 = i5 + -1 | 0;
            i38 = HEAP16[i4 >> 1] | 0;
            i37 = HEAP16[i6 >> 1] | 0;
            HEAP16[i6 >> 1] = (((i37 & 64478) + (i38 & 64478) | 0) >>> 1) + (i37 & i38 & 1057);
            if (!i5) break; else {
             i6 = i6 + 2 | 0;
             i4 = i4 + 2 | 0;
            }
           }
          } while (0);
          i3 = i3 + i11 | 0;
          i2 = i2 + ((i11 << 1) + 2) | 0;
         }
        } while ((i3 | 0) != (i40 | 0));
        i1 = i1 + -1 | 0;
        if (!i1) break L44; else i12 = i12 + (HEAP32[i39 >> 2] | 0) | 0;
       }
      }
     } else {
      switch (i1 | 0) {
      case 65535:
       break;
      default:
       break L137;
      }
      if ((i16 | 0) == 2016 | (i17 | 0) == 2016 | (i18 | 0) == 2016) {
       i1 = HEAP32[i35 + 12 >> 2] | 0;
       if (i5 << 24 >> 24 == -128) i12 = i6; else {
        i9 = i37 >>> 3;
        i8 = i6;
        while (1) {
         i3 = 0;
         do {
          i3 = (HEAPU8[i2 >> 0] | 0) + i3 | 0;
          i39 = HEAP8[i2 + 1 >> 0] | 0;
          i7 = i39 & 255;
          i4 = i2 + 2 | 0;
          if (!(i39 << 24 >> 24)) if (!i3) break L44; else i2 = i4; else {
           i5 = i8 + (i3 << 1) | 0;
           i6 = 0;
           while (1) {
            i38 = HEAPU16[i4 >> 1] | 0;
            i39 = HEAPU16[i5 >> 1] | 0;
            i39 = (i39 << 16 | i39) & 132184095;
            i39 = ((Math_imul(((i38 << 16 | i38) & 132184095) - i39 | 0, i9) | 0) >>> 5) + i39 & 132184095;
            HEAP16[i5 >> 1] = i39 >>> 16 | i39;
            i6 = i6 + 1 | 0;
            if ((i6 | 0) == (i7 | 0)) break; else {
             i5 = i5 + 2 | 0;
             i4 = i4 + 2 | 0;
            }
           }
           i3 = i3 + i7 | 0;
           i2 = i2 + ((i7 << 1) + 2) | 0;
          }
         } while ((i3 | 0) != (i40 | 0));
         i1 = i1 + -1 | 0;
         if (!i1) break L44; else i8 = i8 + i36 | 0;
        }
       }
       while (1) {
        i3 = 0;
        do {
         i3 = (HEAPU8[i2 >> 0] | 0) + i3 | 0;
         i38 = HEAP8[i2 + 1 >> 0] | 0;
         i11 = i38 & 255;
         i4 = i2 + 2 | 0;
         if (!(i38 << 24 >> 24)) if (!i3) break L44; else i2 = i4; else {
          i5 = i3 << 1;
          i6 = i12 + i5 | 0;
          i7 = i4;
          do if (!((i6 ^ i7) & 3)) {
           if (!(i7 & 3)) i5 = i11; else {
            i4 = HEAP16[i4 >> 1] | 0;
            i38 = HEAP16[i6 >> 1] | 0;
            HEAP16[i6 >> 1] = (((i38 & 63454) + (i4 & 63454) | 0) >>> 1) + (i38 & i4 & 2081);
            i6 = i12 + (i5 + 2) | 0;
            i5 = i11 + -1 | 0;
            i4 = i2 + 4 | 0;
           }
           if (i5 >>> 0 > 1) {
            i9 = i5 + -2 | 0;
            i10 = i9 & -2;
            i8 = i6;
            i7 = i4;
            while (1) {
             i37 = HEAP32[i7 >> 2] | 0;
             i38 = HEAP32[i8 >> 2] | 0;
             HEAP32[i8 >> 2] = (i38 >>> 1 & 2079292399) + (i37 >>> 1 & 2079292399) + (i37 & 136382497 & i38);
             i5 = i5 + -2 | 0;
             if (i5 >>> 0 <= 1) break; else {
              i8 = i8 + 4 | 0;
              i7 = i7 + 4 | 0;
             }
            }
            i6 = i6 + (i10 + 2 << 1) | 0;
            i5 = i9 - i10 | 0;
            i4 = i4 + (i10 + 2 << 1) | 0;
           }
           if (!i5) break;
           i38 = HEAP16[i4 >> 1] | 0;
           i37 = HEAP16[i6 >> 1] | 0;
           HEAP16[i6 >> 1] = (((i37 & 63454) + (i38 & 63454) | 0) >>> 1) + (i37 & i38 & 2081);
          } else {
           i5 = i11;
           while (1) {
            i5 = i5 + -1 | 0;
            i38 = HEAP16[i4 >> 1] | 0;
            i37 = HEAP16[i6 >> 1] | 0;
            HEAP16[i6 >> 1] = (((i37 & 63454) + (i38 & 63454) | 0) >>> 1) + (i37 & i38 & 2081);
            if (!i5) break; else {
             i6 = i6 + 2 | 0;
             i4 = i4 + 2 | 0;
            }
           }
          } while (0);
          i3 = i3 + i11 | 0;
          i2 = i2 + ((i11 << 1) + 2) | 0;
         }
        } while ((i3 | 0) != (i40 | 0));
        i1 = i1 + -1 | 0;
        if (!i1) break L44; else i12 = i12 + (HEAP32[i39 >> 2] | 0) | 0;
       }
      }
     } while (0);
     i10 = i19 + 32 | 0;
     i11 = i19 + 28 | 0;
     i12 = i19 + 33 | 0;
     i13 = i19 + 29 | 0;
     i14 = i19 + 34 | 0;
     i15 = i19 + 30 | 0;
     i9 = i19 + 24 | 0;
     i1 = HEAP32[i35 + 12 >> 2] | 0;
     while (1) {
      i3 = 0;
      do {
       i3 = (HEAPU8[i2 >> 0] | 0) + i3 | 0;
       i39 = HEAP8[i2 + 1 >> 0] | 0;
       i8 = i39 & 255;
       i4 = i2 + 2 | 0;
       if (!(i39 << 24 >> 24)) if (!i3) break L44; else i2 = i4; else {
        i5 = i6 + (i3 << 1) | 0;
        i7 = 0;
        while (1) {
         i32 = HEAPU16[i4 >> 1] | 0;
         i33 = HEAPU16[i5 >> 1] | 0;
         i35 = HEAPU8[i10 >> 0] | 0;
         i27 = HEAPU8[i11 >> 0] | 0;
         i25 = HEAP32[5992 + (i27 << 2) >> 2] | 0;
         i38 = HEAPU8[i12 >> 0] | 0;
         i30 = HEAPU8[i13 >> 0] | 0;
         i28 = HEAP32[5992 + (i30 << 2) >> 2] | 0;
         i39 = HEAPU8[i14 >> 0] | 0;
         i34 = HEAPU8[i15 >> 0] | 0;
         i31 = HEAP32[5992 + (i34 << 2) >> 2] | 0;
         i26 = HEAPU8[i25 + ((i33 & i16) >>> i35) >> 0] | 0;
         i29 = HEAPU8[i28 + ((i17 & i33) >>> i38) >> 0] | 0;
         i33 = HEAPU8[i31 + ((i18 & i33) >>> i39) >> 0] | 0;
         i35 = (((Math_imul((HEAPU8[i25 + ((i16 & i32) >>> i35) >> 0] | 0) - i26 | 0, i37) | 0) >>> 8) + i26 | 0) >>> i27 << i35;
         i38 = (((Math_imul((HEAPU8[i28 + ((i17 & i32) >>> i38) >> 0] | 0) - i29 | 0, i37) | 0) >>> 8) + i29 | 0) >>> i30 << i38;
         i39 = (((Math_imul((HEAPU8[i31 + ((i18 & i32) >>> i39) >> 0] | 0) - i33 | 0, i37) | 0) >>> 8) + i33 | 0) >>> i34 << i39;
         HEAP16[i5 >> 1] = i35 | HEAP32[i9 >> 2] | i38 | i39;
         i7 = i7 + 1 | 0;
         if ((i7 | 0) == (i8 | 0)) break; else {
          i5 = i5 + 2 | 0;
          i4 = i4 + 2 | 0;
         }
        }
        i3 = i3 + i8 | 0;
        i2 = i2 + ((i8 << 1) + 2) | 0;
       }
      } while ((i3 | 0) != (i40 | 0));
      i1 = i1 + -1 | 0;
      if (!i1) break L44; else i6 = i6 + i36 | 0;
     }
    }
   case 3:
    {
     i10 = i19 + 12 | 0;
     i11 = i19 + 32 | 0;
     i12 = i19 + 28 | 0;
     i13 = i19 + 16 | 0;
     i14 = i19 + 33 | 0;
     i15 = i19 + 29 | 0;
     i16 = i19 + 20 | 0;
     i17 = i19 + 34 | 0;
     i18 = i19 + 30 | 0;
     i9 = i19 + 24 | 0;
     i1 = HEAP32[i35 + 12 >> 2] | 0;
     while (1) {
      i3 = 0;
      do {
       i3 = (HEAPU8[i2 >> 0] | 0) + i3 | 0;
       i38 = HEAP8[i2 + 1 >> 0] | 0;
       i8 = i38 & 255;
       i4 = i2 + 2 | 0;
       if (!(i38 << 24 >> 24)) if (!i3) break L44; else i2 = i4; else {
        i5 = i6 + (i3 * 3 | 0) | 0;
        i7 = 0;
        while (1) {
         i30 = (HEAPU8[i4 + 1 >> 0] | 0) << 8 | (HEAPU8[i4 + 2 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0);
         i38 = i5 + 2 | 0;
         i35 = i5 + 1 | 0;
         i31 = (HEAPU8[i35 >> 0] | 0) << 8 | (HEAPU8[i38 >> 0] | 0) << 16 | (HEAPU8[i5 >> 0] | 0);
         i21 = HEAP32[i10 >> 2] | 0;
         i33 = HEAPU8[i11 >> 0] | 0;
         i23 = HEAPU8[i12 >> 0] | 0;
         i20 = HEAP32[5992 + (i23 << 2) >> 2] | 0;
         i25 = HEAP32[i13 >> 2] | 0;
         i34 = HEAPU8[i14 >> 0] | 0;
         i27 = HEAPU8[i15 >> 0] | 0;
         i24 = HEAP32[5992 + (i27 << 2) >> 2] | 0;
         i29 = HEAP32[i16 >> 2] | 0;
         i36 = HEAPU8[i17 >> 0] | 0;
         i32 = HEAPU8[i18 >> 0] | 0;
         i28 = HEAP32[5992 + (i32 << 2) >> 2] | 0;
         i22 = HEAPU8[i20 + ((i31 & i21) >>> i33) >> 0] | 0;
         i26 = HEAPU8[i24 + ((i25 & i31) >>> i34) >> 0] | 0;
         i31 = HEAPU8[i28 + ((i29 & i31) >>> i36) >> 0] | 0;
         i33 = (((Math_imul((HEAPU8[i20 + ((i21 & i30) >>> i33) >> 0] | 0) - i22 | 0, i37) | 0) >>> 8) + i22 | 0) >>> i23 << i33;
         i34 = (((Math_imul((HEAPU8[i24 + ((i25 & i30) >>> i34) >> 0] | 0) - i26 | 0, i37) | 0) >>> 8) + i26 | 0) >>> i27 << i34;
         i36 = (((Math_imul((HEAPU8[i28 + ((i29 & i30) >>> i36) >> 0] | 0) - i31 | 0, i37) | 0) >>> 8) + i31 | 0) >>> i32 << i36;
         i36 = i33 | HEAP32[i9 >> 2] | i34 | i36;
         HEAP8[i5 >> 0] = i36;
         HEAP8[i35 >> 0] = i36 >>> 8;
         HEAP8[i38 >> 0] = i36 >>> 16;
         i7 = i7 + 1 | 0;
         if ((i7 | 0) == (i8 | 0)) break; else {
          i5 = i5 + 3 | 0;
          i4 = i4 + 3 | 0;
         }
        }
        i3 = i3 + i8 | 0;
        i2 = i2 + ((i8 * 3 | 0) + 2) | 0;
       }
      } while ((i3 | 0) != (i40 | 0));
      i1 = i1 + -1 | 0;
      if (!i1) break L44; else i6 = i6 + (HEAP32[i39 >> 2] | 0) | 0;
     }
    }
   default:
    break L44;
   }
  }
  i3 = HEAP32[i41 + 4 >> 2] | 0;
  i1 = HEAPU8[i3 + 9 >> 0] | 0;
  if (i5 << 24 >> 24 == -1) switch (i1 | 0) {
  case 1:
   {
    i8 = (HEAP32[i35 + 8 >> 2] | 0) + i38 | 0;
    i7 = i34 + (i10 - i38) | 0;
    i1 = HEAP32[i35 + 12 >> 2] | 0;
    while (1) {
     i3 = 0;
     do {
      i3 = (HEAPU8[i2 >> 0] | 0) + i3 | 0;
      i37 = HEAP8[i2 + 1 >> 0] | 0;
      i6 = i37 & 255;
      if (!(i37 << 24 >> 24)) if (!i3) break L44; else i2 = i2 + 2 | 0; else {
       do if ((i3 | 0) < (i8 | 0)) {
        i5 = i38 - i3 | 0;
        if ((i5 | 0) > 0) {
         i4 = i6 - i5 | 0;
         if ((i4 | 0) < 1) break;
        } else {
         i4 = i6;
         i5 = 0;
        }
        i36 = i5 + i3 | 0;
        i37 = i8 - i36 | 0;
        _SDL_memcpy(i7 + i36 | 0, i2 + (i5 + 2) | 0, (i4 | 0) > (i37 | 0) ? i37 : i4) | 0;
       } while (0);
       i2 = i2 + (i6 + 2) | 0;
       i3 = i3 + i6 | 0;
      }
     } while ((i3 | 0) != (i40 | 0));
     i1 = i1 + -1 | 0;
     if (!i1) break L44; else i7 = i7 + (HEAP32[i39 >> 2] | 0) | 0;
    }
   }
  case 2:
   {
    i8 = (HEAP32[i35 + 8 >> 2] | 0) + i38 | 0;
    i7 = i34 + (i10 - (i38 << 1)) | 0;
    i1 = HEAP32[i35 + 12 >> 2] | 0;
    while (1) {
     i3 = 0;
     do {
      i3 = (HEAPU8[i2 >> 0] | 0) + i3 | 0;
      i37 = HEAP8[i2 + 1 >> 0] | 0;
      i6 = i37 & 255;
      if (!(i37 << 24 >> 24)) if (!i3) break L44; else i2 = i2 + 2 | 0; else {
       do if ((i3 | 0) < (i8 | 0)) {
        i5 = i38 - i3 | 0;
        if ((i5 | 0) > 0) {
         i4 = i6 - i5 | 0;
         if ((i4 | 0) < 1) break;
        } else {
         i4 = i6;
         i5 = 0;
        }
        i36 = i5 + i3 | 0;
        i37 = i8 - i36 | 0;
        _SDL_memcpy(i7 + (i36 << 1) | 0, i2 + ((i5 << 1) + 2) | 0, ((i4 | 0) > (i37 | 0) ? i37 : i4) << 1) | 0;
       } while (0);
       i2 = i2 + ((i6 << 1) + 2) | 0;
       i3 = i3 + i6 | 0;
      }
     } while ((i3 | 0) != (i40 | 0));
     i1 = i1 + -1 | 0;
     if (!i1) break L44; else i7 = i7 + (HEAP32[i39 >> 2] | 0) | 0;
    }
   }
  case 3:
   {
    i8 = (HEAP32[i35 + 8 >> 2] | 0) + i38 | 0;
    i7 = i34 + (i10 + (Math_imul(i38, -3) | 0)) | 0;
    i1 = HEAP32[i35 + 12 >> 2] | 0;
    while (1) {
     i3 = 0;
     do {
      i3 = (HEAPU8[i2 >> 0] | 0) + i3 | 0;
      i37 = HEAP8[i2 + 1 >> 0] | 0;
      i6 = i37 & 255;
      if (!(i37 << 24 >> 24)) if (!i3) break L44; else i2 = i2 + 2 | 0; else {
       do if ((i3 | 0) < (i8 | 0)) {
        i5 = i38 - i3 | 0;
        if ((i5 | 0) > 0) {
         i4 = i6 - i5 | 0;
         if ((i4 | 0) < 1) break;
        } else {
         i4 = i6;
         i5 = 0;
        }
        i36 = i5 + i3 | 0;
        i37 = i8 - i36 | 0;
        _SDL_memcpy(i7 + (i36 * 3 | 0) | 0, i2 + ((i5 * 3 | 0) + 2) | 0, ((i4 | 0) > (i37 | 0) ? i37 : i4) * 3 | 0) | 0;
       } while (0);
       i2 = i2 + ((i6 * 3 | 0) + 2) | 0;
       i3 = i3 + i6 | 0;
      }
     } while ((i3 | 0) != (i40 | 0));
     i1 = i1 + -1 | 0;
     if (!i1) break L44; else i7 = i7 + (HEAP32[i39 >> 2] | 0) | 0;
    }
   }
  case 4:
   {
    i8 = (HEAP32[i35 + 8 >> 2] | 0) + i38 | 0;
    i7 = i34 + (i10 - (i38 << 2)) | 0;
    i1 = HEAP32[i35 + 12 >> 2] | 0;
    while (1) {
     i3 = 0;
     do {
      i3 = (HEAPU16[i2 >> 1] | 0) + i3 | 0;
      i37 = HEAP16[i2 + 2 >> 1] | 0;
      i6 = i37 & 65535;
      if (!(i37 << 16 >> 16)) if (!i3) break L44; else i2 = i2 + 4 | 0; else {
       do if ((i3 | 0) < (i8 | 0)) {
        i5 = i38 - i3 | 0;
        if ((i5 | 0) > 0) {
         i4 = i6 - i5 | 0;
         if ((i4 | 0) < 1) break;
        } else {
         i4 = i6;
         i5 = 0;
        }
        i36 = i5 + i3 | 0;
        i37 = i8 - i36 | 0;
        _SDL_memcpy(i7 + (i36 << 2) | 0, i2 + ((i5 << 2) + 4) | 0, ((i4 | 0) > (i37 | 0) ? i37 : i4) << 2) | 0;
       } while (0);
       i2 = i2 + ((i6 << 2) + 4) | 0;
       i3 = i3 + i6 | 0;
      }
     } while ((i3 | 0) != (i40 | 0));
     i1 = i1 + -1 | 0;
     if (!i1) break L44; else i7 = i7 + (HEAP32[i39 >> 2] | 0) | 0;
    }
   }
  default:
   break L44;
  }
  switch (i1 | 0) {
  case 4:
   {
    i30 = i3 + 12 | 0;
    i29 = HEAP32[i30 >> 2] | 0;
    i31 = i3 + 16 | 0;
    i33 = HEAP32[i31 >> 2] | 0;
    i32 = i3 + 20 | 0;
    i36 = HEAP32[i32 >> 2] | 0;
    if ((i33 | i29 | i36 | 0) == 16777215 ? (i29 | 0) == 65280 | (i33 | 0) == 65280 | (i36 | 0) == 65280 : 0) {
     i1 = HEAP32[i35 + 12 >> 2] | 0;
     i11 = HEAP32[i35 + 8 >> 2] | 0;
     i12 = i11 + i38 | 0;
     i3 = i34 + (i10 - (i38 << 2)) | 0;
     i11 = ~i11 - i38 | 0;
     if (i5 << 24 >> 24 == -128) while (1) {
      i9 = 0;
      while (1) {
       i8 = HEAPU16[i2 >> 1] | 0;
       i4 = i8 + i9 | 0;
       i37 = HEAP16[i2 + 2 >> 1] | 0;
       i10 = i37 & 65535;
       if (!(i37 << 16 >> 16)) if (!i4) break L44; else i2 = i2 + 4 | 0; else {
        do if ((i4 | 0) < (i12 | 0)) {
         i6 = i38 - i4 | 0;
         if ((i6 | 0) > 0) {
          i5 = i10 - i6 | 0;
          if ((i5 | 0) < 1) break;
         } else {
          i5 = i10;
          i6 = 0;
         }
         i7 = i6 + i4 | 0;
         i37 = i12 - i7 | 0;
         if ((((i5 | 0) > (i37 | 0) ? i37 : i5) | 0) > 0) {
          i8 = i9 + i11 + i8 + i6 | 0;
          i9 = ~i5;
          i9 = ~((i8 | 0) > (i9 | 0) ? i8 : i9);
          i7 = i3 + (i7 << 2) | 0;
          i8 = 0;
          i5 = i2 + ((i6 << 2) + 4) | 0;
          while (1) {
           i36 = HEAP32[i5 >> 2] | 0;
           i37 = HEAP32[i7 >> 2] | 0;
           HEAP32[i7 >> 2] = (((i37 & 16711422) + (i36 & 16711422) | 0) >>> 1) + (i36 & 65793 & i37);
           i8 = i8 + 1 | 0;
           if ((i8 | 0) == (i9 | 0)) break; else {
            i7 = i7 + 4 | 0;
            i5 = i5 + 4 | 0;
           }
          }
         }
        } while (0);
        i2 = i2 + ((i10 << 2) + 4) | 0;
        i4 = i4 + i10 | 0;
       }
       if ((i4 | 0) == (i40 | 0)) break; else i9 = i4;
      }
      i1 = i1 + -1 | 0;
      if (!i1) break L44; else i3 = i3 + (HEAP32[i39 >> 2] | 0) | 0;
     } else while (1) {
      i9 = 0;
      while (1) {
       i8 = HEAPU16[i2 >> 1] | 0;
       i4 = i8 + i9 | 0;
       i36 = HEAP16[i2 + 2 >> 1] | 0;
       i10 = i36 & 65535;
       if (!(i36 << 16 >> 16)) if (!i4) break L44; else i2 = i2 + 4 | 0; else {
        do if ((i4 | 0) < (i12 | 0)) {
         i6 = i38 - i4 | 0;
         if ((i6 | 0) > 0) {
          i5 = i10 - i6 | 0;
          if ((i5 | 0) < 1) break;
         } else {
          i5 = i10;
          i6 = 0;
         }
         i7 = i6 + i4 | 0;
         i36 = i12 - i7 | 0;
         if ((((i5 | 0) > (i36 | 0) ? i36 : i5) | 0) > 0) {
          i8 = i9 + i11 + i8 + i6 | 0;
          i9 = ~i5;
          i9 = ~((i8 | 0) > (i9 | 0) ? i8 : i9);
          i7 = i3 + (i7 << 2) | 0;
          i8 = 0;
          i5 = i2 + ((i6 << 2) + 4) | 0;
          while (1) {
           i35 = HEAP32[i5 >> 2] | 0;
           i36 = HEAP32[i7 >> 2] | 0;
           i34 = i36 & 16711935;
           i36 = i36 & 65280;
           HEAP32[i7 >> 2] = ((Math_imul((i35 & 16711935) - i34 | 0, i37) | 0) >>> 8) + i34 & 16711935 | ((Math_imul((i35 & 65280) - i36 | 0, i37) | 0) >>> 8) + i36 & 65280;
           i8 = i8 + 1 | 0;
           if ((i8 | 0) == (i9 | 0)) break; else {
            i7 = i7 + 4 | 0;
            i5 = i5 + 4 | 0;
           }
          }
         }
        } while (0);
        i2 = i2 + ((i10 << 2) + 4) | 0;
        i4 = i4 + i10 | 0;
       }
       if ((i4 | 0) == (i40 | 0)) break; else i9 = i4;
      }
      i1 = i1 + -1 | 0;
      if (!i1) break L44; else i3 = i3 + (HEAP32[i39 >> 2] | 0) | 0;
     }
    }
    i22 = HEAP32[i35 + 8 >> 2] | 0;
    i23 = i22 + i38 | 0;
    i24 = i3 + 32 | 0;
    i25 = i3 + 28 | 0;
    i26 = i3 + 33 | 0;
    i27 = i3 + 29 | 0;
    i28 = i3 + 34 | 0;
    i29 = i3 + 30 | 0;
    i21 = i3 + 24 | 0;
    i22 = ~i22 - i38 | 0;
    i20 = i34 + (i10 - (i38 << 2)) | 0;
    i1 = HEAP32[i35 + 12 >> 2] | 0;
    while (1) {
     i7 = 0;
     while (1) {
      i6 = HEAPU16[i2 >> 1] | 0;
      i3 = i6 + i7 | 0;
      i36 = HEAP16[i2 + 2 >> 1] | 0;
      i19 = i36 & 65535;
      if (!(i36 << 16 >> 16)) if (!i3) break L44; else i2 = i2 + 4 | 0; else {
       do if ((i3 | 0) < (i23 | 0)) {
        i5 = i38 - i3 | 0;
        if ((i5 | 0) > 0) {
         i4 = i19 - i5 | 0;
         if ((i4 | 0) < 1) break;
        } else {
         i4 = i19;
         i5 = 0;
        }
        i14 = i5 + i3 | 0;
        i36 = i23 - i14 | 0;
        if ((((i4 | 0) > (i36 | 0) ? i36 : i4) | 0) > 0) {
         i8 = i22 + i7 + i6 + i5 | 0;
         i15 = ~i4;
         i15 = ~((i8 | 0) > (i15 | 0) ? i8 : i15);
         i8 = HEAPU8[i25 >> 0] | 0;
         i11 = HEAP32[5992 + (i8 << 2) >> 2] | 0;
         i9 = HEAPU8[i27 >> 0] | 0;
         i12 = HEAP32[5992 + (i9 << 2) >> 2] | 0;
         i10 = HEAPU8[i29 >> 0] | 0;
         i13 = HEAP32[5992 + (i10 << 2) >> 2] | 0;
         i16 = HEAPU8[i24 >> 0] | 0;
         i17 = HEAPU8[i26 >> 0] | 0;
         i18 = HEAPU8[i28 >> 0] | 0;
         i6 = i20 + (i14 << 2) | 0;
         i7 = 0;
         i4 = i2 + ((i5 << 2) + 4) | 0;
         while (1) {
          i33 = HEAP32[i4 >> 2] | 0;
          i36 = HEAP32[i6 >> 2] | 0;
          i42 = HEAP32[i30 >> 2] | 0;
          i5 = HEAP32[i31 >> 2] | 0;
          i14 = HEAP32[i32 >> 2] | 0;
          i34 = HEAPU8[i11 + ((i42 & i36) >>> i16) >> 0] | 0;
          i35 = HEAPU8[i12 + ((i5 & i36) >>> i17) >> 0] | 0;
          i36 = HEAPU8[i13 + ((i14 & i36) >>> i18) >> 0] | 0;
          i34 = (((Math_imul((HEAPU8[i11 + ((i42 & i33) >>> i16) >> 0] | 0) - i34 | 0, i37) | 0) >>> 8) + i34 | 0) >>> i8 << i16;
          i35 = (((Math_imul((HEAPU8[i12 + ((i5 & i33) >>> i17) >> 0] | 0) - i35 | 0, i37) | 0) >>> 8) + i35 | 0) >>> i9 << i17;
          i36 = (((Math_imul((HEAPU8[i13 + ((i14 & i33) >>> i18) >> 0] | 0) - i36 | 0, i37) | 0) >>> 8) + i36 | 0) >>> i10 << i18;
          HEAP32[i6 >> 2] = i34 | HEAP32[i21 >> 2] | i35 | i36;
          i7 = i7 + 1 | 0;
          if ((i7 | 0) == (i15 | 0)) break; else {
           i6 = i6 + 4 | 0;
           i4 = i4 + 4 | 0;
          }
         }
        }
       } while (0);
       i2 = i2 + ((i19 << 2) + 4) | 0;
       i3 = i3 + i19 | 0;
      }
      if ((i3 | 0) == (i40 | 0)) break; else i7 = i3;
     }
     i1 = i1 + -1 | 0;
     if (!i1) break; else i20 = i20 + (HEAP32[i39 >> 2] | 0) | 0;
    }
    break;
   }
  case 2:
   {
    i31 = HEAP32[i3 + 12 >> 2] | 0;
    i32 = HEAP32[i3 + 16 >> 2] | 0;
    i33 = HEAP32[i3 + 20 >> 2] | 0;
    i1 = i32 | i31 | i33;
    L377 : do if ((i1 | 0) < 65535) {
     switch (i1 | 0) {
     case 32767:
      break;
     default:
      break L377;
     }
     if ((i31 | 0) == 992 | (i32 | 0) == 992 | (i33 | 0) == 992) {
      i1 = HEAP32[i35 + 12 >> 2] | 0;
      i3 = HEAP32[i35 + 8 >> 2] | 0;
      i13 = i3 + i38 | 0;
      i4 = i34 + (i10 - (i38 << 1)) | 0;
      if (i5 << 24 >> 24 == -128) i11 = i4; else {
       i12 = i37 >>> 3;
       i11 = ~i3 - i38 | 0;
       while (1) {
        i9 = 0;
        while (1) {
         i8 = HEAPU8[i2 >> 0] | 0;
         i3 = i8 + i9 | 0;
         i42 = HEAP8[i2 + 1 >> 0] | 0;
         i10 = i42 & 255;
         if (!(i42 << 24 >> 24)) if (!i3) break L44; else i2 = i2 + 2 | 0; else {
          do if ((i3 | 0) < (i13 | 0)) {
           i6 = i38 - i3 | 0;
           if ((i6 | 0) > 0) {
            i5 = i10 - i6 | 0;
            if ((i5 | 0) < 1) break;
           } else {
            i5 = i10;
            i6 = 0;
           }
           i7 = i6 + i3 | 0;
           i42 = i13 - i7 | 0;
           if ((((i5 | 0) > (i42 | 0) ? i42 : i5) | 0) > 0) {
            i8 = i11 + i9 + i8 + i6 | 0;
            i9 = ~i5;
            i9 = ~((i8 | 0) > (i9 | 0) ? i8 : i9);
            i7 = i4 + (i7 << 1) | 0;
            i8 = 0;
            i5 = i2 + ((i6 << 1) + 2) | 0;
            while (1) {
             i39 = HEAPU16[i5 >> 1] | 0;
             i42 = HEAPU16[i7 >> 1] | 0;
             i42 = (i42 << 16 | i42) & 65043487;
             i42 = ((Math_imul(((i39 << 16 | i39) & 65043487) - i42 | 0, i12) | 0) >>> 5) + i42 & 65043487;
             HEAP16[i7 >> 1] = i42 >>> 16 | i42;
             i8 = i8 + 1 | 0;
             if ((i8 | 0) == (i9 | 0)) break; else {
              i7 = i7 + 2 | 0;
              i5 = i5 + 2 | 0;
             }
            }
           }
          } while (0);
          i2 = i2 + ((i10 << 1) + 2) | 0;
          i3 = i3 + i10 | 0;
         }
         if ((i3 | 0) == (i40 | 0)) break; else i9 = i3;
        }
        i1 = i1 + -1 | 0;
        if (!i1) break L44; else i4 = i4 + i36 | 0;
       }
      }
      while (1) {
       i3 = 0;
       do {
        i3 = (HEAPU8[i2 >> 0] | 0) + i3 | 0;
        i42 = HEAP8[i2 + 1 >> 0] | 0;
        i10 = i42 & 255;
        if (!(i42 << 24 >> 24)) if (!i3) break L44; else i2 = i2 + 2 | 0; else {
         L408 : do if ((i3 | 0) < (i13 | 0)) {
          i5 = i38 - i3 | 0;
          if ((i5 | 0) > 0) {
           i4 = i10 - i5 | 0;
           if ((i4 | 0) < 1) break;
          } else {
           i4 = i10;
           i5 = 0;
          }
          i6 = i5 + i3 | 0;
          i9 = i13 - i6 | 0;
          i9 = (i4 | 0) > (i9 | 0) ? i9 : i4;
          i8 = i5 << 1;
          i4 = i2 + (i8 + 2) | 0;
          i5 = i6 << 1;
          i6 = i11 + i5 | 0;
          i7 = i4;
          if ((i7 ^ i6) & 3) {
           if (!i9) break; else i5 = i9;
           while (1) {
            i5 = i5 + -1 | 0;
            i42 = HEAP16[i4 >> 1] | 0;
            i37 = HEAP16[i6 >> 1] | 0;
            HEAP16[i6 >> 1] = (((i37 & 64478) + (i42 & 64478) | 0) >>> 1) + (i37 & i42 & 1057);
            if (!i5) break L408; else {
             i6 = i6 + 2 | 0;
             i4 = i4 + 2 | 0;
            }
           }
          }
          if (!(i7 & 3)) i5 = i9; else {
           i4 = HEAP16[i4 >> 1] | 0;
           i42 = HEAP16[i6 >> 1] | 0;
           HEAP16[i6 >> 1] = (((i42 & 64478) + (i4 & 64478) | 0) >>> 1) + (i42 & i4 & 1057);
           i6 = i11 + (i5 + 2) | 0;
           i5 = i9 + -1 | 0;
           i4 = i2 + (i8 + 4) | 0;
          }
          if (i5 >>> 0 > 1) {
           i9 = i5 + -2 | 0;
           i8 = i6;
           i7 = i4;
           while (1) {
            i37 = HEAP32[i7 >> 2] | 0;
            i42 = HEAP32[i8 >> 2] | 0;
            HEAP32[i8 >> 2] = (i37 & 69272609 & i42) + (i37 >>> 1 & 2112847343) + (i42 >>> 1 & 2112847343);
            i5 = i5 + -2 | 0;
            if (i5 >>> 0 <= 1) break; else {
             i8 = i8 + 4 | 0;
             i7 = i7 + 4 | 0;
            }
           }
           i5 = i9 & -2;
           i42 = i5 + 2 | 0;
           i6 = i6 + (i42 << 1) | 0;
           i5 = i9 - i5 | 0;
           i4 = i4 + (i42 << 1) | 0;
          }
          if (!i5) break;
          i42 = HEAP16[i4 >> 1] | 0;
          i37 = HEAP16[i6 >> 1] | 0;
          HEAP16[i6 >> 1] = (((i37 & 64478) + (i42 & 64478) | 0) >>> 1) + (i37 & i42 & 1057);
         } while (0);
         i2 = i2 + ((i10 << 1) + 2) | 0;
         i3 = i3 + i10 | 0;
        }
       } while ((i3 | 0) != (i40 | 0));
       i1 = i1 + -1 | 0;
       if (!i1) break L44; else i11 = i11 + (HEAP32[i39 >> 2] | 0) | 0;
      }
     }
    } else {
     switch (i1 | 0) {
     case 65535:
      break;
     default:
      break L377;
     }
     if ((i31 | 0) == 2016 | (i32 | 0) == 2016 | (i33 | 0) == 2016) {
      i1 = HEAP32[i35 + 12 >> 2] | 0;
      i3 = HEAP32[i35 + 8 >> 2] | 0;
      i13 = i3 + i38 | 0;
      i4 = i34 + (i10 - (i38 << 1)) | 0;
      if (i5 << 24 >> 24 == -128) i11 = i4; else {
       i12 = i37 >>> 3;
       i11 = ~i3 - i38 | 0;
       while (1) {
        i9 = 0;
        while (1) {
         i8 = HEAPU8[i2 >> 0] | 0;
         i3 = i8 + i9 | 0;
         i42 = HEAP8[i2 + 1 >> 0] | 0;
         i10 = i42 & 255;
         if (!(i42 << 24 >> 24)) if (!i3) break L44; else i2 = i2 + 2 | 0; else {
          do if ((i3 | 0) < (i13 | 0)) {
           i6 = i38 - i3 | 0;
           if ((i6 | 0) > 0) {
            i5 = i10 - i6 | 0;
            if ((i5 | 0) < 1) break;
           } else {
            i5 = i10;
            i6 = 0;
           }
           i7 = i6 + i3 | 0;
           i42 = i13 - i7 | 0;
           if ((((i5 | 0) > (i42 | 0) ? i42 : i5) | 0) > 0) {
            i8 = i11 + i9 + i8 + i6 | 0;
            i9 = ~i5;
            i9 = ~((i8 | 0) > (i9 | 0) ? i8 : i9);
            i7 = i4 + (i7 << 1) | 0;
            i8 = 0;
            i5 = i2 + ((i6 << 1) + 2) | 0;
            while (1) {
             i39 = HEAPU16[i5 >> 1] | 0;
             i42 = HEAPU16[i7 >> 1] | 0;
             i42 = (i42 << 16 | i42) & 132184095;
             i42 = ((Math_imul(((i39 << 16 | i39) & 132184095) - i42 | 0, i12) | 0) >>> 5) + i42 & 132184095;
             HEAP16[i7 >> 1] = i42 >>> 16 | i42;
             i8 = i8 + 1 | 0;
             if ((i8 | 0) == (i9 | 0)) break; else {
              i7 = i7 + 2 | 0;
              i5 = i5 + 2 | 0;
             }
            }
           }
          } while (0);
          i2 = i2 + ((i10 << 1) + 2) | 0;
          i3 = i3 + i10 | 0;
         }
         if ((i3 | 0) == (i40 | 0)) break; else i9 = i3;
        }
        i1 = i1 + -1 | 0;
        if (!i1) break L44; else i4 = i4 + i36 | 0;
       }
      }
      while (1) {
       i3 = 0;
       do {
        i3 = (HEAPU8[i2 >> 0] | 0) + i3 | 0;
        i42 = HEAP8[i2 + 1 >> 0] | 0;
        i10 = i42 & 255;
        if (!(i42 << 24 >> 24)) if (!i3) break L44; else i2 = i2 + 2 | 0; else {
         L461 : do if ((i3 | 0) < (i13 | 0)) {
          i5 = i38 - i3 | 0;
          if ((i5 | 0) > 0) {
           i4 = i10 - i5 | 0;
           if ((i4 | 0) < 1) break;
          } else {
           i4 = i10;
           i5 = 0;
          }
          i6 = i5 + i3 | 0;
          i9 = i13 - i6 | 0;
          i9 = (i4 | 0) > (i9 | 0) ? i9 : i4;
          i8 = i5 << 1;
          i4 = i2 + (i8 + 2) | 0;
          i5 = i6 << 1;
          i6 = i11 + i5 | 0;
          i7 = i4;
          if ((i7 ^ i6) & 3) {
           if (!i9) break; else i5 = i9;
           while (1) {
            i5 = i5 + -1 | 0;
            i42 = HEAP16[i4 >> 1] | 0;
            i37 = HEAP16[i6 >> 1] | 0;
            HEAP16[i6 >> 1] = (((i37 & 63454) + (i42 & 63454) | 0) >>> 1) + (i37 & i42 & 2081);
            if (!i5) break L461; else {
             i6 = i6 + 2 | 0;
             i4 = i4 + 2 | 0;
            }
           }
          }
          if (!(i7 & 3)) i5 = i9; else {
           i4 = HEAP16[i4 >> 1] | 0;
           i42 = HEAP16[i6 >> 1] | 0;
           HEAP16[i6 >> 1] = (((i42 & 63454) + (i4 & 63454) | 0) >>> 1) + (i42 & i4 & 2081);
           i6 = i11 + (i5 + 2) | 0;
           i5 = i9 + -1 | 0;
           i4 = i2 + (i8 + 4) | 0;
          }
          if (i5 >>> 0 > 1) {
           i9 = i5 + -2 | 0;
           i8 = i6;
           i7 = i4;
           while (1) {
            i37 = HEAP32[i7 >> 2] | 0;
            i42 = HEAP32[i8 >> 2] | 0;
            HEAP32[i8 >> 2] = (i37 & 136382497 & i42) + (i37 >>> 1 & 2079292399) + (i42 >>> 1 & 2079292399);
            i5 = i5 + -2 | 0;
            if (i5 >>> 0 <= 1) break; else {
             i8 = i8 + 4 | 0;
             i7 = i7 + 4 | 0;
            }
           }
           i5 = i9 & -2;
           i42 = i5 + 2 | 0;
           i6 = i6 + (i42 << 1) | 0;
           i5 = i9 - i5 | 0;
           i4 = i4 + (i42 << 1) | 0;
          }
          if (!i5) break;
          i42 = HEAP16[i4 >> 1] | 0;
          i37 = HEAP16[i6 >> 1] | 0;
          HEAP16[i6 >> 1] = (((i37 & 63454) + (i42 & 63454) | 0) >>> 1) + (i37 & i42 & 2081);
         } while (0);
         i2 = i2 + ((i10 << 1) + 2) | 0;
         i3 = i3 + i10 | 0;
        }
       } while ((i3 | 0) != (i40 | 0));
       i1 = i1 + -1 | 0;
       if (!i1) break L44; else i11 = i11 + (HEAP32[i39 >> 2] | 0) | 0;
      }
     }
    } while (0);
    i23 = HEAP32[i35 + 8 >> 2] | 0;
    i24 = i23 + i38 | 0;
    i25 = i3 + 32 | 0;
    i26 = i3 + 28 | 0;
    i27 = i3 + 33 | 0;
    i28 = i3 + 29 | 0;
    i29 = i3 + 34 | 0;
    i30 = i3 + 30 | 0;
    i22 = i3 + 24 | 0;
    i23 = ~i23 - i38 | 0;
    i21 = i34 + (i10 - (i38 << 1)) | 0;
    i1 = HEAP32[i35 + 12 >> 2] | 0;
    while (1) {
     i7 = 0;
     while (1) {
      i6 = HEAPU8[i2 >> 0] | 0;
      i3 = i6 + i7 | 0;
      i42 = HEAP8[i2 + 1 >> 0] | 0;
      i20 = i42 & 255;
      if (!(i42 << 24 >> 24)) if (!i3) break L44; else i2 = i2 + 2 | 0; else {
       do if ((i3 | 0) < (i24 | 0)) {
        i5 = i38 - i3 | 0;
        if ((i5 | 0) > 0) {
         i4 = i20 - i5 | 0;
         if ((i4 | 0) < 1) break;
        } else {
         i4 = i20;
         i5 = 0;
        }
        i15 = i5 + i3 | 0;
        i42 = i24 - i15 | 0;
        if ((((i4 | 0) > (i42 | 0) ? i42 : i4) | 0) > 0) {
         i8 = i23 + i7 + i6 + i5 | 0;
         i16 = ~i4;
         i16 = ~((i8 | 0) > (i16 | 0) ? i8 : i16);
         i8 = HEAPU8[i26 >> 0] | 0;
         i11 = HEAP32[5992 + (i8 << 2) >> 2] | 0;
         i9 = HEAPU8[i28 >> 0] | 0;
         i12 = HEAP32[5992 + (i9 << 2) >> 2] | 0;
         i10 = HEAPU8[i30 >> 0] | 0;
         i13 = HEAP32[5992 + (i10 << 2) >> 2] | 0;
         i14 = HEAP32[i22 >> 2] | 0;
         i17 = HEAPU8[i25 >> 0] | 0;
         i18 = HEAPU8[i27 >> 0] | 0;
         i19 = HEAPU8[i29 >> 0] | 0;
         i6 = i21 + (i15 << 1) | 0;
         i7 = 0;
         i4 = i2 + ((i5 << 1) + 2) | 0;
         while (1) {
          i39 = HEAPU16[i4 >> 1] | 0;
          i42 = HEAPU16[i6 >> 1] | 0;
          i34 = HEAPU8[i11 + ((i42 & i31) >>> i17) >> 0] | 0;
          i35 = HEAPU8[i12 + ((i42 & i32) >>> i18) >> 0] | 0;
          i42 = HEAPU8[i13 + ((i42 & i33) >>> i19) >> 0] | 0;
          HEAP16[i6 >> 1] = (((Math_imul((HEAPU8[i11 + ((i39 & i31) >>> i17) >> 0] | 0) - i34 | 0, i37) | 0) >>> 8) + i34 | 0) >>> i8 << i17 | i14 | (((Math_imul((HEAPU8[i12 + ((i39 & i32) >>> i18) >> 0] | 0) - i35 | 0, i37) | 0) >>> 8) + i35 | 0) >>> i9 << i18 | (((Math_imul((HEAPU8[i13 + ((i39 & i33) >>> i19) >> 0] | 0) - i42 | 0, i37) | 0) >>> 8) + i42 | 0) >>> i10 << i19;
          i7 = i7 + 1 | 0;
          if ((i7 | 0) == (i16 | 0)) break; else {
           i6 = i6 + 2 | 0;
           i4 = i4 + 2 | 0;
          }
         }
        }
       } while (0);
       i2 = i2 + ((i20 << 1) + 2) | 0;
       i3 = i3 + i20 | 0;
      }
      if ((i3 | 0) == (i40 | 0)) break; else i7 = i3;
     }
     i1 = i1 + -1 | 0;
     if (!i1) break; else i21 = i21 + i36 | 0;
    }
    break;
   }
  case 3:
   {
    i12 = HEAP32[i35 + 8 >> 2] | 0;
    i13 = i12 + i38 | 0;
    i14 = i3 + 12 | 0;
    i15 = i3 + 32 | 0;
    i16 = i3 + 28 | 0;
    i17 = i3 + 16 | 0;
    i18 = i3 + 33 | 0;
    i19 = i3 + 29 | 0;
    i20 = i3 + 20 | 0;
    i21 = i3 + 34 | 0;
    i22 = i3 + 30 | 0;
    i11 = i3 + 24 | 0;
    i12 = ~i12 - i38 | 0;
    i10 = i34 + (i10 + (Math_imul(i38, -3) | 0)) | 0;
    i1 = HEAP32[i35 + 12 >> 2] | 0;
    while (1) {
     i8 = 0;
     while (1) {
      i7 = HEAPU8[i2 >> 0] | 0;
      i3 = i7 + i8 | 0;
      i42 = HEAP8[i2 + 1 >> 0] | 0;
      i9 = i42 & 255;
      if (!(i42 << 24 >> 24)) if (!i3) break L44; else i2 = i2 + 2 | 0; else {
       do if ((i3 | 0) < (i13 | 0)) {
        i5 = i38 - i3 | 0;
        if ((i5 | 0) > 0) {
         i4 = i9 - i5 | 0;
         if ((i4 | 0) < 1) break;
        } else {
         i4 = i9;
         i5 = 0;
        }
        i6 = i5 + i3 | 0;
        i42 = i13 - i6 | 0;
        if ((((i4 | 0) > (i42 | 0) ? i42 : i4) | 0) > 0) {
         i7 = i12 + i8 + i7 + i5 | 0;
         i8 = ~i4;
         i8 = ~((i7 | 0) > (i8 | 0) ? i7 : i8);
         i6 = i10 + (i6 * 3 | 0) | 0;
         i7 = 0;
         i4 = i2 + ((i5 * 3 | 0) + 2) | 0;
         while (1) {
          i30 = (HEAPU8[i4 + 1 >> 0] | 0) << 8 | (HEAPU8[i4 + 2 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0);
          i42 = i6 + 2 | 0;
          i35 = i6 + 1 | 0;
          i31 = (HEAPU8[i35 >> 0] | 0) << 8 | (HEAPU8[i42 >> 0] | 0) << 16 | (HEAPU8[i6 >> 0] | 0);
          i43 = HEAP32[i14 >> 2] | 0;
          i33 = HEAPU8[i15 >> 0] | 0;
          i23 = HEAPU8[i16 >> 0] | 0;
          i44 = HEAP32[5992 + (i23 << 2) >> 2] | 0;
          i25 = HEAP32[i17 >> 2] | 0;
          i34 = HEAPU8[i18 >> 0] | 0;
          i27 = HEAPU8[i19 >> 0] | 0;
          i24 = HEAP32[5992 + (i27 << 2) >> 2] | 0;
          i29 = HEAP32[i20 >> 2] | 0;
          i36 = HEAPU8[i21 >> 0] | 0;
          i32 = HEAPU8[i22 >> 0] | 0;
          i28 = HEAP32[5992 + (i32 << 2) >> 2] | 0;
          i5 = HEAPU8[i44 + ((i31 & i43) >>> i33) >> 0] | 0;
          i26 = HEAPU8[i24 + ((i25 & i31) >>> i34) >> 0] | 0;
          i31 = HEAPU8[i28 + ((i29 & i31) >>> i36) >> 0] | 0;
          i33 = (((Math_imul((HEAPU8[i44 + ((i43 & i30) >>> i33) >> 0] | 0) - i5 | 0, i37) | 0) >>> 8) + i5 | 0) >>> i23 << i33;
          i34 = (((Math_imul((HEAPU8[i24 + ((i25 & i30) >>> i34) >> 0] | 0) - i26 | 0, i37) | 0) >>> 8) + i26 | 0) >>> i27 << i34;
          i36 = (((Math_imul((HEAPU8[i28 + ((i29 & i30) >>> i36) >> 0] | 0) - i31 | 0, i37) | 0) >>> 8) + i31 | 0) >>> i32 << i36;
          i36 = i33 | HEAP32[i11 >> 2] | i34 | i36;
          HEAP8[i6 >> 0] = i36;
          HEAP8[i35 >> 0] = i36 >>> 8;
          HEAP8[i42 >> 0] = i36 >>> 16;
          i7 = i7 + 1 | 0;
          if ((i7 | 0) == (i8 | 0)) break; else {
           i6 = i6 + 3 | 0;
           i4 = i4 + 3 | 0;
          }
         }
        }
       } while (0);
       i2 = i2 + ((i9 * 3 | 0) + 2) | 0;
       i3 = i3 + i9 | 0;
      }
      if ((i3 | 0) == (i40 | 0)) break; else i8 = i3;
     }
     i1 = i1 + -1 | 0;
     if (!i1) break; else i10 = i10 + (HEAP32[i39 >> 2] | 0) | 0;
    }
    break;
   }
  default:
   break L44;
  }
 } while (0);
 if (!(HEAP32[i41 >> 2] & 2)) {
  i44 = 0;
  return i44 | 0;
 }
 _SDL_UnlockSurface(i41);
 i44 = 0;
 return i44 | 0;
}

function _SDL_BlendFillRect_RGB(i8, i9, i2, i4, i5, i6, i1) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i3 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0;
 i7 = HEAP32[i8 + 4 >> 2] | 0;
 i33 = i1 & 255 ^ 255;
 switch (HEAPU8[i7 + 9 >> 0] | 0 | 0) {
 case 2:
  switch (i2 | 0) {
  case 1:
   {
    i2 = HEAP32[i9 + 8 >> 2] | 0;
    i3 = HEAP32[i9 + 12 >> 2] | 0;
    i1 = (HEAP32[i8 + 16 >> 2] | 0) / 2 | 0;
    i32 = i1 - i2 | 0;
    if (!i3) {
     i34 = 0;
     return i34 | 0;
    }
    i1 = Math_imul(HEAP32[i9 + 4 >> 2] | 0, i1) | 0;
    i31 = (i2 + 3 | 0) / 4 | 0;
    i21 = i2 & 3;
    i22 = i7 + 12 | 0;
    i23 = i7 + 32 | 0;
    i24 = i7 + 28 | 0;
    i25 = i7 + 16 | 0;
    i26 = i7 + 33 | 0;
    i27 = i7 + 29 | 0;
    i28 = i7 + 20 | 0;
    i29 = i7 + 34 | 0;
    i30 = i7 + 30 | 0;
    i20 = i4 & 255;
    i19 = i5 & 255;
    i18 = i6 & 255;
    i17 = i7 + 24 | 0;
    i2 = i3;
    i1 = (HEAP32[i8 + 20 >> 2] | 0) + (i1 + (HEAP32[i9 >> 2] | 0) << 1) | 0;
    L29 : while (1) {
     i2 = i2 + -1 | 0;
     switch (i21 | 0) {
     case 0:
      {
       i6 = HEAP8[i24 >> 0] | 0;
       i10 = HEAP8[i27 >> 0] | 0;
       i14 = HEAP8[i30 >> 0] | 0;
       i3 = HEAP32[i22 >> 2] | 0;
       i4 = HEAP8[i23 >> 0] | 0;
       i5 = i6;
       i6 = HEAP32[5992 + ((i6 & 255) << 2) >> 2] | 0;
       i7 = HEAP32[i25 >> 2] | 0;
       i8 = HEAP8[i26 >> 0] | 0;
       i9 = i10;
       i10 = HEAP32[5992 + ((i10 & 255) << 2) >> 2] | 0;
       i11 = HEAP32[i28 >> 2] | 0;
       i12 = HEAP8[i29 >> 0] | 0;
       i13 = i14;
       i14 = HEAP32[5992 + ((i14 & 255) << 2) >> 2] | 0;
       i15 = HEAP32[i17 >> 2] | 0;
       i16 = i31;
       i34 = 10;
       break;
      }
     case 3:
      {
       i6 = HEAP8[i24 >> 0] | 0;
       i10 = HEAP8[i27 >> 0] | 0;
       i14 = HEAP8[i30 >> 0] | 0;
       i4 = HEAP8[i23 >> 0] | 0;
       i5 = i6;
       i6 = HEAP32[5992 + ((i6 & 255) << 2) >> 2] | 0;
       i7 = HEAP32[i25 >> 2] | 0;
       i8 = HEAP8[i26 >> 0] | 0;
       i9 = i10;
       i10 = HEAP32[5992 + ((i10 & 255) << 2) >> 2] | 0;
       i11 = HEAP32[i28 >> 2] | 0;
       i12 = HEAP8[i29 >> 0] | 0;
       i13 = i14;
       i14 = HEAP32[5992 + ((i14 & 255) << 2) >> 2] | 0;
       i15 = HEAP32[i17 >> 2] | 0;
       i3 = HEAP32[i22 >> 2] | 0;
       i16 = i31;
       i34 = 11;
       break;
      }
     case 2:
      {
       i6 = HEAP8[i24 >> 0] | 0;
       i10 = HEAP8[i27 >> 0] | 0;
       i14 = HEAP8[i30 >> 0] | 0;
       i3 = HEAP32[i22 >> 2] | 0;
       i4 = HEAP8[i23 >> 0] | 0;
       i5 = i6;
       i6 = HEAP32[5992 + ((i6 & 255) << 2) >> 2] | 0;
       i7 = HEAP32[i25 >> 2] | 0;
       i8 = HEAP8[i26 >> 0] | 0;
       i9 = i10;
       i10 = HEAP32[5992 + ((i10 & 255) << 2) >> 2] | 0;
       i11 = HEAP32[i28 >> 2] | 0;
       i12 = HEAP8[i29 >> 0] | 0;
       i13 = i14;
       i14 = HEAP32[5992 + ((i14 & 255) << 2) >> 2] | 0;
       i15 = HEAP32[i17 >> 2] | 0;
       i16 = i31;
       i34 = 12;
       break;
      }
     case 1:
      {
       i6 = HEAP8[i24 >> 0] | 0;
       i10 = HEAP8[i27 >> 0] | 0;
       i14 = HEAP8[i30 >> 0] | 0;
       i3 = HEAP32[i22 >> 2] | 0;
       i4 = HEAP8[i23 >> 0] | 0;
       i5 = i6;
       i6 = HEAP32[5992 + ((i6 & 255) << 2) >> 2] | 0;
       i7 = HEAP32[i25 >> 2] | 0;
       i8 = HEAP8[i26 >> 0] | 0;
       i9 = i10;
       i10 = HEAP32[5992 + ((i10 & 255) << 2) >> 2] | 0;
       i11 = HEAP32[i28 >> 2] | 0;
       i12 = HEAP8[i29 >> 0] | 0;
       i13 = i14;
       i14 = HEAP32[5992 + ((i14 & 255) << 2) >> 2] | 0;
       i15 = HEAP32[i17 >> 2] | 0;
       i16 = i31;
       i34 = 13;
       break;
      }
     default:
      i34 = 14;
     }
     while (1) if ((i34 | 0) == 10) {
      i36 = HEAPU16[i1 >> 1] | 0;
      i38 = i4 & 255;
      i37 = i8 & 255;
      i35 = i12 & 255;
      HEAP16[i1 >> 1] = i15 | ((((Math_imul(HEAPU8[i6 + ((i36 & i3) >>> i38) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) + i20 | 0) >>> (i5 & 255) << i38 | ((((Math_imul(HEAPU8[i10 + ((i7 & i36) >>> i37) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) + i19 | 0) >>> (i9 & 255) << i37 | ((((Math_imul(HEAPU8[i14 + ((i11 & i36) >>> i35) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) + i18 | 0) >>> (i13 & 255) << i35;
      i1 = i1 + 2 | 0;
      i34 = 11;
      continue;
     } else if ((i34 | 0) == 11) {
      i37 = HEAPU16[i1 >> 1] | 0;
      i35 = i4 & 255;
      i36 = i8 & 255;
      i38 = i12 & 255;
      HEAP16[i1 >> 1] = i15 | ((((Math_imul(HEAPU8[i6 + ((i37 & i3) >>> i35) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) + i20 | 0) >>> (i5 & 255) << i35 | ((((Math_imul(HEAPU8[i10 + ((i7 & i37) >>> i36) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) + i19 | 0) >>> (i9 & 255) << i36 | ((((Math_imul(HEAPU8[i14 + ((i11 & i37) >>> i38) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) + i18 | 0) >>> (i13 & 255) << i38;
      i1 = i1 + 2 | 0;
      i34 = 12;
      continue;
     } else if ((i34 | 0) == 12) {
      i37 = HEAPU16[i1 >> 1] | 0;
      i35 = i4 & 255;
      i36 = i8 & 255;
      i38 = i12 & 255;
      HEAP16[i1 >> 1] = i15 | ((((Math_imul(HEAPU8[i6 + ((i37 & i3) >>> i35) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) + i20 | 0) >>> (i5 & 255) << i35 | ((((Math_imul(HEAPU8[i10 + ((i7 & i37) >>> i36) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) + i19 | 0) >>> (i9 & 255) << i36 | ((((Math_imul(HEAPU8[i14 + ((i11 & i37) >>> i38) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) + i18 | 0) >>> (i13 & 255) << i38;
      i1 = i1 + 2 | 0;
      i34 = 13;
      continue;
     } else if ((i34 | 0) == 13) {
      i37 = HEAPU16[i1 >> 1] | 0;
      i35 = i4 & 255;
      i36 = i8 & 255;
      i38 = i12 & 255;
      HEAP16[i1 >> 1] = i15 | ((((Math_imul(HEAPU8[i6 + ((i37 & i3) >>> i35) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) + i20 | 0) >>> (i5 & 255) << i35 | ((((Math_imul(HEAPU8[i10 + ((i7 & i37) >>> i36) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) + i19 | 0) >>> (i9 & 255) << i36 | ((((Math_imul(HEAPU8[i14 + ((i11 & i37) >>> i38) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) + i18 | 0) >>> (i13 & 255) << i38;
      i1 = i1 + 2 | 0;
      if ((i16 | 0) > 1) {
       i16 = i16 + -1 | 0;
       i34 = 10;
       continue;
      } else {
       i34 = 14;
       continue;
      }
     } else if ((i34 | 0) == 14) if (!i2) {
      i1 = 0;
      break L29;
     } else {
      i1 = i1 + (i32 << 1) | 0;
      continue L29;
     }
    }
    return i1 | 0;
   }
  case 2:
   {
    i2 = HEAP32[i9 + 8 >> 2] | 0;
    i3 = HEAP32[i9 + 12 >> 2] | 0;
    i1 = (HEAP32[i8 + 16 >> 2] | 0) / 2 | 0;
    i32 = i1 - i2 | 0;
    if (!i3) {
     i38 = 0;
     return i38 | 0;
    }
    i1 = Math_imul(HEAP32[i9 + 4 >> 2] | 0, i1) | 0;
    i31 = (i2 + 3 | 0) / 4 | 0;
    i21 = i2 & 3;
    i22 = i7 + 12 | 0;
    i23 = i7 + 32 | 0;
    i24 = i7 + 28 | 0;
    i25 = i7 + 16 | 0;
    i26 = i7 + 33 | 0;
    i27 = i7 + 29 | 0;
    i28 = i7 + 20 | 0;
    i29 = i7 + 34 | 0;
    i30 = i7 + 30 | 0;
    i20 = i4 & 255;
    i19 = i5 & 255;
    i18 = i6 & 255;
    i17 = i7 + 24 | 0;
    i2 = i3;
    i1 = (HEAP32[i8 + 20 >> 2] | 0) + (i1 + (HEAP32[i9 >> 2] | 0) << 1) | 0;
    L48 : while (1) {
     i2 = i2 + -1 | 0;
     switch (i21 | 0) {
     case 0:
      {
       i6 = HEAP8[i24 >> 0] | 0;
       i10 = HEAP8[i27 >> 0] | 0;
       i14 = HEAP8[i30 >> 0] | 0;
       i3 = HEAP32[i22 >> 2] | 0;
       i4 = HEAP8[i23 >> 0] | 0;
       i5 = i6;
       i6 = HEAP32[5992 + ((i6 & 255) << 2) >> 2] | 0;
       i7 = HEAP32[i25 >> 2] | 0;
       i8 = HEAP8[i26 >> 0] | 0;
       i9 = i10;
       i10 = HEAP32[5992 + ((i10 & 255) << 2) >> 2] | 0;
       i11 = HEAP32[i28 >> 2] | 0;
       i12 = HEAP8[i29 >> 0] | 0;
       i13 = i14;
       i14 = HEAP32[5992 + ((i14 & 255) << 2) >> 2] | 0;
       i15 = HEAP32[i17 >> 2] | 0;
       i16 = i31;
       i34 = 22;
       break;
      }
     case 3:
      {
       i6 = HEAP8[i24 >> 0] | 0;
       i10 = HEAP8[i27 >> 0] | 0;
       i14 = HEAP8[i30 >> 0] | 0;
       i3 = HEAP32[i22 >> 2] | 0;
       i4 = HEAP8[i23 >> 0] | 0;
       i5 = i6;
       i6 = HEAP32[5992 + ((i6 & 255) << 2) >> 2] | 0;
       i7 = HEAP32[i25 >> 2] | 0;
       i8 = HEAP8[i26 >> 0] | 0;
       i9 = i10;
       i10 = HEAP32[5992 + ((i10 & 255) << 2) >> 2] | 0;
       i11 = HEAP32[i28 >> 2] | 0;
       i12 = HEAP8[i29 >> 0] | 0;
       i13 = i14;
       i14 = HEAP32[5992 + ((i14 & 255) << 2) >> 2] | 0;
       i15 = HEAP32[i17 >> 2] | 0;
       i16 = i31;
       i34 = 23;
       break;
      }
     case 2:
      {
       i6 = HEAP8[i24 >> 0] | 0;
       i10 = HEAP8[i27 >> 0] | 0;
       i14 = HEAP8[i30 >> 0] | 0;
       i3 = HEAP32[i22 >> 2] | 0;
       i4 = HEAP8[i23 >> 0] | 0;
       i5 = i6;
       i6 = HEAP32[5992 + ((i6 & 255) << 2) >> 2] | 0;
       i7 = HEAP32[i25 >> 2] | 0;
       i8 = HEAP8[i26 >> 0] | 0;
       i9 = i10;
       i10 = HEAP32[5992 + ((i10 & 255) << 2) >> 2] | 0;
       i11 = HEAP32[i28 >> 2] | 0;
       i12 = HEAP8[i29 >> 0] | 0;
       i13 = i14;
       i14 = HEAP32[5992 + ((i14 & 255) << 2) >> 2] | 0;
       i15 = HEAP32[i17 >> 2] | 0;
       i16 = i31;
       i34 = 24;
       break;
      }
     case 1:
      {
       i6 = HEAP8[i24 >> 0] | 0;
       i10 = HEAP8[i27 >> 0] | 0;
       i14 = HEAP8[i30 >> 0] | 0;
       i3 = HEAP32[i22 >> 2] | 0;
       i4 = HEAP8[i23 >> 0] | 0;
       i5 = i6;
       i6 = HEAP32[5992 + ((i6 & 255) << 2) >> 2] | 0;
       i7 = HEAP32[i25 >> 2] | 0;
       i8 = HEAP8[i26 >> 0] | 0;
       i9 = i10;
       i10 = HEAP32[5992 + ((i10 & 255) << 2) >> 2] | 0;
       i11 = HEAP32[i28 >> 2] | 0;
       i12 = HEAP8[i29 >> 0] | 0;
       i13 = i14;
       i14 = HEAP32[5992 + ((i14 & 255) << 2) >> 2] | 0;
       i15 = HEAP32[i17 >> 2] | 0;
       i16 = i31;
       i34 = 25;
       break;
      }
     default:
      i34 = 26;
     }
     while (1) if ((i34 | 0) == 22) {
      i37 = HEAPU16[i1 >> 1] | 0;
      i36 = i4 & 255;
      i33 = i8 & 255;
      i38 = i12 & 255;
      i35 = (HEAPU8[i6 + ((i37 & i3) >>> i36) >> 0] | 0) + i20 | 0;
      i39 = (HEAPU8[i10 + ((i7 & i37) >>> i33) >> 0] | 0) + i19 | 0;
      i37 = (HEAPU8[i14 + ((i11 & i37) >>> i38) >> 0] | 0) + i18 | 0;
      HEAP16[i1 >> 1] = (i39 >>> 0 > 255 ? 255 : i39) >>> (i9 & 255) << i33 | (i35 >>> 0 > 255 ? 255 : i35) >>> (i5 & 255) << i36 | i15 | (i37 >>> 0 > 255 ? 255 : i37) >>> (i13 & 255) << i38;
      i1 = i1 + 2 | 0;
      i34 = 23;
      continue;
     } else if ((i34 | 0) == 23) {
      i38 = HEAPU16[i1 >> 1] | 0;
      i37 = i4 & 255;
      i35 = i8 & 255;
      i39 = i12 & 255;
      i36 = (HEAPU8[i6 + ((i38 & i3) >>> i37) >> 0] | 0) + i20 | 0;
      i33 = (HEAPU8[i10 + ((i7 & i38) >>> i35) >> 0] | 0) + i19 | 0;
      i38 = (HEAPU8[i14 + ((i11 & i38) >>> i39) >> 0] | 0) + i18 | 0;
      HEAP16[i1 >> 1] = (i33 >>> 0 > 255 ? 255 : i33) >>> (i9 & 255) << i35 | (i36 >>> 0 > 255 ? 255 : i36) >>> (i5 & 255) << i37 | i15 | (i38 >>> 0 > 255 ? 255 : i38) >>> (i13 & 255) << i39;
      i1 = i1 + 2 | 0;
      i34 = 24;
      continue;
     } else if ((i34 | 0) == 24) {
      i38 = HEAPU16[i1 >> 1] | 0;
      i37 = i4 & 255;
      i35 = i8 & 255;
      i39 = i12 & 255;
      i36 = (HEAPU8[i6 + ((i38 & i3) >>> i37) >> 0] | 0) + i20 | 0;
      i33 = (HEAPU8[i10 + ((i7 & i38) >>> i35) >> 0] | 0) + i19 | 0;
      i38 = (HEAPU8[i14 + ((i11 & i38) >>> i39) >> 0] | 0) + i18 | 0;
      HEAP16[i1 >> 1] = (i33 >>> 0 > 255 ? 255 : i33) >>> (i9 & 255) << i35 | (i36 >>> 0 > 255 ? 255 : i36) >>> (i5 & 255) << i37 | i15 | (i38 >>> 0 > 255 ? 255 : i38) >>> (i13 & 255) << i39;
      i1 = i1 + 2 | 0;
      i34 = 25;
      continue;
     } else if ((i34 | 0) == 25) {
      i38 = HEAPU16[i1 >> 1] | 0;
      i37 = i4 & 255;
      i35 = i8 & 255;
      i39 = i12 & 255;
      i36 = (HEAPU8[i6 + ((i38 & i3) >>> i37) >> 0] | 0) + i20 | 0;
      i34 = (HEAPU8[i10 + ((i7 & i38) >>> i35) >> 0] | 0) + i19 | 0;
      i38 = (HEAPU8[i14 + ((i11 & i38) >>> i39) >> 0] | 0) + i18 | 0;
      HEAP16[i1 >> 1] = (i34 >>> 0 > 255 ? 255 : i34) >>> (i9 & 255) << i35 | (i36 >>> 0 > 255 ? 255 : i36) >>> (i5 & 255) << i37 | i15 | (i38 >>> 0 > 255 ? 255 : i38) >>> (i13 & 255) << i39;
      i1 = i1 + 2 | 0;
      if ((i16 | 0) > 1) {
       i16 = i16 + -1 | 0;
       i34 = 22;
       continue;
      } else {
       i34 = 26;
       continue;
      }
     } else if ((i34 | 0) == 26) if (!i2) {
      i1 = 0;
      break L48;
     } else {
      i1 = i1 + (i32 << 1) | 0;
      continue L48;
     }
    }
    return i1 | 0;
   }
  case 4:
   {
    i2 = HEAP32[i9 + 8 >> 2] | 0;
    i3 = HEAP32[i9 + 12 >> 2] | 0;
    i1 = (HEAP32[i8 + 16 >> 2] | 0) / 2 | 0;
    i32 = i1 - i2 | 0;
    if (!i3) {
     i39 = 0;
     return i39 | 0;
    }
    i1 = Math_imul(HEAP32[i9 + 4 >> 2] | 0, i1) | 0;
    i31 = (i2 + 3 | 0) / 4 | 0;
    i21 = i2 & 3;
    i22 = i7 + 12 | 0;
    i23 = i7 + 32 | 0;
    i24 = i7 + 28 | 0;
    i25 = i7 + 16 | 0;
    i26 = i7 + 33 | 0;
    i27 = i7 + 29 | 0;
    i28 = i7 + 20 | 0;
    i29 = i7 + 34 | 0;
    i30 = i7 + 30 | 0;
    i20 = i4 & 255;
    i19 = i5 & 255;
    i18 = i6 & 255;
    i17 = i7 + 24 | 0;
    i2 = i3;
    i1 = (HEAP32[i8 + 20 >> 2] | 0) + (i1 + (HEAP32[i9 >> 2] | 0) << 1) | 0;
    L67 : while (1) {
     i2 = i2 + -1 | 0;
     switch (i21 | 0) {
     case 0:
      {
       i6 = HEAP8[i24 >> 0] | 0;
       i10 = HEAP8[i27 >> 0] | 0;
       i14 = HEAP8[i30 >> 0] | 0;
       i3 = HEAP32[i22 >> 2] | 0;
       i4 = HEAP8[i23 >> 0] | 0;
       i5 = i6;
       i6 = HEAP32[5992 + ((i6 & 255) << 2) >> 2] | 0;
       i7 = HEAP32[i25 >> 2] | 0;
       i8 = HEAP8[i26 >> 0] | 0;
       i9 = i10;
       i10 = HEAP32[5992 + ((i10 & 255) << 2) >> 2] | 0;
       i11 = HEAP32[i28 >> 2] | 0;
       i12 = HEAP8[i29 >> 0] | 0;
       i13 = i14;
       i14 = HEAP32[5992 + ((i14 & 255) << 2) >> 2] | 0;
       i15 = HEAP32[i17 >> 2] | 0;
       i16 = i31;
       i34 = 34;
       break;
      }
     case 3:
      {
       i6 = HEAP8[i24 >> 0] | 0;
       i10 = HEAP8[i27 >> 0] | 0;
       i14 = HEAP8[i30 >> 0] | 0;
       i3 = HEAP32[i22 >> 2] | 0;
       i4 = HEAP8[i23 >> 0] | 0;
       i5 = i6;
       i6 = HEAP32[5992 + ((i6 & 255) << 2) >> 2] | 0;
       i7 = HEAP32[i25 >> 2] | 0;
       i8 = HEAP8[i26 >> 0] | 0;
       i9 = i10;
       i10 = HEAP32[5992 + ((i10 & 255) << 2) >> 2] | 0;
       i11 = HEAP32[i28 >> 2] | 0;
       i12 = HEAP8[i29 >> 0] | 0;
       i13 = i14;
       i14 = HEAP32[5992 + ((i14 & 255) << 2) >> 2] | 0;
       i15 = HEAP32[i17 >> 2] | 0;
       i16 = i31;
       i34 = 35;
       break;
      }
     case 2:
      {
       i6 = HEAP8[i24 >> 0] | 0;
       i10 = HEAP8[i27 >> 0] | 0;
       i14 = HEAP8[i30 >> 0] | 0;
       i3 = HEAP32[i22 >> 2] | 0;
       i4 = HEAP8[i23 >> 0] | 0;
       i5 = i6;
       i6 = HEAP32[5992 + ((i6 & 255) << 2) >> 2] | 0;
       i7 = HEAP32[i25 >> 2] | 0;
       i8 = HEAP8[i26 >> 0] | 0;
       i9 = i10;
       i10 = HEAP32[5992 + ((i10 & 255) << 2) >> 2] | 0;
       i11 = HEAP32[i28 >> 2] | 0;
       i12 = HEAP8[i29 >> 0] | 0;
       i13 = i14;
       i14 = HEAP32[5992 + ((i14 & 255) << 2) >> 2] | 0;
       i15 = HEAP32[i17 >> 2] | 0;
       i16 = i31;
       i34 = 36;
       break;
      }
     case 1:
      {
       i6 = HEAP8[i24 >> 0] | 0;
       i10 = HEAP8[i27 >> 0] | 0;
       i14 = HEAP8[i30 >> 0] | 0;
       i3 = HEAP32[i22 >> 2] | 0;
       i4 = HEAP8[i23 >> 0] | 0;
       i5 = i6;
       i6 = HEAP32[5992 + ((i6 & 255) << 2) >> 2] | 0;
       i7 = HEAP32[i25 >> 2] | 0;
       i8 = HEAP8[i26 >> 0] | 0;
       i9 = i10;
       i10 = HEAP32[5992 + ((i10 & 255) << 2) >> 2] | 0;
       i11 = HEAP32[i28 >> 2] | 0;
       i12 = HEAP8[i29 >> 0] | 0;
       i13 = i14;
       i14 = HEAP32[5992 + ((i14 & 255) << 2) >> 2] | 0;
       i15 = HEAP32[i17 >> 2] | 0;
       i16 = i31;
       i34 = 37;
       break;
      }
     default:
      i34 = 38;
     }
     while (1) if ((i34 | 0) == 34) {
      i38 = HEAPU16[i1 >> 1] | 0;
      i37 = i4 & 255;
      i36 = i8 & 255;
      i39 = i12 & 255;
      HEAP16[i1 >> 1] = (((Math_imul(HEAPU8[i10 + ((i7 & i38) >>> i36) >> 0] | 0, i19) | 0) >>> 0) / 255 | 0) >>> (i9 & 255) << i36 | (((Math_imul(HEAPU8[i6 + ((i38 & i3) >>> i37) >> 0] | 0, i20) | 0) >>> 0) / 255 | 0) >>> (i5 & 255) << i37 | i15 | (((Math_imul(HEAPU8[i14 + ((i11 & i38) >>> i39) >> 0] | 0, i18) | 0) >>> 0) / 255 | 0) >>> (i13 & 255) << i39;
      i1 = i1 + 2 | 0;
      i34 = 35;
      continue;
     } else if ((i34 | 0) == 35) {
      i38 = HEAPU16[i1 >> 1] | 0;
      i37 = i4 & 255;
      i36 = i8 & 255;
      i39 = i12 & 255;
      HEAP16[i1 >> 1] = (((Math_imul(HEAPU8[i10 + ((i7 & i38) >>> i36) >> 0] | 0, i19) | 0) >>> 0) / 255 | 0) >>> (i9 & 255) << i36 | (((Math_imul(HEAPU8[i6 + ((i38 & i3) >>> i37) >> 0] | 0, i20) | 0) >>> 0) / 255 | 0) >>> (i5 & 255) << i37 | i15 | (((Math_imul(HEAPU8[i14 + ((i11 & i38) >>> i39) >> 0] | 0, i18) | 0) >>> 0) / 255 | 0) >>> (i13 & 255) << i39;
      i1 = i1 + 2 | 0;
      i34 = 36;
      continue;
     } else if ((i34 | 0) == 36) {
      i38 = HEAPU16[i1 >> 1] | 0;
      i37 = i4 & 255;
      i36 = i8 & 255;
      i39 = i12 & 255;
      HEAP16[i1 >> 1] = (((Math_imul(HEAPU8[i10 + ((i7 & i38) >>> i36) >> 0] | 0, i19) | 0) >>> 0) / 255 | 0) >>> (i9 & 255) << i36 | (((Math_imul(HEAPU8[i6 + ((i38 & i3) >>> i37) >> 0] | 0, i20) | 0) >>> 0) / 255 | 0) >>> (i5 & 255) << i37 | i15 | (((Math_imul(HEAPU8[i14 + ((i11 & i38) >>> i39) >> 0] | 0, i18) | 0) >>> 0) / 255 | 0) >>> (i13 & 255) << i39;
      i1 = i1 + 2 | 0;
      i34 = 37;
      continue;
     } else if ((i34 | 0) == 37) {
      i38 = HEAPU16[i1 >> 1] | 0;
      i37 = i4 & 255;
      i36 = i8 & 255;
      i39 = i12 & 255;
      HEAP16[i1 >> 1] = (((Math_imul(HEAPU8[i10 + ((i7 & i38) >>> i36) >> 0] | 0, i19) | 0) >>> 0) / 255 | 0) >>> (i9 & 255) << i36 | (((Math_imul(HEAPU8[i6 + ((i38 & i3) >>> i37) >> 0] | 0, i20) | 0) >>> 0) / 255 | 0) >>> (i5 & 255) << i37 | i15 | (((Math_imul(HEAPU8[i14 + ((i11 & i38) >>> i39) >> 0] | 0, i18) | 0) >>> 0) / 255 | 0) >>> (i13 & 255) << i39;
      i1 = i1 + 2 | 0;
      if ((i16 | 0) > 1) {
       i16 = i16 + -1 | 0;
       i34 = 34;
       continue;
      } else {
       i34 = 38;
       continue;
      }
     } else if ((i34 | 0) == 38) if (!i2) {
      i1 = 0;
      break L67;
     } else {
      i1 = i1 + (i32 << 1) | 0;
      continue L67;
     }
    }
    return i1 | 0;
   }
  default:
   {
    i2 = HEAP32[i9 + 8 >> 2] | 0;
    i3 = HEAP32[i9 + 12 >> 2] | 0;
    i1 = (HEAP32[i8 + 16 >> 2] | 0) / 2 | 0;
    i23 = i1 - i2 | 0;
    if (!i3) {
     i39 = 0;
     return i39 | 0;
    }
    i1 = Math_imul(HEAP32[i9 + 4 >> 2] | 0, i1) | 0;
    i22 = (i2 + 3 | 0) / 4 | 0;
    i21 = i2 & 3;
    i20 = i4 & 255;
    i19 = i5 & 255;
    i12 = i6 & 255;
    i13 = i7 + 28 | 0;
    i14 = i7 + 32 | 0;
    i15 = i7 + 29 | 0;
    i16 = i7 + 33 | 0;
    i17 = i7 + 30 | 0;
    i18 = i7 + 34 | 0;
    i11 = i7 + 24 | 0;
    i2 = i3;
    i1 = (HEAP32[i8 + 20 >> 2] | 0) + (i1 + (HEAP32[i9 >> 2] | 0) << 1) | 0;
    L10 : while (1) {
     i2 = i2 + -1 | 0;
     switch (i21 | 0) {
     case 0:
      {
       i3 = HEAP8[i13 >> 0] | 0;
       i4 = HEAP8[i14 >> 0] | 0;
       i5 = HEAP8[i15 >> 0] | 0;
       i6 = HEAP8[i16 >> 0] | 0;
       i7 = HEAP8[i17 >> 0] | 0;
       i8 = HEAP8[i18 >> 0] | 0;
       i9 = HEAP32[i11 >> 2] | 0;
       i10 = i22;
       i34 = 46;
       break;
      }
     case 3:
      {
       i3 = HEAP8[i13 >> 0] | 0;
       i4 = HEAP8[i14 >> 0] | 0;
       i5 = HEAP8[i15 >> 0] | 0;
       i6 = HEAP8[i16 >> 0] | 0;
       i7 = HEAP8[i17 >> 0] | 0;
       i8 = HEAP8[i18 >> 0] | 0;
       i9 = HEAP32[i11 >> 2] | 0;
       i10 = i22;
       i34 = 47;
       break;
      }
     case 2:
      {
       i3 = HEAP8[i13 >> 0] | 0;
       i4 = HEAP8[i14 >> 0] | 0;
       i5 = HEAP8[i15 >> 0] | 0;
       i6 = HEAP8[i16 >> 0] | 0;
       i7 = HEAP8[i17 >> 0] | 0;
       i8 = HEAP8[i18 >> 0] | 0;
       i9 = HEAP32[i11 >> 2] | 0;
       i10 = i22;
       i34 = 48;
       break;
      }
     case 1:
      {
       i3 = HEAP8[i13 >> 0] | 0;
       i4 = HEAP8[i14 >> 0] | 0;
       i5 = HEAP8[i15 >> 0] | 0;
       i6 = HEAP8[i16 >> 0] | 0;
       i7 = HEAP8[i17 >> 0] | 0;
       i8 = HEAP8[i18 >> 0] | 0;
       i9 = HEAP32[i11 >> 2] | 0;
       i10 = i22;
       i34 = 49;
       break;
      }
     default:
      i34 = 50;
     }
     while (1) if ((i34 | 0) == 46) {
      HEAP16[i1 >> 1] = i19 >>> (i5 & 255) << (i6 & 255) | i20 >>> (i3 & 255) << (i4 & 255) | i9 | i12 >>> (i7 & 255) << (i8 & 255);
      i1 = i1 + 2 | 0;
      i34 = 47;
      continue;
     } else if ((i34 | 0) == 47) {
      HEAP16[i1 >> 1] = i19 >>> (i5 & 255) << (i6 & 255) | i20 >>> (i3 & 255) << (i4 & 255) | i9 | i12 >>> (i7 & 255) << (i8 & 255);
      i1 = i1 + 2 | 0;
      i34 = 48;
      continue;
     } else if ((i34 | 0) == 48) {
      HEAP16[i1 >> 1] = i19 >>> (i5 & 255) << (i6 & 255) | i20 >>> (i3 & 255) << (i4 & 255) | i9 | i12 >>> (i7 & 255) << (i8 & 255);
      i1 = i1 + 2 | 0;
      i34 = 49;
      continue;
     } else if ((i34 | 0) == 49) {
      HEAP16[i1 >> 1] = i19 >>> (i5 & 255) << (i6 & 255) | i20 >>> (i3 & 255) << (i4 & 255) | i9 | i12 >>> (i7 & 255) << (i8 & 255);
      i1 = i1 + 2 | 0;
      if ((i10 | 0) > 1) {
       i10 = i10 + -1 | 0;
       i34 = 46;
       continue;
      } else {
       i34 = 50;
       continue;
      }
     } else if ((i34 | 0) == 50) if (!i2) {
      i1 = 0;
      break L10;
     } else {
      i1 = i1 + (i23 << 1) | 0;
      continue L10;
     }
    }
    return i1 | 0;
   }
  }
 case 4:
  switch (i2 | 0) {
  case 1:
   {
    i2 = HEAP32[i9 + 8 >> 2] | 0;
    i3 = HEAP32[i9 + 12 >> 2] | 0;
    i1 = (HEAP32[i8 + 16 >> 2] | 0) / 4 | 0;
    i28 = i1 - i2 | 0;
    if (!i3) {
     i39 = 0;
     return i39 | 0;
    }
    i1 = Math_imul(HEAP32[i9 + 4 >> 2] | 0, i1) | 0;
    i27 = (i2 + 3 | 0) / 4 | 0;
    i17 = i2 & 3;
    i18 = i7 + 12 | 0;
    i19 = i7 + 32 | 0;
    i20 = i7 + 28 | 0;
    i21 = i7 + 16 | 0;
    i22 = i7 + 33 | 0;
    i23 = i7 + 29 | 0;
    i24 = i7 + 20 | 0;
    i25 = i7 + 34 | 0;
    i26 = i7 + 30 | 0;
    i16 = i4 & 255;
    i15 = i5 & 255;
    i14 = i6 & 255;
    i13 = i7 + 24 | 0;
    i2 = i3;
    i1 = (HEAP32[i8 + 20 >> 2] | 0) + (i1 + (HEAP32[i9 >> 2] | 0) << 2) | 0;
    L107 : while (1) {
     i2 = i2 + -1 | 0;
     switch (i17 | 0) {
     case 0:
      {
       i5 = HEAP8[i20 >> 0] | 0;
       i8 = HEAP8[i23 >> 0] | 0;
       i11 = HEAP8[i26 >> 0] | 0;
       i3 = HEAP8[i19 >> 0] | 0;
       i4 = i5;
       i5 = HEAP32[5992 + ((i5 & 255) << 2) >> 2] | 0;
       i6 = HEAP8[i22 >> 0] | 0;
       i7 = i8;
       i8 = HEAP32[5992 + ((i8 & 255) << 2) >> 2] | 0;
       i9 = HEAP8[i25 >> 0] | 0;
       i10 = i11;
       i11 = HEAP32[5992 + ((i11 & 255) << 2) >> 2] | 0;
       i12 = i27;
       i34 = 59;
       break;
      }
     case 3:
      {
       i5 = HEAP8[i20 >> 0] | 0;
       i8 = HEAP8[i23 >> 0] | 0;
       i11 = HEAP8[i26 >> 0] | 0;
       i7 = i8;
       i8 = HEAP32[5992 + ((i8 & 255) << 2) >> 2] | 0;
       i9 = HEAP8[i25 >> 0] | 0;
       i10 = i11;
       i11 = HEAP32[5992 + ((i11 & 255) << 2) >> 2] | 0;
       i3 = HEAP8[i19 >> 0] | 0;
       i4 = i5;
       i5 = HEAP32[5992 + ((i5 & 255) << 2) >> 2] | 0;
       i6 = HEAP8[i22 >> 0] | 0;
       i12 = i27;
       i34 = 60;
       break;
      }
     case 2:
      {
       i5 = HEAP8[i20 >> 0] | 0;
       i8 = HEAP8[i23 >> 0] | 0;
       i11 = HEAP8[i26 >> 0] | 0;
       i3 = HEAP8[i19 >> 0] | 0;
       i4 = i5;
       i5 = HEAP32[5992 + ((i5 & 255) << 2) >> 2] | 0;
       i6 = HEAP8[i22 >> 0] | 0;
       i7 = i8;
       i8 = HEAP32[5992 + ((i8 & 255) << 2) >> 2] | 0;
       i9 = HEAP8[i25 >> 0] | 0;
       i10 = i11;
       i11 = HEAP32[5992 + ((i11 & 255) << 2) >> 2] | 0;
       i12 = i27;
       i34 = 61;
       break;
      }
     case 1:
      {
       i5 = HEAP8[i20 >> 0] | 0;
       i8 = HEAP8[i23 >> 0] | 0;
       i11 = HEAP8[i26 >> 0] | 0;
       i3 = HEAP8[i19 >> 0] | 0;
       i4 = i5;
       i5 = HEAP32[5992 + ((i5 & 255) << 2) >> 2] | 0;
       i6 = HEAP8[i22 >> 0] | 0;
       i7 = i8;
       i8 = HEAP32[5992 + ((i8 & 255) << 2) >> 2] | 0;
       i9 = HEAP8[i25 >> 0] | 0;
       i10 = i11;
       i11 = HEAP32[5992 + ((i11 & 255) << 2) >> 2] | 0;
       i12 = i27;
       i34 = 62;
       break;
      }
     default:
      i34 = 63;
     }
     while (1) if ((i34 | 0) == 59) {
      i36 = HEAP32[i1 >> 2] | 0;
      i37 = i3 & 255;
      i38 = i6 & 255;
      i39 = i9 & 255;
      i37 = ((((Math_imul(HEAPU8[i5 + ((HEAP32[i18 >> 2] & i36) >>> i37) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) + i16 | 0) >>> (i4 & 255) << i37;
      i38 = ((((Math_imul(HEAPU8[i8 + ((HEAP32[i21 >> 2] & i36) >>> i38) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) + i15 | 0) >>> (i7 & 255) << i38;
      i39 = ((((Math_imul(HEAPU8[i11 + ((HEAP32[i24 >> 2] & i36) >>> i39) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) + i14 | 0) >>> (i10 & 255) << i39;
      HEAP32[i1 >> 2] = HEAP32[i13 >> 2] | i37 | i38 | i39;
      i1 = i1 + 4 | 0;
      i34 = 60;
      continue;
     } else if ((i34 | 0) == 60) {
      i36 = HEAP32[i1 >> 2] | 0;
      i37 = i3 & 255;
      i38 = i6 & 255;
      i39 = i9 & 255;
      i37 = ((((Math_imul(HEAPU8[i5 + ((HEAP32[i18 >> 2] & i36) >>> i37) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) + i16 | 0) >>> (i4 & 255) << i37;
      i38 = ((((Math_imul(HEAPU8[i8 + ((HEAP32[i21 >> 2] & i36) >>> i38) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) + i15 | 0) >>> (i7 & 255) << i38;
      i39 = ((((Math_imul(HEAPU8[i11 + ((HEAP32[i24 >> 2] & i36) >>> i39) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) + i14 | 0) >>> (i10 & 255) << i39;
      HEAP32[i1 >> 2] = HEAP32[i13 >> 2] | i37 | i38 | i39;
      i1 = i1 + 4 | 0;
      i34 = 61;
      continue;
     } else if ((i34 | 0) == 61) {
      i36 = HEAP32[i1 >> 2] | 0;
      i37 = i3 & 255;
      i38 = i6 & 255;
      i39 = i9 & 255;
      i37 = ((((Math_imul(HEAPU8[i5 + ((HEAP32[i18 >> 2] & i36) >>> i37) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) + i16 | 0) >>> (i4 & 255) << i37;
      i38 = ((((Math_imul(HEAPU8[i8 + ((HEAP32[i21 >> 2] & i36) >>> i38) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) + i15 | 0) >>> (i7 & 255) << i38;
      i39 = ((((Math_imul(HEAPU8[i11 + ((HEAP32[i24 >> 2] & i36) >>> i39) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) + i14 | 0) >>> (i10 & 255) << i39;
      HEAP32[i1 >> 2] = HEAP32[i13 >> 2] | i37 | i38 | i39;
      i1 = i1 + 4 | 0;
      i34 = 62;
      continue;
     } else if ((i34 | 0) == 62) {
      i36 = HEAP32[i1 >> 2] | 0;
      i37 = i3 & 255;
      i38 = i6 & 255;
      i39 = i9 & 255;
      i37 = ((((Math_imul(HEAPU8[i5 + ((HEAP32[i18 >> 2] & i36) >>> i37) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) + i16 | 0) >>> (i4 & 255) << i37;
      i38 = ((((Math_imul(HEAPU8[i8 + ((HEAP32[i21 >> 2] & i36) >>> i38) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) + i15 | 0) >>> (i7 & 255) << i38;
      i39 = ((((Math_imul(HEAPU8[i11 + ((HEAP32[i24 >> 2] & i36) >>> i39) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) + i14 | 0) >>> (i10 & 255) << i39;
      HEAP32[i1 >> 2] = HEAP32[i13 >> 2] | i37 | i38 | i39;
      i1 = i1 + 4 | 0;
      if ((i12 | 0) > 1) {
       i12 = i12 + -1 | 0;
       i34 = 59;
       continue;
      } else {
       i34 = 63;
       continue;
      }
     } else if ((i34 | 0) == 63) if (!i2) {
      i1 = 0;
      break L107;
     } else {
      i1 = i1 + (i28 << 2) | 0;
      continue L107;
     }
    }
    return i1 | 0;
   }
  case 2:
   {
    i2 = HEAP32[i9 + 8 >> 2] | 0;
    i3 = HEAP32[i9 + 12 >> 2] | 0;
    i1 = (HEAP32[i8 + 16 >> 2] | 0) / 4 | 0;
    i28 = i1 - i2 | 0;
    if (!i3) {
     i39 = 0;
     return i39 | 0;
    }
    i1 = Math_imul(HEAP32[i9 + 4 >> 2] | 0, i1) | 0;
    i27 = (i2 + 3 | 0) / 4 | 0;
    i17 = i2 & 3;
    i18 = i7 + 12 | 0;
    i19 = i7 + 32 | 0;
    i20 = i7 + 28 | 0;
    i21 = i7 + 16 | 0;
    i22 = i7 + 33 | 0;
    i23 = i7 + 29 | 0;
    i24 = i7 + 20 | 0;
    i25 = i7 + 34 | 0;
    i26 = i7 + 30 | 0;
    i16 = i4 & 255;
    i15 = i5 & 255;
    i14 = i6 & 255;
    i13 = i7 + 24 | 0;
    i2 = i3;
    i1 = (HEAP32[i8 + 20 >> 2] | 0) + (i1 + (HEAP32[i9 >> 2] | 0) << 2) | 0;
    L126 : while (1) {
     i2 = i2 + -1 | 0;
     switch (i17 | 0) {
     case 0:
      {
       i5 = HEAP8[i20 >> 0] | 0;
       i8 = HEAP8[i23 >> 0] | 0;
       i11 = HEAP8[i26 >> 0] | 0;
       i3 = HEAP8[i19 >> 0] | 0;
       i4 = i5;
       i5 = HEAP32[5992 + ((i5 & 255) << 2) >> 2] | 0;
       i6 = HEAP8[i22 >> 0] | 0;
       i7 = i8;
       i8 = HEAP32[5992 + ((i8 & 255) << 2) >> 2] | 0;
       i9 = HEAP8[i25 >> 0] | 0;
       i10 = i11;
       i11 = HEAP32[5992 + ((i11 & 255) << 2) >> 2] | 0;
       i12 = i27;
       i34 = 71;
       break;
      }
     case 3:
      {
       i5 = HEAP8[i20 >> 0] | 0;
       i8 = HEAP8[i23 >> 0] | 0;
       i11 = HEAP8[i26 >> 0] | 0;
       i3 = HEAP8[i19 >> 0] | 0;
       i4 = i5;
       i5 = HEAP32[5992 + ((i5 & 255) << 2) >> 2] | 0;
       i6 = HEAP8[i22 >> 0] | 0;
       i7 = i8;
       i8 = HEAP32[5992 + ((i8 & 255) << 2) >> 2] | 0;
       i9 = HEAP8[i25 >> 0] | 0;
       i10 = i11;
       i11 = HEAP32[5992 + ((i11 & 255) << 2) >> 2] | 0;
       i12 = i27;
       i34 = 72;
       break;
      }
     case 2:
      {
       i5 = HEAP8[i20 >> 0] | 0;
       i8 = HEAP8[i23 >> 0] | 0;
       i11 = HEAP8[i26 >> 0] | 0;
       i3 = HEAP8[i19 >> 0] | 0;
       i4 = i5;
       i5 = HEAP32[5992 + ((i5 & 255) << 2) >> 2] | 0;
       i6 = HEAP8[i22 >> 0] | 0;
       i7 = i8;
       i8 = HEAP32[5992 + ((i8 & 255) << 2) >> 2] | 0;
       i9 = HEAP8[i25 >> 0] | 0;
       i10 = i11;
       i11 = HEAP32[5992 + ((i11 & 255) << 2) >> 2] | 0;
       i12 = i27;
       i34 = 73;
       break;
      }
     case 1:
      {
       i5 = HEAP8[i20 >> 0] | 0;
       i8 = HEAP8[i23 >> 0] | 0;
       i11 = HEAP8[i26 >> 0] | 0;
       i3 = HEAP8[i19 >> 0] | 0;
       i4 = i5;
       i5 = HEAP32[5992 + ((i5 & 255) << 2) >> 2] | 0;
       i6 = HEAP8[i22 >> 0] | 0;
       i7 = i8;
       i8 = HEAP32[5992 + ((i8 & 255) << 2) >> 2] | 0;
       i9 = HEAP8[i25 >> 0] | 0;
       i10 = i11;
       i11 = HEAP32[5992 + ((i11 & 255) << 2) >> 2] | 0;
       i12 = i27;
       i34 = 74;
       break;
      }
     default:
      i34 = 75;
     }
     while (1) if ((i34 | 0) == 71) {
      i38 = HEAP32[i1 >> 2] | 0;
      i37 = i3 & 255;
      i35 = i6 & 255;
      i39 = i9 & 255;
      i36 = (HEAPU8[i5 + ((HEAP32[i18 >> 2] & i38) >>> i37) >> 0] | 0) + i16 | 0;
      i33 = (HEAPU8[i8 + ((HEAP32[i21 >> 2] & i38) >>> i35) >> 0] | 0) + i15 | 0;
      i38 = (HEAPU8[i11 + ((HEAP32[i24 >> 2] & i38) >>> i39) >> 0] | 0) + i14 | 0;
      HEAP32[i1 >> 2] = (i33 >>> 0 > 255 ? 255 : i33) >>> (i7 & 255) << i35 | (i36 >>> 0 > 255 ? 255 : i36) >>> (i4 & 255) << i37 | HEAP32[i13 >> 2] | (i38 >>> 0 > 255 ? 255 : i38) >>> (i10 & 255) << i39;
      i1 = i1 + 4 | 0;
      i34 = 72;
      continue;
     } else if ((i34 | 0) == 72) {
      i38 = HEAP32[i1 >> 2] | 0;
      i37 = i3 & 255;
      i35 = i6 & 255;
      i39 = i9 & 255;
      i36 = (HEAPU8[i5 + ((HEAP32[i18 >> 2] & i38) >>> i37) >> 0] | 0) + i16 | 0;
      i33 = (HEAPU8[i8 + ((HEAP32[i21 >> 2] & i38) >>> i35) >> 0] | 0) + i15 | 0;
      i38 = (HEAPU8[i11 + ((HEAP32[i24 >> 2] & i38) >>> i39) >> 0] | 0) + i14 | 0;
      HEAP32[i1 >> 2] = (i33 >>> 0 > 255 ? 255 : i33) >>> (i7 & 255) << i35 | (i36 >>> 0 > 255 ? 255 : i36) >>> (i4 & 255) << i37 | HEAP32[i13 >> 2] | (i38 >>> 0 > 255 ? 255 : i38) >>> (i10 & 255) << i39;
      i1 = i1 + 4 | 0;
      i34 = 73;
      continue;
     } else if ((i34 | 0) == 73) {
      i38 = HEAP32[i1 >> 2] | 0;
      i37 = i3 & 255;
      i35 = i6 & 255;
      i39 = i9 & 255;
      i36 = (HEAPU8[i5 + ((HEAP32[i18 >> 2] & i38) >>> i37) >> 0] | 0) + i16 | 0;
      i33 = (HEAPU8[i8 + ((HEAP32[i21 >> 2] & i38) >>> i35) >> 0] | 0) + i15 | 0;
      i38 = (HEAPU8[i11 + ((HEAP32[i24 >> 2] & i38) >>> i39) >> 0] | 0) + i14 | 0;
      HEAP32[i1 >> 2] = (i33 >>> 0 > 255 ? 255 : i33) >>> (i7 & 255) << i35 | (i36 >>> 0 > 255 ? 255 : i36) >>> (i4 & 255) << i37 | HEAP32[i13 >> 2] | (i38 >>> 0 > 255 ? 255 : i38) >>> (i10 & 255) << i39;
      i1 = i1 + 4 | 0;
      i34 = 74;
      continue;
     } else if ((i34 | 0) == 74) {
      i38 = HEAP32[i1 >> 2] | 0;
      i37 = i3 & 255;
      i35 = i6 & 255;
      i39 = i9 & 255;
      i36 = (HEAPU8[i5 + ((HEAP32[i18 >> 2] & i38) >>> i37) >> 0] | 0) + i16 | 0;
      i34 = (HEAPU8[i8 + ((HEAP32[i21 >> 2] & i38) >>> i35) >> 0] | 0) + i15 | 0;
      i38 = (HEAPU8[i11 + ((HEAP32[i24 >> 2] & i38) >>> i39) >> 0] | 0) + i14 | 0;
      HEAP32[i1 >> 2] = (i34 >>> 0 > 255 ? 255 : i34) >>> (i7 & 255) << i35 | (i36 >>> 0 > 255 ? 255 : i36) >>> (i4 & 255) << i37 | HEAP32[i13 >> 2] | (i38 >>> 0 > 255 ? 255 : i38) >>> (i10 & 255) << i39;
      i1 = i1 + 4 | 0;
      if ((i12 | 0) > 1) {
       i12 = i12 + -1 | 0;
       i34 = 71;
       continue;
      } else {
       i34 = 75;
       continue;
      }
     } else if ((i34 | 0) == 75) if (!i2) {
      i1 = 0;
      break L126;
     } else {
      i1 = i1 + (i28 << 2) | 0;
      continue L126;
     }
    }
    return i1 | 0;
   }
  case 4:
   {
    i2 = HEAP32[i9 + 8 >> 2] | 0;
    i3 = HEAP32[i9 + 12 >> 2] | 0;
    i1 = (HEAP32[i8 + 16 >> 2] | 0) / 4 | 0;
    i28 = i1 - i2 | 0;
    if (!i3) {
     i39 = 0;
     return i39 | 0;
    }
    i1 = Math_imul(HEAP32[i9 + 4 >> 2] | 0, i1) | 0;
    i27 = (i2 + 3 | 0) / 4 | 0;
    i17 = i2 & 3;
    i18 = i7 + 12 | 0;
    i19 = i7 + 32 | 0;
    i20 = i7 + 28 | 0;
    i21 = i7 + 16 | 0;
    i22 = i7 + 33 | 0;
    i23 = i7 + 29 | 0;
    i24 = i7 + 20 | 0;
    i25 = i7 + 34 | 0;
    i26 = i7 + 30 | 0;
    i16 = i4 & 255;
    i15 = i5 & 255;
    i14 = i6 & 255;
    i13 = i7 + 24 | 0;
    i2 = i3;
    i1 = (HEAP32[i8 + 20 >> 2] | 0) + (i1 + (HEAP32[i9 >> 2] | 0) << 2) | 0;
    L145 : while (1) {
     i2 = i2 + -1 | 0;
     switch (i17 | 0) {
     case 0:
      {
       i5 = HEAP8[i20 >> 0] | 0;
       i8 = HEAP8[i23 >> 0] | 0;
       i11 = HEAP8[i26 >> 0] | 0;
       i3 = HEAP8[i19 >> 0] | 0;
       i4 = i5;
       i5 = HEAP32[5992 + ((i5 & 255) << 2) >> 2] | 0;
       i6 = HEAP8[i22 >> 0] | 0;
       i7 = i8;
       i8 = HEAP32[5992 + ((i8 & 255) << 2) >> 2] | 0;
       i9 = HEAP8[i25 >> 0] | 0;
       i10 = i11;
       i11 = HEAP32[5992 + ((i11 & 255) << 2) >> 2] | 0;
       i12 = i27;
       i34 = 83;
       break;
      }
     case 3:
      {
       i5 = HEAP8[i20 >> 0] | 0;
       i8 = HEAP8[i23 >> 0] | 0;
       i11 = HEAP8[i26 >> 0] | 0;
       i3 = HEAP8[i19 >> 0] | 0;
       i4 = i5;
       i5 = HEAP32[5992 + ((i5 & 255) << 2) >> 2] | 0;
       i6 = HEAP8[i22 >> 0] | 0;
       i7 = i8;
       i8 = HEAP32[5992 + ((i8 & 255) << 2) >> 2] | 0;
       i9 = HEAP8[i25 >> 0] | 0;
       i10 = i11;
       i11 = HEAP32[5992 + ((i11 & 255) << 2) >> 2] | 0;
       i12 = i27;
       i34 = 84;
       break;
      }
     case 2:
      {
       i5 = HEAP8[i20 >> 0] | 0;
       i8 = HEAP8[i23 >> 0] | 0;
       i11 = HEAP8[i26 >> 0] | 0;
       i3 = HEAP8[i19 >> 0] | 0;
       i4 = i5;
       i5 = HEAP32[5992 + ((i5 & 255) << 2) >> 2] | 0;
       i6 = HEAP8[i22 >> 0] | 0;
       i7 = i8;
       i8 = HEAP32[5992 + ((i8 & 255) << 2) >> 2] | 0;
       i9 = HEAP8[i25 >> 0] | 0;
       i10 = i11;
       i11 = HEAP32[5992 + ((i11 & 255) << 2) >> 2] | 0;
       i12 = i27;
       i34 = 85;
       break;
      }
     case 1:
      {
       i5 = HEAP8[i20 >> 0] | 0;
       i8 = HEAP8[i23 >> 0] | 0;
       i11 = HEAP8[i26 >> 0] | 0;
       i3 = HEAP8[i19 >> 0] | 0;
       i4 = i5;
       i5 = HEAP32[5992 + ((i5 & 255) << 2) >> 2] | 0;
       i6 = HEAP8[i22 >> 0] | 0;
       i7 = i8;
       i8 = HEAP32[5992 + ((i8 & 255) << 2) >> 2] | 0;
       i9 = HEAP8[i25 >> 0] | 0;
       i10 = i11;
       i11 = HEAP32[5992 + ((i11 & 255) << 2) >> 2] | 0;
       i12 = i27;
       i34 = 86;
       break;
      }
     default:
      i34 = 87;
     }
     while (1) if ((i34 | 0) == 83) {
      i37 = HEAP32[i1 >> 2] | 0;
      i38 = i3 & 255;
      i36 = i6 & 255;
      i39 = i9 & 255;
      i38 = (((Math_imul(HEAPU8[i8 + ((HEAP32[i21 >> 2] & i37) >>> i36) >> 0] | 0, i15) | 0) >>> 0) / 255 | 0) >>> (i7 & 255) << i36 | (((Math_imul(HEAPU8[i5 + ((HEAP32[i18 >> 2] & i37) >>> i38) >> 0] | 0, i16) | 0) >>> 0) / 255 | 0) >>> (i4 & 255) << i38;
      i39 = (((Math_imul(HEAPU8[i11 + ((HEAP32[i24 >> 2] & i37) >>> i39) >> 0] | 0, i14) | 0) >>> 0) / 255 | 0) >>> (i10 & 255) << i39;
      HEAP32[i1 >> 2] = i38 | HEAP32[i13 >> 2] | i39;
      i1 = i1 + 4 | 0;
      i34 = 84;
      continue;
     } else if ((i34 | 0) == 84) {
      i37 = HEAP32[i1 >> 2] | 0;
      i38 = i3 & 255;
      i36 = i6 & 255;
      i39 = i9 & 255;
      i38 = (((Math_imul(HEAPU8[i8 + ((HEAP32[i21 >> 2] & i37) >>> i36) >> 0] | 0, i15) | 0) >>> 0) / 255 | 0) >>> (i7 & 255) << i36 | (((Math_imul(HEAPU8[i5 + ((HEAP32[i18 >> 2] & i37) >>> i38) >> 0] | 0, i16) | 0) >>> 0) / 255 | 0) >>> (i4 & 255) << i38;
      i39 = (((Math_imul(HEAPU8[i11 + ((HEAP32[i24 >> 2] & i37) >>> i39) >> 0] | 0, i14) | 0) >>> 0) / 255 | 0) >>> (i10 & 255) << i39;
      HEAP32[i1 >> 2] = i38 | HEAP32[i13 >> 2] | i39;
      i1 = i1 + 4 | 0;
      i34 = 85;
      continue;
     } else if ((i34 | 0) == 85) {
      i37 = HEAP32[i1 >> 2] | 0;
      i38 = i3 & 255;
      i36 = i6 & 255;
      i39 = i9 & 255;
      i38 = (((Math_imul(HEAPU8[i8 + ((HEAP32[i21 >> 2] & i37) >>> i36) >> 0] | 0, i15) | 0) >>> 0) / 255 | 0) >>> (i7 & 255) << i36 | (((Math_imul(HEAPU8[i5 + ((HEAP32[i18 >> 2] & i37) >>> i38) >> 0] | 0, i16) | 0) >>> 0) / 255 | 0) >>> (i4 & 255) << i38;
      i39 = (((Math_imul(HEAPU8[i11 + ((HEAP32[i24 >> 2] & i37) >>> i39) >> 0] | 0, i14) | 0) >>> 0) / 255 | 0) >>> (i10 & 255) << i39;
      HEAP32[i1 >> 2] = i38 | HEAP32[i13 >> 2] | i39;
      i1 = i1 + 4 | 0;
      i34 = 86;
      continue;
     } else if ((i34 | 0) == 86) {
      i37 = HEAP32[i1 >> 2] | 0;
      i38 = i3 & 255;
      i36 = i6 & 255;
      i39 = i9 & 255;
      i38 = (((Math_imul(HEAPU8[i8 + ((HEAP32[i21 >> 2] & i37) >>> i36) >> 0] | 0, i15) | 0) >>> 0) / 255 | 0) >>> (i7 & 255) << i36 | (((Math_imul(HEAPU8[i5 + ((HEAP32[i18 >> 2] & i37) >>> i38) >> 0] | 0, i16) | 0) >>> 0) / 255 | 0) >>> (i4 & 255) << i38;
      i39 = (((Math_imul(HEAPU8[i11 + ((HEAP32[i24 >> 2] & i37) >>> i39) >> 0] | 0, i14) | 0) >>> 0) / 255 | 0) >>> (i10 & 255) << i39;
      HEAP32[i1 >> 2] = i38 | HEAP32[i13 >> 2] | i39;
      i1 = i1 + 4 | 0;
      if ((i12 | 0) > 1) {
       i12 = i12 + -1 | 0;
       i34 = 83;
       continue;
      } else {
       i34 = 87;
       continue;
      }
     } else if ((i34 | 0) == 87) if (!i2) {
      i1 = 0;
      break L145;
     } else {
      i1 = i1 + (i28 << 2) | 0;
      continue L145;
     }
    }
    return i1 | 0;
   }
  default:
   {
    i2 = HEAP32[i9 + 8 >> 2] | 0;
    i3 = HEAP32[i9 + 12 >> 2] | 0;
    i1 = (HEAP32[i8 + 16 >> 2] | 0) / 4 | 0;
    i22 = i1 - i2 | 0;
    if (!i3) {
     i39 = 0;
     return i39 | 0;
    }
    i1 = Math_imul(HEAP32[i9 + 4 >> 2] | 0, i1) | 0;
    i21 = (i2 + 3 | 0) / 4 | 0;
    i20 = i2 & 3;
    i19 = i4 & 255;
    i18 = i5 & 255;
    i11 = i6 & 255;
    i12 = i7 + 28 | 0;
    i13 = i7 + 32 | 0;
    i14 = i7 + 29 | 0;
    i15 = i7 + 33 | 0;
    i16 = i7 + 30 | 0;
    i17 = i7 + 34 | 0;
    i10 = i7 + 24 | 0;
    i2 = i3;
    i1 = (HEAP32[i8 + 20 >> 2] | 0) + (i1 + (HEAP32[i9 >> 2] | 0) << 2) | 0;
    L88 : while (1) {
     i2 = i2 + -1 | 0;
     switch (i20 | 0) {
     case 0:
      {
       i3 = HEAP8[i12 >> 0] | 0;
       i4 = HEAP8[i13 >> 0] | 0;
       i5 = HEAP8[i14 >> 0] | 0;
       i6 = HEAP8[i15 >> 0] | 0;
       i7 = HEAP8[i16 >> 0] | 0;
       i8 = HEAP8[i17 >> 0] | 0;
       i9 = i21;
       i34 = 95;
       break;
      }
     case 3:
      {
       i3 = HEAP8[i12 >> 0] | 0;
       i4 = HEAP8[i13 >> 0] | 0;
       i5 = HEAP8[i14 >> 0] | 0;
       i6 = HEAP8[i15 >> 0] | 0;
       i7 = HEAP8[i16 >> 0] | 0;
       i8 = HEAP8[i17 >> 0] | 0;
       i9 = i21;
       i34 = 96;
       break;
      }
     case 2:
      {
       i3 = HEAP8[i12 >> 0] | 0;
       i4 = HEAP8[i13 >> 0] | 0;
       i5 = HEAP8[i14 >> 0] | 0;
       i6 = HEAP8[i15 >> 0] | 0;
       i7 = HEAP8[i16 >> 0] | 0;
       i8 = HEAP8[i17 >> 0] | 0;
       i9 = i21;
       i34 = 97;
       break;
      }
     case 1:
      {
       i3 = HEAP8[i12 >> 0] | 0;
       i4 = HEAP8[i13 >> 0] | 0;
       i5 = HEAP8[i14 >> 0] | 0;
       i6 = HEAP8[i15 >> 0] | 0;
       i7 = HEAP8[i16 >> 0] | 0;
       i8 = HEAP8[i17 >> 0] | 0;
       i9 = i21;
       i34 = 98;
       break;
      }
     default:
      i34 = 99;
     }
     while (1) if ((i34 | 0) == 95) {
      HEAP32[i1 >> 2] = i18 >>> (i5 & 255) << (i6 & 255) | i19 >>> (i3 & 255) << (i4 & 255) | HEAP32[i10 >> 2] | i11 >>> (i7 & 255) << (i8 & 255);
      i1 = i1 + 4 | 0;
      i34 = 96;
      continue;
     } else if ((i34 | 0) == 96) {
      HEAP32[i1 >> 2] = i18 >>> (i5 & 255) << (i6 & 255) | i19 >>> (i3 & 255) << (i4 & 255) | HEAP32[i10 >> 2] | i11 >>> (i7 & 255) << (i8 & 255);
      i1 = i1 + 4 | 0;
      i34 = 97;
      continue;
     } else if ((i34 | 0) == 97) {
      HEAP32[i1 >> 2] = i18 >>> (i5 & 255) << (i6 & 255) | i19 >>> (i3 & 255) << (i4 & 255) | HEAP32[i10 >> 2] | i11 >>> (i7 & 255) << (i8 & 255);
      i1 = i1 + 4 | 0;
      i34 = 98;
      continue;
     } else if ((i34 | 0) == 98) {
      HEAP32[i1 >> 2] = i18 >>> (i5 & 255) << (i6 & 255) | i19 >>> (i3 & 255) << (i4 & 255) | HEAP32[i10 >> 2] | i11 >>> (i7 & 255) << (i8 & 255);
      i1 = i1 + 4 | 0;
      if ((i9 | 0) > 1) {
       i9 = i9 + -1 | 0;
       i34 = 95;
       continue;
      } else {
       i34 = 99;
       continue;
      }
     } else if ((i34 | 0) == 99) if (!i2) {
      i1 = 0;
      break L88;
     } else {
      i1 = i1 + (i22 << 2) | 0;
      continue L88;
     }
    }
    return i1 | 0;
   }
  }
 default:
  {
   i39 = _SDL_Error(4) | 0;
   return i39 | 0;
  }
 }
 return 0;
}

function _BlitNto1Key(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i2 = HEAP32[i1 + 24 >> 2] | 0;
 i3 = HEAP32[i1 + 28 >> 2] | 0;
 i6 = HEAP32[i1 >> 2] | 0;
 i25 = HEAP32[i1 + 16 >> 2] | 0;
 i5 = HEAP32[i1 + 20 >> 2] | 0;
 i22 = HEAP32[i1 + 36 >> 2] | 0;
 i4 = HEAP32[i1 + 40 >> 2] | 0;
 i20 = HEAP32[i1 + 48 >> 2] | 0;
 i23 = ~HEAP32[i4 + 24 >> 2];
 i24 = HEAPU8[i4 + 9 >> 0] | 0;
 i21 = HEAP32[i1 + 56 >> 2] & i23;
 i1 = (i3 | 0) == 0;
 if (!i20) {
  if (i1) return;
  i19 = (i2 + 7 | 0) / 8 | 0;
  i10 = i2 & 7;
  i11 = i4 + 12 | 0;
  i12 = i4 + 32 | 0;
  i13 = i4 + 28 | 0;
  i14 = i4 + 16 | 0;
  i15 = i4 + 33 | 0;
  i16 = i4 + 29 | 0;
  i17 = i4 + 20 | 0;
  i18 = i4 + 34 | 0;
  i9 = i4 + 30 | 0;
  i1 = i5;
  i2 = i6;
  L6 : while (1) {
   i3 = i3 + -1 | 0;
   switch (i10 | 0) {
   case 0:
    {
     i8 = i19;
     i4 = 7;
     break;
    }
   case 7:
    {
     i8 = i19;
     i4 = 15;
     break;
    }
   case 6:
    {
     i8 = i19;
     i4 = 23;
     break;
    }
   case 5:
    {
     i8 = i19;
     i4 = 31;
     break;
    }
   case 4:
    {
     i8 = i19;
     i4 = 39;
     break;
    }
   case 3:
    {
     i8 = i19;
     i4 = 47;
     break;
    }
   case 2:
    {
     i8 = i19;
     i4 = 55;
     break;
    }
   case 1:
    {
     i8 = i19;
     i4 = 63;
     break;
    }
   default:
    i4 = 71;
   }
   while (1) if ((i4 | 0) == 7) {
    switch (i24 | 0) {
    case 1:
     {
      i7 = HEAPU8[i2 >> 0] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i7 = HEAPU16[i2 >> 1] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i7 = HEAPU8[i2 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i7 = HEAP32[i2 >> 2] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
      i7 = 0;
     }
    }
    if ((i4 & i23 | 0) != (i21 | 0)) HEAP8[i1 >> 0] = i6 >>> 5 << 2 | i7 & 224 | i5 >>> 6;
    i1 = i1 + 1 | 0;
    i2 = i2 + i24 | 0;
    i4 = 15;
    continue;
   } else if ((i4 | 0) == 15) {
    switch (i24 | 0) {
    case 1:
     {
      i7 = HEAPU8[i2 >> 0] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i7 = HEAPU16[i2 >> 1] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i7 = HEAPU8[i2 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i7 = HEAP32[i2 >> 2] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
      i7 = 0;
     }
    }
    if ((i4 & i23 | 0) != (i21 | 0)) HEAP8[i1 >> 0] = i6 >>> 5 << 2 | i7 & 224 | i5 >>> 6;
    i1 = i1 + 1 | 0;
    i2 = i2 + i24 | 0;
    i4 = 23;
    continue;
   } else if ((i4 | 0) == 23) {
    switch (i24 | 0) {
    case 1:
     {
      i7 = HEAPU8[i2 >> 0] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i7 = HEAPU16[i2 >> 1] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i7 = HEAPU8[i2 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i7 = HEAP32[i2 >> 2] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
      i7 = 0;
     }
    }
    if ((i4 & i23 | 0) != (i21 | 0)) HEAP8[i1 >> 0] = i6 >>> 5 << 2 | i7 & 224 | i5 >>> 6;
    i1 = i1 + 1 | 0;
    i2 = i2 + i24 | 0;
    i4 = 31;
    continue;
   } else if ((i4 | 0) == 31) {
    switch (i24 | 0) {
    case 1:
     {
      i7 = HEAPU8[i2 >> 0] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i7 = HEAPU16[i2 >> 1] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i7 = HEAPU8[i2 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i7 = HEAP32[i2 >> 2] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
      i7 = 0;
     }
    }
    if ((i4 & i23 | 0) != (i21 | 0)) HEAP8[i1 >> 0] = i6 >>> 5 << 2 | i7 & 224 | i5 >>> 6;
    i1 = i1 + 1 | 0;
    i2 = i2 + i24 | 0;
    i4 = 39;
    continue;
   } else if ((i4 | 0) == 39) {
    switch (i24 | 0) {
    case 1:
     {
      i7 = HEAPU8[i2 >> 0] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i7 = HEAPU16[i2 >> 1] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i7 = HEAPU8[i2 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i7 = HEAP32[i2 >> 2] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
      i7 = 0;
     }
    }
    if ((i4 & i23 | 0) != (i21 | 0)) HEAP8[i1 >> 0] = i6 >>> 5 << 2 | i7 & 224 | i5 >>> 6;
    i1 = i1 + 1 | 0;
    i2 = i2 + i24 | 0;
    i4 = 47;
    continue;
   } else if ((i4 | 0) == 47) {
    switch (i24 | 0) {
    case 1:
     {
      i7 = HEAPU8[i2 >> 0] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i7 = HEAPU16[i2 >> 1] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i7 = HEAPU8[i2 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i7 = HEAP32[i2 >> 2] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
      i7 = 0;
     }
    }
    if ((i4 & i23 | 0) != (i21 | 0)) HEAP8[i1 >> 0] = i6 >>> 5 << 2 | i7 & 224 | i5 >>> 6;
    i1 = i1 + 1 | 0;
    i2 = i2 + i24 | 0;
    i4 = 55;
    continue;
   } else if ((i4 | 0) == 55) {
    switch (i24 | 0) {
    case 1:
     {
      i7 = HEAPU8[i2 >> 0] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i7 = HEAPU16[i2 >> 1] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i7 = HEAPU8[i2 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i7 = HEAP32[i2 >> 2] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
      i7 = 0;
     }
    }
    if ((i4 & i23 | 0) != (i21 | 0)) HEAP8[i1 >> 0] = i6 >>> 5 << 2 | i7 & 224 | i5 >>> 6;
    i1 = i1 + 1 | 0;
    i2 = i2 + i24 | 0;
    i4 = 63;
    continue;
   } else if ((i4 | 0) == 63) {
    switch (i24 | 0) {
    case 1:
     {
      i7 = HEAPU8[i2 >> 0] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i7 = HEAPU16[i2 >> 1] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i7 = HEAPU8[i2 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i7 = HEAP32[i2 >> 2] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
      i7 = 0;
     }
    }
    if ((i4 & i23 | 0) != (i21 | 0)) HEAP8[i1 >> 0] = i6 >>> 5 << 2 | i7 & 224 | i5 >>> 6;
    i1 = i1 + 1 | 0;
    i2 = i2 + i24 | 0;
    if ((i8 | 0) > 1) {
     i8 = i8 + -1 | 0;
     i4 = 7;
     continue;
    } else {
     i4 = 71;
     continue;
    }
   } else if ((i4 | 0) == 71) if (!i3) break L6; else {
    i1 = i1 + i22 | 0;
    i2 = i2 + i25 | 0;
    continue L6;
   }
  }
  return;
 } else {
  if (i1) return;
  i19 = (i2 + 7 | 0) / 8 | 0;
  i10 = i2 & 7;
  i11 = i4 + 12 | 0;
  i12 = i4 + 32 | 0;
  i13 = i4 + 28 | 0;
  i14 = i4 + 16 | 0;
  i15 = i4 + 33 | 0;
  i16 = i4 + 29 | 0;
  i17 = i4 + 20 | 0;
  i18 = i4 + 34 | 0;
  i9 = i4 + 30 | 0;
  i1 = i5;
  i2 = i6;
  L96 : while (1) {
   i3 = i3 + -1 | 0;
   switch (i10 | 0) {
   case 0:
    {
     i8 = i19;
     i4 = 73;
     break;
    }
   case 7:
    {
     i8 = i19;
     i4 = 81;
     break;
    }
   case 6:
    {
     i8 = i19;
     i4 = 89;
     break;
    }
   case 5:
    {
     i8 = i19;
     i4 = 97;
     break;
    }
   case 4:
    {
     i8 = i19;
     i4 = 105;
     break;
    }
   case 3:
    {
     i8 = i19;
     i4 = 113;
     break;
    }
   case 2:
    {
     i8 = i19;
     i4 = 121;
     break;
    }
   case 1:
    {
     i8 = i19;
     i4 = 129;
     break;
    }
   default:
    i4 = 137;
   }
   while (1) if ((i4 | 0) == 73) {
    switch (i24 | 0) {
    case 1:
     {
      i7 = HEAPU8[i2 >> 0] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i7 = HEAPU16[i2 >> 1] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i7 = HEAPU8[i2 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i7 = HEAP32[i2 >> 2] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
      i7 = 0;
     }
    }
    if ((i4 & i23 | 0) != (i21 | 0)) HEAP8[i1 >> 0] = HEAP8[i20 + (i6 >>> 5 << 2 | i7 & 224 | i5 >>> 6) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i2 = i2 + i24 | 0;
    i4 = 81;
    continue;
   } else if ((i4 | 0) == 81) {
    switch (i24 | 0) {
    case 1:
     {
      i7 = HEAPU8[i2 >> 0] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i7 = HEAPU16[i2 >> 1] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i7 = HEAPU8[i2 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i7 = HEAP32[i2 >> 2] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
      i7 = 0;
     }
    }
    if ((i4 & i23 | 0) != (i21 | 0)) HEAP8[i1 >> 0] = HEAP8[i20 + (i6 >>> 5 << 2 | i7 & 224 | i5 >>> 6) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i2 = i2 + i24 | 0;
    i4 = 89;
    continue;
   } else if ((i4 | 0) == 89) {
    switch (i24 | 0) {
    case 1:
     {
      i7 = HEAPU8[i2 >> 0] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i7 = HEAPU16[i2 >> 1] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i7 = HEAPU8[i2 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i7 = HEAP32[i2 >> 2] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
      i7 = 0;
     }
    }
    if ((i4 & i23 | 0) != (i21 | 0)) HEAP8[i1 >> 0] = HEAP8[i20 + (i6 >>> 5 << 2 | i7 & 224 | i5 >>> 6) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i2 = i2 + i24 | 0;
    i4 = 97;
    continue;
   } else if ((i4 | 0) == 97) {
    switch (i24 | 0) {
    case 1:
     {
      i7 = HEAPU8[i2 >> 0] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i7 = HEAPU16[i2 >> 1] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i7 = HEAPU8[i2 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i7 = HEAP32[i2 >> 2] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
      i7 = 0;
     }
    }
    if ((i4 & i23 | 0) != (i21 | 0)) HEAP8[i1 >> 0] = HEAP8[i20 + (i6 >>> 5 << 2 | i7 & 224 | i5 >>> 6) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i2 = i2 + i24 | 0;
    i4 = 105;
    continue;
   } else if ((i4 | 0) == 105) {
    switch (i24 | 0) {
    case 1:
     {
      i7 = HEAPU8[i2 >> 0] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i7 = HEAPU16[i2 >> 1] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i7 = HEAPU8[i2 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i7 = HEAP32[i2 >> 2] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
      i7 = 0;
     }
    }
    if ((i4 & i23 | 0) != (i21 | 0)) HEAP8[i1 >> 0] = HEAP8[i20 + (i6 >>> 5 << 2 | i7 & 224 | i5 >>> 6) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i2 = i2 + i24 | 0;
    i4 = 113;
    continue;
   } else if ((i4 | 0) == 113) {
    switch (i24 | 0) {
    case 1:
     {
      i7 = HEAPU8[i2 >> 0] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i7 = HEAPU16[i2 >> 1] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i7 = HEAPU8[i2 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i7 = HEAP32[i2 >> 2] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
      i7 = 0;
     }
    }
    if ((i4 & i23 | 0) != (i21 | 0)) HEAP8[i1 >> 0] = HEAP8[i20 + (i6 >>> 5 << 2 | i7 & 224 | i5 >>> 6) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i2 = i2 + i24 | 0;
    i4 = 121;
    continue;
   } else if ((i4 | 0) == 121) {
    switch (i24 | 0) {
    case 1:
     {
      i7 = HEAPU8[i2 >> 0] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i7 = HEAPU16[i2 >> 1] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i7 = HEAPU8[i2 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i7 = HEAP32[i2 >> 2] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
      i7 = 0;
     }
    }
    if ((i4 & i23 | 0) != (i21 | 0)) HEAP8[i1 >> 0] = HEAP8[i20 + (i6 >>> 5 << 2 | i7 & 224 | i5 >>> 6) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i2 = i2 + i24 | 0;
    i4 = 129;
    continue;
   } else if ((i4 | 0) == 129) {
    switch (i24 | 0) {
    case 1:
     {
      i7 = HEAPU8[i2 >> 0] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i7 = HEAPU16[i2 >> 1] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i7 = HEAPU8[i2 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i7 = HEAP32[i2 >> 2] | 0;
      i4 = i7;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
      i7 = 0;
     }
    }
    if ((i4 & i23 | 0) != (i21 | 0)) HEAP8[i1 >> 0] = HEAP8[i20 + (i6 >>> 5 << 2 | i7 & 224 | i5 >>> 6) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i2 = i2 + i24 | 0;
    if ((i8 | 0) > 1) {
     i8 = i8 + -1 | 0;
     i4 = 73;
     continue;
    } else {
     i4 = 137;
     continue;
    }
   } else if ((i4 | 0) == 137) if (!i3) break L96; else {
    i1 = i1 + i22 | 0;
    i2 = i2 + i25 | 0;
    continue L96;
   }
  }
  return;
 }
}
function _BlitNto1(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i2 = HEAP32[i1 + 24 >> 2] | 0;
 i3 = HEAP32[i1 + 28 >> 2] | 0;
 i6 = HEAP32[i1 >> 2] | 0;
 i22 = HEAP32[i1 + 16 >> 2] | 0;
 i5 = HEAP32[i1 + 20 >> 2] | 0;
 i21 = HEAP32[i1 + 36 >> 2] | 0;
 i19 = HEAP32[i1 + 48 >> 2] | 0;
 i4 = HEAP32[i1 + 40 >> 2] | 0;
 i20 = HEAPU8[i4 + 9 >> 0] | 0;
 i1 = (i3 | 0) == 0;
 if (!i19) {
  if (i1) return;
  i18 = (i2 + 7 | 0) / 8 | 0;
  i9 = i2 & 7;
  i10 = i4 + 12 | 0;
  i11 = i4 + 32 | 0;
  i12 = i4 + 28 | 0;
  i13 = i4 + 16 | 0;
  i14 = i4 + 33 | 0;
  i15 = i4 + 29 | 0;
  i16 = i4 + 20 | 0;
  i17 = i4 + 34 | 0;
  i8 = i4 + 30 | 0;
  i1 = i5;
  i2 = i6;
  L6 : while (1) {
   i3 = i3 + -1 | 0;
   switch (i9 | 0) {
   case 0:
    {
     i7 = i18;
     i4 = 7;
     break;
    }
   case 7:
    {
     i7 = i18;
     i4 = 13;
     break;
    }
   case 6:
    {
     i7 = i18;
     i4 = 19;
     break;
    }
   case 5:
    {
     i7 = i18;
     i4 = 25;
     break;
    }
   case 4:
    {
     i7 = i18;
     i4 = 31;
     break;
    }
   case 3:
    {
     i7 = i18;
     i4 = 37;
     break;
    }
   case 2:
    {
     i7 = i18;
     i4 = 43;
     break;
    }
   case 1:
    {
     i7 = i18;
     i4 = 49;
     break;
    }
   default:
    i4 = 55;
   }
   while (1) if ((i4 | 0) == 7) {
    switch (i20 | 0) {
    case 1:
     {
      i6 = HEAPU8[i2 >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i6 = HEAPU16[i2 >> 1] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i6 = HEAP32[i2 >> 2] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i6) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
     }
    }
    HEAP8[i1 >> 0] = i5 >>> 5 << 2 | i6 & 224 | i4 >>> 6;
    i1 = i1 + 1 | 0;
    i2 = i2 + i20 | 0;
    i4 = 13;
    continue;
   } else if ((i4 | 0) == 13) {
    switch (i20 | 0) {
    case 1:
     {
      i6 = HEAPU8[i2 >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i6 = HEAPU16[i2 >> 1] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i6 = HEAP32[i2 >> 2] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i6) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
     }
    }
    HEAP8[i1 >> 0] = i5 >>> 5 << 2 | i6 & 224 | i4 >>> 6;
    i1 = i1 + 1 | 0;
    i2 = i2 + i20 | 0;
    i4 = 19;
    continue;
   } else if ((i4 | 0) == 19) {
    switch (i20 | 0) {
    case 1:
     {
      i6 = HEAPU8[i2 >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i6 = HEAPU16[i2 >> 1] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i6 = HEAP32[i2 >> 2] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i6) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
     }
    }
    HEAP8[i1 >> 0] = i5 >>> 5 << 2 | i6 & 224 | i4 >>> 6;
    i1 = i1 + 1 | 0;
    i2 = i2 + i20 | 0;
    i4 = 25;
    continue;
   } else if ((i4 | 0) == 25) {
    switch (i20 | 0) {
    case 1:
     {
      i6 = HEAPU8[i2 >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i6 = HEAPU16[i2 >> 1] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i6 = HEAP32[i2 >> 2] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i6) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
     }
    }
    HEAP8[i1 >> 0] = i5 >>> 5 << 2 | i6 & 224 | i4 >>> 6;
    i1 = i1 + 1 | 0;
    i2 = i2 + i20 | 0;
    i4 = 31;
    continue;
   } else if ((i4 | 0) == 31) {
    switch (i20 | 0) {
    case 1:
     {
      i6 = HEAPU8[i2 >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i6 = HEAPU16[i2 >> 1] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i6 = HEAP32[i2 >> 2] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i6) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
     }
    }
    HEAP8[i1 >> 0] = i5 >>> 5 << 2 | i6 & 224 | i4 >>> 6;
    i1 = i1 + 1 | 0;
    i2 = i2 + i20 | 0;
    i4 = 37;
    continue;
   } else if ((i4 | 0) == 37) {
    switch (i20 | 0) {
    case 1:
     {
      i6 = HEAPU8[i2 >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i6 = HEAPU16[i2 >> 1] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i6 = HEAP32[i2 >> 2] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i6) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
     }
    }
    HEAP8[i1 >> 0] = i5 >>> 5 << 2 | i6 & 224 | i4 >>> 6;
    i1 = i1 + 1 | 0;
    i2 = i2 + i20 | 0;
    i4 = 43;
    continue;
   } else if ((i4 | 0) == 43) {
    switch (i20 | 0) {
    case 1:
     {
      i6 = HEAPU8[i2 >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i6 = HEAPU16[i2 >> 1] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i6 = HEAP32[i2 >> 2] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i6) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
     }
    }
    HEAP8[i1 >> 0] = i5 >>> 5 << 2 | i6 & 224 | i4 >>> 6;
    i1 = i1 + 1 | 0;
    i2 = i2 + i20 | 0;
    i4 = 49;
    continue;
   } else if ((i4 | 0) == 49) {
    switch (i20 | 0) {
    case 1:
     {
      i6 = HEAPU8[i2 >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i6 = HEAPU16[i2 >> 1] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i6 = HEAP32[i2 >> 2] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i6) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
     }
    }
    HEAP8[i1 >> 0] = i5 >>> 5 << 2 | i6 & 224 | i4 >>> 6;
    i1 = i1 + 1 | 0;
    i2 = i2 + i20 | 0;
    if ((i7 | 0) > 1) {
     i7 = i7 + -1 | 0;
     i4 = 7;
     continue;
    } else {
     i4 = 55;
     continue;
    }
   } else if ((i4 | 0) == 55) if (!i3) break L6; else {
    i1 = i1 + i21 | 0;
    i2 = i2 + i22 | 0;
    continue L6;
   }
  }
  return;
 } else {
  if (i1) return;
  i18 = (i2 + 7 | 0) / 8 | 0;
  i9 = i2 & 7;
  i10 = i4 + 12 | 0;
  i11 = i4 + 32 | 0;
  i12 = i4 + 28 | 0;
  i13 = i4 + 16 | 0;
  i14 = i4 + 33 | 0;
  i15 = i4 + 29 | 0;
  i16 = i4 + 20 | 0;
  i17 = i4 + 34 | 0;
  i8 = i4 + 30 | 0;
  i1 = i5;
  i2 = i6;
  L72 : while (1) {
   i3 = i3 + -1 | 0;
   switch (i9 | 0) {
   case 0:
    {
     i7 = i18;
     i4 = 57;
     break;
    }
   case 7:
    {
     i7 = i18;
     i4 = 63;
     break;
    }
   case 6:
    {
     i7 = i18;
     i4 = 69;
     break;
    }
   case 5:
    {
     i7 = i18;
     i4 = 75;
     break;
    }
   case 4:
    {
     i7 = i18;
     i4 = 81;
     break;
    }
   case 3:
    {
     i7 = i18;
     i4 = 87;
     break;
    }
   case 2:
    {
     i7 = i18;
     i4 = 93;
     break;
    }
   case 1:
    {
     i7 = i18;
     i4 = 99;
     break;
    }
   default:
    i4 = 105;
   }
   while (1) if ((i4 | 0) == 57) {
    switch (i20 | 0) {
    case 1:
     {
      i6 = HEAPU8[i2 >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i6 = HEAPU16[i2 >> 1] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i6 = HEAP32[i2 >> 2] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i6) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
     }
    }
    HEAP8[i1 >> 0] = HEAP8[i19 + (i5 >>> 5 << 2 | i6 & 224 | i4 >>> 6) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i2 = i2 + i20 | 0;
    i4 = 63;
    continue;
   } else if ((i4 | 0) == 63) {
    switch (i20 | 0) {
    case 1:
     {
      i6 = HEAPU8[i2 >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i6 = HEAPU16[i2 >> 1] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i6 = HEAP32[i2 >> 2] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i6) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
     }
    }
    HEAP8[i1 >> 0] = HEAP8[i19 + (i5 >>> 5 << 2 | i6 & 224 | i4 >>> 6) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i2 = i2 + i20 | 0;
    i4 = 69;
    continue;
   } else if ((i4 | 0) == 69) {
    switch (i20 | 0) {
    case 1:
     {
      i6 = HEAPU8[i2 >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i6 = HEAPU16[i2 >> 1] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i6 = HEAP32[i2 >> 2] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i6) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
     }
    }
    HEAP8[i1 >> 0] = HEAP8[i19 + (i5 >>> 5 << 2 | i6 & 224 | i4 >>> 6) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i2 = i2 + i20 | 0;
    i4 = 75;
    continue;
   } else if ((i4 | 0) == 75) {
    switch (i20 | 0) {
    case 1:
     {
      i6 = HEAPU8[i2 >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i6 = HEAPU16[i2 >> 1] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i6 = HEAP32[i2 >> 2] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i6) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
     }
    }
    HEAP8[i1 >> 0] = HEAP8[i19 + (i5 >>> 5 << 2 | i6 & 224 | i4 >>> 6) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i2 = i2 + i20 | 0;
    i4 = 81;
    continue;
   } else if ((i4 | 0) == 81) {
    switch (i20 | 0) {
    case 1:
     {
      i6 = HEAPU8[i2 >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i6 = HEAPU16[i2 >> 1] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i6 = HEAP32[i2 >> 2] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i6) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
     }
    }
    HEAP8[i1 >> 0] = HEAP8[i19 + (i5 >>> 5 << 2 | i6 & 224 | i4 >>> 6) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i2 = i2 + i20 | 0;
    i4 = 87;
    continue;
   } else if ((i4 | 0) == 87) {
    switch (i20 | 0) {
    case 1:
     {
      i6 = HEAPU8[i2 >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i6 = HEAPU16[i2 >> 1] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i6 = HEAP32[i2 >> 2] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i6) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
     }
    }
    HEAP8[i1 >> 0] = HEAP8[i19 + (i5 >>> 5 << 2 | i6 & 224 | i4 >>> 6) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i2 = i2 + i20 | 0;
    i4 = 93;
    continue;
   } else if ((i4 | 0) == 93) {
    switch (i20 | 0) {
    case 1:
     {
      i6 = HEAPU8[i2 >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i6 = HEAPU16[i2 >> 1] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i6 = HEAP32[i2 >> 2] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i6) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
     }
    }
    HEAP8[i1 >> 0] = HEAP8[i19 + (i5 >>> 5 << 2 | i6 & 224 | i4 >>> 6) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i2 = i2 + i20 | 0;
    i4 = 99;
    continue;
   } else if ((i4 | 0) == 99) {
    switch (i20 | 0) {
    case 1:
     {
      i6 = HEAPU8[i2 >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i6 = HEAPU16[i2 >> 1] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i2 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i6 = HEAP32[i2 >> 2] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i6) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
     }
    }
    HEAP8[i1 >> 0] = HEAP8[i19 + (i5 >>> 5 << 2 | i6 & 224 | i4 >>> 6) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i2 = i2 + i20 | 0;
    if ((i7 | 0) > 1) {
     i7 = i7 + -1 | 0;
     i4 = 57;
     continue;
    } else {
     i4 = 105;
     continue;
    }
   } else if ((i4 | 0) == 105) if (!i3) break L72; else {
    i1 = i1 + i21 | 0;
    i2 = i2 + i22 | 0;
    continue L72;
   }
  }
  return;
 }
}

function _Blit1toNAlphaKey(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i1 = HEAP32[i4 + 24 >> 2] | 0;
 i3 = HEAP32[i4 + 28 >> 2] | 0;
 i31 = HEAP32[i4 + 16 >> 2] | 0;
 i32 = HEAP32[i4 + 36 >> 2] | 0;
 i2 = HEAP32[i4 + 44 >> 2] | 0;
 i26 = HEAP32[(HEAP32[(HEAP32[i4 + 40 >> 2] | 0) + 4 >> 2] | 0) + 4 >> 2] | 0;
 i27 = HEAP32[i4 + 56 >> 2] | 0;
 i28 = HEAPU8[i4 + 63 >> 0] | 0;
 i29 = HEAPU8[i2 + 9 >> 0] | 0;
 if (!i3) return;
 i30 = (i1 + 7 | 0) / 8 | 0;
 i14 = i1 & 7;
 i15 = i2 + 28 | 0;
 i16 = i2 + 32 | 0;
 i17 = i2 + 29 | 0;
 i18 = i2 + 33 | 0;
 i19 = i2 + 30 | 0;
 i20 = i2 + 34 | 0;
 i21 = i2 + 31 | 0;
 i22 = i2 + 35 | 0;
 i23 = i2 + 12 | 0;
 i24 = i2 + 16 | 0;
 i25 = i2 + 20 | 0;
 i13 = i2 + 24 | 0;
 i1 = HEAP32[i4 + 20 >> 2] | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 L4 : while (1) {
  i3 = i3 + -1 | 0;
  switch (i14 | 0) {
  case 0:
   {
    i12 = i30;
    i4 = 4;
    break;
   }
  case 7:
   {
    i12 = i30;
    i4 = 16;
    break;
   }
  case 6:
   {
    i12 = i30;
    i4 = 28;
    break;
   }
  case 5:
   {
    i12 = i30;
    i4 = 40;
    break;
   }
  case 4:
   {
    i12 = i30;
    i4 = 52;
    break;
   }
  case 3:
   {
    i12 = i30;
    i4 = 64;
    break;
   }
  case 2:
   {
    i12 = i30;
    i4 = 76;
    break;
   }
  case 1:
   {
    i12 = i30;
    i4 = 88;
    break;
   }
  default:
   i4 = 100;
  }
  while (1) if ((i4 | 0) == 4) {
   i4 = HEAPU8[i2 >> 0] | 0;
   L10 : do if ((i4 | 0) != (i27 | 0)) {
    i5 = HEAPU8[i26 + (i4 << 2) >> 0] | 0;
    i8 = HEAPU8[i26 + (i4 << 2) + 1 >> 0] | 0;
    i9 = HEAPU8[i26 + (i4 << 2) + 2 >> 0] | 0;
    switch (i29 | 0) {
    case 1:
     {
      i4 = HEAPU8[i1 >> 0] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i4 = HEAPU16[i1 >> 1] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i11 = 255;
      i10 = HEAPU8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i4 = HEAPU8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i4 = HEAP32[i1 >> 2] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i4) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i11 = 0;
      i10 = 0;
      i6 = 0;
      i4 = 0;
     }
    }
    i7 = (((Math_imul(i5 - i4 | 0, i28) | 0) >>> 0) / 255 | 0) + i4 | 0;
    i6 = (((Math_imul(i8 - i6 | 0, i28) | 0) >>> 0) / 255 | 0) + i6 | 0;
    i5 = (((Math_imul(i9 - i10 | 0, i28) | 0) >>> 0) / 255 | 0) + i10 | 0;
    i4 = i11 + i28 - (((Math_imul(i11, i28) | 0) >>> 0) / 255 | 0) | 0;
    switch (i29 | 0) {
    case 1:
     {
      HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L10;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L10;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
      HEAP8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      break L10;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L10;
     }
    default:
     break L10;
    }
   } while (0);
   i1 = i1 + i29 | 0;
   i2 = i2 + 1 | 0;
   i4 = 16;
   continue;
  } else if ((i4 | 0) == 16) {
   i4 = HEAPU8[i2 >> 0] | 0;
   L25 : do if ((i4 | 0) != (i27 | 0)) {
    i5 = HEAPU8[i26 + (i4 << 2) >> 0] | 0;
    i7 = HEAPU8[i26 + (i4 << 2) + 1 >> 0] | 0;
    i8 = HEAPU8[i26 + (i4 << 2) + 2 >> 0] | 0;
    switch (i29 | 0) {
    case 1:
     {
      i4 = HEAPU8[i1 >> 0] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i4 = HEAPU16[i1 >> 1] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i11 = 255;
      i10 = HEAPU8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i4 = HEAPU8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i4 = HEAP32[i1 >> 2] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i4) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i11 = 0;
      i10 = 0;
      i6 = 0;
      i4 = 0;
     }
    }
    i9 = (((Math_imul(i5 - i4 | 0, i28) | 0) >>> 0) / 255 | 0) + i4 | 0;
    i6 = (((Math_imul(i7 - i6 | 0, i28) | 0) >>> 0) / 255 | 0) + i6 | 0;
    i5 = (((Math_imul(i8 - i10 | 0, i28) | 0) >>> 0) / 255 | 0) + i10 | 0;
    i4 = i11 + i28 - (((Math_imul(i11, i28) | 0) >>> 0) / 255 | 0) | 0;
    switch (i29 | 0) {
    case 1:
     {
      HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L25;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L25;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
      HEAP8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      break L25;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L25;
     }
    default:
     break L25;
    }
   } while (0);
   i1 = i1 + i29 | 0;
   i2 = i2 + 1 | 0;
   i4 = 28;
   continue;
  } else if ((i4 | 0) == 28) {
   i4 = HEAPU8[i2 >> 0] | 0;
   L40 : do if ((i4 | 0) != (i27 | 0)) {
    i5 = HEAPU8[i26 + (i4 << 2) >> 0] | 0;
    i7 = HEAPU8[i26 + (i4 << 2) + 1 >> 0] | 0;
    i8 = HEAPU8[i26 + (i4 << 2) + 2 >> 0] | 0;
    switch (i29 | 0) {
    case 1:
     {
      i4 = HEAPU8[i1 >> 0] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i4 = HEAPU16[i1 >> 1] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i11 = 255;
      i10 = HEAPU8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i4 = HEAPU8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i4 = HEAP32[i1 >> 2] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i4) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i11 = 0;
      i10 = 0;
      i6 = 0;
      i4 = 0;
     }
    }
    i9 = (((Math_imul(i5 - i4 | 0, i28) | 0) >>> 0) / 255 | 0) + i4 | 0;
    i6 = (((Math_imul(i7 - i6 | 0, i28) | 0) >>> 0) / 255 | 0) + i6 | 0;
    i5 = (((Math_imul(i8 - i10 | 0, i28) | 0) >>> 0) / 255 | 0) + i10 | 0;
    i4 = i11 + i28 - (((Math_imul(i11, i28) | 0) >>> 0) / 255 | 0) | 0;
    switch (i29 | 0) {
    case 1:
     {
      HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L40;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L40;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
      HEAP8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      break L40;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L40;
     }
    default:
     break L40;
    }
   } while (0);
   i1 = i1 + i29 | 0;
   i2 = i2 + 1 | 0;
   i4 = 40;
   continue;
  } else if ((i4 | 0) == 40) {
   i4 = HEAPU8[i2 >> 0] | 0;
   L55 : do if ((i4 | 0) != (i27 | 0)) {
    i5 = HEAPU8[i26 + (i4 << 2) >> 0] | 0;
    i8 = HEAPU8[i26 + (i4 << 2) + 1 >> 0] | 0;
    i9 = HEAPU8[i26 + (i4 << 2) + 2 >> 0] | 0;
    switch (i29 | 0) {
    case 1:
     {
      i4 = HEAPU8[i1 >> 0] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i4 = HEAPU16[i1 >> 1] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i11 = 255;
      i10 = HEAPU8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i4 = HEAPU8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i4 = HEAP32[i1 >> 2] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i4) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i11 = 0;
      i10 = 0;
      i6 = 0;
      i4 = 0;
     }
    }
    i7 = (((Math_imul(i5 - i4 | 0, i28) | 0) >>> 0) / 255 | 0) + i4 | 0;
    i6 = (((Math_imul(i8 - i6 | 0, i28) | 0) >>> 0) / 255 | 0) + i6 | 0;
    i5 = (((Math_imul(i9 - i10 | 0, i28) | 0) >>> 0) / 255 | 0) + i10 | 0;
    i4 = i11 + i28 - (((Math_imul(i11, i28) | 0) >>> 0) / 255 | 0) | 0;
    switch (i29 | 0) {
    case 1:
     {
      HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L55;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L55;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
      HEAP8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      break L55;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L55;
     }
    default:
     break L55;
    }
   } while (0);
   i1 = i1 + i29 | 0;
   i2 = i2 + 1 | 0;
   i4 = 52;
   continue;
  } else if ((i4 | 0) == 52) {
   i4 = HEAPU8[i2 >> 0] | 0;
   L70 : do if ((i4 | 0) != (i27 | 0)) {
    i5 = HEAPU8[i26 + (i4 << 2) >> 0] | 0;
    i7 = HEAPU8[i26 + (i4 << 2) + 1 >> 0] | 0;
    i8 = HEAPU8[i26 + (i4 << 2) + 2 >> 0] | 0;
    switch (i29 | 0) {
    case 1:
     {
      i4 = HEAPU8[i1 >> 0] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i4 = HEAPU16[i1 >> 1] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i11 = 255;
      i10 = HEAPU8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i4 = HEAPU8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i4 = HEAP32[i1 >> 2] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i4) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i11 = 0;
      i10 = 0;
      i6 = 0;
      i4 = 0;
     }
    }
    i9 = (((Math_imul(i5 - i4 | 0, i28) | 0) >>> 0) / 255 | 0) + i4 | 0;
    i6 = (((Math_imul(i7 - i6 | 0, i28) | 0) >>> 0) / 255 | 0) + i6 | 0;
    i5 = (((Math_imul(i8 - i10 | 0, i28) | 0) >>> 0) / 255 | 0) + i10 | 0;
    i4 = i11 + i28 - (((Math_imul(i11, i28) | 0) >>> 0) / 255 | 0) | 0;
    switch (i29 | 0) {
    case 1:
     {
      HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L70;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L70;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
      HEAP8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      break L70;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L70;
     }
    default:
     break L70;
    }
   } while (0);
   i1 = i1 + i29 | 0;
   i2 = i2 + 1 | 0;
   i4 = 64;
   continue;
  } else if ((i4 | 0) == 64) {
   i4 = HEAPU8[i2 >> 0] | 0;
   L85 : do if ((i4 | 0) != (i27 | 0)) {
    i5 = HEAPU8[i26 + (i4 << 2) >> 0] | 0;
    i7 = HEAPU8[i26 + (i4 << 2) + 1 >> 0] | 0;
    i8 = HEAPU8[i26 + (i4 << 2) + 2 >> 0] | 0;
    switch (i29 | 0) {
    case 1:
     {
      i4 = HEAPU8[i1 >> 0] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i4 = HEAPU16[i1 >> 1] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i11 = 255;
      i10 = HEAPU8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i4 = HEAPU8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i4 = HEAP32[i1 >> 2] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i4) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i11 = 0;
      i10 = 0;
      i6 = 0;
      i4 = 0;
     }
    }
    i9 = (((Math_imul(i5 - i4 | 0, i28) | 0) >>> 0) / 255 | 0) + i4 | 0;
    i6 = (((Math_imul(i7 - i6 | 0, i28) | 0) >>> 0) / 255 | 0) + i6 | 0;
    i5 = (((Math_imul(i8 - i10 | 0, i28) | 0) >>> 0) / 255 | 0) + i10 | 0;
    i4 = i11 + i28 - (((Math_imul(i11, i28) | 0) >>> 0) / 255 | 0) | 0;
    switch (i29 | 0) {
    case 1:
     {
      HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L85;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L85;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
      HEAP8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      break L85;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L85;
     }
    default:
     break L85;
    }
   } while (0);
   i1 = i1 + i29 | 0;
   i2 = i2 + 1 | 0;
   i4 = 76;
   continue;
  } else if ((i4 | 0) == 76) {
   i4 = HEAPU8[i2 >> 0] | 0;
   L100 : do if ((i4 | 0) != (i27 | 0)) {
    i5 = HEAPU8[i26 + (i4 << 2) >> 0] | 0;
    i7 = HEAPU8[i26 + (i4 << 2) + 1 >> 0] | 0;
    i8 = HEAPU8[i26 + (i4 << 2) + 2 >> 0] | 0;
    switch (i29 | 0) {
    case 1:
     {
      i4 = HEAPU8[i1 >> 0] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i4 = HEAPU16[i1 >> 1] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i11 = 255;
      i10 = HEAPU8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i4 = HEAPU8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i4 = HEAP32[i1 >> 2] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i4) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i11 = 0;
      i10 = 0;
      i6 = 0;
      i4 = 0;
     }
    }
    i9 = (((Math_imul(i5 - i4 | 0, i28) | 0) >>> 0) / 255 | 0) + i4 | 0;
    i6 = (((Math_imul(i7 - i6 | 0, i28) | 0) >>> 0) / 255 | 0) + i6 | 0;
    i5 = (((Math_imul(i8 - i10 | 0, i28) | 0) >>> 0) / 255 | 0) + i10 | 0;
    i4 = i11 + i28 - (((Math_imul(i11, i28) | 0) >>> 0) / 255 | 0) | 0;
    switch (i29 | 0) {
    case 1:
     {
      HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L100;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L100;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
      HEAP8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      break L100;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L100;
     }
    default:
     break L100;
    }
   } while (0);
   i1 = i1 + i29 | 0;
   i2 = i2 + 1 | 0;
   i4 = 88;
   continue;
  } else if ((i4 | 0) == 88) {
   i4 = HEAPU8[i2 >> 0] | 0;
   L115 : do if ((i4 | 0) != (i27 | 0)) {
    i5 = HEAPU8[i26 + (i4 << 2) >> 0] | 0;
    i7 = HEAPU8[i26 + (i4 << 2) + 1 >> 0] | 0;
    i8 = HEAPU8[i26 + (i4 << 2) + 2 >> 0] | 0;
    switch (i29 | 0) {
    case 1:
     {
      i4 = HEAPU8[i1 >> 0] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i4 = HEAPU16[i1 >> 1] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i11 = 255;
      i10 = HEAPU8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i4 = HEAPU8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i4 = HEAP32[i1 >> 2] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i4) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i11 = 0;
      i10 = 0;
      i6 = 0;
      i4 = 0;
     }
    }
    i9 = (((Math_imul(i5 - i4 | 0, i28) | 0) >>> 0) / 255 | 0) + i4 | 0;
    i6 = (((Math_imul(i7 - i6 | 0, i28) | 0) >>> 0) / 255 | 0) + i6 | 0;
    i5 = (((Math_imul(i8 - i10 | 0, i28) | 0) >>> 0) / 255 | 0) + i10 | 0;
    i4 = i11 + i28 - (((Math_imul(i11, i28) | 0) >>> 0) / 255 | 0) | 0;
    switch (i29 | 0) {
    case 1:
     {
      HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L115;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L115;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
      HEAP8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      break L115;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L115;
     }
    default:
     break L115;
    }
   } while (0);
   i2 = i2 + 1 | 0;
   i1 = i1 + i29 | 0;
   if ((i12 | 0) > 1) {
    i12 = i12 + -1 | 0;
    i4 = 4;
    continue;
   } else {
    i4 = 100;
    continue;
   }
  } else if ((i4 | 0) == 100) if (!i3) break L4; else {
   i1 = i1 + i32 | 0;
   i2 = i2 + i31 | 0;
   continue L4;
  }
 }
 return;
}

function _malloc(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 do if (i2 >>> 0 < 245) {
  i14 = i2 >>> 0 < 11 ? 16 : i2 + 11 & -8;
  i2 = i14 >>> 3;
  i8 = HEAP32[6683] | 0;
  i3 = i8 >>> i2;
  if (i3 & 3) {
   i2 = (i3 & 1 ^ 1) + i2 | 0;
   i4 = i2 << 1;
   i3 = 26772 + (i4 << 2) | 0;
   i4 = 26772 + (i4 + 2 << 2) | 0;
   i5 = HEAP32[i4 >> 2] | 0;
   i6 = i5 + 8 | 0;
   i7 = HEAP32[i6 >> 2] | 0;
   do if ((i3 | 0) != (i7 | 0)) {
    if (i7 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort();
    i1 = i7 + 12 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i5 | 0)) {
     HEAP32[i1 >> 2] = i3;
     HEAP32[i4 >> 2] = i7;
     break;
    } else _abort();
   } else HEAP32[6683] = i8 & ~(1 << i2); while (0);
   i38 = i2 << 3;
   HEAP32[i5 + 4 >> 2] = i38 | 3;
   i38 = i5 + (i38 | 4) | 0;
   HEAP32[i38 >> 2] = HEAP32[i38 >> 2] | 1;
   i38 = i6;
   return i38 | 0;
  }
  i7 = HEAP32[6685] | 0;
  if (i14 >>> 0 > i7 >>> 0) {
   if (i3) {
    i4 = 2 << i2;
    i4 = i3 << i2 & (i4 | 0 - i4);
    i4 = (i4 & 0 - i4) + -1 | 0;
    i9 = i4 >>> 12 & 16;
    i4 = i4 >>> i9;
    i5 = i4 >>> 5 & 8;
    i4 = i4 >>> i5;
    i6 = i4 >>> 2 & 4;
    i4 = i4 >>> i6;
    i3 = i4 >>> 1 & 2;
    i4 = i4 >>> i3;
    i2 = i4 >>> 1 & 1;
    i2 = (i5 | i9 | i6 | i3 | i2) + (i4 >>> i2) | 0;
    i4 = i2 << 1;
    i3 = 26772 + (i4 << 2) | 0;
    i4 = 26772 + (i4 + 2 << 2) | 0;
    i6 = HEAP32[i4 >> 2] | 0;
    i9 = i6 + 8 | 0;
    i5 = HEAP32[i9 >> 2] | 0;
    do if ((i3 | 0) != (i5 | 0)) {
     if (i5 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort();
     i1 = i5 + 12 | 0;
     if ((HEAP32[i1 >> 2] | 0) == (i6 | 0)) {
      HEAP32[i1 >> 2] = i3;
      HEAP32[i4 >> 2] = i5;
      i10 = HEAP32[6685] | 0;
      break;
     } else _abort();
    } else {
     HEAP32[6683] = i8 & ~(1 << i2);
     i10 = i7;
    } while (0);
    i38 = i2 << 3;
    i7 = i38 - i14 | 0;
    HEAP32[i6 + 4 >> 2] = i14 | 3;
    i8 = i6 + i14 | 0;
    HEAP32[i6 + (i14 | 4) >> 2] = i7 | 1;
    HEAP32[i6 + i38 >> 2] = i7;
    if (i10) {
     i5 = HEAP32[6688] | 0;
     i3 = i10 >>> 3;
     i1 = i3 << 1;
     i4 = 26772 + (i1 << 2) | 0;
     i2 = HEAP32[6683] | 0;
     i3 = 1 << i3;
     if (i2 & i3) {
      i2 = 26772 + (i1 + 2 << 2) | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      if (i1 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort(); else {
       i11 = i2;
       i12 = i1;
      }
     } else {
      HEAP32[6683] = i2 | i3;
      i11 = 26772 + (i1 + 2 << 2) | 0;
      i12 = i4;
     }
     HEAP32[i11 >> 2] = i5;
     HEAP32[i12 + 12 >> 2] = i5;
     HEAP32[i5 + 8 >> 2] = i12;
     HEAP32[i5 + 12 >> 2] = i4;
    }
    HEAP32[6685] = i7;
    HEAP32[6688] = i8;
    i38 = i9;
    return i38 | 0;
   }
   i2 = HEAP32[6684] | 0;
   if (i2) {
    i3 = (i2 & 0 - i2) + -1 | 0;
    i37 = i3 >>> 12 & 16;
    i3 = i3 >>> i37;
    i36 = i3 >>> 5 & 8;
    i3 = i3 >>> i36;
    i38 = i3 >>> 2 & 4;
    i3 = i3 >>> i38;
    i2 = i3 >>> 1 & 2;
    i3 = i3 >>> i2;
    i4 = i3 >>> 1 & 1;
    i4 = HEAP32[27036 + ((i36 | i37 | i38 | i2 | i4) + (i3 >>> i4) << 2) >> 2] | 0;
    i3 = (HEAP32[i4 + 4 >> 2] & -8) - i14 | 0;
    i2 = i4;
    while (1) {
     i1 = HEAP32[i2 + 16 >> 2] | 0;
     if (!i1) {
      i1 = HEAP32[i2 + 20 >> 2] | 0;
      if (!i1) {
       i9 = i3;
       break;
      }
     }
     i2 = (HEAP32[i1 + 4 >> 2] & -8) - i14 | 0;
     i38 = i2 >>> 0 < i3 >>> 0;
     i3 = i38 ? i2 : i3;
     i2 = i1;
     i4 = i38 ? i1 : i4;
    }
    i6 = HEAP32[6687] | 0;
    if (i4 >>> 0 < i6 >>> 0) _abort();
    i8 = i4 + i14 | 0;
    if (i4 >>> 0 >= i8 >>> 0) _abort();
    i7 = HEAP32[i4 + 24 >> 2] | 0;
    i3 = HEAP32[i4 + 12 >> 2] | 0;
    do if ((i3 | 0) == (i4 | 0)) {
     i2 = i4 + 20 | 0;
     i1 = HEAP32[i2 >> 2] | 0;
     if (!i1) {
      i2 = i4 + 16 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      if (!i1) {
       i13 = 0;
       break;
      }
     }
     while (1) {
      i3 = i1 + 20 | 0;
      i5 = HEAP32[i3 >> 2] | 0;
      if (i5) {
       i1 = i5;
       i2 = i3;
       continue;
      }
      i3 = i1 + 16 | 0;
      i5 = HEAP32[i3 >> 2] | 0;
      if (!i5) break; else {
       i1 = i5;
       i2 = i3;
      }
     }
     if (i2 >>> 0 < i6 >>> 0) _abort(); else {
      HEAP32[i2 >> 2] = 0;
      i13 = i1;
      break;
     }
    } else {
     i5 = HEAP32[i4 + 8 >> 2] | 0;
     if (i5 >>> 0 < i6 >>> 0) _abort();
     i1 = i5 + 12 | 0;
     if ((HEAP32[i1 >> 2] | 0) != (i4 | 0)) _abort();
     i2 = i3 + 8 | 0;
     if ((HEAP32[i2 >> 2] | 0) == (i4 | 0)) {
      HEAP32[i1 >> 2] = i3;
      HEAP32[i2 >> 2] = i5;
      i13 = i3;
      break;
     } else _abort();
    } while (0);
    do if (i7) {
     i1 = HEAP32[i4 + 28 >> 2] | 0;
     i2 = 27036 + (i1 << 2) | 0;
     if ((i4 | 0) == (HEAP32[i2 >> 2] | 0)) {
      HEAP32[i2 >> 2] = i13;
      if (!i13) {
       HEAP32[6684] = HEAP32[6684] & ~(1 << i1);
       break;
      }
     } else {
      if (i7 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort();
      i1 = i7 + 16 | 0;
      if ((HEAP32[i1 >> 2] | 0) == (i4 | 0)) HEAP32[i1 >> 2] = i13; else HEAP32[i7 + 20 >> 2] = i13;
      if (!i13) break;
     }
     i2 = HEAP32[6687] | 0;
     if (i13 >>> 0 < i2 >>> 0) _abort();
     HEAP32[i13 + 24 >> 2] = i7;
     i1 = HEAP32[i4 + 16 >> 2] | 0;
     do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
      HEAP32[i13 + 16 >> 2] = i1;
      HEAP32[i1 + 24 >> 2] = i13;
      break;
     } while (0);
     i1 = HEAP32[i4 + 20 >> 2] | 0;
     if (i1) if (i1 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort(); else {
      HEAP32[i13 + 20 >> 2] = i1;
      HEAP32[i1 + 24 >> 2] = i13;
      break;
     }
    } while (0);
    if (i9 >>> 0 < 16) {
     i38 = i9 + i14 | 0;
     HEAP32[i4 + 4 >> 2] = i38 | 3;
     i38 = i4 + (i38 + 4) | 0;
     HEAP32[i38 >> 2] = HEAP32[i38 >> 2] | 1;
    } else {
     HEAP32[i4 + 4 >> 2] = i14 | 3;
     HEAP32[i4 + (i14 | 4) >> 2] = i9 | 1;
     HEAP32[i4 + (i9 + i14) >> 2] = i9;
     i1 = HEAP32[6685] | 0;
     if (i1) {
      i6 = HEAP32[6688] | 0;
      i3 = i1 >>> 3;
      i1 = i3 << 1;
      i5 = 26772 + (i1 << 2) | 0;
      i2 = HEAP32[6683] | 0;
      i3 = 1 << i3;
      if (i2 & i3) {
       i1 = 26772 + (i1 + 2 << 2) | 0;
       i2 = HEAP32[i1 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort(); else {
        i15 = i1;
        i16 = i2;
       }
      } else {
       HEAP32[6683] = i2 | i3;
       i15 = 26772 + (i1 + 2 << 2) | 0;
       i16 = i5;
      }
      HEAP32[i15 >> 2] = i6;
      HEAP32[i16 + 12 >> 2] = i6;
      HEAP32[i6 + 8 >> 2] = i16;
      HEAP32[i6 + 12 >> 2] = i5;
     }
     HEAP32[6685] = i9;
     HEAP32[6688] = i8;
    }
    i38 = i4 + 8 | 0;
    return i38 | 0;
   } else i16 = i14;
  } else i16 = i14;
 } else if (i2 >>> 0 <= 4294967231) {
  i2 = i2 + 11 | 0;
  i12 = i2 & -8;
  i11 = HEAP32[6684] | 0;
  if (i11) {
   i3 = 0 - i12 | 0;
   i2 = i2 >>> 8;
   if (i2) if (i12 >>> 0 > 16777215) i10 = 31; else {
    i16 = (i2 + 1048320 | 0) >>> 16 & 8;
    i21 = i2 << i16;
    i15 = (i21 + 520192 | 0) >>> 16 & 4;
    i21 = i21 << i15;
    i10 = (i21 + 245760 | 0) >>> 16 & 2;
    i10 = 14 - (i15 | i16 | i10) + (i21 << i10 >>> 15) | 0;
    i10 = i12 >>> (i10 + 7 | 0) & 1 | i10 << 1;
   } else i10 = 0;
   i2 = HEAP32[27036 + (i10 << 2) >> 2] | 0;
   L123 : do if (!i2) {
    i5 = 0;
    i2 = 0;
    i21 = 86;
   } else {
    i7 = i3;
    i5 = 0;
    i8 = i12 << ((i10 | 0) == 31 ? 0 : 25 - (i10 >>> 1) | 0);
    i9 = i2;
    i2 = 0;
    while (1) {
     i6 = HEAP32[i9 + 4 >> 2] & -8;
     i3 = i6 - i12 | 0;
     if (i3 >>> 0 < i7 >>> 0) if ((i6 | 0) == (i12 | 0)) {
      i6 = i9;
      i2 = i9;
      i21 = 90;
      break L123;
     } else i2 = i9; else i3 = i7;
     i21 = HEAP32[i9 + 20 >> 2] | 0;
     i9 = HEAP32[i9 + 16 + (i8 >>> 31 << 2) >> 2] | 0;
     i5 = (i21 | 0) == 0 | (i21 | 0) == (i9 | 0) ? i5 : i21;
     if (!i9) {
      i21 = 86;
      break;
     } else {
      i7 = i3;
      i8 = i8 << 1;
     }
    }
   } while (0);
   if ((i21 | 0) == 86) {
    if ((i5 | 0) == 0 & (i2 | 0) == 0) {
     i2 = 2 << i10;
     i2 = i11 & (i2 | 0 - i2);
     if (!i2) {
      i16 = i12;
      break;
     }
     i2 = (i2 & 0 - i2) + -1 | 0;
     i13 = i2 >>> 12 & 16;
     i2 = i2 >>> i13;
     i11 = i2 >>> 5 & 8;
     i2 = i2 >>> i11;
     i15 = i2 >>> 2 & 4;
     i2 = i2 >>> i15;
     i16 = i2 >>> 1 & 2;
     i2 = i2 >>> i16;
     i5 = i2 >>> 1 & 1;
     i5 = HEAP32[27036 + ((i11 | i13 | i15 | i16 | i5) + (i2 >>> i5) << 2) >> 2] | 0;
     i2 = 0;
    }
    if (!i5) {
     i8 = i3;
     i9 = i2;
    } else {
     i6 = i5;
     i21 = 90;
    }
   }
   if ((i21 | 0) == 90) while (1) {
    i21 = 0;
    i16 = (HEAP32[i6 + 4 >> 2] & -8) - i12 | 0;
    i5 = i16 >>> 0 < i3 >>> 0;
    i3 = i5 ? i16 : i3;
    i2 = i5 ? i6 : i2;
    i5 = HEAP32[i6 + 16 >> 2] | 0;
    if (i5) {
     i6 = i5;
     i21 = 90;
     continue;
    }
    i6 = HEAP32[i6 + 20 >> 2] | 0;
    if (!i6) {
     i8 = i3;
     i9 = i2;
     break;
    } else i21 = 90;
   }
   if ((i9 | 0) != 0 ? i8 >>> 0 < ((HEAP32[6685] | 0) - i12 | 0) >>> 0 : 0) {
    i5 = HEAP32[6687] | 0;
    if (i9 >>> 0 < i5 >>> 0) _abort();
    i7 = i9 + i12 | 0;
    if (i9 >>> 0 >= i7 >>> 0) _abort();
    i6 = HEAP32[i9 + 24 >> 2] | 0;
    i3 = HEAP32[i9 + 12 >> 2] | 0;
    do if ((i3 | 0) == (i9 | 0)) {
     i2 = i9 + 20 | 0;
     i1 = HEAP32[i2 >> 2] | 0;
     if (!i1) {
      i2 = i9 + 16 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      if (!i1) {
       i14 = 0;
       break;
      }
     }
     while (1) {
      i3 = i1 + 20 | 0;
      i4 = HEAP32[i3 >> 2] | 0;
      if (i4) {
       i1 = i4;
       i2 = i3;
       continue;
      }
      i3 = i1 + 16 | 0;
      i4 = HEAP32[i3 >> 2] | 0;
      if (!i4) break; else {
       i1 = i4;
       i2 = i3;
      }
     }
     if (i2 >>> 0 < i5 >>> 0) _abort(); else {
      HEAP32[i2 >> 2] = 0;
      i14 = i1;
      break;
     }
    } else {
     i4 = HEAP32[i9 + 8 >> 2] | 0;
     if (i4 >>> 0 < i5 >>> 0) _abort();
     i1 = i4 + 12 | 0;
     if ((HEAP32[i1 >> 2] | 0) != (i9 | 0)) _abort();
     i2 = i3 + 8 | 0;
     if ((HEAP32[i2 >> 2] | 0) == (i9 | 0)) {
      HEAP32[i1 >> 2] = i3;
      HEAP32[i2 >> 2] = i4;
      i14 = i3;
      break;
     } else _abort();
    } while (0);
    do if (i6) {
     i1 = HEAP32[i9 + 28 >> 2] | 0;
     i2 = 27036 + (i1 << 2) | 0;
     if ((i9 | 0) == (HEAP32[i2 >> 2] | 0)) {
      HEAP32[i2 >> 2] = i14;
      if (!i14) {
       HEAP32[6684] = HEAP32[6684] & ~(1 << i1);
       break;
      }
     } else {
      if (i6 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort();
      i1 = i6 + 16 | 0;
      if ((HEAP32[i1 >> 2] | 0) == (i9 | 0)) HEAP32[i1 >> 2] = i14; else HEAP32[i6 + 20 >> 2] = i14;
      if (!i14) break;
     }
     i2 = HEAP32[6687] | 0;
     if (i14 >>> 0 < i2 >>> 0) _abort();
     HEAP32[i14 + 24 >> 2] = i6;
     i1 = HEAP32[i9 + 16 >> 2] | 0;
     do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
      HEAP32[i14 + 16 >> 2] = i1;
      HEAP32[i1 + 24 >> 2] = i14;
      break;
     } while (0);
     i1 = HEAP32[i9 + 20 >> 2] | 0;
     if (i1) if (i1 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort(); else {
      HEAP32[i14 + 20 >> 2] = i1;
      HEAP32[i1 + 24 >> 2] = i14;
      break;
     }
    } while (0);
    L199 : do if (i8 >>> 0 >= 16) {
     HEAP32[i9 + 4 >> 2] = i12 | 3;
     HEAP32[i9 + (i12 | 4) >> 2] = i8 | 1;
     HEAP32[i9 + (i8 + i12) >> 2] = i8;
     i1 = i8 >>> 3;
     if (i8 >>> 0 < 256) {
      i2 = i1 << 1;
      i4 = 26772 + (i2 << 2) | 0;
      i3 = HEAP32[6683] | 0;
      i1 = 1 << i1;
      if (i3 & i1) {
       i1 = 26772 + (i2 + 2 << 2) | 0;
       i2 = HEAP32[i1 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort(); else {
        i18 = i1;
        i19 = i2;
       }
      } else {
       HEAP32[6683] = i3 | i1;
       i18 = 26772 + (i2 + 2 << 2) | 0;
       i19 = i4;
      }
      HEAP32[i18 >> 2] = i7;
      HEAP32[i19 + 12 >> 2] = i7;
      HEAP32[i9 + (i12 + 8) >> 2] = i19;
      HEAP32[i9 + (i12 + 12) >> 2] = i4;
      break;
     }
     i1 = i8 >>> 8;
     if (i1) if (i8 >>> 0 > 16777215) i4 = 31; else {
      i37 = (i1 + 1048320 | 0) >>> 16 & 8;
      i38 = i1 << i37;
      i36 = (i38 + 520192 | 0) >>> 16 & 4;
      i38 = i38 << i36;
      i4 = (i38 + 245760 | 0) >>> 16 & 2;
      i4 = 14 - (i36 | i37 | i4) + (i38 << i4 >>> 15) | 0;
      i4 = i8 >>> (i4 + 7 | 0) & 1 | i4 << 1;
     } else i4 = 0;
     i1 = 27036 + (i4 << 2) | 0;
     HEAP32[i9 + (i12 + 28) >> 2] = i4;
     HEAP32[i9 + (i12 + 20) >> 2] = 0;
     HEAP32[i9 + (i12 + 16) >> 2] = 0;
     i2 = HEAP32[6684] | 0;
     i3 = 1 << i4;
     if (!(i2 & i3)) {
      HEAP32[6684] = i2 | i3;
      HEAP32[i1 >> 2] = i7;
      HEAP32[i9 + (i12 + 24) >> 2] = i1;
      HEAP32[i9 + (i12 + 12) >> 2] = i7;
      HEAP32[i9 + (i12 + 8) >> 2] = i7;
      break;
     }
     i1 = HEAP32[i1 >> 2] | 0;
     L217 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i8 | 0)) {
      i4 = i8 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
      while (1) {
       i2 = i1 + 16 + (i4 >>> 31 << 2) | 0;
       i3 = HEAP32[i2 >> 2] | 0;
       if (!i3) break;
       if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i8 | 0)) {
        i24 = i3;
        break L217;
       } else {
        i4 = i4 << 1;
        i1 = i3;
       }
      }
      if (i2 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort(); else {
       HEAP32[i2 >> 2] = i7;
       HEAP32[i9 + (i12 + 24) >> 2] = i1;
       HEAP32[i9 + (i12 + 12) >> 2] = i7;
       HEAP32[i9 + (i12 + 8) >> 2] = i7;
       break L199;
      }
     } else i24 = i1; while (0);
     i1 = i24 + 8 | 0;
     i2 = HEAP32[i1 >> 2] | 0;
     i38 = HEAP32[6687] | 0;
     if (i2 >>> 0 >= i38 >>> 0 & i24 >>> 0 >= i38 >>> 0) {
      HEAP32[i2 + 12 >> 2] = i7;
      HEAP32[i1 >> 2] = i7;
      HEAP32[i9 + (i12 + 8) >> 2] = i2;
      HEAP32[i9 + (i12 + 12) >> 2] = i24;
      HEAP32[i9 + (i12 + 24) >> 2] = 0;
      break;
     } else _abort();
    } else {
     i38 = i8 + i12 | 0;
     HEAP32[i9 + 4 >> 2] = i38 | 3;
     i38 = i9 + (i38 + 4) | 0;
     HEAP32[i38 >> 2] = HEAP32[i38 >> 2] | 1;
    } while (0);
    i38 = i9 + 8 | 0;
    return i38 | 0;
   } else i16 = i12;
  } else i16 = i12;
 } else i16 = -1; while (0);
 i3 = HEAP32[6685] | 0;
 if (i3 >>> 0 >= i16 >>> 0) {
  i1 = i3 - i16 | 0;
  i2 = HEAP32[6688] | 0;
  if (i1 >>> 0 > 15) {
   HEAP32[6688] = i2 + i16;
   HEAP32[6685] = i1;
   HEAP32[i2 + (i16 + 4) >> 2] = i1 | 1;
   HEAP32[i2 + i3 >> 2] = i1;
   HEAP32[i2 + 4 >> 2] = i16 | 3;
  } else {
   HEAP32[6685] = 0;
   HEAP32[6688] = 0;
   HEAP32[i2 + 4 >> 2] = i3 | 3;
   i38 = i2 + (i3 + 4) | 0;
   HEAP32[i38 >> 2] = HEAP32[i38 >> 2] | 1;
  }
  i38 = i2 + 8 | 0;
  return i38 | 0;
 }
 i2 = HEAP32[6686] | 0;
 if (i2 >>> 0 > i16 >>> 0) {
  i37 = i2 - i16 | 0;
  HEAP32[6686] = i37;
  i38 = HEAP32[6689] | 0;
  HEAP32[6689] = i38 + i16;
  HEAP32[i38 + (i16 + 4) >> 2] = i37 | 1;
  HEAP32[i38 + 4 >> 2] = i16 | 3;
  i38 = i38 + 8 | 0;
  return i38 | 0;
 }
 do if (!(HEAP32[6801] | 0)) {
  i2 = _sysconf(30) | 0;
  if (!(i2 + -1 & i2)) {
   HEAP32[6803] = i2;
   HEAP32[6802] = i2;
   HEAP32[6804] = -1;
   HEAP32[6805] = -1;
   HEAP32[6806] = 0;
   HEAP32[6794] = 0;
   HEAP32[6801] = (_time(0) | 0) & -16 ^ 1431655768;
   break;
  } else _abort();
 } while (0);
 i9 = i16 + 48 | 0;
 i8 = HEAP32[6803] | 0;
 i10 = i16 + 47 | 0;
 i7 = i8 + i10 | 0;
 i8 = 0 - i8 | 0;
 i11 = i7 & i8;
 if (i11 >>> 0 <= i16 >>> 0) {
  i38 = 0;
  return i38 | 0;
 }
 i2 = HEAP32[6793] | 0;
 if ((i2 | 0) != 0 ? (i19 = HEAP32[6791] | 0, i24 = i19 + i11 | 0, i24 >>> 0 <= i19 >>> 0 | i24 >>> 0 > i2 >>> 0) : 0) {
  i38 = 0;
  return i38 | 0;
 }
 L258 : do if (!(HEAP32[6794] & 4)) {
  i2 = HEAP32[6689] | 0;
  L260 : do if (i2) {
   i5 = 27180;
   while (1) {
    i3 = HEAP32[i5 >> 2] | 0;
    if (i3 >>> 0 <= i2 >>> 0 ? (i17 = i5 + 4 | 0, (i3 + (HEAP32[i17 >> 2] | 0) | 0) >>> 0 > i2 >>> 0) : 0) {
     i6 = i5;
     i2 = i17;
     break;
    }
    i5 = HEAP32[i5 + 8 >> 2] | 0;
    if (!i5) {
     i21 = 174;
     break L260;
    }
   }
   i3 = i7 - (HEAP32[6686] | 0) & i8;
   if (i3 >>> 0 < 2147483647) {
    i5 = _sbrk(i3 | 0) | 0;
    i24 = (i5 | 0) == ((HEAP32[i6 >> 2] | 0) + (HEAP32[i2 >> 2] | 0) | 0);
    i2 = i24 ? i3 : 0;
    if (i24) {
     if ((i5 | 0) != (-1 | 0)) {
      i22 = i5;
      i15 = i2;
      i21 = 194;
      break L258;
     }
    } else i21 = 184;
   } else i2 = 0;
  } else i21 = 174; while (0);
  do if ((i21 | 0) == 174) {
   i6 = _sbrk(0) | 0;
   if ((i6 | 0) != (-1 | 0)) {
    i2 = i6;
    i3 = HEAP32[6802] | 0;
    i5 = i3 + -1 | 0;
    if (!(i5 & i2)) i3 = i11; else i3 = i11 - i2 + (i5 + i2 & 0 - i3) | 0;
    i2 = HEAP32[6791] | 0;
    i5 = i2 + i3 | 0;
    if (i3 >>> 0 > i16 >>> 0 & i3 >>> 0 < 2147483647) {
     i24 = HEAP32[6793] | 0;
     if ((i24 | 0) != 0 ? i5 >>> 0 <= i2 >>> 0 | i5 >>> 0 > i24 >>> 0 : 0) {
      i2 = 0;
      break;
     }
     i5 = _sbrk(i3 | 0) | 0;
     i24 = (i5 | 0) == (i6 | 0);
     i2 = i24 ? i3 : 0;
     if (i24) {
      i22 = i6;
      i15 = i2;
      i21 = 194;
      break L258;
     } else i21 = 184;
    } else i2 = 0;
   } else i2 = 0;
  } while (0);
  L280 : do if ((i21 | 0) == 184) {
   i6 = 0 - i3 | 0;
   do if (i9 >>> 0 > i3 >>> 0 & (i3 >>> 0 < 2147483647 & (i5 | 0) != (-1 | 0)) ? (i20 = HEAP32[6803] | 0, i20 = i10 - i3 + i20 & 0 - i20, i20 >>> 0 < 2147483647) : 0) if ((_sbrk(i20 | 0) | 0) == (-1 | 0)) {
    _sbrk(i6 | 0) | 0;
    break L280;
   } else {
    i3 = i20 + i3 | 0;
    break;
   } while (0);
   if ((i5 | 0) != (-1 | 0)) {
    i22 = i5;
    i15 = i3;
    i21 = 194;
    break L258;
   }
  } while (0);
  HEAP32[6794] = HEAP32[6794] | 4;
  i21 = 191;
 } else {
  i2 = 0;
  i21 = 191;
 } while (0);
 if ((((i21 | 0) == 191 ? i11 >>> 0 < 2147483647 : 0) ? (i22 = _sbrk(i11 | 0) | 0, i23 = _sbrk(0) | 0, i22 >>> 0 < i23 >>> 0 & ((i22 | 0) != (-1 | 0) & (i23 | 0) != (-1 | 0))) : 0) ? (i25 = i23 - i22 | 0, i26 = i25 >>> 0 > (i16 + 40 | 0) >>> 0, i26) : 0) {
  i15 = i26 ? i25 : i2;
  i21 = 194;
 }
 if ((i21 | 0) == 194) {
  i2 = (HEAP32[6791] | 0) + i15 | 0;
  HEAP32[6791] = i2;
  if (i2 >>> 0 > (HEAP32[6792] | 0) >>> 0) HEAP32[6792] = i2;
  i7 = HEAP32[6689] | 0;
  L299 : do if (i7) {
   i6 = 27180;
   do {
    i2 = HEAP32[i6 >> 2] | 0;
    i3 = i6 + 4 | 0;
    i5 = HEAP32[i3 >> 2] | 0;
    if ((i22 | 0) == (i2 + i5 | 0)) {
     i27 = i2;
     i28 = i3;
     i29 = i5;
     i30 = i6;
     i21 = 204;
     break;
    }
    i6 = HEAP32[i6 + 8 >> 2] | 0;
   } while ((i6 | 0) != 0);
   if (((i21 | 0) == 204 ? (HEAP32[i30 + 12 >> 2] & 8 | 0) == 0 : 0) ? i7 >>> 0 < i22 >>> 0 & i7 >>> 0 >= i27 >>> 0 : 0) {
    HEAP32[i28 >> 2] = i29 + i15;
    i38 = (HEAP32[6686] | 0) + i15 | 0;
    i37 = i7 + 8 | 0;
    i37 = (i37 & 7 | 0) == 0 ? 0 : 0 - i37 & 7;
    i36 = i38 - i37 | 0;
    HEAP32[6689] = i7 + i37;
    HEAP32[6686] = i36;
    HEAP32[i7 + (i37 + 4) >> 2] = i36 | 1;
    HEAP32[i7 + (i38 + 4) >> 2] = 40;
    HEAP32[6690] = HEAP32[6805];
    break;
   }
   i2 = HEAP32[6687] | 0;
   if (i22 >>> 0 < i2 >>> 0) {
    HEAP32[6687] = i22;
    i2 = i22;
   }
   i3 = i22 + i15 | 0;
   i6 = 27180;
   while (1) {
    if ((HEAP32[i6 >> 2] | 0) == (i3 | 0)) {
     i5 = i6;
     i3 = i6;
     i21 = 212;
     break;
    }
    i6 = HEAP32[i6 + 8 >> 2] | 0;
    if (!i6) {
     i3 = 27180;
     break;
    }
   }
   if ((i21 | 0) == 212) if (!(HEAP32[i3 + 12 >> 2] & 8)) {
    HEAP32[i5 >> 2] = i22;
    i13 = i3 + 4 | 0;
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + i15;
    i13 = i22 + 8 | 0;
    i13 = (i13 & 7 | 0) == 0 ? 0 : 0 - i13 & 7;
    i10 = i22 + (i15 + 8) | 0;
    i10 = (i10 & 7 | 0) == 0 ? 0 : 0 - i10 & 7;
    i1 = i22 + (i10 + i15) | 0;
    i12 = i13 + i16 | 0;
    i14 = i22 + i12 | 0;
    i11 = i1 - (i22 + i13) - i16 | 0;
    HEAP32[i22 + (i13 + 4) >> 2] = i16 | 3;
    L324 : do if ((i1 | 0) != (i7 | 0)) {
     if ((i1 | 0) == (HEAP32[6688] | 0)) {
      i38 = (HEAP32[6685] | 0) + i11 | 0;
      HEAP32[6685] = i38;
      HEAP32[6688] = i14;
      HEAP32[i22 + (i12 + 4) >> 2] = i38 | 1;
      HEAP32[i22 + (i38 + i12) >> 2] = i38;
      break;
     }
     i8 = i15 + 4 | 0;
     i3 = HEAP32[i22 + (i8 + i10) >> 2] | 0;
     if ((i3 & 3 | 0) == 1) {
      i9 = i3 & -8;
      i6 = i3 >>> 3;
      L332 : do if (i3 >>> 0 >= 256) {
       i7 = HEAP32[i22 + ((i10 | 24) + i15) >> 2] | 0;
       i4 = HEAP32[i22 + (i15 + 12 + i10) >> 2] | 0;
       do if ((i4 | 0) == (i1 | 0)) {
        i5 = i10 | 16;
        i4 = i22 + (i8 + i5) | 0;
        i3 = HEAP32[i4 >> 2] | 0;
        if (!i3) {
         i4 = i22 + (i5 + i15) | 0;
         i3 = HEAP32[i4 >> 2] | 0;
         if (!i3) {
          i35 = 0;
          break;
         }
        }
        while (1) {
         i5 = i3 + 20 | 0;
         i6 = HEAP32[i5 >> 2] | 0;
         if (i6) {
          i3 = i6;
          i4 = i5;
          continue;
         }
         i5 = i3 + 16 | 0;
         i6 = HEAP32[i5 >> 2] | 0;
         if (!i6) break; else {
          i3 = i6;
          i4 = i5;
         }
        }
        if (i4 >>> 0 < i2 >>> 0) _abort(); else {
         HEAP32[i4 >> 2] = 0;
         i35 = i3;
         break;
        }
       } else {
        i5 = HEAP32[i22 + ((i10 | 8) + i15) >> 2] | 0;
        if (i5 >>> 0 < i2 >>> 0) _abort();
        i2 = i5 + 12 | 0;
        if ((HEAP32[i2 >> 2] | 0) != (i1 | 0)) _abort();
        i3 = i4 + 8 | 0;
        if ((HEAP32[i3 >> 2] | 0) == (i1 | 0)) {
         HEAP32[i2 >> 2] = i4;
         HEAP32[i3 >> 2] = i5;
         i35 = i4;
         break;
        } else _abort();
       } while (0);
       if (!i7) break;
       i2 = HEAP32[i22 + (i15 + 28 + i10) >> 2] | 0;
       i3 = 27036 + (i2 << 2) | 0;
       do if ((i1 | 0) != (HEAP32[i3 >> 2] | 0)) {
        if (i7 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort();
        i2 = i7 + 16 | 0;
        if ((HEAP32[i2 >> 2] | 0) == (i1 | 0)) HEAP32[i2 >> 2] = i35; else HEAP32[i7 + 20 >> 2] = i35;
        if (!i35) break L332;
       } else {
        HEAP32[i3 >> 2] = i35;
        if (i35) break;
        HEAP32[6684] = HEAP32[6684] & ~(1 << i2);
        break L332;
       } while (0);
       i3 = HEAP32[6687] | 0;
       if (i35 >>> 0 < i3 >>> 0) _abort();
       HEAP32[i35 + 24 >> 2] = i7;
       i1 = i10 | 16;
       i2 = HEAP32[i22 + (i1 + i15) >> 2] | 0;
       do if (i2) if (i2 >>> 0 < i3 >>> 0) _abort(); else {
        HEAP32[i35 + 16 >> 2] = i2;
        HEAP32[i2 + 24 >> 2] = i35;
        break;
       } while (0);
       i1 = HEAP32[i22 + (i8 + i1) >> 2] | 0;
       if (!i1) break;
       if (i1 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort(); else {
        HEAP32[i35 + 20 >> 2] = i1;
        HEAP32[i1 + 24 >> 2] = i35;
        break;
       }
      } else {
       i4 = HEAP32[i22 + ((i10 | 8) + i15) >> 2] | 0;
       i5 = HEAP32[i22 + (i15 + 12 + i10) >> 2] | 0;
       i3 = 26772 + (i6 << 1 << 2) | 0;
       do if ((i4 | 0) != (i3 | 0)) {
        if (i4 >>> 0 < i2 >>> 0) _abort();
        if ((HEAP32[i4 + 12 >> 2] | 0) == (i1 | 0)) break;
        _abort();
       } while (0);
       if ((i5 | 0) == (i4 | 0)) {
        HEAP32[6683] = HEAP32[6683] & ~(1 << i6);
        break;
       }
       do if ((i5 | 0) == (i3 | 0)) i31 = i5 + 8 | 0; else {
        if (i5 >>> 0 < i2 >>> 0) _abort();
        i2 = i5 + 8 | 0;
        if ((HEAP32[i2 >> 2] | 0) == (i1 | 0)) {
         i31 = i2;
         break;
        }
        _abort();
       } while (0);
       HEAP32[i4 + 12 >> 2] = i5;
       HEAP32[i31 >> 2] = i4;
      } while (0);
      i1 = i22 + ((i9 | i10) + i15) | 0;
      i5 = i9 + i11 | 0;
     } else i5 = i11;
     i1 = i1 + 4 | 0;
     HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -2;
     HEAP32[i22 + (i12 + 4) >> 2] = i5 | 1;
     HEAP32[i22 + (i5 + i12) >> 2] = i5;
     i1 = i5 >>> 3;
     if (i5 >>> 0 < 256) {
      i2 = i1 << 1;
      i4 = 26772 + (i2 << 2) | 0;
      i3 = HEAP32[6683] | 0;
      i1 = 1 << i1;
      do if (!(i3 & i1)) {
       HEAP32[6683] = i3 | i1;
       i36 = 26772 + (i2 + 2 << 2) | 0;
       i37 = i4;
      } else {
       i1 = 26772 + (i2 + 2 << 2) | 0;
       i2 = HEAP32[i1 >> 2] | 0;
       if (i2 >>> 0 >= (HEAP32[6687] | 0) >>> 0) {
        i36 = i1;
        i37 = i2;
        break;
       }
       _abort();
      } while (0);
      HEAP32[i36 >> 2] = i14;
      HEAP32[i37 + 12 >> 2] = i14;
      HEAP32[i22 + (i12 + 8) >> 2] = i37;
      HEAP32[i22 + (i12 + 12) >> 2] = i4;
      break;
     }
     i1 = i5 >>> 8;
     do if (!i1) i4 = 0; else {
      if (i5 >>> 0 > 16777215) {
       i4 = 31;
       break;
      }
      i36 = (i1 + 1048320 | 0) >>> 16 & 8;
      i37 = i1 << i36;
      i35 = (i37 + 520192 | 0) >>> 16 & 4;
      i37 = i37 << i35;
      i4 = (i37 + 245760 | 0) >>> 16 & 2;
      i4 = 14 - (i35 | i36 | i4) + (i37 << i4 >>> 15) | 0;
      i4 = i5 >>> (i4 + 7 | 0) & 1 | i4 << 1;
     } while (0);
     i1 = 27036 + (i4 << 2) | 0;
     HEAP32[i22 + (i12 + 28) >> 2] = i4;
     HEAP32[i22 + (i12 + 20) >> 2] = 0;
     HEAP32[i22 + (i12 + 16) >> 2] = 0;
     i2 = HEAP32[6684] | 0;
     i3 = 1 << i4;
     if (!(i2 & i3)) {
      HEAP32[6684] = i2 | i3;
      HEAP32[i1 >> 2] = i14;
      HEAP32[i22 + (i12 + 24) >> 2] = i1;
      HEAP32[i22 + (i12 + 12) >> 2] = i14;
      HEAP32[i22 + (i12 + 8) >> 2] = i14;
      break;
     }
     i1 = HEAP32[i1 >> 2] | 0;
     L418 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i5 | 0)) {
      i4 = i5 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
      while (1) {
       i2 = i1 + 16 + (i4 >>> 31 << 2) | 0;
       i3 = HEAP32[i2 >> 2] | 0;
       if (!i3) break;
       if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i5 | 0)) {
        i38 = i3;
        break L418;
       } else {
        i4 = i4 << 1;
        i1 = i3;
       }
      }
      if (i2 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort(); else {
       HEAP32[i2 >> 2] = i14;
       HEAP32[i22 + (i12 + 24) >> 2] = i1;
       HEAP32[i22 + (i12 + 12) >> 2] = i14;
       HEAP32[i22 + (i12 + 8) >> 2] = i14;
       break L324;
      }
     } else i38 = i1; while (0);
     i1 = i38 + 8 | 0;
     i2 = HEAP32[i1 >> 2] | 0;
     i37 = HEAP32[6687] | 0;
     if (i2 >>> 0 >= i37 >>> 0 & i38 >>> 0 >= i37 >>> 0) {
      HEAP32[i2 + 12 >> 2] = i14;
      HEAP32[i1 >> 2] = i14;
      HEAP32[i22 + (i12 + 8) >> 2] = i2;
      HEAP32[i22 + (i12 + 12) >> 2] = i38;
      HEAP32[i22 + (i12 + 24) >> 2] = 0;
      break;
     } else _abort();
    } else {
     i38 = (HEAP32[6686] | 0) + i11 | 0;
     HEAP32[6686] = i38;
     HEAP32[6689] = i14;
     HEAP32[i22 + (i12 + 4) >> 2] = i38 | 1;
    } while (0);
    i38 = i22 + (i13 | 8) | 0;
    return i38 | 0;
   } else i3 = 27180;
   while (1) {
    i2 = HEAP32[i3 >> 2] | 0;
    if (i2 >>> 0 <= i7 >>> 0 ? (i1 = HEAP32[i3 + 4 >> 2] | 0, i4 = i2 + i1 | 0, i4 >>> 0 > i7 >>> 0) : 0) break;
    i3 = HEAP32[i3 + 8 >> 2] | 0;
   }
   i5 = i2 + (i1 + -39) | 0;
   i2 = i2 + (i1 + -47 + ((i5 & 7 | 0) == 0 ? 0 : 0 - i5 & 7)) | 0;
   i5 = i7 + 16 | 0;
   i2 = i2 >>> 0 < i5 >>> 0 ? i7 : i2;
   i1 = i2 + 8 | 0;
   i3 = i22 + 8 | 0;
   i3 = (i3 & 7 | 0) == 0 ? 0 : 0 - i3 & 7;
   i38 = i15 + -40 - i3 | 0;
   HEAP32[6689] = i22 + i3;
   HEAP32[6686] = i38;
   HEAP32[i22 + (i3 + 4) >> 2] = i38 | 1;
   HEAP32[i22 + (i15 + -36) >> 2] = 40;
   HEAP32[6690] = HEAP32[6805];
   i3 = i2 + 4 | 0;
   HEAP32[i3 >> 2] = 27;
   HEAP32[i1 >> 2] = HEAP32[6795];
   HEAP32[i1 + 4 >> 2] = HEAP32[6796];
   HEAP32[i1 + 8 >> 2] = HEAP32[6797];
   HEAP32[i1 + 12 >> 2] = HEAP32[6798];
   HEAP32[6795] = i22;
   HEAP32[6796] = i15;
   HEAP32[6798] = 0;
   HEAP32[6797] = i1;
   i1 = i2 + 28 | 0;
   HEAP32[i1 >> 2] = 7;
   if ((i2 + 32 | 0) >>> 0 < i4 >>> 0) do {
    i38 = i1;
    i1 = i1 + 4 | 0;
    HEAP32[i1 >> 2] = 7;
   } while ((i38 + 8 | 0) >>> 0 < i4 >>> 0);
   if ((i2 | 0) != (i7 | 0)) {
    i6 = i2 - i7 | 0;
    HEAP32[i3 >> 2] = HEAP32[i3 >> 2] & -2;
    HEAP32[i7 + 4 >> 2] = i6 | 1;
    HEAP32[i2 >> 2] = i6;
    i1 = i6 >>> 3;
    if (i6 >>> 0 < 256) {
     i2 = i1 << 1;
     i4 = 26772 + (i2 << 2) | 0;
     i3 = HEAP32[6683] | 0;
     i1 = 1 << i1;
     if (i3 & i1) {
      i1 = 26772 + (i2 + 2 << 2) | 0;
      i2 = HEAP32[i1 >> 2] | 0;
      if (i2 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort(); else {
       i32 = i1;
       i33 = i2;
      }
     } else {
      HEAP32[6683] = i3 | i1;
      i32 = 26772 + (i2 + 2 << 2) | 0;
      i33 = i4;
     }
     HEAP32[i32 >> 2] = i7;
     HEAP32[i33 + 12 >> 2] = i7;
     HEAP32[i7 + 8 >> 2] = i33;
     HEAP32[i7 + 12 >> 2] = i4;
     break;
    }
    i1 = i6 >>> 8;
    if (i1) if (i6 >>> 0 > 16777215) i4 = 31; else {
     i37 = (i1 + 1048320 | 0) >>> 16 & 8;
     i38 = i1 << i37;
     i36 = (i38 + 520192 | 0) >>> 16 & 4;
     i38 = i38 << i36;
     i4 = (i38 + 245760 | 0) >>> 16 & 2;
     i4 = 14 - (i36 | i37 | i4) + (i38 << i4 >>> 15) | 0;
     i4 = i6 >>> (i4 + 7 | 0) & 1 | i4 << 1;
    } else i4 = 0;
    i3 = 27036 + (i4 << 2) | 0;
    HEAP32[i7 + 28 >> 2] = i4;
    HEAP32[i7 + 20 >> 2] = 0;
    HEAP32[i5 >> 2] = 0;
    i1 = HEAP32[6684] | 0;
    i2 = 1 << i4;
    if (!(i1 & i2)) {
     HEAP32[6684] = i1 | i2;
     HEAP32[i3 >> 2] = i7;
     HEAP32[i7 + 24 >> 2] = i3;
     HEAP32[i7 + 12 >> 2] = i7;
     HEAP32[i7 + 8 >> 2] = i7;
     break;
    }
    i1 = HEAP32[i3 >> 2] | 0;
    L459 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i6 | 0)) {
     i4 = i6 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
     while (1) {
      i2 = i1 + 16 + (i4 >>> 31 << 2) | 0;
      i3 = HEAP32[i2 >> 2] | 0;
      if (!i3) break;
      if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i6 | 0)) {
       i34 = i3;
       break L459;
      } else {
       i4 = i4 << 1;
       i1 = i3;
      }
     }
     if (i2 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort(); else {
      HEAP32[i2 >> 2] = i7;
      HEAP32[i7 + 24 >> 2] = i1;
      HEAP32[i7 + 12 >> 2] = i7;
      HEAP32[i7 + 8 >> 2] = i7;
      break L299;
     }
    } else i34 = i1; while (0);
    i1 = i34 + 8 | 0;
    i2 = HEAP32[i1 >> 2] | 0;
    i38 = HEAP32[6687] | 0;
    if (i2 >>> 0 >= i38 >>> 0 & i34 >>> 0 >= i38 >>> 0) {
     HEAP32[i2 + 12 >> 2] = i7;
     HEAP32[i1 >> 2] = i7;
     HEAP32[i7 + 8 >> 2] = i2;
     HEAP32[i7 + 12 >> 2] = i34;
     HEAP32[i7 + 24 >> 2] = 0;
     break;
    } else _abort();
   }
  } else {
   i38 = HEAP32[6687] | 0;
   if ((i38 | 0) == 0 | i22 >>> 0 < i38 >>> 0) HEAP32[6687] = i22;
   HEAP32[6795] = i22;
   HEAP32[6796] = i15;
   HEAP32[6798] = 0;
   HEAP32[6692] = HEAP32[6801];
   HEAP32[6691] = -1;
   i1 = 0;
   do {
    i38 = i1 << 1;
    i37 = 26772 + (i38 << 2) | 0;
    HEAP32[26772 + (i38 + 3 << 2) >> 2] = i37;
    HEAP32[26772 + (i38 + 2 << 2) >> 2] = i37;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != 32);
   i38 = i22 + 8 | 0;
   i38 = (i38 & 7 | 0) == 0 ? 0 : 0 - i38 & 7;
   i37 = i15 + -40 - i38 | 0;
   HEAP32[6689] = i22 + i38;
   HEAP32[6686] = i37;
   HEAP32[i22 + (i38 + 4) >> 2] = i37 | 1;
   HEAP32[i22 + (i15 + -36) >> 2] = 40;
   HEAP32[6690] = HEAP32[6805];
  } while (0);
  i1 = HEAP32[6686] | 0;
  if (i1 >>> 0 > i16 >>> 0) {
   i37 = i1 - i16 | 0;
   HEAP32[6686] = i37;
   i38 = HEAP32[6689] | 0;
   HEAP32[6689] = i38 + i16;
   HEAP32[i38 + (i16 + 4) >> 2] = i37 | 1;
   HEAP32[i38 + 4 >> 2] = i16 | 3;
   i38 = i38 + 8 | 0;
   return i38 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 i38 = 0;
 return i38 | 0;
}

function _BlitNtoNKeyCopyAlpha(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0;
 i1 = HEAP32[i5 + 24 >> 2] | 0;
 i4 = HEAP32[i5 + 28 >> 2] | 0;
 i36 = HEAP32[i5 + 16 >> 2] | 0;
 i37 = HEAP32[i5 + 36 >> 2] | 0;
 i3 = HEAP32[i5 + 40 >> 2] | 0;
 i2 = HEAP32[i5 + 44 >> 2] | 0;
 i32 = i3 + 24 | 0;
 i33 = ~HEAP32[i32 >> 2];
 i34 = HEAP32[i5 + 56 >> 2] & i33;
 if (!i4) return;
 i35 = (i1 + 7 | 0) / 8 | 0;
 i22 = i1 & 7;
 i23 = HEAPU8[i3 + 9 >> 0] | 0;
 i24 = HEAPU8[i2 + 9 >> 0] | 0;
 i25 = i2 + 28 | 0;
 i26 = i2 + 32 | 0;
 i27 = i2 + 29 | 0;
 i28 = i2 + 33 | 0;
 i29 = i2 + 30 | 0;
 i30 = i2 + 34 | 0;
 i31 = i2 + 31 | 0;
 i11 = i2 + 35 | 0;
 i12 = i3 + 12 | 0;
 i13 = i3 + 32 | 0;
 i14 = i3 + 28 | 0;
 i15 = i3 + 16 | 0;
 i16 = i3 + 33 | 0;
 i17 = i3 + 29 | 0;
 i18 = i3 + 20 | 0;
 i19 = i3 + 34 | 0;
 i20 = i3 + 30 | 0;
 i21 = i3 + 35 | 0;
 i10 = i3 + 31 | 0;
 i1 = HEAP32[i5 + 20 >> 2] | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 L4 : while (1) {
  i4 = i4 + -1 | 0;
  switch (i22 | 0) {
  case 0:
   {
    i9 = i35;
    i3 = 4;
    break;
   }
  case 7:
   {
    i9 = i35;
    i3 = 16;
    break;
   }
  case 6:
   {
    i9 = i35;
    i3 = 28;
    break;
   }
  case 5:
   {
    i9 = i35;
    i3 = 40;
    break;
   }
  case 4:
   {
    i9 = i35;
    i3 = 52;
    break;
   }
  case 3:
   {
    i9 = i35;
    i3 = 64;
    break;
   }
  case 2:
   {
    i9 = i35;
    i3 = 76;
    break;
   }
  case 1:
   {
    i9 = i35;
    i3 = 88;
    break;
   }
  default:
   i3 = 100;
  }
  while (1) if ((i3 | 0) == 4) {
   switch (i23 | 0) {
   case 1:
    {
     i8 = HEAPU8[i2 >> 0] | 0;
     i3 = i8;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i8) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((i8 & HEAP32[i12 >> 2]) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i8 = HEAPU16[i2 >> 1] | 0;
     i3 = i8;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i8) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((i8 & HEAP32[i12 >> 2]) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i3 = 0;
     i5 = 255;
     i6 = HEAPU8[i2 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = HEAPU8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i8 = HEAPU8[i2 + ((HEAPU8[i13 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i8 = HEAP32[i2 >> 2] | 0;
     i3 = i8;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i8) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i8) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
     i8 = 0;
    }
   }
   L16 : do if ((i3 & i33 | 0) != (i34 | 0)) switch (i24 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i7 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i8 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i26 >> 0] | 0) | i6 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i5 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
     break L16;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i7 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i8 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i26 >> 0] | 0) | i6 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i5 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
     break L16;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i26 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     HEAP8[i1 + ((HEAPU8[i28 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i1 + ((HEAPU8[i30 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     break L16;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i7 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i8 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i26 >> 0] | 0) | i6 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i5 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
     break L16;
    }
   default:
    break L16;
   } while (0);
   i1 = i1 + i24 | 0;
   i2 = i2 + i23 | 0;
   i3 = 16;
   continue;
  } else if ((i3 | 0) == 16) {
   switch (i23 | 0) {
   case 1:
    {
     i8 = HEAPU8[i2 >> 0] | 0;
     i3 = i8;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i8) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((i8 & HEAP32[i12 >> 2]) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i8 = HEAPU16[i2 >> 1] | 0;
     i3 = i8;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i8) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((i8 & HEAP32[i12 >> 2]) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i3 = 0;
     i5 = 255;
     i6 = HEAPU8[i2 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = HEAPU8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i8 = HEAPU8[i2 + ((HEAPU8[i13 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i8 = HEAP32[i2 >> 2] | 0;
     i3 = i8;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i8) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i8) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
     i8 = 0;
    }
   }
   L31 : do if ((i3 & i33 | 0) != (i34 | 0)) switch (i24 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i7 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i8 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i26 >> 0] | 0) | i6 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i5 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
     break L31;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i7 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i8 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i26 >> 0] | 0) | i6 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i5 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
     break L31;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i26 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     HEAP8[i1 + ((HEAPU8[i28 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i1 + ((HEAPU8[i30 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     break L31;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i7 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i8 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i26 >> 0] | 0) | i6 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i5 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
     break L31;
    }
   default:
    break L31;
   } while (0);
   i1 = i1 + i24 | 0;
   i2 = i2 + i23 | 0;
   i3 = 28;
   continue;
  } else if ((i3 | 0) == 28) {
   switch (i23 | 0) {
   case 1:
    {
     i8 = HEAPU8[i2 >> 0] | 0;
     i3 = i8;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i8) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((i8 & HEAP32[i12 >> 2]) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i8 = HEAPU16[i2 >> 1] | 0;
     i3 = i8;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i8) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((i8 & HEAP32[i12 >> 2]) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i3 = 0;
     i5 = 255;
     i6 = HEAPU8[i2 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = HEAPU8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i8 = HEAPU8[i2 + ((HEAPU8[i13 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i8 = HEAP32[i2 >> 2] | 0;
     i3 = i8;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i8) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i8) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
     i8 = 0;
    }
   }
   L46 : do if ((i3 & i33 | 0) != (i34 | 0)) switch (i24 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i7 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i8 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i26 >> 0] | 0) | i6 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i5 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
     break L46;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i7 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i8 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i26 >> 0] | 0) | i6 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i5 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
     break L46;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i26 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     HEAP8[i1 + ((HEAPU8[i28 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i1 + ((HEAPU8[i30 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     break L46;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i7 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i8 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i26 >> 0] | 0) | i6 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i5 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
     break L46;
    }
   default:
    break L46;
   } while (0);
   i1 = i1 + i24 | 0;
   i2 = i2 + i23 | 0;
   i3 = 40;
   continue;
  } else if ((i3 | 0) == 40) {
   switch (i23 | 0) {
   case 1:
    {
     i8 = HEAPU8[i2 >> 0] | 0;
     i3 = i8;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i8) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((i8 & HEAP32[i12 >> 2]) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i8 = HEAPU16[i2 >> 1] | 0;
     i3 = i8;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i8) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((i8 & HEAP32[i12 >> 2]) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i3 = 0;
     i5 = 255;
     i6 = HEAPU8[i2 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = HEAPU8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i8 = HEAPU8[i2 + ((HEAPU8[i13 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i8 = HEAP32[i2 >> 2] | 0;
     i3 = i8;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i8) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i8) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
     i8 = 0;
    }
   }
   L61 : do if ((i3 & i33 | 0) != (i34 | 0)) switch (i24 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i7 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i8 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i26 >> 0] | 0) | i6 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i5 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
     break L61;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i7 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i8 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i26 >> 0] | 0) | i6 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i5 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
     break L61;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i26 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     HEAP8[i1 + ((HEAPU8[i28 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i1 + ((HEAPU8[i30 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     break L61;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i7 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i8 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i26 >> 0] | 0) | i6 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i5 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
     break L61;
    }
   default:
    break L61;
   } while (0);
   i1 = i1 + i24 | 0;
   i2 = i2 + i23 | 0;
   i3 = 52;
   continue;
  } else if ((i3 | 0) == 52) {
   switch (i23 | 0) {
   case 1:
    {
     i8 = HEAPU8[i2 >> 0] | 0;
     i3 = i8;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i8) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((i8 & HEAP32[i12 >> 2]) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i8 = HEAPU16[i2 >> 1] | 0;
     i3 = i8;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i8) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((i8 & HEAP32[i12 >> 2]) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i3 = 0;
     i5 = 255;
     i6 = HEAPU8[i2 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = HEAPU8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i8 = HEAPU8[i2 + ((HEAPU8[i13 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i8 = HEAP32[i2 >> 2] | 0;
     i3 = i8;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i8) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i8) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
     i8 = 0;
    }
   }
   L76 : do if ((i3 & i33 | 0) != (i34 | 0)) switch (i24 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i7 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i8 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i26 >> 0] | 0) | i6 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i5 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
     break L76;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i7 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i8 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i26 >> 0] | 0) | i6 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i5 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
     break L76;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i26 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     HEAP8[i1 + ((HEAPU8[i28 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i1 + ((HEAPU8[i30 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     break L76;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i7 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i8 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i26 >> 0] | 0) | i6 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i5 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
     break L76;
    }
   default:
    break L76;
   } while (0);
   i1 = i1 + i24 | 0;
   i2 = i2 + i23 | 0;
   i3 = 64;
   continue;
  } else if ((i3 | 0) == 64) {
   switch (i23 | 0) {
   case 1:
    {
     i8 = HEAPU8[i2 >> 0] | 0;
     i3 = i8;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i8) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((i8 & HEAP32[i12 >> 2]) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i8 = HEAPU16[i2 >> 1] | 0;
     i3 = i8;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i8) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((i8 & HEAP32[i12 >> 2]) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i3 = 0;
     i5 = 255;
     i6 = HEAPU8[i2 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = HEAPU8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i8 = HEAPU8[i2 + ((HEAPU8[i13 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i8 = HEAP32[i2 >> 2] | 0;
     i3 = i8;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i8) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i8) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
     i8 = 0;
    }
   }
   L91 : do if ((i3 & i33 | 0) != (i34 | 0)) switch (i24 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i7 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i8 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i26 >> 0] | 0) | i6 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i5 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
     break L91;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i7 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i8 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i26 >> 0] | 0) | i6 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i5 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
     break L91;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i26 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     HEAP8[i1 + ((HEAPU8[i28 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i1 + ((HEAPU8[i30 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     break L91;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i7 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i8 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i26 >> 0] | 0) | i6 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i5 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
     break L91;
    }
   default:
    break L91;
   } while (0);
   i1 = i1 + i24 | 0;
   i2 = i2 + i23 | 0;
   i3 = 76;
   continue;
  } else if ((i3 | 0) == 76) {
   switch (i23 | 0) {
   case 1:
    {
     i8 = HEAPU8[i2 >> 0] | 0;
     i3 = i8;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i8) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((i8 & HEAP32[i12 >> 2]) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i8 = HEAPU16[i2 >> 1] | 0;
     i3 = i8;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i8) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((i8 & HEAP32[i12 >> 2]) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i3 = 0;
     i5 = 255;
     i6 = HEAPU8[i2 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = HEAPU8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i8 = HEAPU8[i2 + ((HEAPU8[i13 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i8 = HEAP32[i2 >> 2] | 0;
     i3 = i8;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i8) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i8) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
     i8 = 0;
    }
   }
   L106 : do if ((i3 & i33 | 0) != (i34 | 0)) switch (i24 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i7 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i8 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i26 >> 0] | 0) | i6 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i5 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
     break L106;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i7 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i8 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i26 >> 0] | 0) | i6 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i5 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
     break L106;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i26 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     HEAP8[i1 + ((HEAPU8[i28 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i1 + ((HEAPU8[i30 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     break L106;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i7 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i8 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i26 >> 0] | 0) | i6 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i5 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
     break L106;
    }
   default:
    break L106;
   } while (0);
   i1 = i1 + i24 | 0;
   i2 = i2 + i23 | 0;
   i3 = 88;
   continue;
  } else if ((i3 | 0) == 88) {
   switch (i23 | 0) {
   case 1:
    {
     i8 = HEAPU8[i2 >> 0] | 0;
     i3 = i8;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i8) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((i8 & HEAP32[i12 >> 2]) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i8 = HEAPU16[i2 >> 1] | 0;
     i3 = i8;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i8) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((i8 & HEAP32[i12 >> 2]) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i3 = 0;
     i5 = 255;
     i6 = HEAPU8[i2 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = HEAPU8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i8 = HEAPU8[i2 + ((HEAPU8[i13 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i8 = HEAP32[i2 >> 2] | 0;
     i3 = i8;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i8) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i8) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
     i8 = 0;
    }
   }
   L121 : do if ((i3 & i33 | 0) != (i34 | 0)) switch (i24 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i7 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i8 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i26 >> 0] | 0) | i6 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i5 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
     break L121;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i7 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i8 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i26 >> 0] | 0) | i6 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i5 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
     break L121;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i26 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     HEAP8[i1 + ((HEAPU8[i28 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i1 + ((HEAPU8[i30 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     break L121;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i7 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i8 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i26 >> 0] | 0) | i6 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i5 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
     break L121;
    }
   default:
    break L121;
   } while (0);
   i1 = i1 + i24 | 0;
   i2 = i2 + i23 | 0;
   if ((i9 | 0) > 1) {
    i9 = i9 + -1 | 0;
    i3 = 4;
    continue;
   } else {
    i3 = 100;
    continue;
   }
  } else if ((i3 | 0) == 100) if (!i4) break L4; else {
   i1 = i1 + i37 | 0;
   i2 = i2 + i36 | 0;
   continue L4;
  }
 }
 return;
}

function _BlitNtoNPixelAlpha(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0;
 i1 = HEAP32[i5 + 24 >> 2] | 0;
 i4 = HEAP32[i5 + 28 >> 2] | 0;
 i42 = HEAP32[i5 + 16 >> 2] | 0;
 i43 = HEAP32[i5 + 36 >> 2] | 0;
 i2 = HEAP32[i5 + 40 >> 2] | 0;
 i3 = HEAP32[i5 + 44 >> 2] | 0;
 i39 = HEAPU8[i2 + 9 >> 0] | 0;
 i40 = HEAPU8[i3 + 9 >> 0] | 0;
 if (!i4) return;
 i41 = (i1 + 3 | 0) / 4 | 0;
 i27 = i1 & 3;
 i28 = i2 + 12 | 0;
 i29 = i2 + 32 | 0;
 i30 = i2 + 28 | 0;
 i31 = i2 + 16 | 0;
 i32 = i2 + 33 | 0;
 i33 = i2 + 29 | 0;
 i34 = i2 + 20 | 0;
 i35 = i2 + 34 | 0;
 i36 = i2 + 30 | 0;
 i37 = i2 + 24 | 0;
 i38 = i2 + 35 | 0;
 i15 = i2 + 31 | 0;
 i16 = i3 + 28 | 0;
 i17 = i3 + 32 | 0;
 i18 = i3 + 29 | 0;
 i19 = i3 + 33 | 0;
 i20 = i3 + 30 | 0;
 i21 = i3 + 34 | 0;
 i22 = i3 + 31 | 0;
 i23 = i3 + 35 | 0;
 i24 = i3 + 12 | 0;
 i25 = i3 + 16 | 0;
 i26 = i3 + 20 | 0;
 i14 = i3 + 24 | 0;
 i1 = HEAP32[i5 + 20 >> 2] | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 L4 : while (1) {
  i4 = i4 + -1 | 0;
  switch (i27 | 0) {
  case 0:
   {
    i13 = i41;
    i3 = 4;
    break;
   }
  case 3:
   {
    i13 = i41;
    i3 = 21;
    break;
   }
  case 2:
   {
    i13 = i41;
    i3 = 38;
    break;
   }
  case 1:
   {
    i13 = i41;
    i3 = 55;
    break;
   }
  default:
   i3 = 72;
  }
  while (1) if ((i3 | 0) == 4) {
   i3 = 0;
   switch (i39 | 0) {
   case 1:
    {
     i56 = HEAPU8[i2 >> 0] | 0;
     i44 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i37 >> 2] & i56) >>> (HEAPU8[i38 >> 0] | 0)) >> 0] | 0;
     i48 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i36 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i56) >>> (HEAPU8[i35 >> 0] | 0)) >> 0] | 0;
     i52 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i33 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i56) >>> (HEAPU8[i32 >> 0] | 0)) >> 0] | 0;
     i56 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((i56 & HEAP32[i28 >> 2]) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i3 = 9;
     break;
    }
   case 2:
    {
     i56 = HEAPU16[i2 >> 1] | 0;
     i44 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i37 >> 2] & i56) >>> (HEAPU8[i38 >> 0] | 0)) >> 0] | 0;
     i48 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i36 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i56) >>> (HEAPU8[i35 >> 0] | 0)) >> 0] | 0;
     i52 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i33 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i56) >>> (HEAPU8[i32 >> 0] | 0)) >> 0] | 0;
     i56 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((i56 & HEAP32[i28 >> 2]) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i3 = 9;
     break;
    }
   case 3:
    {
     i12 = 255;
     i11 = HEAPU8[i2 + ((HEAPU8[i35 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i9 = HEAPU8[i2 + ((HEAPU8[i32 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i29 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i3 = 10;
     break;
    }
   case 4:
    {
     i56 = HEAP32[i2 >> 2] | 0;
     i44 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i37 >> 2] & i56) >>> (HEAPU8[i38 >> 0] | 0)) >> 0] | 0;
     i48 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i36 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i56) >>> (HEAPU8[i35 >> 0] | 0)) >> 0] | 0;
     i52 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i33 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i56) >>> (HEAPU8[i32 >> 0] | 0)) >> 0] | 0;
     i56 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i28 >> 2] & i56) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i3 = 9;
     break;
    }
   default:
    {}
   }
   if ((i3 | 0) == 9 ? (i3 = 0, (i44 | 0) != 0) : 0) {
    i12 = i44;
    i11 = i48;
    i9 = i52;
    i6 = i56;
    i3 = 10;
   }
   L17 : do if ((i3 | 0) == 10) {
    switch (i40 | 0) {
    case 1:
     {
      i3 = HEAPU8[i1 >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i26 >> 2] & i3) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((i3 & HEAP32[i24 >> 2]) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i3 = HEAPU16[i1 >> 1] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i26 >> 2] & i3) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((i3 & HEAP32[i24 >> 2]) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i10 = 255;
      i8 = HEAPU8[i1 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAPU8[i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i3 = HEAPU8[i1 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i3 = HEAP32[i1 >> 2] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i26 >> 2] & i3) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i10 = 0;
      i8 = 0;
      i5 = 0;
      i3 = 0;
     }
    }
    i7 = (((Math_imul(i6 - i3 | 0, i12) | 0) >>> 0) / 255 | 0) + i3 | 0;
    i6 = (((Math_imul(i9 - i5 | 0, i12) | 0) >>> 0) / 255 | 0) + i5 | 0;
    i5 = (((Math_imul(i11 - i8 | 0, i12) | 0) >>> 0) / 255 | 0) + i8 | 0;
    i3 = i10 + i12 - (((Math_imul(i10, i12) | 0) >>> 0) / 255 | 0) | 0;
    switch (i40 | 0) {
    case 1:
     {
      HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0) | i3 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
      break L17;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0) | i3 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
      break L17;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
      HEAP8[i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i1 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      break L17;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0) | i3 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
      break L17;
     }
    default:
     break L17;
    }
   } while (0);
   i1 = i1 + i40 | 0;
   i2 = i2 + i39 | 0;
   i3 = 21;
   continue;
  } else if ((i3 | 0) == 21) {
   i3 = 0;
   switch (i39 | 0) {
   case 1:
    {
     i57 = HEAPU8[i2 >> 0] | 0;
     i45 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i37 >> 2] & i57) >>> (HEAPU8[i38 >> 0] | 0)) >> 0] | 0;
     i49 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i36 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i57) >>> (HEAPU8[i35 >> 0] | 0)) >> 0] | 0;
     i53 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i33 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i57) >>> (HEAPU8[i32 >> 0] | 0)) >> 0] | 0;
     i57 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((i57 & HEAP32[i28 >> 2]) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i3 = 26;
     break;
    }
   case 2:
    {
     i57 = HEAPU16[i2 >> 1] | 0;
     i45 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i37 >> 2] & i57) >>> (HEAPU8[i38 >> 0] | 0)) >> 0] | 0;
     i49 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i36 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i57) >>> (HEAPU8[i35 >> 0] | 0)) >> 0] | 0;
     i53 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i33 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i57) >>> (HEAPU8[i32 >> 0] | 0)) >> 0] | 0;
     i57 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((i57 & HEAP32[i28 >> 2]) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i3 = 26;
     break;
    }
   case 3:
    {
     i12 = 255;
     i11 = HEAPU8[i2 + ((HEAPU8[i35 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i9 = HEAPU8[i2 + ((HEAPU8[i32 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i29 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i3 = 27;
     break;
    }
   case 4:
    {
     i57 = HEAP32[i2 >> 2] | 0;
     i45 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i37 >> 2] & i57) >>> (HEAPU8[i38 >> 0] | 0)) >> 0] | 0;
     i49 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i36 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i57) >>> (HEAPU8[i35 >> 0] | 0)) >> 0] | 0;
     i53 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i33 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i57) >>> (HEAPU8[i32 >> 0] | 0)) >> 0] | 0;
     i57 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i28 >> 2] & i57) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i3 = 26;
     break;
    }
   default:
    {}
   }
   if ((i3 | 0) == 26 ? (i3 = 0, (i45 | 0) != 0) : 0) {
    i12 = i45;
    i11 = i49;
    i9 = i53;
    i6 = i57;
    i3 = 27;
   }
   L39 : do if ((i3 | 0) == 27) {
    switch (i40 | 0) {
    case 1:
     {
      i3 = HEAPU8[i1 >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i26 >> 2] & i3) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((i3 & HEAP32[i24 >> 2]) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i3 = HEAPU16[i1 >> 1] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i26 >> 2] & i3) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((i3 & HEAP32[i24 >> 2]) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i10 = 255;
      i8 = HEAPU8[i1 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAPU8[i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i3 = HEAPU8[i1 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i3 = HEAP32[i1 >> 2] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i26 >> 2] & i3) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i10 = 0;
      i8 = 0;
      i5 = 0;
      i3 = 0;
     }
    }
    i7 = (((Math_imul(i6 - i3 | 0, i12) | 0) >>> 0) / 255 | 0) + i3 | 0;
    i6 = (((Math_imul(i9 - i5 | 0, i12) | 0) >>> 0) / 255 | 0) + i5 | 0;
    i5 = (((Math_imul(i11 - i8 | 0, i12) | 0) >>> 0) / 255 | 0) + i8 | 0;
    i3 = i10 + i12 - (((Math_imul(i10, i12) | 0) >>> 0) / 255 | 0) | 0;
    switch (i40 | 0) {
    case 1:
     {
      HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0) | i3 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
      break L39;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0) | i3 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
      break L39;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
      HEAP8[i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i1 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      break L39;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0) | i3 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
      break L39;
     }
    default:
     break L39;
    }
   } while (0);
   i1 = i1 + i40 | 0;
   i2 = i2 + i39 | 0;
   i3 = 38;
   continue;
  } else if ((i3 | 0) == 38) {
   i3 = 0;
   switch (i39 | 0) {
   case 1:
    {
     i58 = HEAPU8[i2 >> 0] | 0;
     i46 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i37 >> 2] & i58) >>> (HEAPU8[i38 >> 0] | 0)) >> 0] | 0;
     i50 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i36 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i58) >>> (HEAPU8[i35 >> 0] | 0)) >> 0] | 0;
     i54 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i33 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i58) >>> (HEAPU8[i32 >> 0] | 0)) >> 0] | 0;
     i58 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((i58 & HEAP32[i28 >> 2]) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i3 = 43;
     break;
    }
   case 2:
    {
     i58 = HEAPU16[i2 >> 1] | 0;
     i46 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i37 >> 2] & i58) >>> (HEAPU8[i38 >> 0] | 0)) >> 0] | 0;
     i50 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i36 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i58) >>> (HEAPU8[i35 >> 0] | 0)) >> 0] | 0;
     i54 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i33 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i58) >>> (HEAPU8[i32 >> 0] | 0)) >> 0] | 0;
     i58 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((i58 & HEAP32[i28 >> 2]) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i3 = 43;
     break;
    }
   case 3:
    {
     i12 = 255;
     i11 = HEAPU8[i2 + ((HEAPU8[i35 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i9 = HEAPU8[i2 + ((HEAPU8[i32 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i29 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i3 = 44;
     break;
    }
   case 4:
    {
     i58 = HEAP32[i2 >> 2] | 0;
     i46 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i37 >> 2] & i58) >>> (HEAPU8[i38 >> 0] | 0)) >> 0] | 0;
     i50 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i36 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i58) >>> (HEAPU8[i35 >> 0] | 0)) >> 0] | 0;
     i54 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i33 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i58) >>> (HEAPU8[i32 >> 0] | 0)) >> 0] | 0;
     i58 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i28 >> 2] & i58) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i3 = 43;
     break;
    }
   default:
    {}
   }
   if ((i3 | 0) == 43 ? (i3 = 0, (i46 | 0) != 0) : 0) {
    i12 = i46;
    i11 = i50;
    i9 = i54;
    i6 = i58;
    i3 = 44;
   }
   L61 : do if ((i3 | 0) == 44) {
    switch (i40 | 0) {
    case 1:
     {
      i3 = HEAPU8[i1 >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i26 >> 2] & i3) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((i3 & HEAP32[i24 >> 2]) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i3 = HEAPU16[i1 >> 1] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i26 >> 2] & i3) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((i3 & HEAP32[i24 >> 2]) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i10 = 255;
      i8 = HEAPU8[i1 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAPU8[i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i3 = HEAPU8[i1 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i3 = HEAP32[i1 >> 2] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i26 >> 2] & i3) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i10 = 0;
      i8 = 0;
      i5 = 0;
      i3 = 0;
     }
    }
    i7 = (((Math_imul(i6 - i3 | 0, i12) | 0) >>> 0) / 255 | 0) + i3 | 0;
    i6 = (((Math_imul(i9 - i5 | 0, i12) | 0) >>> 0) / 255 | 0) + i5 | 0;
    i5 = (((Math_imul(i11 - i8 | 0, i12) | 0) >>> 0) / 255 | 0) + i8 | 0;
    i3 = i10 + i12 - (((Math_imul(i10, i12) | 0) >>> 0) / 255 | 0) | 0;
    switch (i40 | 0) {
    case 1:
     {
      HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0) | i3 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
      break L61;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0) | i3 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
      break L61;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
      HEAP8[i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i1 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      break L61;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0) | i3 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
      break L61;
     }
    default:
     break L61;
    }
   } while (0);
   i1 = i1 + i40 | 0;
   i2 = i2 + i39 | 0;
   i3 = 55;
   continue;
  } else if ((i3 | 0) == 55) {
   i3 = 0;
   switch (i39 | 0) {
   case 1:
    {
     i59 = HEAPU8[i2 >> 0] | 0;
     i47 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i37 >> 2] & i59) >>> (HEAPU8[i38 >> 0] | 0)) >> 0] | 0;
     i51 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i36 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i59) >>> (HEAPU8[i35 >> 0] | 0)) >> 0] | 0;
     i55 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i33 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i59) >>> (HEAPU8[i32 >> 0] | 0)) >> 0] | 0;
     i59 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((i59 & HEAP32[i28 >> 2]) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i3 = 60;
     break;
    }
   case 2:
    {
     i59 = HEAPU16[i2 >> 1] | 0;
     i47 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i37 >> 2] & i59) >>> (HEAPU8[i38 >> 0] | 0)) >> 0] | 0;
     i51 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i36 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i59) >>> (HEAPU8[i35 >> 0] | 0)) >> 0] | 0;
     i55 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i33 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i59) >>> (HEAPU8[i32 >> 0] | 0)) >> 0] | 0;
     i59 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((i59 & HEAP32[i28 >> 2]) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i3 = 60;
     break;
    }
   case 3:
    {
     i12 = 255;
     i11 = HEAPU8[i2 + ((HEAPU8[i35 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i9 = HEAPU8[i2 + ((HEAPU8[i32 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i29 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i3 = 61;
     break;
    }
   case 4:
    {
     i59 = HEAP32[i2 >> 2] | 0;
     i47 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i37 >> 2] & i59) >>> (HEAPU8[i38 >> 0] | 0)) >> 0] | 0;
     i51 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i36 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i59) >>> (HEAPU8[i35 >> 0] | 0)) >> 0] | 0;
     i55 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i33 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i59) >>> (HEAPU8[i32 >> 0] | 0)) >> 0] | 0;
     i59 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i28 >> 2] & i59) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i3 = 60;
     break;
    }
   default:
    {}
   }
   if ((i3 | 0) == 60 ? (i3 = 0, (i47 | 0) != 0) : 0) {
    i12 = i47;
    i11 = i51;
    i9 = i55;
    i6 = i59;
    i3 = 61;
   }
   L83 : do if ((i3 | 0) == 61) {
    switch (i40 | 0) {
    case 1:
     {
      i3 = HEAPU8[i1 >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i26 >> 2] & i3) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((i3 & HEAP32[i24 >> 2]) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i3 = HEAPU16[i1 >> 1] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i26 >> 2] & i3) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((i3 & HEAP32[i24 >> 2]) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i10 = 255;
      i8 = HEAPU8[i1 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAPU8[i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i3 = HEAPU8[i1 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i3 = HEAP32[i1 >> 2] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i26 >> 2] & i3) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i10 = 0;
      i8 = 0;
      i5 = 0;
      i3 = 0;
     }
    }
    i7 = (((Math_imul(i6 - i3 | 0, i12) | 0) >>> 0) / 255 | 0) + i3 | 0;
    i6 = (((Math_imul(i9 - i5 | 0, i12) | 0) >>> 0) / 255 | 0) + i5 | 0;
    i5 = (((Math_imul(i11 - i8 | 0, i12) | 0) >>> 0) / 255 | 0) + i8 | 0;
    i3 = i10 + i12 - (((Math_imul(i10, i12) | 0) >>> 0) / 255 | 0) | 0;
    switch (i40 | 0) {
    case 1:
     {
      HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0) | i3 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
      break L83;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0) | i3 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
      break L83;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
      HEAP8[i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i1 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      break L83;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0) | i3 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
      break L83;
     }
    default:
     break L83;
    }
   } while (0);
   i2 = i2 + i39 | 0;
   i1 = i1 + i40 | 0;
   if ((i13 | 0) > 1) {
    i13 = i13 + -1 | 0;
    i3 = 4;
    continue;
   } else {
    i3 = 72;
    continue;
   }
  } else if ((i3 | 0) == 72) if (!i4) break L4; else {
   i1 = i1 + i43 | 0;
   i2 = i2 + i42 | 0;
   continue L4;
  }
 }
 return;
}

function _BlitNtoN(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i1 = HEAP32[i5 + 24 >> 2] | 0;
 i4 = HEAP32[i5 + 28 >> 2] | 0;
 i31 = HEAP32[i5 + 16 >> 2] | 0;
 i26 = HEAP32[i5 + 36 >> 2] | 0;
 i3 = HEAP32[i5 + 40 >> 2] | 0;
 i27 = HEAPU8[i3 + 9 >> 0] | 0;
 i2 = HEAP32[i5 + 44 >> 2] | 0;
 i28 = HEAPU8[i2 + 9 >> 0] | 0;
 if (!(HEAP32[i2 + 24 >> 2] | 0)) i29 = 0; else i29 = HEAPU8[i5 + 63 >> 0] | 0;
 if (!i4) return;
 i30 = (i1 + 7 | 0) / 8 | 0;
 i18 = i1 & 7;
 i19 = i2 + 28 | 0;
 i20 = i2 + 32 | 0;
 i21 = i2 + 29 | 0;
 i22 = i2 + 33 | 0;
 i23 = i2 + 30 | 0;
 i24 = i2 + 34 | 0;
 i25 = i2 + 31 | 0;
 i9 = i2 + 35 | 0;
 i10 = i3 + 12 | 0;
 i11 = i3 + 32 | 0;
 i12 = i3 + 28 | 0;
 i13 = i3 + 16 | 0;
 i14 = i3 + 33 | 0;
 i15 = i3 + 29 | 0;
 i16 = i3 + 20 | 0;
 i17 = i3 + 34 | 0;
 i8 = i3 + 30 | 0;
 i1 = HEAP32[i5 + 20 >> 2] | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 L7 : while (1) {
  i4 = i4 + -1 | 0;
  switch (i18 | 0) {
  case 0:
   {
    i7 = i30;
    i3 = 6;
    break;
   }
  case 7:
   {
    i7 = i30;
    i3 = 17;
    break;
   }
  case 6:
   {
    i7 = i30;
    i3 = 28;
    break;
   }
  case 5:
   {
    i7 = i30;
    i3 = 39;
    break;
   }
  case 4:
   {
    i7 = i30;
    i3 = 50;
    break;
   }
  case 3:
   {
    i7 = i30;
    i3 = 61;
    break;
   }
  case 2:
   {
    i7 = i30;
    i3 = 72;
    break;
   }
  case 1:
   {
    i7 = i30;
    i3 = 83;
    break;
   }
  default:
   i3 = 94;
  }
  while (1) if ((i3 | 0) == 6) {
   switch (i27 | 0) {
   case 1:
    {
     i6 = HEAPU8[i2 >> 0] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i2 >> 1] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i3 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i6 = HEAP32[i2 >> 2] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i6) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
    }
   }
   switch (i28 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i5 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0) | i6 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i3 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i24 >> 0] | 0) | i29 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i9 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i5 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0) | i6 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i3 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i24 >> 0] | 0) | i29 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i9 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i1 + ((HEAPU8[i22 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
     HEAP8[i1 + ((HEAPU8[i24 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
     break;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i5 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0) | i6 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i3 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i24 >> 0] | 0) | i29 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i9 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i28 | 0;
   i2 = i2 + i27 | 0;
   i3 = 17;
   continue;
  } else if ((i3 | 0) == 17) {
   switch (i27 | 0) {
   case 1:
    {
     i6 = HEAPU8[i2 >> 0] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i2 >> 1] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i3 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i6 = HEAP32[i2 >> 2] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i6) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
    }
   }
   switch (i28 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i5 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0) | i6 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i3 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i24 >> 0] | 0) | i29 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i9 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i5 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0) | i6 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i3 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i24 >> 0] | 0) | i29 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i9 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i1 + ((HEAPU8[i22 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
     HEAP8[i1 + ((HEAPU8[i24 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
     break;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i5 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0) | i6 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i3 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i24 >> 0] | 0) | i29 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i9 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i28 | 0;
   i2 = i2 + i27 | 0;
   i3 = 28;
   continue;
  } else if ((i3 | 0) == 28) {
   switch (i27 | 0) {
   case 1:
    {
     i6 = HEAPU8[i2 >> 0] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i2 >> 1] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i3 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i6 = HEAP32[i2 >> 2] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i6) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
    }
   }
   switch (i28 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i5 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0) | i6 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i3 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i24 >> 0] | 0) | i29 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i9 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i5 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0) | i6 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i3 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i24 >> 0] | 0) | i29 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i9 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i1 + ((HEAPU8[i22 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
     HEAP8[i1 + ((HEAPU8[i24 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
     break;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i5 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0) | i6 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i3 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i24 >> 0] | 0) | i29 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i9 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i28 | 0;
   i2 = i2 + i27 | 0;
   i3 = 39;
   continue;
  } else if ((i3 | 0) == 39) {
   switch (i27 | 0) {
   case 1:
    {
     i6 = HEAPU8[i2 >> 0] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i2 >> 1] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i3 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i6 = HEAP32[i2 >> 2] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i6) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
    }
   }
   switch (i28 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i5 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0) | i6 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i3 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i24 >> 0] | 0) | i29 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i9 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i5 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0) | i6 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i3 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i24 >> 0] | 0) | i29 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i9 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i1 + ((HEAPU8[i22 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
     HEAP8[i1 + ((HEAPU8[i24 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
     break;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i5 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0) | i6 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i3 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i24 >> 0] | 0) | i29 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i9 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i28 | 0;
   i2 = i2 + i27 | 0;
   i3 = 50;
   continue;
  } else if ((i3 | 0) == 50) {
   switch (i27 | 0) {
   case 1:
    {
     i6 = HEAPU8[i2 >> 0] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i2 >> 1] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i3 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i6 = HEAP32[i2 >> 2] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i6) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
    }
   }
   switch (i28 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i5 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0) | i6 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i3 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i24 >> 0] | 0) | i29 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i9 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i5 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0) | i6 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i3 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i24 >> 0] | 0) | i29 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i9 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i1 + ((HEAPU8[i22 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
     HEAP8[i1 + ((HEAPU8[i24 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
     break;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i5 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0) | i6 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i3 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i24 >> 0] | 0) | i29 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i9 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i28 | 0;
   i2 = i2 + i27 | 0;
   i3 = 61;
   continue;
  } else if ((i3 | 0) == 61) {
   switch (i27 | 0) {
   case 1:
    {
     i6 = HEAPU8[i2 >> 0] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i2 >> 1] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i3 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i6 = HEAP32[i2 >> 2] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i6) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
    }
   }
   switch (i28 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i5 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0) | i6 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i3 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i24 >> 0] | 0) | i29 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i9 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i5 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0) | i6 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i3 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i24 >> 0] | 0) | i29 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i9 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i1 + ((HEAPU8[i22 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
     HEAP8[i1 + ((HEAPU8[i24 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
     break;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i5 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0) | i6 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i3 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i24 >> 0] | 0) | i29 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i9 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i28 | 0;
   i2 = i2 + i27 | 0;
   i3 = 72;
   continue;
  } else if ((i3 | 0) == 72) {
   switch (i27 | 0) {
   case 1:
    {
     i6 = HEAPU8[i2 >> 0] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i2 >> 1] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i3 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i6 = HEAP32[i2 >> 2] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i6) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
    }
   }
   switch (i28 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i5 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0) | i6 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i3 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i24 >> 0] | 0) | i29 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i9 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i5 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0) | i6 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i3 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i24 >> 0] | 0) | i29 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i9 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i1 + ((HEAPU8[i22 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
     HEAP8[i1 + ((HEAPU8[i24 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
     break;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i5 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0) | i6 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i3 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i24 >> 0] | 0) | i29 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i9 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i28 | 0;
   i2 = i2 + i27 | 0;
   i3 = 83;
   continue;
  } else if ((i3 | 0) == 83) {
   switch (i27 | 0) {
   case 1:
    {
     i6 = HEAPU8[i2 >> 0] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i2 >> 1] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i10 >> 2]) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i3 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i6 = HEAP32[i2 >> 2] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i6) >>> (HEAPU8[i11 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
    }
   }
   switch (i28 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i5 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0) | i6 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i3 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i24 >> 0] | 0) | i29 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i9 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i5 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0) | i6 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i3 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i24 >> 0] | 0) | i29 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i9 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i1 + ((HEAPU8[i22 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
     HEAP8[i1 + ((HEAPU8[i24 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
     break;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i5 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0) | i6 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i3 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i24 >> 0] | 0) | i29 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i9 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i28 | 0;
   i2 = i2 + i27 | 0;
   if ((i7 | 0) > 1) {
    i7 = i7 + -1 | 0;
    i3 = 6;
    continue;
   } else {
    i3 = 94;
    continue;
   }
  } else if ((i3 | 0) == 94) if (!i4) break L7; else {
   i1 = i1 + i26 | 0;
   i2 = i2 + i31 | 0;
   continue L7;
  }
 }
 return;
}

function _SDL_BlendLine_RGBA4(i35, i33, i34, i6, i7, i5, i1, i4, i3, i2, i8) {
 i35 = i35 | 0;
 i33 = i33 | 0;
 i34 = i34 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0;
 i36 = HEAP32[i35 + 4 >> 2] | 0;
 i1 = i1 & 255;
 if ((i5 + -1 | 0) >>> 0 < 2) {
  i37 = i2 & 255;
  i32 = i37;
  i39 = ((Math_imul(i37, i3 & 255) | 0) >>> 0) / 255 | 0;
  i38 = ((Math_imul(i37, i4 & 255) | 0) >>> 0) / 255 | 0;
  i37 = ((Math_imul(i37, i1) | 0) >>> 0) / 255 | 0;
 } else {
  i32 = i2 & 255;
  i39 = i3 & 255;
  i38 = i4 & 255;
  i37 = i1;
 }
 i31 = i32 ^ 255;
 if ((i7 | 0) == (i34 | 0)) switch (i5 | 0) {
 case 1:
  {
   i1 = Math_imul((HEAP32[i35 + 16 >> 2] | 0) / (HEAPU8[i36 + 9 >> 0] | 0 | 0) | 0, i7) | 0;
   if ((i6 | 0) < (i33 | 0)) {
    i34 = (i8 | 0) != 0 & 1;
    i19 = (i34 ^ 1) + i6 + i1 | 0;
    i1 = i33 - i6 + i34 | 0;
   } else {
    i19 = i1 + i33 | 0;
    i1 = i6 - i33 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i12 = i36 + 12 | 0;
   i13 = i36 + 16 | 0;
   i14 = i36 + 20 | 0;
   i15 = i36 + 24 | 0;
   i4 = HEAPU8[i36 + 28 >> 0] | 0;
   i8 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i36 + 29 >> 0] | 0;
   i9 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i36 + 30 >> 0] | 0;
   i10 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i7 = HEAPU8[i36 + 31 >> 0] | 0;
   i11 = HEAP32[5992 + (i7 << 2) >> 2] | 0;
   i16 = HEAPU8[i36 + 32 >> 0] | 0;
   i17 = HEAPU8[i36 + 33 >> 0] | 0;
   i18 = HEAPU8[i36 + 34 >> 0] | 0;
   i3 = HEAPU8[i36 + 35 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i35 + 20 >> 2] | 0) + (i19 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i36 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = ((((Math_imul(HEAPU8[i9 + ((HEAP32[i13 >> 2] & i36) >>> i17) >> 0] | 0, i31) | 0) >>> 0) / 255 | 0) + i38 | 0) >>> i5 << i17 | ((((Math_imul(HEAPU8[i8 + ((HEAP32[i12 >> 2] & i36) >>> i16) >> 0] | 0, i31) | 0) >>> 0) / 255 | 0) + i37 | 0) >>> i4 << i16 | ((((Math_imul(HEAPU8[i10 + ((HEAP32[i14 >> 2] & i36) >>> i18) >> 0] | 0, i31) | 0) >>> 0) / 255 | 0) + i39 | 0) >>> i6 << i18 | ((((Math_imul(HEAPU8[i11 + ((HEAP32[i15 >> 2] & i36) >>> i3) >> 0] | 0, i31) | 0) >>> 0) / 255 | 0) + i32 | 0) >>> i7 << i3;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 case 2:
  {
   i1 = Math_imul((HEAP32[i35 + 16 >> 2] | 0) / (HEAPU8[i36 + 9 >> 0] | 0 | 0) | 0, i7) | 0;
   if ((i6 | 0) < (i33 | 0)) {
    i34 = (i8 | 0) != 0 & 1;
    i19 = (i34 ^ 1) + i6 + i1 | 0;
    i1 = i33 - i6 + i34 | 0;
   } else {
    i19 = i1 + i33 | 0;
    i1 = i6 - i33 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i12 = i36 + 12 | 0;
   i13 = i36 + 16 | 0;
   i14 = i36 + 20 | 0;
   i15 = i36 + 24 | 0;
   i4 = HEAPU8[i36 + 28 >> 0] | 0;
   i8 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i36 + 29 >> 0] | 0;
   i9 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i36 + 30 >> 0] | 0;
   i10 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i7 = HEAPU8[i36 + 31 >> 0] | 0;
   i11 = HEAP32[5992 + (i7 << 2) >> 2] | 0;
   i16 = HEAPU8[i36 + 32 >> 0] | 0;
   i17 = HEAPU8[i36 + 33 >> 0] | 0;
   i18 = HEAPU8[i36 + 34 >> 0] | 0;
   i3 = HEAPU8[i36 + 35 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i35 + 20 >> 2] | 0) + (i19 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i36 = HEAP32[i1 >> 2] | 0;
    i34 = (HEAPU8[i8 + ((HEAP32[i12 >> 2] & i36) >>> i16) >> 0] | 0) + i37 | 0;
    i33 = (HEAPU8[i9 + ((HEAP32[i13 >> 2] & i36) >>> i17) >> 0] | 0) + i38 | 0;
    i35 = (HEAPU8[i10 + ((HEAP32[i14 >> 2] & i36) >>> i18) >> 0] | 0) + i39 | 0;
    HEAP32[i1 >> 2] = (i33 >>> 0 > 255 ? 255 : i33) >>> i5 << i17 | (i34 >>> 0 > 255 ? 255 : i34) >>> i4 << i16 | (i35 >>> 0 > 255 ? 255 : i35) >>> i6 << i18 | (HEAPU8[i11 + ((HEAP32[i15 >> 2] & i36) >>> i3) >> 0] | 0) >>> i7 << i3;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 case 4:
  {
   i1 = Math_imul((HEAP32[i35 + 16 >> 2] | 0) / (HEAPU8[i36 + 9 >> 0] | 0 | 0) | 0, i7) | 0;
   if ((i6 | 0) < (i33 | 0)) {
    i34 = (i8 | 0) != 0 & 1;
    i19 = (i34 ^ 1) + i6 + i1 | 0;
    i1 = i33 - i6 + i34 | 0;
   } else {
    i19 = i1 + i33 | 0;
    i1 = i6 - i33 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i12 = i36 + 12 | 0;
   i13 = i36 + 16 | 0;
   i14 = i36 + 20 | 0;
   i15 = i36 + 24 | 0;
   i4 = HEAPU8[i36 + 28 >> 0] | 0;
   i8 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i36 + 29 >> 0] | 0;
   i9 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i36 + 30 >> 0] | 0;
   i10 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i7 = HEAPU8[i36 + 31 >> 0] | 0;
   i11 = HEAP32[5992 + (i7 << 2) >> 2] | 0;
   i16 = HEAPU8[i36 + 32 >> 0] | 0;
   i17 = HEAPU8[i36 + 33 >> 0] | 0;
   i18 = HEAPU8[i36 + 34 >> 0] | 0;
   i3 = HEAPU8[i36 + 35 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i35 + 20 >> 2] | 0) + (i19 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i36 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (HEAPU8[i11 + ((HEAP32[i15 >> 2] & i36) >>> i3) >> 0] | 0) >>> i7 << i3 | (((Math_imul(HEAPU8[i8 + ((HEAP32[i12 >> 2] & i36) >>> i16) >> 0] | 0, i37) | 0) >>> 0) / 255 | 0) >>> i4 << i16 | (((Math_imul(HEAPU8[i9 + ((HEAP32[i13 >> 2] & i36) >>> i17) >> 0] | 0, i38) | 0) >>> 0) / 255 | 0) >>> i5 << i17 | (((Math_imul(HEAPU8[i10 + ((HEAP32[i14 >> 2] & i36) >>> i18) >> 0] | 0, i39) | 0) >>> 0) / 255 | 0) >>> i6 << i18;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 default:
  {
   i1 = Math_imul((HEAP32[i35 + 16 >> 2] | 0) / (HEAPU8[i36 + 9 >> 0] | 0 | 0) | 0, i7) | 0;
   if ((i6 | 0) < (i33 | 0)) {
    i2 = (i8 | 0) != 0 & 1;
    i1 = (i2 ^ 1) + i6 + i1 | 0;
    i2 = i33 - i6 + i2 | 0;
   } else {
    i1 = i1 + i33 | 0;
    i2 = i6 - i33 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i2) return;
   i3 = i38 >>> (HEAPU8[i36 + 29 >> 0] | 0) << (HEAPU8[i36 + 33 >> 0] | 0) | i37 >>> (HEAPU8[i36 + 28 >> 0] | 0) << (HEAPU8[i36 + 32 >> 0] | 0) | i39 >>> (HEAPU8[i36 + 30 >> 0] | 0) << (HEAPU8[i36 + 34 >> 0] | 0) | i32 >>> (HEAPU8[i36 + 31 >> 0] | 0) << (HEAPU8[i36 + 35 >> 0] | 0);
   i1 = (HEAP32[i35 + 20 >> 2] | 0) + (i1 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP32[i1 >> 2] = i3;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 }
 if ((i6 | 0) == (i33 | 0)) switch (i5 | 0) {
 case 1:
  {
   i20 = (HEAP32[i35 + 16 >> 2] | 0) / (HEAPU8[i36 + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i34 | 0)) {
    i19 = (Math_imul(i20, i7) | 0) + i6 | 0;
    i1 = (i8 | 0) != 0;
    i19 = i19 + (i1 ? 0 : i20) | 0;
    i1 = i34 - i7 + (i1 & 1) | 0;
   } else {
    i19 = (Math_imul(i20, i34) | 0) + i6 | 0;
    i1 = i7 - i34 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i12 = i36 + 12 | 0;
   i13 = i36 + 16 | 0;
   i14 = i36 + 20 | 0;
   i15 = i36 + 24 | 0;
   i4 = HEAPU8[i36 + 28 >> 0] | 0;
   i8 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i36 + 29 >> 0] | 0;
   i9 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i36 + 30 >> 0] | 0;
   i10 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i7 = HEAPU8[i36 + 31 >> 0] | 0;
   i11 = HEAP32[5992 + (i7 << 2) >> 2] | 0;
   i16 = HEAPU8[i36 + 32 >> 0] | 0;
   i17 = HEAPU8[i36 + 33 >> 0] | 0;
   i18 = HEAPU8[i36 + 34 >> 0] | 0;
   i3 = HEAPU8[i36 + 35 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i35 + 20 >> 2] | 0) + (i19 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i36 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = ((((Math_imul(HEAPU8[i9 + ((HEAP32[i13 >> 2] & i36) >>> i17) >> 0] | 0, i31) | 0) >>> 0) / 255 | 0) + i38 | 0) >>> i5 << i17 | ((((Math_imul(HEAPU8[i8 + ((HEAP32[i12 >> 2] & i36) >>> i16) >> 0] | 0, i31) | 0) >>> 0) / 255 | 0) + i37 | 0) >>> i4 << i16 | ((((Math_imul(HEAPU8[i10 + ((HEAP32[i14 >> 2] & i36) >>> i18) >> 0] | 0, i31) | 0) >>> 0) / 255 | 0) + i39 | 0) >>> i6 << i18 | ((((Math_imul(HEAPU8[i11 + ((HEAP32[i15 >> 2] & i36) >>> i3) >> 0] | 0, i31) | 0) >>> 0) / 255 | 0) + i32 | 0) >>> i7 << i3;
    if (!i2) break; else i1 = i1 + (i20 << 2) | 0;
   }
   return;
  }
 case 2:
  {
   i20 = (HEAP32[i35 + 16 >> 2] | 0) / (HEAPU8[i36 + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i34 | 0)) {
    i19 = (Math_imul(i20, i7) | 0) + i6 | 0;
    i1 = (i8 | 0) != 0;
    i19 = i19 + (i1 ? 0 : i20) | 0;
    i1 = i34 - i7 + (i1 & 1) | 0;
   } else {
    i19 = (Math_imul(i20, i34) | 0) + i6 | 0;
    i1 = i7 - i34 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i12 = i36 + 12 | 0;
   i13 = i36 + 16 | 0;
   i14 = i36 + 20 | 0;
   i15 = i36 + 24 | 0;
   i4 = HEAPU8[i36 + 28 >> 0] | 0;
   i8 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i36 + 29 >> 0] | 0;
   i9 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i36 + 30 >> 0] | 0;
   i10 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i7 = HEAPU8[i36 + 31 >> 0] | 0;
   i11 = HEAP32[5992 + (i7 << 2) >> 2] | 0;
   i16 = HEAPU8[i36 + 32 >> 0] | 0;
   i17 = HEAPU8[i36 + 33 >> 0] | 0;
   i18 = HEAPU8[i36 + 34 >> 0] | 0;
   i3 = HEAPU8[i36 + 35 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i35 + 20 >> 2] | 0) + (i19 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i36 = HEAP32[i1 >> 2] | 0;
    i34 = (HEAPU8[i8 + ((HEAP32[i12 >> 2] & i36) >>> i16) >> 0] | 0) + i37 | 0;
    i33 = (HEAPU8[i9 + ((HEAP32[i13 >> 2] & i36) >>> i17) >> 0] | 0) + i38 | 0;
    i35 = (HEAPU8[i10 + ((HEAP32[i14 >> 2] & i36) >>> i18) >> 0] | 0) + i39 | 0;
    HEAP32[i1 >> 2] = (i33 >>> 0 > 255 ? 255 : i33) >>> i5 << i17 | (i34 >>> 0 > 255 ? 255 : i34) >>> i4 << i16 | (i35 >>> 0 > 255 ? 255 : i35) >>> i6 << i18 | (HEAPU8[i11 + ((HEAP32[i15 >> 2] & i36) >>> i3) >> 0] | 0) >>> i7 << i3;
    if (!i2) break; else i1 = i1 + (i20 << 2) | 0;
   }
   return;
  }
 case 4:
  {
   i20 = (HEAP32[i35 + 16 >> 2] | 0) / (HEAPU8[i36 + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i34 | 0)) {
    i19 = (Math_imul(i20, i7) | 0) + i6 | 0;
    i1 = (i8 | 0) != 0;
    i19 = i19 + (i1 ? 0 : i20) | 0;
    i1 = i34 - i7 + (i1 & 1) | 0;
   } else {
    i19 = (Math_imul(i20, i34) | 0) + i6 | 0;
    i1 = i7 - i34 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i12 = i36 + 12 | 0;
   i13 = i36 + 16 | 0;
   i14 = i36 + 20 | 0;
   i15 = i36 + 24 | 0;
   i4 = HEAPU8[i36 + 28 >> 0] | 0;
   i8 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i36 + 29 >> 0] | 0;
   i9 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i36 + 30 >> 0] | 0;
   i10 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i7 = HEAPU8[i36 + 31 >> 0] | 0;
   i11 = HEAP32[5992 + (i7 << 2) >> 2] | 0;
   i16 = HEAPU8[i36 + 32 >> 0] | 0;
   i17 = HEAPU8[i36 + 33 >> 0] | 0;
   i18 = HEAPU8[i36 + 34 >> 0] | 0;
   i3 = HEAPU8[i36 + 35 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i35 + 20 >> 2] | 0) + (i19 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i36 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (HEAPU8[i11 + ((HEAP32[i15 >> 2] & i36) >>> i3) >> 0] | 0) >>> i7 << i3 | (((Math_imul(HEAPU8[i8 + ((HEAP32[i12 >> 2] & i36) >>> i16) >> 0] | 0, i37) | 0) >>> 0) / 255 | 0) >>> i4 << i16 | (((Math_imul(HEAPU8[i9 + ((HEAP32[i13 >> 2] & i36) >>> i17) >> 0] | 0, i38) | 0) >>> 0) / 255 | 0) >>> i5 << i17 | (((Math_imul(HEAPU8[i10 + ((HEAP32[i14 >> 2] & i36) >>> i18) >> 0] | 0, i39) | 0) >>> 0) / 255 | 0) >>> i6 << i18;
    if (!i2) break; else i1 = i1 + (i20 << 2) | 0;
   }
   return;
  }
 default:
  {
   i4 = (HEAP32[i35 + 16 >> 2] | 0) / (HEAPU8[i36 + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i34 | 0)) {
    i1 = (Math_imul(i4, i7) | 0) + i6 | 0;
    i2 = (i8 | 0) != 0;
    i1 = i1 + (i2 ? 0 : i4) | 0;
    i2 = i34 - i7 + (i2 & 1) | 0;
   } else {
    i1 = (Math_imul(i4, i34) | 0) + i6 | 0;
    i2 = i7 - i34 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i2) return;
   i3 = i38 >>> (HEAPU8[i36 + 29 >> 0] | 0) << (HEAPU8[i36 + 33 >> 0] | 0) | i37 >>> (HEAPU8[i36 + 28 >> 0] | 0) << (HEAPU8[i36 + 32 >> 0] | 0) | i39 >>> (HEAPU8[i36 + 30 >> 0] | 0) << (HEAPU8[i36 + 34 >> 0] | 0) | i32 >>> (HEAPU8[i36 + 31 >> 0] | 0) << (HEAPU8[i36 + 35 >> 0] | 0);
   i1 = (HEAP32[i35 + 20 >> 2] | 0) + (i1 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP32[i1 >> 2] = i3;
    if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
   }
   return;
  }
 }
 i30 = i33 - i6 | 0;
 i1 = i34 - i7 | 0;
 if ((((i30 | 0) < 0 ? 0 - i30 | 0 : i30) | 0) == (((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0)) switch (i5 | 0) {
 case 1:
  {
   i2 = (HEAP32[i35 + 16 >> 2] | 0) / (HEAPU8[i36 + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i34 | 0)) {
    i20 = (Math_imul(i2, i7) | 0) + i6 | 0;
    i19 = i2 + ((i6 | 0) > (i33 | 0) ? -1 : 1) | 0;
    i20 = i20 + ((i8 | 0) == 0 ? i19 : 0) | 0;
   } else {
    i20 = (Math_imul(i2, i34) | 0) + i33 | 0;
    i1 = i7 - i34 | 0;
    i19 = i2 + ((i6 | 0) < (i33 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i12 = i36 + 12 | 0;
   i13 = i36 + 16 | 0;
   i14 = i36 + 20 | 0;
   i15 = i36 + 24 | 0;
   i4 = HEAPU8[i36 + 28 >> 0] | 0;
   i8 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i36 + 29 >> 0] | 0;
   i9 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i36 + 30 >> 0] | 0;
   i10 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i7 = HEAPU8[i36 + 31 >> 0] | 0;
   i11 = HEAP32[5992 + (i7 << 2) >> 2] | 0;
   i16 = HEAPU8[i36 + 32 >> 0] | 0;
   i17 = HEAPU8[i36 + 33 >> 0] | 0;
   i18 = HEAPU8[i36 + 34 >> 0] | 0;
   i3 = HEAPU8[i36 + 35 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i35 + 20 >> 2] | 0) + (i20 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i36 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = ((((Math_imul(HEAPU8[i9 + ((HEAP32[i13 >> 2] & i36) >>> i17) >> 0] | 0, i31) | 0) >>> 0) / 255 | 0) + i38 | 0) >>> i5 << i17 | ((((Math_imul(HEAPU8[i8 + ((HEAP32[i12 >> 2] & i36) >>> i16) >> 0] | 0, i31) | 0) >>> 0) / 255 | 0) + i37 | 0) >>> i4 << i16 | ((((Math_imul(HEAPU8[i10 + ((HEAP32[i14 >> 2] & i36) >>> i18) >> 0] | 0, i31) | 0) >>> 0) / 255 | 0) + i39 | 0) >>> i6 << i18 | ((((Math_imul(HEAPU8[i11 + ((HEAP32[i15 >> 2] & i36) >>> i3) >> 0] | 0, i31) | 0) >>> 0) / 255 | 0) + i32 | 0) >>> i7 << i3;
    if (!i2) break; else i1 = i1 + (i19 << 2) | 0;
   }
   return;
  }
 case 2:
  {
   i2 = (HEAP32[i35 + 16 >> 2] | 0) / (HEAPU8[i36 + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i34 | 0)) {
    i20 = (Math_imul(i2, i7) | 0) + i6 | 0;
    i19 = i2 + ((i6 | 0) > (i33 | 0) ? -1 : 1) | 0;
    i20 = i20 + ((i8 | 0) == 0 ? i19 : 0) | 0;
   } else {
    i20 = (Math_imul(i2, i34) | 0) + i33 | 0;
    i1 = i7 - i34 | 0;
    i19 = i2 + ((i6 | 0) < (i33 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i12 = i36 + 12 | 0;
   i13 = i36 + 16 | 0;
   i14 = i36 + 20 | 0;
   i15 = i36 + 24 | 0;
   i4 = HEAPU8[i36 + 28 >> 0] | 0;
   i8 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i36 + 29 >> 0] | 0;
   i9 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i36 + 30 >> 0] | 0;
   i10 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i7 = HEAPU8[i36 + 31 >> 0] | 0;
   i11 = HEAP32[5992 + (i7 << 2) >> 2] | 0;
   i16 = HEAPU8[i36 + 32 >> 0] | 0;
   i17 = HEAPU8[i36 + 33 >> 0] | 0;
   i18 = HEAPU8[i36 + 34 >> 0] | 0;
   i3 = HEAPU8[i36 + 35 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i35 + 20 >> 2] | 0) + (i20 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i36 = HEAP32[i1 >> 2] | 0;
    i34 = (HEAPU8[i8 + ((HEAP32[i12 >> 2] & i36) >>> i16) >> 0] | 0) + i37 | 0;
    i33 = (HEAPU8[i9 + ((HEAP32[i13 >> 2] & i36) >>> i17) >> 0] | 0) + i38 | 0;
    i35 = (HEAPU8[i10 + ((HEAP32[i14 >> 2] & i36) >>> i18) >> 0] | 0) + i39 | 0;
    HEAP32[i1 >> 2] = (i33 >>> 0 > 255 ? 255 : i33) >>> i5 << i17 | (i34 >>> 0 > 255 ? 255 : i34) >>> i4 << i16 | (i35 >>> 0 > 255 ? 255 : i35) >>> i6 << i18 | (HEAPU8[i11 + ((HEAP32[i15 >> 2] & i36) >>> i3) >> 0] | 0) >>> i7 << i3;
    if (!i2) break; else i1 = i1 + (i19 << 2) | 0;
   }
   return;
  }
 case 4:
  {
   i2 = (HEAP32[i35 + 16 >> 2] | 0) / (HEAPU8[i36 + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i34 | 0)) {
    i20 = (Math_imul(i2, i7) | 0) + i6 | 0;
    i19 = i2 + ((i6 | 0) > (i33 | 0) ? -1 : 1) | 0;
    i20 = i20 + ((i8 | 0) == 0 ? i19 : 0) | 0;
   } else {
    i20 = (Math_imul(i2, i34) | 0) + i33 | 0;
    i1 = i7 - i34 | 0;
    i19 = i2 + ((i6 | 0) < (i33 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i12 = i36 + 12 | 0;
   i13 = i36 + 16 | 0;
   i14 = i36 + 20 | 0;
   i15 = i36 + 24 | 0;
   i4 = HEAPU8[i36 + 28 >> 0] | 0;
   i8 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i36 + 29 >> 0] | 0;
   i9 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i36 + 30 >> 0] | 0;
   i10 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i7 = HEAPU8[i36 + 31 >> 0] | 0;
   i11 = HEAP32[5992 + (i7 << 2) >> 2] | 0;
   i16 = HEAPU8[i36 + 32 >> 0] | 0;
   i17 = HEAPU8[i36 + 33 >> 0] | 0;
   i18 = HEAPU8[i36 + 34 >> 0] | 0;
   i3 = HEAPU8[i36 + 35 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i35 + 20 >> 2] | 0) + (i20 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i36 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (HEAPU8[i11 + ((HEAP32[i15 >> 2] & i36) >>> i3) >> 0] | 0) >>> i7 << i3 | (((Math_imul(HEAPU8[i8 + ((HEAP32[i12 >> 2] & i36) >>> i16) >> 0] | 0, i37) | 0) >>> 0) / 255 | 0) >>> i4 << i16 | (((Math_imul(HEAPU8[i9 + ((HEAP32[i13 >> 2] & i36) >>> i17) >> 0] | 0, i38) | 0) >>> 0) / 255 | 0) >>> i5 << i17 | (((Math_imul(HEAPU8[i10 + ((HEAP32[i14 >> 2] & i36) >>> i18) >> 0] | 0, i39) | 0) >>> 0) / 255 | 0) >>> i6 << i18;
    if (!i2) break; else i1 = i1 + (i19 << 2) | 0;
   }
   return;
  }
 default:
  {
   i2 = (HEAP32[i35 + 16 >> 2] | 0) / (HEAPU8[i36 + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i34 | 0)) {
    i5 = (Math_imul(i2, i7) | 0) + i6 | 0;
    i4 = i2 + ((i6 | 0) > (i33 | 0) ? -1 : 1) | 0;
    i5 = i5 + ((i8 | 0) == 0 ? i4 : 0) | 0;
   } else {
    i5 = (Math_imul(i2, i34) | 0) + i33 | 0;
    i1 = i7 - i34 | 0;
    i4 = i2 + ((i6 | 0) < (i33 | 0) ? -1 : 1) | 0;
   }
   i2 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if (!i2) return;
   i3 = i38 >>> (HEAPU8[i36 + 29 >> 0] | 0) << (HEAPU8[i36 + 33 >> 0] | 0) | i37 >>> (HEAPU8[i36 + 28 >> 0] | 0) << (HEAPU8[i36 + 32 >> 0] | 0) | i39 >>> (HEAPU8[i36 + 30 >> 0] | 0) << (HEAPU8[i36 + 34 >> 0] | 0) | i32 >>> (HEAPU8[i36 + 31 >> 0] | 0) << (HEAPU8[i36 + 35 >> 0] | 0);
   i1 = (HEAP32[i35 + 20 >> 2] | 0) + (i5 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP32[i1 >> 2] = i3;
    if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
   }
   return;
  }
 } else switch (i5 | 0) {
 case 1:
  {
   i1 = i6 - i33 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i7 - i34 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i30 = i1 << 1;
    i5 = i30 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i4 = 1;
   } else {
    i30 = i2 << 1;
    i5 = i30 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i4 = 0;
   }
   i29 = i3 << 1;
   i27 = (i6 | 0) < (i33 | 0);
   i28 = i27 ? 0 - i2 | 0 : i2;
   i27 = i27 ? -1 : 1;
   i26 = (i7 | 0) < (i34 | 0);
   i25 = i26 ? 0 - i4 | 0 : i4;
   i26 = i26 ? -1 : 1;
   i24 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if ((i24 | 0) <= 0) return;
   i19 = i35 + 16 | 0;
   i20 = i36 + 12 | 0;
   i21 = i36 + 16 | 0;
   i22 = i36 + 20 | 0;
   i23 = i36 + 24 | 0;
   i11 = HEAP32[i35 + 20 >> 2] | 0;
   i7 = HEAPU8[i36 + 28 >> 0] | 0;
   i12 = HEAP32[5992 + (i7 << 2) >> 2] | 0;
   i8 = HEAPU8[i36 + 29 >> 0] | 0;
   i13 = HEAP32[5992 + (i8 << 2) >> 2] | 0;
   i9 = HEAPU8[i36 + 30 >> 0] | 0;
   i14 = HEAP32[5992 + (i9 << 2) >> 2] | 0;
   i10 = HEAPU8[i36 + 31 >> 0] | 0;
   i15 = HEAP32[5992 + (i10 << 2) >> 2] | 0;
   i16 = HEAPU8[i36 + 32 >> 0] | 0;
   i17 = HEAPU8[i36 + 33 >> 0] | 0;
   i18 = HEAPU8[i36 + 34 >> 0] | 0;
   i6 = HEAPU8[i36 + 35 >> 0] | 0;
   i4 = i5;
   i5 = 0;
   i3 = i33;
   i2 = i34;
   while (1) {
    i1 = i11 + ((Math_imul(HEAP32[i19 >> 2] | 0, i2) | 0) + (i3 << 2)) | 0;
    i36 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = ((((Math_imul(HEAPU8[i13 + ((HEAP32[i21 >> 2] & i36) >>> i17) >> 0] | 0, i31) | 0) >>> 0) / 255 | 0) + i38 | 0) >>> i8 << i17 | ((((Math_imul(HEAPU8[i12 + ((HEAP32[i20 >> 2] & i36) >>> i16) >> 0] | 0, i31) | 0) >>> 0) / 255 | 0) + i37 | 0) >>> i7 << i16 | ((((Math_imul(HEAPU8[i14 + ((HEAP32[i22 >> 2] & i36) >>> i18) >> 0] | 0, i31) | 0) >>> 0) / 255 | 0) + i39 | 0) >>> i9 << i18 | ((((Math_imul(HEAPU8[i15 + ((HEAP32[i23 >> 2] & i36) >>> i6) >> 0] | 0, i31) | 0) >>> 0) / 255 | 0) + i32 | 0) >>> i10 << i6;
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i24 | 0)) break; else {
     i4 = (i1 ? i30 : i29) + i4 | 0;
     i3 = (i1 ? i28 : i27) + i3 | 0;
     i2 = i2 + (i1 ? i25 : i26) | 0;
    }
   }
   return;
  }
 case 2:
  {
   i1 = i6 - i33 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i7 - i34 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i30 = i1 << 1;
    i5 = i30 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i4 = 1;
   } else {
    i30 = i2 << 1;
    i5 = i30 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i4 = 0;
   }
   i29 = i3 << 1;
   i27 = (i6 | 0) < (i33 | 0);
   i28 = i27 ? 0 - i2 | 0 : i2;
   i27 = i27 ? -1 : 1;
   i26 = (i7 | 0) < (i34 | 0);
   i25 = i26 ? 0 - i4 | 0 : i4;
   i26 = i26 ? -1 : 1;
   i24 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if ((i24 | 0) <= 0) return;
   i19 = i35 + 16 | 0;
   i20 = i36 + 12 | 0;
   i21 = i36 + 16 | 0;
   i22 = i36 + 20 | 0;
   i23 = i36 + 24 | 0;
   i11 = HEAP32[i35 + 20 >> 2] | 0;
   i7 = HEAPU8[i36 + 28 >> 0] | 0;
   i12 = HEAP32[5992 + (i7 << 2) >> 2] | 0;
   i8 = HEAPU8[i36 + 29 >> 0] | 0;
   i13 = HEAP32[5992 + (i8 << 2) >> 2] | 0;
   i9 = HEAPU8[i36 + 30 >> 0] | 0;
   i14 = HEAP32[5992 + (i9 << 2) >> 2] | 0;
   i10 = HEAPU8[i36 + 31 >> 0] | 0;
   i15 = HEAP32[5992 + (i10 << 2) >> 2] | 0;
   i16 = HEAPU8[i36 + 32 >> 0] | 0;
   i17 = HEAPU8[i36 + 33 >> 0] | 0;
   i18 = HEAPU8[i36 + 34 >> 0] | 0;
   i6 = HEAPU8[i36 + 35 >> 0] | 0;
   i4 = i5;
   i5 = 0;
   i3 = i33;
   i2 = i34;
   while (1) {
    i1 = i11 + ((Math_imul(HEAP32[i19 >> 2] | 0, i2) | 0) + (i3 << 2)) | 0;
    i36 = HEAP32[i1 >> 2] | 0;
    i34 = (HEAPU8[i12 + ((HEAP32[i20 >> 2] & i36) >>> i16) >> 0] | 0) + i37 | 0;
    i33 = (HEAPU8[i13 + ((HEAP32[i21 >> 2] & i36) >>> i17) >> 0] | 0) + i38 | 0;
    i35 = (HEAPU8[i14 + ((HEAP32[i22 >> 2] & i36) >>> i18) >> 0] | 0) + i39 | 0;
    HEAP32[i1 >> 2] = (i33 >>> 0 > 255 ? 255 : i33) >>> i8 << i17 | (i34 >>> 0 > 255 ? 255 : i34) >>> i7 << i16 | (i35 >>> 0 > 255 ? 255 : i35) >>> i9 << i18 | (HEAPU8[i15 + ((HEAP32[i23 >> 2] & i36) >>> i6) >> 0] | 0) >>> i10 << i6;
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i24 | 0)) break; else {
     i4 = (i1 ? i30 : i29) + i4 | 0;
     i3 = (i1 ? i28 : i27) + i3 | 0;
     i2 = i2 + (i1 ? i25 : i26) | 0;
    }
   }
   return;
  }
 case 4:
  {
   i1 = i6 - i33 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i7 - i34 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i30 = i1 << 1;
    i5 = i30 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i4 = 1;
   } else {
    i30 = i2 << 1;
    i5 = i30 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i4 = 0;
   }
   i29 = i3 << 1;
   i27 = (i6 | 0) < (i33 | 0);
   i28 = i27 ? 0 - i2 | 0 : i2;
   i27 = i27 ? -1 : 1;
   i26 = (i7 | 0) < (i34 | 0);
   i25 = i26 ? 0 - i4 | 0 : i4;
   i26 = i26 ? -1 : 1;
   i24 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if ((i24 | 0) <= 0) return;
   i19 = i35 + 16 | 0;
   i20 = i36 + 12 | 0;
   i21 = i36 + 16 | 0;
   i22 = i36 + 20 | 0;
   i23 = i36 + 24 | 0;
   i11 = HEAP32[i35 + 20 >> 2] | 0;
   i7 = HEAPU8[i36 + 28 >> 0] | 0;
   i12 = HEAP32[5992 + (i7 << 2) >> 2] | 0;
   i8 = HEAPU8[i36 + 29 >> 0] | 0;
   i13 = HEAP32[5992 + (i8 << 2) >> 2] | 0;
   i9 = HEAPU8[i36 + 30 >> 0] | 0;
   i14 = HEAP32[5992 + (i9 << 2) >> 2] | 0;
   i10 = HEAPU8[i36 + 31 >> 0] | 0;
   i15 = HEAP32[5992 + (i10 << 2) >> 2] | 0;
   i16 = HEAPU8[i36 + 32 >> 0] | 0;
   i17 = HEAPU8[i36 + 33 >> 0] | 0;
   i18 = HEAPU8[i36 + 34 >> 0] | 0;
   i6 = HEAPU8[i36 + 35 >> 0] | 0;
   i4 = i5;
   i5 = 0;
   i3 = i33;
   i2 = i34;
   while (1) {
    i1 = i11 + ((Math_imul(HEAP32[i19 >> 2] | 0, i2) | 0) + (i3 << 2)) | 0;
    i36 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (HEAPU8[i15 + ((HEAP32[i23 >> 2] & i36) >>> i6) >> 0] | 0) >>> i10 << i6 | (((Math_imul(HEAPU8[i12 + ((HEAP32[i20 >> 2] & i36) >>> i16) >> 0] | 0, i37) | 0) >>> 0) / 255 | 0) >>> i7 << i16 | (((Math_imul(HEAPU8[i13 + ((HEAP32[i21 >> 2] & i36) >>> i17) >> 0] | 0, i38) | 0) >>> 0) / 255 | 0) >>> i8 << i17 | (((Math_imul(HEAPU8[i14 + ((HEAP32[i22 >> 2] & i36) >>> i18) >> 0] | 0, i39) | 0) >>> 0) / 255 | 0) >>> i9 << i18;
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i24 | 0)) break; else {
     i4 = (i1 ? i30 : i29) + i4 | 0;
     i3 = (i1 ? i28 : i27) + i3 | 0;
     i2 = i2 + (i1 ? i25 : i26) | 0;
    }
   }
   return;
  }
 default:
  {
   i1 = i6 - i33 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i7 - i34 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i15 = i1 << 1;
    i4 = i15 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i5 = 1;
   } else {
    i15 = i2 << 1;
    i4 = i15 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i5 = 0;
   }
   i14 = i3 << 1;
   i12 = (i6 | 0) < (i33 | 0);
   i13 = i12 ? 0 - i2 | 0 : i2;
   i12 = i12 ? -1 : 1;
   i11 = (i7 | 0) < (i34 | 0);
   i10 = i11 ? 0 - i5 | 0 : i5;
   i11 = i11 ? -1 : 1;
   i9 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if ((i9 | 0) <= 0) return;
   i8 = HEAP32[i35 + 20 >> 2] | 0;
   i7 = i35 + 16 | 0;
   i6 = i38 >>> (HEAPU8[i36 + 29 >> 0] | 0) << (HEAPU8[i36 + 33 >> 0] | 0) | i37 >>> (HEAPU8[i36 + 28 >> 0] | 0) << (HEAPU8[i36 + 32 >> 0] | 0) | i39 >>> (HEAPU8[i36 + 30 >> 0] | 0) << (HEAPU8[i36 + 34 >> 0] | 0) | i32 >>> (HEAPU8[i36 + 31 >> 0] | 0) << (HEAPU8[i36 + 35 >> 0] | 0);
   i5 = 0;
   i3 = i33;
   i2 = i34;
   while (1) {
    HEAP32[i8 + ((Math_imul(HEAP32[i7 >> 2] | 0, i2) | 0) + (i3 << 2)) >> 2] = i6;
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i9 | 0)) break; else {
     i4 = (i1 ? i15 : i14) + i4 | 0;
     i3 = (i1 ? i13 : i12) + i3 | 0;
     i2 = i2 + (i1 ? i10 : i11) | 0;
    }
   }
   return;
  }
 }
}

function _printf_core(i49, i2, i50, i51, i52) {
 i49 = i49 | 0;
 i2 = i2 | 0;
 i50 = i50 | 0;
 i51 = i51 | 0;
 i52 = i52 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i53 = 0;
 i53 = STACKTOP;
 STACKTOP = STACKTOP + 624 | 0;
 i44 = i53 + 24 | 0;
 i46 = i53 + 16 | 0;
 i45 = i53 + 588 | 0;
 i39 = i53 + 576 | 0;
 i43 = i53;
 i36 = i53 + 536 | 0;
 i48 = i53 + 8 | 0;
 i47 = i53 + 528 | 0;
 i27 = (i49 | 0) != 0;
 i28 = i36 + 40 | 0;
 i35 = i28;
 i36 = i36 + 39 | 0;
 i37 = i48 + 4 | 0;
 i38 = i39 + 12 | 0;
 i39 = i39 + 11 | 0;
 i40 = i45;
 i41 = i38;
 i42 = i41 - i40 | 0;
 i29 = -2 - i40 | 0;
 i30 = i41 + 2 | 0;
 i31 = i44 + 288 | 0;
 i32 = i45 + 9 | 0;
 i33 = i32;
 i34 = i45 + 8 | 0;
 i1 = 0;
 i12 = i2;
 i3 = 0;
 i2 = 0;
 L1 : while (1) {
  do if ((i1 | 0) > -1) if ((i3 | 0) > (2147483647 - i1 | 0)) {
   HEAP32[(___errno_location() | 0) >> 2] = 75;
   i1 = -1;
   break;
  } else {
   i1 = i3 + i1 | 0;
   break;
  } while (0);
  i3 = HEAP8[i12 >> 0] | 0;
  if (!(i3 << 24 >> 24)) {
   i26 = 245;
   break;
  } else i4 = i12;
  L9 : while (1) {
   switch (i3 << 24 >> 24) {
   case 37:
    {
     i3 = i4;
     i26 = 9;
     break L9;
    }
   case 0:
    {
     i3 = i4;
     break L9;
    }
   default:
    {}
   }
   i25 = i4 + 1 | 0;
   i3 = HEAP8[i25 >> 0] | 0;
   i4 = i25;
  }
  L12 : do if ((i26 | 0) == 9) while (1) {
   i26 = 0;
   if ((HEAP8[i3 + 1 >> 0] | 0) != 37) break L12;
   i4 = i4 + 1 | 0;
   i3 = i3 + 2 | 0;
   if ((HEAP8[i3 >> 0] | 0) == 37) i26 = 9; else break;
  } while (0);
  i14 = i4 - i12 | 0;
  if (i27 ? (HEAP32[i49 >> 2] & 32 | 0) == 0 : 0) ___fwritex(i12, i14, i49) | 0;
  if ((i4 | 0) != (i12 | 0)) {
   i12 = i3;
   i3 = i14;
   continue;
  }
  i7 = i3 + 1 | 0;
  i4 = HEAP8[i7 >> 0] | 0;
  i5 = (i4 << 24 >> 24) + -48 | 0;
  if (i5 >>> 0 < 10) {
   i25 = (HEAP8[i3 + 2 >> 0] | 0) == 36;
   i7 = i25 ? i3 + 3 | 0 : i7;
   i4 = HEAP8[i7 >> 0] | 0;
   i10 = i25 ? i5 : -1;
   i2 = i25 ? 1 : i2;
  } else i10 = -1;
  i3 = i4 << 24 >> 24;
  L25 : do if ((i3 & -32 | 0) == 32) {
   i5 = 0;
   while (1) {
    if (!(1 << i3 + -32 & 75913)) {
     i8 = i5;
     i3 = i7;
     break L25;
    }
    i5 = 1 << (i4 << 24 >> 24) + -32 | i5;
    i7 = i7 + 1 | 0;
    i4 = HEAP8[i7 >> 0] | 0;
    i3 = i4 << 24 >> 24;
    if ((i3 & -32 | 0) != 32) {
     i8 = i5;
     i3 = i7;
     break;
    }
   }
  } else {
   i8 = 0;
   i3 = i7;
  } while (0);
  do if (i4 << 24 >> 24 == 42) {
   i5 = i3 + 1 | 0;
   i4 = (HEAP8[i5 >> 0] | 0) + -48 | 0;
   if (i4 >>> 0 < 10 ? (HEAP8[i3 + 2 >> 0] | 0) == 36 : 0) {
    HEAP32[i52 + (i4 << 2) >> 2] = 10;
    i2 = 1;
    i3 = i3 + 3 | 0;
    i4 = HEAP32[i51 + ((HEAP8[i5 >> 0] | 0) + -48 << 3) >> 2] | 0;
   } else {
    if (i2) {
     i1 = -1;
     break L1;
    }
    if (!i27) {
     i13 = i8;
     i3 = i5;
     i2 = 0;
     i25 = 0;
     break;
    }
    i2 = (HEAP32[i50 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    i4 = HEAP32[i2 >> 2] | 0;
    HEAP32[i50 >> 2] = i2 + 4;
    i2 = 0;
    i3 = i5;
   }
   if ((i4 | 0) < 0) {
    i13 = i8 | 8192;
    i25 = 0 - i4 | 0;
   } else {
    i13 = i8;
    i25 = i4;
   }
  } else {
   i5 = (i4 << 24 >> 24) + -48 | 0;
   if (i5 >>> 0 < 10) {
    i4 = 0;
    do {
     i4 = (i4 * 10 | 0) + i5 | 0;
     i3 = i3 + 1 | 0;
     i5 = (HEAP8[i3 >> 0] | 0) + -48 | 0;
    } while (i5 >>> 0 < 10);
    if ((i4 | 0) < 0) {
     i1 = -1;
     break L1;
    } else {
     i13 = i8;
     i25 = i4;
    }
   } else {
    i13 = i8;
    i25 = 0;
   }
  } while (0);
  L46 : do if ((HEAP8[i3 >> 0] | 0) == 46) {
   i5 = i3 + 1 | 0;
   i4 = HEAP8[i5 >> 0] | 0;
   if (i4 << 24 >> 24 != 42) {
    i7 = (i4 << 24 >> 24) + -48 | 0;
    if (i7 >>> 0 < 10) {
     i3 = i5;
     i4 = 0;
    } else {
     i3 = i5;
     i7 = 0;
     break;
    }
    while (1) {
     i4 = (i4 * 10 | 0) + i7 | 0;
     i3 = i3 + 1 | 0;
     i7 = (HEAP8[i3 >> 0] | 0) + -48 | 0;
     if (i7 >>> 0 >= 10) {
      i7 = i4;
      break L46;
     }
    }
   }
   i5 = i3 + 2 | 0;
   i4 = (HEAP8[i5 >> 0] | 0) + -48 | 0;
   if (i4 >>> 0 < 10 ? (HEAP8[i3 + 3 >> 0] | 0) == 36 : 0) {
    HEAP32[i52 + (i4 << 2) >> 2] = 10;
    i3 = i3 + 4 | 0;
    i7 = HEAP32[i51 + ((HEAP8[i5 >> 0] | 0) + -48 << 3) >> 2] | 0;
    break;
   }
   if (i2) {
    i1 = -1;
    break L1;
   }
   if (i27) {
    i3 = (HEAP32[i50 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    i7 = HEAP32[i3 >> 2] | 0;
    HEAP32[i50 >> 2] = i3 + 4;
    i3 = i5;
   } else {
    i3 = i5;
    i7 = 0;
   }
  } else i7 = -1; while (0);
  i9 = 0;
  while (1) {
   i4 = (HEAP8[i3 >> 0] | 0) + -65 | 0;
   if (i4 >>> 0 > 57) {
    i1 = -1;
    break L1;
   }
   i5 = i3 + 1 | 0;
   i4 = HEAP8[60455 + (i9 * 58 | 0) + i4 >> 0] | 0;
   i8 = i4 & 255;
   if ((i8 + -1 | 0) >>> 0 < 8) {
    i3 = i5;
    i9 = i8;
   } else {
    i24 = i5;
    break;
   }
  }
  if (!(i4 << 24 >> 24)) {
   i1 = -1;
   break;
  }
  i5 = (i10 | 0) > -1;
  do if (i4 << 24 >> 24 == 19) if (i5) {
   i1 = -1;
   break L1;
  } else i26 = 52; else {
   if (i5) {
    HEAP32[i52 + (i10 << 2) >> 2] = i8;
    i22 = i51 + (i10 << 3) | 0;
    i23 = HEAP32[i22 + 4 >> 2] | 0;
    i26 = i43;
    HEAP32[i26 >> 2] = HEAP32[i22 >> 2];
    HEAP32[i26 + 4 >> 2] = i23;
    i26 = 52;
    break;
   }
   if (!i27) {
    i1 = 0;
    break L1;
   }
   _pop_arg(i43, i8, i50);
  } while (0);
  if ((i26 | 0) == 52 ? (i26 = 0, !i27) : 0) {
   i12 = i24;
   i3 = i14;
   continue;
  }
  i10 = HEAP8[i3 >> 0] | 0;
  i10 = (i9 | 0) != 0 & (i10 & 15 | 0) == 3 ? i10 & -33 : i10;
  i5 = i13 & -65537;
  i23 = (i13 & 8192 | 0) == 0 ? i13 : i5;
  L75 : do switch (i10 | 0) {
  case 110:
   switch (i9 | 0) {
   case 0:
    {
     HEAP32[HEAP32[i43 >> 2] >> 2] = i1;
     i12 = i24;
     i3 = i14;
     continue L1;
    }
   case 1:
    {
     HEAP32[HEAP32[i43 >> 2] >> 2] = i1;
     i12 = i24;
     i3 = i14;
     continue L1;
    }
   case 2:
    {
     i12 = HEAP32[i43 >> 2] | 0;
     HEAP32[i12 >> 2] = i1;
     HEAP32[i12 + 4 >> 2] = ((i1 | 0) < 0) << 31 >> 31;
     i12 = i24;
     i3 = i14;
     continue L1;
    }
   case 3:
    {
     HEAP16[HEAP32[i43 >> 2] >> 1] = i1;
     i12 = i24;
     i3 = i14;
     continue L1;
    }
   case 4:
    {
     HEAP8[HEAP32[i43 >> 2] >> 0] = i1;
     i12 = i24;
     i3 = i14;
     continue L1;
    }
   case 6:
    {
     HEAP32[HEAP32[i43 >> 2] >> 2] = i1;
     i12 = i24;
     i3 = i14;
     continue L1;
    }
   case 7:
    {
     i12 = HEAP32[i43 >> 2] | 0;
     HEAP32[i12 >> 2] = i1;
     HEAP32[i12 + 4 >> 2] = ((i1 | 0) < 0) << 31 >> 31;
     i12 = i24;
     i3 = i14;
     continue L1;
    }
   default:
    {
     i12 = i24;
     i3 = i14;
     continue L1;
    }
   }
  case 112:
   {
    i9 = i23 | 8;
    i7 = i7 >>> 0 > 8 ? i7 : 8;
    i10 = 120;
    i26 = 64;
    break;
   }
  case 88:
  case 120:
   {
    i9 = i23;
    i26 = 64;
    break;
   }
  case 111:
   {
    i5 = i43;
    i4 = HEAP32[i5 >> 2] | 0;
    i5 = HEAP32[i5 + 4 >> 2] | 0;
    if ((i4 | 0) == 0 & (i5 | 0) == 0) i3 = i28; else {
     i3 = i28;
     do {
      i3 = i3 + -1 | 0;
      HEAP8[i3 >> 0] = i4 & 7 | 48;
      i4 = _bitshift64Lshr(i4 | 0, i5 | 0, 3) | 0;
      i5 = tempRet0;
     } while (!((i4 | 0) == 0 & (i5 | 0) == 0));
    }
    if (!(i23 & 8)) {
     i4 = i23;
     i9 = 0;
     i8 = 60935;
     i26 = 77;
    } else {
     i9 = i35 - i3 + 1 | 0;
     i4 = i23;
     i7 = (i7 | 0) < (i9 | 0) ? i9 : i7;
     i9 = 0;
     i8 = 60935;
     i26 = 77;
    }
    break;
   }
  case 105:
  case 100:
   {
    i4 = i43;
    i3 = HEAP32[i4 >> 2] | 0;
    i4 = HEAP32[i4 + 4 >> 2] | 0;
    if ((i4 | 0) < 0) {
     i3 = _i64Subtract(0, 0, i3 | 0, i4 | 0) | 0;
     i4 = tempRet0;
     i5 = i43;
     HEAP32[i5 >> 2] = i3;
     HEAP32[i5 + 4 >> 2] = i4;
     i5 = 1;
     i8 = 60935;
     i26 = 76;
     break L75;
    }
    if (!(i23 & 2048)) {
     i8 = i23 & 1;
     i5 = i8;
     i8 = (i8 | 0) == 0 ? 60935 : 60937;
     i26 = 76;
    } else {
     i5 = 1;
     i8 = 60936;
     i26 = 76;
    }
    break;
   }
  case 117:
   {
    i4 = i43;
    i3 = HEAP32[i4 >> 2] | 0;
    i4 = HEAP32[i4 + 4 >> 2] | 0;
    i5 = 0;
    i8 = 60935;
    i26 = 76;
    break;
   }
  case 99:
   {
    HEAP8[i36 >> 0] = HEAP32[i43 >> 2];
    i12 = i36;
    i4 = 1;
    i9 = 0;
    i10 = 60935;
    i3 = i28;
    break;
   }
  case 109:
   {
    i3 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
    i26 = 82;
    break;
   }
  case 115:
   {
    i3 = HEAP32[i43 >> 2] | 0;
    i3 = (i3 | 0) != 0 ? i3 : 60945;
    i26 = 82;
    break;
   }
  case 67:
   {
    HEAP32[i48 >> 2] = HEAP32[i43 >> 2];
    HEAP32[i37 >> 2] = 0;
    HEAP32[i43 >> 2] = i48;
    i7 = -1;
    i26 = 86;
    break;
   }
  case 83:
   {
    if (!i7) {
     _pad(i49, 32, i25, 0, i23);
     i3 = 0;
     i26 = 98;
    } else i26 = 86;
    break;
   }
  case 65:
  case 71:
  case 70:
  case 69:
  case 97:
  case 103:
  case 102:
  case 101:
   {
    d6 = +HEAPF64[i43 >> 3];
    HEAP32[i46 >> 2] = 0;
    HEAPF64[tempDoublePtr >> 3] = d6;
    if ((HEAP32[tempDoublePtr + 4 >> 2] | 0) >= 0) if (!(i23 & 2048)) {
     i22 = i23 & 1;
     i21 = i22;
     i22 = (i22 | 0) == 0 ? 60953 : 60958;
    } else {
     i21 = 1;
     i22 = 60955;
    } else {
     d6 = -d6;
     i21 = 1;
     i22 = 60952;
    }
    HEAPF64[tempDoublePtr >> 3] = d6;
    i20 = HEAP32[tempDoublePtr + 4 >> 2] & 2146435072;
    do if (i20 >>> 0 < 2146435072 | (i20 | 0) == 2146435072 & 0 < 0) {
     d11 = +_frexpl(d6, i46) * 2.0;
     i4 = d11 != 0.0;
     if (i4) HEAP32[i46 >> 2] = (HEAP32[i46 >> 2] | 0) + -1;
     i18 = i10 | 32;
     if ((i18 | 0) == 97) {
      i12 = i10 & 32;
      i14 = (i12 | 0) == 0 ? i22 : i22 + 9 | 0;
      i13 = i21 | 2;
      i3 = 12 - i7 | 0;
      do if (!(i7 >>> 0 > 11 | (i3 | 0) == 0)) {
       d6 = 8.0;
       do {
        i3 = i3 + -1 | 0;
        d6 = d6 * 16.0;
       } while ((i3 | 0) != 0);
       if ((HEAP8[i14 >> 0] | 0) == 45) {
        d6 = -(d6 + (-d11 - d6));
        break;
       } else {
        d6 = d11 + d6 - d6;
        break;
       }
      } else d6 = d11; while (0);
      i4 = HEAP32[i46 >> 2] | 0;
      i3 = (i4 | 0) < 0 ? 0 - i4 | 0 : i4;
      i3 = _fmt_u(i3, ((i3 | 0) < 0) << 31 >> 31, i38) | 0;
      if ((i3 | 0) == (i38 | 0)) {
       HEAP8[i39 >> 0] = 48;
       i3 = i39;
      }
      HEAP8[i3 + -1 >> 0] = (i4 >> 31 & 2) + 43;
      i9 = i3 + -2 | 0;
      HEAP8[i9 >> 0] = i10 + 15;
      i8 = (i7 | 0) < 1;
      i5 = (i23 & 8 | 0) == 0;
      i4 = i45;
      while (1) {
       i22 = ~~d6;
       i3 = i4 + 1 | 0;
       HEAP8[i4 >> 0] = HEAPU8[60919 + i22 >> 0] | i12;
       d6 = (d6 - +(i22 | 0)) * 16.0;
       do if ((i3 - i40 | 0) == 1) {
        if (i5 & (i8 & d6 == 0.0)) break;
        HEAP8[i3 >> 0] = 46;
        i3 = i4 + 2 | 0;
       } while (0);
       if (!(d6 != 0.0)) break; else i4 = i3;
      }
      i7 = (i7 | 0) != 0 & (i29 + i3 | 0) < (i7 | 0) ? i30 + i7 - i9 | 0 : i42 - i9 + i3 | 0;
      i5 = i7 + i13 | 0;
      _pad(i49, 32, i25, i5, i23);
      if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i14, i13, i49) | 0;
      _pad(i49, 48, i25, i5, i23 ^ 65536);
      i3 = i3 - i40 | 0;
      if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i45, i3, i49) | 0;
      i4 = i41 - i9 | 0;
      _pad(i49, 48, i7 - (i3 + i4) | 0, 0, 0);
      if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i9, i4, i49) | 0;
      _pad(i49, 32, i25, i5, i23 ^ 8192);
      i3 = (i5 | 0) < (i25 | 0) ? i25 : i5;
      break;
     }
     i3 = (i7 | 0) < 0 ? 6 : i7;
     if (i4) {
      i4 = (HEAP32[i46 >> 2] | 0) + -28 | 0;
      HEAP32[i46 >> 2] = i4;
      d6 = d11 * 268435456.0;
     } else {
      d6 = d11;
      i4 = HEAP32[i46 >> 2] | 0;
     }
     i20 = (i4 | 0) < 0 ? i44 : i31;
     i19 = i20;
     i4 = i20;
     do {
      i17 = ~~d6 >>> 0;
      HEAP32[i4 >> 2] = i17;
      i4 = i4 + 4 | 0;
      d6 = (d6 - +(i17 >>> 0)) * 1.0e9;
     } while (d6 != 0.0);
     i5 = i4;
     i4 = HEAP32[i46 >> 2] | 0;
     if ((i4 | 0) > 0) {
      i8 = i20;
      while (1) {
       i9 = (i4 | 0) > 29 ? 29 : i4;
       i7 = i5 + -4 | 0;
       do if (i7 >>> 0 < i8 >>> 0) i7 = i8; else {
        i4 = 0;
        do {
         i17 = _bitshift64Shl(HEAP32[i7 >> 2] | 0, 0, i9 | 0) | 0;
         i17 = _i64Add(i17 | 0, tempRet0 | 0, i4 | 0, 0) | 0;
         i4 = tempRet0;
         i16 = ___uremdi3(i17 | 0, i4 | 0, 1e9, 0) | 0;
         HEAP32[i7 >> 2] = i16;
         i4 = ___udivdi3(i17 | 0, i4 | 0, 1e9, 0) | 0;
         i7 = i7 + -4 | 0;
        } while (i7 >>> 0 >= i8 >>> 0);
        if (!i4) {
         i7 = i8;
         break;
        }
        i7 = i8 + -4 | 0;
        HEAP32[i7 >> 2] = i4;
       } while (0);
       while (1) {
        if (i5 >>> 0 <= i7 >>> 0) break;
        i4 = i5 + -4 | 0;
        if (!(HEAP32[i4 >> 2] | 0)) i5 = i4; else break;
       }
       i4 = (HEAP32[i46 >> 2] | 0) - i9 | 0;
       HEAP32[i46 >> 2] = i4;
       if ((i4 | 0) > 0) i8 = i7; else break;
      }
     } else i7 = i20;
     if ((i4 | 0) < 0) {
      i14 = ((i3 + 25 | 0) / 9 | 0) + 1 | 0;
      i15 = (i18 | 0) == 102;
      i12 = i7;
      while (1) {
       i13 = 0 - i4 | 0;
       i13 = (i13 | 0) > 9 ? 9 : i13;
       do if (i12 >>> 0 < i5 >>> 0) {
        i4 = (1 << i13) + -1 | 0;
        i8 = 1e9 >>> i13;
        i7 = 0;
        i9 = i12;
        do {
         i17 = HEAP32[i9 >> 2] | 0;
         HEAP32[i9 >> 2] = (i17 >>> i13) + i7;
         i7 = Math_imul(i17 & i4, i8) | 0;
         i9 = i9 + 4 | 0;
        } while (i9 >>> 0 < i5 >>> 0);
        i4 = (HEAP32[i12 >> 2] | 0) == 0 ? i12 + 4 | 0 : i12;
        if (!i7) {
         i7 = i4;
         break;
        }
        HEAP32[i5 >> 2] = i7;
        i7 = i4;
        i5 = i5 + 4 | 0;
       } else i7 = (HEAP32[i12 >> 2] | 0) == 0 ? i12 + 4 | 0 : i12; while (0);
       i4 = i15 ? i20 : i7;
       i5 = (i5 - i4 >> 2 | 0) > (i14 | 0) ? i4 + (i14 << 2) | 0 : i5;
       i4 = (HEAP32[i46 >> 2] | 0) + i13 | 0;
       HEAP32[i46 >> 2] = i4;
       if ((i4 | 0) >= 0) {
        i12 = i7;
        break;
       } else i12 = i7;
      }
     } else i12 = i7;
     do if (i12 >>> 0 < i5 >>> 0) {
      i4 = (i19 - i12 >> 2) * 9 | 0;
      i8 = HEAP32[i12 >> 2] | 0;
      if (i8 >>> 0 < 10) break; else i7 = 10;
      do {
       i7 = i7 * 10 | 0;
       i4 = i4 + 1 | 0;
      } while (i8 >>> 0 >= i7 >>> 0);
     } else i4 = 0; while (0);
     i16 = (i18 | 0) == 103;
     i17 = (i3 | 0) != 0;
     i7 = i3 - ((i18 | 0) != 102 ? i4 : 0) + ((i17 & i16) << 31 >> 31) | 0;
     if ((i7 | 0) < (((i5 - i19 >> 2) * 9 | 0) + -9 | 0)) {
      i9 = i7 + 9216 | 0;
      i15 = (i9 | 0) / 9 | 0;
      i7 = i20 + (i15 + -1023 << 2) | 0;
      i9 = ((i9 | 0) % 9 | 0) + 1 | 0;
      if ((i9 | 0) < 9) {
       i8 = 10;
       do {
        i8 = i8 * 10 | 0;
        i9 = i9 + 1 | 0;
       } while ((i9 | 0) != 9);
      } else i8 = 10;
      i13 = HEAP32[i7 >> 2] | 0;
      i14 = (i13 >>> 0) % (i8 >>> 0) | 0;
      if ((i14 | 0) == 0 ? (i20 + (i15 + -1022 << 2) | 0) == (i5 | 0) : 0) i8 = i12; else i26 = 163;
      do if ((i26 | 0) == 163) {
       i26 = 0;
       d11 = (((i13 >>> 0) / (i8 >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
       i9 = (i8 | 0) / 2 | 0;
       do if (i14 >>> 0 < i9 >>> 0) d6 = .5; else {
        if ((i14 | 0) == (i9 | 0) ? (i20 + (i15 + -1022 << 2) | 0) == (i5 | 0) : 0) {
         d6 = 1.0;
         break;
        }
        d6 = 1.5;
       } while (0);
       do if (i21) {
        if ((HEAP8[i22 >> 0] | 0) != 45) break;
        d11 = -d11;
        d6 = -d6;
       } while (0);
       i9 = i13 - i14 | 0;
       HEAP32[i7 >> 2] = i9;
       if (!(d11 + d6 != d11)) {
        i8 = i12;
        break;
       }
       i18 = i9 + i8 | 0;
       HEAP32[i7 >> 2] = i18;
       if (i18 >>> 0 > 999999999) {
        i4 = i12;
        while (1) {
         i8 = i7 + -4 | 0;
         HEAP32[i7 >> 2] = 0;
         if (i8 >>> 0 < i4 >>> 0) {
          i4 = i4 + -4 | 0;
          HEAP32[i4 >> 2] = 0;
         }
         i18 = (HEAP32[i8 >> 2] | 0) + 1 | 0;
         HEAP32[i8 >> 2] = i18;
         if (i18 >>> 0 > 999999999) i7 = i8; else {
          i12 = i4;
          i7 = i8;
          break;
         }
        }
       }
       i4 = (i19 - i12 >> 2) * 9 | 0;
       i9 = HEAP32[i12 >> 2] | 0;
       if (i9 >>> 0 < 10) {
        i8 = i12;
        break;
       } else i8 = 10;
       do {
        i8 = i8 * 10 | 0;
        i4 = i4 + 1 | 0;
       } while (i9 >>> 0 >= i8 >>> 0);
       i8 = i12;
      } while (0);
      i18 = i7 + 4 | 0;
      i12 = i8;
      i5 = i5 >>> 0 > i18 >>> 0 ? i18 : i5;
     }
     i14 = 0 - i4 | 0;
     while (1) {
      if (i5 >>> 0 <= i12 >>> 0) {
       i15 = 0;
       i18 = i5;
       break;
      }
      i7 = i5 + -4 | 0;
      if (!(HEAP32[i7 >> 2] | 0)) i5 = i7; else {
       i15 = 1;
       i18 = i5;
       break;
      }
     }
     do if (i16) {
      i3 = (i17 & 1 ^ 1) + i3 | 0;
      if ((i3 | 0) > (i4 | 0) & (i4 | 0) > -5) {
       i10 = i10 + -1 | 0;
       i3 = i3 + -1 - i4 | 0;
      } else {
       i10 = i10 + -2 | 0;
       i3 = i3 + -1 | 0;
      }
      i5 = i23 & 8;
      if (i5) break;
      do if (i15) {
       i5 = HEAP32[i18 + -4 >> 2] | 0;
       if (!i5) {
        i7 = 9;
        break;
       }
       if (!((i5 >>> 0) % 10 | 0)) {
        i8 = 10;
        i7 = 0;
       } else {
        i7 = 0;
        break;
       }
       do {
        i8 = i8 * 10 | 0;
        i7 = i7 + 1 | 0;
       } while (((i5 >>> 0) % (i8 >>> 0) | 0 | 0) == 0);
      } else i7 = 9; while (0);
      i5 = ((i18 - i19 >> 2) * 9 | 0) + -9 | 0;
      if ((i10 | 32 | 0) == 102) {
       i5 = i5 - i7 | 0;
       i5 = (i5 | 0) < 0 ? 0 : i5;
       i3 = (i3 | 0) < (i5 | 0) ? i3 : i5;
       i5 = 0;
       break;
      } else {
       i5 = i5 + i4 - i7 | 0;
       i5 = (i5 | 0) < 0 ? 0 : i5;
       i3 = (i3 | 0) < (i5 | 0) ? i3 : i5;
       i5 = 0;
       break;
      }
     } else i5 = i23 & 8; while (0);
     i13 = i3 | i5;
     i8 = (i13 | 0) != 0 & 1;
     i9 = (i10 | 32 | 0) == 102;
     if (i9) {
      i4 = (i4 | 0) > 0 ? i4 : 0;
      i10 = 0;
     } else {
      i7 = (i4 | 0) < 0 ? i14 : i4;
      i7 = _fmt_u(i7, ((i7 | 0) < 0) << 31 >> 31, i38) | 0;
      if ((i41 - i7 | 0) < 2) do {
       i7 = i7 + -1 | 0;
       HEAP8[i7 >> 0] = 48;
      } while ((i41 - i7 | 0) < 2);
      HEAP8[i7 + -1 >> 0] = (i4 >> 31 & 2) + 43;
      i19 = i7 + -2 | 0;
      HEAP8[i19 >> 0] = i10;
      i4 = i41 - i19 | 0;
      i10 = i19;
     }
     i14 = i21 + 1 + i3 + i8 + i4 | 0;
     _pad(i49, 32, i25, i14, i23);
     if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i22, i21, i49) | 0;
     _pad(i49, 48, i25, i14, i23 ^ 65536);
     do if (i9) {
      i7 = i12 >>> 0 > i20 >>> 0 ? i20 : i12;
      i4 = i7;
      do {
       i5 = _fmt_u(HEAP32[i4 >> 2] | 0, 0, i32) | 0;
       do if ((i4 | 0) == (i7 | 0)) {
        if ((i5 | 0) != (i32 | 0)) break;
        HEAP8[i34 >> 0] = 48;
        i5 = i34;
       } else {
        if (i5 >>> 0 <= i45 >>> 0) break;
        do {
         i5 = i5 + -1 | 0;
         HEAP8[i5 >> 0] = 48;
        } while (i5 >>> 0 > i45 >>> 0);
       } while (0);
       if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i5, i33 - i5 | 0, i49) | 0;
       i4 = i4 + 4 | 0;
      } while (i4 >>> 0 <= i20 >>> 0);
      do if (i13) {
       if (HEAP32[i49 >> 2] & 32) break;
       ___fwritex(60987, 1, i49) | 0;
      } while (0);
      if ((i3 | 0) > 0 & i4 >>> 0 < i18 >>> 0) {
       i5 = i4;
       while (1) {
        i4 = _fmt_u(HEAP32[i5 >> 2] | 0, 0, i32) | 0;
        if (i4 >>> 0 > i45 >>> 0) do {
         i4 = i4 + -1 | 0;
         HEAP8[i4 >> 0] = 48;
        } while (i4 >>> 0 > i45 >>> 0);
        if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i4, (i3 | 0) > 9 ? 9 : i3, i49) | 0;
        i5 = i5 + 4 | 0;
        i4 = i3 + -9 | 0;
        if (!((i3 | 0) > 9 & i5 >>> 0 < i18 >>> 0)) {
         i3 = i4;
         break;
        } else i3 = i4;
       }
      }
      _pad(i49, 48, i3 + 9 | 0, 9, 0);
     } else {
      i9 = i15 ? i18 : i12 + 4 | 0;
      if ((i3 | 0) > -1) {
       i8 = (i5 | 0) == 0;
       i7 = i12;
       do {
        i4 = _fmt_u(HEAP32[i7 >> 2] | 0, 0, i32) | 0;
        if ((i4 | 0) == (i32 | 0)) {
         HEAP8[i34 >> 0] = 48;
         i4 = i34;
        }
        do if ((i7 | 0) == (i12 | 0)) {
         i5 = i4 + 1 | 0;
         if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i4, 1, i49) | 0;
         if (i8 & (i3 | 0) < 1) {
          i4 = i5;
          break;
         }
         if (HEAP32[i49 >> 2] & 32) {
          i4 = i5;
          break;
         }
         ___fwritex(60987, 1, i49) | 0;
         i4 = i5;
        } else {
         if (i4 >>> 0 <= i45 >>> 0) break;
         do {
          i4 = i4 + -1 | 0;
          HEAP8[i4 >> 0] = 48;
         } while (i4 >>> 0 > i45 >>> 0);
        } while (0);
        i5 = i33 - i4 | 0;
        if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i4, (i3 | 0) > (i5 | 0) ? i5 : i3, i49) | 0;
        i3 = i3 - i5 | 0;
        i7 = i7 + 4 | 0;
       } while (i7 >>> 0 < i9 >>> 0 & (i3 | 0) > -1);
      }
      _pad(i49, 48, i3 + 18 | 0, 18, 0);
      if (HEAP32[i49 >> 2] & 32) break;
      ___fwritex(i10, i41 - i10 | 0, i49) | 0;
     } while (0);
     _pad(i49, 32, i25, i14, i23 ^ 8192);
     i3 = (i14 | 0) < (i25 | 0) ? i25 : i14;
    } else {
     i9 = (i10 & 32 | 0) != 0;
     i8 = d6 != d6 | 0.0 != 0.0;
     i4 = i8 ? 0 : i21;
     i7 = i4 + 3 | 0;
     _pad(i49, 32, i25, i7, i5);
     i3 = HEAP32[i49 >> 2] | 0;
     if (!(i3 & 32)) {
      ___fwritex(i22, i4, i49) | 0;
      i3 = HEAP32[i49 >> 2] | 0;
     }
     if (!(i3 & 32)) ___fwritex(i8 ? (i9 ? 60979 : 60983) : i9 ? 60971 : 60975, 3, i49) | 0;
     _pad(i49, 32, i25, i7, i23 ^ 8192);
     i3 = (i7 | 0) < (i25 | 0) ? i25 : i7;
    } while (0);
    i12 = i24;
    continue L1;
   }
  default:
   {
    i5 = i23;
    i4 = i7;
    i9 = 0;
    i10 = 60935;
    i3 = i28;
   }
  } while (0);
  L313 : do if ((i26 | 0) == 64) {
   i5 = i43;
   i4 = HEAP32[i5 >> 2] | 0;
   i5 = HEAP32[i5 + 4 >> 2] | 0;
   i8 = i10 & 32;
   if (!((i4 | 0) == 0 & (i5 | 0) == 0)) {
    i3 = i28;
    do {
     i3 = i3 + -1 | 0;
     HEAP8[i3 >> 0] = HEAPU8[60919 + (i4 & 15) >> 0] | i8;
     i4 = _bitshift64Lshr(i4 | 0, i5 | 0, 4) | 0;
     i5 = tempRet0;
    } while (!((i4 | 0) == 0 & (i5 | 0) == 0));
    i26 = i43;
    if ((i9 & 8 | 0) == 0 | (HEAP32[i26 >> 2] | 0) == 0 & (HEAP32[i26 + 4 >> 2] | 0) == 0) {
     i4 = i9;
     i9 = 0;
     i8 = 60935;
     i26 = 77;
    } else {
     i4 = i9;
     i9 = 2;
     i8 = 60935 + (i10 >> 4) | 0;
     i26 = 77;
    }
   } else {
    i3 = i28;
    i4 = i9;
    i9 = 0;
    i8 = 60935;
    i26 = 77;
   }
  } else if ((i26 | 0) == 76) {
   i3 = _fmt_u(i3, i4, i28) | 0;
   i4 = i23;
   i9 = i5;
   i26 = 77;
  } else if ((i26 | 0) == 82) {
   i26 = 0;
   i23 = _memchr(i3, 0, i7) | 0;
   i22 = (i23 | 0) == 0;
   i12 = i3;
   i4 = i22 ? i7 : i23 - i3 | 0;
   i9 = 0;
   i10 = 60935;
   i3 = i22 ? i3 + i7 | 0 : i23;
  } else if ((i26 | 0) == 86) {
   i26 = 0;
   i4 = 0;
   i3 = 0;
   i8 = HEAP32[i43 >> 2] | 0;
   while (1) {
    i5 = HEAP32[i8 >> 2] | 0;
    if (!i5) break;
    i3 = _wctomb(i47, i5) | 0;
    if ((i3 | 0) < 0 | i3 >>> 0 > (i7 - i4 | 0) >>> 0) break;
    i4 = i3 + i4 | 0;
    if (i7 >>> 0 > i4 >>> 0) i8 = i8 + 4 | 0; else break;
   }
   if ((i3 | 0) < 0) {
    i1 = -1;
    break L1;
   }
   _pad(i49, 32, i25, i4, i23);
   if (!i4) {
    i3 = 0;
    i26 = 98;
   } else {
    i5 = 0;
    i7 = HEAP32[i43 >> 2] | 0;
    while (1) {
     i3 = HEAP32[i7 >> 2] | 0;
     if (!i3) {
      i3 = i4;
      i26 = 98;
      break L313;
     }
     i3 = _wctomb(i47, i3) | 0;
     i5 = i3 + i5 | 0;
     if ((i5 | 0) > (i4 | 0)) {
      i3 = i4;
      i26 = 98;
      break L313;
     }
     if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i47, i3, i49) | 0;
     if (i5 >>> 0 >= i4 >>> 0) {
      i3 = i4;
      i26 = 98;
      break;
     } else i7 = i7 + 4 | 0;
    }
   }
  } while (0);
  if ((i26 | 0) == 98) {
   i26 = 0;
   _pad(i49, 32, i25, i3, i23 ^ 8192);
   i12 = i24;
   i3 = (i25 | 0) > (i3 | 0) ? i25 : i3;
   continue;
  }
  if ((i26 | 0) == 77) {
   i26 = 0;
   i5 = (i7 | 0) > -1 ? i4 & -65537 : i4;
   i4 = i43;
   i4 = (HEAP32[i4 >> 2] | 0) != 0 | (HEAP32[i4 + 4 >> 2] | 0) != 0;
   if ((i7 | 0) != 0 | i4) {
    i4 = (i4 & 1 ^ 1) + (i35 - i3) | 0;
    i12 = i3;
    i4 = (i7 | 0) > (i4 | 0) ? i7 : i4;
    i10 = i8;
    i3 = i28;
   } else {
    i12 = i28;
    i4 = 0;
    i10 = i8;
    i3 = i28;
   }
  }
  i8 = i3 - i12 | 0;
  i4 = (i4 | 0) < (i8 | 0) ? i8 : i4;
  i7 = i9 + i4 | 0;
  i3 = (i25 | 0) < (i7 | 0) ? i7 : i25;
  _pad(i49, 32, i3, i7, i5);
  if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i10, i9, i49) | 0;
  _pad(i49, 48, i3, i7, i5 ^ 65536);
  _pad(i49, 48, i4, i8, 0);
  if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i12, i8, i49) | 0;
  _pad(i49, 32, i3, i7, i5 ^ 8192);
  i12 = i24;
 }
 L348 : do if ((i26 | 0) == 245) if (!i49) if (i2) {
  i1 = 1;
  while (1) {
   i2 = HEAP32[i52 + (i1 << 2) >> 2] | 0;
   if (!i2) break;
   _pop_arg(i51 + (i1 << 3) | 0, i2, i50);
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= 10) {
    i1 = 1;
    break L348;
   }
  }
  if ((i1 | 0) < 10) while (1) {
   if (HEAP32[i52 + (i1 << 2) >> 2] | 0) {
    i1 = -1;
    break L348;
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= 10) {
    i1 = 1;
    break;
   }
  } else i1 = 1;
 } else i1 = 0; while (0);
 STACKTOP = i53;
 return i1 | 0;
}
function ___floatscan(i24, i2, i21) {
 i24 = i24 | 0;
 i2 = i2 | 0;
 i21 = i21 | 0;
 var d1 = 0.0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0, i23 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, d32 = 0.0;
 i31 = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 i27 = i31;
 switch (i2 | 0) {
 case 0:
  {
   i30 = 24;
   i29 = -149;
   i19 = 4;
   break;
  }
 case 1:
  {
   i30 = 53;
   i29 = -1074;
   i19 = 4;
   break;
  }
 case 2:
  {
   i30 = 53;
   i29 = -1074;
   i19 = 4;
   break;
  }
 default:
  d1 = 0.0;
 }
 L4 : do if ((i19 | 0) == 4) {
  i23 = i24 + 4 | 0;
  i22 = i24 + 100 | 0;
  do {
   i2 = HEAP32[i23 >> 2] | 0;
   if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
    HEAP32[i23 >> 2] = i2 + 1;
    i2 = HEAPU8[i2 >> 0] | 0;
   } else i2 = ___shgetc(i24) | 0;
  } while ((_isspace(i2) | 0) != 0);
  L13 : do switch (i2 | 0) {
  case 43:
  case 45:
   {
    i3 = 1 - (((i2 | 0) == 45 & 1) << 1) | 0;
    i2 = HEAP32[i23 >> 2] | 0;
    if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
     HEAP32[i23 >> 2] = i2 + 1;
     i2 = HEAPU8[i2 >> 0] | 0;
     i28 = i3;
     break L13;
    } else {
     i2 = ___shgetc(i24) | 0;
     i28 = i3;
     break L13;
    }
   }
  default:
   i28 = 1;
  } while (0);
  i3 = i2;
  i2 = 0;
  do {
   if ((i3 | 32 | 0) != (HEAP8[58098 + i2 >> 0] | 0)) break;
   do if (i2 >>> 0 < 7) {
    i3 = HEAP32[i23 >> 2] | 0;
    if (i3 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
     HEAP32[i23 >> 2] = i3 + 1;
     i3 = HEAPU8[i3 >> 0] | 0;
     break;
    } else {
     i3 = ___shgetc(i24) | 0;
     break;
    }
   } while (0);
   i2 = i2 + 1 | 0;
  } while (i2 >>> 0 < 8);
  L29 : do switch (i2 | 0) {
  case 8:
   break;
  case 3:
   {
    i19 = 23;
    break;
   }
  default:
   {
    i5 = (i21 | 0) != 0;
    if (i5 & i2 >>> 0 > 3) if ((i2 | 0) == 8) break L29; else {
     i19 = 23;
     break L29;
    }
    L34 : do if (!i2) {
     i2 = 0;
     do {
      if ((i3 | 32 | 0) != (HEAP8[60979 + i2 >> 0] | 0)) break L34;
      do if (i2 >>> 0 < 2) {
       i3 = HEAP32[i23 >> 2] | 0;
       if (i3 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
        HEAP32[i23 >> 2] = i3 + 1;
        i3 = HEAPU8[i3 >> 0] | 0;
        break;
       } else {
        i3 = ___shgetc(i24) | 0;
        break;
       }
      } while (0);
      i2 = i2 + 1 | 0;
     } while (i2 >>> 0 < 3);
    } while (0);
    switch (i2 | 0) {
    case 3:
     {
      i2 = HEAP32[i23 >> 2] | 0;
      if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
       HEAP32[i23 >> 2] = i2 + 1;
       i2 = HEAPU8[i2 >> 0] | 0;
      } else i2 = ___shgetc(i24) | 0;
      if ((i2 | 0) == 40) i2 = 1; else {
       if (!(HEAP32[i22 >> 2] | 0)) {
        d1 = nan;
        break L4;
       }
       HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
       d1 = nan;
       break L4;
      }
      while (1) {
       i3 = HEAP32[i23 >> 2] | 0;
       if (i3 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
        HEAP32[i23 >> 2] = i3 + 1;
        i3 = HEAPU8[i3 >> 0] | 0;
       } else i3 = ___shgetc(i24) | 0;
       if (!((i3 + -48 | 0) >>> 0 < 10 | (i3 + -65 | 0) >>> 0 < 26) ? !((i3 | 0) == 95 | (i3 + -97 | 0) >>> 0 < 26) : 0) break;
       i2 = i2 + 1 | 0;
      }
      if ((i3 | 0) == 41) {
       d1 = nan;
       break L4;
      }
      i3 = (HEAP32[i22 >> 2] | 0) == 0;
      if (!i3) HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
      if (!i5) {
       HEAP32[(___errno_location() | 0) >> 2] = 22;
       ___shlim(i24, 0);
       d1 = 0.0;
       break L4;
      }
      if (!i2) {
       d1 = nan;
       break L4;
      }
      while (1) {
       i2 = i2 + -1 | 0;
       if (!i3) HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
       if (!i2) {
        d1 = nan;
        break L4;
       }
      }
     }
    case 0:
     {
      do if ((i3 | 0) == 48) {
       i2 = HEAP32[i23 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
        HEAP32[i23 >> 2] = i2 + 1;
        i2 = HEAPU8[i2 >> 0] | 0;
       } else i2 = ___shgetc(i24) | 0;
       if ((i2 | 32 | 0) != 120) {
        if (!(HEAP32[i22 >> 2] | 0)) {
         i2 = 48;
         break;
        }
        HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
        i2 = 48;
        break;
       }
       i2 = HEAP32[i23 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
        HEAP32[i23 >> 2] = i2 + 1;
        i2 = HEAPU8[i2 >> 0] | 0;
        i5 = 0;
       } else {
        i2 = ___shgetc(i24) | 0;
        i5 = 0;
       }
       L94 : while (1) {
        switch (i2 | 0) {
        case 46:
         {
          i19 = 74;
          break L94;
         }
        case 48:
         break;
        default:
         {
          i17 = 0;
          i6 = 0;
          i16 = 0;
          i3 = 0;
          i8 = i5;
          i9 = 0;
          i15 = 0;
          d7 = 1.0;
          i5 = 0;
          d1 = 0.0;
          break L94;
         }
        }
        i2 = HEAP32[i23 >> 2] | 0;
        if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
         HEAP32[i23 >> 2] = i2 + 1;
         i2 = HEAPU8[i2 >> 0] | 0;
         i5 = 1;
         continue;
        } else {
         i2 = ___shgetc(i24) | 0;
         i5 = 1;
         continue;
        }
       }
       if ((i19 | 0) == 74) {
        i2 = HEAP32[i23 >> 2] | 0;
        if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
         HEAP32[i23 >> 2] = i2 + 1;
         i2 = HEAPU8[i2 >> 0] | 0;
        } else i2 = ___shgetc(i24) | 0;
        if ((i2 | 0) == 48) {
         i5 = 0;
         i3 = 0;
         do {
          i2 = HEAP32[i23 >> 2] | 0;
          if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
           HEAP32[i23 >> 2] = i2 + 1;
           i2 = HEAPU8[i2 >> 0] | 0;
          } else i2 = ___shgetc(i24) | 0;
          i5 = _i64Add(i5 | 0, i3 | 0, -1, -1) | 0;
          i3 = tempRet0;
         } while ((i2 | 0) == 48);
         i17 = 0;
         i6 = 0;
         i16 = i5;
         i8 = 1;
         i9 = 1;
         i15 = 0;
         d7 = 1.0;
         i5 = 0;
         d1 = 0.0;
        } else {
         i17 = 0;
         i6 = 0;
         i16 = 0;
         i3 = 0;
         i8 = i5;
         i9 = 1;
         i15 = 0;
         d7 = 1.0;
         i5 = 0;
         d1 = 0.0;
        }
       }
       while (1) {
        i13 = i2 + -48 | 0;
        i10 = i2 | 32;
        if (i13 >>> 0 >= 10) {
         i14 = (i2 | 0) == 46;
         if (!(i14 | (i10 + -97 | 0) >>> 0 < 6)) {
          i10 = i16;
          i13 = i17;
          break;
         }
         if (i14) if (!i9) {
          i14 = i6;
          i3 = i17;
          i13 = i17;
          i9 = 1;
          i10 = i15;
          d4 = d7;
         } else {
          i10 = i16;
          i13 = i17;
          i2 = 46;
          break;
         } else i19 = 86;
        } else i19 = 86;
        if ((i19 | 0) == 86) {
         i19 = 0;
         i2 = (i2 | 0) > 57 ? i10 + -87 | 0 : i13;
         do if (!((i17 | 0) < 0 | (i17 | 0) == 0 & i6 >>> 0 < 8)) {
          if ((i17 | 0) < 0 | (i17 | 0) == 0 & i6 >>> 0 < 14) {
           d12 = d7 * .0625;
           i10 = i15;
           d4 = d12;
           d1 = d1 + d12 * +(i2 | 0);
           break;
          }
          if ((i15 | 0) != 0 | (i2 | 0) == 0) {
           i10 = i15;
           d4 = d7;
          } else {
           i10 = 1;
           d4 = d7;
           d1 = d1 + d7 * .5;
          }
         } else {
          i10 = i15;
          d4 = d7;
          i5 = i2 + (i5 << 4) | 0;
         } while (0);
         i6 = _i64Add(i6 | 0, i17 | 0, 1, 0) | 0;
         i14 = i16;
         i13 = tempRet0;
         i8 = 1;
        }
        i2 = HEAP32[i23 >> 2] | 0;
        if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
         HEAP32[i23 >> 2] = i2 + 1;
         i17 = i13;
         i16 = i14;
         i2 = HEAPU8[i2 >> 0] | 0;
         i15 = i10;
         d7 = d4;
         continue;
        } else {
         i17 = i13;
         i16 = i14;
         i2 = ___shgetc(i24) | 0;
         i15 = i10;
         d7 = d4;
         continue;
        }
       }
       if (!i8) {
        i2 = (HEAP32[i22 >> 2] | 0) == 0;
        if (!i2) HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
        if (i21) {
         if (!i2 ? (i18 = HEAP32[i23 >> 2] | 0, HEAP32[i23 >> 2] = i18 + -1, (i9 | 0) != 0) : 0) HEAP32[i23 >> 2] = i18 + -2;
        } else ___shlim(i24, 0);
        d1 = +(i28 | 0) * 0.0;
        break L4;
       }
       i8 = (i9 | 0) == 0;
       i9 = i8 ? i6 : i10;
       i8 = i8 ? i13 : i3;
       if ((i13 | 0) < 0 | (i13 | 0) == 0 & i6 >>> 0 < 8) {
        i3 = i13;
        do {
         i5 = i5 << 4;
         i6 = _i64Add(i6 | 0, i3 | 0, 1, 0) | 0;
         i3 = tempRet0;
        } while ((i3 | 0) < 0 | (i3 | 0) == 0 & i6 >>> 0 < 8);
       }
       if ((i2 | 32 | 0) == 112) {
        i3 = _scanexp(i24, i21) | 0;
        i2 = tempRet0;
        if ((i3 | 0) == 0 & (i2 | 0) == -2147483648) {
         if (!i21) {
          ___shlim(i24, 0);
          d1 = 0.0;
          break L4;
         }
         if (!(HEAP32[i22 >> 2] | 0)) {
          i3 = 0;
          i2 = 0;
         } else {
          HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
          i3 = 0;
          i2 = 0;
         }
        }
       } else if (!(HEAP32[i22 >> 2] | 0)) {
        i3 = 0;
        i2 = 0;
       } else {
        HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
        i3 = 0;
        i2 = 0;
       }
       i27 = _bitshift64Shl(i9 | 0, i8 | 0, 2) | 0;
       i27 = _i64Add(i27 | 0, tempRet0 | 0, -32, -1) | 0;
       i2 = _i64Add(i27 | 0, tempRet0 | 0, i3 | 0, i2 | 0) | 0;
       i3 = tempRet0;
       if (!i5) {
        d1 = +(i28 | 0) * 0.0;
        break L4;
       }
       if ((i3 | 0) > 0 | (i3 | 0) == 0 & i2 >>> 0 > (0 - i29 | 0) >>> 0) {
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        d1 = +(i28 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
        break L4;
       }
       i27 = i29 + -106 | 0;
       i26 = ((i27 | 0) < 0) << 31 >> 31;
       if ((i3 | 0) < (i26 | 0) | (i3 | 0) == (i26 | 0) & i2 >>> 0 < i27 >>> 0) {
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        d1 = +(i28 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
        break L4;
       }
       if ((i5 | 0) > -1) {
        do {
         i26 = !(d1 >= .5);
         i27 = i26 & 1 | i5 << 1;
         i5 = i27 ^ 1;
         d1 = d1 + (i26 ? d1 : d1 + -1.0);
         i2 = _i64Add(i2 | 0, i3 | 0, -1, -1) | 0;
         i3 = tempRet0;
        } while ((i27 | 0) > -1);
        i6 = i2;
        d7 = d1;
       } else {
        i6 = i2;
        d7 = d1;
       }
       i2 = _i64Subtract(32, 0, i29 | 0, ((i29 | 0) < 0) << 31 >> 31 | 0) | 0;
       i2 = _i64Add(i6 | 0, i3 | 0, i2 | 0, tempRet0 | 0) | 0;
       i29 = tempRet0;
       if (0 > (i29 | 0) | 0 == (i29 | 0) & i30 >>> 0 > i2 >>> 0) if ((i2 | 0) < 0) {
        i2 = 0;
        i19 = 127;
       } else i19 = 125; else {
        i2 = i30;
        i19 = 125;
       }
       if ((i19 | 0) == 125) if ((i2 | 0) < 53) i19 = 127; else {
        i3 = i2;
        d4 = +(i28 | 0);
        d1 = 0.0;
       }
       if ((i19 | 0) == 127) {
        d1 = +(i28 | 0);
        i3 = i2;
        d4 = d1;
        d1 = +_copysignl(+_scalbn(1.0, 84 - i2 | 0), d1);
       }
       i30 = (i5 & 1 | 0) == 0 & (d7 != 0.0 & (i3 | 0) < 32);
       d1 = d4 * (i30 ? 0.0 : d7) + (d1 + d4 * +(((i30 & 1) + i5 | 0) >>> 0)) - d1;
       if (!(d1 != 0.0)) HEAP32[(___errno_location() | 0) >> 2] = 34;
       d1 = +_scalbnl(d1, i6);
       break L4;
      } else i2 = i3; while (0);
      i25 = i29 + i30 | 0;
      i26 = 0 - i25 | 0;
      i5 = 0;
      L184 : while (1) {
       switch (i2 | 0) {
       case 46:
        {
         i19 = 138;
         break L184;
        }
       case 48:
        break;
       default:
        {
         i3 = 0;
         i10 = 0;
         i9 = 0;
         break L184;
        }
       }
       i2 = HEAP32[i23 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
        HEAP32[i23 >> 2] = i2 + 1;
        i2 = HEAPU8[i2 >> 0] | 0;
        i5 = 1;
        continue;
       } else {
        i2 = ___shgetc(i24) | 0;
        i5 = 1;
        continue;
       }
      }
      if ((i19 | 0) == 138) {
       i2 = HEAP32[i23 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
        HEAP32[i23 >> 2] = i2 + 1;
        i2 = HEAPU8[i2 >> 0] | 0;
       } else i2 = ___shgetc(i24) | 0;
       if ((i2 | 0) == 48) {
        i3 = 0;
        i2 = 0;
        while (1) {
         i3 = _i64Add(i3 | 0, i2 | 0, -1, -1) | 0;
         i5 = tempRet0;
         i2 = HEAP32[i23 >> 2] | 0;
         if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
          HEAP32[i23 >> 2] = i2 + 1;
          i2 = HEAPU8[i2 >> 0] | 0;
         } else i2 = ___shgetc(i24) | 0;
         if ((i2 | 0) == 48) i2 = i5; else {
          i10 = i5;
          i5 = 1;
          i9 = 1;
          break;
         }
        }
       } else {
        i3 = 0;
        i10 = 0;
        i9 = 1;
       }
      }
      HEAP32[i27 >> 2] = 0;
      i8 = i2 + -48 | 0;
      i6 = (i2 | 0) == 46;
      L203 : do if (i6 | i8 >>> 0 < 10) {
       i20 = i27 + 496 | 0;
       i17 = 0;
       i14 = 0;
       i15 = i6;
       i19 = i10;
       i13 = i5;
       i18 = i9;
       i5 = 0;
       i6 = 0;
       i9 = 0;
       L205 : while (1) {
        do if (i15) if (!i18) {
         i3 = i17;
         i10 = i14;
         i18 = 1;
        } else {
         i10 = i19;
         i2 = i17;
         i8 = i14;
         break L205;
        } else {
         i15 = _i64Add(i17 | 0, i14 | 0, 1, 0) | 0;
         i14 = tempRet0;
         i16 = (i2 | 0) != 48;
         if ((i6 | 0) >= 125) {
          if (!i16) {
           i10 = i19;
           i17 = i15;
           break;
          }
          HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 1;
          i10 = i19;
          i17 = i15;
          break;
         }
         i10 = i27 + (i6 << 2) | 0;
         if (i5) i8 = i2 + -48 + ((HEAP32[i10 >> 2] | 0) * 10 | 0) | 0;
         HEAP32[i10 >> 2] = i8;
         i5 = i5 + 1 | 0;
         i8 = (i5 | 0) == 9;
         i10 = i19;
         i17 = i15;
         i13 = 1;
         i5 = i8 ? 0 : i5;
         i6 = (i8 & 1) + i6 | 0;
         i9 = i16 ? i15 : i9;
        } while (0);
        i2 = HEAP32[i23 >> 2] | 0;
        if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
         HEAP32[i23 >> 2] = i2 + 1;
         i2 = HEAPU8[i2 >> 0] | 0;
        } else i2 = ___shgetc(i24) | 0;
        i8 = i2 + -48 | 0;
        i15 = (i2 | 0) == 46;
        if (!(i15 | i8 >>> 0 < 10)) {
         i8 = i18;
         i19 = 161;
         break L203;
        } else i19 = i10;
       }
       i13 = (i13 | 0) != 0;
       i19 = 169;
      } else {
       i17 = 0;
       i14 = 0;
       i13 = i5;
       i8 = i9;
       i5 = 0;
       i6 = 0;
       i9 = 0;
       i19 = 161;
      } while (0);
      do if ((i19 | 0) == 161) {
       i20 = (i8 | 0) == 0;
       i3 = i20 ? i17 : i3;
       i10 = i20 ? i14 : i10;
       i13 = (i13 | 0) != 0;
       if (!((i2 | 32 | 0) == 101 & i13)) if ((i2 | 0) > -1) {
        i2 = i17;
        i8 = i14;
        i19 = 169;
        break;
       } else {
        i2 = i17;
        i8 = i14;
        i19 = 171;
        break;
       }
       i8 = _scanexp(i24, i21) | 0;
       i2 = tempRet0;
       if ((i8 | 0) == 0 & (i2 | 0) == -2147483648) {
        if (!i21) {
         ___shlim(i24, 0);
         d1 = 0.0;
         break;
        }
        if (!(HEAP32[i22 >> 2] | 0)) {
         i8 = 0;
         i2 = 0;
        } else {
         HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
         i8 = 0;
         i2 = 0;
        }
       }
       i3 = _i64Add(i8 | 0, i2 | 0, i3 | 0, i10 | 0) | 0;
       i13 = i17;
       i10 = tempRet0;
       i8 = i14;
       i19 = 173;
      } while (0);
      if ((i19 | 0) == 169) if (HEAP32[i22 >> 2] | 0) {
       HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
       if (i13) {
        i13 = i2;
        i19 = 173;
       } else i19 = 172;
      } else i19 = 171;
      if ((i19 | 0) == 171) if (i13) {
       i13 = i2;
       i19 = 173;
      } else i19 = 172;
      do if ((i19 | 0) == 172) {
       HEAP32[(___errno_location() | 0) >> 2] = 22;
       ___shlim(i24, 0);
       d1 = 0.0;
      } else if ((i19 | 0) == 173) {
       i2 = HEAP32[i27 >> 2] | 0;
       if (!i2) {
        d1 = +(i28 | 0) * 0.0;
        break;
       }
       if (((i8 | 0) < 0 | (i8 | 0) == 0 & i13 >>> 0 < 10) & ((i3 | 0) == (i13 | 0) & (i10 | 0) == (i8 | 0)) ? i30 >>> 0 > 30 | (i2 >>> i30 | 0) == 0 : 0) {
        d1 = +(i28 | 0) * +(i2 >>> 0);
        break;
       }
       i24 = (i29 | 0) / -2 | 0;
       i23 = ((i24 | 0) < 0) << 31 >> 31;
       if ((i10 | 0) > (i23 | 0) | (i10 | 0) == (i23 | 0) & i3 >>> 0 > i24 >>> 0) {
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        d1 = +(i28 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
        break;
       }
       i24 = i29 + -106 | 0;
       i23 = ((i24 | 0) < 0) << 31 >> 31;
       if ((i10 | 0) < (i23 | 0) | (i10 | 0) == (i23 | 0) & i3 >>> 0 < i24 >>> 0) {
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        d1 = +(i28 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
        break;
       }
       if (i5) {
        if ((i5 | 0) < 9) {
         i8 = i27 + (i6 << 2) | 0;
         i2 = HEAP32[i8 >> 2] | 0;
         do {
          i2 = i2 * 10 | 0;
          i5 = i5 + 1 | 0;
         } while ((i5 | 0) != 9);
         HEAP32[i8 >> 2] = i2;
        }
        i6 = i6 + 1 | 0;
       }
       if ((i9 | 0) < 9 ? (i9 | 0) <= (i3 | 0) & (i3 | 0) < 18 : 0) {
        if ((i3 | 0) == 9) {
         d1 = +(i28 | 0) * +((HEAP32[i27 >> 2] | 0) >>> 0);
         break;
        }
        if ((i3 | 0) < 9) {
         d1 = +(i28 | 0) * +((HEAP32[i27 >> 2] | 0) >>> 0) / +(HEAP32[23172 + (8 - i3 << 2) >> 2] | 0);
         break;
        }
        i24 = i30 + 27 + (Math_imul(i3, -3) | 0) | 0;
        i2 = HEAP32[i27 >> 2] | 0;
        if ((i24 | 0) > 30 | (i2 >>> i24 | 0) == 0) {
         d1 = +(i28 | 0) * +(i2 >>> 0) * +(HEAP32[23172 + (i3 + -10 << 2) >> 2] | 0);
         break;
        }
       }
       i2 = (i3 | 0) % 9 | 0;
       if (!i2) {
        i5 = 0;
        i2 = 0;
       } else {
        i13 = (i3 | 0) > -1 ? i2 : i2 + 9 | 0;
        i8 = HEAP32[23172 + (8 - i13 << 2) >> 2] | 0;
        if (i6) {
         i9 = 1e9 / (i8 | 0) | 0;
         i5 = 0;
         i2 = 0;
         i10 = 0;
         do {
          i22 = i27 + (i10 << 2) | 0;
          i23 = HEAP32[i22 >> 2] | 0;
          i24 = ((i23 >>> 0) / (i8 >>> 0) | 0) + i2 | 0;
          HEAP32[i22 >> 2] = i24;
          i2 = Math_imul((i23 >>> 0) % (i8 >>> 0) | 0, i9) | 0;
          i24 = (i10 | 0) == (i5 | 0) & (i24 | 0) == 0;
          i10 = i10 + 1 | 0;
          i3 = i24 ? i3 + -9 | 0 : i3;
          i5 = i24 ? i10 & 127 : i5;
         } while ((i10 | 0) != (i6 | 0));
         if (i2) {
          HEAP32[i27 + (i6 << 2) >> 2] = i2;
          i6 = i6 + 1 | 0;
         }
        } else {
         i5 = 0;
         i6 = 0;
        }
        i2 = 0;
        i3 = 9 - i13 + i3 | 0;
       }
       L284 : while (1) {
        i14 = (i3 | 0) < 18;
        i15 = (i3 | 0) == 18;
        i16 = i27 + (i5 << 2) | 0;
        do {
         if (!i14) {
          if (!i15) break L284;
          if ((HEAP32[i16 >> 2] | 0) >>> 0 >= 9007199) {
           i3 = 18;
           break L284;
          }
         }
         i8 = 0;
         i9 = i6 + 127 | 0;
         while (1) {
          i13 = i9 & 127;
          i10 = i27 + (i13 << 2) | 0;
          i9 = _bitshift64Shl(HEAP32[i10 >> 2] | 0, 0, 29) | 0;
          i9 = _i64Add(i9 | 0, tempRet0 | 0, i8 | 0, 0) | 0;
          i8 = tempRet0;
          if (i8 >>> 0 > 0 | (i8 | 0) == 0 & i9 >>> 0 > 1e9) {
           i24 = ___udivdi3(i9 | 0, i8 | 0, 1e9, 0) | 0;
           i9 = ___uremdi3(i9 | 0, i8 | 0, 1e9, 0) | 0;
           i8 = i24;
          } else i8 = 0;
          HEAP32[i10 >> 2] = i9;
          i24 = (i13 | 0) == (i5 | 0);
          i6 = (i13 | 0) != (i6 + 127 & 127 | 0) | i24 ? i6 : (i9 | 0) == 0 ? i13 : i6;
          if (i24) break; else i9 = i13 + -1 | 0;
         }
         i2 = i2 + -29 | 0;
        } while ((i8 | 0) == 0);
        i5 = i5 + 127 & 127;
        if ((i5 | 0) == (i6 | 0)) {
         i24 = i6 + 127 & 127;
         i6 = i27 + ((i6 + 126 & 127) << 2) | 0;
         HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | HEAP32[i27 + (i24 << 2) >> 2];
         i6 = i24;
        }
        HEAP32[i27 + (i5 << 2) >> 2] = i8;
        i3 = i3 + 9 | 0;
       }
       L302 : while (1) {
        i17 = i6 + 1 & 127;
        i16 = i27 + ((i6 + 127 & 127) << 2) | 0;
        while (1) {
         i14 = (i3 | 0) == 18;
         i15 = (i3 | 0) > 27 ? 9 : 1;
         i13 = i14 ^ 1;
         while (1) {
          i9 = i5 & 127;
          i10 = (i9 | 0) == (i6 | 0);
          do if (!i10) {
           i8 = HEAP32[i27 + (i9 << 2) >> 2] | 0;
           if (i8 >>> 0 < 9007199) {
            i19 = 219;
            break;
           }
           if (i8 >>> 0 > 9007199) break;
           i8 = i5 + 1 & 127;
           if ((i8 | 0) == (i6 | 0)) {
            i19 = 219;
            break;
           }
           i8 = HEAP32[i27 + (i8 << 2) >> 2] | 0;
           if (i8 >>> 0 < 254740991) {
            i19 = 219;
            break;
           }
           if (!(i8 >>> 0 > 254740991 | i13)) {
            i3 = i9;
            break L302;
           }
          } else i19 = 219; while (0);
          if ((i19 | 0) == 219 ? (i19 = 0, i14) : 0) {
           i19 = 220;
           break L302;
          }
          i2 = i2 + i15 | 0;
          if ((i5 | 0) == (i6 | 0)) i5 = i6; else break;
         }
         i13 = (1 << i15) + -1 | 0;
         i14 = 1e9 >>> i15;
         i9 = i5;
         i8 = 0;
         i10 = i5;
         while (1) {
          i23 = i27 + (i10 << 2) | 0;
          i24 = HEAP32[i23 >> 2] | 0;
          i5 = (i24 >>> i15) + i8 | 0;
          HEAP32[i23 >> 2] = i5;
          i8 = Math_imul(i24 & i13, i14) | 0;
          i5 = (i10 | 0) == (i9 | 0) & (i5 | 0) == 0;
          i10 = i10 + 1 & 127;
          i3 = i5 ? i3 + -9 | 0 : i3;
          i5 = i5 ? i10 : i9;
          if ((i10 | 0) == (i6 | 0)) break; else i9 = i5;
         }
         if (!i8) continue;
         if ((i17 | 0) != (i5 | 0)) break;
         HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 1;
        }
        HEAP32[i27 + (i6 << 2) >> 2] = i8;
        i6 = i17;
       }
       if ((i19 | 0) == 220) if (i10) {
        HEAP32[i27 + (i17 + -1 << 2) >> 2] = 0;
        i3 = i6;
        i6 = i17;
       } else i3 = i9;
       d1 = +((HEAP32[i27 + (i3 << 2) >> 2] | 0) >>> 0);
       i3 = i5 + 1 & 127;
       if ((i3 | 0) == (i6 | 0)) {
        i6 = i5 + 2 & 127;
        HEAP32[i27 + (i6 + -1 << 2) >> 2] = 0;
       }
       d12 = +(i28 | 0);
       d4 = d12 * (d1 * 1.0e9 + +((HEAP32[i27 + (i3 << 2) >> 2] | 0) >>> 0));
       i14 = i2 + 53 | 0;
       i10 = i14 - i29 | 0;
       i13 = (i10 | 0) < (i30 | 0);
       i3 = i13 & 1;
       i9 = i13 ? ((i10 | 0) < 0 ? 0 : i10) : i30;
       if ((i9 | 0) < 53) {
        d32 = +_copysignl(+_scalbn(1.0, 105 - i9 | 0), d4);
        d7 = +_fmodl(d4, +_scalbn(1.0, 53 - i9 | 0));
        d11 = d32;
        d1 = d7;
        d7 = d32 + (d4 - d7);
       } else {
        d11 = 0.0;
        d1 = 0.0;
        d7 = d4;
       }
       i8 = i5 + 2 & 127;
       do if ((i8 | 0) == (i6 | 0)) d4 = d1; else {
        i8 = HEAP32[i27 + (i8 << 2) >> 2] | 0;
        do if (i8 >>> 0 >= 5e8) {
         if (i8 >>> 0 > 5e8) {
          d1 = d12 * .75 + d1;
          break;
         }
         if ((i5 + 3 & 127 | 0) == (i6 | 0)) {
          d1 = d12 * .5 + d1;
          break;
         } else {
          d1 = d12 * .75 + d1;
          break;
         }
        } else {
         if ((i8 | 0) == 0 ? (i5 + 3 & 127 | 0) == (i6 | 0) : 0) break;
         d1 = d12 * .25 + d1;
        } while (0);
        if ((53 - i9 | 0) <= 1) {
         d4 = d1;
         break;
        }
        if (+_fmodl(d1, 1.0) != 0.0) {
         d4 = d1;
         break;
        }
        d4 = d1 + 1.0;
       } while (0);
       d1 = d7 + d4 - d11;
       do if ((i14 & 2147483647 | 0) > (-2 - i25 | 0)) {
        if (+Math_abs(+d1) >= 9007199254740992.0) {
         i3 = i13 & (i9 | 0) == (i10 | 0) ? 0 : i3;
         i2 = i2 + 1 | 0;
         d1 = d1 * .5;
        }
        if ((i2 + 50 | 0) <= (i26 | 0) ? !(d4 != 0.0 & (i3 | 0) != 0) : 0) break;
        HEAP32[(___errno_location() | 0) >> 2] = 34;
       } while (0);
       d1 = +_scalbnl(d1, i2);
      } while (0);
      break L4;
     }
    default:
     {
      if (HEAP32[i22 >> 2] | 0) HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
      HEAP32[(___errno_location() | 0) >> 2] = 22;
      ___shlim(i24, 0);
      d1 = 0.0;
      break L4;
     }
    }
   }
  } while (0);
  if ((i19 | 0) == 23) {
   i3 = (HEAP32[i22 >> 2] | 0) == 0;
   if (!i3) HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
   if ((i21 | 0) != 0 & i2 >>> 0 > 3) do {
    if (!i3) HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
    i2 = i2 + -1 | 0;
   } while (i2 >>> 0 > 3);
  }
  d1 = +(i28 | 0) * inf;
 } while (0);
 STACKTOP = i31;
 return +d1;
}
function _BlitNtoNSurfaceAlpha(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0;
 i1 = HEAP32[i5 + 24 >> 2] | 0;
 i4 = HEAP32[i5 + 28 >> 2] | 0;
 i39 = HEAP32[i5 + 16 >> 2] | 0;
 i40 = HEAP32[i5 + 36 >> 2] | 0;
 i3 = HEAP32[i5 + 40 >> 2] | 0;
 i2 = HEAP32[i5 + 44 >> 2] | 0;
 i35 = HEAPU8[i3 + 9 >> 0] | 0;
 i36 = HEAPU8[i2 + 9 >> 0] | 0;
 i38 = HEAP8[i5 + 63 >> 0] | 0;
 i37 = i38 & 255;
 if (i38 << 24 >> 24 == 0 | (i4 | 0) == 0) return;
 i38 = (i1 + 3 | 0) / 4 | 0;
 i23 = i1 & 3;
 i24 = i2 + 28 | 0;
 i25 = i2 + 32 | 0;
 i26 = i2 + 29 | 0;
 i27 = i2 + 33 | 0;
 i28 = i2 + 30 | 0;
 i29 = i2 + 34 | 0;
 i30 = i2 + 31 | 0;
 i31 = i2 + 35 | 0;
 i32 = i2 + 12 | 0;
 i33 = i2 + 16 | 0;
 i34 = i2 + 20 | 0;
 i14 = i2 + 24 | 0;
 i15 = i3 + 12 | 0;
 i16 = i3 + 32 | 0;
 i17 = i3 + 28 | 0;
 i18 = i3 + 16 | 0;
 i19 = i3 + 33 | 0;
 i20 = i3 + 29 | 0;
 i21 = i3 + 20 | 0;
 i22 = i3 + 34 | 0;
 i13 = i3 + 30 | 0;
 i1 = HEAP32[i5 + 20 >> 2] | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 L4 : while (1) {
  i4 = i4 + -1 | 0;
  switch (i23 | 0) {
  case 0:
   {
    i12 = i38;
    i3 = 4;
    break;
   }
  case 3:
   {
    i12 = i38;
    i3 = 20;
    break;
   }
  case 2:
   {
    i12 = i38;
    i3 = 36;
    break;
   }
  case 1:
   {
    i12 = i38;
    i3 = 52;
    break;
   }
  default:
   i3 = 68;
  }
  while (1) if ((i3 | 0) == 4) {
   switch (i35 | 0) {
   case 1:
    {
     i5 = HEAPU8[i2 >> 0] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i5) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i15 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i5 = HEAPU16[i2 >> 1] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i5) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i15 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i10 = HEAPU8[i2 + ((HEAPU8[i22 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = HEAPU8[i2 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i5 = HEAP32[i2 >> 2] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i5) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i5) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i10 = 0;
     i7 = 0;
     i5 = 0;
    }
   }
   switch (i36 | 0) {
   case 1:
    {
     i3 = HEAPU8[i1 >> 0] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i3) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
     i9 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i3) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i3) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((i3 & HEAP32[i32 >> 2]) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i1 >> 1] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i3) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
     i9 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i3) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i3) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((i3 & HEAP32[i32 >> 2]) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i11 = 255;
     i9 = HEAPU8[i1 + ((HEAPU8[i29 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i1 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i3 = HEAPU8[i1 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i1 >> 2] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i3) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
     i9 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i3) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i3) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i3) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i11 = 0;
     i9 = 0;
     i6 = 0;
     i3 = 0;
    }
   }
   i8 = (((Math_imul(i5 - i3 | 0, i37) | 0) >>> 0) / 255 | 0) + i3 | 0;
   i6 = (((Math_imul(i7 - i6 | 0, i37) | 0) >>> 0) / 255 | 0) + i6 | 0;
   i5 = (((Math_imul(i10 - i9 | 0, i37) | 0) >>> 0) / 255 | 0) + i9 | 0;
   i3 = i11 + i37 - (((Math_imul(i11, i37) | 0) >>> 0) / 255 | 0) | 0;
   switch (i36 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i8 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i5 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0) | i3 >>> (HEAPU8[i30 >> 0] | 0) << (HEAPU8[i31 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i8 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i5 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0) | i3 >>> (HEAPU8[i30 >> 0] | 0) << (HEAPU8[i31 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     HEAP8[i1 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i1 + ((HEAPU8[i29 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
     break;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i8 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i5 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0) | i3 >>> (HEAPU8[i30 >> 0] | 0) << (HEAPU8[i31 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i36 | 0;
   i2 = i2 + i35 | 0;
   i3 = 20;
   continue;
  } else if ((i3 | 0) == 20) {
   switch (i35 | 0) {
   case 1:
    {
     i5 = HEAPU8[i2 >> 0] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i5) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i15 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i5 = HEAPU16[i2 >> 1] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i5) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i15 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i10 = HEAPU8[i2 + ((HEAPU8[i22 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = HEAPU8[i2 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i5 = HEAP32[i2 >> 2] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i5) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i5) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i10 = 0;
     i7 = 0;
     i5 = 0;
    }
   }
   switch (i36 | 0) {
   case 1:
    {
     i3 = HEAPU8[i1 >> 0] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i3) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
     i9 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i3) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i3) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((i3 & HEAP32[i32 >> 2]) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i1 >> 1] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i3) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
     i9 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i3) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i3) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((i3 & HEAP32[i32 >> 2]) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i11 = 255;
     i9 = HEAPU8[i1 + ((HEAPU8[i29 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i1 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i3 = HEAPU8[i1 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i1 >> 2] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i3) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
     i9 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i3) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i3) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i3) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i11 = 0;
     i9 = 0;
     i6 = 0;
     i3 = 0;
    }
   }
   i8 = (((Math_imul(i5 - i3 | 0, i37) | 0) >>> 0) / 255 | 0) + i3 | 0;
   i6 = (((Math_imul(i7 - i6 | 0, i37) | 0) >>> 0) / 255 | 0) + i6 | 0;
   i5 = (((Math_imul(i10 - i9 | 0, i37) | 0) >>> 0) / 255 | 0) + i9 | 0;
   i3 = i11 + i37 - (((Math_imul(i11, i37) | 0) >>> 0) / 255 | 0) | 0;
   switch (i36 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i8 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i5 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0) | i3 >>> (HEAPU8[i30 >> 0] | 0) << (HEAPU8[i31 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i8 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i5 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0) | i3 >>> (HEAPU8[i30 >> 0] | 0) << (HEAPU8[i31 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     HEAP8[i1 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i1 + ((HEAPU8[i29 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
     break;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i8 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i5 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0) | i3 >>> (HEAPU8[i30 >> 0] | 0) << (HEAPU8[i31 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i36 | 0;
   i2 = i2 + i35 | 0;
   i3 = 36;
   continue;
  } else if ((i3 | 0) == 36) {
   switch (i35 | 0) {
   case 1:
    {
     i5 = HEAPU8[i2 >> 0] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i5) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i15 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i5 = HEAPU16[i2 >> 1] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i5) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i15 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i10 = HEAPU8[i2 + ((HEAPU8[i22 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = HEAPU8[i2 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i5 = HEAP32[i2 >> 2] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i5) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i5) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i10 = 0;
     i7 = 0;
     i5 = 0;
    }
   }
   switch (i36 | 0) {
   case 1:
    {
     i3 = HEAPU8[i1 >> 0] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i3) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
     i9 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i3) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i3) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((i3 & HEAP32[i32 >> 2]) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i1 >> 1] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i3) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
     i9 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i3) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i3) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((i3 & HEAP32[i32 >> 2]) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i11 = 255;
     i9 = HEAPU8[i1 + ((HEAPU8[i29 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i1 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i3 = HEAPU8[i1 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i1 >> 2] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i3) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
     i9 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i3) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i3) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i3) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i11 = 0;
     i9 = 0;
     i6 = 0;
     i3 = 0;
    }
   }
   i8 = (((Math_imul(i5 - i3 | 0, i37) | 0) >>> 0) / 255 | 0) + i3 | 0;
   i6 = (((Math_imul(i7 - i6 | 0, i37) | 0) >>> 0) / 255 | 0) + i6 | 0;
   i5 = (((Math_imul(i10 - i9 | 0, i37) | 0) >>> 0) / 255 | 0) + i9 | 0;
   i3 = i11 + i37 - (((Math_imul(i11, i37) | 0) >>> 0) / 255 | 0) | 0;
   switch (i36 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i8 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i5 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0) | i3 >>> (HEAPU8[i30 >> 0] | 0) << (HEAPU8[i31 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i8 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i5 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0) | i3 >>> (HEAPU8[i30 >> 0] | 0) << (HEAPU8[i31 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     HEAP8[i1 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i1 + ((HEAPU8[i29 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
     break;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i8 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i5 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0) | i3 >>> (HEAPU8[i30 >> 0] | 0) << (HEAPU8[i31 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i36 | 0;
   i2 = i2 + i35 | 0;
   i3 = 52;
   continue;
  } else if ((i3 | 0) == 52) {
   switch (i35 | 0) {
   case 1:
    {
     i5 = HEAPU8[i2 >> 0] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i5) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i15 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i5 = HEAPU16[i2 >> 1] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i5) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i15 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i10 = HEAPU8[i2 + ((HEAPU8[i22 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = HEAPU8[i2 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i5 = HEAP32[i2 >> 2] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i5) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i5) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i10 = 0;
     i7 = 0;
     i5 = 0;
    }
   }
   switch (i36 | 0) {
   case 1:
    {
     i3 = HEAPU8[i1 >> 0] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i3) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
     i9 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i3) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i3) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((i3 & HEAP32[i32 >> 2]) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i1 >> 1] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i3) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
     i9 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i3) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i3) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((i3 & HEAP32[i32 >> 2]) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i11 = 255;
     i9 = HEAPU8[i1 + ((HEAPU8[i29 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i1 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i3 = HEAPU8[i1 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i1 >> 2] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i3) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
     i9 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i3) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i3) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i3 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i3) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i11 = 0;
     i9 = 0;
     i6 = 0;
     i3 = 0;
    }
   }
   i8 = (((Math_imul(i5 - i3 | 0, i37) | 0) >>> 0) / 255 | 0) + i3 | 0;
   i6 = (((Math_imul(i7 - i6 | 0, i37) | 0) >>> 0) / 255 | 0) + i6 | 0;
   i5 = (((Math_imul(i10 - i9 | 0, i37) | 0) >>> 0) / 255 | 0) + i9 | 0;
   i3 = i11 + i37 - (((Math_imul(i11, i37) | 0) >>> 0) / 255 | 0) | 0;
   switch (i36 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i8 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i5 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0) | i3 >>> (HEAPU8[i30 >> 0] | 0) << (HEAPU8[i31 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i8 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i5 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0) | i3 >>> (HEAPU8[i30 >> 0] | 0) << (HEAPU8[i31 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     HEAP8[i1 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i1 + ((HEAPU8[i29 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
     break;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i8 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i5 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0) | i3 >>> (HEAPU8[i30 >> 0] | 0) << (HEAPU8[i31 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i2 = i2 + i35 | 0;
   i1 = i1 + i36 | 0;
   if ((i12 | 0) > 1) {
    i12 = i12 + -1 | 0;
    i3 = 4;
    continue;
   } else {
    i3 = 68;
    continue;
   }
  } else if ((i3 | 0) == 68) if (!i4) break L4; else {
   i1 = i1 + i40 | 0;
   i2 = i2 + i39 | 0;
   continue L4;
  }
 }
 return;
}

function _SDL_BlendLine_RGB4(i31, i29, i30, i8, i9, i5, i1, i4, i3, i2, i10) {
 i31 = i31 | 0;
 i29 = i29 | 0;
 i30 = i30 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i10 = i10 | 0;
 var i6 = 0, i7 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
 i32 = HEAP32[i31 + 4 >> 2] | 0;
 i1 = i1 & 255;
 if ((i5 + -1 | 0) >>> 0 < 2) {
  i33 = i2 & 255;
  i2 = i33;
  i35 = ((Math_imul(i33, i3 & 255) | 0) >>> 0) / 255 | 0;
  i34 = ((Math_imul(i33, i4 & 255) | 0) >>> 0) / 255 | 0;
  i33 = ((Math_imul(i33, i1) | 0) >>> 0) / 255 | 0;
 } else {
  i2 = i2 & 255;
  i35 = i3 & 255;
  i34 = i4 & 255;
  i33 = i1;
 }
 i28 = i2 ^ 255;
 if ((i9 | 0) == (i30 | 0)) switch (i5 | 0) {
 case 1:
  {
   i1 = Math_imul((HEAP32[i31 + 16 >> 2] | 0) / (HEAPU8[i32 + 9 >> 0] | 0 | 0) | 0, i9) | 0;
   if ((i8 | 0) < (i29 | 0)) {
    i30 = (i10 | 0) != 0 & 1;
    i16 = (i30 ^ 1) + i8 + i1 | 0;
    i1 = i29 - i8 + i30 | 0;
   } else {
    i16 = i1 + i29 | 0;
    i1 = i8 - i29 + ((i10 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i10 = i32 + 12 | 0;
   i11 = i32 + 16 | 0;
   i12 = i32 + 20 | 0;
   i13 = i32 + 24 | 0;
   i4 = HEAPU8[i32 + 28 >> 0] | 0;
   i7 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i32 + 29 >> 0] | 0;
   i8 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i32 + 30 >> 0] | 0;
   i9 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i14 = HEAPU8[i32 + 32 >> 0] | 0;
   i15 = HEAPU8[i32 + 33 >> 0] | 0;
   i3 = HEAPU8[i32 + 34 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i31 + 20 >> 2] | 0) + (i16 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i32 = HEAP32[i1 >> 2] | 0;
    i30 = ((((Math_imul(HEAPU8[i7 + ((HEAP32[i10 >> 2] & i32) >>> i14) >> 0] | 0, i28) | 0) >>> 0) / 255 | 0) + i33 | 0) >>> i4 << i14;
    i31 = ((((Math_imul(HEAPU8[i8 + ((HEAP32[i11 >> 2] & i32) >>> i15) >> 0] | 0, i28) | 0) >>> 0) / 255 | 0) + i34 | 0) >>> i5 << i15;
    i32 = ((((Math_imul(HEAPU8[i9 + ((HEAP32[i12 >> 2] & i32) >>> i3) >> 0] | 0, i28) | 0) >>> 0) / 255 | 0) + i35 | 0) >>> i6 << i3;
    HEAP32[i1 >> 2] = HEAP32[i13 >> 2] | i30 | i31 | i32;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 case 2:
  {
   i1 = Math_imul((HEAP32[i31 + 16 >> 2] | 0) / (HEAPU8[i32 + 9 >> 0] | 0 | 0) | 0, i9) | 0;
   if ((i8 | 0) < (i29 | 0)) {
    i30 = (i10 | 0) != 0 & 1;
    i16 = (i30 ^ 1) + i8 + i1 | 0;
    i1 = i29 - i8 + i30 | 0;
   } else {
    i16 = i1 + i29 | 0;
    i1 = i8 - i29 + ((i10 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i10 = i32 + 12 | 0;
   i11 = i32 + 16 | 0;
   i12 = i32 + 20 | 0;
   i13 = i32 + 24 | 0;
   i4 = HEAPU8[i32 + 28 >> 0] | 0;
   i7 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i32 + 29 >> 0] | 0;
   i8 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i32 + 30 >> 0] | 0;
   i9 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i14 = HEAPU8[i32 + 32 >> 0] | 0;
   i15 = HEAPU8[i32 + 33 >> 0] | 0;
   i3 = HEAPU8[i32 + 34 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i31 + 20 >> 2] | 0) + (i16 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i32 = HEAP32[i1 >> 2] | 0;
    i31 = (HEAPU8[i7 + ((HEAP32[i10 >> 2] & i32) >>> i14) >> 0] | 0) + i33 | 0;
    i30 = (HEAPU8[i8 + ((HEAP32[i11 >> 2] & i32) >>> i15) >> 0] | 0) + i34 | 0;
    i32 = (HEAPU8[i9 + ((HEAP32[i12 >> 2] & i32) >>> i3) >> 0] | 0) + i35 | 0;
    HEAP32[i1 >> 2] = (i30 >>> 0 > 255 ? 255 : i30) >>> i5 << i15 | (i31 >>> 0 > 255 ? 255 : i31) >>> i4 << i14 | HEAP32[i13 >> 2] | (i32 >>> 0 > 255 ? 255 : i32) >>> i6 << i3;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 case 4:
  {
   i1 = Math_imul((HEAP32[i31 + 16 >> 2] | 0) / (HEAPU8[i32 + 9 >> 0] | 0 | 0) | 0, i9) | 0;
   if ((i8 | 0) < (i29 | 0)) {
    i30 = (i10 | 0) != 0 & 1;
    i16 = (i30 ^ 1) + i8 + i1 | 0;
    i1 = i29 - i8 + i30 | 0;
   } else {
    i16 = i1 + i29 | 0;
    i1 = i8 - i29 + ((i10 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i10 = i32 + 12 | 0;
   i11 = i32 + 16 | 0;
   i12 = i32 + 20 | 0;
   i13 = i32 + 24 | 0;
   i4 = HEAPU8[i32 + 28 >> 0] | 0;
   i7 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i32 + 29 >> 0] | 0;
   i8 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i32 + 30 >> 0] | 0;
   i9 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i14 = HEAPU8[i32 + 32 >> 0] | 0;
   i15 = HEAPU8[i32 + 33 >> 0] | 0;
   i3 = HEAPU8[i32 + 34 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i31 + 20 >> 2] | 0) + (i16 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i32 = HEAP32[i1 >> 2] | 0;
    i31 = (((Math_imul(HEAPU8[i8 + ((HEAP32[i11 >> 2] & i32) >>> i15) >> 0] | 0, i34) | 0) >>> 0) / 255 | 0) >>> i5 << i15 | (((Math_imul(HEAPU8[i7 + ((HEAP32[i10 >> 2] & i32) >>> i14) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) >>> i4 << i14;
    i32 = (((Math_imul(HEAPU8[i9 + ((HEAP32[i12 >> 2] & i32) >>> i3) >> 0] | 0, i35) | 0) >>> 0) / 255 | 0) >>> i6 << i3;
    HEAP32[i1 >> 2] = i31 | HEAP32[i13 >> 2] | i32;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 default:
  {
   i1 = Math_imul((HEAP32[i31 + 16 >> 2] | 0) / (HEAPU8[i32 + 9 >> 0] | 0 | 0) | 0, i9) | 0;
   if ((i8 | 0) < (i29 | 0)) {
    i2 = (i10 | 0) != 0 & 1;
    i1 = (i2 ^ 1) + i8 + i1 | 0;
    i2 = i29 - i8 + i2 | 0;
   } else {
    i1 = i1 + i29 | 0;
    i2 = i8 - i29 + ((i10 | 0) != 0 & 1) | 0;
   }
   if (!i2) return;
   i5 = i34 >>> (HEAPU8[i32 + 29 >> 0] | 0) << (HEAPU8[i32 + 33 >> 0] | 0) | i33 >>> (HEAPU8[i32 + 28 >> 0] | 0) << (HEAPU8[i32 + 32 >> 0] | 0);
   i4 = i35 >>> (HEAPU8[i32 + 30 >> 0] | 0) << (HEAPU8[i32 + 34 >> 0] | 0);
   i3 = i32 + 24 | 0;
   i1 = (HEAP32[i31 + 20 >> 2] | 0) + (i1 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP32[i1 >> 2] = i5 | HEAP32[i3 >> 2] | i4;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 }
 if ((i8 | 0) == (i29 | 0)) switch (i5 | 0) {
 case 1:
  {
   i17 = (HEAP32[i31 + 16 >> 2] | 0) / (HEAPU8[i32 + 9 >> 0] | 0 | 0) | 0;
   if ((i9 | 0) < (i30 | 0)) {
    i16 = (Math_imul(i17, i9) | 0) + i8 | 0;
    i1 = (i10 | 0) != 0;
    i16 = i16 + (i1 ? 0 : i17) | 0;
    i1 = i30 - i9 + (i1 & 1) | 0;
   } else {
    i16 = (Math_imul(i17, i30) | 0) + i8 | 0;
    i1 = i9 - i30 + ((i10 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i10 = i32 + 12 | 0;
   i11 = i32 + 16 | 0;
   i12 = i32 + 20 | 0;
   i13 = i32 + 24 | 0;
   i4 = HEAPU8[i32 + 28 >> 0] | 0;
   i7 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i32 + 29 >> 0] | 0;
   i8 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i32 + 30 >> 0] | 0;
   i9 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i14 = HEAPU8[i32 + 32 >> 0] | 0;
   i15 = HEAPU8[i32 + 33 >> 0] | 0;
   i3 = HEAPU8[i32 + 34 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i31 + 20 >> 2] | 0) + (i16 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i32 = HEAP32[i1 >> 2] | 0;
    i30 = ((((Math_imul(HEAPU8[i7 + ((HEAP32[i10 >> 2] & i32) >>> i14) >> 0] | 0, i28) | 0) >>> 0) / 255 | 0) + i33 | 0) >>> i4 << i14;
    i31 = ((((Math_imul(HEAPU8[i8 + ((HEAP32[i11 >> 2] & i32) >>> i15) >> 0] | 0, i28) | 0) >>> 0) / 255 | 0) + i34 | 0) >>> i5 << i15;
    i32 = ((((Math_imul(HEAPU8[i9 + ((HEAP32[i12 >> 2] & i32) >>> i3) >> 0] | 0, i28) | 0) >>> 0) / 255 | 0) + i35 | 0) >>> i6 << i3;
    HEAP32[i1 >> 2] = HEAP32[i13 >> 2] | i30 | i31 | i32;
    if (!i2) break; else i1 = i1 + (i17 << 2) | 0;
   }
   return;
  }
 case 2:
  {
   i17 = (HEAP32[i31 + 16 >> 2] | 0) / (HEAPU8[i32 + 9 >> 0] | 0 | 0) | 0;
   if ((i9 | 0) < (i30 | 0)) {
    i16 = (Math_imul(i17, i9) | 0) + i8 | 0;
    i1 = (i10 | 0) != 0;
    i16 = i16 + (i1 ? 0 : i17) | 0;
    i1 = i30 - i9 + (i1 & 1) | 0;
   } else {
    i16 = (Math_imul(i17, i30) | 0) + i8 | 0;
    i1 = i9 - i30 + ((i10 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i10 = i32 + 12 | 0;
   i11 = i32 + 16 | 0;
   i12 = i32 + 20 | 0;
   i13 = i32 + 24 | 0;
   i4 = HEAPU8[i32 + 28 >> 0] | 0;
   i7 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i32 + 29 >> 0] | 0;
   i8 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i32 + 30 >> 0] | 0;
   i9 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i14 = HEAPU8[i32 + 32 >> 0] | 0;
   i15 = HEAPU8[i32 + 33 >> 0] | 0;
   i3 = HEAPU8[i32 + 34 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i31 + 20 >> 2] | 0) + (i16 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i32 = HEAP32[i1 >> 2] | 0;
    i31 = (HEAPU8[i7 + ((HEAP32[i10 >> 2] & i32) >>> i14) >> 0] | 0) + i33 | 0;
    i30 = (HEAPU8[i8 + ((HEAP32[i11 >> 2] & i32) >>> i15) >> 0] | 0) + i34 | 0;
    i32 = (HEAPU8[i9 + ((HEAP32[i12 >> 2] & i32) >>> i3) >> 0] | 0) + i35 | 0;
    HEAP32[i1 >> 2] = (i30 >>> 0 > 255 ? 255 : i30) >>> i5 << i15 | (i31 >>> 0 > 255 ? 255 : i31) >>> i4 << i14 | HEAP32[i13 >> 2] | (i32 >>> 0 > 255 ? 255 : i32) >>> i6 << i3;
    if (!i2) break; else i1 = i1 + (i17 << 2) | 0;
   }
   return;
  }
 case 4:
  {
   i17 = (HEAP32[i31 + 16 >> 2] | 0) / (HEAPU8[i32 + 9 >> 0] | 0 | 0) | 0;
   if ((i9 | 0) < (i30 | 0)) {
    i16 = (Math_imul(i17, i9) | 0) + i8 | 0;
    i1 = (i10 | 0) != 0;
    i16 = i16 + (i1 ? 0 : i17) | 0;
    i1 = i30 - i9 + (i1 & 1) | 0;
   } else {
    i16 = (Math_imul(i17, i30) | 0) + i8 | 0;
    i1 = i9 - i30 + ((i10 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i10 = i32 + 12 | 0;
   i11 = i32 + 16 | 0;
   i12 = i32 + 20 | 0;
   i13 = i32 + 24 | 0;
   i4 = HEAPU8[i32 + 28 >> 0] | 0;
   i7 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i32 + 29 >> 0] | 0;
   i8 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i32 + 30 >> 0] | 0;
   i9 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i14 = HEAPU8[i32 + 32 >> 0] | 0;
   i15 = HEAPU8[i32 + 33 >> 0] | 0;
   i3 = HEAPU8[i32 + 34 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i31 + 20 >> 2] | 0) + (i16 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i32 = HEAP32[i1 >> 2] | 0;
    i31 = (((Math_imul(HEAPU8[i8 + ((HEAP32[i11 >> 2] & i32) >>> i15) >> 0] | 0, i34) | 0) >>> 0) / 255 | 0) >>> i5 << i15 | (((Math_imul(HEAPU8[i7 + ((HEAP32[i10 >> 2] & i32) >>> i14) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) >>> i4 << i14;
    i32 = (((Math_imul(HEAPU8[i9 + ((HEAP32[i12 >> 2] & i32) >>> i3) >> 0] | 0, i35) | 0) >>> 0) / 255 | 0) >>> i6 << i3;
    HEAP32[i1 >> 2] = i31 | HEAP32[i13 >> 2] | i32;
    if (!i2) break; else i1 = i1 + (i17 << 2) | 0;
   }
   return;
  }
 default:
  {
   i6 = (HEAP32[i31 + 16 >> 2] | 0) / (HEAPU8[i32 + 9 >> 0] | 0 | 0) | 0;
   if ((i9 | 0) < (i30 | 0)) {
    i1 = (Math_imul(i6, i9) | 0) + i8 | 0;
    i2 = (i10 | 0) != 0;
    i1 = i1 + (i2 ? 0 : i6) | 0;
    i2 = i30 - i9 + (i2 & 1) | 0;
   } else {
    i1 = (Math_imul(i6, i30) | 0) + i8 | 0;
    i2 = i9 - i30 + ((i10 | 0) != 0 & 1) | 0;
   }
   if (!i2) return;
   i5 = i34 >>> (HEAPU8[i32 + 29 >> 0] | 0) << (HEAPU8[i32 + 33 >> 0] | 0) | i33 >>> (HEAPU8[i32 + 28 >> 0] | 0) << (HEAPU8[i32 + 32 >> 0] | 0);
   i4 = i35 >>> (HEAPU8[i32 + 30 >> 0] | 0) << (HEAPU8[i32 + 34 >> 0] | 0);
   i3 = i32 + 24 | 0;
   i1 = (HEAP32[i31 + 20 >> 2] | 0) + (i1 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP32[i1 >> 2] = i5 | HEAP32[i3 >> 2] | i4;
    if (!i2) break; else i1 = i1 + (i6 << 2) | 0;
   }
   return;
  }
 }
 i27 = i29 - i8 | 0;
 i1 = i30 - i9 | 0;
 if ((((i27 | 0) < 0 ? 0 - i27 | 0 : i27) | 0) == (((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0)) switch (i5 | 0) {
 case 1:
  {
   i2 = (HEAP32[i31 + 16 >> 2] | 0) / (HEAPU8[i32 + 9 >> 0] | 0 | 0) | 0;
   if ((i9 | 0) < (i30 | 0)) {
    i17 = (Math_imul(i2, i9) | 0) + i8 | 0;
    i16 = i2 + ((i8 | 0) > (i29 | 0) ? -1 : 1) | 0;
    i17 = i17 + ((i10 | 0) == 0 ? i16 : 0) | 0;
   } else {
    i17 = (Math_imul(i2, i30) | 0) + i29 | 0;
    i1 = i9 - i30 | 0;
    i16 = i2 + ((i8 | 0) < (i29 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i10 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i10 = i32 + 12 | 0;
   i11 = i32 + 16 | 0;
   i12 = i32 + 20 | 0;
   i13 = i32 + 24 | 0;
   i4 = HEAPU8[i32 + 28 >> 0] | 0;
   i7 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i32 + 29 >> 0] | 0;
   i8 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i32 + 30 >> 0] | 0;
   i9 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i14 = HEAPU8[i32 + 32 >> 0] | 0;
   i15 = HEAPU8[i32 + 33 >> 0] | 0;
   i3 = HEAPU8[i32 + 34 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i31 + 20 >> 2] | 0) + (i17 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i32 = HEAP32[i1 >> 2] | 0;
    i30 = ((((Math_imul(HEAPU8[i7 + ((HEAP32[i10 >> 2] & i32) >>> i14) >> 0] | 0, i28) | 0) >>> 0) / 255 | 0) + i33 | 0) >>> i4 << i14;
    i31 = ((((Math_imul(HEAPU8[i8 + ((HEAP32[i11 >> 2] & i32) >>> i15) >> 0] | 0, i28) | 0) >>> 0) / 255 | 0) + i34 | 0) >>> i5 << i15;
    i32 = ((((Math_imul(HEAPU8[i9 + ((HEAP32[i12 >> 2] & i32) >>> i3) >> 0] | 0, i28) | 0) >>> 0) / 255 | 0) + i35 | 0) >>> i6 << i3;
    HEAP32[i1 >> 2] = HEAP32[i13 >> 2] | i30 | i31 | i32;
    if (!i2) break; else i1 = i1 + (i16 << 2) | 0;
   }
   return;
  }
 case 2:
  {
   i2 = (HEAP32[i31 + 16 >> 2] | 0) / (HEAPU8[i32 + 9 >> 0] | 0 | 0) | 0;
   if ((i9 | 0) < (i30 | 0)) {
    i17 = (Math_imul(i2, i9) | 0) + i8 | 0;
    i16 = i2 + ((i8 | 0) > (i29 | 0) ? -1 : 1) | 0;
    i17 = i17 + ((i10 | 0) == 0 ? i16 : 0) | 0;
   } else {
    i17 = (Math_imul(i2, i30) | 0) + i29 | 0;
    i1 = i9 - i30 | 0;
    i16 = i2 + ((i8 | 0) < (i29 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i10 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i10 = i32 + 12 | 0;
   i11 = i32 + 16 | 0;
   i12 = i32 + 20 | 0;
   i13 = i32 + 24 | 0;
   i4 = HEAPU8[i32 + 28 >> 0] | 0;
   i7 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i32 + 29 >> 0] | 0;
   i8 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i32 + 30 >> 0] | 0;
   i9 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i14 = HEAPU8[i32 + 32 >> 0] | 0;
   i15 = HEAPU8[i32 + 33 >> 0] | 0;
   i3 = HEAPU8[i32 + 34 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i31 + 20 >> 2] | 0) + (i17 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i32 = HEAP32[i1 >> 2] | 0;
    i31 = (HEAPU8[i7 + ((HEAP32[i10 >> 2] & i32) >>> i14) >> 0] | 0) + i33 | 0;
    i30 = (HEAPU8[i8 + ((HEAP32[i11 >> 2] & i32) >>> i15) >> 0] | 0) + i34 | 0;
    i32 = (HEAPU8[i9 + ((HEAP32[i12 >> 2] & i32) >>> i3) >> 0] | 0) + i35 | 0;
    HEAP32[i1 >> 2] = (i30 >>> 0 > 255 ? 255 : i30) >>> i5 << i15 | (i31 >>> 0 > 255 ? 255 : i31) >>> i4 << i14 | HEAP32[i13 >> 2] | (i32 >>> 0 > 255 ? 255 : i32) >>> i6 << i3;
    if (!i2) break; else i1 = i1 + (i16 << 2) | 0;
   }
   return;
  }
 case 4:
  {
   i2 = (HEAP32[i31 + 16 >> 2] | 0) / (HEAPU8[i32 + 9 >> 0] | 0 | 0) | 0;
   if ((i9 | 0) < (i30 | 0)) {
    i17 = (Math_imul(i2, i9) | 0) + i8 | 0;
    i16 = i2 + ((i8 | 0) > (i29 | 0) ? -1 : 1) | 0;
    i17 = i17 + ((i10 | 0) == 0 ? i16 : 0) | 0;
   } else {
    i17 = (Math_imul(i2, i30) | 0) + i29 | 0;
    i1 = i9 - i30 | 0;
    i16 = i2 + ((i8 | 0) < (i29 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i10 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i10 = i32 + 12 | 0;
   i11 = i32 + 16 | 0;
   i12 = i32 + 20 | 0;
   i13 = i32 + 24 | 0;
   i4 = HEAPU8[i32 + 28 >> 0] | 0;
   i7 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i32 + 29 >> 0] | 0;
   i8 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i32 + 30 >> 0] | 0;
   i9 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i14 = HEAPU8[i32 + 32 >> 0] | 0;
   i15 = HEAPU8[i32 + 33 >> 0] | 0;
   i3 = HEAPU8[i32 + 34 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i31 + 20 >> 2] | 0) + (i17 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i32 = HEAP32[i1 >> 2] | 0;
    i31 = (((Math_imul(HEAPU8[i8 + ((HEAP32[i11 >> 2] & i32) >>> i15) >> 0] | 0, i34) | 0) >>> 0) / 255 | 0) >>> i5 << i15 | (((Math_imul(HEAPU8[i7 + ((HEAP32[i10 >> 2] & i32) >>> i14) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) >>> i4 << i14;
    i32 = (((Math_imul(HEAPU8[i9 + ((HEAP32[i12 >> 2] & i32) >>> i3) >> 0] | 0, i35) | 0) >>> 0) / 255 | 0) >>> i6 << i3;
    HEAP32[i1 >> 2] = i31 | HEAP32[i13 >> 2] | i32;
    if (!i2) break; else i1 = i1 + (i16 << 2) | 0;
   }
   return;
  }
 default:
  {
   i2 = (HEAP32[i31 + 16 >> 2] | 0) / (HEAPU8[i32 + 9 >> 0] | 0 | 0) | 0;
   if ((i9 | 0) < (i30 | 0)) {
    i7 = (Math_imul(i2, i9) | 0) + i8 | 0;
    i6 = i2 + ((i8 | 0) > (i29 | 0) ? -1 : 1) | 0;
    i7 = i7 + ((i10 | 0) == 0 ? i6 : 0) | 0;
   } else {
    i7 = (Math_imul(i2, i30) | 0) + i29 | 0;
    i1 = i9 - i30 | 0;
    i6 = i2 + ((i8 | 0) < (i29 | 0) ? -1 : 1) | 0;
   }
   i2 = i1 + ((i10 | 0) != 0 & 1) | 0;
   if (!i2) return;
   i5 = i34 >>> (HEAPU8[i32 + 29 >> 0] | 0) << (HEAPU8[i32 + 33 >> 0] | 0) | i33 >>> (HEAPU8[i32 + 28 >> 0] | 0) << (HEAPU8[i32 + 32 >> 0] | 0);
   i4 = i35 >>> (HEAPU8[i32 + 30 >> 0] | 0) << (HEAPU8[i32 + 34 >> 0] | 0);
   i3 = i32 + 24 | 0;
   i1 = (HEAP32[i31 + 20 >> 2] | 0) + (i7 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP32[i1 >> 2] = i5 | HEAP32[i3 >> 2] | i4;
    if (!i2) break; else i1 = i1 + (i6 << 2) | 0;
   }
   return;
  }
 } else switch (i5 | 0) {
 case 1:
  {
   i1 = i8 - i29 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i9 - i30 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i27 = i1 << 1;
    i5 = i27 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i4 = 1;
   } else {
    i27 = i2 << 1;
    i5 = i27 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i4 = 0;
   }
   i26 = i3 << 1;
   i24 = (i8 | 0) < (i29 | 0);
   i25 = i24 ? 0 - i2 | 0 : i2;
   i24 = i24 ? -1 : 1;
   i23 = (i9 | 0) < (i30 | 0);
   i22 = i23 ? 0 - i4 | 0 : i4;
   i23 = i23 ? -1 : 1;
   i21 = i1 + ((i10 | 0) != 0 & 1) | 0;
   if ((i21 | 0) <= 0) return;
   i16 = i31 + 16 | 0;
   i17 = i32 + 12 | 0;
   i18 = i32 + 16 | 0;
   i19 = i32 + 20 | 0;
   i20 = i32 + 24 | 0;
   i10 = HEAP32[i31 + 20 >> 2] | 0;
   i7 = HEAPU8[i32 + 28 >> 0] | 0;
   i11 = HEAP32[5992 + (i7 << 2) >> 2] | 0;
   i8 = HEAPU8[i32 + 29 >> 0] | 0;
   i12 = HEAP32[5992 + (i8 << 2) >> 2] | 0;
   i9 = HEAPU8[i32 + 30 >> 0] | 0;
   i13 = HEAP32[5992 + (i9 << 2) >> 2] | 0;
   i14 = HEAPU8[i32 + 32 >> 0] | 0;
   i15 = HEAPU8[i32 + 33 >> 0] | 0;
   i6 = HEAPU8[i32 + 34 >> 0] | 0;
   i4 = i5;
   i5 = 0;
   i3 = i29;
   i2 = i30;
   while (1) {
    i1 = i10 + ((Math_imul(HEAP32[i16 >> 2] | 0, i2) | 0) + (i3 << 2)) | 0;
    i32 = HEAP32[i1 >> 2] | 0;
    i30 = ((((Math_imul(HEAPU8[i11 + ((HEAP32[i17 >> 2] & i32) >>> i14) >> 0] | 0, i28) | 0) >>> 0) / 255 | 0) + i33 | 0) >>> i7 << i14;
    i31 = ((((Math_imul(HEAPU8[i12 + ((HEAP32[i18 >> 2] & i32) >>> i15) >> 0] | 0, i28) | 0) >>> 0) / 255 | 0) + i34 | 0) >>> i8 << i15;
    i32 = ((((Math_imul(HEAPU8[i13 + ((HEAP32[i19 >> 2] & i32) >>> i6) >> 0] | 0, i28) | 0) >>> 0) / 255 | 0) + i35 | 0) >>> i9 << i6;
    HEAP32[i1 >> 2] = HEAP32[i20 >> 2] | i30 | i31 | i32;
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i21 | 0)) break; else {
     i4 = (i1 ? i27 : i26) + i4 | 0;
     i3 = (i1 ? i25 : i24) + i3 | 0;
     i2 = i2 + (i1 ? i22 : i23) | 0;
    }
   }
   return;
  }
 case 2:
  {
   i1 = i8 - i29 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i9 - i30 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i27 = i1 << 1;
    i5 = i27 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i4 = 1;
   } else {
    i27 = i2 << 1;
    i5 = i27 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i4 = 0;
   }
   i26 = i3 << 1;
   i24 = (i8 | 0) < (i29 | 0);
   i25 = i24 ? 0 - i2 | 0 : i2;
   i24 = i24 ? -1 : 1;
   i23 = (i9 | 0) < (i30 | 0);
   i22 = i23 ? 0 - i4 | 0 : i4;
   i23 = i23 ? -1 : 1;
   i21 = i1 + ((i10 | 0) != 0 & 1) | 0;
   if ((i21 | 0) <= 0) return;
   i16 = i31 + 16 | 0;
   i17 = i32 + 12 | 0;
   i18 = i32 + 16 | 0;
   i19 = i32 + 20 | 0;
   i20 = i32 + 24 | 0;
   i10 = HEAP32[i31 + 20 >> 2] | 0;
   i7 = HEAPU8[i32 + 28 >> 0] | 0;
   i11 = HEAP32[5992 + (i7 << 2) >> 2] | 0;
   i8 = HEAPU8[i32 + 29 >> 0] | 0;
   i12 = HEAP32[5992 + (i8 << 2) >> 2] | 0;
   i9 = HEAPU8[i32 + 30 >> 0] | 0;
   i13 = HEAP32[5992 + (i9 << 2) >> 2] | 0;
   i14 = HEAPU8[i32 + 32 >> 0] | 0;
   i15 = HEAPU8[i32 + 33 >> 0] | 0;
   i6 = HEAPU8[i32 + 34 >> 0] | 0;
   i4 = i5;
   i5 = 0;
   i3 = i29;
   i2 = i30;
   while (1) {
    i1 = i10 + ((Math_imul(HEAP32[i16 >> 2] | 0, i2) | 0) + (i3 << 2)) | 0;
    i32 = HEAP32[i1 >> 2] | 0;
    i31 = (HEAPU8[i11 + ((HEAP32[i17 >> 2] & i32) >>> i14) >> 0] | 0) + i33 | 0;
    i30 = (HEAPU8[i12 + ((HEAP32[i18 >> 2] & i32) >>> i15) >> 0] | 0) + i34 | 0;
    i32 = (HEAPU8[i13 + ((HEAP32[i19 >> 2] & i32) >>> i6) >> 0] | 0) + i35 | 0;
    HEAP32[i1 >> 2] = (i30 >>> 0 > 255 ? 255 : i30) >>> i8 << i15 | (i31 >>> 0 > 255 ? 255 : i31) >>> i7 << i14 | HEAP32[i20 >> 2] | (i32 >>> 0 > 255 ? 255 : i32) >>> i9 << i6;
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i21 | 0)) break; else {
     i4 = (i1 ? i27 : i26) + i4 | 0;
     i3 = (i1 ? i25 : i24) + i3 | 0;
     i2 = i2 + (i1 ? i22 : i23) | 0;
    }
   }
   return;
  }
 case 4:
  {
   i1 = i8 - i29 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i9 - i30 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i27 = i1 << 1;
    i5 = i27 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i4 = 1;
   } else {
    i27 = i2 << 1;
    i5 = i27 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i4 = 0;
   }
   i26 = i3 << 1;
   i24 = (i8 | 0) < (i29 | 0);
   i25 = i24 ? 0 - i2 | 0 : i2;
   i24 = i24 ? -1 : 1;
   i23 = (i9 | 0) < (i30 | 0);
   i22 = i23 ? 0 - i4 | 0 : i4;
   i23 = i23 ? -1 : 1;
   i21 = i1 + ((i10 | 0) != 0 & 1) | 0;
   if ((i21 | 0) <= 0) return;
   i17 = i31 + 16 | 0;
   i18 = i32 + 12 | 0;
   i19 = i32 + 16 | 0;
   i20 = i32 + 20 | 0;
   i16 = i32 + 24 | 0;
   i10 = HEAP32[i31 + 20 >> 2] | 0;
   i7 = HEAPU8[i32 + 28 >> 0] | 0;
   i11 = HEAP32[5992 + (i7 << 2) >> 2] | 0;
   i8 = HEAPU8[i32 + 29 >> 0] | 0;
   i12 = HEAP32[5992 + (i8 << 2) >> 2] | 0;
   i9 = HEAPU8[i32 + 30 >> 0] | 0;
   i13 = HEAP32[5992 + (i9 << 2) >> 2] | 0;
   i14 = HEAPU8[i32 + 32 >> 0] | 0;
   i15 = HEAPU8[i32 + 33 >> 0] | 0;
   i6 = HEAPU8[i32 + 34 >> 0] | 0;
   i4 = i5;
   i5 = 0;
   i3 = i29;
   i2 = i30;
   while (1) {
    i1 = i10 + ((Math_imul(HEAP32[i17 >> 2] | 0, i2) | 0) + (i3 << 2)) | 0;
    i32 = HEAP32[i1 >> 2] | 0;
    i31 = (((Math_imul(HEAPU8[i12 + ((HEAP32[i19 >> 2] & i32) >>> i15) >> 0] | 0, i34) | 0) >>> 0) / 255 | 0) >>> i8 << i15 | (((Math_imul(HEAPU8[i11 + ((HEAP32[i18 >> 2] & i32) >>> i14) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) >>> i7 << i14;
    i32 = (((Math_imul(HEAPU8[i13 + ((HEAP32[i20 >> 2] & i32) >>> i6) >> 0] | 0, i35) | 0) >>> 0) / 255 | 0) >>> i9 << i6;
    HEAP32[i1 >> 2] = i31 | HEAP32[i16 >> 2] | i32;
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i21 | 0)) break; else {
     i4 = (i1 ? i27 : i26) + i4 | 0;
     i3 = (i1 ? i25 : i24) + i3 | 0;
     i2 = i2 + (i1 ? i22 : i23) | 0;
    }
   }
   return;
  }
 default:
  {
   i1 = i8 - i29 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i9 - i30 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i17 = i1 << 1;
    i4 = i17 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i5 = 1;
   } else {
    i17 = i2 << 1;
    i4 = i17 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i5 = 0;
   }
   i16 = i3 << 1;
   i14 = (i8 | 0) < (i29 | 0);
   i15 = i14 ? 0 - i2 | 0 : i2;
   i14 = i14 ? -1 : 1;
   i13 = (i9 | 0) < (i30 | 0);
   i12 = i13 ? 0 - i5 | 0 : i5;
   i13 = i13 ? -1 : 1;
   i11 = i1 + ((i10 | 0) != 0 & 1) | 0;
   if ((i11 | 0) <= 0) return;
   i10 = HEAP32[i31 + 20 >> 2] | 0;
   i9 = i31 + 16 | 0;
   i8 = i34 >>> (HEAPU8[i32 + 29 >> 0] | 0) << (HEAPU8[i32 + 33 >> 0] | 0) | i33 >>> (HEAPU8[i32 + 28 >> 0] | 0) << (HEAPU8[i32 + 32 >> 0] | 0);
   i7 = i35 >>> (HEAPU8[i32 + 30 >> 0] | 0) << (HEAPU8[i32 + 34 >> 0] | 0);
   i6 = i32 + 24 | 0;
   i5 = 0;
   i3 = i29;
   i2 = i30;
   while (1) {
    i1 = i10 + ((Math_imul(HEAP32[i9 >> 2] | 0, i2) | 0) + (i3 << 2)) | 0;
    HEAP32[i1 >> 2] = i8 | HEAP32[i6 >> 2] | i7;
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i11 | 0)) break; else {
     i4 = (i1 ? i17 : i16) + i4 | 0;
     i3 = (i1 ? i15 : i14) + i3 | 0;
     i2 = i2 + (i1 ? i12 : i13) | 0;
    }
   }
   return;
  }
 }
}

function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_(i37, i38, i2, i3, i4, i39, i31, i26, i34, i35, i1) {
 i37 = i37 | 0;
 i38 = i38 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i39 = i39 | 0;
 i31 = i31 | 0;
 i26 = i26 | 0;
 i34 = i34 | 0;
 i35 = i35 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i32 = 0, i33 = 0, i36 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0;
 i48 = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 i25 = i48 + 96 | 0;
 i8 = i48 + 104 | 0;
 i47 = i48 + 88 | 0;
 i30 = i48 + 80 | 0;
 i29 = i48 + 76 | 0;
 i32 = i48 + 504 | 0;
 i27 = i48 + 72 | 0;
 i33 = i48 + 68 | 0;
 i42 = i48 + 56 | 0;
 i46 = i48 + 44 | 0;
 i44 = i48 + 32 | 0;
 i43 = i48 + 20 | 0;
 i45 = i48 + 8 | 0;
 i28 = i48 + 4 | 0;
 i40 = i48;
 HEAP32[i25 >> 2] = i1;
 HEAP32[i47 >> 2] = i8;
 i41 = i47 + 4 | 0;
 HEAP32[i41 >> 2] = 347;
 HEAP32[i30 >> 2] = i8;
 HEAP32[i29 >> 2] = i8 + 400;
 HEAP32[i42 >> 2] = 0;
 HEAP32[i42 + 4 >> 2] = 0;
 HEAP32[i42 + 8 >> 2] = 0;
 HEAP32[i46 >> 2] = 0;
 HEAP32[i46 + 4 >> 2] = 0;
 HEAP32[i46 + 8 >> 2] = 0;
 HEAP32[i44 >> 2] = 0;
 HEAP32[i44 + 4 >> 2] = 0;
 HEAP32[i44 + 8 >> 2] = 0;
 HEAP32[i43 >> 2] = 0;
 HEAP32[i43 + 4 >> 2] = 0;
 HEAP32[i43 + 8 >> 2] = 0;
 HEAP32[i45 >> 2] = 0;
 HEAP32[i45 + 4 >> 2] = 0;
 HEAP32[i45 + 8 >> 2] = 0;
 __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri(i2, i3, i32, i27, i33, i42, i46, i44, i43, i28);
 HEAP32[i35 >> 2] = HEAP32[i34 >> 2];
 i21 = i44 + 4 | 0;
 i22 = i43 + 4 | 0;
 i23 = i43 + 8 | 0;
 i24 = i44 + 8 | 0;
 i13 = (i4 & 512 | 0) != 0;
 i14 = i46 + 8 | 0;
 i15 = i46 + 4 | 0;
 i16 = i45 + 4 | 0;
 i17 = i45 + 8 | 0;
 i18 = i32 + 3 | 0;
 i19 = i42 + 4 | 0;
 i20 = 0;
 i7 = 0;
 L1 : while (1) {
  i1 = HEAP32[i37 >> 2] | 0;
  do if (i1) {
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i37 >> 2] = 0;
    i3 = 1;
    break;
   } else {
    i3 = (HEAP32[i37 >> 2] | 0) == 0;
    break;
   }
  } else i3 = 1; while (0);
  i2 = HEAP32[i38 >> 2] | 0;
  do if (i2) {
   i1 = HEAP32[i2 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i3) {
    i12 = i2;
    break;
   } else {
    i36 = 217;
    break L1;
   } else {
    HEAP32[i38 >> 2] = 0;
    i36 = 15;
    break;
   }
  } else i36 = 15; while (0);
  if ((i36 | 0) == 15) {
   i36 = 0;
   if (i3) {
    i36 = 217;
    break;
   } else i12 = 0;
  }
  L25 : do switch (HEAP8[i32 + i20 >> 0] | 0) {
  case 1:
   {
    if ((i20 | 0) != 3) {
     i1 = HEAP32[i37 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i26 >> 2] | 0) + 12 >> 2] & 63](i26, 8192, i1) | 0)) {
      i36 = 28;
      break L1;
     }
     i1 = HEAP32[i37 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else {
      HEAP32[i2 >> 2] = i3 + 4;
      i1 = HEAP32[i3 >> 2] | 0;
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i45, i1);
     i1 = i12;
     i4 = i12;
     i36 = 30;
    }
    break;
   }
  case 0:
   {
    if ((i20 | 0) != 3) {
     i1 = i12;
     i4 = i12;
     i36 = 30;
    }
    break;
   }
  case 3:
   {
    i5 = HEAP8[i44 >> 0] | 0;
    i1 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i21 >> 2] | 0;
    i3 = HEAP8[i43 >> 0] | 0;
    i3 = (i3 & 1) == 0 ? (i3 & 255) >>> 1 : HEAP32[i22 >> 2] | 0;
    if ((i1 | 0) != (0 - i3 | 0)) {
     i4 = (i1 | 0) == 0;
     i6 = HEAP32[i37 >> 2] | 0;
     i9 = HEAP32[i6 + 12 >> 2] | 0;
     i1 = HEAP32[i6 + 16 >> 2] | 0;
     i2 = (i9 | 0) == (i1 | 0);
     if (i4 | (i3 | 0) == 0) {
      if (i2) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0; else i1 = HEAP32[i9 >> 2] | 0;
      if (i4) {
       if ((i1 | 0) != (HEAP32[((HEAP8[i43 >> 0] & 1) == 0 ? i22 : HEAP32[i23 >> 2] | 0) >> 2] | 0)) break L25;
       i1 = HEAP32[i37 >> 2] | 0;
       i2 = i1 + 12 | 0;
       i3 = HEAP32[i2 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i2 >> 2] = i3 + 4;
       HEAP8[i31 >> 0] = 1;
       i12 = HEAP8[i43 >> 0] | 0;
       i7 = ((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i22 >> 2] | 0) >>> 0 > 1 ? i43 : i7;
       break L25;
      }
      if ((i1 | 0) != (HEAP32[((HEAP8[i44 >> 0] & 1) == 0 ? i21 : HEAP32[i24 >> 2] | 0) >> 2] | 0)) {
       HEAP8[i31 >> 0] = 1;
       break L25;
      }
      i1 = HEAP32[i37 >> 2] | 0;
      i2 = i1 + 12 | 0;
      i3 = HEAP32[i2 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i2 >> 2] = i3 + 4;
      i12 = HEAP8[i44 >> 0] | 0;
      i7 = ((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i21 >> 2] | 0) >>> 0 > 1 ? i44 : i7;
      break L25;
     }
     if (i2) {
      i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0;
      i1 = HEAP32[i37 >> 2] | 0;
      i5 = HEAP8[i44 >> 0] | 0;
      i6 = i1;
      i3 = HEAP32[i1 + 12 >> 2] | 0;
      i1 = HEAP32[i1 + 16 >> 2] | 0;
     } else {
      i4 = HEAP32[i9 >> 2] | 0;
      i3 = i9;
     }
     i2 = i6 + 12 | 0;
     i1 = (i3 | 0) == (i1 | 0);
     if ((i4 | 0) == (HEAP32[((i5 & 1) == 0 ? i21 : HEAP32[i24 >> 2] | 0) >> 2] | 0)) {
      if (i1) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 40 >> 2] & 127](i6) | 0; else HEAP32[i2 >> 2] = i3 + 4;
      i12 = HEAP8[i44 >> 0] | 0;
      i7 = ((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i21 >> 2] | 0) >>> 0 > 1 ? i44 : i7;
      break L25;
     }
     if (i1) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0; else i1 = HEAP32[i3 >> 2] | 0;
     if ((i1 | 0) != (HEAP32[((HEAP8[i43 >> 0] & 1) == 0 ? i22 : HEAP32[i23 >> 2] | 0) >> 2] | 0)) {
      i36 = 86;
      break L1;
     }
     i1 = HEAP32[i37 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i2 >> 2] = i3 + 4;
     HEAP8[i31 >> 0] = 1;
     i12 = HEAP8[i43 >> 0] | 0;
     i7 = ((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i22 >> 2] | 0) >>> 0 > 1 ? i43 : i7;
    }
    break;
   }
  case 2:
   {
    if (!(i20 >>> 0 < 2 | (i7 | 0) != 0) ? !(i13 | (i20 | 0) == 2 & (HEAP8[i18 >> 0] | 0) != 0) : 0) {
     i7 = 0;
     break L25;
    }
    i4 = HEAP8[i46 >> 0] | 0;
    i3 = HEAP32[i14 >> 2] | 0;
    i2 = (i4 & 1) == 0 ? i15 : i3;
    i1 = i2;
    L86 : do if ((i20 | 0) != 0 ? (HEAPU8[i32 + (i20 + -1) >> 0] | 0) < 2 : 0) {
     i11 = (i4 & 1) == 0;
     L89 : do if ((i2 | 0) != ((i11 ? i15 : i3) + ((i11 ? (i4 & 255) >>> 1 : HEAP32[i15 >> 2] | 0) << 2) | 0)) {
      i4 = i2;
      while (1) {
       if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i26 >> 2] | 0) + 12 >> 2] & 63](i26, 8192, HEAP32[i4 >> 2] | 0) | 0)) break;
       i4 = i4 + 4 | 0;
       i1 = i4;
       i2 = HEAP8[i46 >> 0] | 0;
       i3 = HEAP32[i14 >> 2] | 0;
       i11 = (i2 & 1) == 0;
       if ((i4 | 0) == ((i11 ? i15 : i3) + ((i11 ? (i2 & 255) >>> 1 : HEAP32[i15 >> 2] | 0) << 2) | 0)) {
        i4 = i2;
        break L89;
       }
      }
      i4 = HEAP8[i46 >> 0] | 0;
      i3 = HEAP32[i14 >> 2] | 0;
     } while (0);
     i6 = (i4 & 1) == 0 ? i15 : i3;
     i2 = i6;
     i9 = i1 - i2 >> 2;
     i10 = HEAP8[i45 >> 0] | 0;
     i5 = (i10 & 1) == 0;
     i10 = i5 ? (i10 & 255) >>> 1 : HEAP32[i16 >> 2] | 0;
     if (i10 >>> 0 >= i9 >>> 0) {
      i5 = i5 ? i16 : HEAP32[i17 >> 2] | 0;
      i11 = i5 + (i10 << 2) | 0;
      if (!i9) i2 = i1; else {
       i5 = i5 + (i10 - i9 << 2) | 0;
       while (1) {
        if ((HEAP32[i5 >> 2] | 0) != (HEAP32[i6 >> 2] | 0)) break L86;
        i5 = i5 + 4 | 0;
        if ((i5 | 0) == (i11 | 0)) {
         i2 = i1;
         break;
        } else i6 = i6 + 4 | 0;
       }
      }
     }
    } else i2 = i1; while (0);
    i1 = (i4 & 1) == 0;
    i1 = (i1 ? i15 : i3) + ((i1 ? (i4 & 255) >>> 1 : HEAP32[i15 >> 2] | 0) << 2) | 0;
    L101 : do if ((i2 | 0) != (i1 | 0)) {
     i5 = i12;
     i4 = i12;
     i1 = i2;
     while (1) {
      i2 = HEAP32[i37 >> 2] | 0;
      do if (i2) {
       i3 = HEAP32[i2 + 12 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAP32[i3 >> 2] | 0;
       if ((i2 | 0) == -1) {
        HEAP32[i37 >> 2] = 0;
        i3 = 1;
        break;
       } else {
        i3 = (HEAP32[i37 >> 2] | 0) == 0;
        break;
       }
      } else i3 = 1; while (0);
      do if (i4) {
       i2 = HEAP32[i4 + 12 >> 2] | 0;
       if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i2 = HEAP32[i2 >> 2] | 0;
       if ((i2 | 0) != -1) if (i3 ^ (i5 | 0) == 0) {
        i2 = i5;
        i6 = i5;
        break;
       } else break L101; else {
        HEAP32[i38 >> 2] = 0;
        i2 = 0;
        i36 = 114;
        break;
       }
      } else {
       i2 = i5;
       i36 = 114;
      } while (0);
      if ((i36 | 0) == 114) {
       i36 = 0;
       if (i3) break L101; else i6 = 0;
      }
      i3 = HEAP32[i37 >> 2] | 0;
      i4 = HEAP32[i3 + 12 >> 2] | 0;
      if ((i4 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i3 = HEAP32[i4 >> 2] | 0;
      if ((i3 | 0) != (HEAP32[i1 >> 2] | 0)) break L101;
      i3 = HEAP32[i37 >> 2] | 0;
      i4 = i3 + 12 | 0;
      i5 = HEAP32[i4 >> 2] | 0;
      if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0; else HEAP32[i4 >> 2] = i5 + 4;
      i1 = i1 + 4 | 0;
      i3 = HEAP8[i46 >> 0] | 0;
      i12 = (i3 & 1) == 0;
      i3 = (i12 ? i15 : HEAP32[i14 >> 2] | 0) + ((i12 ? (i3 & 255) >>> 1 : HEAP32[i15 >> 2] | 0) << 2) | 0;
      if ((i1 | 0) == (i3 | 0)) {
       i1 = i3;
       break;
      } else {
       i5 = i2;
       i4 = i6;
      }
     }
    } while (0);
    if (i13 ? (i12 = HEAP8[i46 >> 0] | 0, i11 = (i12 & 1) == 0, (i1 | 0) != ((i11 ? i15 : HEAP32[i14 >> 2] | 0) + ((i11 ? (i12 & 255) >>> 1 : HEAP32[i15 >> 2] | 0) << 2) | 0)) : 0) {
     i36 = 126;
     break L1;
    }
    break;
   }
  case 4:
   {
    i9 = HEAP32[i33 >> 2] | 0;
    i4 = i12;
    i5 = i12;
    i1 = 0;
    L138 : while (1) {
     i2 = HEAP32[i37 >> 2] | 0;
     do if (i2) {
      i3 = HEAP32[i2 + 12 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAP32[i3 >> 2] | 0;
      if ((i2 | 0) == -1) {
       HEAP32[i37 >> 2] = 0;
       i3 = 1;
       break;
      } else {
       i3 = (HEAP32[i37 >> 2] | 0) == 0;
       break;
      }
     } else i3 = 1; while (0);
     do if (i5) {
      i2 = HEAP32[i5 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0; else i2 = HEAP32[i2 >> 2] | 0;
      if ((i2 | 0) != -1) if (i3 ^ (i4 | 0) == 0) {
       i2 = i4;
       i6 = i4;
       break;
      } else break L138; else {
       HEAP32[i38 >> 2] = 0;
       i2 = 0;
       i36 = 140;
       break;
      }
     } else {
      i2 = i4;
      i36 = 140;
     } while (0);
     if ((i36 | 0) == 140) {
      i36 = 0;
      if (i3) {
       i4 = i2;
       break;
      } else i6 = 0;
     }
     i3 = HEAP32[i37 >> 2] | 0;
     i4 = HEAP32[i3 + 12 >> 2] | 0;
     if ((i4 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i4 = HEAP32[i4 >> 2] | 0;
     if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i26 >> 2] | 0) + 12 >> 2] & 63](i26, 2048, i4) | 0) {
      i3 = HEAP32[i35 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i25 >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i34, i35, i25);
       i3 = HEAP32[i35 >> 2] | 0;
      }
      HEAP32[i35 >> 2] = i3 + 4;
      HEAP32[i3 >> 2] = i4;
      i1 = i1 + 1 | 0;
     } else {
      i12 = HEAP8[i42 >> 0] | 0;
      if (!((i4 | 0) == (i9 | 0) & ((i1 | 0) != 0 ? (((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i19 >> 2] | 0) | 0) != 0 : 0))) {
       i4 = i2;
       break;
      }
      if ((i8 | 0) == (HEAP32[i29 >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i47, i30, i29);
       i8 = HEAP32[i30 >> 2] | 0;
      }
      i12 = i8 + 4 | 0;
      HEAP32[i30 >> 2] = i12;
      HEAP32[i8 >> 2] = i1;
      i8 = i12;
      i1 = 0;
     }
     i3 = HEAP32[i37 >> 2] | 0;
     i4 = i3 + 12 | 0;
     i5 = HEAP32[i4 >> 2] | 0;
     if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
      i4 = i2;
      i5 = i6;
      continue;
     } else {
      HEAP32[i4 >> 2] = i5 + 4;
      i4 = i2;
      i5 = i6;
      continue;
     }
    }
    if ((i1 | 0) != 0 ? (HEAP32[i47 >> 2] | 0) != (i8 | 0) : 0) {
     if ((i8 | 0) == (HEAP32[i29 >> 2] | 0)) {
      __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i47, i30, i29);
      i8 = HEAP32[i30 >> 2] | 0;
     }
     i12 = i8 + 4 | 0;
     HEAP32[i30 >> 2] = i12;
     HEAP32[i8 >> 2] = i1;
     i8 = i12;
    }
    i6 = HEAP32[i28 >> 2] | 0;
    if ((i6 | 0) > 0) {
     i1 = HEAP32[i37 >> 2] | 0;
     do if (i1) {
      i2 = HEAP32[i1 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
      if ((i1 | 0) == -1) {
       HEAP32[i37 >> 2] = 0;
       i2 = 1;
       break;
      } else {
       i2 = (HEAP32[i37 >> 2] | 0) == 0;
       break;
      }
     } else i2 = 1; while (0);
     do if (i4) {
      i1 = HEAP32[i4 + 12 >> 2] | 0;
      if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
      if ((i1 | 0) != -1) if (i2) break; else {
       i36 = 180;
       break L1;
      } else {
       HEAP32[i38 >> 2] = 0;
       i36 = 174;
       break;
      }
     } else i36 = 174; while (0);
     if ((i36 | 0) == 174) {
      i36 = 0;
      if (i2) {
       i36 = 180;
       break L1;
      } else i4 = 0;
     }
     i1 = HEAP32[i37 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
     if ((i1 | 0) != (HEAP32[i27 >> 2] | 0)) {
      i36 = 180;
      break L1;
     }
     i1 = HEAP32[i37 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i2 >> 2] = i3 + 4;
     if ((i6 | 0) > 0) {
      i5 = i4;
      i3 = i4;
      i9 = i6;
      while (1) {
       i1 = HEAP32[i37 >> 2] | 0;
       do if (i1) {
        i2 = HEAP32[i1 + 12 >> 2] | 0;
        if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
        if ((i1 | 0) == -1) {
         HEAP32[i37 >> 2] = 0;
         i2 = 1;
         break;
        } else {
         i2 = (HEAP32[i37 >> 2] | 0) == 0;
         break;
        }
       } else i2 = 1; while (0);
       do if (i3) {
        i1 = HEAP32[i3 + 12 >> 2] | 0;
        if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
        if ((i1 | 0) != -1) if (i2 ^ (i5 | 0) == 0) {
         i1 = i5;
         i6 = i5;
         break;
        } else {
         i36 = 204;
         break L1;
        } else {
         HEAP32[i38 >> 2] = 0;
         i1 = 0;
         i36 = 198;
         break;
        }
       } else {
        i1 = i5;
        i36 = 198;
       } while (0);
       if ((i36 | 0) == 198) {
        i36 = 0;
        if (i2) {
         i36 = 204;
         break L1;
        } else i6 = 0;
       }
       i2 = HEAP32[i37 >> 2] | 0;
       i3 = HEAP32[i2 + 12 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAP32[i3 >> 2] | 0;
       if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i26 >> 2] | 0) + 12 >> 2] & 63](i26, 2048, i2) | 0)) {
        i36 = 204;
        break L1;
       }
       if ((HEAP32[i35 >> 2] | 0) == (HEAP32[i25 >> 2] | 0)) __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i34, i35, i25);
       i2 = HEAP32[i37 >> 2] | 0;
       i3 = HEAP32[i2 + 12 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAP32[i3 >> 2] | 0;
       i3 = HEAP32[i35 >> 2] | 0;
       HEAP32[i35 >> 2] = i3 + 4;
       HEAP32[i3 >> 2] = i2;
       i2 = i9;
       i9 = i9 + -1 | 0;
       HEAP32[i28 >> 2] = i9;
       i3 = HEAP32[i37 >> 2] | 0;
       i4 = i3 + 12 | 0;
       i5 = HEAP32[i4 >> 2] | 0;
       if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0; else HEAP32[i4 >> 2] = i5 + 4;
       if ((i2 | 0) <= 1) break; else {
        i5 = i1;
        i3 = i6;
       }
      }
     }
    }
    if ((HEAP32[i35 >> 2] | 0) == (HEAP32[i34 >> 2] | 0)) {
     i36 = 215;
     break L1;
    }
    break;
   }
  default:
   {}
  } while (0);
  L261 : do if ((i36 | 0) == 30) while (1) {
   i36 = 0;
   i2 = HEAP32[i37 >> 2] | 0;
   do if (i2) {
    i3 = HEAP32[i2 + 12 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAP32[i3 >> 2] | 0;
    if ((i2 | 0) == -1) {
     HEAP32[i37 >> 2] = 0;
     i3 = 1;
     break;
    } else {
     i3 = (HEAP32[i37 >> 2] | 0) == 0;
     break;
    }
   } else i3 = 1; while (0);
   do if (i4) {
    i2 = HEAP32[i4 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i2 = HEAP32[i2 >> 2] | 0;
    if ((i2 | 0) != -1) if (i3 ^ (i1 | 0) == 0) {
     i5 = i1;
     i4 = i1;
     break;
    } else break L261; else {
     HEAP32[i38 >> 2] = 0;
     i1 = 0;
     i36 = 43;
     break;
    }
   } else i36 = 43; while (0);
   if ((i36 | 0) == 43) {
    i36 = 0;
    if (i3) break L261; else {
     i5 = i1;
     i4 = 0;
    }
   }
   i1 = HEAP32[i37 >> 2] | 0;
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i26 >> 2] | 0) + 12 >> 2] & 63](i26, 8192, i1) | 0)) break L261;
   i1 = HEAP32[i37 >> 2] | 0;
   i2 = i1 + 12 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else {
    HEAP32[i2 >> 2] = i3 + 4;
    i1 = HEAP32[i3 >> 2] | 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i45, i1);
   i1 = i5;
   i36 = 30;
  } while (0);
  i20 = i20 + 1 | 0;
  if (i20 >>> 0 >= 4) {
   i36 = 217;
   break;
  }
 }
 L296 : do if ((i36 | 0) == 28) {
  HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
  i2 = 0;
 } else if ((i36 | 0) == 86) {
  HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
  i2 = 0;
 } else if ((i36 | 0) == 126) {
  HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
  i2 = 0;
 } else if ((i36 | 0) == 180) {
  HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
  i2 = 0;
 } else if ((i36 | 0) == 204) {
  HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
  i2 = 0;
 } else if ((i36 | 0) == 215) {
  HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
  i2 = 0;
 } else if ((i36 | 0) == 217) {
  L298 : do if (i7) {
   i5 = i7 + 4 | 0;
   i6 = i7 + 8 | 0;
   i4 = 1;
   L300 : while (1) {
    i1 = HEAP8[i7 >> 0] | 0;
    if (!(i1 & 1)) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i5 >> 2] | 0;
    if (i4 >>> 0 >= i1 >>> 0) break L298;
    i1 = HEAP32[i37 >> 2] | 0;
    do if (i1) {
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
     if ((i1 | 0) == -1) {
      HEAP32[i37 >> 2] = 0;
      i3 = 1;
      break;
     } else {
      i3 = (HEAP32[i37 >> 2] | 0) == 0;
      break;
     }
    } else i3 = 1; while (0);
    i1 = HEAP32[i38 >> 2] | 0;
    do if (i1) {
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
     if ((i1 | 0) != -1) if (i3) break; else break L300; else {
      HEAP32[i38 >> 2] = 0;
      i36 = 236;
      break;
     }
    } else i36 = 236; while (0);
    if ((i36 | 0) == 236 ? (i36 = 0, i3) : 0) break;
    i1 = HEAP32[i37 >> 2] | 0;
    i2 = HEAP32[i1 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
    if (!(HEAP8[i7 >> 0] & 1)) i2 = i5; else i2 = HEAP32[i6 >> 2] | 0;
    if ((i1 | 0) != (HEAP32[i2 + (i4 << 2) >> 2] | 0)) break;
    i1 = i4 + 1 | 0;
    i2 = HEAP32[i37 >> 2] | 0;
    i3 = i2 + 12 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 127](i2) | 0;
     i4 = i1;
     continue;
    } else {
     HEAP32[i3 >> 2] = i4 + 4;
     i4 = i1;
     continue;
    }
   }
   HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
   i2 = 0;
   break L296;
  } while (0);
  i1 = HEAP32[i47 >> 2] | 0;
  if ((i1 | 0) != (i8 | 0) ? (HEAP32[i40 >> 2] = 0, __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i42, i1, i8, i40), (HEAP32[i40 >> 2] | 0) != 0) : 0) {
   HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
   i2 = 0;
  } else i2 = 1;
 } while (0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i45);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i43);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i44);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i46);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i42);
 i1 = HEAP32[i47 >> 2] | 0;
 HEAP32[i47 >> 2] = 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[i41 >> 2] & 511](i1);
 STACKTOP = i48;
 return i2 | 0;
}

function _SDL_BlendLine_RGB2(i18, i29, i30, i6, i7, i5, i1, i4, i3, i2, i8) {
 i18 = i18 | 0;
 i29 = i29 | 0;
 i30 = i30 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0;
 i31 = HEAP32[i18 + 4 >> 2] | 0;
 i1 = i1 & 255;
 if ((i5 + -1 | 0) >>> 0 < 2) {
  i32 = i2 & 255;
  i2 = i32;
  i34 = ((Math_imul(i32, i3 & 255) | 0) >>> 0) / 255 | 0;
  i33 = ((Math_imul(i32, i4 & 255) | 0) >>> 0) / 255 | 0;
  i32 = ((Math_imul(i32, i1) | 0) >>> 0) / 255 | 0;
 } else {
  i2 = i2 & 255;
  i34 = i3 & 255;
  i33 = i4 & 255;
  i32 = i1;
 }
 i28 = i2 ^ 255;
 if ((i7 | 0) == (i30 | 0)) switch (i5 | 0) {
 case 1:
  {
   i1 = Math_imul((HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[i31 + 9 >> 0] | 0 | 0) | 0, i7) | 0;
   if ((i6 | 0) < (i29 | 0)) {
    i30 = (i8 | 0) != 0 & 1;
    i16 = (i30 ^ 1) + i6 + i1 | 0;
    i1 = i29 - i6 + i30 | 0;
   } else {
    i16 = i1 + i29 | 0;
    i1 = i6 - i29 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i7 = HEAP32[i31 + 12 >> 2] | 0;
   i4 = HEAPU8[i31 + 28 >> 0] | 0;
   i8 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i9 = HEAP32[i31 + 16 >> 2] | 0;
   i5 = HEAPU8[i31 + 29 >> 0] | 0;
   i10 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i11 = HEAP32[i31 + 20 >> 2] | 0;
   i6 = HEAPU8[i31 + 30 >> 0] | 0;
   i12 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i13 = HEAP32[i31 + 24 >> 2] | 0;
   i14 = HEAPU8[i31 + 32 >> 0] | 0;
   i15 = HEAPU8[i31 + 33 >> 0] | 0;
   i3 = HEAPU8[i31 + 34 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i18 + 20 >> 2] | 0) + (i16 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i31 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = i13 | ((((Math_imul(HEAPU8[i8 + ((i31 & i7) >>> i14) >> 0] | 0, i28) | 0) >>> 0) / 255 | 0) + i32 | 0) >>> i4 << i14 | ((((Math_imul(HEAPU8[i10 + ((i9 & i31) >>> i15) >> 0] | 0, i28) | 0) >>> 0) / 255 | 0) + i33 | 0) >>> i5 << i15 | ((((Math_imul(HEAPU8[i12 + ((i11 & i31) >>> i3) >> 0] | 0, i28) | 0) >>> 0) / 255 | 0) + i34 | 0) >>> i6 << i3;
    if (!i2) break; else i1 = i1 + 2 | 0;
   }
   return;
  }
 case 2:
  {
   i1 = Math_imul((HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[i31 + 9 >> 0] | 0 | 0) | 0, i7) | 0;
   if ((i6 | 0) < (i29 | 0)) {
    i30 = (i8 | 0) != 0 & 1;
    i16 = (i30 ^ 1) + i6 + i1 | 0;
    i1 = i29 - i6 + i30 | 0;
   } else {
    i16 = i1 + i29 | 0;
    i1 = i6 - i29 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i7 = HEAP32[i31 + 12 >> 2] | 0;
   i4 = HEAPU8[i31 + 28 >> 0] | 0;
   i8 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i9 = HEAP32[i31 + 16 >> 2] | 0;
   i5 = HEAPU8[i31 + 29 >> 0] | 0;
   i10 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i11 = HEAP32[i31 + 20 >> 2] | 0;
   i6 = HEAPU8[i31 + 30 >> 0] | 0;
   i12 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i13 = HEAP32[i31 + 24 >> 2] | 0;
   i14 = HEAPU8[i31 + 32 >> 0] | 0;
   i15 = HEAPU8[i31 + 33 >> 0] | 0;
   i3 = HEAPU8[i31 + 34 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i18 + 20 >> 2] | 0) + (i16 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i31 = HEAPU16[i1 >> 1] | 0;
    i30 = (HEAPU8[i8 + ((i31 & i7) >>> i14) >> 0] | 0) + i32 | 0;
    i29 = (HEAPU8[i10 + ((i9 & i31) >>> i15) >> 0] | 0) + i33 | 0;
    i31 = (HEAPU8[i12 + ((i11 & i31) >>> i3) >> 0] | 0) + i34 | 0;
    HEAP16[i1 >> 1] = (i29 >>> 0 > 255 ? 255 : i29) >>> i5 << i15 | (i30 >>> 0 > 255 ? 255 : i30) >>> i4 << i14 | i13 | (i31 >>> 0 > 255 ? 255 : i31) >>> i6 << i3;
    if (!i2) break; else i1 = i1 + 2 | 0;
   }
   return;
  }
 case 4:
  {
   i1 = Math_imul((HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[i31 + 9 >> 0] | 0 | 0) | 0, i7) | 0;
   if ((i6 | 0) < (i29 | 0)) {
    i30 = (i8 | 0) != 0 & 1;
    i16 = (i30 ^ 1) + i6 + i1 | 0;
    i1 = i29 - i6 + i30 | 0;
   } else {
    i16 = i1 + i29 | 0;
    i1 = i6 - i29 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i7 = HEAP32[i31 + 12 >> 2] | 0;
   i4 = HEAPU8[i31 + 28 >> 0] | 0;
   i8 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i9 = HEAP32[i31 + 16 >> 2] | 0;
   i5 = HEAPU8[i31 + 29 >> 0] | 0;
   i10 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i11 = HEAP32[i31 + 20 >> 2] | 0;
   i6 = HEAPU8[i31 + 30 >> 0] | 0;
   i12 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i13 = HEAP32[i31 + 24 >> 2] | 0;
   i14 = HEAPU8[i31 + 32 >> 0] | 0;
   i15 = HEAPU8[i31 + 33 >> 0] | 0;
   i3 = HEAPU8[i31 + 34 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i18 + 20 >> 2] | 0) + (i16 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i31 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = (((Math_imul(HEAPU8[i10 + ((i9 & i31) >>> i15) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) >>> i5 << i15 | (((Math_imul(HEAPU8[i8 + ((i31 & i7) >>> i14) >> 0] | 0, i32) | 0) >>> 0) / 255 | 0) >>> i4 << i14 | i13 | (((Math_imul(HEAPU8[i12 + ((i11 & i31) >>> i3) >> 0] | 0, i34) | 0) >>> 0) / 255 | 0) >>> i6 << i3;
    if (!i2) break; else i1 = i1 + 2 | 0;
   }
   return;
  }
 default:
  {
   i1 = Math_imul((HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[i31 + 9 >> 0] | 0 | 0) | 0, i7) | 0;
   if ((i6 | 0) < (i29 | 0)) {
    i2 = (i8 | 0) != 0 & 1;
    i1 = (i2 ^ 1) + i6 + i1 | 0;
    i2 = i29 - i6 + i2 | 0;
   } else {
    i1 = i1 + i29 | 0;
    i2 = i6 - i29 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i2) return;
   i3 = (i33 >>> (HEAPU8[i31 + 29 >> 0] | 0) << (HEAPU8[i31 + 33 >> 0] | 0) | i32 >>> (HEAPU8[i31 + 28 >> 0] | 0) << (HEAPU8[i31 + 32 >> 0] | 0) | HEAP32[i31 + 24 >> 2] | i34 >>> (HEAPU8[i31 + 30 >> 0] | 0) << (HEAPU8[i31 + 34 >> 0] | 0)) & 65535;
   i1 = (HEAP32[i18 + 20 >> 2] | 0) + (i1 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP16[i1 >> 1] = i3;
    if (!i2) break; else i1 = i1 + 2 | 0;
   }
   return;
  }
 }
 if ((i6 | 0) == (i29 | 0)) switch (i5 | 0) {
 case 1:
  {
   i17 = (HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[i31 + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i30 | 0)) {
    i16 = (Math_imul(i17, i7) | 0) + i6 | 0;
    i1 = (i8 | 0) != 0;
    i16 = i16 + (i1 ? 0 : i17) | 0;
    i1 = i30 - i7 + (i1 & 1) | 0;
   } else {
    i16 = (Math_imul(i17, i30) | 0) + i6 | 0;
    i1 = i7 - i30 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i7 = HEAP32[i31 + 12 >> 2] | 0;
   i4 = HEAPU8[i31 + 28 >> 0] | 0;
   i8 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i9 = HEAP32[i31 + 16 >> 2] | 0;
   i5 = HEAPU8[i31 + 29 >> 0] | 0;
   i10 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i11 = HEAP32[i31 + 20 >> 2] | 0;
   i6 = HEAPU8[i31 + 30 >> 0] | 0;
   i12 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i13 = HEAP32[i31 + 24 >> 2] | 0;
   i14 = HEAPU8[i31 + 32 >> 0] | 0;
   i15 = HEAPU8[i31 + 33 >> 0] | 0;
   i3 = HEAPU8[i31 + 34 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i18 + 20 >> 2] | 0) + (i16 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i31 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = i13 | ((((Math_imul(HEAPU8[i8 + ((i31 & i7) >>> i14) >> 0] | 0, i28) | 0) >>> 0) / 255 | 0) + i32 | 0) >>> i4 << i14 | ((((Math_imul(HEAPU8[i10 + ((i9 & i31) >>> i15) >> 0] | 0, i28) | 0) >>> 0) / 255 | 0) + i33 | 0) >>> i5 << i15 | ((((Math_imul(HEAPU8[i12 + ((i11 & i31) >>> i3) >> 0] | 0, i28) | 0) >>> 0) / 255 | 0) + i34 | 0) >>> i6 << i3;
    if (!i2) break; else i1 = i1 + (i17 << 1) | 0;
   }
   return;
  }
 case 2:
  {
   i17 = (HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[i31 + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i30 | 0)) {
    i16 = (Math_imul(i17, i7) | 0) + i6 | 0;
    i1 = (i8 | 0) != 0;
    i16 = i16 + (i1 ? 0 : i17) | 0;
    i1 = i30 - i7 + (i1 & 1) | 0;
   } else {
    i16 = (Math_imul(i17, i30) | 0) + i6 | 0;
    i1 = i7 - i30 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i7 = HEAP32[i31 + 12 >> 2] | 0;
   i4 = HEAPU8[i31 + 28 >> 0] | 0;
   i8 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i9 = HEAP32[i31 + 16 >> 2] | 0;
   i5 = HEAPU8[i31 + 29 >> 0] | 0;
   i10 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i11 = HEAP32[i31 + 20 >> 2] | 0;
   i6 = HEAPU8[i31 + 30 >> 0] | 0;
   i12 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i13 = HEAP32[i31 + 24 >> 2] | 0;
   i14 = HEAPU8[i31 + 32 >> 0] | 0;
   i15 = HEAPU8[i31 + 33 >> 0] | 0;
   i3 = HEAPU8[i31 + 34 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i18 + 20 >> 2] | 0) + (i16 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i31 = HEAPU16[i1 >> 1] | 0;
    i30 = (HEAPU8[i8 + ((i31 & i7) >>> i14) >> 0] | 0) + i32 | 0;
    i29 = (HEAPU8[i10 + ((i9 & i31) >>> i15) >> 0] | 0) + i33 | 0;
    i31 = (HEAPU8[i12 + ((i11 & i31) >>> i3) >> 0] | 0) + i34 | 0;
    HEAP16[i1 >> 1] = (i29 >>> 0 > 255 ? 255 : i29) >>> i5 << i15 | (i30 >>> 0 > 255 ? 255 : i30) >>> i4 << i14 | i13 | (i31 >>> 0 > 255 ? 255 : i31) >>> i6 << i3;
    if (!i2) break; else i1 = i1 + (i17 << 1) | 0;
   }
   return;
  }
 case 4:
  {
   i17 = (HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[i31 + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i30 | 0)) {
    i16 = (Math_imul(i17, i7) | 0) + i6 | 0;
    i1 = (i8 | 0) != 0;
    i16 = i16 + (i1 ? 0 : i17) | 0;
    i1 = i30 - i7 + (i1 & 1) | 0;
   } else {
    i16 = (Math_imul(i17, i30) | 0) + i6 | 0;
    i1 = i7 - i30 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i7 = HEAP32[i31 + 12 >> 2] | 0;
   i4 = HEAPU8[i31 + 28 >> 0] | 0;
   i8 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i9 = HEAP32[i31 + 16 >> 2] | 0;
   i5 = HEAPU8[i31 + 29 >> 0] | 0;
   i10 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i11 = HEAP32[i31 + 20 >> 2] | 0;
   i6 = HEAPU8[i31 + 30 >> 0] | 0;
   i12 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i13 = HEAP32[i31 + 24 >> 2] | 0;
   i14 = HEAPU8[i31 + 32 >> 0] | 0;
   i15 = HEAPU8[i31 + 33 >> 0] | 0;
   i3 = HEAPU8[i31 + 34 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i18 + 20 >> 2] | 0) + (i16 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i31 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = (((Math_imul(HEAPU8[i10 + ((i9 & i31) >>> i15) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) >>> i5 << i15 | (((Math_imul(HEAPU8[i8 + ((i31 & i7) >>> i14) >> 0] | 0, i32) | 0) >>> 0) / 255 | 0) >>> i4 << i14 | i13 | (((Math_imul(HEAPU8[i12 + ((i11 & i31) >>> i3) >> 0] | 0, i34) | 0) >>> 0) / 255 | 0) >>> i6 << i3;
    if (!i2) break; else i1 = i1 + (i17 << 1) | 0;
   }
   return;
  }
 default:
  {
   i4 = (HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[i31 + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i30 | 0)) {
    i1 = (Math_imul(i4, i7) | 0) + i6 | 0;
    i2 = (i8 | 0) != 0;
    i1 = i1 + (i2 ? 0 : i4) | 0;
    i2 = i30 - i7 + (i2 & 1) | 0;
   } else {
    i1 = (Math_imul(i4, i30) | 0) + i6 | 0;
    i2 = i7 - i30 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i2) return;
   i3 = (i33 >>> (HEAPU8[i31 + 29 >> 0] | 0) << (HEAPU8[i31 + 33 >> 0] | 0) | i32 >>> (HEAPU8[i31 + 28 >> 0] | 0) << (HEAPU8[i31 + 32 >> 0] | 0) | HEAP32[i31 + 24 >> 2] | i34 >>> (HEAPU8[i31 + 30 >> 0] | 0) << (HEAPU8[i31 + 34 >> 0] | 0)) & 65535;
   i1 = (HEAP32[i18 + 20 >> 2] | 0) + (i1 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP16[i1 >> 1] = i3;
    if (!i2) break; else i1 = i1 + (i4 << 1) | 0;
   }
   return;
  }
 }
 i27 = i29 - i6 | 0;
 i1 = i30 - i7 | 0;
 if ((((i27 | 0) < 0 ? 0 - i27 | 0 : i27) | 0) == (((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0)) switch (i5 | 0) {
 case 1:
  {
   i2 = (HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[i31 + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i30 | 0)) {
    i17 = (Math_imul(i2, i7) | 0) + i6 | 0;
    i16 = i2 + ((i6 | 0) > (i29 | 0) ? -1 : 1) | 0;
    i17 = i17 + ((i8 | 0) == 0 ? i16 : 0) | 0;
   } else {
    i17 = (Math_imul(i2, i30) | 0) + i29 | 0;
    i1 = i7 - i30 | 0;
    i16 = i2 + ((i6 | 0) < (i29 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i7 = HEAP32[i31 + 12 >> 2] | 0;
   i4 = HEAPU8[i31 + 28 >> 0] | 0;
   i8 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i9 = HEAP32[i31 + 16 >> 2] | 0;
   i5 = HEAPU8[i31 + 29 >> 0] | 0;
   i10 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i11 = HEAP32[i31 + 20 >> 2] | 0;
   i6 = HEAPU8[i31 + 30 >> 0] | 0;
   i12 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i13 = HEAP32[i31 + 24 >> 2] | 0;
   i14 = HEAPU8[i31 + 32 >> 0] | 0;
   i15 = HEAPU8[i31 + 33 >> 0] | 0;
   i3 = HEAPU8[i31 + 34 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i18 + 20 >> 2] | 0) + (i17 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i31 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = i13 | ((((Math_imul(HEAPU8[i8 + ((i31 & i7) >>> i14) >> 0] | 0, i28) | 0) >>> 0) / 255 | 0) + i32 | 0) >>> i4 << i14 | ((((Math_imul(HEAPU8[i10 + ((i9 & i31) >>> i15) >> 0] | 0, i28) | 0) >>> 0) / 255 | 0) + i33 | 0) >>> i5 << i15 | ((((Math_imul(HEAPU8[i12 + ((i11 & i31) >>> i3) >> 0] | 0, i28) | 0) >>> 0) / 255 | 0) + i34 | 0) >>> i6 << i3;
    if (!i2) break; else i1 = i1 + (i16 << 1) | 0;
   }
   return;
  }
 case 2:
  {
   i2 = (HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[i31 + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i30 | 0)) {
    i17 = (Math_imul(i2, i7) | 0) + i6 | 0;
    i16 = i2 + ((i6 | 0) > (i29 | 0) ? -1 : 1) | 0;
    i17 = i17 + ((i8 | 0) == 0 ? i16 : 0) | 0;
   } else {
    i17 = (Math_imul(i2, i30) | 0) + i29 | 0;
    i1 = i7 - i30 | 0;
    i16 = i2 + ((i6 | 0) < (i29 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i7 = HEAP32[i31 + 12 >> 2] | 0;
   i4 = HEAPU8[i31 + 28 >> 0] | 0;
   i8 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i9 = HEAP32[i31 + 16 >> 2] | 0;
   i5 = HEAPU8[i31 + 29 >> 0] | 0;
   i10 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i11 = HEAP32[i31 + 20 >> 2] | 0;
   i6 = HEAPU8[i31 + 30 >> 0] | 0;
   i12 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i13 = HEAP32[i31 + 24 >> 2] | 0;
   i14 = HEAPU8[i31 + 32 >> 0] | 0;
   i15 = HEAPU8[i31 + 33 >> 0] | 0;
   i3 = HEAPU8[i31 + 34 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i18 + 20 >> 2] | 0) + (i17 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i31 = HEAPU16[i1 >> 1] | 0;
    i30 = (HEAPU8[i8 + ((i31 & i7) >>> i14) >> 0] | 0) + i32 | 0;
    i29 = (HEAPU8[i10 + ((i9 & i31) >>> i15) >> 0] | 0) + i33 | 0;
    i31 = (HEAPU8[i12 + ((i11 & i31) >>> i3) >> 0] | 0) + i34 | 0;
    HEAP16[i1 >> 1] = (i29 >>> 0 > 255 ? 255 : i29) >>> i5 << i15 | (i30 >>> 0 > 255 ? 255 : i30) >>> i4 << i14 | i13 | (i31 >>> 0 > 255 ? 255 : i31) >>> i6 << i3;
    if (!i2) break; else i1 = i1 + (i16 << 1) | 0;
   }
   return;
  }
 case 4:
  {
   i2 = (HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[i31 + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i30 | 0)) {
    i17 = (Math_imul(i2, i7) | 0) + i6 | 0;
    i16 = i2 + ((i6 | 0) > (i29 | 0) ? -1 : 1) | 0;
    i17 = i17 + ((i8 | 0) == 0 ? i16 : 0) | 0;
   } else {
    i17 = (Math_imul(i2, i30) | 0) + i29 | 0;
    i1 = i7 - i30 | 0;
    i16 = i2 + ((i6 | 0) < (i29 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i7 = HEAP32[i31 + 12 >> 2] | 0;
   i4 = HEAPU8[i31 + 28 >> 0] | 0;
   i8 = HEAP32[5992 + (i4 << 2) >> 2] | 0;
   i9 = HEAP32[i31 + 16 >> 2] | 0;
   i5 = HEAPU8[i31 + 29 >> 0] | 0;
   i10 = HEAP32[5992 + (i5 << 2) >> 2] | 0;
   i11 = HEAP32[i31 + 20 >> 2] | 0;
   i6 = HEAPU8[i31 + 30 >> 0] | 0;
   i12 = HEAP32[5992 + (i6 << 2) >> 2] | 0;
   i13 = HEAP32[i31 + 24 >> 2] | 0;
   i14 = HEAPU8[i31 + 32 >> 0] | 0;
   i15 = HEAPU8[i31 + 33 >> 0] | 0;
   i3 = HEAPU8[i31 + 34 >> 0] | 0;
   i2 = i1;
   i1 = (HEAP32[i18 + 20 >> 2] | 0) + (i17 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i31 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = (((Math_imul(HEAPU8[i10 + ((i9 & i31) >>> i15) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) >>> i5 << i15 | (((Math_imul(HEAPU8[i8 + ((i31 & i7) >>> i14) >> 0] | 0, i32) | 0) >>> 0) / 255 | 0) >>> i4 << i14 | i13 | (((Math_imul(HEAPU8[i12 + ((i11 & i31) >>> i3) >> 0] | 0, i34) | 0) >>> 0) / 255 | 0) >>> i6 << i3;
    if (!i2) break; else i1 = i1 + (i16 << 1) | 0;
   }
   return;
  }
 default:
  {
   i2 = (HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[i31 + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i30 | 0)) {
    i5 = (Math_imul(i2, i7) | 0) + i6 | 0;
    i4 = i2 + ((i6 | 0) > (i29 | 0) ? -1 : 1) | 0;
    i5 = i5 + ((i8 | 0) == 0 ? i4 : 0) | 0;
   } else {
    i5 = (Math_imul(i2, i30) | 0) + i29 | 0;
    i1 = i7 - i30 | 0;
    i4 = i2 + ((i6 | 0) < (i29 | 0) ? -1 : 1) | 0;
   }
   i2 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if (!i2) return;
   i3 = (i33 >>> (HEAPU8[i31 + 29 >> 0] | 0) << (HEAPU8[i31 + 33 >> 0] | 0) | i32 >>> (HEAPU8[i31 + 28 >> 0] | 0) << (HEAPU8[i31 + 32 >> 0] | 0) | HEAP32[i31 + 24 >> 2] | i34 >>> (HEAPU8[i31 + 30 >> 0] | 0) << (HEAPU8[i31 + 34 >> 0] | 0)) & 65535;
   i1 = (HEAP32[i18 + 20 >> 2] | 0) + (i5 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP16[i1 >> 1] = i3;
    if (!i2) break; else i1 = i1 + (i4 << 1) | 0;
   }
   return;
  }
 } else switch (i5 | 0) {
 case 1:
  {
   i1 = i6 - i29 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i7 - i30 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i27 = i1 << 1;
    i5 = i27 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i4 = 1;
   } else {
    i27 = i2 << 1;
    i5 = i27 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i4 = 0;
   }
   i26 = i3 << 1;
   i24 = (i6 | 0) < (i29 | 0);
   i25 = i24 ? 0 - i2 | 0 : i2;
   i24 = i24 ? -1 : 1;
   i23 = (i7 | 0) < (i30 | 0);
   i22 = i23 ? 0 - i4 | 0 : i4;
   i23 = i23 ? -1 : 1;
   i21 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if ((i21 | 0) <= 0) return;
   i20 = HEAP32[i18 + 20 >> 2] | 0;
   i10 = HEAP32[i18 + 16 >> 2] | 0;
   i11 = HEAP32[i31 + 12 >> 2] | 0;
   i7 = HEAPU8[i31 + 28 >> 0] | 0;
   i12 = HEAP32[5992 + (i7 << 2) >> 2] | 0;
   i13 = HEAP32[i31 + 16 >> 2] | 0;
   i8 = HEAPU8[i31 + 29 >> 0] | 0;
   i14 = HEAP32[5992 + (i8 << 2) >> 2] | 0;
   i15 = HEAP32[i31 + 20 >> 2] | 0;
   i9 = HEAPU8[i31 + 30 >> 0] | 0;
   i16 = HEAP32[5992 + (i9 << 2) >> 2] | 0;
   i17 = HEAP32[i31 + 24 >> 2] | 0;
   i18 = HEAPU8[i31 + 32 >> 0] | 0;
   i19 = HEAPU8[i31 + 33 >> 0] | 0;
   i6 = HEAPU8[i31 + 34 >> 0] | 0;
   i4 = i5;
   i5 = 0;
   i3 = i29;
   i2 = i30;
   while (1) {
    i1 = i20 + ((Math_imul(i10, i2) | 0) + (i3 << 1)) | 0;
    i31 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = i17 | ((((Math_imul(HEAPU8[i12 + ((i31 & i11) >>> i18) >> 0] | 0, i28) | 0) >>> 0) / 255 | 0) + i32 | 0) >>> i7 << i18 | ((((Math_imul(HEAPU8[i14 + ((i13 & i31) >>> i19) >> 0] | 0, i28) | 0) >>> 0) / 255 | 0) + i33 | 0) >>> i8 << i19 | ((((Math_imul(HEAPU8[i16 + ((i15 & i31) >>> i6) >> 0] | 0, i28) | 0) >>> 0) / 255 | 0) + i34 | 0) >>> i9 << i6;
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i21 | 0)) break; else {
     i4 = (i1 ? i27 : i26) + i4 | 0;
     i3 = (i1 ? i25 : i24) + i3 | 0;
     i2 = i2 + (i1 ? i22 : i23) | 0;
    }
   }
   return;
  }
 case 2:
  {
   i1 = i6 - i29 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i7 - i30 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i27 = i1 << 1;
    i5 = i27 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i4 = 1;
   } else {
    i27 = i2 << 1;
    i5 = i27 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i4 = 0;
   }
   i26 = i3 << 1;
   i24 = (i6 | 0) < (i29 | 0);
   i25 = i24 ? 0 - i2 | 0 : i2;
   i24 = i24 ? -1 : 1;
   i23 = (i7 | 0) < (i30 | 0);
   i22 = i23 ? 0 - i4 | 0 : i4;
   i23 = i23 ? -1 : 1;
   i21 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if ((i21 | 0) <= 0) return;
   i20 = HEAP32[i18 + 20 >> 2] | 0;
   i10 = HEAP32[i18 + 16 >> 2] | 0;
   i11 = HEAP32[i31 + 12 >> 2] | 0;
   i7 = HEAPU8[i31 + 28 >> 0] | 0;
   i12 = HEAP32[5992 + (i7 << 2) >> 2] | 0;
   i13 = HEAP32[i31 + 16 >> 2] | 0;
   i8 = HEAPU8[i31 + 29 >> 0] | 0;
   i14 = HEAP32[5992 + (i8 << 2) >> 2] | 0;
   i15 = HEAP32[i31 + 20 >> 2] | 0;
   i9 = HEAPU8[i31 + 30 >> 0] | 0;
   i16 = HEAP32[5992 + (i9 << 2) >> 2] | 0;
   i17 = HEAP32[i31 + 24 >> 2] | 0;
   i18 = HEAPU8[i31 + 32 >> 0] | 0;
   i19 = HEAPU8[i31 + 33 >> 0] | 0;
   i6 = HEAPU8[i31 + 34 >> 0] | 0;
   i4 = i5;
   i5 = 0;
   i3 = i29;
   i2 = i30;
   while (1) {
    i1 = i20 + ((Math_imul(i10, i2) | 0) + (i3 << 1)) | 0;
    i31 = HEAPU16[i1 >> 1] | 0;
    i30 = (HEAPU8[i12 + ((i31 & i11) >>> i18) >> 0] | 0) + i32 | 0;
    i29 = (HEAPU8[i14 + ((i13 & i31) >>> i19) >> 0] | 0) + i33 | 0;
    i31 = (HEAPU8[i16 + ((i15 & i31) >>> i6) >> 0] | 0) + i34 | 0;
    HEAP16[i1 >> 1] = (i29 >>> 0 > 255 ? 255 : i29) >>> i8 << i19 | (i30 >>> 0 > 255 ? 255 : i30) >>> i7 << i18 | i17 | (i31 >>> 0 > 255 ? 255 : i31) >>> i9 << i6;
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i21 | 0)) break; else {
     i4 = (i1 ? i27 : i26) + i4 | 0;
     i3 = (i1 ? i25 : i24) + i3 | 0;
     i2 = i2 + (i1 ? i22 : i23) | 0;
    }
   }
   return;
  }
 case 4:
  {
   i1 = i6 - i29 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i7 - i30 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i27 = i1 << 1;
    i5 = i27 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i4 = 1;
   } else {
    i27 = i2 << 1;
    i5 = i27 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i4 = 0;
   }
   i26 = i3 << 1;
   i24 = (i6 | 0) < (i29 | 0);
   i25 = i24 ? 0 - i2 | 0 : i2;
   i24 = i24 ? -1 : 1;
   i23 = (i7 | 0) < (i30 | 0);
   i22 = i23 ? 0 - i4 | 0 : i4;
   i23 = i23 ? -1 : 1;
   i21 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if ((i21 | 0) <= 0) return;
   i20 = HEAP32[i18 + 20 >> 2] | 0;
   i10 = HEAP32[i18 + 16 >> 2] | 0;
   i11 = HEAP32[i31 + 12 >> 2] | 0;
   i7 = HEAPU8[i31 + 28 >> 0] | 0;
   i12 = HEAP32[5992 + (i7 << 2) >> 2] | 0;
   i13 = HEAP32[i31 + 16 >> 2] | 0;
   i8 = HEAPU8[i31 + 29 >> 0] | 0;
   i14 = HEAP32[5992 + (i8 << 2) >> 2] | 0;
   i15 = HEAP32[i31 + 20 >> 2] | 0;
   i9 = HEAPU8[i31 + 30 >> 0] | 0;
   i16 = HEAP32[5992 + (i9 << 2) >> 2] | 0;
   i17 = HEAP32[i31 + 24 >> 2] | 0;
   i18 = HEAPU8[i31 + 32 >> 0] | 0;
   i19 = HEAPU8[i31 + 33 >> 0] | 0;
   i6 = HEAPU8[i31 + 34 >> 0] | 0;
   i4 = i5;
   i5 = 0;
   i3 = i29;
   i2 = i30;
   while (1) {
    i1 = i20 + ((Math_imul(i10, i2) | 0) + (i3 << 1)) | 0;
    i31 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = (((Math_imul(HEAPU8[i14 + ((i13 & i31) >>> i19) >> 0] | 0, i33) | 0) >>> 0) / 255 | 0) >>> i8 << i19 | (((Math_imul(HEAPU8[i12 + ((i31 & i11) >>> i18) >> 0] | 0, i32) | 0) >>> 0) / 255 | 0) >>> i7 << i18 | i17 | (((Math_imul(HEAPU8[i16 + ((i15 & i31) >>> i6) >> 0] | 0, i34) | 0) >>> 0) / 255 | 0) >>> i9 << i6;
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i21 | 0)) break; else {
     i4 = (i1 ? i27 : i26) + i4 | 0;
     i3 = (i1 ? i25 : i24) + i3 | 0;
     i2 = i2 + (i1 ? i22 : i23) | 0;
    }
   }
   return;
  }
 default:
  {
   i1 = i6 - i29 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i7 - i30 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i15 = i1 << 1;
    i4 = i15 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i5 = 1;
   } else {
    i15 = i2 << 1;
    i4 = i15 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i5 = 0;
   }
   i14 = i3 << 1;
   i12 = (i6 | 0) < (i29 | 0);
   i13 = i12 ? 0 - i2 | 0 : i2;
   i12 = i12 ? -1 : 1;
   i11 = (i7 | 0) < (i30 | 0);
   i10 = i11 ? 0 - i5 | 0 : i5;
   i11 = i11 ? -1 : 1;
   i9 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if ((i9 | 0) <= 0) return;
   i8 = HEAP32[i18 + 20 >> 2] | 0;
   i7 = HEAP32[i18 + 16 >> 2] | 0;
   i6 = (i33 >>> (HEAPU8[i31 + 29 >> 0] | 0) << (HEAPU8[i31 + 33 >> 0] | 0) | i32 >>> (HEAPU8[i31 + 28 >> 0] | 0) << (HEAPU8[i31 + 32 >> 0] | 0) | HEAP32[i31 + 24 >> 2] | i34 >>> (HEAPU8[i31 + 30 >> 0] | 0) << (HEAPU8[i31 + 34 >> 0] | 0)) & 65535;
   i5 = 0;
   i3 = i29;
   i2 = i30;
   while (1) {
    HEAP16[i8 + ((Math_imul(i7, i2) | 0) + (i3 << 1)) >> 1] = i6;
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i9 | 0)) break; else {
     i4 = (i1 ? i15 : i14) + i4 | 0;
     i3 = (i1 ? i13 : i12) + i3 | 0;
     i2 = i2 + (i1 ? i10 : i11) | 0;
    }
   }
   return;
  }
 }
}
function _SDL_BlendFillRect_RGBA(i8, i9, i2, i4, i5, i7, i1) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i3 = 0, i6 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0;
 i6 = HEAP32[i8 + 4 >> 2] | 0;
 i35 = i1 & 255;
 i34 = i35 ^ 255;
 i36 = HEAP8[i6 + 9 >> 0] | 0;
 i1 = i36 & 255;
 if (i36 << 24 >> 24 != 4) {
  i36 = _SDL_Error(4) | 0;
  return i36 | 0;
 }
 switch (i2 | 0) {
 case 1:
  {
   i2 = HEAP32[i9 + 8 >> 2] | 0;
   i3 = HEAP32[i9 + 12 >> 2] | 0;
   i1 = (HEAP32[i8 + 16 >> 2] | 0) / (i1 | 0) | 0;
   i33 = i1 - i2 | 0;
   if (!i3) {
    i36 = 0;
    return i36 | 0;
   }
   i1 = Math_imul(HEAP32[i9 + 4 >> 2] | 0, i1) | 0;
   i32 = (i2 + 3 | 0) / 4 | 0;
   i20 = i2 & 3;
   i21 = i6 + 12 | 0;
   i22 = i6 + 32 | 0;
   i23 = i6 + 28 | 0;
   i24 = i6 + 16 | 0;
   i25 = i6 + 33 | 0;
   i26 = i6 + 29 | 0;
   i27 = i6 + 20 | 0;
   i28 = i6 + 34 | 0;
   i29 = i6 + 30 | 0;
   i30 = i6 + 24 | 0;
   i31 = i6 + 35 | 0;
   i19 = i6 + 31 | 0;
   i18 = i4 & 255;
   i17 = i5 & 255;
   i16 = i7 & 255;
   i2 = i3;
   i1 = (HEAP32[i8 + 20 >> 2] | 0) + (i1 + (HEAP32[i9 >> 2] | 0) << 2) | 0;
   L29 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i20 | 0) {
    case 0:
     {
      i5 = HEAP8[i23 >> 0] | 0;
      i8 = HEAP8[i26 >> 0] | 0;
      i11 = HEAP8[i29 >> 0] | 0;
      i14 = HEAP8[i19 >> 0] | 0;
      i3 = HEAP8[i22 >> 0] | 0;
      i4 = i5;
      i5 = HEAP32[5992 + ((i5 & 255) << 2) >> 2] | 0;
      i6 = HEAP8[i25 >> 0] | 0;
      i7 = i8;
      i8 = HEAP32[5992 + ((i8 & 255) << 2) >> 2] | 0;
      i9 = HEAP8[i28 >> 0] | 0;
      i10 = i11;
      i11 = HEAP32[5992 + ((i11 & 255) << 2) >> 2] | 0;
      i12 = HEAP8[i31 >> 0] | 0;
      i13 = i14;
      i14 = HEAP32[5992 + ((i14 & 255) << 2) >> 2] | 0;
      i15 = i32;
      i36 = 10;
      break;
     }
    case 3:
     {
      i5 = HEAP8[i23 >> 0] | 0;
      i8 = HEAP8[i26 >> 0] | 0;
      i11 = HEAP8[i29 >> 0] | 0;
      i14 = HEAP8[i19 >> 0] | 0;
      i3 = HEAP8[i22 >> 0] | 0;
      i4 = i5;
      i5 = HEAP32[5992 + ((i5 & 255) << 2) >> 2] | 0;
      i6 = HEAP8[i25 >> 0] | 0;
      i7 = i8;
      i8 = HEAP32[5992 + ((i8 & 255) << 2) >> 2] | 0;
      i9 = HEAP8[i28 >> 0] | 0;
      i10 = i11;
      i11 = HEAP32[5992 + ((i11 & 255) << 2) >> 2] | 0;
      i12 = HEAP8[i31 >> 0] | 0;
      i13 = i14;
      i14 = HEAP32[5992 + ((i14 & 255) << 2) >> 2] | 0;
      i15 = i32;
      i36 = 11;
      break;
     }
    case 2:
     {
      i5 = HEAP8[i23 >> 0] | 0;
      i8 = HEAP8[i26 >> 0] | 0;
      i11 = HEAP8[i29 >> 0] | 0;
      i14 = HEAP8[i19 >> 0] | 0;
      i3 = HEAP8[i22 >> 0] | 0;
      i4 = i5;
      i5 = HEAP32[5992 + ((i5 & 255) << 2) >> 2] | 0;
      i6 = HEAP8[i25 >> 0] | 0;
      i7 = i8;
      i8 = HEAP32[5992 + ((i8 & 255) << 2) >> 2] | 0;
      i9 = HEAP8[i28 >> 0] | 0;
      i10 = i11;
      i11 = HEAP32[5992 + ((i11 & 255) << 2) >> 2] | 0;
      i12 = HEAP8[i31 >> 0] | 0;
      i13 = i14;
      i14 = HEAP32[5992 + ((i14 & 255) << 2) >> 2] | 0;
      i15 = i32;
      i36 = 12;
      break;
     }
    case 1:
     {
      i5 = HEAP8[i23 >> 0] | 0;
      i8 = HEAP8[i26 >> 0] | 0;
      i11 = HEAP8[i29 >> 0] | 0;
      i14 = HEAP8[i19 >> 0] | 0;
      i3 = HEAP8[i22 >> 0] | 0;
      i4 = i5;
      i5 = HEAP32[5992 + ((i5 & 255) << 2) >> 2] | 0;
      i6 = HEAP8[i25 >> 0] | 0;
      i7 = i8;
      i8 = HEAP32[5992 + ((i8 & 255) << 2) >> 2] | 0;
      i9 = HEAP8[i28 >> 0] | 0;
      i10 = i11;
      i11 = HEAP32[5992 + ((i11 & 255) << 2) >> 2] | 0;
      i12 = HEAP8[i31 >> 0] | 0;
      i13 = i14;
      i14 = HEAP32[5992 + ((i14 & 255) << 2) >> 2] | 0;
      i15 = i32;
      i36 = 13;
      break;
     }
    default:
     i36 = 14;
    }
    while (1) if ((i36 | 0) == 10) {
     i38 = HEAP32[i1 >> 2] | 0;
     i40 = i3 & 255;
     i41 = i6 & 255;
     i39 = i9 & 255;
     i37 = i12 & 255;
     HEAP32[i1 >> 2] = ((((Math_imul(HEAPU8[i8 + ((HEAP32[i24 >> 2] & i38) >>> i41) >> 0] | 0, i34) | 0) >>> 0) / 255 | 0) + i17 | 0) >>> (i7 & 255) << i41 | ((((Math_imul(HEAPU8[i5 + ((HEAP32[i21 >> 2] & i38) >>> i40) >> 0] | 0, i34) | 0) >>> 0) / 255 | 0) + i18 | 0) >>> (i4 & 255) << i40 | ((((Math_imul(HEAPU8[i11 + ((HEAP32[i27 >> 2] & i38) >>> i39) >> 0] | 0, i34) | 0) >>> 0) / 255 | 0) + i16 | 0) >>> (i10 & 255) << i39 | ((((Math_imul(HEAPU8[i14 + ((HEAP32[i30 >> 2] & i38) >>> i37) >> 0] | 0, i34) | 0) >>> 0) / 255 | 0) + i35 | 0) >>> (i13 & 255) << i37;
     i1 = i1 + 4 | 0;
     i36 = 11;
     continue;
    } else if ((i36 | 0) == 11) {
     i40 = HEAP32[i1 >> 2] | 0;
     i38 = i3 & 255;
     i37 = i6 & 255;
     i39 = i9 & 255;
     i41 = i12 & 255;
     HEAP32[i1 >> 2] = ((((Math_imul(HEAPU8[i8 + ((HEAP32[i24 >> 2] & i40) >>> i37) >> 0] | 0, i34) | 0) >>> 0) / 255 | 0) + i17 | 0) >>> (i7 & 255) << i37 | ((((Math_imul(HEAPU8[i5 + ((HEAP32[i21 >> 2] & i40) >>> i38) >> 0] | 0, i34) | 0) >>> 0) / 255 | 0) + i18 | 0) >>> (i4 & 255) << i38 | ((((Math_imul(HEAPU8[i11 + ((HEAP32[i27 >> 2] & i40) >>> i39) >> 0] | 0, i34) | 0) >>> 0) / 255 | 0) + i16 | 0) >>> (i10 & 255) << i39 | ((((Math_imul(HEAPU8[i14 + ((HEAP32[i30 >> 2] & i40) >>> i41) >> 0] | 0, i34) | 0) >>> 0) / 255 | 0) + i35 | 0) >>> (i13 & 255) << i41;
     i1 = i1 + 4 | 0;
     i36 = 12;
     continue;
    } else if ((i36 | 0) == 12) {
     i40 = HEAP32[i1 >> 2] | 0;
     i38 = i3 & 255;
     i37 = i6 & 255;
     i39 = i9 & 255;
     i41 = i12 & 255;
     HEAP32[i1 >> 2] = ((((Math_imul(HEAPU8[i8 + ((HEAP32[i24 >> 2] & i40) >>> i37) >> 0] | 0, i34) | 0) >>> 0) / 255 | 0) + i17 | 0) >>> (i7 & 255) << i37 | ((((Math_imul(HEAPU8[i5 + ((HEAP32[i21 >> 2] & i40) >>> i38) >> 0] | 0, i34) | 0) >>> 0) / 255 | 0) + i18 | 0) >>> (i4 & 255) << i38 | ((((Math_imul(HEAPU8[i11 + ((HEAP32[i27 >> 2] & i40) >>> i39) >> 0] | 0, i34) | 0) >>> 0) / 255 | 0) + i16 | 0) >>> (i10 & 255) << i39 | ((((Math_imul(HEAPU8[i14 + ((HEAP32[i30 >> 2] & i40) >>> i41) >> 0] | 0, i34) | 0) >>> 0) / 255 | 0) + i35 | 0) >>> (i13 & 255) << i41;
     i1 = i1 + 4 | 0;
     i36 = 13;
     continue;
    } else if ((i36 | 0) == 13) {
     i40 = HEAP32[i1 >> 2] | 0;
     i38 = i3 & 255;
     i37 = i6 & 255;
     i39 = i9 & 255;
     i41 = i12 & 255;
     HEAP32[i1 >> 2] = ((((Math_imul(HEAPU8[i8 + ((HEAP32[i24 >> 2] & i40) >>> i37) >> 0] | 0, i34) | 0) >>> 0) / 255 | 0) + i17 | 0) >>> (i7 & 255) << i37 | ((((Math_imul(HEAPU8[i5 + ((HEAP32[i21 >> 2] & i40) >>> i38) >> 0] | 0, i34) | 0) >>> 0) / 255 | 0) + i18 | 0) >>> (i4 & 255) << i38 | ((((Math_imul(HEAPU8[i11 + ((HEAP32[i27 >> 2] & i40) >>> i39) >> 0] | 0, i34) | 0) >>> 0) / 255 | 0) + i16 | 0) >>> (i10 & 255) << i39 | ((((Math_imul(HEAPU8[i14 + ((HEAP32[i30 >> 2] & i40) >>> i41) >> 0] | 0, i34) | 0) >>> 0) / 255 | 0) + i35 | 0) >>> (i13 & 255) << i41;
     i1 = i1 + 4 | 0;
     if ((i15 | 0) > 1) {
      i15 = i15 + -1 | 0;
      i36 = 10;
      continue;
     } else {
      i36 = 14;
      continue;
     }
    } else if ((i36 | 0) == 14) if (!i2) {
     i1 = 0;
     break L29;
    } else {
     i1 = i1 + (i33 << 2) | 0;
     continue L29;
    }
   }
   return i1 | 0;
  }
 case 2:
  {
   i2 = HEAP32[i9 + 8 >> 2] | 0;
   i3 = HEAP32[i9 + 12 >> 2] | 0;
   i1 = (HEAP32[i8 + 16 >> 2] | 0) / (i1 | 0) | 0;
   i33 = i1 - i2 | 0;
   if (!i3) {
    i41 = 0;
    return i41 | 0;
   }
   i1 = Math_imul(HEAP32[i9 + 4 >> 2] | 0, i1) | 0;
   i32 = (i2 + 3 | 0) / 4 | 0;
   i20 = i2 & 3;
   i21 = i6 + 12 | 0;
   i22 = i6 + 32 | 0;
   i23 = i6 + 28 | 0;
   i24 = i6 + 16 | 0;
   i25 = i6 + 33 | 0;
   i26 = i6 + 29 | 0;
   i27 = i6 + 20 | 0;
   i28 = i6 + 34 | 0;
   i29 = i6 + 30 | 0;
   i30 = i6 + 24 | 0;
   i31 = i6 + 35 | 0;
   i19 = i6 + 31 | 0;
   i18 = i4 & 255;
   i17 = i5 & 255;
   i16 = i7 & 255;
   i2 = i3;
   i1 = (HEAP32[i8 + 20 >> 2] | 0) + (i1 + (HEAP32[i9 >> 2] | 0) << 2) | 0;
   L48 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i20 | 0) {
    case 0:
     {
      i5 = HEAP8[i23 >> 0] | 0;
      i8 = HEAP8[i26 >> 0] | 0;
      i11 = HEAP8[i29 >> 0] | 0;
      i14 = HEAP8[i19 >> 0] | 0;
      i3 = HEAP8[i22 >> 0] | 0;
      i4 = i5;
      i5 = HEAP32[5992 + ((i5 & 255) << 2) >> 2] | 0;
      i6 = HEAP8[i25 >> 0] | 0;
      i7 = i8;
      i8 = HEAP32[5992 + ((i8 & 255) << 2) >> 2] | 0;
      i9 = HEAP8[i28 >> 0] | 0;
      i10 = i11;
      i11 = HEAP32[5992 + ((i11 & 255) << 2) >> 2] | 0;
      i12 = HEAP8[i31 >> 0] | 0;
      i13 = i14;
      i14 = HEAP32[5992 + ((i14 & 255) << 2) >> 2] | 0;
      i15 = i32;
      i36 = 22;
      break;
     }
    case 3:
     {
      i5 = HEAP8[i23 >> 0] | 0;
      i8 = HEAP8[i26 >> 0] | 0;
      i11 = HEAP8[i29 >> 0] | 0;
      i14 = HEAP8[i19 >> 0] | 0;
      i3 = HEAP8[i22 >> 0] | 0;
      i4 = i5;
      i5 = HEAP32[5992 + ((i5 & 255) << 2) >> 2] | 0;
      i6 = HEAP8[i25 >> 0] | 0;
      i7 = i8;
      i8 = HEAP32[5992 + ((i8 & 255) << 2) >> 2] | 0;
      i9 = HEAP8[i28 >> 0] | 0;
      i10 = i11;
      i11 = HEAP32[5992 + ((i11 & 255) << 2) >> 2] | 0;
      i12 = HEAP8[i31 >> 0] | 0;
      i13 = i14;
      i14 = HEAP32[5992 + ((i14 & 255) << 2) >> 2] | 0;
      i15 = i32;
      i36 = 23;
      break;
     }
    case 2:
     {
      i5 = HEAP8[i23 >> 0] | 0;
      i8 = HEAP8[i26 >> 0] | 0;
      i11 = HEAP8[i29 >> 0] | 0;
      i14 = HEAP8[i19 >> 0] | 0;
      i3 = HEAP8[i22 >> 0] | 0;
      i4 = i5;
      i5 = HEAP32[5992 + ((i5 & 255) << 2) >> 2] | 0;
      i6 = HEAP8[i25 >> 0] | 0;
      i7 = i8;
      i8 = HEAP32[5992 + ((i8 & 255) << 2) >> 2] | 0;
      i9 = HEAP8[i28 >> 0] | 0;
      i10 = i11;
      i11 = HEAP32[5992 + ((i11 & 255) << 2) >> 2] | 0;
      i12 = HEAP8[i31 >> 0] | 0;
      i13 = i14;
      i14 = HEAP32[5992 + ((i14 & 255) << 2) >> 2] | 0;
      i15 = i32;
      i36 = 24;
      break;
     }
    case 1:
     {
      i5 = HEAP8[i23 >> 0] | 0;
      i8 = HEAP8[i26 >> 0] | 0;
      i11 = HEAP8[i29 >> 0] | 0;
      i14 = HEAP8[i19 >> 0] | 0;
      i3 = HEAP8[i22 >> 0] | 0;
      i4 = i5;
      i5 = HEAP32[5992 + ((i5 & 255) << 2) >> 2] | 0;
      i6 = HEAP8[i25 >> 0] | 0;
      i7 = i8;
      i8 = HEAP32[5992 + ((i8 & 255) << 2) >> 2] | 0;
      i9 = HEAP8[i28 >> 0] | 0;
      i10 = i11;
      i11 = HEAP32[5992 + ((i11 & 255) << 2) >> 2] | 0;
      i12 = HEAP8[i31 >> 0] | 0;
      i13 = i14;
      i14 = HEAP32[5992 + ((i14 & 255) << 2) >> 2] | 0;
      i15 = i32;
      i36 = 25;
      break;
     }
    default:
     i36 = 26;
    }
    while (1) if ((i36 | 0) == 22) {
     i40 = HEAP32[i1 >> 2] | 0;
     i37 = i3 & 255;
     i34 = i6 & 255;
     i39 = i9 & 255;
     i41 = i12 & 255;
     i35 = (HEAPU8[i5 + ((HEAP32[i21 >> 2] & i40) >>> i37) >> 0] | 0) + i18 | 0;
     i42 = (HEAPU8[i8 + ((HEAP32[i24 >> 2] & i40) >>> i34) >> 0] | 0) + i17 | 0;
     i38 = (HEAPU8[i11 + ((HEAP32[i27 >> 2] & i40) >>> i39) >> 0] | 0) + i16 | 0;
     HEAP32[i1 >> 2] = (i42 >>> 0 > 255 ? 255 : i42) >>> (i7 & 255) << i34 | (i35 >>> 0 > 255 ? 255 : i35) >>> (i4 & 255) << i37 | (i38 >>> 0 > 255 ? 255 : i38) >>> (i10 & 255) << i39 | (HEAPU8[i14 + ((HEAP32[i30 >> 2] & i40) >>> i41) >> 0] | 0) >>> (i13 & 255) << i41;
     i1 = i1 + 4 | 0;
     i36 = 23;
     continue;
    } else if ((i36 | 0) == 23) {
     i41 = HEAP32[i1 >> 2] | 0;
     i38 = i3 & 255;
     i35 = i6 & 255;
     i40 = i9 & 255;
     i42 = i12 & 255;
     i37 = (HEAPU8[i5 + ((HEAP32[i21 >> 2] & i41) >>> i38) >> 0] | 0) + i18 | 0;
     i34 = (HEAPU8[i8 + ((HEAP32[i24 >> 2] & i41) >>> i35) >> 0] | 0) + i17 | 0;
     i39 = (HEAPU8[i11 + ((HEAP32[i27 >> 2] & i41) >>> i40) >> 0] | 0) + i16 | 0;
     HEAP32[i1 >> 2] = (i34 >>> 0 > 255 ? 255 : i34) >>> (i7 & 255) << i35 | (i37 >>> 0 > 255 ? 255 : i37) >>> (i4 & 255) << i38 | (i39 >>> 0 > 255 ? 255 : i39) >>> (i10 & 255) << i40 | (HEAPU8[i14 + ((HEAP32[i30 >> 2] & i41) >>> i42) >> 0] | 0) >>> (i13 & 255) << i42;
     i1 = i1 + 4 | 0;
     i36 = 24;
     continue;
    } else if ((i36 | 0) == 24) {
     i41 = HEAP32[i1 >> 2] | 0;
     i38 = i3 & 255;
     i35 = i6 & 255;
     i40 = i9 & 255;
     i42 = i12 & 255;
     i37 = (HEAPU8[i5 + ((HEAP32[i21 >> 2] & i41) >>> i38) >> 0] | 0) + i18 | 0;
     i34 = (HEAPU8[i8 + ((HEAP32[i24 >> 2] & i41) >>> i35) >> 0] | 0) + i17 | 0;
     i39 = (HEAPU8[i11 + ((HEAP32[i27 >> 2] & i41) >>> i40) >> 0] | 0) + i16 | 0;
     HEAP32[i1 >> 2] = (i34 >>> 0 > 255 ? 255 : i34) >>> (i7 & 255) << i35 | (i37 >>> 0 > 255 ? 255 : i37) >>> (i4 & 255) << i38 | (i39 >>> 0 > 255 ? 255 : i39) >>> (i10 & 255) << i40 | (HEAPU8[i14 + ((HEAP32[i30 >> 2] & i41) >>> i42) >> 0] | 0) >>> (i13 & 255) << i42;
     i1 = i1 + 4 | 0;
     i36 = 25;
     continue;
    } else if ((i36 | 0) == 25) {
     i41 = HEAP32[i1 >> 2] | 0;
     i38 = i3 & 255;
     i36 = i6 & 255;
     i40 = i9 & 255;
     i42 = i12 & 255;
     i37 = (HEAPU8[i5 + ((HEAP32[i21 >> 2] & i41) >>> i38) >> 0] | 0) + i18 | 0;
     i35 = (HEAPU8[i8 + ((HEAP32[i24 >> 2] & i41) >>> i36) >> 0] | 0) + i17 | 0;
     i39 = (HEAPU8[i11 + ((HEAP32[i27 >> 2] & i41) >>> i40) >> 0] | 0) + i16 | 0;
     HEAP32[i1 >> 2] = (i35 >>> 0 > 255 ? 255 : i35) >>> (i7 & 255) << i36 | (i37 >>> 0 > 255 ? 255 : i37) >>> (i4 & 255) << i38 | (i39 >>> 0 > 255 ? 255 : i39) >>> (i10 & 255) << i40 | (HEAPU8[i14 + ((HEAP32[i30 >> 2] & i41) >>> i42) >> 0] | 0) >>> (i13 & 255) << i42;
     i1 = i1 + 4 | 0;
     if ((i15 | 0) > 1) {
      i15 = i15 + -1 | 0;
      i36 = 22;
      continue;
     } else {
      i36 = 26;
      continue;
     }
    } else if ((i36 | 0) == 26) if (!i2) {
     i1 = 0;
     break L48;
    } else {
     i1 = i1 + (i33 << 2) | 0;
     continue L48;
    }
   }
   return i1 | 0;
  }
 case 4:
  {
   i2 = HEAP32[i9 + 8 >> 2] | 0;
   i3 = HEAP32[i9 + 12 >> 2] | 0;
   i1 = (HEAP32[i8 + 16 >> 2] | 0) / (i1 | 0) | 0;
   i33 = i1 - i2 | 0;
   if (!i3) {
    i42 = 0;
    return i42 | 0;
   }
   i1 = Math_imul(HEAP32[i9 + 4 >> 2] | 0, i1) | 0;
   i32 = (i2 + 3 | 0) / 4 | 0;
   i20 = i2 & 3;
   i21 = i6 + 12 | 0;
   i22 = i6 + 32 | 0;
   i23 = i6 + 28 | 0;
   i24 = i6 + 16 | 0;
   i25 = i6 + 33 | 0;
   i26 = i6 + 29 | 0;
   i27 = i6 + 20 | 0;
   i28 = i6 + 34 | 0;
   i29 = i6 + 30 | 0;
   i30 = i6 + 24 | 0;
   i31 = i6 + 35 | 0;
   i19 = i6 + 31 | 0;
   i18 = i4 & 255;
   i17 = i5 & 255;
   i16 = i7 & 255;
   i2 = i3;
   i1 = (HEAP32[i8 + 20 >> 2] | 0) + (i1 + (HEAP32[i9 >> 2] | 0) << 2) | 0;
   L67 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i20 | 0) {
    case 0:
     {
      i5 = HEAP8[i23 >> 0] | 0;
      i8 = HEAP8[i26 >> 0] | 0;
      i11 = HEAP8[i29 >> 0] | 0;
      i14 = HEAP8[i19 >> 0] | 0;
      i3 = HEAP8[i22 >> 0] | 0;
      i4 = i5;
      i5 = HEAP32[5992 + ((i5 & 255) << 2) >> 2] | 0;
      i6 = HEAP8[i25 >> 0] | 0;
      i7 = i8;
      i8 = HEAP32[5992 + ((i8 & 255) << 2) >> 2] | 0;
      i9 = HEAP8[i28 >> 0] | 0;
      i10 = i11;
      i11 = HEAP32[5992 + ((i11 & 255) << 2) >> 2] | 0;
      i12 = HEAP8[i31 >> 0] | 0;
      i13 = i14;
      i14 = HEAP32[5992 + ((i14 & 255) << 2) >> 2] | 0;
      i15 = i32;
      i36 = 34;
      break;
     }
    case 3:
     {
      i5 = HEAP8[i23 >> 0] | 0;
      i8 = HEAP8[i26 >> 0] | 0;
      i11 = HEAP8[i29 >> 0] | 0;
      i14 = HEAP8[i19 >> 0] | 0;
      i3 = HEAP8[i22 >> 0] | 0;
      i4 = i5;
      i5 = HEAP32[5992 + ((i5 & 255) << 2) >> 2] | 0;
      i6 = HEAP8[i25 >> 0] | 0;
      i7 = i8;
      i8 = HEAP32[5992 + ((i8 & 255) << 2) >> 2] | 0;
      i9 = HEAP8[i28 >> 0] | 0;
      i10 = i11;
      i11 = HEAP32[5992 + ((i11 & 255) << 2) >> 2] | 0;
      i12 = HEAP8[i31 >> 0] | 0;
      i13 = i14;
      i14 = HEAP32[5992 + ((i14 & 255) << 2) >> 2] | 0;
      i15 = i32;
      i36 = 35;
      break;
     }
    case 2:
     {
      i5 = HEAP8[i23 >> 0] | 0;
      i8 = HEAP8[i26 >> 0] | 0;
      i11 = HEAP8[i29 >> 0] | 0;
      i14 = HEAP8[i19 >> 0] | 0;
      i3 = HEAP8[i22 >> 0] | 0;
      i4 = i5;
      i5 = HEAP32[5992 + ((i5 & 255) << 2) >> 2] | 0;
      i6 = HEAP8[i25 >> 0] | 0;
      i7 = i8;
      i8 = HEAP32[5992 + ((i8 & 255) << 2) >> 2] | 0;
      i9 = HEAP8[i28 >> 0] | 0;
      i10 = i11;
      i11 = HEAP32[5992 + ((i11 & 255) << 2) >> 2] | 0;
      i12 = HEAP8[i31 >> 0] | 0;
      i13 = i14;
      i14 = HEAP32[5992 + ((i14 & 255) << 2) >> 2] | 0;
      i15 = i32;
      i36 = 36;
      break;
     }
    case 1:
     {
      i5 = HEAP8[i23 >> 0] | 0;
      i8 = HEAP8[i26 >> 0] | 0;
      i11 = HEAP8[i29 >> 0] | 0;
      i14 = HEAP8[i19 >> 0] | 0;
      i3 = HEAP8[i22 >> 0] | 0;
      i4 = i5;
      i5 = HEAP32[5992 + ((i5 & 255) << 2) >> 2] | 0;
      i6 = HEAP8[i25 >> 0] | 0;
      i7 = i8;
      i8 = HEAP32[5992 + ((i8 & 255) << 2) >> 2] | 0;
      i9 = HEAP8[i28 >> 0] | 0;
      i10 = i11;
      i11 = HEAP32[5992 + ((i11 & 255) << 2) >> 2] | 0;
      i12 = HEAP8[i31 >> 0] | 0;
      i13 = i14;
      i14 = HEAP32[5992 + ((i14 & 255) << 2) >> 2] | 0;
      i15 = i32;
      i36 = 37;
      break;
     }
    default:
     i36 = 38;
    }
    while (1) if ((i36 | 0) == 34) {
     i41 = HEAP32[i1 >> 2] | 0;
     i39 = i3 & 255;
     i40 = i6 & 255;
     i42 = i9 & 255;
     i38 = i12 & 255;
     HEAP32[i1 >> 2] = (HEAPU8[i14 + ((HEAP32[i30 >> 2] & i41) >>> i38) >> 0] | 0) >>> (i13 & 255) << i38 | (((Math_imul(HEAPU8[i5 + ((HEAP32[i21 >> 2] & i41) >>> i39) >> 0] | 0, i18) | 0) >>> 0) / 255 | 0) >>> (i4 & 255) << i39 | (((Math_imul(HEAPU8[i8 + ((HEAP32[i24 >> 2] & i41) >>> i40) >> 0] | 0, i17) | 0) >>> 0) / 255 | 0) >>> (i7 & 255) << i40 | (((Math_imul(HEAPU8[i11 + ((HEAP32[i27 >> 2] & i41) >>> i42) >> 0] | 0, i16) | 0) >>> 0) / 255 | 0) >>> (i10 & 255) << i42;
     i1 = i1 + 4 | 0;
     i36 = 35;
     continue;
    } else if ((i36 | 0) == 35) {
     i41 = HEAP32[i1 >> 2] | 0;
     i39 = i3 & 255;
     i40 = i6 & 255;
     i42 = i9 & 255;
     i38 = i12 & 255;
     HEAP32[i1 >> 2] = (HEAPU8[i14 + ((HEAP32[i30 >> 2] & i41) >>> i38) >> 0] | 0) >>> (i13 & 255) << i38 | (((Math_imul(HEAPU8[i5 + ((HEAP32[i21 >> 2] & i41) >>> i39) >> 0] | 0, i18) | 0) >>> 0) / 255 | 0) >>> (i4 & 255) << i39 | (((Math_imul(HEAPU8[i8 + ((HEAP32[i24 >> 2] & i41) >>> i40) >> 0] | 0, i17) | 0) >>> 0) / 255 | 0) >>> (i7 & 255) << i40 | (((Math_imul(HEAPU8[i11 + ((HEAP32[i27 >> 2] & i41) >>> i42) >> 0] | 0, i16) | 0) >>> 0) / 255 | 0) >>> (i10 & 255) << i42;
     i1 = i1 + 4 | 0;
     i36 = 36;
     continue;
    } else if ((i36 | 0) == 36) {
     i41 = HEAP32[i1 >> 2] | 0;
     i39 = i3 & 255;
     i40 = i6 & 255;
     i42 = i9 & 255;
     i38 = i12 & 255;
     HEAP32[i1 >> 2] = (HEAPU8[i14 + ((HEAP32[i30 >> 2] & i41) >>> i38) >> 0] | 0) >>> (i13 & 255) << i38 | (((Math_imul(HEAPU8[i5 + ((HEAP32[i21 >> 2] & i41) >>> i39) >> 0] | 0, i18) | 0) >>> 0) / 255 | 0) >>> (i4 & 255) << i39 | (((Math_imul(HEAPU8[i8 + ((HEAP32[i24 >> 2] & i41) >>> i40) >> 0] | 0, i17) | 0) >>> 0) / 255 | 0) >>> (i7 & 255) << i40 | (((Math_imul(HEAPU8[i11 + ((HEAP32[i27 >> 2] & i41) >>> i42) >> 0] | 0, i16) | 0) >>> 0) / 255 | 0) >>> (i10 & 255) << i42;
     i1 = i1 + 4 | 0;
     i36 = 37;
     continue;
    } else if ((i36 | 0) == 37) {
     i41 = HEAP32[i1 >> 2] | 0;
     i39 = i3 & 255;
     i40 = i6 & 255;
     i42 = i9 & 255;
     i38 = i12 & 255;
     HEAP32[i1 >> 2] = (HEAPU8[i14 + ((HEAP32[i30 >> 2] & i41) >>> i38) >> 0] | 0) >>> (i13 & 255) << i38 | (((Math_imul(HEAPU8[i5 + ((HEAP32[i21 >> 2] & i41) >>> i39) >> 0] | 0, i18) | 0) >>> 0) / 255 | 0) >>> (i4 & 255) << i39 | (((Math_imul(HEAPU8[i8 + ((HEAP32[i24 >> 2] & i41) >>> i40) >> 0] | 0, i17) | 0) >>> 0) / 255 | 0) >>> (i7 & 255) << i40 | (((Math_imul(HEAPU8[i11 + ((HEAP32[i27 >> 2] & i41) >>> i42) >> 0] | 0, i16) | 0) >>> 0) / 255 | 0) >>> (i10 & 255) << i42;
     i1 = i1 + 4 | 0;
     if ((i15 | 0) > 1) {
      i15 = i15 + -1 | 0;
      i36 = 34;
      continue;
     } else {
      i36 = 38;
      continue;
     }
    } else if ((i36 | 0) == 38) if (!i2) {
     i1 = 0;
     break L67;
    } else {
     i1 = i1 + (i33 << 2) | 0;
     continue L67;
    }
   }
   return i1 | 0;
  }
 default:
  {
   i2 = HEAP32[i9 + 8 >> 2] | 0;
   i3 = HEAP32[i9 + 12 >> 2] | 0;
   i1 = (HEAP32[i8 + 16 >> 2] | 0) / (i1 | 0) | 0;
   i25 = i1 - i2 | 0;
   if (!i3) {
    i42 = 0;
    return i42 | 0;
   }
   i1 = Math_imul(HEAP32[i9 + 4 >> 2] | 0, i1) | 0;
   i24 = (i2 + 3 | 0) / 4 | 0;
   i23 = i2 & 3;
   i22 = i4 & 255;
   i21 = i5 & 255;
   i13 = i7 & 255;
   i14 = i6 + 28 | 0;
   i15 = i6 + 32 | 0;
   i16 = i6 + 29 | 0;
   i17 = i6 + 33 | 0;
   i18 = i6 + 30 | 0;
   i19 = i6 + 34 | 0;
   i20 = i6 + 31 | 0;
   i12 = i6 + 35 | 0;
   i2 = i3;
   i1 = (HEAP32[i8 + 20 >> 2] | 0) + (i1 + (HEAP32[i9 >> 2] | 0) << 2) | 0;
   L10 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i23 | 0) {
    case 0:
     {
      i3 = HEAP8[i14 >> 0] | 0;
      i4 = HEAP8[i15 >> 0] | 0;
      i5 = HEAP8[i16 >> 0] | 0;
      i6 = HEAP8[i17 >> 0] | 0;
      i7 = HEAP8[i18 >> 0] | 0;
      i8 = HEAP8[i19 >> 0] | 0;
      i9 = HEAP8[i20 >> 0] | 0;
      i10 = HEAP8[i12 >> 0] | 0;
      i11 = i24;
      i36 = 46;
      break;
     }
    case 3:
     {
      i3 = HEAP8[i14 >> 0] | 0;
      i4 = HEAP8[i15 >> 0] | 0;
      i5 = HEAP8[i16 >> 0] | 0;
      i6 = HEAP8[i17 >> 0] | 0;
      i7 = HEAP8[i18 >> 0] | 0;
      i8 = HEAP8[i19 >> 0] | 0;
      i9 = HEAP8[i20 >> 0] | 0;
      i10 = HEAP8[i12 >> 0] | 0;
      i11 = i24;
      i36 = 47;
      break;
     }
    case 2:
     {
      i6 = HEAP8[i17 >> 0] | 0;
      i7 = HEAP8[i18 >> 0] | 0;
      i8 = HEAP8[i19 >> 0] | 0;
      i9 = HEAP8[i20 >> 0] | 0;
      i10 = HEAP8[i12 >> 0] | 0;
      i3 = HEAP8[i14 >> 0] | 0;
      i4 = HEAP8[i15 >> 0] | 0;
      i5 = HEAP8[i16 >> 0] | 0;
      i11 = i24;
      i36 = 48;
      break;
     }
    case 1:
     {
      i3 = HEAP8[i14 >> 0] | 0;
      i4 = HEAP8[i15 >> 0] | 0;
      i5 = HEAP8[i16 >> 0] | 0;
      i6 = HEAP8[i17 >> 0] | 0;
      i7 = HEAP8[i18 >> 0] | 0;
      i8 = HEAP8[i19 >> 0] | 0;
      i9 = HEAP8[i20 >> 0] | 0;
      i10 = HEAP8[i12 >> 0] | 0;
      i11 = i24;
      i36 = 49;
      break;
     }
    default:
     i36 = 50;
    }
    while (1) if ((i36 | 0) == 46) {
     HEAP32[i1 >> 2] = i21 >>> (i5 & 255) << (i6 & 255) | i22 >>> (i3 & 255) << (i4 & 255) | i13 >>> (i7 & 255) << (i8 & 255) | i35 >>> (i9 & 255) << (i10 & 255);
     i1 = i1 + 4 | 0;
     i36 = 47;
     continue;
    } else if ((i36 | 0) == 47) {
     HEAP32[i1 >> 2] = i21 >>> (i5 & 255) << (i6 & 255) | i22 >>> (i3 & 255) << (i4 & 255) | i13 >>> (i7 & 255) << (i8 & 255) | i35 >>> (i9 & 255) << (i10 & 255);
     i1 = i1 + 4 | 0;
     i36 = 48;
     continue;
    } else if ((i36 | 0) == 48) {
     HEAP32[i1 >> 2] = i21 >>> (i5 & 255) << (i6 & 255) | i22 >>> (i3 & 255) << (i4 & 255) | i13 >>> (i7 & 255) << (i8 & 255) | i35 >>> (i9 & 255) << (i10 & 255);
     i1 = i1 + 4 | 0;
     i36 = 49;
     continue;
    } else if ((i36 | 0) == 49) {
     HEAP32[i1 >> 2] = i21 >>> (i5 & 255) << (i6 & 255) | i22 >>> (i3 & 255) << (i4 & 255) | i13 >>> (i7 & 255) << (i8 & 255) | i35 >>> (i9 & 255) << (i10 & 255);
     i1 = i1 + 4 | 0;
     if ((i11 | 0) > 1) {
      i11 = i11 + -1 | 0;
      i36 = 46;
      continue;
     } else {
      i36 = 50;
      continue;
     }
    } else if ((i36 | 0) == 50) if (!i2) {
     i1 = 0;
     break L10;
    } else {
     i1 = i1 + (i25 << 2) | 0;
     continue L10;
    }
   }
   return i1 | 0;
  }
 }
 return 0;
}

function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_(i41, i42, i3, i4, i5, i43, i35, i2, i38, i39, i1) {
 i41 = i41 | 0;
 i42 = i42 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i43 = i43 | 0;
 i35 = i35 | 0;
 i2 = i2 | 0;
 i38 = i38 | 0;
 i39 = i39 | 0;
 i1 = i1 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i36 = 0, i37 = 0, i40 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0;
 i52 = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 i30 = i52 + 88 | 0;
 i9 = i52 + 96 | 0;
 i51 = i52 + 80 | 0;
 i34 = i52 + 72 | 0;
 i33 = i52 + 68 | 0;
 i36 = i52 + 500 | 0;
 i31 = i52 + 497 | 0;
 i37 = i52 + 496 | 0;
 i46 = i52 + 56 | 0;
 i50 = i52 + 44 | 0;
 i48 = i52 + 32 | 0;
 i47 = i52 + 20 | 0;
 i49 = i52 + 8 | 0;
 i32 = i52 + 4 | 0;
 i44 = i52;
 HEAP32[i30 >> 2] = i1;
 HEAP32[i51 >> 2] = i9;
 i45 = i51 + 4 | 0;
 HEAP32[i45 >> 2] = 347;
 HEAP32[i34 >> 2] = i9;
 HEAP32[i33 >> 2] = i9 + 400;
 HEAP32[i46 >> 2] = 0;
 HEAP32[i46 + 4 >> 2] = 0;
 HEAP32[i46 + 8 >> 2] = 0;
 HEAP32[i50 >> 2] = 0;
 HEAP32[i50 + 4 >> 2] = 0;
 HEAP32[i50 + 8 >> 2] = 0;
 HEAP32[i48 >> 2] = 0;
 HEAP32[i48 + 4 >> 2] = 0;
 HEAP32[i48 + 8 >> 2] = 0;
 HEAP32[i47 >> 2] = 0;
 HEAP32[i47 + 4 >> 2] = 0;
 HEAP32[i47 + 8 >> 2] = 0;
 HEAP32[i49 >> 2] = 0;
 HEAP32[i49 + 4 >> 2] = 0;
 HEAP32[i49 + 8 >> 2] = 0;
 __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri(i3, i4, i36, i31, i37, i46, i50, i48, i47, i32);
 HEAP32[i39 >> 2] = HEAP32[i38 >> 2];
 i23 = i2 + 8 | 0;
 i24 = i48 + 4 | 0;
 i25 = i47 + 4 | 0;
 i26 = i47 + 8 | 0;
 i27 = i47 + 1 | 0;
 i28 = i48 + 8 | 0;
 i29 = i48 + 1 | 0;
 i13 = (i5 & 512 | 0) != 0;
 i14 = i50 + 8 | 0;
 i15 = i50 + 1 | 0;
 i16 = i50 + 4 | 0;
 i17 = i49 + 4 | 0;
 i18 = i49 + 8 | 0;
 i19 = i49 + 1 | 0;
 i20 = i36 + 3 | 0;
 i21 = i46 + 4 | 0;
 i22 = 0;
 i8 = 0;
 L1 : while (1) {
  i1 = HEAP32[i41 >> 2] | 0;
  do if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
    HEAP32[i41 >> 2] = 0;
    i1 = 0;
    break;
   } else {
    i1 = HEAP32[i41 >> 2] | 0;
    break;
   }
  } else i1 = 0; while (0);
  i1 = (i1 | 0) == 0;
  i2 = HEAP32[i42 >> 2] | 0;
  do if (i2) {
   if ((HEAP32[i2 + 12 >> 2] | 0) != (HEAP32[i2 + 16 >> 2] | 0)) if (i1) break; else {
    i40 = 202;
    break L1;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) != -1) if (i1) break; else {
    i40 = 202;
    break L1;
   } else {
    HEAP32[i42 >> 2] = 0;
    i40 = 12;
    break;
   }
  } else i40 = 12; while (0);
  if ((i40 | 0) == 12) {
   i40 = 0;
   if (i1) {
    i40 = 202;
    break;
   } else i2 = 0;
  }
  L21 : do switch (HEAP8[i36 + i22 >> 0] | 0) {
  case 1:
   {
    if ((i22 | 0) != 3) {
     i1 = HEAP32[i41 >> 2] | 0;
     i3 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAPU8[i3 >> 0] | 0;
     if ((i1 & 255) << 24 >> 24 <= -1) {
      i40 = 26;
      break L1;
     }
     if (!(HEAP16[(HEAP32[i23 >> 2] | 0) + (i1 << 24 >> 24 << 1) >> 1] & 8192)) {
      i40 = 26;
      break L1;
     }
     i1 = HEAP32[i41 >> 2] | 0;
     i3 = i1 + 12 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if ((i4 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else {
      HEAP32[i3 >> 2] = i4 + 1;
      i1 = HEAPU8[i4 >> 0] | 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i49, i1 & 255);
     i1 = i2;
     i3 = i2;
     i40 = 28;
    }
    break;
   }
  case 0:
   {
    if ((i22 | 0) != 3) {
     i1 = i2;
     i3 = i2;
     i40 = 28;
    }
    break;
   }
  case 3:
   {
    i4 = HEAP8[i48 >> 0] | 0;
    i1 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i24 >> 2] | 0;
    i3 = HEAP8[i47 >> 0] | 0;
    i3 = (i3 & 1) == 0 ? (i3 & 255) >>> 1 : HEAP32[i25 >> 2] | 0;
    if ((i1 | 0) != (0 - i3 | 0)) {
     i5 = (i1 | 0) == 0;
     i6 = HEAP32[i41 >> 2] | 0;
     i7 = HEAP32[i6 + 12 >> 2] | 0;
     i1 = HEAP32[i6 + 16 >> 2] | 0;
     i2 = (i7 | 0) == (i1 | 0);
     if (i5 | (i3 | 0) == 0) {
      if (i2) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0; else i1 = HEAPU8[i7 >> 0] | 0;
      i1 = i1 & 255;
      if (i5) {
       if (i1 << 24 >> 24 != (HEAP8[((HEAP8[i47 >> 0] & 1) == 0 ? i27 : HEAP32[i26 >> 2] | 0) >> 0] | 0)) break L21;
       i1 = HEAP32[i41 >> 2] | 0;
       i2 = i1 + 12 | 0;
       i3 = HEAP32[i2 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i2 >> 2] = i3 + 1;
       HEAP8[i35 >> 0] = 1;
       i12 = HEAP8[i47 >> 0] | 0;
       i8 = ((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i25 >> 2] | 0) >>> 0 > 1 ? i47 : i8;
       break L21;
      }
      if (i1 << 24 >> 24 != (HEAP8[((HEAP8[i48 >> 0] & 1) == 0 ? i29 : HEAP32[i28 >> 2] | 0) >> 0] | 0)) {
       HEAP8[i35 >> 0] = 1;
       break L21;
      }
      i1 = HEAP32[i41 >> 2] | 0;
      i2 = i1 + 12 | 0;
      i3 = HEAP32[i2 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i2 >> 2] = i3 + 1;
      i12 = HEAP8[i48 >> 0] | 0;
      i8 = ((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i24 >> 2] | 0) >>> 0 > 1 ? i48 : i8;
      break L21;
     }
     if (i2) {
      i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0;
      i1 = HEAP32[i41 >> 2] | 0;
      i4 = HEAP8[i48 >> 0] | 0;
      i6 = i1;
      i3 = HEAP32[i1 + 12 >> 2] | 0;
      i1 = HEAP32[i1 + 16 >> 2] | 0;
     } else {
      i5 = HEAPU8[i7 >> 0] | 0;
      i3 = i7;
     }
     i2 = i6 + 12 | 0;
     i1 = (i3 | 0) == (i1 | 0);
     if ((i5 & 255) << 24 >> 24 == (HEAP8[((i4 & 1) == 0 ? i29 : HEAP32[i28 >> 2] | 0) >> 0] | 0)) {
      if (i1) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 40 >> 2] & 127](i6) | 0; else HEAP32[i2 >> 2] = i3 + 1;
      i12 = HEAP8[i48 >> 0] | 0;
      i8 = ((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i24 >> 2] | 0) >>> 0 > 1 ? i48 : i8;
      break L21;
     }
     if (i1) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0; else i1 = HEAPU8[i3 >> 0] | 0;
     if ((i1 & 255) << 24 >> 24 != (HEAP8[((HEAP8[i47 >> 0] & 1) == 0 ? i27 : HEAP32[i26 >> 2] | 0) >> 0] | 0)) {
      i40 = 82;
      break L1;
     }
     i1 = HEAP32[i41 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i2 >> 2] = i3 + 1;
     HEAP8[i35 >> 0] = 1;
     i12 = HEAP8[i47 >> 0] | 0;
     i8 = ((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i25 >> 2] | 0) >>> 0 > 1 ? i47 : i8;
    }
    break;
   }
  case 2:
   {
    if (!(i22 >>> 0 < 2 | (i8 | 0) != 0) ? !(i13 | (i22 | 0) == 2 & (HEAP8[i20 >> 0] | 0) != 0) : 0) {
     i8 = 0;
     break L21;
    }
    i11 = HEAP8[i50 >> 0] | 0;
    i1 = (i11 & 1) == 0;
    i12 = HEAP32[i14 >> 2] | 0;
    i4 = i1 ? i15 : i12;
    i10 = i4;
    L83 : do if ((i22 | 0) != 0 ? (HEAPU8[i36 + (i22 + -1) >> 0] | 0) < 2 : 0) {
     i7 = i1 ? (i11 & 255) >>> 1 : HEAP32[i16 >> 2] | 0;
     i5 = i4 + i7 | 0;
     i6 = HEAP32[i23 >> 2] | 0;
     L86 : do if (!i7) i3 = i10; else {
      i7 = i4;
      i3 = i10;
      do {
       i1 = HEAP8[i7 >> 0] | 0;
       if (i1 << 24 >> 24 <= -1) break L86;
       if (!(HEAP16[i6 + (i1 << 24 >> 24 << 1) >> 1] & 8192)) break L86;
       i7 = i7 + 1 | 0;
       i3 = i7;
      } while ((i7 | 0) != (i5 | 0));
     } while (0);
     i5 = i3 - i10 | 0;
     i6 = HEAP8[i49 >> 0] | 0;
     i1 = (i6 & 1) == 0;
     i6 = i1 ? (i6 & 255) >>> 1 : HEAP32[i17 >> 2] | 0;
     if (i6 >>> 0 >= i5 >>> 0) {
      i1 = i1 ? i19 : HEAP32[i18 >> 2] | 0;
      i7 = i1 + i6 | 0;
      if ((i3 | 0) != (i10 | 0)) {
       i1 = i1 + (i6 - i5) | 0;
       while (1) {
        if ((HEAP8[i1 >> 0] | 0) != (HEAP8[i4 >> 0] | 0)) {
         i3 = i10;
         break L83;
        }
        i1 = i1 + 1 | 0;
        if ((i1 | 0) == (i7 | 0)) break; else i4 = i4 + 1 | 0;
       }
      }
     } else i3 = i10;
    } else i3 = i10; while (0);
    i1 = (i11 & 1) == 0;
    i1 = (i1 ? i15 : i12) + (i1 ? (i11 & 255) >>> 1 : HEAP32[i16 >> 2] | 0) | 0;
    L98 : do if ((i3 | 0) != (i1 | 0)) {
     i5 = i2;
     i4 = i2;
     i1 = i3;
     while (1) {
      i2 = HEAP32[i41 >> 2] | 0;
      do if (i2) {
       if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1) {
        HEAP32[i41 >> 2] = 0;
        i2 = 0;
        break;
       } else {
        i2 = HEAP32[i41 >> 2] | 0;
        break;
       }
      } else i2 = 0; while (0);
      i3 = (i2 | 0) == 0;
      do if (i4) {
       if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i3) {
        i2 = i5;
        i6 = i4;
        break;
       } else break L98;
       if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i3 ^ (i5 | 0) == 0) {
        i2 = i5;
        i6 = i5;
        break;
       } else break L98; else {
        HEAP32[i42 >> 2] = 0;
        i2 = 0;
        i40 = 107;
        break;
       }
      } else {
       i2 = i5;
       i40 = 107;
      } while (0);
      if ((i40 | 0) == 107) {
       i40 = 0;
       if (i3) break L98; else i6 = 0;
      }
      i3 = HEAP32[i41 >> 2] | 0;
      i4 = HEAP32[i3 + 12 >> 2] | 0;
      if ((i4 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i3 = HEAPU8[i4 >> 0] | 0;
      if ((i3 & 255) << 24 >> 24 != (HEAP8[i1 >> 0] | 0)) break L98;
      i3 = HEAP32[i41 >> 2] | 0;
      i4 = i3 + 12 | 0;
      i5 = HEAP32[i4 >> 2] | 0;
      if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0; else HEAP32[i4 >> 2] = i5 + 1;
      i1 = i1 + 1 | 0;
      i3 = HEAP8[i50 >> 0] | 0;
      i12 = (i3 & 1) == 0;
      i3 = (i12 ? i15 : HEAP32[i14 >> 2] | 0) + (i12 ? (i3 & 255) >>> 1 : HEAP32[i16 >> 2] | 0) | 0;
      if ((i1 | 0) == (i3 | 0)) {
       i1 = i3;
       break;
      } else {
       i5 = i2;
       i4 = i6;
      }
     }
    } while (0);
    if (i13 ? (i12 = HEAP8[i50 >> 0] | 0, i11 = (i12 & 1) == 0, (i1 | 0) != ((i11 ? i15 : HEAP32[i14 >> 2] | 0) + (i11 ? (i12 & 255) >>> 1 : HEAP32[i16 >> 2] | 0) | 0)) : 0) {
     i40 = 119;
     break L1;
    }
    break;
   }
  case 4:
   {
    i7 = HEAP8[i37 >> 0] | 0;
    i5 = i2;
    i4 = i2;
    i1 = 0;
    L131 : while (1) {
     i2 = HEAP32[i41 >> 2] | 0;
     do if (i2) {
      if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1) {
       HEAP32[i41 >> 2] = 0;
       i2 = 0;
       break;
      } else {
       i2 = HEAP32[i41 >> 2] | 0;
       break;
      }
     } else i2 = 0; while (0);
     i3 = (i2 | 0) == 0;
     do if (i4) {
      if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i3) {
       i2 = i5;
       i6 = i4;
       break;
      } else {
       i2 = i5;
       break L131;
      }
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i3 ^ (i5 | 0) == 0) {
       i2 = i5;
       i6 = i5;
       break;
      } else {
       i2 = i5;
       break L131;
      } else {
       HEAP32[i42 >> 2] = 0;
       i2 = 0;
       i40 = 130;
       break;
      }
     } else {
      i2 = i5;
      i40 = 130;
     } while (0);
     if ((i40 | 0) == 130) {
      i40 = 0;
      if (i3) break; else i6 = 0;
     }
     i3 = HEAP32[i41 >> 2] | 0;
     i4 = HEAP32[i3 + 12 >> 2] | 0;
     if ((i4 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i3 = HEAPU8[i4 >> 0] | 0;
     i4 = i3 & 255;
     if (i4 << 24 >> 24 > -1 ? (HEAP16[(HEAP32[i23 >> 2] | 0) + (i3 << 24 >> 24 << 1) >> 1] & 2048) != 0 : 0) {
      i3 = HEAP32[i39 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i30 >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i38, i39, i30);
       i3 = HEAP32[i39 >> 2] | 0;
      }
      HEAP32[i39 >> 2] = i3 + 1;
      HEAP8[i3 >> 0] = i4;
      i1 = i1 + 1 | 0;
     } else {
      i12 = HEAP8[i46 >> 0] | 0;
      if (!(i4 << 24 >> 24 == i7 << 24 >> 24 & ((i1 | 0) != 0 ? (((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i21 >> 2] | 0) | 0) != 0 : 0))) break;
      if ((i9 | 0) == (HEAP32[i33 >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i51, i34, i33);
       i9 = HEAP32[i34 >> 2] | 0;
      }
      i12 = i9 + 4 | 0;
      HEAP32[i34 >> 2] = i12;
      HEAP32[i9 >> 2] = i1;
      i9 = i12;
      i1 = 0;
     }
     i3 = HEAP32[i41 >> 2] | 0;
     i4 = i3 + 12 | 0;
     i5 = HEAP32[i4 >> 2] | 0;
     if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
      i5 = i2;
      i4 = i6;
      continue;
     } else {
      HEAP32[i4 >> 2] = i5 + 1;
      i5 = i2;
      i4 = i6;
      continue;
     }
    }
    if ((i1 | 0) != 0 ? (HEAP32[i51 >> 2] | 0) != (i9 | 0) : 0) {
     if ((i9 | 0) == (HEAP32[i33 >> 2] | 0)) {
      __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i51, i34, i33);
      i9 = HEAP32[i34 >> 2] | 0;
     }
     i12 = i9 + 4 | 0;
     HEAP32[i34 >> 2] = i12;
     HEAP32[i9 >> 2] = i1;
     i9 = i12;
    }
    i6 = HEAP32[i32 >> 2] | 0;
    if ((i6 | 0) > 0) {
     i1 = HEAP32[i41 >> 2] | 0;
     do if (i1) {
      if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
       HEAP32[i41 >> 2] = 0;
       i1 = 0;
       break;
      } else {
       i1 = HEAP32[i41 >> 2] | 0;
       break;
      }
     } else i1 = 0; while (0);
     i1 = (i1 | 0) == 0;
     do if (i2) {
      if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1 : 0) {
       HEAP32[i42 >> 2] = 0;
       i40 = 162;
       break;
      }
      if (i1) i4 = i2; else {
       i40 = 167;
       break L1;
      }
     } else i40 = 162; while (0);
     if ((i40 | 0) == 162) {
      i40 = 0;
      if (i1) {
       i40 = 167;
       break L1;
      } else i4 = 0;
     }
     i1 = HEAP32[i41 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAPU8[i2 >> 0] | 0;
     if ((i1 & 255) << 24 >> 24 != (HEAP8[i31 >> 0] | 0)) {
      i40 = 167;
      break L1;
     }
     i1 = HEAP32[i41 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i2 >> 2] = i3 + 1;
     if ((i6 | 0) > 0) {
      i5 = i4;
      i3 = i4;
      while (1) {
       i1 = HEAP32[i41 >> 2] | 0;
       do if (i1) {
        if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
         HEAP32[i41 >> 2] = 0;
         i1 = 0;
         break;
        } else {
         i1 = HEAP32[i41 >> 2] | 0;
         break;
        }
       } else i1 = 0; while (0);
       i2 = (i1 | 0) == 0;
       do if (i3) {
        if ((HEAP32[i3 + 12 >> 2] | 0) != (HEAP32[i3 + 16 >> 2] | 0)) if (i2) {
         i1 = i5;
         i7 = i3;
         break;
        } else {
         i40 = 189;
         break L1;
        }
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) != -1) if (i2 ^ (i5 | 0) == 0) {
         i1 = i5;
         i7 = i5;
         break;
        } else {
         i40 = 189;
         break L1;
        } else {
         HEAP32[i42 >> 2] = 0;
         i1 = 0;
         i40 = 182;
         break;
        }
       } else {
        i1 = i5;
        i40 = 182;
       } while (0);
       if ((i40 | 0) == 182) {
        i40 = 0;
        if (i2) {
         i40 = 189;
         break L1;
        } else i7 = 0;
       }
       i2 = HEAP32[i41 >> 2] | 0;
       i3 = HEAP32[i2 + 12 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAPU8[i3 >> 0] | 0;
       if ((i2 & 255) << 24 >> 24 <= -1) {
        i40 = 189;
        break L1;
       }
       if (!(HEAP16[(HEAP32[i23 >> 2] | 0) + (i2 << 24 >> 24 << 1) >> 1] & 2048)) {
        i40 = 189;
        break L1;
       }
       if ((HEAP32[i39 >> 2] | 0) == (HEAP32[i30 >> 2] | 0)) __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i38, i39, i30);
       i2 = HEAP32[i41 >> 2] | 0;
       i3 = HEAP32[i2 + 12 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAPU8[i3 >> 0] | 0;
       i3 = HEAP32[i39 >> 2] | 0;
       HEAP32[i39 >> 2] = i3 + 1;
       HEAP8[i3 >> 0] = i2;
       i2 = i6;
       i6 = i6 + -1 | 0;
       HEAP32[i32 >> 2] = i6;
       i3 = HEAP32[i41 >> 2] | 0;
       i4 = i3 + 12 | 0;
       i5 = HEAP32[i4 >> 2] | 0;
       if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0; else HEAP32[i4 >> 2] = i5 + 1;
       if ((i2 | 0) <= 1) break; else {
        i5 = i1;
        i3 = i7;
       }
      }
     }
    }
    if ((HEAP32[i39 >> 2] | 0) == (HEAP32[i38 >> 2] | 0)) {
     i40 = 200;
     break L1;
    }
    break;
   }
  default:
   {}
  } while (0);
  L243 : do if ((i40 | 0) == 28) while (1) {
   i40 = 0;
   i2 = HEAP32[i41 >> 2] | 0;
   do if (i2) {
    if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1) {
     HEAP32[i41 >> 2] = 0;
     i2 = 0;
     break;
    } else {
     i2 = HEAP32[i41 >> 2] | 0;
     break;
    }
   } else i2 = 0; while (0);
   i2 = (i2 | 0) == 0;
   do if (i3) {
    if ((HEAP32[i3 + 12 >> 2] | 0) != (HEAP32[i3 + 16 >> 2] | 0)) if (i2) {
     i5 = i1;
     i4 = i3;
     break;
    } else break L243;
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) != -1) if (i2 ^ (i1 | 0) == 0) {
     i5 = i1;
     i4 = i1;
     break;
    } else break L243; else {
     HEAP32[i42 >> 2] = 0;
     i1 = 0;
     i40 = 38;
     break;
    }
   } else i40 = 38; while (0);
   if ((i40 | 0) == 38) {
    i40 = 0;
    if (i2) break L243; else {
     i5 = i1;
     i4 = 0;
    }
   }
   i1 = HEAP32[i41 >> 2] | 0;
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAPU8[i2 >> 0] | 0;
   if ((i1 & 255) << 24 >> 24 <= -1) break L243;
   if (!(HEAP16[(HEAP32[i23 >> 2] | 0) + (i1 << 24 >> 24 << 1) >> 1] & 8192)) break L243;
   i1 = HEAP32[i41 >> 2] | 0;
   i2 = i1 + 12 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else {
    HEAP32[i2 >> 2] = i3 + 1;
    i1 = HEAPU8[i3 >> 0] | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i49, i1 & 255);
   i1 = i5;
   i3 = i4;
   i40 = 28;
  } while (0);
  i22 = i22 + 1 | 0;
  if (i22 >>> 0 >= 4) {
   i40 = 202;
   break;
  }
 }
 L275 : do if ((i40 | 0) == 26) {
  HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 4;
  i2 = 0;
 } else if ((i40 | 0) == 82) {
  HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 4;
  i2 = 0;
 } else if ((i40 | 0) == 119) {
  HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 4;
  i2 = 0;
 } else if ((i40 | 0) == 167) {
  HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 4;
  i2 = 0;
 } else if ((i40 | 0) == 189) {
  HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 4;
  i2 = 0;
 } else if ((i40 | 0) == 200) {
  HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 4;
  i2 = 0;
 } else if ((i40 | 0) == 202) {
  L277 : do if (i8) {
   i5 = i8 + 1 | 0;
   i6 = i8 + 8 | 0;
   i7 = i8 + 4 | 0;
   i3 = 1;
   L279 : while (1) {
    i1 = HEAP8[i8 >> 0] | 0;
    if (!(i1 & 1)) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i7 >> 2] | 0;
    if (i3 >>> 0 >= i1 >>> 0) break L277;
    i1 = HEAP32[i41 >> 2] | 0;
    do if (i1) {
     if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
      HEAP32[i41 >> 2] = 0;
      i1 = 0;
      break;
     } else {
      i1 = HEAP32[i41 >> 2] | 0;
      break;
     }
    } else i1 = 0; while (0);
    i1 = (i1 | 0) == 0;
    i2 = HEAP32[i42 >> 2] | 0;
    do if (i2) {
     if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1 : 0) {
      HEAP32[i42 >> 2] = 0;
      i40 = 218;
      break;
     }
     if (!i1) break L279;
    } else i40 = 218; while (0);
    if ((i40 | 0) == 218 ? (i40 = 0, i1) : 0) break;
    i1 = HEAP32[i41 >> 2] | 0;
    i2 = HEAP32[i1 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAPU8[i2 >> 0] | 0;
    if (!(HEAP8[i8 >> 0] & 1)) i2 = i5; else i2 = HEAP32[i6 >> 2] | 0;
    if ((i1 & 255) << 24 >> 24 != (HEAP8[i2 + i3 >> 0] | 0)) break;
    i1 = i3 + 1 | 0;
    i2 = HEAP32[i41 >> 2] | 0;
    i3 = i2 + 12 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 127](i2) | 0;
     i3 = i1;
     continue;
    } else {
     HEAP32[i3 >> 2] = i4 + 1;
     i3 = i1;
     continue;
    }
   }
   HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 4;
   i2 = 0;
   break L275;
  } while (0);
  i1 = HEAP32[i51 >> 2] | 0;
  if ((i1 | 0) != (i9 | 0) ? (HEAP32[i44 >> 2] = 0, __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i46, i1, i9, i44), (HEAP32[i44 >> 2] | 0) != 0) : 0) {
   HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 4;
   i2 = 0;
  } else i2 = 1;
 } while (0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i49);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i47);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i48);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i50);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i46);
 i1 = HEAP32[i51 >> 2] | 0;
 HEAP32[i51 >> 2] = 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[i45 >> 2] & 511](i1);
 STACKTOP = i52;
 return i2 | 0;
}

function _BlitNto1SurfaceAlphaKey(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i1 = HEAP32[i4 + 24 >> 2] | 0;
 i3 = HEAP32[i4 + 28 >> 2] | 0;
 i26 = HEAP32[i4 + 16 >> 2] | 0;
 i27 = HEAP32[i4 + 36 >> 2] | 0;
 i28 = HEAP32[i4 + 48 >> 2] | 0;
 i2 = HEAP32[i4 + 40 >> 2] | 0;
 i22 = HEAPU8[i2 + 9 >> 0] | 0;
 i23 = HEAP32[i4 + 56 >> 2] | 0;
 i24 = HEAPU8[i4 + 63 >> 0] | 0;
 if (!i3) return;
 i25 = (i1 + 7 | 0) / 8 | 0;
 i11 = i1 & 7;
 i12 = (HEAP32[i4 + 44 >> 2] | 0) + 4 | 0;
 i13 = (i28 | 0) == 0;
 i14 = i2 + 12 | 0;
 i15 = i2 + 32 | 0;
 i16 = i2 + 28 | 0;
 i17 = i2 + 16 | 0;
 i18 = i2 + 33 | 0;
 i19 = i2 + 29 | 0;
 i20 = i2 + 20 | 0;
 i21 = i2 + 34 | 0;
 i10 = i2 + 30 | 0;
 i1 = HEAP32[i4 + 20 >> 2] | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 L4 : while (1) {
  i3 = i3 + -1 | 0;
  switch (i11 | 0) {
  case 0:
   {
    i8 = i25;
    i7 = i2;
    i4 = 4;
    break;
   }
  case 7:
   {
    i8 = i25;
    i7 = i2;
    i4 = 14;
    break;
   }
  case 6:
   {
    i8 = i25;
    i7 = i2;
    i4 = 24;
    break;
   }
  case 5:
   {
    i8 = i25;
    i7 = i2;
    i4 = 34;
    break;
   }
  case 4:
   {
    i9 = i25;
    i7 = i2;
    i4 = 44;
    break;
   }
  case 3:
   {
    i8 = i1;
    i9 = i25;
    i4 = 54;
    break;
   }
  case 2:
   {
    i7 = i1;
    i9 = i25;
    i4 = 64;
    break;
   }
  case 1:
   {
    i7 = i1;
    i9 = i25;
    i4 = 74;
    break;
   }
  default:
   i4 = 84;
  }
  while (1) if ((i4 | 0) == 4) {
   switch (i22 | 0) {
   case 1:
    {
     i6 = HEAPU8[i7 >> 0] | 0;
     i2 = i6;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i6) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i14 >> 2]) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i7 >> 1] | 0;
     i2 = i6;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i6) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i14 >> 2]) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i2 = 0;
     i4 = HEAPU8[i7 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i7 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i7 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i6 = HEAP32[i7 >> 2] | 0;
     i2 = i6;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i6) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i6) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i2 = 0;
     i4 = 0;
     i5 = 0;
     i6 = 0;
    }
   }
   do if ((i2 | 0) != (i23 | 0)) {
    i2 = HEAPU8[i1 >> 0] | 0;
    i30 = HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0;
    i9 = HEAPU8[i30 + (i2 << 2) >> 0] | 0;
    i29 = HEAPU8[i30 + (i2 << 2) + 1 >> 0] | 0;
    i2 = HEAPU8[i30 + (i2 << 2) + 2 >> 0] | 0;
    i2 = ((((Math_imul(i5 - i29 | 0, i24) | 0) >>> 0) / 255 | 0) + i29 | 0) >>> 3 & 28 | (((Math_imul(i6 - i9 | 0, i24) | 0) >>> 0) / 255 | 0) + i9 & 224 | ((((Math_imul(i4 - i2 | 0, i24) | 0) >>> 0) / 255 | 0) + i2 | 0) >>> 6 & 3;
    if (i13) {
     HEAP8[i1 >> 0] = i2;
     break;
    } else {
     HEAP8[i1 >> 0] = HEAP8[i28 + i2 >> 0] | 0;
     break;
    }
   } while (0);
   i1 = i1 + 1 | 0;
   i7 = i7 + i22 | 0;
   i4 = 14;
   continue;
  } else if ((i4 | 0) == 14) {
   switch (i22 | 0) {
   case 1:
    {
     i6 = HEAPU8[i7 >> 0] | 0;
     i2 = i6;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i6) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i14 >> 2]) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i7 >> 1] | 0;
     i2 = i6;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i6) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i14 >> 2]) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i2 = 0;
     i4 = HEAPU8[i7 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i7 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i7 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i6 = HEAP32[i7 >> 2] | 0;
     i2 = i6;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i6) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i6) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i2 = 0;
     i4 = 0;
     i5 = 0;
     i6 = 0;
    }
   }
   do if ((i2 | 0) != (i23 | 0)) {
    i2 = HEAPU8[i1 >> 0] | 0;
    i9 = HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0;
    i30 = HEAPU8[i9 + (i2 << 2) >> 0] | 0;
    i29 = HEAPU8[i9 + (i2 << 2) + 1 >> 0] | 0;
    i2 = HEAPU8[i9 + (i2 << 2) + 2 >> 0] | 0;
    i2 = ((((Math_imul(i5 - i29 | 0, i24) | 0) >>> 0) / 255 | 0) + i29 | 0) >>> 3 & 28 | (((Math_imul(i6 - i30 | 0, i24) | 0) >>> 0) / 255 | 0) + i30 & 224 | ((((Math_imul(i4 - i2 | 0, i24) | 0) >>> 0) / 255 | 0) + i2 | 0) >>> 6 & 3;
    if (i13) {
     HEAP8[i1 >> 0] = i2;
     break;
    } else {
     HEAP8[i1 >> 0] = HEAP8[i28 + i2 >> 0] | 0;
     break;
    }
   } while (0);
   i1 = i1 + 1 | 0;
   i7 = i7 + i22 | 0;
   i4 = 24;
   continue;
  } else if ((i4 | 0) == 24) {
   switch (i22 | 0) {
   case 1:
    {
     i6 = HEAPU8[i7 >> 0] | 0;
     i2 = i6;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i6) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i14 >> 2]) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i7 >> 1] | 0;
     i2 = i6;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i6) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i14 >> 2]) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i2 = 0;
     i4 = HEAPU8[i7 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i7 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i7 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i6 = HEAP32[i7 >> 2] | 0;
     i2 = i6;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i6) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i6) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i2 = 0;
     i4 = 0;
     i5 = 0;
     i6 = 0;
    }
   }
   do if ((i2 | 0) != (i23 | 0)) {
    i2 = HEAPU8[i1 >> 0] | 0;
    i9 = HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0;
    i30 = HEAPU8[i9 + (i2 << 2) >> 0] | 0;
    i29 = HEAPU8[i9 + (i2 << 2) + 1 >> 0] | 0;
    i2 = HEAPU8[i9 + (i2 << 2) + 2 >> 0] | 0;
    i2 = ((((Math_imul(i5 - i29 | 0, i24) | 0) >>> 0) / 255 | 0) + i29 | 0) >>> 3 & 28 | (((Math_imul(i6 - i30 | 0, i24) | 0) >>> 0) / 255 | 0) + i30 & 224 | ((((Math_imul(i4 - i2 | 0, i24) | 0) >>> 0) / 255 | 0) + i2 | 0) >>> 6 & 3;
    if (i13) {
     HEAP8[i1 >> 0] = i2;
     break;
    } else {
     HEAP8[i1 >> 0] = HEAP8[i28 + i2 >> 0] | 0;
     break;
    }
   } while (0);
   i1 = i1 + 1 | 0;
   i7 = i7 + i22 | 0;
   i4 = 34;
   continue;
  } else if ((i4 | 0) == 34) {
   switch (i22 | 0) {
   case 1:
    {
     i6 = HEAPU8[i7 >> 0] | 0;
     i2 = i6;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i6) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i14 >> 2]) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i7 >> 1] | 0;
     i2 = i6;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i6) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i14 >> 2]) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i2 = 0;
     i4 = HEAPU8[i7 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i7 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i7 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i6 = HEAP32[i7 >> 2] | 0;
     i2 = i6;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i6) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i6) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i2 = 0;
     i4 = 0;
     i5 = 0;
     i6 = 0;
    }
   }
   do if ((i2 | 0) != (i23 | 0)) {
    i2 = HEAPU8[i1 >> 0] | 0;
    i9 = HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0;
    i30 = HEAPU8[i9 + (i2 << 2) >> 0] | 0;
    i29 = HEAPU8[i9 + (i2 << 2) + 1 >> 0] | 0;
    i2 = HEAPU8[i9 + (i2 << 2) + 2 >> 0] | 0;
    i2 = ((((Math_imul(i5 - i29 | 0, i24) | 0) >>> 0) / 255 | 0) + i29 | 0) >>> 3 & 28 | (((Math_imul(i6 - i30 | 0, i24) | 0) >>> 0) / 255 | 0) + i30 & 224 | ((((Math_imul(i4 - i2 | 0, i24) | 0) >>> 0) / 255 | 0) + i2 | 0) >>> 6 & 3;
    if (i13) {
     HEAP8[i1 >> 0] = i2;
     break;
    } else {
     HEAP8[i1 >> 0] = HEAP8[i28 + i2 >> 0] | 0;
     break;
    }
   } while (0);
   i1 = i1 + 1 | 0;
   i9 = i8;
   i7 = i7 + i22 | 0;
   i4 = 44;
   continue;
  } else if ((i4 | 0) == 44) {
   switch (i22 | 0) {
   case 1:
    {
     i6 = HEAPU8[i7 >> 0] | 0;
     i2 = i6;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i6) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i14 >> 2]) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i7 >> 1] | 0;
     i2 = i6;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i6) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i14 >> 2]) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i2 = 0;
     i4 = HEAPU8[i7 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i7 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i7 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i6 = HEAP32[i7 >> 2] | 0;
     i2 = i6;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i6) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i6) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i2 = 0;
     i4 = 0;
     i5 = 0;
     i6 = 0;
    }
   }
   do if ((i2 | 0) != (i23 | 0)) {
    i2 = HEAPU8[i1 >> 0] | 0;
    i8 = HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0;
    i30 = HEAPU8[i8 + (i2 << 2) >> 0] | 0;
    i29 = HEAPU8[i8 + (i2 << 2) + 1 >> 0] | 0;
    i2 = HEAPU8[i8 + (i2 << 2) + 2 >> 0] | 0;
    i2 = ((((Math_imul(i5 - i29 | 0, i24) | 0) >>> 0) / 255 | 0) + i29 | 0) >>> 3 & 28 | (((Math_imul(i6 - i30 | 0, i24) | 0) >>> 0) / 255 | 0) + i30 & 224 | ((((Math_imul(i4 - i2 | 0, i24) | 0) >>> 0) / 255 | 0) + i2 | 0) >>> 6 & 3;
    if (i13) {
     HEAP8[i1 >> 0] = i2;
     break;
    } else {
     HEAP8[i1 >> 0] = HEAP8[i28 + i2 >> 0] | 0;
     break;
    }
   } while (0);
   i8 = i1 + 1 | 0;
   i2 = i7 + i22 | 0;
   i4 = 54;
   continue;
  } else if ((i4 | 0) == 54) {
   switch (i22 | 0) {
   case 1:
    {
     i6 = HEAPU8[i2 >> 0] | 0;
     i1 = i6;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i6) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i14 >> 2]) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i2 >> 1] | 0;
     i1 = i6;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i6) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i14 >> 2]) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i1 = 0;
     i4 = HEAPU8[i2 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i6 = HEAP32[i2 >> 2] | 0;
     i1 = i6;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i6) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i6) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i1 = 0;
     i4 = 0;
     i5 = 0;
     i6 = 0;
    }
   }
   do if ((i1 | 0) != (i23 | 0)) {
    i1 = HEAPU8[i8 >> 0] | 0;
    i7 = HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0;
    i30 = HEAPU8[i7 + (i1 << 2) >> 0] | 0;
    i29 = HEAPU8[i7 + (i1 << 2) + 1 >> 0] | 0;
    i1 = HEAPU8[i7 + (i1 << 2) + 2 >> 0] | 0;
    i1 = ((((Math_imul(i5 - i29 | 0, i24) | 0) >>> 0) / 255 | 0) + i29 | 0) >>> 3 & 28 | (((Math_imul(i6 - i30 | 0, i24) | 0) >>> 0) / 255 | 0) + i30 & 224 | ((((Math_imul(i4 - i1 | 0, i24) | 0) >>> 0) / 255 | 0) + i1 | 0) >>> 6 & 3;
    if (i13) {
     HEAP8[i8 >> 0] = i1;
     break;
    } else {
     HEAP8[i8 >> 0] = HEAP8[i28 + i1 >> 0] | 0;
     break;
    }
   } while (0);
   i7 = i8 + 1 | 0;
   i2 = i2 + i22 | 0;
   i4 = 64;
   continue;
  } else if ((i4 | 0) == 64) {
   switch (i22 | 0) {
   case 1:
    {
     i6 = HEAPU8[i2 >> 0] | 0;
     i1 = i6;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i6) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i14 >> 2]) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i2 >> 1] | 0;
     i1 = i6;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i6) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i14 >> 2]) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i1 = 0;
     i4 = HEAPU8[i2 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i6 = HEAP32[i2 >> 2] | 0;
     i1 = i6;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i6) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i6) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i1 = 0;
     i4 = 0;
     i5 = 0;
     i6 = 0;
    }
   }
   do if ((i1 | 0) != (i23 | 0)) {
    i1 = HEAPU8[i7 >> 0] | 0;
    i8 = HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0;
    i30 = HEAPU8[i8 + (i1 << 2) >> 0] | 0;
    i29 = HEAPU8[i8 + (i1 << 2) + 1 >> 0] | 0;
    i1 = HEAPU8[i8 + (i1 << 2) + 2 >> 0] | 0;
    i1 = ((((Math_imul(i5 - i29 | 0, i24) | 0) >>> 0) / 255 | 0) + i29 | 0) >>> 3 & 28 | (((Math_imul(i6 - i30 | 0, i24) | 0) >>> 0) / 255 | 0) + i30 & 224 | ((((Math_imul(i4 - i1 | 0, i24) | 0) >>> 0) / 255 | 0) + i1 | 0) >>> 6 & 3;
    if (i13) {
     HEAP8[i7 >> 0] = i1;
     break;
    } else {
     HEAP8[i7 >> 0] = HEAP8[i28 + i1 >> 0] | 0;
     break;
    }
   } while (0);
   i7 = i7 + 1 | 0;
   i2 = i2 + i22 | 0;
   i4 = 74;
   continue;
  } else if ((i4 | 0) == 74) {
   switch (i22 | 0) {
   case 1:
    {
     i6 = HEAPU8[i2 >> 0] | 0;
     i1 = i6;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i6) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i14 >> 2]) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i2 >> 1] | 0;
     i1 = i6;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i6) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i14 >> 2]) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i1 = 0;
     i4 = HEAPU8[i2 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i6 = HEAP32[i2 >> 2] | 0;
     i1 = i6;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i10 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i6) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i6) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i1 = 0;
     i4 = 0;
     i5 = 0;
     i6 = 0;
    }
   }
   do if ((i1 | 0) != (i23 | 0)) {
    i1 = HEAPU8[i7 >> 0] | 0;
    i8 = HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0;
    i30 = HEAPU8[i8 + (i1 << 2) >> 0] | 0;
    i29 = HEAPU8[i8 + (i1 << 2) + 1 >> 0] | 0;
    i1 = HEAPU8[i8 + (i1 << 2) + 2 >> 0] | 0;
    i1 = ((((Math_imul(i5 - i29 | 0, i24) | 0) >>> 0) / 255 | 0) + i29 | 0) >>> 3 & 28 | (((Math_imul(i6 - i30 | 0, i24) | 0) >>> 0) / 255 | 0) + i30 & 224 | ((((Math_imul(i4 - i1 | 0, i24) | 0) >>> 0) / 255 | 0) + i1 | 0) >>> 6 & 3;
    if (i13) {
     HEAP8[i7 >> 0] = i1;
     break;
    } else {
     HEAP8[i7 >> 0] = HEAP8[i28 + i1 >> 0] | 0;
     break;
    }
   } while (0);
   i1 = i7 + 1 | 0;
   i2 = i2 + i22 | 0;
   if ((i9 | 0) > 1) {
    i8 = i9 + -1 | 0;
    i7 = i2;
    i4 = 4;
    continue;
   } else {
    i4 = 84;
    continue;
   }
  } else if ((i4 | 0) == 84) if (!i3) break L4; else {
   i1 = i1 + i27 | 0;
   i2 = i2 + i26 | 0;
   continue L4;
  }
 }
 return;
}
function _GLES2_CreateRenderer(i73, i6) {
 i73 = i73 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0;
 i77 = STACKTOP;
 STACKTOP = STACKTOP + 496 | 0;
 i76 = i77 + 432 | 0;
 i39 = i77 + 424 | 0;
 i38 = i77 + 416 | 0;
 i37 = i77 + 408 | 0;
 i35 = i77 + 400 | 0;
 i34 = i77 + 392 | 0;
 i33 = i77 + 384 | 0;
 i32 = i77 + 376 | 0;
 i31 = i77 + 368 | 0;
 i29 = i77 + 360 | 0;
 i28 = i77 + 352 | 0;
 i27 = i77 + 344 | 0;
 i26 = i77 + 336 | 0;
 i25 = i77 + 328 | 0;
 i24 = i77 + 320 | 0;
 i23 = i77 + 312 | 0;
 i22 = i77 + 304 | 0;
 i21 = i77 + 296 | 0;
 i20 = i77 + 288 | 0;
 i18 = i77 + 280 | 0;
 i17 = i77 + 272 | 0;
 i16 = i77 + 264 | 0;
 i15 = i77 + 256 | 0;
 i14 = i77 + 248 | 0;
 i13 = i77 + 240 | 0;
 i12 = i77 + 232 | 0;
 i11 = i77 + 224 | 0;
 i10 = i77 + 216 | 0;
 i9 = i77 + 208 | 0;
 i60 = i77 + 200 | 0;
 i59 = i77 + 192 | 0;
 i58 = i77 + 184 | 0;
 i57 = i77 + 176 | 0;
 i56 = i77 + 168 | 0;
 i55 = i77 + 160 | 0;
 i54 = i77 + 152 | 0;
 i53 = i77 + 144 | 0;
 i52 = i77 + 136 | 0;
 i51 = i77 + 128 | 0;
 i49 = i77 + 120 | 0;
 i48 = i77 + 112 | 0;
 i47 = i77 + 104 | 0;
 i46 = i77 + 96 | 0;
 i45 = i77 + 88 | 0;
 i44 = i77 + 80 | 0;
 i43 = i77 + 72 | 0;
 i42 = i77 + 64 | 0;
 i41 = i77 + 56 | 0;
 i40 = i77 + 48 | 0;
 i30 = i77 + 40 | 0;
 i19 = i77 + 32 | 0;
 i8 = i77 + 24 | 0;
 i50 = i77 + 16 | 0;
 i36 = i77 + 8 | 0;
 i7 = i77;
 i71 = i77 + 476 | 0;
 i68 = i77 + 480 | 0;
 i74 = i77 + 472 | 0;
 i62 = i77 + 468 | 0;
 i72 = i77 + 464 | 0;
 i69 = i77 + 460 | 0;
 i70 = i77 + 456 | 0;
 _SDL_GL_GetAttribute(21, i72) | 0;
 _SDL_GL_GetAttribute(17, i69) | 0;
 _SDL_GL_GetAttribute(18, i70) | 0;
 i64 = _SDL_GetWindowFlags(i73) | 0;
 if ((i64 & 2 | 0) == 0 | (HEAP32[i72 >> 2] | 0) != 4 | (HEAP32[i69 >> 2] | 0) != 2 | (HEAP32[i70 >> 2] | 0) != 0) {
  _SDL_GL_SetAttribute(21, 4) | 0;
  _SDL_GL_SetAttribute(17, 2) | 0;
  _SDL_GL_SetAttribute(18, 0) | 0;
  if ((_SDL_RecreateWindow(i73, i64 | 2) | 0) >= 0) {
   i67 = 1;
   i61 = 3;
  }
 } else {
  i67 = 0;
  i61 = 3;
 }
 if ((i61 | 0) == 3) {
  i1 = _SDL_calloc(1, 320) | 0;
  do if (!i1) _SDL_Error(0) | 0; else {
   i65 = _SDL_calloc(1, 308) | 0;
   if (!i65) {
    _GLES2_DestroyRenderer(i1);
    _SDL_Error(0) | 0;
    break;
   }
   i2 = i1 + 104 | 0;
   i3 = 3280;
   i4 = i2 + 84 | 0;
   do {
    HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
    i2 = i2 + 4 | 0;
    i3 = i3 + 4 | 0;
   } while ((i2 | 0) < (i4 | 0));
   i2 = i1 + 108 | 0;
   HEAP32[i2 >> 2] = 10;
   i66 = i1 + 316 | 0;
   HEAP32[i66 >> 2] = i65;
   i63 = i1 + 188 | 0;
   HEAP32[i63 >> 2] = i73;
   i3 = _SDL_GL_CreateContext(i73) | 0;
   HEAP32[i65 >> 2] = i3;
   if (!i3) {
    _GLES2_DestroyRenderer(i1);
    break;
   }
   if ((_SDL_GL_MakeCurrent(i73, i3) | 0) < 0) {
    _GLES2_DestroyRenderer(i1);
    break;
   }
   i4 = _SDL_GL_GetProcAddress(55615) | 0;
   HEAP32[i65 + 16 >> 2] = i4;
   do if (!i4) {
    i5 = _SDL_GetError() | 0;
    HEAP32[i7 >> 2] = 55615;
    HEAP32[i7 + 4 >> 2] = i5;
    i5 = _SDL_SetError(46290, i7) | 0;
    i61 = 119;
   } else {
    i7 = _SDL_GL_GetProcAddress(53389) | 0;
    HEAP32[i65 + 20 >> 2] = i7;
    if (!i7) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i36 >> 2] = 53389;
     HEAP32[i36 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i36) | 0;
     i61 = 119;
     break;
    }
    i36 = _SDL_GL_GetProcAddress(54687) | 0;
    HEAP32[i65 + 24 >> 2] = i36;
    if (!i36) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i50 >> 2] = 54687;
     HEAP32[i50 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i50) | 0;
     i61 = 119;
     break;
    }
    i50 = _SDL_GL_GetProcAddress(53622) | 0;
    HEAP32[i65 + 28 >> 2] = i50;
    if (!i50) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i8 >> 2] = 53622;
     HEAP32[i8 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i8) | 0;
     i61 = 119;
     break;
    }
    i50 = _SDL_GL_GetProcAddress(55961) | 0;
    HEAP32[i65 + 32 >> 2] = i50;
    if (!i50) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i19 >> 2] = 55961;
     HEAP32[i19 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i19) | 0;
     i61 = 119;
     break;
    }
    i50 = _SDL_GL_GetProcAddress(55512) | 0;
    HEAP32[i65 + 36 >> 2] = i50;
    if (!i50) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i30 >> 2] = 55512;
     HEAP32[i30 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i30) | 0;
     i61 = 119;
     break;
    }
    i50 = _SDL_GL_GetProcAddress(55887) | 0;
    HEAP32[i65 + 40 >> 2] = i50;
    if (!i50) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i40 >> 2] = 55887;
     HEAP32[i40 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i40) | 0;
     i61 = 119;
     break;
    }
    i50 = _SDL_GL_GetProcAddress(54505) | 0;
    HEAP32[i65 + 44 >> 2] = i50;
    if (!i50) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i41 >> 2] = 54505;
     HEAP32[i41 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i41) | 0;
     i61 = 119;
     break;
    }
    i50 = _SDL_GL_GetProcAddress(53290) | 0;
    HEAP32[i65 + 48 >> 2] = i50;
    if (!i50) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i42 >> 2] = 53290;
     HEAP32[i42 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i42) | 0;
     i61 = 119;
     break;
    }
    i50 = _SDL_GL_GetProcAddress(53359) | 0;
    HEAP32[i65 + 52 >> 2] = i50;
    if (!i50) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i43 >> 2] = 53359;
     HEAP32[i43 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i43) | 0;
     i61 = 119;
     break;
    }
    i50 = _SDL_GL_GetProcAddress(54580) | 0;
    HEAP32[i65 + 56 >> 2] = i50;
    if (!i50) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i44 >> 2] = 54580;
     HEAP32[i44 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i44) | 0;
     i61 = 119;
     break;
    }
    i50 = _SDL_GL_GetProcAddress(54436) | 0;
    HEAP32[i65 + 60 >> 2] = i50;
    if (!i50) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i45 >> 2] = 54436;
     HEAP32[i45 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i45) | 0;
     i61 = 119;
     break;
    }
    i50 = _SDL_GL_GetProcAddress(53514) | 0;
    HEAP32[i65 + 64 >> 2] = i50;
    if (!i50) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i46 >> 2] = 53514;
     HEAP32[i46 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i46) | 0;
     i61 = 119;
     break;
    }
    i50 = _SDL_GL_GetProcAddress(55479) | 0;
    HEAP32[i65 + 68 >> 2] = i50;
    if (!i50) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i47 >> 2] = 55479;
     HEAP32[i47 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i47) | 0;
     i61 = 119;
     break;
    }
    i50 = _SDL_GL_GetProcAddress(55241) | 0;
    HEAP32[i65 + 72 >> 2] = i50;
    if (!i50) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i48 >> 2] = 55241;
     HEAP32[i48 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i48) | 0;
     i61 = 119;
     break;
    }
    i50 = _SDL_GL_GetProcAddress(55268) | 0;
    HEAP32[i65 + 76 >> 2] = i50;
    if (!i50) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i49 >> 2] = 55268;
     HEAP32[i49 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i49) | 0;
     i61 = 119;
     break;
    }
    i50 = _SDL_GL_GetProcAddress(55470) | 0;
    HEAP32[i65 + 80 >> 2] = i50;
    if (!i50) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i51 >> 2] = 55470;
     HEAP32[i51 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i51) | 0;
     i61 = 119;
     break;
    }
    i51 = _SDL_GL_GetProcAddress(55215) | 0;
    HEAP32[i65 + 84 >> 2] = i51;
    if (!i51) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i52 >> 2] = 55215;
     HEAP32[i52 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i52) | 0;
     i61 = 119;
     break;
    }
    i52 = _SDL_GL_GetProcAddress(55414) | 0;
    HEAP32[i65 + 88 >> 2] = i52;
    if (!i52) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i53 >> 2] = 55414;
     HEAP32[i53 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i53) | 0;
     i61 = 119;
     break;
    }
    i53 = _SDL_GL_GetProcAddress(54726) | 0;
    HEAP32[i65 + 92 >> 2] = i53;
    if (!i53) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i54 >> 2] = 54726;
     HEAP32[i54 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i54) | 0;
     i61 = 119;
     break;
    }
    i54 = _SDL_GL_GetProcAddress(53500) | 0;
    HEAP32[i65 + 96 >> 2] = i54;
    if (!i54) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i55 >> 2] = 53500;
     HEAP32[i55 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i55) | 0;
     i61 = 119;
     break;
    }
    i55 = _SDL_GL_GetProcAddress(53486) | 0;
    HEAP32[i65 + 100 >> 2] = i55;
    if (!i55) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i56 >> 2] = 53486;
     HEAP32[i56 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i56) | 0;
     i61 = 119;
     break;
    }
    i56 = _SDL_GL_GetProcAddress(53448) | 0;
    HEAP32[i65 + 104 >> 2] = i56;
    if (!i56) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i57 >> 2] = 53448;
     HEAP32[i57 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i57) | 0;
     i61 = 119;
     break;
    }
    i57 = _SDL_GL_GetProcAddress(55335) | 0;
    HEAP32[i65 + 108 >> 2] = i57;
    if (!i57) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i58 >> 2] = 55335;
     HEAP32[i58 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i58) | 0;
     i61 = 119;
     break;
    }
    i58 = _SDL_GL_GetProcAddress(53460) | 0;
    HEAP32[i65 + 112 >> 2] = i58;
    if (!i58) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i59 >> 2] = 53460;
     HEAP32[i59 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i59) | 0;
     i61 = 119;
     break;
    }
    i59 = _SDL_GL_GetProcAddress(54554) | 0;
    HEAP32[i65 + 116 >> 2] = i59;
    if (!i59) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i60 >> 2] = 54554;
     HEAP32[i60 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i60) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(54521) | 0;
    HEAP32[i65 + 120 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i9 >> 2] = 54521;
     HEAP32[i9 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i9) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(54540) | 0;
    HEAP32[i65 + 124 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i10 >> 2] = 54540;
     HEAP32[i10 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i10) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(53950) | 0;
    HEAP32[i65 + 128 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i11 >> 2] = 53950;
     HEAP32[i11 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i11) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(54623) | 0;
    HEAP32[i65 + 132 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i12 >> 2] = 54623;
     HEAP32[i12 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i12) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(53434) | 0;
    HEAP32[i65 + 136 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i13 >> 2] = 53434;
     HEAP32[i13 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i13) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(53609) | 0;
    HEAP32[i65 + 140 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i14 >> 2] = 53609;
     HEAP32[i14 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i14) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(55900) | 0;
    HEAP32[i65 + 144 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i15 >> 2] = 55900;
     HEAP32[i15 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i15) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(55296) | 0;
    HEAP32[i65 + 148 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i16 >> 2] = 55296;
     HEAP32[i16 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i16) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(54472) | 0;
    HEAP32[i65 + 152 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i17 >> 2] = 54472;
     HEAP32[i17 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i17) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(53580) | 0;
    HEAP32[i65 + 156 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i18 >> 2] = 53580;
     HEAP32[i18 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i18) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(55801) | 0;
    HEAP32[i65 + 160 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i20 >> 2] = 55801;
     HEAP32[i20 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i20) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(53593) | 0;
    HEAP32[i65 + 164 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i21 >> 2] = 53593;
     HEAP32[i21 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i21) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(54104) | 0;
    HEAP32[i65 + 168 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i22 >> 2] = 54104;
     HEAP32[i22 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i22) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(54092) | 0;
    HEAP32[i65 + 172 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i23 >> 2] = 54092;
     HEAP32[i23 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i23) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(54294) | 0;
    HEAP32[i65 + 176 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i24 >> 2] = 54294;
     HEAP32[i24 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i24) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(53325) | 0;
    HEAP32[i65 + 180 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i25 >> 2] = 53325;
     HEAP32[i25 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i25) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(55193) | 0;
    HEAP32[i65 + 184 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i26 >> 2] = 55193;
     HEAP32[i26 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i26) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(55876) | 0;
    HEAP32[i65 + 188 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i27 >> 2] = 55876;
     HEAP32[i27 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i27) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(54708) | 0;
    HEAP32[i65 + 192 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i28 >> 2] = 54708;
     HEAP32[i28 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i28) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(54791) | 0;
    HEAP32[i65 + 196 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i29 >> 2] = 54791;
     HEAP32[i29 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i29) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(55573) | 0;
    HEAP32[i65 + 200 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i31 >> 2] = 55573;
     HEAP32[i31 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i31) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(54744) | 0;
    HEAP32[i65 + 204 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i32 >> 2] = 54744;
     HEAP32[i32 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i32) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(54398) | 0;
    HEAP32[i65 + 208 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i33 >> 2] = 54398;
     HEAP32[i33 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i33) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(54637) | 0;
    HEAP32[i65 + 212 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i34 >> 2] = 54637;
     HEAP32[i34 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i34) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(53722) | 0;
    HEAP32[i65 + 216 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i35 >> 2] = 53722;
     HEAP32[i35 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i35) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(54313) | 0;
    HEAP32[i65 + 220 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i37 >> 2] = 54313;
     HEAP32[i37 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i37) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(53774) | 0;
    HEAP32[i65 + 224 >> 2] = i60;
    if (!i60) {
     i5 = _SDL_GetError() | 0;
     HEAP32[i38 >> 2] = 53774;
     HEAP32[i38 + 4 >> 2] = i5;
     i5 = _SDL_SetError(46290, i38) | 0;
     i61 = 119;
     break;
    }
    i60 = _SDL_GL_GetProcAddress(53787) | 0;
    HEAP32[i65 + 228 >> 2] = i60;
    if (i60) break;
    i5 = _SDL_GetError() | 0;
    HEAP32[i39 >> 2] = 53787;
    HEAP32[i39 + 4 >> 2] = i5;
    i5 = _SDL_SetError(46290, i39) | 0;
    i61 = 119;
   } while (0);
   if ((i61 | 0) == 119 ? (i5 | 0) < 0 : 0) {
    _GLES2_DestroyRenderer(i1);
    break;
   }
   if (!(i6 & 4)) _SDL_GL_SetSwapInterval(0) | 0; else _SDL_GL_SetSwapInterval(1) | 0;
   if ((_SDL_GL_GetSwapInterval() | 0) > 0) HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 4;
   if ((_SDL_GL_GetAttribute(20, i62) | 0) == 0 ? (HEAP32[i62 >> 2] & 1 | 0) != 0 : 0) HEAP32[i65 + 4 >> 2] = 1;
   HEAP32[i62 >> 2] = 0;
   i4 = i65 + 112 | 0;
   FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 127](3379, i62);
   HEAP32[i1 + 180 >> 2] = HEAP32[i62 >> 2];
   HEAP32[i62 >> 2] = 0;
   FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 127](3379, i62);
   HEAP32[i1 + 184 >> 2] = HEAP32[i62 >> 2];
   FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 127](36345, i71);
   FUNCTION_TABLE_vii[HEAP32[i65 + 100 >> 2] & 127](36346, i68);
   i2 = HEAP32[i71 >> 2] | 0;
   if (HEAP8[i68 >> 0] | 0) {
    i2 = i2 + 1 | 0;
    HEAP32[i71 >> 2] = i2;
   }
   i2 = _SDL_calloc(i2, 4) | 0;
   i3 = i65 + 244 | 0;
   HEAP32[i3 >> 2] = i2;
   if (!i2) {
    _GLES2_DestroyRenderer(i1);
    _SDL_Error(0) | 0;
    break;
   }
   HEAP32[i65 + 240 >> 2] = HEAP32[i71 >> 2];
   FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 127](36344, i2);
   if (HEAP8[i68 >> 0] | 0) HEAP32[(HEAP32[i3 >> 2] | 0) + ((HEAP32[i71 >> 2] | 0) + -1 << 2) >> 2] = -1;
   HEAP32[i65 + 232 >> 2] = 0;
   FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 127](36006, i74);
   HEAP32[i65 + 236 >> 2] = HEAP32[i74 >> 2];
   HEAP32[i1 + 4 >> 2] = 45;
   HEAP32[i1 + 12 >> 2] = 33;
   HEAP32[i1 + 28 >> 2] = 33;
   HEAP32[i1 + 32 >> 2] = 1;
   HEAP32[i1 + 36 >> 2] = 34;
   HEAP32[i1 + 40 >> 2] = 46;
   HEAP32[i1 + 44 >> 2] = 34;
   HEAP32[i1 + 48 >> 2] = 86;
   HEAP32[i1 + 52 >> 2] = 87;
   HEAP32[i1 + 56 >> 2] = 88;
   HEAP32[i1 + 60 >> 2] = 45;
   HEAP32[i1 + 64 >> 2] = 46;
   HEAP32[i1 + 68 >> 2] = 47;
   HEAP32[i1 + 72 >> 2] = 19;
   HEAP32[i1 + 76 >> 2] = 2;
   HEAP32[i1 + 80 >> 2] = 35;
   HEAP32[i1 + 84 >> 2] = 303;
   HEAP32[i1 + 88 >> 2] = 47;
   HEAP32[i1 + 92 >> 2] = 304;
   HEAP32[i1 + 96 >> 2] = 20;
   HEAP32[i1 + 100 >> 2] = 35;
   i74 = i1 + 112 | 0;
   i3 = HEAP32[i74 >> 2] | 0;
   HEAP32[i74 >> 2] = i3 + 1;
   i2 = i1 + 116 | 0;
   HEAP32[i2 + (i3 << 2) >> 2] = 842094169;
   i3 = HEAP32[i74 >> 2] | 0;
   HEAP32[i74 >> 2] = i3 + 1;
   HEAP32[i2 + (i3 << 2) >> 2] = 1448433993;
   i3 = HEAP32[i74 >> 2] | 0;
   HEAP32[i74 >> 2] = i3 + 1;
   HEAP32[i2 + (i3 << 2) >> 2] = 842094158;
   i3 = HEAP32[i74 >> 2] | 0;
   HEAP32[i74 >> 2] = i3 + 1;
   HEAP32[i2 + (i3 << 2) >> 2] = 825382478;
   i3 = HEAP32[i66 >> 2] | 0;
   i2 = HEAP32[i3 >> 2] | 0;
   if ((HEAP32[3491] | 0) != (i2 | 0)) {
    HEAP32[i3 + 268 >> 2] = 0;
    if ((_SDL_GL_MakeCurrent(HEAP32[i63 >> 2] | 0, i2) | 0) >= 0 ? (HEAP32[3491] = HEAP32[i3 >> 2], _GLES2_UpdateViewport(i1) | 0, i75 = HEAP32[i66 >> 2] | 0, (HEAP32[i75 + 4 >> 2] | 0) != 0) : 0) {
     i2 = i75 + 108 | 0;
     do {} while ((FUNCTION_TABLE_i[HEAP32[i2 >> 2] & 7]() | 0) != 0);
    }
   } else _GLES2_UpdateViewport(i1) | 0;
   HEAP32[i3 + 8 >> 2] = -1;
   HEAP32[i3 + 12 >> 2] = 0;
   FUNCTION_TABLE_vi[HEAP32[i3 + 16 >> 2] & 511](33984);
   i2 = i3 + 136 | 0;
   FUNCTION_TABLE_vii[HEAP32[i2 >> 2] & 127](3333, 1);
   FUNCTION_TABLE_vii[HEAP32[i2 >> 2] & 127](3317, 1);
   FUNCTION_TABLE_vdddd[HEAP32[i3 + 40 >> 2] & 3](+(HEAPU8[i3 + 272 >> 0] | 0) * .003921568859368563, +(HEAPU8[i3 + 273 >> 0] | 0) * .003921568859368563, +(HEAPU8[i3 + 274 >> 0] | 0) * .003921568859368563, +(HEAPU8[i3 + 275 >> 0] | 0) * .003921568859368563);
   FUNCTION_TABLE_vi[HEAP32[i3 + 84 >> 2] & 511](0);
   FUNCTION_TABLE_vi[HEAP32[i3 + 72 >> 2] & 511](1);
   i2 = HEAP32[i66 >> 2] | 0;
   if (!(HEAP32[i2 + 4 >> 2] | 0)) {
    i76 = i1;
    STACKTOP = i77;
    return i76 | 0;
   }
   i5 = i2 + 108 | 0;
   i2 = FUNCTION_TABLE_i[HEAP32[i5 >> 2] & 7]() | 0;
   if (!i2) {
    i76 = i1;
    STACKTOP = i77;
    return i76 | 0;
   } else i3 = 62969;
   while (1) {
    if ((i3 | 0) != 0 ? (HEAP8[i3 >> 0] | 0) != 0 : 0) i4 = i3; else i4 = 46327;
    switch (i2 | 0) {
    case 1280:
     {
      i3 = 46398;
      break;
     }
    case 1281:
     {
      i3 = 46381;
      break;
     }
    case 1282:
     {
      i3 = 46360;
      break;
     }
    case 1285:
     {
      i3 = 46343;
      break;
     }
    default:
     i3 = 46335;
    }
    HEAP32[i76 >> 2] = i4;
    HEAP32[i76 + 4 >> 2] = 46440;
    HEAP32[i76 + 8 >> 2] = 1930;
    HEAP32[i76 + 12 >> 2] = 46533;
    HEAP32[i76 + 16 >> 2] = i3;
    HEAP32[i76 + 20 >> 2] = i2;
    _SDL_SetError(46414, i76) | 0;
    i2 = FUNCTION_TABLE_i[HEAP32[i5 >> 2] & 7]() | 0;
    if (!i2) break; else i3 = i4;
   }
   STACKTOP = i77;
   return i1 | 0;
  } while (0);
  if (!i67) {
   i76 = 0;
   STACKTOP = i77;
   return i76 | 0;
  }
 }
 _SDL_GL_SetAttribute(21, HEAP32[i72 >> 2] | 0) | 0;
 _SDL_GL_SetAttribute(17, HEAP32[i69 >> 2] | 0) | 0;
 _SDL_GL_SetAttribute(18, HEAP32[i70 >> 2] | 0) | 0;
 _SDL_RecreateWindow(i73, i64) | 0;
 i76 = 0;
 STACKTOP = i77;
 return i76 | 0;
}

function _BlitNto2101010(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i1 = HEAP32[i4 + 24 >> 2] | 0;
 i3 = HEAP32[i4 + 28 >> 2] | 0;
 i24 = HEAP32[i4 + 16 >> 2] | 0;
 i25 = HEAP32[i4 + 36 >> 2] | 0;
 i2 = HEAP32[i4 + 40 >> 2] | 0;
 i22 = HEAPU8[i2 + 9 >> 0] | 0;
 if (!i3) return;
 i23 = (i1 + 7 | 0) / 8 | 0;
 i10 = i1 & 7;
 i11 = i2 + 12 | 0;
 i12 = i2 + 32 | 0;
 i13 = i2 + 28 | 0;
 i14 = i2 + 16 | 0;
 i15 = i2 + 33 | 0;
 i16 = i2 + 29 | 0;
 i17 = i2 + 20 | 0;
 i18 = i2 + 34 | 0;
 i19 = i2 + 30 | 0;
 i20 = i2 + 24 | 0;
 i21 = i2 + 35 | 0;
 i9 = i2 + 31 | 0;
 i1 = HEAP32[i4 + 20 >> 2] | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 L4 : while (1) {
  i3 = i3 + -1 | 0;
  switch (i10 | 0) {
  case 0:
   {
    i8 = i23;
    i4 = 4;
    break;
   }
  case 7:
   {
    i8 = i23;
    i4 = 10;
    break;
   }
  case 6:
   {
    i8 = i23;
    i4 = 16;
    break;
   }
  case 5:
   {
    i8 = i23;
    i4 = 22;
    break;
   }
  case 4:
   {
    i8 = i23;
    i4 = 28;
    break;
   }
  case 3:
   {
    i8 = i23;
    i4 = 34;
    break;
   }
  case 2:
   {
    i8 = i23;
    i4 = 40;
    break;
   }
  case 1:
   {
    i8 = i23;
    i4 = 46;
    break;
   }
  default:
   i4 = 52;
  }
  while (1) if ((i4 | 0) == 4) {
   switch (i22 | 0) {
   case 1:
    {
     i7 = HEAPU8[i2 >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i7 = HEAPU16[i2 >> 1] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i4 = 255;
     i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = HEAPU8[i2 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i7 = HEAP32[i2 >> 2] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i4 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
    }
   }
   HEAP32[i1 >> 2] = ((i6 | 0) == 0 ? 0 : i6 << 12 | 3072) | ((i7 | 0) == 0 ? 0 : i7 << 22 | 3145728) | ((i4 >>> 0) / 85 | 0) << 30 | ((i5 | 0) == 0 ? 0 : i5 << 2 | 3);
   i1 = i1 + 4 | 0;
   i2 = i2 + i22 | 0;
   i4 = 10;
   continue;
  } else if ((i4 | 0) == 10) {
   switch (i22 | 0) {
   case 1:
    {
     i7 = HEAPU8[i2 >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i7 = HEAPU16[i2 >> 1] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i4 = 255;
     i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = HEAPU8[i2 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i7 = HEAP32[i2 >> 2] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i4 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
    }
   }
   HEAP32[i1 >> 2] = ((i6 | 0) == 0 ? 0 : i6 << 12 | 3072) | ((i7 | 0) == 0 ? 0 : i7 << 22 | 3145728) | ((i4 >>> 0) / 85 | 0) << 30 | ((i5 | 0) == 0 ? 0 : i5 << 2 | 3);
   i1 = i1 + 4 | 0;
   i2 = i2 + i22 | 0;
   i4 = 16;
   continue;
  } else if ((i4 | 0) == 16) {
   switch (i22 | 0) {
   case 1:
    {
     i7 = HEAPU8[i2 >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i7 = HEAPU16[i2 >> 1] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i4 = 255;
     i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = HEAPU8[i2 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i7 = HEAP32[i2 >> 2] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i4 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
    }
   }
   HEAP32[i1 >> 2] = ((i6 | 0) == 0 ? 0 : i6 << 12 | 3072) | ((i7 | 0) == 0 ? 0 : i7 << 22 | 3145728) | ((i4 >>> 0) / 85 | 0) << 30 | ((i5 | 0) == 0 ? 0 : i5 << 2 | 3);
   i1 = i1 + 4 | 0;
   i2 = i2 + i22 | 0;
   i4 = 22;
   continue;
  } else if ((i4 | 0) == 22) {
   switch (i22 | 0) {
   case 1:
    {
     i7 = HEAPU8[i2 >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i7 = HEAPU16[i2 >> 1] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i4 = 255;
     i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = HEAPU8[i2 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i7 = HEAP32[i2 >> 2] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i4 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
    }
   }
   HEAP32[i1 >> 2] = ((i6 | 0) == 0 ? 0 : i6 << 12 | 3072) | ((i7 | 0) == 0 ? 0 : i7 << 22 | 3145728) | ((i4 >>> 0) / 85 | 0) << 30 | ((i5 | 0) == 0 ? 0 : i5 << 2 | 3);
   i1 = i1 + 4 | 0;
   i2 = i2 + i22 | 0;
   i4 = 28;
   continue;
  } else if ((i4 | 0) == 28) {
   switch (i22 | 0) {
   case 1:
    {
     i7 = HEAPU8[i2 >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i7 = HEAPU16[i2 >> 1] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i4 = 255;
     i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = HEAPU8[i2 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i7 = HEAP32[i2 >> 2] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i4 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
    }
   }
   HEAP32[i1 >> 2] = ((i6 | 0) == 0 ? 0 : i6 << 12 | 3072) | ((i7 | 0) == 0 ? 0 : i7 << 22 | 3145728) | ((i4 >>> 0) / 85 | 0) << 30 | ((i5 | 0) == 0 ? 0 : i5 << 2 | 3);
   i1 = i1 + 4 | 0;
   i2 = i2 + i22 | 0;
   i4 = 34;
   continue;
  } else if ((i4 | 0) == 34) {
   switch (i22 | 0) {
   case 1:
    {
     i7 = HEAPU8[i2 >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i7 = HEAPU16[i2 >> 1] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i4 = 255;
     i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = HEAPU8[i2 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i7 = HEAP32[i2 >> 2] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i4 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
    }
   }
   HEAP32[i1 >> 2] = ((i6 | 0) == 0 ? 0 : i6 << 12 | 3072) | ((i7 | 0) == 0 ? 0 : i7 << 22 | 3145728) | ((i4 >>> 0) / 85 | 0) << 30 | ((i5 | 0) == 0 ? 0 : i5 << 2 | 3);
   i1 = i1 + 4 | 0;
   i2 = i2 + i22 | 0;
   i4 = 40;
   continue;
  } else if ((i4 | 0) == 40) {
   switch (i22 | 0) {
   case 1:
    {
     i7 = HEAPU8[i2 >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i7 = HEAPU16[i2 >> 1] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i4 = 255;
     i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = HEAPU8[i2 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i7 = HEAP32[i2 >> 2] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i4 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
    }
   }
   HEAP32[i1 >> 2] = ((i6 | 0) == 0 ? 0 : i6 << 12 | 3072) | ((i7 | 0) == 0 ? 0 : i7 << 22 | 3145728) | ((i4 >>> 0) / 85 | 0) << 30 | ((i5 | 0) == 0 ? 0 : i5 << 2 | 3);
   i1 = i1 + 4 | 0;
   i2 = i2 + i22 | 0;
   i4 = 46;
   continue;
  } else if ((i4 | 0) == 46) {
   switch (i22 | 0) {
   case 1:
    {
     i7 = HEAPU8[i2 >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i7 = HEAPU16[i2 >> 1] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((i7 & HEAP32[i11 >> 2]) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i4 = 255;
     i5 = HEAPU8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = HEAPU8[i2 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i7 = HEAP32[i2 >> 2] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i11 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i4 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
    }
   }
   HEAP32[i1 >> 2] = ((i6 | 0) == 0 ? 0 : i6 << 12 | 3072) | ((i7 | 0) == 0 ? 0 : i7 << 22 | 3145728) | ((i4 >>> 0) / 85 | 0) << 30 | ((i5 | 0) == 0 ? 0 : i5 << 2 | 3);
   i1 = i1 + 4 | 0;
   i2 = i2 + i22 | 0;
   if ((i8 | 0) > 1) {
    i8 = i8 + -1 | 0;
    i4 = 4;
    continue;
   } else {
    i4 = 52;
    continue;
   }
  } else if ((i4 | 0) == 52) if (!i3) break L4; else {
   i1 = i1 + i25 | 0;
   i2 = i2 + i24 | 0;
   continue L4;
  }
 }
 return;
}

function _BlitNtoNSurfaceAlphaKey(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0;
 i1 = HEAP32[i6 + 24 >> 2] | 0;
 i5 = HEAP32[i6 + 28 >> 2] | 0;
 i41 = HEAP32[i6 + 16 >> 2] | 0;
 i42 = HEAP32[i6 + 36 >> 2] | 0;
 i3 = HEAP32[i6 + 40 >> 2] | 0;
 i4 = HEAP32[i6 + 44 >> 2] | 0;
 i36 = HEAP32[i6 + 56 >> 2] | 0;
 i37 = HEAPU8[i3 + 9 >> 0] | 0;
 i38 = HEAPU8[i4 + 9 >> 0] | 0;
 i2 = HEAP8[i6 + 63 >> 0] | 0;
 i39 = i2 & 255;
 if (!i5) return;
 i40 = (i1 + 3 | 0) / 4 | 0;
 i35 = i1 & 3;
 i26 = i2 << 24 >> 24 == 0;
 i27 = i3 + 12 | 0;
 i28 = i3 + 32 | 0;
 i29 = i3 + 28 | 0;
 i30 = i3 + 16 | 0;
 i31 = i3 + 33 | 0;
 i32 = i3 + 29 | 0;
 i33 = i3 + 20 | 0;
 i34 = i3 + 34 | 0;
 i14 = i3 + 30 | 0;
 i15 = i4 + 28 | 0;
 i16 = i4 + 32 | 0;
 i17 = i4 + 29 | 0;
 i18 = i4 + 33 | 0;
 i19 = i4 + 30 | 0;
 i20 = i4 + 34 | 0;
 i21 = i4 + 31 | 0;
 i22 = i4 + 35 | 0;
 i23 = i4 + 12 | 0;
 i24 = i4 + 16 | 0;
 i25 = i4 + 20 | 0;
 i13 = i4 + 24 | 0;
 i2 = i5;
 i1 = HEAP32[i6 + 20 >> 2] | 0;
 i3 = HEAP32[i6 >> 2] | 0;
 L4 : while (1) {
  i2 = i2 + -1 | 0;
  switch (i35 | 0) {
  case 0:
   {
    i12 = i40;
    i4 = 4;
    break;
   }
  case 3:
   {
    i12 = i40;
    i4 = 21;
    break;
   }
  case 2:
   {
    i12 = i40;
    i4 = 38;
    break;
   }
  case 1:
   {
    i12 = i40;
    i4 = 55;
    break;
   }
  default:
   i4 = 72;
  }
  while (1) if ((i4 | 0) == 4) {
   switch (i37 | 0) {
   case 1:
    {
     i4 = HEAPU8[i3 >> 0] | 0;
     break;
    }
   case 2:
    {
     i4 = HEAPU16[i3 >> 1] | 0;
     break;
    }
   case 3:
    {
     i4 = (HEAPU8[i3 + 1 >> 0] | 0) << 8 | (HEAPU8[i3 >> 0] | 0) | (HEAPU8[i3 + 2 >> 0] | 0) << 16;
     break;
    }
   case 4:
    {
     i4 = HEAP32[i3 >> 2] | 0;
     break;
    }
   default:
    i4 = 0;
   }
   L16 : do if (!(i26 | (i4 | 0) == (i36 | 0))) {
    i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i29 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] & i4) >>> (HEAPU8[i28 >> 0] | 0)) >> 0] | 0;
    i9 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i32 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i30 >> 2] & i4) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
    i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i4) >>> (HEAPU8[i34 >> 0] | 0)) >> 0] | 0;
    switch (i38 | 0) {
    case 1:
     {
      i4 = HEAPU8[i1 >> 0] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i4 = HEAPU16[i1 >> 1] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i11 = 255;
      i10 = HEAPU8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i4 = HEAPU8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i4 = HEAP32[i1 >> 2] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i4) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i11 = 0;
      i10 = 0;
      i6 = 0;
      i4 = 0;
     }
    }
    i8 = (((Math_imul(i5 - i4 | 0, i39) | 0) >>> 0) / 255 | 0) + i4 | 0;
    i6 = (((Math_imul(i9 - i6 | 0, i39) | 0) >>> 0) / 255 | 0) + i6 | 0;
    i5 = (((Math_imul(i7 - i10 | 0, i39) | 0) >>> 0) / 255 | 0) + i10 | 0;
    i4 = i11 + i39 - (((Math_imul(i11, i39) | 0) >>> 0) / 255 | 0) | 0;
    switch (i38 | 0) {
    case 1:
     {
      HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i8 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L16;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i8 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L16;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
      HEAP8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      break L16;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i8 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L16;
     }
    default:
     break L16;
    }
   } while (0);
   i1 = i1 + i38 | 0;
   i3 = i3 + i37 | 0;
   i4 = 21;
   continue;
  } else if ((i4 | 0) == 21) {
   switch (i37 | 0) {
   case 1:
    {
     i4 = HEAPU8[i3 >> 0] | 0;
     break;
    }
   case 2:
    {
     i4 = HEAPU16[i3 >> 1] | 0;
     break;
    }
   case 3:
    {
     i4 = (HEAPU8[i3 + 1 >> 0] | 0) << 8 | (HEAPU8[i3 >> 0] | 0) | (HEAPU8[i3 + 2 >> 0] | 0) << 16;
     break;
    }
   case 4:
    {
     i4 = HEAP32[i3 >> 2] | 0;
     break;
    }
   default:
    i4 = 0;
   }
   L37 : do if (!(i26 | (i4 | 0) == (i36 | 0))) {
    i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i29 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] & i4) >>> (HEAPU8[i28 >> 0] | 0)) >> 0] | 0;
    i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i32 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i30 >> 2] & i4) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
    i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i4) >>> (HEAPU8[i34 >> 0] | 0)) >> 0] | 0;
    switch (i38 | 0) {
    case 1:
     {
      i4 = HEAPU8[i1 >> 0] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i4 = HEAPU16[i1 >> 1] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i11 = 255;
      i10 = HEAPU8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i4 = HEAPU8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i4 = HEAP32[i1 >> 2] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i4) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i11 = 0;
      i10 = 0;
      i6 = 0;
      i4 = 0;
     }
    }
    i9 = (((Math_imul(i5 - i4 | 0, i39) | 0) >>> 0) / 255 | 0) + i4 | 0;
    i6 = (((Math_imul(i7 - i6 | 0, i39) | 0) >>> 0) / 255 | 0) + i6 | 0;
    i5 = (((Math_imul(i8 - i10 | 0, i39) | 0) >>> 0) / 255 | 0) + i10 | 0;
    i4 = i11 + i39 - (((Math_imul(i11, i39) | 0) >>> 0) / 255 | 0) | 0;
    switch (i38 | 0) {
    case 1:
     {
      HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L37;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L37;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
      HEAP8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      break L37;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L37;
     }
    default:
     break L37;
    }
   } while (0);
   i1 = i1 + i38 | 0;
   i3 = i3 + i37 | 0;
   i4 = 38;
   continue;
  } else if ((i4 | 0) == 38) {
   switch (i37 | 0) {
   case 1:
    {
     i4 = HEAPU8[i3 >> 0] | 0;
     break;
    }
   case 2:
    {
     i4 = HEAPU16[i3 >> 1] | 0;
     break;
    }
   case 3:
    {
     i4 = (HEAPU8[i3 + 1 >> 0] | 0) << 8 | (HEAPU8[i3 >> 0] | 0) | (HEAPU8[i3 + 2 >> 0] | 0) << 16;
     break;
    }
   case 4:
    {
     i4 = HEAP32[i3 >> 2] | 0;
     break;
    }
   default:
    i4 = 0;
   }
   L58 : do if (!(i26 | (i4 | 0) == (i36 | 0))) {
    i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i29 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] & i4) >>> (HEAPU8[i28 >> 0] | 0)) >> 0] | 0;
    i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i32 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i30 >> 2] & i4) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
    i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i4) >>> (HEAPU8[i34 >> 0] | 0)) >> 0] | 0;
    switch (i38 | 0) {
    case 1:
     {
      i4 = HEAPU8[i1 >> 0] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i4 = HEAPU16[i1 >> 1] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i11 = 255;
      i10 = HEAPU8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i4 = HEAPU8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i4 = HEAP32[i1 >> 2] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i4) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i11 = 0;
      i10 = 0;
      i6 = 0;
      i4 = 0;
     }
    }
    i9 = (((Math_imul(i5 - i4 | 0, i39) | 0) >>> 0) / 255 | 0) + i4 | 0;
    i6 = (((Math_imul(i7 - i6 | 0, i39) | 0) >>> 0) / 255 | 0) + i6 | 0;
    i5 = (((Math_imul(i8 - i10 | 0, i39) | 0) >>> 0) / 255 | 0) + i10 | 0;
    i4 = i11 + i39 - (((Math_imul(i11, i39) | 0) >>> 0) / 255 | 0) | 0;
    switch (i38 | 0) {
    case 1:
     {
      HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L58;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L58;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
      HEAP8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      break L58;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L58;
     }
    default:
     break L58;
    }
   } while (0);
   i1 = i1 + i38 | 0;
   i3 = i3 + i37 | 0;
   i4 = 55;
   continue;
  } else if ((i4 | 0) == 55) {
   switch (i37 | 0) {
   case 1:
    {
     i4 = HEAPU8[i3 >> 0] | 0;
     break;
    }
   case 2:
    {
     i4 = HEAPU16[i3 >> 1] | 0;
     break;
    }
   case 3:
    {
     i4 = (HEAPU8[i3 + 1 >> 0] | 0) << 8 | (HEAPU8[i3 >> 0] | 0) | (HEAPU8[i3 + 2 >> 0] | 0) << 16;
     break;
    }
   case 4:
    {
     i4 = HEAP32[i3 >> 2] | 0;
     break;
    }
   default:
    i4 = 0;
   }
   L79 : do if (!(i26 | (i4 | 0) == (i36 | 0))) {
    i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i29 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] & i4) >>> (HEAPU8[i28 >> 0] | 0)) >> 0] | 0;
    i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i32 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i30 >> 2] & i4) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
    i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i4) >>> (HEAPU8[i34 >> 0] | 0)) >> 0] | 0;
    switch (i38 | 0) {
    case 1:
     {
      i4 = HEAPU8[i1 >> 0] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i4 = HEAPU16[i1 >> 1] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i11 = 255;
      i10 = HEAPU8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAPU8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i4 = HEAPU8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i4 = HEAP32[i1 >> 2] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i4) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i4) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i4) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i11 = 0;
      i10 = 0;
      i6 = 0;
      i4 = 0;
     }
    }
    i9 = (((Math_imul(i5 - i4 | 0, i39) | 0) >>> 0) / 255 | 0) + i4 | 0;
    i6 = (((Math_imul(i7 - i6 | 0, i39) | 0) >>> 0) / 255 | 0) + i6 | 0;
    i5 = (((Math_imul(i8 - i10 | 0, i39) | 0) >>> 0) / 255 | 0) + i10 | 0;
    i4 = i11 + i39 - (((Math_imul(i11, i39) | 0) >>> 0) / 255 | 0) | 0;
    switch (i38 | 0) {
    case 1:
     {
      HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L79;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L79;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
      HEAP8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      break L79;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
      break L79;
     }
    default:
     break L79;
    }
   } while (0);
   i3 = i3 + i37 | 0;
   i1 = i1 + i38 | 0;
   if ((i12 | 0) > 1) {
    i12 = i12 + -1 | 0;
    i4 = 4;
    continue;
   } else {
    i4 = 72;
    continue;
   }
  } else if ((i4 | 0) == 72) if (!i2) break L4; else {
   i1 = i1 + i42 | 0;
   i3 = i3 + i41 | 0;
   continue L4;
  }
 }
 return;
}

function _BlitNtoNKey(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0;
 i1 = HEAP32[i5 + 24 >> 2] | 0;
 i4 = HEAP32[i5 + 28 >> 2] | 0;
 i36 = HEAP32[i5 + 16 >> 2] | 0;
 i29 = HEAP32[i5 + 36 >> 2] | 0;
 i2 = HEAP32[i5 + 40 >> 2] | 0;
 i3 = HEAP32[i5 + 44 >> 2] | 0;
 i31 = HEAPU8[i2 + 9 >> 0] | 0;
 i32 = HEAPU8[i3 + 9 >> 0] | 0;
 if (!(HEAP32[i3 + 24 >> 2] | 0)) i30 = 0; else i30 = HEAPU8[i5 + 63 >> 0] | 0;
 i33 = ~HEAP32[i2 + 24 >> 2];
 i34 = HEAP32[i5 + 56 >> 2] & i33;
 if (!i4) return;
 i35 = (i1 + 7 | 0) / 8 | 0;
 i20 = i1 & 7;
 i21 = i2 + 12 | 0;
 i22 = i2 + 32 | 0;
 i23 = i2 + 28 | 0;
 i24 = i2 + 16 | 0;
 i25 = i2 + 33 | 0;
 i26 = i2 + 29 | 0;
 i27 = i2 + 20 | 0;
 i28 = i2 + 34 | 0;
 i12 = i2 + 30 | 0;
 i13 = i3 + 28 | 0;
 i14 = i3 + 32 | 0;
 i15 = i3 + 29 | 0;
 i16 = i3 + 33 | 0;
 i17 = i3 + 30 | 0;
 i18 = i3 + 34 | 0;
 i19 = i3 + 31 | 0;
 i11 = i3 + 35 | 0;
 i1 = HEAP32[i5 + 20 >> 2] | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 L7 : while (1) {
  i4 = i4 + -1 | 0;
  switch (i20 | 0) {
  case 0:
   {
    i10 = i35;
    i3 = 6;
    break;
   }
  case 7:
   {
    i10 = i35;
    i3 = 18;
    break;
   }
  case 6:
   {
    i10 = i35;
    i3 = 30;
    break;
   }
  case 5:
   {
    i10 = i35;
    i3 = 42;
    break;
   }
  case 4:
   {
    i10 = i35;
    i3 = 54;
    break;
   }
  case 3:
   {
    i10 = i35;
    i3 = 66;
    break;
   }
  case 2:
   {
    i10 = i35;
    i3 = 78;
    break;
   }
  case 1:
   {
    i10 = i35;
    i3 = 90;
    break;
   }
  default:
   i3 = 102;
  }
  while (1) if ((i3 | 0) == 6) {
   switch (i31 | 0) {
   case 1:
    {
     i3 = HEAPU8[i2 >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i2 >> 1] | 0;
     break;
    }
   case 3:
    {
     i3 = (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0) | (HEAPU8[i2 + 2 >> 0] | 0) << 16;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i2 >> 2] | 0;
     break;
    }
   default:
    i3 = 0;
   }
   L19 : do if ((i3 & i33 | 0) != (i34 | 0)) {
    i6 = HEAP8[(HEAP32[5992 + ((HEAPU8[i23 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
    i7 = i6 & 255;
    i8 = HEAP8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i3) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
    i9 = i8 & 255;
    i3 = HEAP8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] & i3) >>> (HEAPU8[i28 >> 0] | 0)) >> 0] | 0;
    i5 = i3 & 255;
    switch (i32 | 0) {
    case 1:
     {
      HEAP8[i1 >> 0] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i5 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L19;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i5 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L19;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
      HEAP8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
      break L19;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i5 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L19;
     }
    default:
     break L19;
    }
   } while (0);
   i1 = i1 + i32 | 0;
   i2 = i2 + i31 | 0;
   i3 = 18;
   continue;
  } else if ((i3 | 0) == 18) {
   switch (i31 | 0) {
   case 1:
    {
     i3 = HEAPU8[i2 >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i2 >> 1] | 0;
     break;
    }
   case 3:
    {
     i3 = (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0) | (HEAPU8[i2 + 2 >> 0] | 0) << 16;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i2 >> 2] | 0;
     break;
    }
   default:
    i3 = 0;
   }
   L34 : do if ((i3 & i33 | 0) != (i34 | 0)) {
    i6 = HEAP8[(HEAP32[5992 + ((HEAPU8[i23 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
    i7 = i6 & 255;
    i8 = HEAP8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i3) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
    i9 = i8 & 255;
    i3 = HEAP8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] & i3) >>> (HEAPU8[i28 >> 0] | 0)) >> 0] | 0;
    i5 = i3 & 255;
    switch (i32 | 0) {
    case 1:
     {
      HEAP8[i1 >> 0] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i5 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L34;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i5 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L34;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
      HEAP8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
      break L34;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i5 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L34;
     }
    default:
     break L34;
    }
   } while (0);
   i1 = i1 + i32 | 0;
   i2 = i2 + i31 | 0;
   i3 = 30;
   continue;
  } else if ((i3 | 0) == 30) {
   switch (i31 | 0) {
   case 1:
    {
     i3 = HEAPU8[i2 >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i2 >> 1] | 0;
     break;
    }
   case 3:
    {
     i3 = (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0) | (HEAPU8[i2 + 2 >> 0] | 0) << 16;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i2 >> 2] | 0;
     break;
    }
   default:
    i3 = 0;
   }
   L49 : do if ((i3 & i33 | 0) != (i34 | 0)) {
    i6 = HEAP8[(HEAP32[5992 + ((HEAPU8[i23 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
    i7 = i6 & 255;
    i8 = HEAP8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i3) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
    i9 = i8 & 255;
    i3 = HEAP8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] & i3) >>> (HEAPU8[i28 >> 0] | 0)) >> 0] | 0;
    i5 = i3 & 255;
    switch (i32 | 0) {
    case 1:
     {
      HEAP8[i1 >> 0] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i5 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L49;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i5 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L49;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
      HEAP8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
      break L49;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i5 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L49;
     }
    default:
     break L49;
    }
   } while (0);
   i1 = i1 + i32 | 0;
   i2 = i2 + i31 | 0;
   i3 = 42;
   continue;
  } else if ((i3 | 0) == 42) {
   switch (i31 | 0) {
   case 1:
    {
     i3 = HEAPU8[i2 >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i2 >> 1] | 0;
     break;
    }
   case 3:
    {
     i3 = (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0) | (HEAPU8[i2 + 2 >> 0] | 0) << 16;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i2 >> 2] | 0;
     break;
    }
   default:
    i3 = 0;
   }
   L64 : do if ((i3 & i33 | 0) != (i34 | 0)) {
    i6 = HEAP8[(HEAP32[5992 + ((HEAPU8[i23 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
    i7 = i6 & 255;
    i8 = HEAP8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i3) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
    i9 = i8 & 255;
    i3 = HEAP8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] & i3) >>> (HEAPU8[i28 >> 0] | 0)) >> 0] | 0;
    i5 = i3 & 255;
    switch (i32 | 0) {
    case 1:
     {
      HEAP8[i1 >> 0] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i5 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L64;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i5 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L64;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
      HEAP8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
      break L64;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i5 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L64;
     }
    default:
     break L64;
    }
   } while (0);
   i1 = i1 + i32 | 0;
   i2 = i2 + i31 | 0;
   i3 = 54;
   continue;
  } else if ((i3 | 0) == 54) {
   switch (i31 | 0) {
   case 1:
    {
     i3 = HEAPU8[i2 >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i2 >> 1] | 0;
     break;
    }
   case 3:
    {
     i3 = (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0) | (HEAPU8[i2 + 2 >> 0] | 0) << 16;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i2 >> 2] | 0;
     break;
    }
   default:
    i3 = 0;
   }
   L79 : do if ((i3 & i33 | 0) != (i34 | 0)) {
    i6 = HEAP8[(HEAP32[5992 + ((HEAPU8[i23 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
    i7 = i6 & 255;
    i8 = HEAP8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i3) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
    i9 = i8 & 255;
    i3 = HEAP8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] & i3) >>> (HEAPU8[i28 >> 0] | 0)) >> 0] | 0;
    i5 = i3 & 255;
    switch (i32 | 0) {
    case 1:
     {
      HEAP8[i1 >> 0] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i5 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L79;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i5 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L79;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
      HEAP8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
      break L79;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i5 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L79;
     }
    default:
     break L79;
    }
   } while (0);
   i1 = i1 + i32 | 0;
   i2 = i2 + i31 | 0;
   i3 = 66;
   continue;
  } else if ((i3 | 0) == 66) {
   switch (i31 | 0) {
   case 1:
    {
     i3 = HEAPU8[i2 >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i2 >> 1] | 0;
     break;
    }
   case 3:
    {
     i3 = (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0) | (HEAPU8[i2 + 2 >> 0] | 0) << 16;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i2 >> 2] | 0;
     break;
    }
   default:
    i3 = 0;
   }
   L94 : do if ((i3 & i33 | 0) != (i34 | 0)) {
    i6 = HEAP8[(HEAP32[5992 + ((HEAPU8[i23 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
    i7 = i6 & 255;
    i8 = HEAP8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i3) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
    i9 = i8 & 255;
    i3 = HEAP8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] & i3) >>> (HEAPU8[i28 >> 0] | 0)) >> 0] | 0;
    i5 = i3 & 255;
    switch (i32 | 0) {
    case 1:
     {
      HEAP8[i1 >> 0] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i5 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L94;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i5 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L94;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
      HEAP8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
      break L94;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i5 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L94;
     }
    default:
     break L94;
    }
   } while (0);
   i1 = i1 + i32 | 0;
   i2 = i2 + i31 | 0;
   i3 = 78;
   continue;
  } else if ((i3 | 0) == 78) {
   switch (i31 | 0) {
   case 1:
    {
     i3 = HEAPU8[i2 >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i2 >> 1] | 0;
     break;
    }
   case 3:
    {
     i3 = (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0) | (HEAPU8[i2 + 2 >> 0] | 0) << 16;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i2 >> 2] | 0;
     break;
    }
   default:
    i3 = 0;
   }
   L109 : do if ((i3 & i33 | 0) != (i34 | 0)) {
    i6 = HEAP8[(HEAP32[5992 + ((HEAPU8[i23 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
    i7 = i6 & 255;
    i8 = HEAP8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i3) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
    i9 = i8 & 255;
    i3 = HEAP8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] & i3) >>> (HEAPU8[i28 >> 0] | 0)) >> 0] | 0;
    i5 = i3 & 255;
    switch (i32 | 0) {
    case 1:
     {
      HEAP8[i1 >> 0] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i5 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L109;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i5 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L109;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
      HEAP8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
      break L109;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i5 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L109;
     }
    default:
     break L109;
    }
   } while (0);
   i1 = i1 + i32 | 0;
   i2 = i2 + i31 | 0;
   i3 = 90;
   continue;
  } else if ((i3 | 0) == 90) {
   switch (i31 | 0) {
   case 1:
    {
     i3 = HEAPU8[i2 >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i2 >> 1] | 0;
     break;
    }
   case 3:
    {
     i3 = (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0) | (HEAPU8[i2 + 2 >> 0] | 0) << 16;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i2 >> 2] | 0;
     break;
    }
   default:
    i3 = 0;
   }
   L124 : do if ((i3 & i33 | 0) != (i34 | 0)) {
    i6 = HEAP8[(HEAP32[5992 + ((HEAPU8[i23 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
    i7 = i6 & 255;
    i8 = HEAP8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i3) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
    i9 = i8 & 255;
    i3 = HEAP8[(HEAP32[5992 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] & i3) >>> (HEAPU8[i28 >> 0] | 0)) >> 0] | 0;
    i5 = i3 & 255;
    switch (i32 | 0) {
    case 1:
     {
      HEAP8[i1 >> 0] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i5 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L124;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i5 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L124;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
      HEAP8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
      break L124;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i5 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L124;
     }
    default:
     break L124;
    }
   } while (0);
   i1 = i1 + i32 | 0;
   i2 = i2 + i31 | 0;
   if ((i10 | 0) > 1) {
    i10 = i10 + -1 | 0;
    i3 = 6;
    continue;
   } else {
    i3 = 102;
    continue;
   }
  } else if ((i3 | 0) == 102) if (!i4) break L7; else {
   i1 = i1 + i29 | 0;
   i2 = i2 + i36 | 0;
   continue L7;
  }
 }
 return;
}

function _Blit1toNAlpha(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i1 = HEAP32[i4 + 24 >> 2] | 0;
 i3 = HEAP32[i4 + 28 >> 2] | 0;
 i30 = HEAP32[i4 + 16 >> 2] | 0;
 i31 = HEAP32[i4 + 36 >> 2] | 0;
 i2 = HEAP32[i4 + 44 >> 2] | 0;
 i26 = HEAP32[(HEAP32[(HEAP32[i4 + 40 >> 2] | 0) + 4 >> 2] | 0) + 4 >> 2] | 0;
 i27 = HEAPU8[i4 + 63 >> 0] | 0;
 i28 = HEAPU8[i2 + 9 >> 0] | 0;
 if (!i3) return;
 i29 = (i1 + 3 | 0) / 4 | 0;
 i14 = i1 & 3;
 i15 = i2 + 28 | 0;
 i16 = i2 + 32 | 0;
 i17 = i2 + 29 | 0;
 i18 = i2 + 33 | 0;
 i19 = i2 + 30 | 0;
 i20 = i2 + 34 | 0;
 i21 = i2 + 31 | 0;
 i22 = i2 + 35 | 0;
 i23 = i2 + 12 | 0;
 i24 = i2 + 16 | 0;
 i25 = i2 + 20 | 0;
 i13 = i2 + 24 | 0;
 i1 = HEAP32[i4 + 20 >> 2] | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 L4 : while (1) {
  i3 = i3 + -1 | 0;
  switch (i14 | 0) {
  case 0:
   {
    i12 = i29;
    i4 = 4;
    break;
   }
  case 3:
   {
    i12 = i29;
    i4 = 15;
    break;
   }
  case 2:
   {
    i12 = i29;
    i4 = 26;
    break;
   }
  case 1:
   {
    i12 = i29;
    i4 = 37;
    break;
   }
  default:
   i4 = 48;
  }
  while (1) if ((i4 | 0) == 4) {
   i9 = HEAPU8[i2 >> 0] | 0;
   i4 = HEAPU8[i26 + (i9 << 2) >> 0] | 0;
   i6 = HEAPU8[i26 + (i9 << 2) + 1 >> 0] | 0;
   i9 = HEAPU8[i26 + (i9 << 2) + 2 >> 0] | 0;
   switch (i28 | 0) {
   case 1:
    {
     i5 = HEAPU8[i1 >> 0] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i5) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i5) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i5 = HEAPU16[i1 >> 1] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i5) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i5) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i11 = 255;
     i10 = HEAPU8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = HEAPU8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i5 = HEAP32[i1 >> 2] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i5) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i5) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i5) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i11 = 0;
     i10 = 0;
     i7 = 0;
     i5 = 0;
    }
   }
   i8 = (((Math_imul(i4 - i5 | 0, i27) | 0) >>> 0) / 255 | 0) + i5 | 0;
   i6 = (((Math_imul(i6 - i7 | 0, i27) | 0) >>> 0) / 255 | 0) + i7 | 0;
   i5 = (((Math_imul(i9 - i10 | 0, i27) | 0) >>> 0) / 255 | 0) + i10 | 0;
   i4 = i11 + i27 - (((Math_imul(i11, i27) | 0) >>> 0) / 255 | 0) | 0;
   switch (i28 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i8 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i8 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     HEAP8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
     break;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i8 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i28 | 0;
   i2 = i2 + 1 | 0;
   i4 = 15;
   continue;
  } else if ((i4 | 0) == 15) {
   i8 = HEAPU8[i2 >> 0] | 0;
   i4 = HEAPU8[i26 + (i8 << 2) >> 0] | 0;
   i6 = HEAPU8[i26 + (i8 << 2) + 1 >> 0] | 0;
   i8 = HEAPU8[i26 + (i8 << 2) + 2 >> 0] | 0;
   switch (i28 | 0) {
   case 1:
    {
     i5 = HEAPU8[i1 >> 0] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i5) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i5) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i5 = HEAPU16[i1 >> 1] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i5) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i5) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i11 = 255;
     i10 = HEAPU8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = HEAPU8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i5 = HEAP32[i1 >> 2] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i5) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i5) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i5) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i11 = 0;
     i10 = 0;
     i7 = 0;
     i5 = 0;
    }
   }
   i9 = (((Math_imul(i4 - i5 | 0, i27) | 0) >>> 0) / 255 | 0) + i5 | 0;
   i6 = (((Math_imul(i6 - i7 | 0, i27) | 0) >>> 0) / 255 | 0) + i7 | 0;
   i5 = (((Math_imul(i8 - i10 | 0, i27) | 0) >>> 0) / 255 | 0) + i10 | 0;
   i4 = i11 + i27 - (((Math_imul(i11, i27) | 0) >>> 0) / 255 | 0) | 0;
   switch (i28 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
     HEAP8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
     break;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i28 | 0;
   i2 = i2 + 1 | 0;
   i4 = 26;
   continue;
  } else if ((i4 | 0) == 26) {
   i8 = HEAPU8[i2 >> 0] | 0;
   i4 = HEAPU8[i26 + (i8 << 2) >> 0] | 0;
   i6 = HEAPU8[i26 + (i8 << 2) + 1 >> 0] | 0;
   i8 = HEAPU8[i26 + (i8 << 2) + 2 >> 0] | 0;
   switch (i28 | 0) {
   case 1:
    {
     i5 = HEAPU8[i1 >> 0] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i5) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i5) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i5 = HEAPU16[i1 >> 1] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i5) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i5) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i11 = 255;
     i10 = HEAPU8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = HEAPU8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i5 = HEAP32[i1 >> 2] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i5) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i5) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i5) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i11 = 0;
     i10 = 0;
     i7 = 0;
     i5 = 0;
    }
   }
   i9 = (((Math_imul(i4 - i5 | 0, i27) | 0) >>> 0) / 255 | 0) + i5 | 0;
   i6 = (((Math_imul(i6 - i7 | 0, i27) | 0) >>> 0) / 255 | 0) + i7 | 0;
   i5 = (((Math_imul(i8 - i10 | 0, i27) | 0) >>> 0) / 255 | 0) + i10 | 0;
   i4 = i11 + i27 - (((Math_imul(i11, i27) | 0) >>> 0) / 255 | 0) | 0;
   switch (i28 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
     HEAP8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
     break;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i28 | 0;
   i2 = i2 + 1 | 0;
   i4 = 37;
   continue;
  } else if ((i4 | 0) == 37) {
   i9 = HEAPU8[i2 >> 0] | 0;
   i4 = HEAPU8[i26 + (i9 << 2) >> 0] | 0;
   i6 = HEAPU8[i26 + (i9 << 2) + 1 >> 0] | 0;
   i9 = HEAPU8[i26 + (i9 << 2) + 2 >> 0] | 0;
   switch (i28 | 0) {
   case 1:
    {
     i5 = HEAPU8[i1 >> 0] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i5) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i5) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i5 = HEAPU16[i1 >> 1] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i5) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i5) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i23 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i11 = 255;
     i10 = HEAPU8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = HEAPU8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i5 = HEAP32[i1 >> 2] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i5) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i5) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i5) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i11 = 0;
     i10 = 0;
     i7 = 0;
     i5 = 0;
    }
   }
   i8 = (((Math_imul(i4 - i5 | 0, i27) | 0) >>> 0) / 255 | 0) + i5 | 0;
   i6 = (((Math_imul(i6 - i7 | 0, i27) | 0) >>> 0) / 255 | 0) + i7 | 0;
   i5 = (((Math_imul(i9 - i10 | 0, i27) | 0) >>> 0) / 255 | 0) + i10 | 0;
   i4 = i11 + i27 - (((Math_imul(i11, i27) | 0) >>> 0) / 255 | 0) | 0;
   switch (i28 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i8 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i8 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     HEAP8[i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
     break;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i8 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0) | i4 >>> (HEAPU8[i21 >> 0] | 0) << (HEAPU8[i22 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i2 = i2 + 1 | 0;
   i1 = i1 + i28 | 0;
   if ((i12 | 0) > 1) {
    i12 = i12 + -1 | 0;
    i4 = 4;
    continue;
   } else {
    i4 = 48;
    continue;
   }
  } else if ((i4 | 0) == 48) if (!i3) break L4; else {
   i1 = i1 + i31 | 0;
   i2 = i2 + i30 | 0;
   continue L4;
  }
 }
 return;
}

function _SDL_BlendLine_RGB565(i20, i18, i19, i7, i8, i5, i1, i4, i3, i2, i9) {
 i20 = i20 | 0;
 i18 = i18 | 0;
 i19 = i19 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 var i6 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i21 = 0, i22 = 0, i23 = 0;
 i1 = i1 & 255;
 if ((i5 + -1 | 0) >>> 0 < 2) {
  i21 = i2 & 255;
  i2 = i21;
  i23 = ((Math_imul(i21, i3 & 255) | 0) >>> 0) / 255 | 0;
  i22 = ((Math_imul(i21, i4 & 255) | 0) >>> 0) / 255 | 0;
  i21 = ((Math_imul(i21, i1) | 0) >>> 0) / 255 | 0;
 } else {
  i2 = i2 & 255;
  i23 = i3 & 255;
  i22 = i4 & 255;
  i21 = i1;
 }
 i17 = i2 ^ 255;
 if ((i8 | 0) == (i19 | 0)) switch (i5 | 0) {
 case 1:
  {
   i1 = Math_imul((HEAP32[i20 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i20 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i8) | 0;
   if ((i7 | 0) < (i18 | 0)) {
    i19 = (i9 | 0) != 0 & 1;
    i5 = (i19 ^ 1) + i7 + i1 | 0;
    i1 = i18 - i7 + i19 | 0;
   } else {
    i5 = i1 + i18 | 0;
    i1 = i7 - i18 + ((i9 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i3 = HEAP32[1501] | 0;
   i4 = HEAP32[1500] | 0;
   i2 = i1;
   i1 = (HEAP32[i20 + 20 >> 2] | 0) + (i5 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i20 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = ((((Math_imul(HEAPU8[i4 + (i20 >>> 5 & 63) >> 0] | 0, i17) | 0) >>> 0) / 255 | 0) + i22 | 0) >>> 2 << 5 | ((((Math_imul(HEAPU8[i3 + (i20 >>> 11) >> 0] | 0, i17) | 0) >>> 0) / 255 | 0) + i21 | 0) >>> 3 << 11 | ((((Math_imul(HEAPU8[i3 + (i20 & 31) >> 0] | 0, i17) | 0) >>> 0) / 255 | 0) + i23 | 0) >>> 3;
    if (!i2) break; else i1 = i1 + 2 | 0;
   }
   return;
  }
 case 2:
  {
   i1 = Math_imul((HEAP32[i20 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i20 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i8) | 0;
   if ((i7 | 0) < (i18 | 0)) {
    i19 = (i9 | 0) != 0 & 1;
    i5 = (i19 ^ 1) + i7 + i1 | 0;
    i1 = i18 - i7 + i19 | 0;
   } else {
    i5 = i1 + i18 | 0;
    i1 = i7 - i18 + ((i9 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i3 = HEAP32[1501] | 0;
   i4 = HEAP32[1500] | 0;
   i2 = i1;
   i1 = (HEAP32[i20 + 20 >> 2] | 0) + (i5 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i20 = HEAPU16[i1 >> 1] | 0;
    i19 = (HEAPU8[i3 + (i20 >>> 11) >> 0] | 0) + i21 | 0;
    i18 = (HEAPU8[i4 + (i20 >>> 5 & 63) >> 0] | 0) + i22 | 0;
    i20 = (HEAPU8[i3 + (i20 & 31) >> 0] | 0) + i23 | 0;
    HEAP16[i1 >> 1] = (i18 >>> 0 > 255 ? 2016 : i18 >>> 2 << 5) | (i19 >>> 0 > 255 ? 63488 : i19 >>> 3 << 11) | (i20 >>> 0 > 255 ? 31 : i20 >>> 3);
    if (!i2) break; else i1 = i1 + 2 | 0;
   }
   return;
  }
 case 4:
  {
   i1 = Math_imul((HEAP32[i20 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i20 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i8) | 0;
   if ((i7 | 0) < (i18 | 0)) {
    i19 = (i9 | 0) != 0 & 1;
    i5 = (i19 ^ 1) + i7 + i1 | 0;
    i1 = i18 - i7 + i19 | 0;
   } else {
    i5 = i1 + i18 | 0;
    i1 = i7 - i18 + ((i9 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i3 = HEAP32[1501] | 0;
   i4 = HEAP32[1500] | 0;
   i2 = i1;
   i1 = (HEAP32[i20 + 20 >> 2] | 0) + (i5 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i20 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = (((Math_imul(HEAPU8[i4 + (i20 >>> 5 & 63) >> 0] | 0, i22) | 0) >>> 0) / 255 | 0) >>> 2 << 5 | (((Math_imul(HEAPU8[i3 + (i20 >>> 11) >> 0] | 0, i21) | 0) >>> 0) / 255 | 0) >>> 3 << 11 | (((Math_imul(HEAPU8[i3 + (i20 & 31) >> 0] | 0, i23) | 0) >>> 0) / 255 | 0) >>> 3;
    if (!i2) break; else i1 = i1 + 2 | 0;
   }
   return;
  }
 default:
  {
   i1 = Math_imul((HEAP32[i20 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i20 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i8) | 0;
   if ((i7 | 0) < (i18 | 0)) {
    i2 = (i9 | 0) != 0 & 1;
    i1 = (i2 ^ 1) + i7 + i1 | 0;
    i2 = i18 - i7 + i2 | 0;
   } else {
    i1 = i1 + i18 | 0;
    i2 = i7 - i18 + ((i9 | 0) != 0 & 1) | 0;
   }
   if (!i2) return;
   i3 = (i22 >>> 2 << 5 | i23 >>> 3 | i21 >>> 3 << 11) & 65535;
   i1 = (HEAP32[i20 + 20 >> 2] | 0) + (i1 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP16[i1 >> 1] = i3;
    if (!i2) break; else i1 = i1 + 2 | 0;
   }
   return;
  }
 }
 if ((i7 | 0) == (i18 | 0)) switch (i5 | 0) {
 case 1:
  {
   i6 = (HEAP32[i20 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i20 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i8 | 0) < (i19 | 0)) {
    i5 = (Math_imul(i6, i8) | 0) + i7 | 0;
    i1 = (i9 | 0) != 0;
    i5 = i5 + (i1 ? 0 : i6) | 0;
    i1 = i19 - i8 + (i1 & 1) | 0;
   } else {
    i5 = (Math_imul(i6, i19) | 0) + i7 | 0;
    i1 = i8 - i19 + ((i9 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i3 = HEAP32[1501] | 0;
   i4 = HEAP32[1500] | 0;
   i2 = i1;
   i1 = (HEAP32[i20 + 20 >> 2] | 0) + (i5 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i20 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = ((((Math_imul(HEAPU8[i4 + (i20 >>> 5 & 63) >> 0] | 0, i17) | 0) >>> 0) / 255 | 0) + i22 | 0) >>> 2 << 5 | ((((Math_imul(HEAPU8[i3 + (i20 >>> 11) >> 0] | 0, i17) | 0) >>> 0) / 255 | 0) + i21 | 0) >>> 3 << 11 | ((((Math_imul(HEAPU8[i3 + (i20 & 31) >> 0] | 0, i17) | 0) >>> 0) / 255 | 0) + i23 | 0) >>> 3;
    if (!i2) break; else i1 = i1 + (i6 << 1) | 0;
   }
   return;
  }
 case 2:
  {
   i6 = (HEAP32[i20 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i20 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i8 | 0) < (i19 | 0)) {
    i5 = (Math_imul(i6, i8) | 0) + i7 | 0;
    i1 = (i9 | 0) != 0;
    i5 = i5 + (i1 ? 0 : i6) | 0;
    i1 = i19 - i8 + (i1 & 1) | 0;
   } else {
    i5 = (Math_imul(i6, i19) | 0) + i7 | 0;
    i1 = i8 - i19 + ((i9 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i3 = HEAP32[1501] | 0;
   i4 = HEAP32[1500] | 0;
   i2 = i1;
   i1 = (HEAP32[i20 + 20 >> 2] | 0) + (i5 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i20 = HEAPU16[i1 >> 1] | 0;
    i19 = (HEAPU8[i3 + (i20 >>> 11) >> 0] | 0) + i21 | 0;
    i18 = (HEAPU8[i4 + (i20 >>> 5 & 63) >> 0] | 0) + i22 | 0;
    i20 = (HEAPU8[i3 + (i20 & 31) >> 0] | 0) + i23 | 0;
    HEAP16[i1 >> 1] = (i18 >>> 0 > 255 ? 2016 : i18 >>> 2 << 5) | (i19 >>> 0 > 255 ? 63488 : i19 >>> 3 << 11) | (i20 >>> 0 > 255 ? 31 : i20 >>> 3);
    if (!i2) break; else i1 = i1 + (i6 << 1) | 0;
   }
   return;
  }
 case 4:
  {
   i6 = (HEAP32[i20 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i20 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i8 | 0) < (i19 | 0)) {
    i5 = (Math_imul(i6, i8) | 0) + i7 | 0;
    i1 = (i9 | 0) != 0;
    i5 = i5 + (i1 ? 0 : i6) | 0;
    i1 = i19 - i8 + (i1 & 1) | 0;
   } else {
    i5 = (Math_imul(i6, i19) | 0) + i7 | 0;
    i1 = i8 - i19 + ((i9 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i3 = HEAP32[1501] | 0;
   i4 = HEAP32[1500] | 0;
   i2 = i1;
   i1 = (HEAP32[i20 + 20 >> 2] | 0) + (i5 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i20 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = (((Math_imul(HEAPU8[i4 + (i20 >>> 5 & 63) >> 0] | 0, i22) | 0) >>> 0) / 255 | 0) >>> 2 << 5 | (((Math_imul(HEAPU8[i3 + (i20 >>> 11) >> 0] | 0, i21) | 0) >>> 0) / 255 | 0) >>> 3 << 11 | (((Math_imul(HEAPU8[i3 + (i20 & 31) >> 0] | 0, i23) | 0) >>> 0) / 255 | 0) >>> 3;
    if (!i2) break; else i1 = i1 + (i6 << 1) | 0;
   }
   return;
  }
 default:
  {
   i4 = (HEAP32[i20 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i20 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i8 | 0) < (i19 | 0)) {
    i1 = (Math_imul(i4, i8) | 0) + i7 | 0;
    i2 = (i9 | 0) != 0;
    i1 = i1 + (i2 ? 0 : i4) | 0;
    i2 = i19 - i8 + (i2 & 1) | 0;
   } else {
    i1 = (Math_imul(i4, i19) | 0) + i7 | 0;
    i2 = i8 - i19 + ((i9 | 0) != 0 & 1) | 0;
   }
   if (!i2) return;
   i3 = (i22 >>> 2 << 5 | i23 >>> 3 | i21 >>> 3 << 11) & 65535;
   i1 = (HEAP32[i20 + 20 >> 2] | 0) + (i1 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP16[i1 >> 1] = i3;
    if (!i2) break; else i1 = i1 + (i4 << 1) | 0;
   }
   return;
  }
 }
 i16 = i18 - i7 | 0;
 i1 = i19 - i8 | 0;
 if ((((i16 | 0) < 0 ? 0 - i16 | 0 : i16) | 0) == (((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0)) switch (i5 | 0) {
 case 1:
  {
   i2 = (HEAP32[i20 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i20 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i8 | 0) < (i19 | 0)) {
    i6 = (Math_imul(i2, i8) | 0) + i7 | 0;
    i5 = i2 + ((i7 | 0) > (i18 | 0) ? -1 : 1) | 0;
    i6 = i6 + ((i9 | 0) == 0 ? i5 : 0) | 0;
   } else {
    i6 = (Math_imul(i2, i19) | 0) + i18 | 0;
    i1 = i8 - i19 | 0;
    i5 = i2 + ((i7 | 0) < (i18 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i9 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i3 = HEAP32[1501] | 0;
   i4 = HEAP32[1500] | 0;
   i2 = i1;
   i1 = (HEAP32[i20 + 20 >> 2] | 0) + (i6 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i20 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = ((((Math_imul(HEAPU8[i4 + (i20 >>> 5 & 63) >> 0] | 0, i17) | 0) >>> 0) / 255 | 0) + i22 | 0) >>> 2 << 5 | ((((Math_imul(HEAPU8[i3 + (i20 >>> 11) >> 0] | 0, i17) | 0) >>> 0) / 255 | 0) + i21 | 0) >>> 3 << 11 | ((((Math_imul(HEAPU8[i3 + (i20 & 31) >> 0] | 0, i17) | 0) >>> 0) / 255 | 0) + i23 | 0) >>> 3;
    if (!i2) break; else i1 = i1 + (i5 << 1) | 0;
   }
   return;
  }
 case 2:
  {
   i2 = (HEAP32[i20 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i20 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i8 | 0) < (i19 | 0)) {
    i6 = (Math_imul(i2, i8) | 0) + i7 | 0;
    i5 = i2 + ((i7 | 0) > (i18 | 0) ? -1 : 1) | 0;
    i6 = i6 + ((i9 | 0) == 0 ? i5 : 0) | 0;
   } else {
    i6 = (Math_imul(i2, i19) | 0) + i18 | 0;
    i1 = i8 - i19 | 0;
    i5 = i2 + ((i7 | 0) < (i18 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i9 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i3 = HEAP32[1501] | 0;
   i4 = HEAP32[1500] | 0;
   i2 = i1;
   i1 = (HEAP32[i20 + 20 >> 2] | 0) + (i6 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i20 = HEAPU16[i1 >> 1] | 0;
    i19 = (HEAPU8[i3 + (i20 >>> 11) >> 0] | 0) + i21 | 0;
    i18 = (HEAPU8[i4 + (i20 >>> 5 & 63) >> 0] | 0) + i22 | 0;
    i20 = (HEAPU8[i3 + (i20 & 31) >> 0] | 0) + i23 | 0;
    HEAP16[i1 >> 1] = (i18 >>> 0 > 255 ? 2016 : i18 >>> 2 << 5) | (i19 >>> 0 > 255 ? 63488 : i19 >>> 3 << 11) | (i20 >>> 0 > 255 ? 31 : i20 >>> 3);
    if (!i2) break; else i1 = i1 + (i5 << 1) | 0;
   }
   return;
  }
 case 4:
  {
   i2 = (HEAP32[i20 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i20 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i8 | 0) < (i19 | 0)) {
    i6 = (Math_imul(i2, i8) | 0) + i7 | 0;
    i5 = i2 + ((i7 | 0) > (i18 | 0) ? -1 : 1) | 0;
    i6 = i6 + ((i9 | 0) == 0 ? i5 : 0) | 0;
   } else {
    i6 = (Math_imul(i2, i19) | 0) + i18 | 0;
    i1 = i8 - i19 | 0;
    i5 = i2 + ((i7 | 0) < (i18 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i9 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i3 = HEAP32[1501] | 0;
   i4 = HEAP32[1500] | 0;
   i2 = i1;
   i1 = (HEAP32[i20 + 20 >> 2] | 0) + (i6 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i20 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = (((Math_imul(HEAPU8[i4 + (i20 >>> 5 & 63) >> 0] | 0, i22) | 0) >>> 0) / 255 | 0) >>> 2 << 5 | (((Math_imul(HEAPU8[i3 + (i20 >>> 11) >> 0] | 0, i21) | 0) >>> 0) / 255 | 0) >>> 3 << 11 | (((Math_imul(HEAPU8[i3 + (i20 & 31) >> 0] | 0, i23) | 0) >>> 0) / 255 | 0) >>> 3;
    if (!i2) break; else i1 = i1 + (i5 << 1) | 0;
   }
   return;
  }
 default:
  {
   i2 = (HEAP32[i20 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i20 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i8 | 0) < (i19 | 0)) {
    i5 = (Math_imul(i2, i8) | 0) + i7 | 0;
    i4 = i2 + ((i7 | 0) > (i18 | 0) ? -1 : 1) | 0;
    i5 = i5 + ((i9 | 0) == 0 ? i4 : 0) | 0;
   } else {
    i5 = (Math_imul(i2, i19) | 0) + i18 | 0;
    i1 = i8 - i19 | 0;
    i4 = i2 + ((i7 | 0) < (i18 | 0) ? -1 : 1) | 0;
   }
   i2 = i1 + ((i9 | 0) != 0 & 1) | 0;
   if (!i2) return;
   i3 = (i22 >>> 2 << 5 | i23 >>> 3 | i21 >>> 3 << 11) & 65535;
   i1 = (HEAP32[i20 + 20 >> 2] | 0) + (i5 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP16[i1 >> 1] = i3;
    if (!i2) break; else i1 = i1 + (i4 << 1) | 0;
   }
   return;
  }
 } else switch (i5 | 0) {
 case 1:
  {
   i1 = i7 - i18 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i19 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i16 = i1 << 1;
    i5 = i16 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i4 = 1;
   } else {
    i16 = i2 << 1;
    i5 = i16 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i4 = 0;
   }
   i15 = i3 << 1;
   i13 = (i7 | 0) < (i18 | 0);
   i14 = i13 ? 0 - i2 | 0 : i2;
   i13 = i13 ? -1 : 1;
   i12 = (i8 | 0) < (i19 | 0);
   i11 = i12 ? 0 - i4 | 0 : i4;
   i12 = i12 ? -1 : 1;
   i10 = i1 + ((i9 | 0) != 0 & 1) | 0;
   if ((i10 | 0) <= 0) return;
   i9 = HEAP32[i20 + 20 >> 2] | 0;
   i6 = HEAP32[i20 + 16 >> 2] | 0;
   i7 = HEAP32[1501] | 0;
   i8 = HEAP32[1500] | 0;
   i4 = i5;
   i5 = 0;
   i3 = i18;
   i2 = i19;
   while (1) {
    i1 = i9 + ((Math_imul(i6, i2) | 0) + (i3 << 1)) | 0;
    i20 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = ((((Math_imul(HEAPU8[i8 + (i20 >>> 5 & 63) >> 0] | 0, i17) | 0) >>> 0) / 255 | 0) + i22 | 0) >>> 2 << 5 | ((((Math_imul(HEAPU8[i7 + (i20 >>> 11) >> 0] | 0, i17) | 0) >>> 0) / 255 | 0) + i21 | 0) >>> 3 << 11 | ((((Math_imul(HEAPU8[i7 + (i20 & 31) >> 0] | 0, i17) | 0) >>> 0) / 255 | 0) + i23 | 0) >>> 3;
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i10 | 0)) break; else {
     i4 = (i1 ? i16 : i15) + i4 | 0;
     i3 = (i1 ? i14 : i13) + i3 | 0;
     i2 = i2 + (i1 ? i11 : i12) | 0;
    }
   }
   return;
  }
 case 2:
  {
   i1 = i7 - i18 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i19 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i16 = i1 << 1;
    i5 = i16 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i4 = 1;
   } else {
    i16 = i2 << 1;
    i5 = i16 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i4 = 0;
   }
   i15 = i3 << 1;
   i13 = (i7 | 0) < (i18 | 0);
   i14 = i13 ? 0 - i2 | 0 : i2;
   i13 = i13 ? -1 : 1;
   i12 = (i8 | 0) < (i19 | 0);
   i11 = i12 ? 0 - i4 | 0 : i4;
   i12 = i12 ? -1 : 1;
   i10 = i1 + ((i9 | 0) != 0 & 1) | 0;
   if ((i10 | 0) <= 0) return;
   i9 = HEAP32[i20 + 20 >> 2] | 0;
   i6 = HEAP32[i20 + 16 >> 2] | 0;
   i7 = HEAP32[1501] | 0;
   i8 = HEAP32[1500] | 0;
   i4 = i5;
   i5 = 0;
   i3 = i18;
   i2 = i19;
   while (1) {
    i1 = i9 + ((Math_imul(i6, i2) | 0) + (i3 << 1)) | 0;
    i20 = HEAPU16[i1 >> 1] | 0;
    i19 = (HEAPU8[i7 + (i20 >>> 11) >> 0] | 0) + i21 | 0;
    i18 = (HEAPU8[i8 + (i20 >>> 5 & 63) >> 0] | 0) + i22 | 0;
    i20 = (HEAPU8[i7 + (i20 & 31) >> 0] | 0) + i23 | 0;
    HEAP16[i1 >> 1] = (i18 >>> 0 > 255 ? 2016 : i18 >>> 2 << 5) | (i19 >>> 0 > 255 ? 63488 : i19 >>> 3 << 11) | (i20 >>> 0 > 255 ? 31 : i20 >>> 3);
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i10 | 0)) break; else {
     i4 = (i1 ? i16 : i15) + i4 | 0;
     i3 = (i1 ? i14 : i13) + i3 | 0;
     i2 = i2 + (i1 ? i11 : i12) | 0;
    }
   }
   return;
  }
 case 4:
  {
   i1 = i7 - i18 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i19 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i16 = i1 << 1;
    i5 = i16 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i4 = 1;
   } else {
    i16 = i2 << 1;
    i5 = i16 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i4 = 0;
   }
   i15 = i3 << 1;
   i13 = (i7 | 0) < (i18 | 0);
   i14 = i13 ? 0 - i2 | 0 : i2;
   i13 = i13 ? -1 : 1;
   i12 = (i8 | 0) < (i19 | 0);
   i11 = i12 ? 0 - i4 | 0 : i4;
   i12 = i12 ? -1 : 1;
   i10 = i1 + ((i9 | 0) != 0 & 1) | 0;
   if ((i10 | 0) <= 0) return;
   i9 = HEAP32[i20 + 20 >> 2] | 0;
   i6 = HEAP32[i20 + 16 >> 2] | 0;
   i7 = HEAP32[1501] | 0;
   i8 = HEAP32[1500] | 0;
   i4 = i5;
   i5 = 0;
   i3 = i18;
   i2 = i19;
   while (1) {
    i1 = i9 + ((Math_imul(i6, i2) | 0) + (i3 << 1)) | 0;
    i20 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = (((Math_imul(HEAPU8[i8 + (i20 >>> 5 & 63) >> 0] | 0, i22) | 0) >>> 0) / 255 | 0) >>> 2 << 5 | (((Math_imul(HEAPU8[i7 + (i20 >>> 11) >> 0] | 0, i21) | 0) >>> 0) / 255 | 0) >>> 3 << 11 | (((Math_imul(HEAPU8[i7 + (i20 & 31) >> 0] | 0, i23) | 0) >>> 0) / 255 | 0) >>> 3;
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i10 | 0)) break; else {
     i4 = (i1 ? i16 : i15) + i4 | 0;
     i3 = (i1 ? i14 : i13) + i3 | 0;
     i2 = i2 + (i1 ? i11 : i12) | 0;
    }
   }
   return;
  }
 default:
  {
   i1 = i7 - i18 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i19 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i15 = i1 << 1;
    i4 = i15 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i5 = 1;
   } else {
    i15 = i2 << 1;
    i4 = i15 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i5 = 0;
   }
   i14 = i3 << 1;
   i12 = (i7 | 0) < (i18 | 0);
   i13 = i12 ? 0 - i2 | 0 : i2;
   i12 = i12 ? -1 : 1;
   i11 = (i8 | 0) < (i19 | 0);
   i10 = i11 ? 0 - i5 | 0 : i5;
   i11 = i11 ? -1 : 1;
   i9 = i1 + ((i9 | 0) != 0 & 1) | 0;
   if ((i9 | 0) <= 0) return;
   i8 = HEAP32[i20 + 20 >> 2] | 0;
   i7 = HEAP32[i20 + 16 >> 2] | 0;
   i6 = (i22 >>> 2 << 5 | i23 >>> 3 | i21 >>> 3 << 11) & 65535;
   i5 = 0;
   i3 = i18;
   i2 = i19;
   while (1) {
    HEAP16[i8 + ((Math_imul(i7, i2) | 0) + (i3 << 1)) >> 1] = i6;
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i9 | 0)) break; else {
     i4 = (i1 ? i15 : i14) + i4 | 0;
     i3 = (i1 ? i13 : i12) + i3 | 0;
     i2 = i2 + (i1 ? i10 : i11) | 0;
    }
   }
   return;
  }
 }
}

function _SDL_BlendLine_RGB555(i19, i17, i18, i6, i7, i5, i1, i4, i3, i2, i8) {
 i19 = i19 | 0;
 i17 = i17 | 0;
 i18 = i18 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i20 = 0, i21 = 0, i22 = 0;
 i1 = i1 & 255;
 if ((i5 + -1 | 0) >>> 0 < 2) {
  i20 = i2 & 255;
  i2 = i20;
  i22 = ((Math_imul(i20, i3 & 255) | 0) >>> 0) / 255 | 0;
  i21 = ((Math_imul(i20, i4 & 255) | 0) >>> 0) / 255 | 0;
  i20 = ((Math_imul(i20, i1) | 0) >>> 0) / 255 | 0;
 } else {
  i2 = i2 & 255;
  i22 = i3 & 255;
  i21 = i4 & 255;
  i20 = i1;
 }
 i16 = i2 ^ 255;
 if ((i7 | 0) == (i18 | 0)) switch (i5 | 0) {
 case 1:
  {
   i1 = Math_imul((HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i7) | 0;
   if ((i6 | 0) < (i17 | 0)) {
    i18 = (i8 | 0) != 0 & 1;
    i4 = (i18 ^ 1) + i6 + i1 | 0;
    i1 = i17 - i6 + i18 | 0;
   } else {
    i4 = i1 + i17 | 0;
    i1 = i6 - i17 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i3 = HEAP32[1501] | 0;
   i2 = i1;
   i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i4 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = ((((Math_imul(HEAPU8[i3 + (i19 >>> 5 & 31) >> 0] | 0, i16) | 0) >>> 0) / 255 | 0) + i21 | 0) >>> 3 << 5 | ((((Math_imul(HEAPU8[i3 + (i19 >>> 10 & 31) >> 0] | 0, i16) | 0) >>> 0) / 255 | 0) + i20 | 0) >>> 3 << 10 | ((((Math_imul(HEAPU8[i3 + (i19 & 31) >> 0] | 0, i16) | 0) >>> 0) / 255 | 0) + i22 | 0) >>> 3;
    if (!i2) break; else i1 = i1 + 2 | 0;
   }
   return;
  }
 case 2:
  {
   i1 = Math_imul((HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i7) | 0;
   if ((i6 | 0) < (i17 | 0)) {
    i18 = (i8 | 0) != 0 & 1;
    i4 = (i18 ^ 1) + i6 + i1 | 0;
    i1 = i17 - i6 + i18 | 0;
   } else {
    i4 = i1 + i17 | 0;
    i1 = i6 - i17 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i3 = HEAP32[1501] | 0;
   i2 = i1;
   i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i4 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAPU16[i1 >> 1] | 0;
    i18 = (HEAPU8[i3 + (i19 >>> 10 & 31) >> 0] | 0) + i20 | 0;
    i17 = (HEAPU8[i3 + (i19 >>> 5 & 31) >> 0] | 0) + i21 | 0;
    i19 = (HEAPU8[i3 + (i19 & 31) >> 0] | 0) + i22 | 0;
    HEAP16[i1 >> 1] = (i17 >>> 0 > 255 ? 992 : i17 >>> 3 << 5) | (i18 >>> 0 > 255 ? 31744 : i18 >>> 3 << 10) | (i19 >>> 0 > 255 ? 31 : i19 >>> 3);
    if (!i2) break; else i1 = i1 + 2 | 0;
   }
   return;
  }
 case 4:
  {
   i1 = Math_imul((HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i7) | 0;
   if ((i6 | 0) < (i17 | 0)) {
    i18 = (i8 | 0) != 0 & 1;
    i4 = (i18 ^ 1) + i6 + i1 | 0;
    i1 = i17 - i6 + i18 | 0;
   } else {
    i4 = i1 + i17 | 0;
    i1 = i6 - i17 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i3 = HEAP32[1501] | 0;
   i2 = i1;
   i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i4 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = (((Math_imul(HEAPU8[i3 + (i19 >>> 5 & 31) >> 0] | 0, i21) | 0) >>> 0) / 255 | 0) >>> 3 << 5 | (((Math_imul(HEAPU8[i3 + (i19 >>> 10 & 31) >> 0] | 0, i20) | 0) >>> 0) / 255 | 0) >>> 3 << 10 | (((Math_imul(HEAPU8[i3 + (i19 & 31) >> 0] | 0, i22) | 0) >>> 0) / 255 | 0) >>> 3;
    if (!i2) break; else i1 = i1 + 2 | 0;
   }
   return;
  }
 default:
  {
   i1 = Math_imul((HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i7) | 0;
   if ((i6 | 0) < (i17 | 0)) {
    i2 = (i8 | 0) != 0 & 1;
    i1 = (i2 ^ 1) + i6 + i1 | 0;
    i2 = i17 - i6 + i2 | 0;
   } else {
    i1 = i1 + i17 | 0;
    i2 = i6 - i17 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i2) return;
   i3 = (i21 >>> 3 << 5 | i22 >>> 3 | i20 >>> 3 << 10) & 65535;
   i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i1 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP16[i1 >> 1] = i3;
    if (!i2) break; else i1 = i1 + 2 | 0;
   }
   return;
  }
 }
 if ((i6 | 0) == (i17 | 0)) switch (i5 | 0) {
 case 1:
  {
   i5 = (HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i18 | 0)) {
    i4 = (Math_imul(i5, i7) | 0) + i6 | 0;
    i1 = (i8 | 0) != 0;
    i4 = i4 + (i1 ? 0 : i5) | 0;
    i1 = i18 - i7 + (i1 & 1) | 0;
   } else {
    i4 = (Math_imul(i5, i18) | 0) + i6 | 0;
    i1 = i7 - i18 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i3 = HEAP32[1501] | 0;
   i2 = i1;
   i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i4 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = ((((Math_imul(HEAPU8[i3 + (i19 >>> 5 & 31) >> 0] | 0, i16) | 0) >>> 0) / 255 | 0) + i21 | 0) >>> 3 << 5 | ((((Math_imul(HEAPU8[i3 + (i19 >>> 10 & 31) >> 0] | 0, i16) | 0) >>> 0) / 255 | 0) + i20 | 0) >>> 3 << 10 | ((((Math_imul(HEAPU8[i3 + (i19 & 31) >> 0] | 0, i16) | 0) >>> 0) / 255 | 0) + i22 | 0) >>> 3;
    if (!i2) break; else i1 = i1 + (i5 << 1) | 0;
   }
   return;
  }
 case 2:
  {
   i5 = (HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i18 | 0)) {
    i4 = (Math_imul(i5, i7) | 0) + i6 | 0;
    i1 = (i8 | 0) != 0;
    i4 = i4 + (i1 ? 0 : i5) | 0;
    i1 = i18 - i7 + (i1 & 1) | 0;
   } else {
    i4 = (Math_imul(i5, i18) | 0) + i6 | 0;
    i1 = i7 - i18 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i3 = HEAP32[1501] | 0;
   i2 = i1;
   i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i4 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAPU16[i1 >> 1] | 0;
    i18 = (HEAPU8[i3 + (i19 >>> 10 & 31) >> 0] | 0) + i20 | 0;
    i17 = (HEAPU8[i3 + (i19 >>> 5 & 31) >> 0] | 0) + i21 | 0;
    i19 = (HEAPU8[i3 + (i19 & 31) >> 0] | 0) + i22 | 0;
    HEAP16[i1 >> 1] = (i17 >>> 0 > 255 ? 992 : i17 >>> 3 << 5) | (i18 >>> 0 > 255 ? 31744 : i18 >>> 3 << 10) | (i19 >>> 0 > 255 ? 31 : i19 >>> 3);
    if (!i2) break; else i1 = i1 + (i5 << 1) | 0;
   }
   return;
  }
 case 4:
  {
   i5 = (HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i18 | 0)) {
    i4 = (Math_imul(i5, i7) | 0) + i6 | 0;
    i1 = (i8 | 0) != 0;
    i4 = i4 + (i1 ? 0 : i5) | 0;
    i1 = i18 - i7 + (i1 & 1) | 0;
   } else {
    i4 = (Math_imul(i5, i18) | 0) + i6 | 0;
    i1 = i7 - i18 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i3 = HEAP32[1501] | 0;
   i2 = i1;
   i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i4 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = (((Math_imul(HEAPU8[i3 + (i19 >>> 5 & 31) >> 0] | 0, i21) | 0) >>> 0) / 255 | 0) >>> 3 << 5 | (((Math_imul(HEAPU8[i3 + (i19 >>> 10 & 31) >> 0] | 0, i20) | 0) >>> 0) / 255 | 0) >>> 3 << 10 | (((Math_imul(HEAPU8[i3 + (i19 & 31) >> 0] | 0, i22) | 0) >>> 0) / 255 | 0) >>> 3;
    if (!i2) break; else i1 = i1 + (i5 << 1) | 0;
   }
   return;
  }
 default:
  {
   i4 = (HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i18 | 0)) {
    i1 = (Math_imul(i4, i7) | 0) + i6 | 0;
    i2 = (i8 | 0) != 0;
    i1 = i1 + (i2 ? 0 : i4) | 0;
    i2 = i18 - i7 + (i2 & 1) | 0;
   } else {
    i1 = (Math_imul(i4, i18) | 0) + i6 | 0;
    i2 = i7 - i18 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i2) return;
   i3 = (i21 >>> 3 << 5 | i22 >>> 3 | i20 >>> 3 << 10) & 65535;
   i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i1 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP16[i1 >> 1] = i3;
    if (!i2) break; else i1 = i1 + (i4 << 1) | 0;
   }
   return;
  }
 }
 i15 = i17 - i6 | 0;
 i1 = i18 - i7 | 0;
 if ((((i15 | 0) < 0 ? 0 - i15 | 0 : i15) | 0) == (((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0)) switch (i5 | 0) {
 case 1:
  {
   i2 = (HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i18 | 0)) {
    i5 = (Math_imul(i2, i7) | 0) + i6 | 0;
    i4 = i2 + ((i6 | 0) > (i17 | 0) ? -1 : 1) | 0;
    i5 = i5 + ((i8 | 0) == 0 ? i4 : 0) | 0;
   } else {
    i5 = (Math_imul(i2, i18) | 0) + i17 | 0;
    i1 = i7 - i18 | 0;
    i4 = i2 + ((i6 | 0) < (i17 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i3 = HEAP32[1501] | 0;
   i2 = i1;
   i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i5 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = ((((Math_imul(HEAPU8[i3 + (i19 >>> 5 & 31) >> 0] | 0, i16) | 0) >>> 0) / 255 | 0) + i21 | 0) >>> 3 << 5 | ((((Math_imul(HEAPU8[i3 + (i19 >>> 10 & 31) >> 0] | 0, i16) | 0) >>> 0) / 255 | 0) + i20 | 0) >>> 3 << 10 | ((((Math_imul(HEAPU8[i3 + (i19 & 31) >> 0] | 0, i16) | 0) >>> 0) / 255 | 0) + i22 | 0) >>> 3;
    if (!i2) break; else i1 = i1 + (i4 << 1) | 0;
   }
   return;
  }
 case 2:
  {
   i2 = (HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i18 | 0)) {
    i5 = (Math_imul(i2, i7) | 0) + i6 | 0;
    i4 = i2 + ((i6 | 0) > (i17 | 0) ? -1 : 1) | 0;
    i5 = i5 + ((i8 | 0) == 0 ? i4 : 0) | 0;
   } else {
    i5 = (Math_imul(i2, i18) | 0) + i17 | 0;
    i1 = i7 - i18 | 0;
    i4 = i2 + ((i6 | 0) < (i17 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i3 = HEAP32[1501] | 0;
   i2 = i1;
   i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i5 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAPU16[i1 >> 1] | 0;
    i18 = (HEAPU8[i3 + (i19 >>> 10 & 31) >> 0] | 0) + i20 | 0;
    i17 = (HEAPU8[i3 + (i19 >>> 5 & 31) >> 0] | 0) + i21 | 0;
    i19 = (HEAPU8[i3 + (i19 & 31) >> 0] | 0) + i22 | 0;
    HEAP16[i1 >> 1] = (i17 >>> 0 > 255 ? 992 : i17 >>> 3 << 5) | (i18 >>> 0 > 255 ? 31744 : i18 >>> 3 << 10) | (i19 >>> 0 > 255 ? 31 : i19 >>> 3);
    if (!i2) break; else i1 = i1 + (i4 << 1) | 0;
   }
   return;
  }
 case 4:
  {
   i2 = (HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i18 | 0)) {
    i5 = (Math_imul(i2, i7) | 0) + i6 | 0;
    i4 = i2 + ((i6 | 0) > (i17 | 0) ? -1 : 1) | 0;
    i5 = i5 + ((i8 | 0) == 0 ? i4 : 0) | 0;
   } else {
    i5 = (Math_imul(i2, i18) | 0) + i17 | 0;
    i1 = i7 - i18 | 0;
    i4 = i2 + ((i6 | 0) < (i17 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i3 = HEAP32[1501] | 0;
   i2 = i1;
   i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i5 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = (((Math_imul(HEAPU8[i3 + (i19 >>> 5 & 31) >> 0] | 0, i21) | 0) >>> 0) / 255 | 0) >>> 3 << 5 | (((Math_imul(HEAPU8[i3 + (i19 >>> 10 & 31) >> 0] | 0, i20) | 0) >>> 0) / 255 | 0) >>> 3 << 10 | (((Math_imul(HEAPU8[i3 + (i19 & 31) >> 0] | 0, i22) | 0) >>> 0) / 255 | 0) >>> 3;
    if (!i2) break; else i1 = i1 + (i4 << 1) | 0;
   }
   return;
  }
 default:
  {
   i2 = (HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i18 | 0)) {
    i5 = (Math_imul(i2, i7) | 0) + i6 | 0;
    i4 = i2 + ((i6 | 0) > (i17 | 0) ? -1 : 1) | 0;
    i5 = i5 + ((i8 | 0) == 0 ? i4 : 0) | 0;
   } else {
    i5 = (Math_imul(i2, i18) | 0) + i17 | 0;
    i1 = i7 - i18 | 0;
    i4 = i2 + ((i6 | 0) < (i17 | 0) ? -1 : 1) | 0;
   }
   i2 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if (!i2) return;
   i3 = (i21 >>> 3 << 5 | i22 >>> 3 | i20 >>> 3 << 10) & 65535;
   i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i5 << 1) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP16[i1 >> 1] = i3;
    if (!i2) break; else i1 = i1 + (i4 << 1) | 0;
   }
   return;
  }
 } else switch (i5 | 0) {
 case 1:
  {
   i1 = i6 - i17 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i7 - i18 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i15 = i1 << 1;
    i5 = i15 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i4 = 1;
   } else {
    i15 = i2 << 1;
    i5 = i15 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i4 = 0;
   }
   i14 = i3 << 1;
   i12 = (i6 | 0) < (i17 | 0);
   i13 = i12 ? 0 - i2 | 0 : i2;
   i12 = i12 ? -1 : 1;
   i11 = (i7 | 0) < (i18 | 0);
   i10 = i11 ? 0 - i4 | 0 : i4;
   i11 = i11 ? -1 : 1;
   i9 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if ((i9 | 0) <= 0) return;
   i8 = HEAP32[i19 + 20 >> 2] | 0;
   i6 = HEAP32[i19 + 16 >> 2] | 0;
   i7 = HEAP32[1501] | 0;
   i4 = i5;
   i5 = 0;
   i3 = i17;
   i2 = i18;
   while (1) {
    i1 = i8 + ((Math_imul(i6, i2) | 0) + (i3 << 1)) | 0;
    i19 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = ((((Math_imul(HEAPU8[i7 + (i19 >>> 5 & 31) >> 0] | 0, i16) | 0) >>> 0) / 255 | 0) + i21 | 0) >>> 3 << 5 | ((((Math_imul(HEAPU8[i7 + (i19 >>> 10 & 31) >> 0] | 0, i16) | 0) >>> 0) / 255 | 0) + i20 | 0) >>> 3 << 10 | ((((Math_imul(HEAPU8[i7 + (i19 & 31) >> 0] | 0, i16) | 0) >>> 0) / 255 | 0) + i22 | 0) >>> 3;
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i9 | 0)) break; else {
     i4 = (i1 ? i15 : i14) + i4 | 0;
     i3 = (i1 ? i13 : i12) + i3 | 0;
     i2 = i2 + (i1 ? i10 : i11) | 0;
    }
   }
   return;
  }
 case 2:
  {
   i1 = i6 - i17 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i7 - i18 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i15 = i1 << 1;
    i5 = i15 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i4 = 1;
   } else {
    i15 = i2 << 1;
    i5 = i15 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i4 = 0;
   }
   i14 = i3 << 1;
   i12 = (i6 | 0) < (i17 | 0);
   i13 = i12 ? 0 - i2 | 0 : i2;
   i12 = i12 ? -1 : 1;
   i11 = (i7 | 0) < (i18 | 0);
   i10 = i11 ? 0 - i4 | 0 : i4;
   i11 = i11 ? -1 : 1;
   i9 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if ((i9 | 0) <= 0) return;
   i8 = HEAP32[i19 + 20 >> 2] | 0;
   i6 = HEAP32[i19 + 16 >> 2] | 0;
   i7 = HEAP32[1501] | 0;
   i4 = i5;
   i5 = 0;
   i3 = i17;
   i2 = i18;
   while (1) {
    i1 = i8 + ((Math_imul(i6, i2) | 0) + (i3 << 1)) | 0;
    i19 = HEAPU16[i1 >> 1] | 0;
    i18 = (HEAPU8[i7 + (i19 >>> 10 & 31) >> 0] | 0) + i20 | 0;
    i17 = (HEAPU8[i7 + (i19 >>> 5 & 31) >> 0] | 0) + i21 | 0;
    i19 = (HEAPU8[i7 + (i19 & 31) >> 0] | 0) + i22 | 0;
    HEAP16[i1 >> 1] = (i17 >>> 0 > 255 ? 992 : i17 >>> 3 << 5) | (i18 >>> 0 > 255 ? 31744 : i18 >>> 3 << 10) | (i19 >>> 0 > 255 ? 31 : i19 >>> 3);
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i9 | 0)) break; else {
     i4 = (i1 ? i15 : i14) + i4 | 0;
     i3 = (i1 ? i13 : i12) + i3 | 0;
     i2 = i2 + (i1 ? i10 : i11) | 0;
    }
   }
   return;
  }
 case 4:
  {
   i1 = i6 - i17 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i7 - i18 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i15 = i1 << 1;
    i5 = i15 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i4 = 1;
   } else {
    i15 = i2 << 1;
    i5 = i15 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i4 = 0;
   }
   i14 = i3 << 1;
   i12 = (i6 | 0) < (i17 | 0);
   i13 = i12 ? 0 - i2 | 0 : i2;
   i12 = i12 ? -1 : 1;
   i11 = (i7 | 0) < (i18 | 0);
   i10 = i11 ? 0 - i4 | 0 : i4;
   i11 = i11 ? -1 : 1;
   i9 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if ((i9 | 0) <= 0) return;
   i8 = HEAP32[i19 + 20 >> 2] | 0;
   i6 = HEAP32[i19 + 16 >> 2] | 0;
   i7 = HEAP32[1501] | 0;
   i4 = i5;
   i5 = 0;
   i3 = i17;
   i2 = i18;
   while (1) {
    i1 = i8 + ((Math_imul(i6, i2) | 0) + (i3 << 1)) | 0;
    i19 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = (((Math_imul(HEAPU8[i7 + (i19 >>> 5 & 31) >> 0] | 0, i21) | 0) >>> 0) / 255 | 0) >>> 3 << 5 | (((Math_imul(HEAPU8[i7 + (i19 >>> 10 & 31) >> 0] | 0, i20) | 0) >>> 0) / 255 | 0) >>> 3 << 10 | (((Math_imul(HEAPU8[i7 + (i19 & 31) >> 0] | 0, i22) | 0) >>> 0) / 255 | 0) >>> 3;
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i9 | 0)) break; else {
     i4 = (i1 ? i15 : i14) + i4 | 0;
     i3 = (i1 ? i13 : i12) + i3 | 0;
     i2 = i2 + (i1 ? i10 : i11) | 0;
    }
   }
   return;
  }
 default:
  {
   i1 = i6 - i17 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i7 - i18 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i15 = i1 << 1;
    i4 = i15 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i5 = 1;
   } else {
    i15 = i2 << 1;
    i4 = i15 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i5 = 0;
   }
   i14 = i3 << 1;
   i12 = (i6 | 0) < (i17 | 0);
   i13 = i12 ? 0 - i2 | 0 : i2;
   i12 = i12 ? -1 : 1;
   i11 = (i7 | 0) < (i18 | 0);
   i10 = i11 ? 0 - i5 | 0 : i5;
   i11 = i11 ? -1 : 1;
   i9 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if ((i9 | 0) <= 0) return;
   i8 = HEAP32[i19 + 20 >> 2] | 0;
   i7 = HEAP32[i19 + 16 >> 2] | 0;
   i6 = (i21 >>> 3 << 5 | i22 >>> 3 | i20 >>> 3 << 10) & 65535;
   i5 = 0;
   i3 = i17;
   i2 = i18;
   while (1) {
    HEAP16[i8 + ((Math_imul(i7, i2) | 0) + (i3 << 1)) >> 1] = i6;
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i9 | 0)) break; else {
     i4 = (i1 ? i15 : i14) + i4 | 0;
     i3 = (i1 ? i13 : i12) + i3 | 0;
     i2 = i2 + (i1 ? i10 : i11) | 0;
    }
   }
   return;
  }
 }
}

function _emscripten_GetProcAddress(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i6 + 12 | 0;
 i2 = i6 + 8 | 0;
 i4 = i6 + 4 | 0;
 i3 = i6;
 HEAP32[i2 >> 2] = i5;
 HEAP32[i4 >> 2] = _malloc((_strlen(HEAP32[i2 >> 2] | 0) | 0) + 1 | 0) | 0;
 _strcpy(HEAP32[i4 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0;
 HEAP32[i3 >> 2] = _strstr(HEAP32[i4 >> 2] | 0, 53250) | 0;
 if (HEAP32[i3 >> 2] | 0) HEAP8[HEAP32[i3 >> 2] >> 0] = 0;
 HEAP32[i3 >> 2] = _strstr(HEAP32[i4 >> 2] | 0, 53254) | 0;
 if (HEAP32[i3 >> 2] | 0) HEAP8[HEAP32[i3 >> 2] >> 0] = 0;
 HEAP32[i3 >> 2] = _strstr(HEAP32[i4 >> 2] | 0, 53258) | 0;
 if (HEAP32[i3 >> 2] | 0) HEAP8[HEAP32[i3 >> 2] >> 0] = 0;
 HEAP32[i3 >> 2] = _strstr(HEAP32[i4 >> 2] | 0, 53262) | 0;
 if (HEAP32[i3 >> 2] | 0) HEAP8[HEAP32[i3 >> 2] >> 0] = 0;
 do if (_strcmp(HEAP32[i4 >> 2] | 0, 53268) | 0) {
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53306) | 0)) {
   HEAP32[i4 >> 2] = 53325;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53338) | 0)) {
   HEAP32[i4 >> 2] = 53359;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53374) | 0)) {
   HEAP32[i4 >> 2] = 53389;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53404) | 0)) HEAP32[i4 >> 2] = 53419;
 } else HEAP32[i4 >> 2] = 53290; while (0);
 do if (_strcmp(HEAP32[i4 >> 2] | 0, 53434) | 0) {
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53448) | 0)) {
   HEAP32[i1 >> 2] = 93;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53460) | 0)) {
   HEAP32[i1 >> 2] = 56;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53474) | 0)) {
   HEAP32[i1 >> 2] = 57;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53486) | 0)) {
   HEAP32[i1 >> 2] = 58;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53500) | 0)) {
   HEAP32[i1 >> 2] = 59;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53514) | 0)) {
   HEAP32[i1 >> 2] = 60;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53531) | 0)) {
   HEAP32[i1 >> 2] = 1;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53554) | 0)) {
   HEAP32[i1 >> 2] = 13;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53580) | 0)) {
   HEAP32[i1 >> 2] = 14;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53593) | 0)) {
   HEAP32[i1 >> 2] = 15;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53609) | 0)) {
   HEAP32[i1 >> 2] = 4;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53622) | 0)) {
   HEAP32[i1 >> 2] = 61;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53636) | 0)) {
   HEAP32[i1 >> 2] = 2;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53656) | 0)) {
   HEAP32[i1 >> 2] = 3;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53676) | 0)) {
   HEAP32[i1 >> 2] = 4;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53693) | 0)) {
   HEAP32[i1 >> 2] = 5;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53710) | 0)) {
   HEAP32[i1 >> 2] = 94;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53722) | 0)) {
   HEAP32[i1 >> 2] = 62;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53735) | 0)) {
   HEAP32[i1 >> 2] = 63;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53751) | 0)) {
   HEAP32[i1 >> 2] = 6;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53774) | 0)) {
   HEAP32[i1 >> 2] = 12;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53787) | 0)) {
   HEAP32[i1 >> 2] = 13;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53803) | 0)) {
   HEAP32[i1 >> 2] = 95;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53814) | 0)) {
   HEAP32[i1 >> 2] = 64;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53833) | 0)) {
   HEAP32[i1 >> 2] = 65;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53855) | 0)) {
   HEAP32[i1 >> 2] = 66;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53874) | 0)) {
   HEAP32[i1 >> 2] = 7;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53903) | 0)) {
   HEAP32[i1 >> 2] = 96;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53920) | 0)) {
   HEAP32[i1 >> 2] = 8;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53935) | 0)) {
   HEAP32[i1 >> 2] = 9;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53950) | 0)) {
   HEAP32[i1 >> 2] = 41;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53971) | 0)) {
   HEAP32[i1 >> 2] = 10;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53991) | 0)) {
   HEAP32[i1 >> 2] = 11;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54011) | 0)) {
   HEAP32[i1 >> 2] = 12;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54037) | 0)) {
   HEAP32[i1 >> 2] = 5;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54056) | 0)) {
   HEAP32[i1 >> 2] = 1;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54068) | 0)) {
   HEAP32[i1 >> 2] = 1;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54080) | 0)) {
   HEAP32[i1 >> 2] = 1;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54092) | 0)) {
   HEAP32[i1 >> 2] = 1;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54104) | 0)) {
   HEAP32[i1 >> 2] = 67;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54116) | 0)) {
   HEAP32[i1 >> 2] = 13;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54128) | 0)) {
   HEAP32[i1 >> 2] = 14;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54140) | 0)) {
   HEAP32[i1 >> 2] = 4;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54152) | 0)) {
   HEAP32[i1 >> 2] = 14;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54165) | 0)) {
   HEAP32[i1 >> 2] = 15;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54178) | 0)) {
   HEAP32[i1 >> 2] = 16;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54191) | 0)) {
   HEAP32[i1 >> 2] = 17;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54204) | 0)) {
   HEAP32[i1 >> 2] = 18;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54217) | 0)) {
   HEAP32[i1 >> 2] = 19;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54230) | 0)) {
   HEAP32[i1 >> 2] = 20;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54243) | 0)) {
   HEAP32[i1 >> 2] = 21;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54256) | 0)) {
   HEAP32[i1 >> 2] = 15;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54275) | 0)) {
   HEAP32[i1 >> 2] = 16;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54294) | 0)) {
   HEAP32[i1 >> 2] = 17;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54313) | 0)) {
   HEAP32[i1 >> 2] = 68;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54326) | 0)) {
   HEAP32[i1 >> 2] = 69;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54344) | 0)) {
   HEAP32[i1 >> 2] = 70;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54362) | 0)) {
   HEAP32[i1 >> 2] = 71;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54380) | 0)) {
   HEAP32[i1 >> 2] = 72;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54398) | 0)) {
   HEAP32[i1 >> 2] = 42;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54418) | 0)) {
   HEAP32[i1 >> 2] = 6;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53359) | 0)) {
   HEAP32[i1 >> 2] = 97;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54436) | 0)) {
   HEAP32[i1 >> 2] = 318;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54451) | 0)) {
   HEAP32[i1 >> 2] = 18;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54472) | 0)) {
   HEAP32[i1 >> 2] = 19;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54487) | 0)) {
   HEAP32[i1 >> 2] = 20;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54505) | 0)) {
   HEAP32[i1 >> 2] = 319;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54521) | 0)) {
   HEAP32[i1 >> 2] = 21;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54540) | 0)) {
   HEAP32[i1 >> 2] = 22;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54554) | 0)) {
   HEAP32[i1 >> 2] = 23;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54569) | 0)) {
   HEAP32[i1 >> 2] = 98;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53290) | 0)) {
   HEAP32[i1 >> 2] = 4;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54580) | 0)) {
   HEAP32[i1 >> 2] = 320;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53389) | 0)) {
   HEAP32[i1 >> 2] = 73;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53419) | 0)) {
   HEAP32[i1 >> 2] = 74;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54596) | 0)) {
   HEAP32[i1 >> 2] = 22;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54623) | 0)) {
   HEAP32[i1 >> 2] = 321;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54637) | 0)) {
   HEAP32[i1 >> 2] = 23;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 53325) | 0)) {
   HEAP32[i1 >> 2] = 322;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54657) | 0)) {
   HEAP32[i1 >> 2] = 323;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54675) | 0)) {
   HEAP32[i1 >> 2] = 99;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54687) | 0)) {
   HEAP32[i1 >> 2] = 24;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54708) | 0)) {
   HEAP32[i1 >> 2] = 75;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54726) | 0)) {
   HEAP32[i1 >> 2] = 76;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54744) | 0)) {
   HEAP32[i1 >> 2] = 77;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54765) | 0)) {
   HEAP32[i1 >> 2] = 24;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54791) | 0)) {
   HEAP32[i1 >> 2] = 5;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54814) | 0)) {
   HEAP32[i1 >> 2] = 25;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54852) | 0)) {
   HEAP32[i1 >> 2] = 100;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54868) | 0)) {
   HEAP32[i1 >> 2] = 324;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54883) | 0)) {
   HEAP32[i1 >> 2] = 25;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54906) | 0)) {
   HEAP32[i1 >> 2] = 26;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54919) | 0)) {
   HEAP32[i1 >> 2] = 78;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54933) | 0)) {
   HEAP32[i1 >> 2] = 79;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54947) | 0)) {
   HEAP32[i1 >> 2] = 8;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54967) | 0)) {
   HEAP32[i1 >> 2] = 325;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 54987) | 0)) {
   HEAP32[i1 >> 2] = 27;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55003) | 0)) {
   HEAP32[i1 >> 2] = 28;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55021) | 0)) {
   HEAP32[i1 >> 2] = 26;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55037) | 0)) {
   HEAP32[i1 >> 2] = 29;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55052) | 0)) {
   HEAP32[i1 >> 2] = 326;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55074) | 0)) {
   HEAP32[i1 >> 2] = 80;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55092) | 0)) {
   HEAP32[i1 >> 2] = 81;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55113) | 0)) {
   HEAP32[i1 >> 2] = 327;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55131) | 0)) {
   HEAP32[i1 >> 2] = 328;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55144) | 0)) {
   HEAP32[i1 >> 2] = 6;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55159) | 0)) {
   HEAP32[i1 >> 2] = 329;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55173) | 0)) {
   HEAP32[i1 >> 2] = 1;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55183) | 0)) {
   HEAP32[i1 >> 2] = 1;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55193) | 0)) {
   HEAP32[i1 >> 2] = 9;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55215) | 0)) {
   HEAP32[i1 >> 2] = 330;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55241) | 0)) {
   HEAP32[i1 >> 2] = 331;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55268) | 0)) {
   HEAP32[i1 >> 2] = 27;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55281) | 0)) {
   HEAP32[i1 >> 2] = 30;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55296) | 0)) {
   HEAP32[i1 >> 2] = 6;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55311) | 0)) {
   HEAP32[i1 >> 2] = 7;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55335) | 0)) {
   HEAP32[i1 >> 2] = 5;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55346) | 0)) {
   HEAP32[i1 >> 2] = 82;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55368) | 0)) {
   HEAP32[i1 >> 2] = 31;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55390) | 0)) {
   HEAP32[i1 >> 2] = 7;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55414) | 0)) {
   HEAP32[i1 >> 2] = 8;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55423) | 0)) {
   HEAP32[i1 >> 2] = 9;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55431) | 0)) {
   HEAP32[i1 >> 2] = 1;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55444) | 0)) {
   HEAP32[i1 >> 2] = 2;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55458) | 0)) {
   HEAP32[i1 >> 2] = 332;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55470) | 0)) {
   HEAP32[i1 >> 2] = 333;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55479) | 0)) {
   HEAP32[i1 >> 2] = 334;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55489) | 0)) {
   HEAP32[i1 >> 2] = 335;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55501) | 0)) {
   HEAP32[i1 >> 2] = 336;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55512) | 0)) {
   HEAP32[i1 >> 2] = 337;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55520) | 0)) {
   HEAP32[i1 >> 2] = 3;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55532) | 0)) {
   HEAP32[i1 >> 2] = 338;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55547) | 0)) {
   HEAP32[i1 >> 2] = 339;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55559) | 0)) {
   HEAP32[i1 >> 2] = 340;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55573) | 0)) {
   HEAP32[i1 >> 2] = 101;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55598) | 0)) {
   HEAP32[i1 >> 2] = 341;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55615) | 0)) {
   HEAP32[i1 >> 2] = 342;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55631) | 0)) {
   HEAP32[i1 >> 2] = 343;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55647) | 0)) {
   HEAP32[i1 >> 2] = 102;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55659) | 0)) {
   HEAP32[i1 >> 2] = 83;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55671) | 0)) {
   HEAP32[i1 >> 2] = 84;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55695) | 0)) {
   HEAP32[i1 >> 2] = 1;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55708) | 0)) {
   HEAP32[i1 >> 2] = 2;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55722) | 0)) {
   HEAP32[i1 >> 2] = 85;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55744) | 0)) {
   HEAP32[i1 >> 2] = 86;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55751) | 0)) {
   HEAP32[i1 >> 2] = 3;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55767) | 0)) {
   HEAP32[i1 >> 2] = 2;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55784) | 0)) {
   HEAP32[i1 >> 2] = 1;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55801) | 0)) {
   HEAP32[i1 >> 2] = 28;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55817) | 0)) {
   HEAP32[i1 >> 2] = 1;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55833) | 0)) {
   HEAP32[i1 >> 2] = 2;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55850) | 0)) {
   HEAP32[i1 >> 2] = 29;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55864) | 0)) {
   HEAP32[i1 >> 2] = 30;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55876) | 0)) {
   HEAP32[i1 >> 2] = 32;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55887) | 0)) {
   HEAP32[i1 >> 2] = 2;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55900) | 0)) {
   HEAP32[i1 >> 2] = 33;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55910) | 0)) {
   HEAP32[i1 >> 2] = 2;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55927) | 0)) {
   HEAP32[i1 >> 2] = 34;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55939) | 0)) {
   HEAP32[i1 >> 2] = 35;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55961) | 0)) {
   HEAP32[i1 >> 2] = 36;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55981) | 0)) {
   HEAP32[i1 >> 2] = 3;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 55994) | 0)) {
   HEAP32[i1 >> 2] = 37;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 56016) | 0)) {
   HEAP32[i1 >> 2] = 38;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 56036) | 0)) {
   HEAP32[i1 >> 2] = 2;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 56053) | 0)) {
   HEAP32[i1 >> 2] = 2;
   break;
  }
  if (!(_strcmp(HEAP32[i4 >> 2] | 0, 56070) | 0)) {
   HEAP32[i1 >> 2] = 3;
   break;
  }
  if (_strcmp(HEAP32[i4 >> 2] | 0, 56090) | 0) {
   _emscripten_asm_const_2(11, HEAP32[i2 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
   HEAP32[i1 >> 2] = 0;
   break;
  } else {
   HEAP32[i1 >> 2] = 87;
   break;
  }
 } else HEAP32[i1 >> 2] = 55; while (0);
 STACKTOP = i6;
 return HEAP32[i1 >> 2] | 0;
}

function _SDL_BlendLine_ARGB8888(i19, i17, i18, i6, i7, i5, i1, i4, i3, i2, i8) {
 i19 = i19 | 0;
 i17 = i17 | 0;
 i18 = i18 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i20 = 0, i21 = 0, i22 = 0;
 i1 = i1 & 255;
 if ((i5 + -1 | 0) >>> 0 < 2) {
  i20 = i2 & 255;
  i16 = i20;
  i22 = ((Math_imul(i20, i3 & 255) | 0) >>> 0) / 255 | 0;
  i21 = ((Math_imul(i20, i4 & 255) | 0) >>> 0) / 255 | 0;
  i20 = ((Math_imul(i20, i1) | 0) >>> 0) / 255 | 0;
 } else {
  i16 = i2 & 255;
  i22 = i3 & 255;
  i21 = i4 & 255;
  i20 = i1;
 }
 i15 = i16 ^ 255;
 if ((i7 | 0) == (i18 | 0)) switch (i5 | 0) {
 case 1:
  {
   i1 = Math_imul((HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i7) | 0;
   if ((i6 | 0) < (i17 | 0)) {
    i18 = (i8 | 0) != 0 & 1;
    i3 = (i18 ^ 1) + i6 + i1 | 0;
    i1 = i17 - i6 + i18 | 0;
   } else {
    i3 = i1 + i17 | 0;
    i1 = i6 - i17 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i2 = i1;
   i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i3 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i19 >>> 8 & 255, i15) | 0) >>> 0) / 255 | 0) + i21 << 8 | (((Math_imul(i19 >>> 16 & 255, i15) | 0) >>> 0) / 255 | 0) + i20 << 16 | (((Math_imul(i19 & 255, i15) | 0) >>> 0) / 255 | 0) + i22 | (((Math_imul(i19 >>> 24, i15) | 0) >>> 0) / 255 | 0) + i16 << 24;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 case 2:
  {
   i1 = Math_imul((HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i7) | 0;
   if ((i6 | 0) < (i17 | 0)) {
    i18 = (i8 | 0) != 0 & 1;
    i3 = (i18 ^ 1) + i6 + i1 | 0;
    i1 = i17 - i6 + i18 | 0;
   } else {
    i3 = i1 + i17 | 0;
    i1 = i6 - i17 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i2 = i1;
   i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i3 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i17 = HEAP32[i1 >> 2] | 0;
    i18 = (i17 >>> 16 & 255) + i20 | 0;
    i19 = (i17 >>> 8 & 255) + i21 | 0;
    i16 = (i17 & 255) + i22 | 0;
    HEAP32[i1 >> 2] = (i16 >>> 0 > 255 ? 255 : i16) | i17 & -16777216 | (i18 >>> 0 > 255 ? 16711680 : i18 << 16) | (i19 >>> 0 > 255 ? 65280 : i19 << 8);
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 case 4:
  {
   i1 = Math_imul((HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i7) | 0;
   if ((i6 | 0) < (i17 | 0)) {
    i18 = (i8 | 0) != 0 & 1;
    i3 = (i18 ^ 1) + i6 + i1 | 0;
    i1 = i17 - i6 + i18 | 0;
   } else {
    i3 = i1 + i17 | 0;
    i1 = i6 - i17 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i2 = i1;
   i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i3 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i19 >>> 16 & 255, i20) | 0) >>> 0) / 255 | 0) << 16 | i19 & -16777216 | (((Math_imul(i19 >>> 8 & 255, i21) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i19 & 255, i22) | 0) >>> 0) / 255 | 0);
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 default:
  {
   i1 = Math_imul((HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i7) | 0;
   if ((i6 | 0) < (i17 | 0)) {
    i2 = (i8 | 0) != 0 & 1;
    i1 = (i2 ^ 1) + i6 + i1 | 0;
    i2 = i17 - i6 + i2 | 0;
   } else {
    i1 = i1 + i17 | 0;
    i2 = i6 - i17 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i2) return;
   i3 = i22 | i16 << 24 | i21 << 8 | i20 << 16;
   i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i1 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP32[i1 >> 2] = i3;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 }
 if ((i6 | 0) == (i17 | 0)) switch (i5 | 0) {
 case 1:
  {
   i4 = (HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i18 | 0)) {
    i3 = (Math_imul(i4, i7) | 0) + i6 | 0;
    i1 = (i8 | 0) != 0;
    i3 = i3 + (i1 ? 0 : i4) | 0;
    i1 = i18 - i7 + (i1 & 1) | 0;
   } else {
    i3 = (Math_imul(i4, i18) | 0) + i6 | 0;
    i1 = i7 - i18 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i2 = i1;
   i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i3 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i19 >>> 8 & 255, i15) | 0) >>> 0) / 255 | 0) + i21 << 8 | (((Math_imul(i19 >>> 16 & 255, i15) | 0) >>> 0) / 255 | 0) + i20 << 16 | (((Math_imul(i19 & 255, i15) | 0) >>> 0) / 255 | 0) + i22 | (((Math_imul(i19 >>> 24, i15) | 0) >>> 0) / 255 | 0) + i16 << 24;
    if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
   }
   return;
  }
 case 2:
  {
   i4 = (HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i18 | 0)) {
    i3 = (Math_imul(i4, i7) | 0) + i6 | 0;
    i1 = (i8 | 0) != 0;
    i3 = i3 + (i1 ? 0 : i4) | 0;
    i1 = i18 - i7 + (i1 & 1) | 0;
   } else {
    i3 = (Math_imul(i4, i18) | 0) + i6 | 0;
    i1 = i7 - i18 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i2 = i1;
   i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i3 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i17 = HEAP32[i1 >> 2] | 0;
    i18 = (i17 >>> 16 & 255) + i20 | 0;
    i19 = (i17 >>> 8 & 255) + i21 | 0;
    i16 = (i17 & 255) + i22 | 0;
    HEAP32[i1 >> 2] = (i16 >>> 0 > 255 ? 255 : i16) | i17 & -16777216 | (i18 >>> 0 > 255 ? 16711680 : i18 << 16) | (i19 >>> 0 > 255 ? 65280 : i19 << 8);
    if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
   }
   return;
  }
 case 4:
  {
   i4 = (HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i18 | 0)) {
    i3 = (Math_imul(i4, i7) | 0) + i6 | 0;
    i1 = (i8 | 0) != 0;
    i3 = i3 + (i1 ? 0 : i4) | 0;
    i1 = i18 - i7 + (i1 & 1) | 0;
   } else {
    i3 = (Math_imul(i4, i18) | 0) + i6 | 0;
    i1 = i7 - i18 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i2 = i1;
   i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i3 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i19 >>> 16 & 255, i20) | 0) >>> 0) / 255 | 0) << 16 | i19 & -16777216 | (((Math_imul(i19 >>> 8 & 255, i21) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i19 & 255, i22) | 0) >>> 0) / 255 | 0);
    if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
   }
   return;
  }
 default:
  {
   i4 = (HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i18 | 0)) {
    i1 = (Math_imul(i4, i7) | 0) + i6 | 0;
    i2 = (i8 | 0) != 0;
    i1 = i1 + (i2 ? 0 : i4) | 0;
    i2 = i18 - i7 + (i2 & 1) | 0;
   } else {
    i1 = (Math_imul(i4, i18) | 0) + i6 | 0;
    i2 = i7 - i18 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i2) return;
   i3 = i22 | i16 << 24 | i21 << 8 | i20 << 16;
   i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i1 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP32[i1 >> 2] = i3;
    if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
   }
   return;
  }
 }
 i14 = i17 - i6 | 0;
 i1 = i18 - i7 | 0;
 if ((((i14 | 0) < 0 ? 0 - i14 | 0 : i14) | 0) == (((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0)) switch (i5 | 0) {
 case 1:
  {
   i2 = (HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i18 | 0)) {
    i4 = (Math_imul(i2, i7) | 0) + i6 | 0;
    i3 = i2 + ((i6 | 0) > (i17 | 0) ? -1 : 1) | 0;
    i4 = i4 + ((i8 | 0) == 0 ? i3 : 0) | 0;
   } else {
    i4 = (Math_imul(i2, i18) | 0) + i17 | 0;
    i1 = i7 - i18 | 0;
    i3 = i2 + ((i6 | 0) < (i17 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i2 = i1;
   i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i4 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i19 >>> 8 & 255, i15) | 0) >>> 0) / 255 | 0) + i21 << 8 | (((Math_imul(i19 >>> 16 & 255, i15) | 0) >>> 0) / 255 | 0) + i20 << 16 | (((Math_imul(i19 & 255, i15) | 0) >>> 0) / 255 | 0) + i22 | (((Math_imul(i19 >>> 24, i15) | 0) >>> 0) / 255 | 0) + i16 << 24;
    if (!i2) break; else i1 = i1 + (i3 << 2) | 0;
   }
   return;
  }
 case 2:
  {
   i2 = (HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i18 | 0)) {
    i4 = (Math_imul(i2, i7) | 0) + i6 | 0;
    i3 = i2 + ((i6 | 0) > (i17 | 0) ? -1 : 1) | 0;
    i4 = i4 + ((i8 | 0) == 0 ? i3 : 0) | 0;
   } else {
    i4 = (Math_imul(i2, i18) | 0) + i17 | 0;
    i1 = i7 - i18 | 0;
    i3 = i2 + ((i6 | 0) < (i17 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i2 = i1;
   i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i4 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i17 = HEAP32[i1 >> 2] | 0;
    i18 = (i17 >>> 16 & 255) + i20 | 0;
    i19 = (i17 >>> 8 & 255) + i21 | 0;
    i16 = (i17 & 255) + i22 | 0;
    HEAP32[i1 >> 2] = (i16 >>> 0 > 255 ? 255 : i16) | i17 & -16777216 | (i18 >>> 0 > 255 ? 16711680 : i18 << 16) | (i19 >>> 0 > 255 ? 65280 : i19 << 8);
    if (!i2) break; else i1 = i1 + (i3 << 2) | 0;
   }
   return;
  }
 case 4:
  {
   i2 = (HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i18 | 0)) {
    i4 = (Math_imul(i2, i7) | 0) + i6 | 0;
    i3 = i2 + ((i6 | 0) > (i17 | 0) ? -1 : 1) | 0;
    i4 = i4 + ((i8 | 0) == 0 ? i3 : 0) | 0;
   } else {
    i4 = (Math_imul(i2, i18) | 0) + i17 | 0;
    i1 = i7 - i18 | 0;
    i3 = i2 + ((i6 | 0) < (i17 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i2 = i1;
   i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i4 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i19 >>> 16 & 255, i20) | 0) >>> 0) / 255 | 0) << 16 | i19 & -16777216 | (((Math_imul(i19 >>> 8 & 255, i21) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i19 & 255, i22) | 0) >>> 0) / 255 | 0);
    if (!i2) break; else i1 = i1 + (i3 << 2) | 0;
   }
   return;
  }
 default:
  {
   i2 = (HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i18 | 0)) {
    i5 = (Math_imul(i2, i7) | 0) + i6 | 0;
    i4 = i2 + ((i6 | 0) > (i17 | 0) ? -1 : 1) | 0;
    i5 = i5 + ((i8 | 0) == 0 ? i4 : 0) | 0;
   } else {
    i5 = (Math_imul(i2, i18) | 0) + i17 | 0;
    i1 = i7 - i18 | 0;
    i4 = i2 + ((i6 | 0) < (i17 | 0) ? -1 : 1) | 0;
   }
   i2 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if (!i2) return;
   i3 = i22 | i16 << 24 | i21 << 8 | i20 << 16;
   i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i5 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP32[i1 >> 2] = i3;
    if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
   }
   return;
  }
 } else switch (i5 | 0) {
 case 1:
  {
   i1 = i6 - i17 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i7 - i18 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i14 = i1 << 1;
    i5 = i14 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i4 = 1;
   } else {
    i14 = i2 << 1;
    i5 = i14 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i4 = 0;
   }
   i13 = i3 << 1;
   i11 = (i6 | 0) < (i17 | 0);
   i12 = i11 ? 0 - i2 | 0 : i2;
   i11 = i11 ? -1 : 1;
   i10 = (i7 | 0) < (i18 | 0);
   i9 = i10 ? 0 - i4 | 0 : i4;
   i10 = i10 ? -1 : 1;
   i8 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if ((i8 | 0) <= 0) return;
   i7 = HEAP32[i19 + 20 >> 2] | 0;
   i6 = i19 + 16 | 0;
   i4 = i5;
   i5 = 0;
   i3 = i17;
   i2 = i18;
   while (1) {
    i1 = i7 + ((Math_imul(HEAP32[i6 >> 2] | 0, i2) | 0) + (i3 << 2)) | 0;
    i19 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i19 >>> 8 & 255, i15) | 0) >>> 0) / 255 | 0) + i21 << 8 | (((Math_imul(i19 >>> 16 & 255, i15) | 0) >>> 0) / 255 | 0) + i20 << 16 | (((Math_imul(i19 & 255, i15) | 0) >>> 0) / 255 | 0) + i22 | (((Math_imul(i19 >>> 24, i15) | 0) >>> 0) / 255 | 0) + i16 << 24;
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i8 | 0)) break; else {
     i4 = (i1 ? i14 : i13) + i4 | 0;
     i3 = (i1 ? i12 : i11) + i3 | 0;
     i2 = i2 + (i1 ? i9 : i10) | 0;
    }
   }
   return;
  }
 case 2:
  {
   i1 = i6 - i17 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i7 - i18 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i14 = i1 << 1;
    i5 = i14 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i4 = 1;
   } else {
    i14 = i2 << 1;
    i5 = i14 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i4 = 0;
   }
   i13 = i3 << 1;
   i11 = (i6 | 0) < (i17 | 0);
   i12 = i11 ? 0 - i2 | 0 : i2;
   i11 = i11 ? -1 : 1;
   i10 = (i7 | 0) < (i18 | 0);
   i9 = i10 ? 0 - i4 | 0 : i4;
   i10 = i10 ? -1 : 1;
   i8 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if ((i8 | 0) <= 0) return;
   i7 = HEAP32[i19 + 20 >> 2] | 0;
   i6 = i19 + 16 | 0;
   i4 = i5;
   i5 = 0;
   i3 = i17;
   i2 = i18;
   while (1) {
    i1 = i7 + ((Math_imul(HEAP32[i6 >> 2] | 0, i2) | 0) + (i3 << 2)) | 0;
    i17 = HEAP32[i1 >> 2] | 0;
    i18 = (i17 >>> 16 & 255) + i20 | 0;
    i19 = (i17 >>> 8 & 255) + i21 | 0;
    i16 = (i17 & 255) + i22 | 0;
    HEAP32[i1 >> 2] = (i16 >>> 0 > 255 ? 255 : i16) | i17 & -16777216 | (i18 >>> 0 > 255 ? 16711680 : i18 << 16) | (i19 >>> 0 > 255 ? 65280 : i19 << 8);
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i8 | 0)) break; else {
     i4 = (i1 ? i14 : i13) + i4 | 0;
     i3 = (i1 ? i12 : i11) + i3 | 0;
     i2 = i2 + (i1 ? i9 : i10) | 0;
    }
   }
   return;
  }
 case 4:
  {
   i1 = i6 - i17 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i7 - i18 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i14 = i1 << 1;
    i5 = i14 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i4 = 1;
   } else {
    i14 = i2 << 1;
    i5 = i14 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i4 = 0;
   }
   i13 = i3 << 1;
   i11 = (i6 | 0) < (i17 | 0);
   i12 = i11 ? 0 - i2 | 0 : i2;
   i11 = i11 ? -1 : 1;
   i10 = (i7 | 0) < (i18 | 0);
   i9 = i10 ? 0 - i4 | 0 : i4;
   i10 = i10 ? -1 : 1;
   i8 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if ((i8 | 0) <= 0) return;
   i7 = HEAP32[i19 + 20 >> 2] | 0;
   i6 = i19 + 16 | 0;
   i4 = i5;
   i5 = 0;
   i3 = i17;
   i2 = i18;
   while (1) {
    i1 = i7 + ((Math_imul(HEAP32[i6 >> 2] | 0, i2) | 0) + (i3 << 2)) | 0;
    i19 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i19 >>> 16 & 255, i20) | 0) >>> 0) / 255 | 0) << 16 | i19 & -16777216 | (((Math_imul(i19 >>> 8 & 255, i21) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i19 & 255, i22) | 0) >>> 0) / 255 | 0);
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i8 | 0)) break; else {
     i4 = (i1 ? i14 : i13) + i4 | 0;
     i3 = (i1 ? i12 : i11) + i3 | 0;
     i2 = i2 + (i1 ? i9 : i10) | 0;
    }
   }
   return;
  }
 default:
  {
   i1 = i6 - i17 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i7 - i18 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i15 = i1 << 1;
    i4 = i15 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i5 = 1;
   } else {
    i15 = i2 << 1;
    i4 = i15 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i5 = 0;
   }
   i14 = i3 << 1;
   i12 = (i6 | 0) < (i17 | 0);
   i13 = i12 ? 0 - i2 | 0 : i2;
   i12 = i12 ? -1 : 1;
   i11 = (i7 | 0) < (i18 | 0);
   i10 = i11 ? 0 - i5 | 0 : i5;
   i11 = i11 ? -1 : 1;
   i9 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if ((i9 | 0) <= 0) return;
   i8 = HEAP32[i19 + 20 >> 2] | 0;
   i7 = i19 + 16 | 0;
   i6 = i22 | i16 << 24 | i21 << 8 | i20 << 16;
   i5 = 0;
   i3 = i17;
   i2 = i18;
   while (1) {
    HEAP32[i8 + ((Math_imul(HEAP32[i7 >> 2] | 0, i2) | 0) + (i3 << 2)) >> 2] = i6;
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i9 | 0)) break; else {
     i4 = (i1 ? i15 : i14) + i4 | 0;
     i3 = (i1 ? i13 : i12) + i3 | 0;
     i2 = i2 + (i1 ? i10 : i11) | 0;
    }
   }
   return;
  }
 }
}

function _GLES2_CreateTexture(i4, i30) {
 i4 = i4 | 0;
 i30 = i30 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0;
 i42 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i41 = i42 + 200 | 0;
 i38 = i42 + 176 | 0;
 i34 = i42 + 152 | 0;
 i31 = i42 + 128 | 0;
 i28 = i42 + 104 | 0;
 i24 = i42 + 80 | 0;
 i21 = i42 + 56 | 0;
 i11 = i42 + 32 | 0;
 i8 = i42 + 8 | 0;
 i5 = i42;
 i39 = i4 + 316 | 0;
 i32 = HEAP32[i39 >> 2] | 0;
 i3 = HEAP32[i32 >> 2] | 0;
 if ((HEAP32[3491] | 0) != (i3 | 0)) {
  HEAP32[i32 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i4 + 188 >> 2] | 0, i3) | 0) >= 0) {
   HEAP32[3491] = HEAP32[i32 >> 2];
   _GLES2_UpdateViewport(i4) | 0;
   i1 = HEAP32[i39 >> 2] | 0;
   i40 = 4;
  }
 } else {
  i1 = i32;
  i40 = 4;
 }
 if ((i40 | 0) == 4 ? (HEAP32[i1 + 4 >> 2] | 0) != 0 : 0) {
  i1 = i1 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 7]() | 0) != 0);
 }
 i4 = i30 + 4 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 L10 : do if ((i1 | 0) < 825382478) if ((i1 | 0) < 374740996) if ((i1 | 0) < 372645892) switch (i1 | 0) {
 case 370546692:
  {
   i19 = 6408;
   break L10;
  }
 default:
  {
   i40 = 9;
   break L10;
  }
 } else switch (i1 | 0) {
 case 372645892:
  {
   i19 = 6408;
   break L10;
  }
 default:
  {
   i40 = 9;
   break L10;
  }
 } else if ((i1 | 0) < 376840196) switch (i1 | 0) {
 case 374740996:
  {
   i19 = 6408;
   break L10;
  }
 default:
  {
   i40 = 9;
   break L10;
  }
 } else switch (i1 | 0) {
 case 376840196:
  {
   i19 = 6408;
   break L10;
  }
 default:
  {
   i40 = 9;
   break L10;
  }
 } else {
  L22 : do if ((i1 | 0) < 842094169) if ((i1 | 0) < 842094158) switch (i1 | 0) {
  case 825382478:
   break L22;
  default:
   {
    i40 = 9;
    break L10;
   }
  } else switch (i1 | 0) {
  case 842094158:
   break L22;
  default:
   {
    i40 = 9;
    break L10;
   }
  } else if ((i1 | 0) < 1448433993) switch (i1 | 0) {
  case 842094169:
   break L22;
  default:
   {
    i40 = 9;
    break L10;
   }
  } else switch (i1 | 0) {
  case 1448433993:
   break L22;
  default:
   {
    i40 = 9;
    break L10;
   }
  } while (0);
  i19 = 6409;
 } while (0);
 if ((i40 | 0) == 9) {
  i41 = _SDL_SetError(47699, i5) | 0;
  STACKTOP = i42;
  return i41 | 0;
 }
 i36 = _SDL_calloc(1, 44) | 0;
 if (!i36) {
  i41 = _SDL_Error(0) | 0;
  STACKTOP = i42;
  return i41 | 0;
 }
 HEAP32[i36 >> 2] = 0;
 i17 = i36 + 4 | 0;
 HEAP32[i17 >> 2] = 3553;
 HEAP32[i36 + 8 >> 2] = i19;
 HEAP32[i36 + 12 >> 2] = 5121;
 i13 = HEAP32[i4 >> 2] | 0;
 i5 = i36 + 24 | 0;
 HEAP32[i5 >> 2] = ((i13 | 0) == 1448433993 | (i13 | 0) == 842094169) & 1;
 i12 = i36 + 28 | 0;
 HEAP32[i12 >> 2] = ((i13 | 0) == 842094158 | (i13 | 0) == 825382478) & 1;
 i13 = i36 + 36 | 0;
 HEAP32[i13 >> 2] = 0;
 i9 = i36 + 32 | 0;
 HEAP32[i9 >> 2] = 0;
 i1 = _SDL_GetHint(48391) | 0;
 if ((i1 | 0) != 0 ? (HEAP8[i1 >> 0] | 0) != 48 : 0) {
  i14 = (_SDL_strcasecmp(i1, 48416) | 0) == 0;
  i14 = i14 ? 9728 : 9729;
 } else i14 = 9728;
 i18 = i30 + 8 | 0;
 if ((HEAP32[i18 >> 2] | 0) == 1) {
  i3 = HEAP32[i30 + 12 >> 2] | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  L46 : do if ((i1 | 0) == 0 | (i1 & -268435456 | 0) == 268435456) i1 = i1 & 255; else {
   if ((i1 | 0) < 1498831189) switch (i1 | 0) {
   case 844715353:
    {
     i1 = 2;
     break L46;
    }
   default:
    {}
   } else switch (i1 | 0) {
   case 1498831189:
    {
     i1 = 2;
     break L46;
    }
   default:
    {}
   }
   i1 = (i1 | 0) == 1431918169 ? 2 : 1;
  } while (0);
  i3 = Math_imul(i1, i3) | 0;
  HEAP32[i36 + 20 >> 2] = i3;
  i3 = Math_imul(HEAP32[i30 + 16 >> 2] | 0, i3) | 0;
  i4 = (i3 | 0) / 2 | 0;
  i4 = _SDL_calloc(1, ((HEAP32[i5 >> 2] | 0) == 0 ? 0 : i4) + i3 + ((HEAP32[i12 >> 2] | 0) == 0 ? 0 : i4) | 0) | 0;
  HEAP32[i36 + 16 >> 2] = i4;
  if (!i4) {
   _SDL_free(i36);
   i41 = _SDL_Error(0) | 0;
   STACKTOP = i42;
   return i41 | 0;
  }
 }
 i1 = HEAP32[i39 >> 2] | 0;
 L57 : do if ((HEAP32[i1 + 4 >> 2] | 0) != 0 ? (i7 = i1 + 108 | 0, i6 = FUNCTION_TABLE_i[HEAP32[i7 >> 2] & 7]() | 0, (i6 | 0) != 0) : 0) {
  i1 = 62969;
  i4 = i6;
  while (1) {
   if ((i1 | 0) != 0 ? (HEAP8[i1 >> 0] | 0) != 0 : 0) i3 = i1; else i3 = 46327;
   switch (i4 | 0) {
   case 1280:
    {
     i1 = 46398;
     break;
    }
   case 1281:
    {
     i1 = 46381;
     break;
    }
   case 1282:
    {
     i1 = 46360;
     break;
    }
   case 1285:
    {
     i1 = 46343;
     break;
    }
   default:
    i1 = 46335;
   }
   HEAP32[i8 >> 2] = i3;
   HEAP32[i8 + 4 >> 2] = 46440;
   HEAP32[i8 + 8 >> 2] = 557;
   HEAP32[i8 + 12 >> 2] = 47728;
   HEAP32[i8 + 16 >> 2] = i1;
   HEAP32[i8 + 20 >> 2] = i4;
   _SDL_SetError(46414, i8) | 0;
   i4 = FUNCTION_TABLE_i[HEAP32[i7 >> 2] & 7]() | 0;
   if (!i4) break L57; else i1 = i3;
  }
 } while (0);
 if (HEAP32[i5 >> 2] | 0) {
  i8 = i32 + 96 | 0;
  FUNCTION_TABLE_vii[HEAP32[i8 >> 2] & 127](1, i9);
  i1 = HEAP32[i39 >> 2] | 0;
  if ((HEAP32[i1 + 4 >> 2] | 0) != 0 ? (i10 = i1 + 108 | 0, i2 = FUNCTION_TABLE_i[HEAP32[i10 >> 2] & 7]() | 0, (i2 | 0) != 0) : 0) {
   while (1) {
    switch (i2 | 0) {
    case 1280:
     {
      i1 = 46398;
      break;
     }
    case 1281:
     {
      i1 = 46381;
      break;
     }
    case 1282:
     {
      i1 = 46360;
      break;
     }
    case 1285:
     {
      i1 = 46343;
      break;
     }
    default:
     i1 = 46335;
    }
    HEAP32[i11 >> 2] = 47783;
    HEAP32[i11 + 4 >> 2] = 46440;
    HEAP32[i11 + 8 >> 2] = 561;
    HEAP32[i11 + 12 >> 2] = 47728;
    HEAP32[i11 + 16 >> 2] = i1;
    HEAP32[i11 + 20 >> 2] = i2;
    _SDL_SetError(46414, i11) | 0;
    i2 = FUNCTION_TABLE_i[HEAP32[i10 >> 2] & 7]() | 0;
    if (!i2) {
     i1 = -1;
     break;
    }
   }
   STACKTOP = i42;
   return i1 | 0;
  }
  i6 = i32 + 16 | 0;
  FUNCTION_TABLE_vi[HEAP32[i6 >> 2] & 511](33986);
  i7 = i32 + 28 | 0;
  FUNCTION_TABLE_vii[HEAP32[i7 >> 2] & 127](HEAP32[i17 >> 2] | 0, HEAP32[i9 >> 2] | 0);
  i2 = i32 + 160 | 0;
  FUNCTION_TABLE_viii[HEAP32[i2 >> 2] & 31](HEAP32[i17 >> 2] | 0, 10241, i14);
  FUNCTION_TABLE_viii[HEAP32[i2 >> 2] & 31](HEAP32[i17 >> 2] | 0, 10240, i14);
  FUNCTION_TABLE_viii[HEAP32[i2 >> 2] & 31](HEAP32[i17 >> 2] | 0, 10242, 33071);
  FUNCTION_TABLE_viii[HEAP32[i2 >> 2] & 31](HEAP32[i17 >> 2] | 0, 10243, 33071);
  i3 = i32 + 156 | 0;
  i4 = i30 + 12 | 0;
  i5 = i30 + 16 | 0;
  FUNCTION_TABLE_viiiiiiiii[HEAP32[i3 >> 2] & 15](HEAP32[i17 >> 2] | 0, 0, i19, (HEAP32[i4 >> 2] | 0) / 2 | 0, (HEAP32[i5 >> 2] | 0) / 2 | 0, 0, i19, 5121, 0);
  FUNCTION_TABLE_vii[HEAP32[i8 >> 2] & 127](1, i13);
  i1 = HEAP32[i39 >> 2] | 0;
  if ((HEAP32[i1 + 4 >> 2] | 0) != 0 ? (i20 = i1 + 108 | 0, i15 = FUNCTION_TABLE_i[HEAP32[i20 >> 2] & 7]() | 0, (i15 | 0) != 0) : 0) {
   i2 = i15;
   while (1) {
    switch (i2 | 0) {
    case 1280:
     {
      i1 = 46398;
      break;
     }
    case 1281:
     {
      i1 = 46381;
      break;
     }
    case 1282:
     {
      i1 = 46360;
      break;
     }
    case 1285:
     {
      i1 = 46343;
      break;
     }
    default:
     i1 = 46335;
    }
    HEAP32[i21 >> 2] = 47783;
    HEAP32[i21 + 4 >> 2] = 46440;
    HEAP32[i21 + 8 >> 2] = 573;
    HEAP32[i21 + 12 >> 2] = 47728;
    HEAP32[i21 + 16 >> 2] = i1;
    HEAP32[i21 + 20 >> 2] = i2;
    _SDL_SetError(46414, i21) | 0;
    i2 = FUNCTION_TABLE_i[HEAP32[i20 >> 2] & 7]() | 0;
    if (!i2) {
     i1 = -1;
     break;
    }
   }
   STACKTOP = i42;
   return i1 | 0;
  }
  FUNCTION_TABLE_vi[HEAP32[i6 >> 2] & 511](33985);
  FUNCTION_TABLE_vii[HEAP32[i7 >> 2] & 127](HEAP32[i17 >> 2] | 0, HEAP32[i13 >> 2] | 0);
  FUNCTION_TABLE_viii[HEAP32[i2 >> 2] & 31](HEAP32[i17 >> 2] | 0, 10241, i14);
  FUNCTION_TABLE_viii[HEAP32[i2 >> 2] & 31](HEAP32[i17 >> 2] | 0, 10240, i14);
  FUNCTION_TABLE_viii[HEAP32[i2 >> 2] & 31](HEAP32[i17 >> 2] | 0, 10242, 33071);
  FUNCTION_TABLE_viii[HEAP32[i2 >> 2] & 31](HEAP32[i17 >> 2] | 0, 10243, 33071);
  FUNCTION_TABLE_viiiiiiiii[HEAP32[i3 >> 2] & 15](HEAP32[i17 >> 2] | 0, 0, i19, (HEAP32[i4 >> 2] | 0) / 2 | 0, (HEAP32[i5 >> 2] | 0) / 2 | 0, 0, i19, 5121, 0);
  i1 = HEAP32[i39 >> 2] | 0;
  if ((HEAP32[i1 + 4 >> 2] | 0) != 0 ? (i22 = i1 + 108 | 0, i16 = FUNCTION_TABLE_i[HEAP32[i22 >> 2] & 7]() | 0, (i16 | 0) != 0) : 0) {
   i2 = i16;
   while (1) {
    switch (i2 | 0) {
    case 1280:
     {
      i1 = 46398;
      break;
     }
    case 1281:
     {
      i1 = 46381;
      break;
     }
    case 1282:
     {
      i1 = 46360;
      break;
     }
    case 1285:
     {
      i1 = 46343;
      break;
     }
    default:
     i1 = 46335;
    }
    HEAP32[i24 >> 2] = 47798;
    HEAP32[i24 + 4 >> 2] = 46440;
    HEAP32[i24 + 8 >> 2] = 583;
    HEAP32[i24 + 12 >> 2] = 47728;
    HEAP32[i24 + 16 >> 2] = i1;
    HEAP32[i24 + 20 >> 2] = i2;
    _SDL_SetError(46414, i24) | 0;
    i2 = FUNCTION_TABLE_i[HEAP32[i22 >> 2] & 7]() | 0;
    if (!i2) {
     i1 = -1;
     break;
    }
   }
   STACKTOP = i42;
   return i1 | 0;
  }
 }
 i2 = i32 + 96 | 0;
 if (HEAP32[i12 >> 2] | 0) {
  FUNCTION_TABLE_vii[HEAP32[i2 >> 2] & 127](1, i13);
  i1 = HEAP32[i39 >> 2] | 0;
  if ((HEAP32[i1 + 4 >> 2] | 0) != 0 ? (i26 = i1 + 108 | 0, i23 = FUNCTION_TABLE_i[HEAP32[i26 >> 2] & 7]() | 0, (i23 | 0) != 0) : 0) {
   i2 = i23;
   while (1) {
    switch (i2 | 0) {
    case 1280:
     {
      i1 = 46398;
      break;
     }
    case 1281:
     {
      i1 = 46381;
      break;
     }
    case 1282:
     {
      i1 = 46360;
      break;
     }
    case 1285:
     {
      i1 = 46343;
      break;
     }
    default:
     i1 = 46335;
    }
    HEAP32[i28 >> 2] = 47783;
    HEAP32[i28 + 4 >> 2] = 46440;
    HEAP32[i28 + 8 >> 2] = 590;
    HEAP32[i28 + 12 >> 2] = 47728;
    HEAP32[i28 + 16 >> 2] = i1;
    HEAP32[i28 + 20 >> 2] = i2;
    _SDL_SetError(46414, i28) | 0;
    i2 = FUNCTION_TABLE_i[HEAP32[i26 >> 2] & 7]() | 0;
    if (!i2) {
     i1 = -1;
     break;
    }
   }
   STACKTOP = i42;
   return i1 | 0;
  }
  FUNCTION_TABLE_vi[HEAP32[i32 + 16 >> 2] & 511](33985);
  FUNCTION_TABLE_vii[HEAP32[i32 + 28 >> 2] & 127](HEAP32[i17 >> 2] | 0, HEAP32[i13 >> 2] | 0);
  i1 = i32 + 160 | 0;
  FUNCTION_TABLE_viii[HEAP32[i1 >> 2] & 31](HEAP32[i17 >> 2] | 0, 10241, i14);
  FUNCTION_TABLE_viii[HEAP32[i1 >> 2] & 31](HEAP32[i17 >> 2] | 0, 10240, i14);
  FUNCTION_TABLE_viii[HEAP32[i1 >> 2] & 31](HEAP32[i17 >> 2] | 0, 10242, 33071);
  FUNCTION_TABLE_viii[HEAP32[i1 >> 2] & 31](HEAP32[i17 >> 2] | 0, 10243, 33071);
  FUNCTION_TABLE_viiiiiiiii[HEAP32[i32 + 156 >> 2] & 15](HEAP32[i17 >> 2] | 0, 0, 6410, (HEAP32[i30 + 12 >> 2] | 0) / 2 | 0, (HEAP32[i30 + 16 >> 2] | 0) / 2 | 0, 0, 6410, 5121, 0);
  i1 = HEAP32[i39 >> 2] | 0;
  if ((HEAP32[i1 + 4 >> 2] | 0) != 0 ? (i29 = i1 + 108 | 0, i25 = FUNCTION_TABLE_i[HEAP32[i29 >> 2] & 7]() | 0, (i25 | 0) != 0) : 0) {
   i2 = i25;
   while (1) {
    switch (i2 | 0) {
    case 1280:
     {
      i1 = 46398;
      break;
     }
    case 1281:
     {
      i1 = 46381;
      break;
     }
    case 1282:
     {
      i1 = 46360;
      break;
     }
    case 1285:
     {
      i1 = 46343;
      break;
     }
    default:
     i1 = 46335;
    }
    HEAP32[i31 >> 2] = 47798;
    HEAP32[i31 + 4 >> 2] = 46440;
    HEAP32[i31 + 8 >> 2] = 600;
    HEAP32[i31 + 12 >> 2] = 47728;
    HEAP32[i31 + 16 >> 2] = i1;
    HEAP32[i31 + 20 >> 2] = i2;
    _SDL_SetError(46414, i31) | 0;
    i2 = FUNCTION_TABLE_i[HEAP32[i29 >> 2] & 7]() | 0;
    if (!i2) {
     i1 = -1;
     break;
    }
   }
   STACKTOP = i42;
   return i1 | 0;
  }
 }
 FUNCTION_TABLE_vii[HEAP32[i2 >> 2] & 127](1, i36);
 i1 = HEAP32[i39 >> 2] | 0;
 if ((HEAP32[i1 + 4 >> 2] | 0) != 0 ? (i33 = i1 + 108 | 0, i27 = FUNCTION_TABLE_i[HEAP32[i33 >> 2] & 7]() | 0, (i27 | 0) != 0) : 0) {
  i2 = i27;
  while (1) {
   switch (i2 | 0) {
   case 1280:
    {
     i1 = 46398;
     break;
    }
   case 1281:
    {
     i1 = 46381;
     break;
    }
   case 1282:
    {
     i1 = 46360;
     break;
    }
   case 1285:
    {
     i1 = 46343;
     break;
    }
   default:
    i1 = 46335;
   }
   HEAP32[i34 >> 2] = 47783;
   HEAP32[i34 + 4 >> 2] = 46440;
   HEAP32[i34 + 8 >> 2] = 606;
   HEAP32[i34 + 12 >> 2] = 47728;
   HEAP32[i34 + 16 >> 2] = i1;
   HEAP32[i34 + 20 >> 2] = i2;
   _SDL_SetError(46414, i34) | 0;
   i2 = FUNCTION_TABLE_i[HEAP32[i33 >> 2] & 7]() | 0;
   if (!i2) {
    i1 = -1;
    break;
   }
  }
  STACKTOP = i42;
  return i1 | 0;
 }
 HEAP32[i30 + 68 >> 2] = i36;
 FUNCTION_TABLE_vi[HEAP32[i32 + 16 >> 2] & 511](33984);
 FUNCTION_TABLE_vii[HEAP32[i32 + 28 >> 2] & 127](HEAP32[i17 >> 2] | 0, HEAP32[i36 >> 2] | 0);
 i2 = i32 + 160 | 0;
 FUNCTION_TABLE_viii[HEAP32[i2 >> 2] & 31](HEAP32[i17 >> 2] | 0, 10241, i14);
 FUNCTION_TABLE_viii[HEAP32[i2 >> 2] & 31](HEAP32[i17 >> 2] | 0, 10240, i14);
 FUNCTION_TABLE_viii[HEAP32[i2 >> 2] & 31](HEAP32[i17 >> 2] | 0, 10242, 33071);
 FUNCTION_TABLE_viii[HEAP32[i2 >> 2] & 31](HEAP32[i17 >> 2] | 0, 10243, 33071);
 i2 = i30 + 12 | 0;
 i3 = i30 + 16 | 0;
 FUNCTION_TABLE_viiiiiiiii[HEAP32[i32 + 156 >> 2] & 15](HEAP32[i17 >> 2] | 0, 0, i19, HEAP32[i2 >> 2] | 0, HEAP32[i3 >> 2] | 0, 0, i19, 5121, 0);
 i1 = HEAP32[i39 >> 2] | 0;
 if ((HEAP32[i1 + 4 >> 2] | 0) != 0 ? (i37 = i1 + 108 | 0, i35 = FUNCTION_TABLE_i[HEAP32[i37 >> 2] & 7]() | 0, (i35 | 0) != 0) : 0) {
  i2 = i35;
  while (1) {
   switch (i2 | 0) {
   case 1280:
    {
     i1 = 46398;
     break;
    }
   case 1281:
    {
     i1 = 46381;
     break;
    }
   case 1282:
    {
     i1 = 46360;
     break;
    }
   case 1285:
    {
     i1 = 46343;
     break;
    }
   default:
    i1 = 46335;
   }
   HEAP32[i38 >> 2] = 47798;
   HEAP32[i38 + 4 >> 2] = 46440;
   HEAP32[i38 + 8 >> 2] = 617;
   HEAP32[i38 + 12 >> 2] = 47728;
   HEAP32[i38 + 16 >> 2] = i1;
   HEAP32[i38 + 20 >> 2] = i2;
   _SDL_SetError(46414, i38) | 0;
   i2 = FUNCTION_TABLE_i[HEAP32[i37 >> 2] & 7]() | 0;
   if (!i2) {
    i1 = -1;
    break;
   }
  }
  STACKTOP = i42;
  return i1 | 0;
 }
 if ((HEAP32[i18 >> 2] | 0) == 2) {
  i5 = HEAP32[i39 >> 2] | 0;
  i4 = HEAP32[i2 >> 2] | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  i3 = i5 + 232 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  L161 : do if (!i1) i40 = 96; else while (1) {
   if ((HEAP32[i1 >> 2] | 0) == (i4 | 0) ? (HEAP32[i1 + 4 >> 2] | 0) == (i2 | 0) : 0) break L161;
   i1 = HEAP32[i1 + 12 >> 2] | 0;
   if (!i1) {
    i40 = 96;
    break;
   }
  } while (0);
  if ((i40 | 0) == 96) {
   i1 = _SDL_malloc(16) | 0;
   HEAP32[i1 >> 2] = i4;
   HEAP32[i1 + 4 >> 2] = i2;
   FUNCTION_TABLE_vii[HEAP32[i5 + 92 >> 2] & 127](1, i1 + 8 | 0);
   HEAP32[i1 + 12 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i3 >> 2] = i1;
  }
  HEAP32[i36 + 40 >> 2] = i1;
 } else HEAP32[i36 + 40 >> 2] = 0;
 i1 = HEAP32[i39 >> 2] | 0;
 if (!(HEAP32[i1 + 4 >> 2] | 0)) {
  i41 = 0;
  STACKTOP = i42;
  return i41 | 0;
 }
 i4 = i1 + 108 | 0;
 i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
 if (!i1) {
  i41 = 0;
  STACKTOP = i42;
  return i41 | 0;
 } else i2 = 62969;
 while (1) {
  if ((i2 | 0) != 0 ? (HEAP8[i2 >> 0] | 0) != 0 : 0) i3 = i2; else i3 = 46327;
  switch (i1 | 0) {
  case 1280:
   {
    i2 = 46398;
    break;
   }
  case 1281:
   {
    i2 = 46381;
    break;
   }
  case 1282:
   {
    i2 = 46360;
    break;
   }
  case 1285:
   {
    i2 = 46343;
    break;
   }
  default:
   i2 = 46335;
  }
  HEAP32[i41 >> 2] = i3;
  HEAP32[i41 + 4 >> 2] = 46440;
  HEAP32[i41 + 8 >> 2] = 627;
  HEAP32[i41 + 12 >> 2] = 47728;
  HEAP32[i41 + 16 >> 2] = i2;
  HEAP32[i41 + 20 >> 2] = i1;
  _SDL_SetError(46414, i41) | 0;
  i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
  if (!i1) {
   i1 = -1;
   break;
  } else i2 = i3;
 }
 STACKTOP = i42;
 return i1 | 0;
}

function _SDL_Blit_Slow(i62) {
 i62 = i62 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i63 = 0;
 i1 = HEAP32[i62 + 52 >> 2] | 0;
 i36 = HEAPU8[i62 + 60 >> 0] | 0;
 i61 = HEAPU8[i62 + 61 >> 0] | 0;
 i26 = HEAPU8[i62 + 62 >> 0] | 0;
 i27 = HEAPU8[i62 + 63 >> 0] | 0;
 i4 = HEAP32[i62 + 40 >> 2] | 0;
 i2 = HEAP32[i62 + 44 >> 2] | 0;
 i3 = HEAP8[i4 + 9 >> 0] | 0;
 i28 = i3 & 255;
 i29 = HEAPU8[i2 + 9 >> 0] | 0;
 i30 = i62 + 28 | 0;
 i60 = HEAP32[i30 >> 2] | 0;
 i31 = (HEAP32[i62 + 8 >> 2] << 16 | 0) / (i60 | 0) | 0;
 i32 = i62 + 24 | 0;
 i5 = HEAP32[i32 >> 2] | 0;
 i33 = (HEAP32[i62 + 4 >> 2] << 16 | 0) / (i5 | 0) | 0;
 HEAP32[i30 >> 2] = i60 + -1;
 if (!i60) return;
 i34 = i62 + 20 | 0;
 i35 = i62 + 32 | 0;
 i37 = i4 + 24 | 0;
 i38 = i4 + 12 | 0;
 i39 = i4 + 32 | 0;
 i40 = i4 + 28 | 0;
 i41 = i4 + 16 | 0;
 i42 = i4 + 33 | 0;
 i43 = i4 + 29 | 0;
 i44 = i4 + 20 | 0;
 i45 = i4 + 34 | 0;
 i46 = i4 + 30 | 0;
 i47 = (i1 & 256 | 0) == 0;
 i48 = i2 + 24 | 0;
 i49 = i2 + 12 | 0;
 i50 = i2 + 32 | 0;
 i51 = i2 + 28 | 0;
 i52 = i2 + 16 | 0;
 i53 = i2 + 33 | 0;
 i54 = i2 + 29 | 0;
 i55 = i2 + 20 | 0;
 i56 = i2 + 34 | 0;
 i57 = i2 + 30 | 0;
 i58 = (i1 & 1 | 0) == 0;
 i59 = (i1 & 2 | 0) == 0;
 i60 = (i1 & 48 | 0) != 0;
 i24 = i1 & 112;
 i25 = i2 + 31 | 0;
 i23 = i2 + 35 | 0;
 i20 = i3 << 24 >> 24 == 3;
 i21 = i62 + 56 | 0;
 i22 = i4 + 35 | 0;
 i18 = i4 + 31 | 0;
 i19 = i62 + 12 | 0;
 i1 = HEAP32[i34 >> 2] | 0;
 i2 = 0;
 i3 = 0;
 while (1) {
  if ((i2 | 0) > 65535) {
   i2 = i2 + -65536 | 0;
   i17 = i2 >>> 16;
   i2 = i2 - (i17 << 16) | 0;
   i3 = i3 + 1 + i17 | 0;
  }
  if (i5) {
   i4 = 65536;
   i6 = 0;
   i7 = -1;
   while (1) {
    i5 = i5 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i6 = i4 + -65536 | 0;
     i17 = i6 >>> 16;
     i7 = i7 + 1 + i17 | 0;
     i17 = i6 - (i17 << 16) | 0;
     i6 = (HEAP32[i62 >> 2] | 0) + ((Math_imul(HEAP32[i19 >> 2] | 0, i3) | 0) + (Math_imul(i7, i28) | 0)) | 0;
    } else i17 = i4;
    i4 = HEAP32[i37 >> 2] | 0;
    L15 : do if (!i4) switch (i28 | 0) {
    case 1:
     {
      i4 = HEAPU8[i6 >> 0] | 0;
      i15 = 255;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i46 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i44 >> 2] & i4) >>> (HEAPU8[i45 >> 0] | 0)) >> 0] | 0;
      i13 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i43 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i41 >> 2] & i4) >>> (HEAPU8[i42 >> 0] | 0)) >> 0] | 0;
      i14 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i40 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i38 >> 2]) >>> (HEAPU8[i39 >> 0] | 0)) >> 0] | 0;
      break L15;
     }
    case 2:
     {
      i4 = HEAPU16[i6 >> 1] | 0;
      i15 = 255;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i46 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i44 >> 2] & i4) >>> (HEAPU8[i45 >> 0] | 0)) >> 0] | 0;
      i13 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i43 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i41 >> 2] & i4) >>> (HEAPU8[i42 >> 0] | 0)) >> 0] | 0;
      i14 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i40 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i38 >> 2]) >>> (HEAPU8[i39 >> 0] | 0)) >> 0] | 0;
      break L15;
     }
    case 3:
     {
      i15 = 255;
      i11 = HEAPU8[i6 + ((HEAPU8[i45 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i13 = HEAPU8[i6 + ((HEAPU8[i42 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i14 = HEAPU8[i6 + ((HEAPU8[i39 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i4 = 0;
      break L15;
     }
    case 4:
     {
      i4 = HEAP32[i6 >> 2] | 0;
      i15 = 255;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i46 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i44 >> 2] & i4) >>> (HEAPU8[i45 >> 0] | 0)) >> 0] | 0;
      i13 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i43 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i41 >> 2] & i4) >>> (HEAPU8[i42 >> 0] | 0)) >> 0] | 0;
      i14 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i40 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i38 >> 2] & i4) >>> (HEAPU8[i39 >> 0] | 0)) >> 0] | 0;
      break L15;
     }
    default:
     {
      i15 = 255;
      i11 = 0;
      i13 = 0;
      i14 = 0;
      i4 = 0;
      break L15;
     }
    } else switch (i28 | 0) {
    case 1:
     {
      i16 = HEAPU8[i6 >> 0] | 0;
      i15 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((i16 & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i46 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i44 >> 2] & i16) >>> (HEAPU8[i45 >> 0] | 0)) >> 0] | 0;
      i13 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i43 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i41 >> 2] & i16) >>> (HEAPU8[i42 >> 0] | 0)) >> 0] | 0;
      i14 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i40 >> 0] | 0) << 2) >> 2] | 0) + ((i16 & HEAP32[i38 >> 2]) >>> (HEAPU8[i39 >> 0] | 0)) >> 0] | 0;
      i4 = i16;
      break L15;
     }
    case 2:
     {
      i16 = HEAPU16[i6 >> 1] | 0;
      i15 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((i16 & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i46 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i44 >> 2] & i16) >>> (HEAPU8[i45 >> 0] | 0)) >> 0] | 0;
      i13 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i43 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i41 >> 2] & i16) >>> (HEAPU8[i42 >> 0] | 0)) >> 0] | 0;
      i14 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i40 >> 0] | 0) << 2) >> 2] | 0) + ((i16 & HEAP32[i38 >> 2]) >>> (HEAPU8[i39 >> 0] | 0)) >> 0] | 0;
      i4 = i16;
      break L15;
     }
    case 3:
     {
      i15 = 255;
      i11 = HEAPU8[i6 + ((HEAPU8[i45 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i13 = HEAPU8[i6 + ((HEAPU8[i42 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i14 = HEAPU8[i6 + ((HEAPU8[i39 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i4 = 0;
      break L15;
     }
    case 4:
     {
      i16 = HEAP32[i6 >> 2] | 0;
      i15 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((i16 & i4) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i46 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i44 >> 2] & i16) >>> (HEAPU8[i45 >> 0] | 0)) >> 0] | 0;
      i13 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i43 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i41 >> 2] & i16) >>> (HEAPU8[i42 >> 0] | 0)) >> 0] | 0;
      i14 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i40 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i38 >> 2] & i16) >>> (HEAPU8[i39 >> 0] | 0)) >> 0] | 0;
      i4 = i16;
      break L15;
     }
    default:
     {
      i15 = 0;
      i11 = 0;
      i13 = 0;
      i14 = 0;
      i4 = 0;
      break L15;
     }
    } while (0);
    if (!i47) {
     if (i20) i4 = i13 << (HEAPU8[i42 >> 0] | 0) | i14 << (HEAPU8[i39 >> 0] | 0) | i11 << (HEAPU8[i45 >> 0] | 0);
     if ((i4 | 0) != (HEAP32[i21 >> 2] | 0)) i63 = 24;
    } else i63 = 24;
    L34 : do if ((i63 | 0) == 24) {
     i63 = 0;
     i4 = HEAP32[i48 >> 2] | 0;
     i16 = (i4 | 0) == 0;
     L36 : do if (i16) switch (i29 | 0) {
     case 1:
      {
       i4 = HEAPU8[i1 >> 0] | 0;
       i10 = 255;
       i9 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i57 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i55 >> 2] & i4) >>> (HEAPU8[i56 >> 0] | 0)) >> 0] | 0;
       i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i54 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i52 >> 2] & i4) >>> (HEAPU8[i53 >> 0] | 0)) >> 0] | 0;
       i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i51 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i49 >> 2]) >>> (HEAPU8[i50 >> 0] | 0)) >> 0] | 0;
       break L36;
      }
     case 2:
      {
       i4 = HEAPU16[i1 >> 1] | 0;
       i10 = 255;
       i9 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i57 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i55 >> 2] & i4) >>> (HEAPU8[i56 >> 0] | 0)) >> 0] | 0;
       i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i54 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i52 >> 2] & i4) >>> (HEAPU8[i53 >> 0] | 0)) >> 0] | 0;
       i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i51 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i49 >> 2]) >>> (HEAPU8[i50 >> 0] | 0)) >> 0] | 0;
       break L36;
      }
     case 3:
      {
       i10 = 255;
       i9 = HEAPU8[i1 + ((HEAPU8[i56 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
       i8 = HEAPU8[i1 + ((HEAPU8[i53 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
       i4 = HEAPU8[i1 + ((HEAPU8[i50 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
       break L36;
      }
     case 4:
      {
       i4 = HEAP32[i1 >> 2] | 0;
       i10 = 255;
       i9 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i57 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i55 >> 2] & i4) >>> (HEAPU8[i56 >> 0] | 0)) >> 0] | 0;
       i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i54 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i52 >> 2] & i4) >>> (HEAPU8[i53 >> 0] | 0)) >> 0] | 0;
       i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i51 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i49 >> 2] & i4) >>> (HEAPU8[i50 >> 0] | 0)) >> 0] | 0;
       break L36;
      }
     default:
      {
       i10 = 255;
       i9 = 0;
       i8 = 0;
       i4 = 0;
       break L36;
      }
     } else switch (i29 | 0) {
     case 1:
      {
       i12 = HEAPU8[i1 >> 0] | 0;
       i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i25 >> 0] | 0) << 2) >> 2] | 0) + ((i12 & i4) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
       i9 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i57 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i55 >> 2] & i12) >>> (HEAPU8[i56 >> 0] | 0)) >> 0] | 0;
       i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i54 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i52 >> 2] & i12) >>> (HEAPU8[i53 >> 0] | 0)) >> 0] | 0;
       i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i51 >> 0] | 0) << 2) >> 2] | 0) + ((i12 & HEAP32[i49 >> 2]) >>> (HEAPU8[i50 >> 0] | 0)) >> 0] | 0;
       break L36;
      }
     case 2:
      {
       i12 = HEAPU16[i1 >> 1] | 0;
       i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i25 >> 0] | 0) << 2) >> 2] | 0) + ((i12 & i4) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
       i9 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i57 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i55 >> 2] & i12) >>> (HEAPU8[i56 >> 0] | 0)) >> 0] | 0;
       i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i54 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i52 >> 2] & i12) >>> (HEAPU8[i53 >> 0] | 0)) >> 0] | 0;
       i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i51 >> 0] | 0) << 2) >> 2] | 0) + ((i12 & HEAP32[i49 >> 2]) >>> (HEAPU8[i50 >> 0] | 0)) >> 0] | 0;
       break L36;
      }
     case 3:
      {
       i10 = 255;
       i9 = HEAPU8[i1 + ((HEAPU8[i56 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
       i8 = HEAPU8[i1 + ((HEAPU8[i53 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
       i4 = HEAPU8[i1 + ((HEAPU8[i50 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
       break L36;
      }
     case 4:
      {
       i12 = HEAP32[i1 >> 2] | 0;
       i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i25 >> 0] | 0) << 2) >> 2] | 0) + ((i12 & i4) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
       i9 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i57 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i55 >> 2] & i12) >>> (HEAPU8[i56 >> 0] | 0)) >> 0] | 0;
       i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i54 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i52 >> 2] & i12) >>> (HEAPU8[i53 >> 0] | 0)) >> 0] | 0;
       i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i51 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i49 >> 2] & i12) >>> (HEAPU8[i50 >> 0] | 0)) >> 0] | 0;
       break L36;
      }
     default:
      {
       i10 = 0;
       i9 = 0;
       i8 = 0;
       i4 = 0;
       break L36;
      }
     } while (0);
     if (i58) i12 = i11; else {
      i12 = ((Math_imul(i11, i26) | 0) >>> 0) / 255 | 0;
      i13 = ((Math_imul(i13, i61) | 0) >>> 0) / 255 | 0;
      i14 = ((Math_imul(i14, i36) | 0) >>> 0) / 255 | 0;
     }
     i11 = ((Math_imul(i15, i27) | 0) >>> 0) / 255 | 0;
     i11 = i59 ? i15 : i11;
     if (i60 & i11 >>> 0 < 255) {
      i12 = ((Math_imul(i11, i12) | 0) >>> 0) / 255 | 0;
      i13 = ((Math_imul(i11, i13) | 0) >>> 0) / 255 | 0;
      i14 = ((Math_imul(i11, i14) | 0) >>> 0) / 255 | 0;
     }
     switch (i24 | 0) {
     case 0:
      {
       i10 = i11;
       i9 = i12;
       i8 = i13;
       i4 = i14;
       break;
      }
     case 16:
      {
       i15 = 255 - i11 | 0;
       i9 = (((Math_imul(i15, i9) | 0) >>> 0) / 255 | 0) + i12 | 0;
       i8 = (((Math_imul(i15, i8) | 0) >>> 0) / 255 | 0) + i13 | 0;
       i4 = (((Math_imul(i15, i4) | 0) >>> 0) / 255 | 0) + i14 | 0;
       break;
      }
     case 32:
      {
       i4 = i14 + i4 | 0;
       i8 = i13 + i8 | 0;
       i9 = i12 + i9 | 0;
       i9 = i9 >>> 0 > 255 ? 255 : i9;
       i8 = i8 >>> 0 > 255 ? 255 : i8;
       i4 = i4 >>> 0 > 255 ? 255 : i4;
       break;
      }
     case 64:
      {
       i9 = ((Math_imul(i12, i9) | 0) >>> 0) / 255 | 0;
       i8 = ((Math_imul(i13, i8) | 0) >>> 0) / 255 | 0;
       i4 = ((Math_imul(i14, i4) | 0) >>> 0) / 255 | 0;
       break;
      }
     default:
      {}
     }
     if (i16) switch (i29 | 0) {
     case 1:
      {
       HEAP8[i1 >> 0] = i4 >>> (HEAPU8[i51 >> 0] | 0) << (HEAPU8[i50 >> 0] | 0) | i8 >>> (HEAPU8[i54 >> 0] | 0) << (HEAPU8[i53 >> 0] | 0) | i9 >>> (HEAPU8[i57 >> 0] | 0) << (HEAPU8[i56 >> 0] | 0);
       break L34;
      }
     case 2:
      {
       HEAP16[i1 >> 1] = i4 >>> (HEAPU8[i51 >> 0] | 0) << (HEAPU8[i50 >> 0] | 0) | i8 >>> (HEAPU8[i54 >> 0] | 0) << (HEAPU8[i53 >> 0] | 0) | i9 >>> (HEAPU8[i57 >> 0] | 0) << (HEAPU8[i56 >> 0] | 0);
       break L34;
      }
     case 3:
      {
       HEAP8[i1 + ((HEAPU8[i50 >> 0] | 0) >>> 3 & 255) >> 0] = i4;
       HEAP8[i1 + ((HEAPU8[i53 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
       HEAP8[i1 + ((HEAPU8[i56 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
       break L34;
      }
     case 4:
      {
       HEAP32[i1 >> 2] = i4 >>> (HEAPU8[i51 >> 0] | 0) << (HEAPU8[i50 >> 0] | 0) | i8 >>> (HEAPU8[i54 >> 0] | 0) << (HEAPU8[i53 >> 0] | 0) | i9 >>> (HEAPU8[i57 >> 0] | 0) << (HEAPU8[i56 >> 0] | 0);
       break L34;
      }
     default:
      break L34;
     } else switch (i29 | 0) {
     case 1:
      {
       HEAP8[i1 >> 0] = i8 >>> (HEAPU8[i54 >> 0] | 0) << (HEAPU8[i53 >> 0] | 0) | i4 >>> (HEAPU8[i51 >> 0] | 0) << (HEAPU8[i50 >> 0] | 0) | i9 >>> (HEAPU8[i57 >> 0] | 0) << (HEAPU8[i56 >> 0] | 0) | i10 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
       break L34;
      }
     case 2:
      {
       HEAP16[i1 >> 1] = i8 >>> (HEAPU8[i54 >> 0] | 0) << (HEAPU8[i53 >> 0] | 0) | i4 >>> (HEAPU8[i51 >> 0] | 0) << (HEAPU8[i50 >> 0] | 0) | i9 >>> (HEAPU8[i57 >> 0] | 0) << (HEAPU8[i56 >> 0] | 0) | i10 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
       break L34;
      }
     case 3:
      {
       HEAP8[i1 + ((HEAPU8[i50 >> 0] | 0) >>> 3 & 255) >> 0] = i4;
       HEAP8[i1 + ((HEAPU8[i53 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
       HEAP8[i1 + ((HEAPU8[i56 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
       break L34;
      }
     case 4:
      {
       HEAP32[i1 >> 2] = i8 >>> (HEAPU8[i54 >> 0] | 0) << (HEAPU8[i53 >> 0] | 0) | i4 >>> (HEAPU8[i51 >> 0] | 0) << (HEAPU8[i50 >> 0] | 0) | i9 >>> (HEAPU8[i57 >> 0] | 0) << (HEAPU8[i56 >> 0] | 0) | i10 >>> (HEAPU8[i25 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
       break L34;
      }
     default:
      break L34;
     }
    } while (0);
    if (!i5) break; else {
     i1 = i1 + i29 | 0;
     i4 = i17 + i33 | 0;
    }
   }
  }
  i1 = (HEAP32[i34 >> 2] | 0) + (HEAP32[i35 >> 2] | 0) | 0;
  HEAP32[i34 >> 2] = i1;
  i17 = HEAP32[i30 >> 2] | 0;
  HEAP32[i30 >> 2] = i17 + -1;
  if (!i17) break;
  i5 = HEAP32[i32 >> 2] | 0;
  i2 = i2 + i31 | 0;
 }
 return;
}

function _SDL_BlendLine_RGB888(i18, i16, i17, i6, i7, i5, i1, i4, i3, i2, i8) {
 i18 = i18 | 0;
 i16 = i16 | 0;
 i17 = i17 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i19 = 0, i20 = 0, i21 = 0;
 i1 = i1 & 255;
 if ((i5 + -1 | 0) >>> 0 < 2) {
  i19 = i2 & 255;
  i2 = i19;
  i21 = ((Math_imul(i19, i3 & 255) | 0) >>> 0) / 255 | 0;
  i20 = ((Math_imul(i19, i4 & 255) | 0) >>> 0) / 255 | 0;
  i19 = ((Math_imul(i19, i1) | 0) >>> 0) / 255 | 0;
 } else {
  i2 = i2 & 255;
  i21 = i3 & 255;
  i20 = i4 & 255;
  i19 = i1;
 }
 i15 = i2 ^ 255;
 if ((i7 | 0) == (i17 | 0)) switch (i5 | 0) {
 case 1:
  {
   i1 = Math_imul((HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i18 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i7) | 0;
   if ((i6 | 0) < (i16 | 0)) {
    i17 = (i8 | 0) != 0 & 1;
    i3 = (i17 ^ 1) + i6 + i1 | 0;
    i1 = i16 - i6 + i17 | 0;
   } else {
    i3 = i1 + i16 | 0;
    i1 = i6 - i16 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i2 = i1;
   i1 = (HEAP32[i18 + 20 >> 2] | 0) + (i3 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i18 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i18 >>> 8 & 255, i15) | 0) >>> 0) / 255 | 0) + i20 << 8 | (((Math_imul(i18 >>> 16 & 255, i15) | 0) >>> 0) / 255 | 0) + i19 << 16 | (((Math_imul(i18 & 255, i15) | 0) >>> 0) / 255 | 0) + i21;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 case 2:
  {
   i1 = Math_imul((HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i18 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i7) | 0;
   if ((i6 | 0) < (i16 | 0)) {
    i17 = (i8 | 0) != 0 & 1;
    i3 = (i17 ^ 1) + i6 + i1 | 0;
    i1 = i16 - i6 + i17 | 0;
   } else {
    i3 = i1 + i16 | 0;
    i1 = i6 - i16 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i2 = i1;
   i1 = (HEAP32[i18 + 20 >> 2] | 0) + (i3 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i17 = HEAP32[i1 >> 2] | 0;
    i18 = (i17 >>> 16 & 255) + i19 | 0;
    i16 = (i17 >>> 8 & 255) + i20 | 0;
    i17 = (i17 & 255) + i21 | 0;
    HEAP32[i1 >> 2] = (i16 >>> 0 > 255 ? 65280 : i16 << 8) | (i17 >>> 0 > 255 ? 255 : i17) | (i18 >>> 0 > 255 ? 16711680 : i18 << 16);
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 case 4:
  {
   i1 = Math_imul((HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i18 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i7) | 0;
   if ((i6 | 0) < (i16 | 0)) {
    i17 = (i8 | 0) != 0 & 1;
    i3 = (i17 ^ 1) + i6 + i1 | 0;
    i1 = i16 - i6 + i17 | 0;
   } else {
    i3 = i1 + i16 | 0;
    i1 = i6 - i16 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i2 = i1;
   i1 = (HEAP32[i18 + 20 >> 2] | 0) + (i3 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i18 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i18 >>> 8 & 255, i20) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i18 >>> 16 & 255, i19) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i18 & 255, i21) | 0) >>> 0) / 255 | 0);
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 default:
  {
   i1 = Math_imul((HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i18 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i7) | 0;
   if ((i6 | 0) < (i16 | 0)) {
    i2 = (i8 | 0) != 0 & 1;
    i1 = (i2 ^ 1) + i6 + i1 | 0;
    i2 = i16 - i6 + i2 | 0;
   } else {
    i1 = i1 + i16 | 0;
    i2 = i6 - i16 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i2) return;
   i3 = i20 << 8 | i21 | i19 << 16;
   i1 = (HEAP32[i18 + 20 >> 2] | 0) + (i1 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP32[i1 >> 2] = i3;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 }
 if ((i6 | 0) == (i16 | 0)) switch (i5 | 0) {
 case 1:
  {
   i4 = (HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i18 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i17 | 0)) {
    i3 = (Math_imul(i4, i7) | 0) + i6 | 0;
    i1 = (i8 | 0) != 0;
    i3 = i3 + (i1 ? 0 : i4) | 0;
    i1 = i17 - i7 + (i1 & 1) | 0;
   } else {
    i3 = (Math_imul(i4, i17) | 0) + i6 | 0;
    i1 = i7 - i17 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i2 = i1;
   i1 = (HEAP32[i18 + 20 >> 2] | 0) + (i3 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i18 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i18 >>> 8 & 255, i15) | 0) >>> 0) / 255 | 0) + i20 << 8 | (((Math_imul(i18 >>> 16 & 255, i15) | 0) >>> 0) / 255 | 0) + i19 << 16 | (((Math_imul(i18 & 255, i15) | 0) >>> 0) / 255 | 0) + i21;
    if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
   }
   return;
  }
 case 2:
  {
   i4 = (HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i18 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i17 | 0)) {
    i3 = (Math_imul(i4, i7) | 0) + i6 | 0;
    i1 = (i8 | 0) != 0;
    i3 = i3 + (i1 ? 0 : i4) | 0;
    i1 = i17 - i7 + (i1 & 1) | 0;
   } else {
    i3 = (Math_imul(i4, i17) | 0) + i6 | 0;
    i1 = i7 - i17 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i2 = i1;
   i1 = (HEAP32[i18 + 20 >> 2] | 0) + (i3 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i17 = HEAP32[i1 >> 2] | 0;
    i18 = (i17 >>> 16 & 255) + i19 | 0;
    i16 = (i17 >>> 8 & 255) + i20 | 0;
    i17 = (i17 & 255) + i21 | 0;
    HEAP32[i1 >> 2] = (i16 >>> 0 > 255 ? 65280 : i16 << 8) | (i17 >>> 0 > 255 ? 255 : i17) | (i18 >>> 0 > 255 ? 16711680 : i18 << 16);
    if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
   }
   return;
  }
 case 4:
  {
   i4 = (HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i18 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i17 | 0)) {
    i3 = (Math_imul(i4, i7) | 0) + i6 | 0;
    i1 = (i8 | 0) != 0;
    i3 = i3 + (i1 ? 0 : i4) | 0;
    i1 = i17 - i7 + (i1 & 1) | 0;
   } else {
    i3 = (Math_imul(i4, i17) | 0) + i6 | 0;
    i1 = i7 - i17 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i1) return;
   i2 = i1;
   i1 = (HEAP32[i18 + 20 >> 2] | 0) + (i3 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i18 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i18 >>> 8 & 255, i20) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i18 >>> 16 & 255, i19) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i18 & 255, i21) | 0) >>> 0) / 255 | 0);
    if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
   }
   return;
  }
 default:
  {
   i4 = (HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i18 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i17 | 0)) {
    i1 = (Math_imul(i4, i7) | 0) + i6 | 0;
    i2 = (i8 | 0) != 0;
    i1 = i1 + (i2 ? 0 : i4) | 0;
    i2 = i17 - i7 + (i2 & 1) | 0;
   } else {
    i1 = (Math_imul(i4, i17) | 0) + i6 | 0;
    i2 = i7 - i17 + ((i8 | 0) != 0 & 1) | 0;
   }
   if (!i2) return;
   i3 = i20 << 8 | i21 | i19 << 16;
   i1 = (HEAP32[i18 + 20 >> 2] | 0) + (i1 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP32[i1 >> 2] = i3;
    if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
   }
   return;
  }
 }
 i14 = i16 - i6 | 0;
 i1 = i17 - i7 | 0;
 if ((((i14 | 0) < 0 ? 0 - i14 | 0 : i14) | 0) == (((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0)) switch (i5 | 0) {
 case 1:
  {
   i2 = (HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i18 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i17 | 0)) {
    i4 = (Math_imul(i2, i7) | 0) + i6 | 0;
    i3 = i2 + ((i6 | 0) > (i16 | 0) ? -1 : 1) | 0;
    i4 = i4 + ((i8 | 0) == 0 ? i3 : 0) | 0;
   } else {
    i4 = (Math_imul(i2, i17) | 0) + i16 | 0;
    i1 = i7 - i17 | 0;
    i3 = i2 + ((i6 | 0) < (i16 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i2 = i1;
   i1 = (HEAP32[i18 + 20 >> 2] | 0) + (i4 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i18 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i18 >>> 8 & 255, i15) | 0) >>> 0) / 255 | 0) + i20 << 8 | (((Math_imul(i18 >>> 16 & 255, i15) | 0) >>> 0) / 255 | 0) + i19 << 16 | (((Math_imul(i18 & 255, i15) | 0) >>> 0) / 255 | 0) + i21;
    if (!i2) break; else i1 = i1 + (i3 << 2) | 0;
   }
   return;
  }
 case 2:
  {
   i2 = (HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i18 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i17 | 0)) {
    i4 = (Math_imul(i2, i7) | 0) + i6 | 0;
    i3 = i2 + ((i6 | 0) > (i16 | 0) ? -1 : 1) | 0;
    i4 = i4 + ((i8 | 0) == 0 ? i3 : 0) | 0;
   } else {
    i4 = (Math_imul(i2, i17) | 0) + i16 | 0;
    i1 = i7 - i17 | 0;
    i3 = i2 + ((i6 | 0) < (i16 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i2 = i1;
   i1 = (HEAP32[i18 + 20 >> 2] | 0) + (i4 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i17 = HEAP32[i1 >> 2] | 0;
    i18 = (i17 >>> 16 & 255) + i19 | 0;
    i16 = (i17 >>> 8 & 255) + i20 | 0;
    i17 = (i17 & 255) + i21 | 0;
    HEAP32[i1 >> 2] = (i16 >>> 0 > 255 ? 65280 : i16 << 8) | (i17 >>> 0 > 255 ? 255 : i17) | (i18 >>> 0 > 255 ? 16711680 : i18 << 16);
    if (!i2) break; else i1 = i1 + (i3 << 2) | 0;
   }
   return;
  }
 case 4:
  {
   i2 = (HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i18 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i17 | 0)) {
    i4 = (Math_imul(i2, i7) | 0) + i6 | 0;
    i3 = i2 + ((i6 | 0) > (i16 | 0) ? -1 : 1) | 0;
    i4 = i4 + ((i8 | 0) == 0 ? i3 : 0) | 0;
   } else {
    i4 = (Math_imul(i2, i17) | 0) + i16 | 0;
    i1 = i7 - i17 | 0;
    i3 = i2 + ((i6 | 0) < (i16 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i2 = i1;
   i1 = (HEAP32[i18 + 20 >> 2] | 0) + (i4 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    i18 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i18 >>> 8 & 255, i20) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i18 >>> 16 & 255, i19) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i18 & 255, i21) | 0) >>> 0) / 255 | 0);
    if (!i2) break; else i1 = i1 + (i3 << 2) | 0;
   }
   return;
  }
 default:
  {
   i2 = (HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i18 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   if ((i7 | 0) < (i17 | 0)) {
    i5 = (Math_imul(i2, i7) | 0) + i6 | 0;
    i4 = i2 + ((i6 | 0) > (i16 | 0) ? -1 : 1) | 0;
    i5 = i5 + ((i8 | 0) == 0 ? i4 : 0) | 0;
   } else {
    i5 = (Math_imul(i2, i17) | 0) + i16 | 0;
    i1 = i7 - i17 | 0;
    i4 = i2 + ((i6 | 0) < (i16 | 0) ? -1 : 1) | 0;
   }
   i2 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if (!i2) return;
   i3 = i20 << 8 | i21 | i19 << 16;
   i1 = (HEAP32[i18 + 20 >> 2] | 0) + (i5 << 2) | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP32[i1 >> 2] = i3;
    if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
   }
   return;
  }
 } else switch (i5 | 0) {
 case 1:
  {
   i1 = i6 - i16 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i7 - i17 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i14 = i1 << 1;
    i5 = i14 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i4 = 1;
   } else {
    i14 = i2 << 1;
    i5 = i14 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i4 = 0;
   }
   i13 = i3 << 1;
   i11 = (i6 | 0) < (i16 | 0);
   i12 = i11 ? 0 - i2 | 0 : i2;
   i11 = i11 ? -1 : 1;
   i10 = (i7 | 0) < (i17 | 0);
   i9 = i10 ? 0 - i4 | 0 : i4;
   i10 = i10 ? -1 : 1;
   i8 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if ((i8 | 0) <= 0) return;
   i7 = HEAP32[i18 + 20 >> 2] | 0;
   i6 = i18 + 16 | 0;
   i4 = i5;
   i5 = 0;
   i3 = i16;
   i2 = i17;
   while (1) {
    i1 = i7 + ((Math_imul(HEAP32[i6 >> 2] | 0, i2) | 0) + (i3 << 2)) | 0;
    i18 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i18 >>> 8 & 255, i15) | 0) >>> 0) / 255 | 0) + i20 << 8 | (((Math_imul(i18 >>> 16 & 255, i15) | 0) >>> 0) / 255 | 0) + i19 << 16 | (((Math_imul(i18 & 255, i15) | 0) >>> 0) / 255 | 0) + i21;
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i8 | 0)) break; else {
     i4 = (i1 ? i14 : i13) + i4 | 0;
     i3 = (i1 ? i12 : i11) + i3 | 0;
     i2 = i2 + (i1 ? i9 : i10) | 0;
    }
   }
   return;
  }
 case 2:
  {
   i1 = i6 - i16 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i7 - i17 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i14 = i1 << 1;
    i5 = i14 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i4 = 1;
   } else {
    i14 = i2 << 1;
    i5 = i14 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i4 = 0;
   }
   i13 = i3 << 1;
   i11 = (i6 | 0) < (i16 | 0);
   i12 = i11 ? 0 - i2 | 0 : i2;
   i11 = i11 ? -1 : 1;
   i10 = (i7 | 0) < (i17 | 0);
   i9 = i10 ? 0 - i4 | 0 : i4;
   i10 = i10 ? -1 : 1;
   i8 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if ((i8 | 0) <= 0) return;
   i7 = HEAP32[i18 + 20 >> 2] | 0;
   i6 = i18 + 16 | 0;
   i4 = i5;
   i5 = 0;
   i3 = i16;
   i2 = i17;
   while (1) {
    i1 = i7 + ((Math_imul(HEAP32[i6 >> 2] | 0, i2) | 0) + (i3 << 2)) | 0;
    i17 = HEAP32[i1 >> 2] | 0;
    i18 = (i17 >>> 16 & 255) + i19 | 0;
    i16 = (i17 >>> 8 & 255) + i20 | 0;
    i17 = (i17 & 255) + i21 | 0;
    HEAP32[i1 >> 2] = (i16 >>> 0 > 255 ? 65280 : i16 << 8) | (i17 >>> 0 > 255 ? 255 : i17) | (i18 >>> 0 > 255 ? 16711680 : i18 << 16);
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i8 | 0)) break; else {
     i4 = (i1 ? i14 : i13) + i4 | 0;
     i3 = (i1 ? i12 : i11) + i3 | 0;
     i2 = i2 + (i1 ? i9 : i10) | 0;
    }
   }
   return;
  }
 case 4:
  {
   i1 = i6 - i16 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i7 - i17 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i14 = i1 << 1;
    i5 = i14 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i4 = 1;
   } else {
    i14 = i2 << 1;
    i5 = i14 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i4 = 0;
   }
   i13 = i3 << 1;
   i11 = (i6 | 0) < (i16 | 0);
   i12 = i11 ? 0 - i2 | 0 : i2;
   i11 = i11 ? -1 : 1;
   i10 = (i7 | 0) < (i17 | 0);
   i9 = i10 ? 0 - i4 | 0 : i4;
   i10 = i10 ? -1 : 1;
   i8 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if ((i8 | 0) <= 0) return;
   i7 = HEAP32[i18 + 20 >> 2] | 0;
   i6 = i18 + 16 | 0;
   i4 = i5;
   i5 = 0;
   i3 = i16;
   i2 = i17;
   while (1) {
    i1 = i7 + ((Math_imul(HEAP32[i6 >> 2] | 0, i2) | 0) + (i3 << 2)) | 0;
    i18 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i18 >>> 8 & 255, i20) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i18 >>> 16 & 255, i19) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i18 & 255, i21) | 0) >>> 0) / 255 | 0);
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i8 | 0)) break; else {
     i4 = (i1 ? i14 : i13) + i4 | 0;
     i3 = (i1 ? i12 : i11) + i3 | 0;
     i2 = i2 + (i1 ? i9 : i10) | 0;
    }
   }
   return;
  }
 default:
  {
   i1 = i6 - i16 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i7 - i17 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i15 = i1 << 1;
    i4 = i15 - i2 | 0;
    i3 = i1 - i2 | 0;
    i1 = i2;
    i2 = 0;
    i5 = 1;
   } else {
    i15 = i2 << 1;
    i4 = i15 - i1 | 0;
    i3 = i2 - i1 | 0;
    i2 = 1;
    i5 = 0;
   }
   i14 = i3 << 1;
   i12 = (i6 | 0) < (i16 | 0);
   i13 = i12 ? 0 - i2 | 0 : i2;
   i12 = i12 ? -1 : 1;
   i11 = (i7 | 0) < (i17 | 0);
   i10 = i11 ? 0 - i5 | 0 : i5;
   i11 = i11 ? -1 : 1;
   i9 = i1 + ((i8 | 0) != 0 & 1) | 0;
   if ((i9 | 0) <= 0) return;
   i8 = HEAP32[i18 + 20 >> 2] | 0;
   i7 = i18 + 16 | 0;
   i6 = i20 << 8 | i21 | i19 << 16;
   i5 = 0;
   i3 = i16;
   i2 = i17;
   while (1) {
    HEAP32[i8 + ((Math_imul(HEAP32[i7 >> 2] | 0, i2) | 0) + (i3 << 2)) >> 2] = i6;
    i1 = (i4 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i9 | 0)) break; else {
     i4 = (i1 ? i15 : i14) + i4 | 0;
     i3 = (i1 ? i13 : i12) + i3 | 0;
     i2 = i2 + (i1 ? i10 : i11) | 0;
    }
   }
   return;
  }
 }
}

function _vfscanf(i33, i2, i24) {
 i33 = i33 | 0;
 i2 = i2 | 0;
 i24 = i24 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i34 = 0, i35 = 0;
 i34 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i25 = i34 + 16 | 0;
 i27 = i34 + 8 | 0;
 i26 = i34 + 33 | 0;
 i28 = i34;
 i16 = i34 + 32 | 0;
 if ((HEAP32[i33 + 76 >> 2] | 0) > -1) i32 = ___lockfile(i33) | 0; else i32 = 0;
 i1 = HEAP8[i2 >> 0] | 0;
 L4 : do if (i1 << 24 >> 24) {
  i29 = i33 + 4 | 0;
  i30 = i33 + 100 | 0;
  i23 = i33 + 108 | 0;
  i17 = i33 + 8 | 0;
  i18 = i26 + 10 | 0;
  i19 = i26 + 33 | 0;
  i20 = i27 + 4 | 0;
  i21 = i26 + 46 | 0;
  i22 = i26 + 94 | 0;
  i4 = i1;
  i1 = 0;
  i5 = i2;
  i10 = 0;
  i3 = 0;
  i2 = 0;
  L6 : while (1) {
   L8 : do if (!(_isspace(i4 & 255) | 0)) {
    i4 = (HEAP8[i5 >> 0] | 0) == 37;
    L10 : do if (i4) {
     i8 = i5 + 1 | 0;
     i6 = HEAP8[i8 >> 0] | 0;
     L12 : do switch (i6 << 24 >> 24) {
     case 37:
      break L10;
     case 42:
      {
       i15 = 0;
       i6 = i5 + 2 | 0;
       break;
      }
     default:
      {
       i6 = (i6 & 255) + -48 | 0;
       if (i6 >>> 0 < 10 ? (HEAP8[i5 + 2 >> 0] | 0) == 36 : 0) {
        HEAP32[i25 >> 2] = HEAP32[i24 >> 2];
        while (1) {
         i15 = (HEAP32[i25 >> 2] | 0) + (4 - 1) & ~(4 - 1);
         i4 = HEAP32[i15 >> 2] | 0;
         HEAP32[i25 >> 2] = i15 + 4;
         if (i6 >>> 0 > 1) i6 = i6 + -1 | 0; else break;
        }
        i15 = i4;
        i6 = i5 + 3 | 0;
        break L12;
       }
       i6 = (HEAP32[i24 >> 2] | 0) + (4 - 1) & ~(4 - 1);
       i15 = HEAP32[i6 >> 2] | 0;
       HEAP32[i24 >> 2] = i6 + 4;
       i6 = i8;
      }
     } while (0);
     i4 = HEAP8[i6 >> 0] | 0;
     i5 = i4 & 255;
     if ((i5 + -48 | 0) >>> 0 < 10) {
      i4 = 0;
      while (1) {
       i8 = (i4 * 10 | 0) + -48 + i5 | 0;
       i6 = i6 + 1 | 0;
       i4 = HEAP8[i6 >> 0] | 0;
       i5 = i4 & 255;
       if ((i5 + -48 | 0) >>> 0 >= 10) break; else i4 = i8;
      }
     } else i8 = 0;
     if (i4 << 24 >> 24 == 109) {
      i6 = i6 + 1 | 0;
      i9 = HEAP8[i6 >> 0] | 0;
      i4 = (i15 | 0) != 0 & 1;
      i3 = 0;
      i2 = 0;
     } else {
      i9 = i4;
      i4 = 0;
     }
     i5 = i6 + 1 | 0;
     switch (i9 & 255 | 0) {
     case 104:
      {
       i14 = (HEAP8[i5 >> 0] | 0) == 104;
       i5 = i14 ? i6 + 2 | 0 : i5;
       i6 = i14 ? -2 : -1;
       break;
      }
     case 108:
      {
       i14 = (HEAP8[i5 >> 0] | 0) == 108;
       i5 = i14 ? i6 + 2 | 0 : i5;
       i6 = i14 ? 3 : 1;
       break;
      }
     case 106:
      {
       i6 = 3;
       break;
      }
     case 116:
     case 122:
      {
       i6 = 1;
       break;
      }
     case 76:
      {
       i6 = 2;
       break;
      }
     case 110:
     case 112:
     case 67:
     case 83:
     case 91:
     case 99:
     case 115:
     case 88:
     case 71:
     case 70:
     case 69:
     case 65:
     case 103:
     case 102:
     case 101:
     case 97:
     case 120:
     case 117:
     case 111:
     case 105:
     case 100:
      {
       i5 = i6;
       i6 = 0;
       break;
      }
     default:
      {
       i31 = 152;
       break L6;
      }
     }
     i9 = HEAPU8[i5 >> 0] | 0;
     i11 = (i9 & 47 | 0) == 3;
     i9 = i11 ? i9 | 32 : i9;
     i11 = i11 ? 1 : i6;
     switch (i9 | 0) {
     case 99:
      {
       i14 = i10;
       i13 = (i8 | 0) < 1 ? 1 : i8;
       break;
      }
     case 91:
      {
       i14 = i10;
       i13 = i8;
       break;
      }
     case 110:
      {
       if (!i15) {
        i6 = i10;
        break L8;
       }
       switch (i11 | 0) {
       case -2:
        {
         HEAP8[i15 >> 0] = i10;
         i6 = i10;
         break L8;
        }
       case -1:
        {
         HEAP16[i15 >> 1] = i10;
         i6 = i10;
         break L8;
        }
       case 0:
        {
         HEAP32[i15 >> 2] = i10;
         i6 = i10;
         break L8;
        }
       case 1:
        {
         HEAP32[i15 >> 2] = i10;
         i6 = i10;
         break L8;
        }
       case 3:
        {
         i6 = i15;
         HEAP32[i6 >> 2] = i10;
         HEAP32[i6 + 4 >> 2] = ((i10 | 0) < 0) << 31 >> 31;
         i6 = i10;
         break L8;
        }
       default:
        {
         i6 = i10;
         break L8;
        }
       }
      }
     default:
      {
       ___shlim(i33, 0);
       do {
        i6 = HEAP32[i29 >> 2] | 0;
        if (i6 >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) {
         HEAP32[i29 >> 2] = i6 + 1;
         i6 = HEAPU8[i6 >> 0] | 0;
        } else i6 = ___shgetc(i33) | 0;
       } while ((_isspace(i6) | 0) != 0);
       i6 = HEAP32[i29 >> 2] | 0;
       if (HEAP32[i30 >> 2] | 0) {
        i6 = i6 + -1 | 0;
        HEAP32[i29 >> 2] = i6;
       }
       i14 = (HEAP32[i23 >> 2] | 0) + i10 + i6 - (HEAP32[i17 >> 2] | 0) | 0;
       i13 = i8;
      }
     }
     ___shlim(i33, i13);
     i6 = HEAP32[i29 >> 2] | 0;
     i8 = HEAP32[i30 >> 2] | 0;
     if (i6 >>> 0 < i8 >>> 0) HEAP32[i29 >> 2] = i6 + 1; else {
      if ((___shgetc(i33) | 0) < 0) {
       i31 = 152;
       break L6;
      }
      i8 = HEAP32[i30 >> 2] | 0;
     }
     if (i8) HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + -1;
     L67 : do switch (i9 | 0) {
     case 91:
     case 99:
     case 115:
      {
       i12 = (i9 | 0) == 99;
       L69 : do if ((i9 & 239 | 0) == 99) {
        _memset(i26 | 0, -1, 257) | 0;
        HEAP8[i26 >> 0] = 0;
        if ((i9 | 0) == 115) {
         HEAP8[i19 >> 0] = 0;
         HEAP8[i18 >> 0] = 0;
         HEAP8[i18 + 1 >> 0] = 0;
         HEAP8[i18 + 2 >> 0] = 0;
         HEAP8[i18 + 3 >> 0] = 0;
         HEAP8[i18 + 4 >> 0] = 0;
        }
       } else {
        i35 = i5 + 1 | 0;
        i10 = (HEAP8[i35 >> 0] | 0) == 94;
        i6 = i10 & 1;
        i9 = i10 ? i35 : i5;
        i5 = i10 ? i5 + 2 | 0 : i35;
        _memset(i26 | 0, i10 & 1 | 0, 257) | 0;
        HEAP8[i26 >> 0] = 0;
        switch (HEAP8[i5 >> 0] | 0) {
        case 45:
         {
          i10 = (i6 ^ 1) & 255;
          HEAP8[i21 >> 0] = i10;
          i5 = i9 + 2 | 0;
          break;
         }
        case 93:
         {
          i10 = (i6 ^ 1) & 255;
          HEAP8[i22 >> 0] = i10;
          i5 = i9 + 2 | 0;
          break;
         }
        default:
         i10 = (i6 ^ 1) & 255;
        }
        while (1) {
         i6 = HEAP8[i5 >> 0] | 0;
         L80 : do switch (i6 << 24 >> 24) {
         case 0:
          {
           i31 = 152;
           break L6;
          }
         case 93:
          break L69;
         case 45:
          {
           i9 = i5 + 1 | 0;
           i6 = HEAP8[i9 >> 0] | 0;
           switch (i6 << 24 >> 24) {
           case 93:
           case 0:
            {
             i6 = 45;
             break L80;
            }
           default:
            {}
           }
           i5 = HEAP8[i5 + -1 >> 0] | 0;
           if ((i5 & 255) < (i6 & 255)) {
            i5 = i5 & 255;
            do {
             i5 = i5 + 1 | 0;
             HEAP8[i26 + i5 >> 0] = i10;
             i6 = HEAP8[i9 >> 0] | 0;
            } while ((i5 | 0) < (i6 & 255 | 0));
            i5 = i9;
           } else i5 = i9;
           break;
          }
         default:
          {}
         } while (0);
         HEAP8[i26 + ((i6 & 255) + 1) >> 0] = i10;
         i5 = i5 + 1 | 0;
        }
       } while (0);
       i9 = i12 ? i13 + 1 | 0 : 31;
       i10 = (i11 | 0) == 1;
       i11 = (i4 | 0) != 0;
       L88 : do if (i10) {
        if (i11) {
         i2 = _malloc(i9 << 2) | 0;
         if (!i2) {
          i3 = 0;
          i31 = 152;
          break L6;
         }
        } else i2 = i15;
        HEAP32[i27 >> 2] = 0;
        HEAP32[i20 >> 2] = 0;
        i3 = 0;
        L94 : while (1) {
         i8 = (i2 | 0) == 0;
         do {
          L98 : while (1) {
           i6 = HEAP32[i29 >> 2] | 0;
           if (i6 >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) {
            HEAP32[i29 >> 2] = i6 + 1;
            i6 = HEAPU8[i6 >> 0] | 0;
           } else i6 = ___shgetc(i33) | 0;
           if (!(HEAP8[i26 + (i6 + 1) >> 0] | 0)) break L94;
           HEAP8[i16 >> 0] = i6;
           switch (_mbrtowc(i28, i16, 1, i27) | 0) {
           case -1:
            {
             i3 = 0;
             i31 = 152;
             break L6;
            }
           case -2:
            break;
           default:
            break L98;
           }
          }
          if (!i8) {
           HEAP32[i2 + (i3 << 2) >> 2] = HEAP32[i28 >> 2];
           i3 = i3 + 1 | 0;
          }
         } while (!(i11 & (i3 | 0) == (i9 | 0)));
         i3 = i9 << 1 | 1;
         i6 = _realloc(i2, i3 << 2) | 0;
         if (!i6) {
          i3 = 0;
          i31 = 152;
          break L6;
         }
         i35 = i9;
         i9 = i3;
         i2 = i6;
         i3 = i35;
        }
        if (!(_mbsinit(i27) | 0)) {
         i3 = 0;
         i31 = 152;
         break L6;
        } else {
         i8 = i3;
         i3 = 0;
        }
       } else {
        if (i11) {
         i3 = _malloc(i9) | 0;
         if (!i3) {
          i3 = 0;
          i2 = 0;
          i31 = 152;
          break L6;
         } else i6 = 0;
         while (1) {
          do {
           i2 = HEAP32[i29 >> 2] | 0;
           if (i2 >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) {
            HEAP32[i29 >> 2] = i2 + 1;
            i2 = HEAPU8[i2 >> 0] | 0;
           } else i2 = ___shgetc(i33) | 0;
           if (!(HEAP8[i26 + (i2 + 1) >> 0] | 0)) {
            i8 = i6;
            i2 = 0;
            break L88;
           }
           HEAP8[i3 + i6 >> 0] = i2;
           i6 = i6 + 1 | 0;
          } while ((i6 | 0) != (i9 | 0));
          i2 = i9 << 1 | 1;
          i6 = _realloc(i3, i2) | 0;
          if (!i6) {
           i2 = 0;
           i31 = 152;
           break L6;
          } else {
           i35 = i9;
           i9 = i2;
           i3 = i6;
           i6 = i35;
          }
         }
        }
        if (!i15) {
         i3 = i8;
         while (1) {
          i2 = HEAP32[i29 >> 2] | 0;
          if (i2 >>> 0 < i3 >>> 0) {
           HEAP32[i29 >> 2] = i2 + 1;
           i2 = HEAPU8[i2 >> 0] | 0;
          } else i2 = ___shgetc(i33) | 0;
          if (!(HEAP8[i26 + (i2 + 1) >> 0] | 0)) {
           i8 = 0;
           i3 = 0;
           i2 = 0;
           break L88;
          }
          i3 = HEAP32[i30 >> 2] | 0;
         }
        } else {
         i3 = 0;
         while (1) {
          i2 = HEAP32[i29 >> 2] | 0;
          if (i2 >>> 0 < i8 >>> 0) {
           HEAP32[i29 >> 2] = i2 + 1;
           i2 = HEAPU8[i2 >> 0] | 0;
          } else i2 = ___shgetc(i33) | 0;
          if (!(HEAP8[i26 + (i2 + 1) >> 0] | 0)) {
           i8 = i3;
           i3 = i15;
           i2 = 0;
           break L88;
          }
          HEAP8[i15 + i3 >> 0] = i2;
          i8 = HEAP32[i30 >> 2] | 0;
          i3 = i3 + 1 | 0;
         }
        }
       } while (0);
       i6 = HEAP32[i29 >> 2] | 0;
       if (HEAP32[i30 >> 2] | 0) {
        i6 = i6 + -1 | 0;
        HEAP32[i29 >> 2] = i6;
       }
       i6 = i6 - (HEAP32[i17 >> 2] | 0) + (HEAP32[i23 >> 2] | 0) | 0;
       if (!i6) break L6;
       if (!((i6 | 0) == (i13 | 0) | i12 ^ 1)) break L6;
       do if (i11) if (i10) {
        HEAP32[i15 >> 2] = i2;
        break;
       } else {
        HEAP32[i15 >> 2] = i3;
        break;
       } while (0);
       if (!i12) {
        if (i2) HEAP32[i2 + (i8 << 2) >> 2] = 0;
        if (!i3) {
         i3 = 0;
         break L67;
        }
        HEAP8[i3 + i8 >> 0] = 0;
       }
       break;
      }
     case 120:
     case 88:
     case 112:
      {
       i6 = 16;
       i31 = 134;
       break;
      }
     case 111:
      {
       i6 = 8;
       i31 = 134;
       break;
      }
     case 117:
     case 100:
      {
       i6 = 10;
       i31 = 134;
       break;
      }
     case 105:
      {
       i6 = 0;
       i31 = 134;
       break;
      }
     case 71:
     case 103:
     case 70:
     case 102:
     case 69:
     case 101:
     case 65:
     case 97:
      {
       d7 = +___floatscan(i33, i11, 0);
       if ((HEAP32[i23 >> 2] | 0) == ((HEAP32[i17 >> 2] | 0) - (HEAP32[i29 >> 2] | 0) | 0)) break L6;
       if (i15) switch (i11 | 0) {
       case 0:
        {
         HEAPF32[i15 >> 2] = d7;
         break L67;
        }
       case 1:
        {
         HEAPF64[i15 >> 3] = d7;
         break L67;
        }
       case 2:
        {
         HEAPF64[i15 >> 3] = d7;
         break L67;
        }
       default:
        break L67;
       }
       break;
      }
     default:
      {}
     } while (0);
     L168 : do if ((i31 | 0) == 134) {
      i31 = 0;
      i6 = ___intscan(i33, i6, 0, -1, -1) | 0;
      if ((HEAP32[i23 >> 2] | 0) == ((HEAP32[i17 >> 2] | 0) - (HEAP32[i29 >> 2] | 0) | 0)) break L6;
      if ((i15 | 0) != 0 & (i9 | 0) == 112) {
       HEAP32[i15 >> 2] = i6;
       break;
      }
      if (i15) switch (i11 | 0) {
      case -2:
       {
        HEAP8[i15 >> 0] = i6;
        break L168;
       }
      case -1:
       {
        HEAP16[i15 >> 1] = i6;
        break L168;
       }
      case 0:
       {
        HEAP32[i15 >> 2] = i6;
        break L168;
       }
      case 1:
       {
        HEAP32[i15 >> 2] = i6;
        break L168;
       }
      case 3:
       {
        i35 = i15;
        HEAP32[i35 >> 2] = i6;
        HEAP32[i35 + 4 >> 2] = tempRet0;
        break L168;
       }
      default:
       break L168;
      }
     } while (0);
     i1 = ((i15 | 0) != 0 & 1) + i1 | 0;
     i6 = (HEAP32[i23 >> 2] | 0) + i14 + (HEAP32[i29 >> 2] | 0) - (HEAP32[i17 >> 2] | 0) | 0;
     break L8;
    } while (0);
    i5 = i5 + (i4 & 1) | 0;
    ___shlim(i33, 0);
    i4 = HEAP32[i29 >> 2] | 0;
    if (i4 >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) {
     HEAP32[i29 >> 2] = i4 + 1;
     i4 = HEAPU8[i4 >> 0] | 0;
    } else i4 = ___shgetc(i33) | 0;
    if ((i4 | 0) != (HEAPU8[i5 >> 0] | 0)) {
     i31 = 21;
     break L6;
    }
    i6 = i10 + 1 | 0;
   } else {
    while (1) {
     i4 = i5 + 1 | 0;
     if (!(_isspace(HEAPU8[i4 >> 0] | 0) | 0)) break; else i5 = i4;
    }
    ___shlim(i33, 0);
    do {
     i4 = HEAP32[i29 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) {
      HEAP32[i29 >> 2] = i4 + 1;
      i4 = HEAPU8[i4 >> 0] | 0;
     } else i4 = ___shgetc(i33) | 0;
    } while ((_isspace(i4) | 0) != 0);
    i4 = HEAP32[i29 >> 2] | 0;
    if (HEAP32[i30 >> 2] | 0) {
     i4 = i4 + -1 | 0;
     HEAP32[i29 >> 2] = i4;
    }
    i6 = (HEAP32[i23 >> 2] | 0) + i10 + i4 - (HEAP32[i17 >> 2] | 0) | 0;
   } while (0);
   i5 = i5 + 1 | 0;
   i4 = HEAP8[i5 >> 0] | 0;
   if (!(i4 << 24 >> 24)) break L4; else i10 = i6;
  }
  if ((i31 | 0) == 21) {
   if (HEAP32[i30 >> 2] | 0) HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + -1;
   if ((i1 | 0) != 0 | (i4 | 0) > -1) break; else {
    i1 = 0;
    i31 = 153;
   }
  } else if ((i31 | 0) == 152) if (!i1) {
   i1 = i4;
   i31 = 153;
  }
  if ((i31 | 0) == 153) {
   i4 = i1;
   i1 = -1;
  }
  if (i4) {
   _free(i3);
   _free(i2);
  }
 } else i1 = 0; while (0);
 if (i32) ___unlockfile(i33);
 STACKTOP = i34;
 return i1 | 0;
}

function _SDLgfx_rotateSurface(i7, d1, i24, i35, i17, i25, i26, i10, i16, d8, d9) {
 i7 = i7 | 0;
 d1 = +d1;
 i24 = i24 | 0;
 i35 = i35 | 0;
 i17 = i17 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 i10 = i10 | 0;
 i16 = i16 | 0;
 d8 = +d8;
 d9 = +d9;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0;
 i34 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i33 = i34;
 i15 = i34 + 6 | 0;
 i14 = i34 + 5 | 0;
 i12 = i34 + 4 | 0;
 if (!i7) {
  i35 = 0;
  STACKTOP = i34;
  return i35 | 0;
 }
 if (!(HEAP32[i7 >> 2] & 1)) {
  i2 = i7 + 4 | 0;
  i13 = 0;
  i3 = 0;
 } else {
  HEAP32[i33 >> 2] = 0;
  _SDL_GetColorKey(i7, i33) | 0;
  i3 = HEAP32[i33 >> 2] | 0;
  i2 = i7 + 4 | 0;
  _SDL_GetRGB(i3, HEAP32[i2 >> 2] | 0, i15, i14, i12);
  i13 = 1;
 }
 i2 = HEAP32[i2 >> 2] | 0;
 i4 = HEAP8[i2 + 8 >> 0] | 0;
 switch (i4 << 24 >> 24) {
 case 8:
 case 32:
  {
   d1 = d9 * 65536.0;
   d8 = d8 * 65536.0;
   i3 = i16 + 2 | 0;
   if (i4 << 24 >> 24 == 32) {
    i6 = i2;
    i2 = i7;
    i4 = 0;
    i11 = 11;
   } else {
    i5 = 0;
    i32 = _SDL_CreateRGBSurface(0, i10, i3, 8, 0, 0, 0, 0) | 0;
    i31 = i7;
    i30 = 0;
   }
   break;
  }
 default:
  {
   i2 = _SDL_CreateRGBSurface(0, HEAP32[i7 + 8 >> 2] | 0, HEAP32[i7 + 12 >> 2] | 0, 32, 255, 65280, 16711680, -16777216) | 0;
   if (!i13) _SDL_UpperBlit(i7, 0, i2, 0) | 0; else {
    _SDL_SetColorKey(i7, 0, 0) | 0;
    _SDL_UpperBlit(i7, 0, i2, 0) | 0;
    _SDL_SetColorKey(i7, 1, i3) | 0;
   }
   i6 = HEAP32[i2 + 4 >> 2] | 0;
   i3 = i16 + 2 | 0;
   d8 = d8 * 65536.0;
   d1 = d9 * 65536.0;
   i4 = 1;
   i11 = 11;
  }
 }
 if ((i11 | 0) == 11) {
  i5 = 1;
  i32 = _SDL_CreateRGBSurface(0, i10, i3, 32, HEAP32[i6 + 12 >> 2] | 0, HEAP32[i6 + 16 >> 2] | 0, HEAP32[i6 + 20 >> 2] | 0, HEAP32[i6 + 24 >> 2] | 0) | 0;
  i31 = i2;
  i30 = i4;
 }
 if (!i32) {
  i35 = 0;
  STACKTOP = i34;
  return i35 | 0;
 }
 i29 = i32 + 12 | 0;
 HEAP32[i29 >> 2] = i16;
 if ((i13 | 0) == 1) _SDL_FillRect(i32, 0, _SDL_MapRGB(HEAP32[i32 + 4 >> 2] | 0, HEAP8[i15 >> 0] | 0, HEAP8[i14 >> 0] | 0, HEAP8[i12 >> 0] | 0) | 0) | 0;
 if (HEAP32[i31 >> 2] & 2) _SDL_LockSurface(i31) | 0;
 if (i5) {
  i28 = ~~d1;
  i21 = ~~d8;
  i22 = i31 + 8 | 0;
  i18 = HEAP32[i22 >> 2] | 0;
  i23 = i32 + 8 | 0;
  i3 = HEAP32[i23 >> 2] | 0;
  i5 = i18 - i3 << 15;
  i27 = i31 + 12 | 0;
  i19 = HEAP32[i27 >> 2] | 0;
  i11 = HEAP32[i29 >> 2] | 0;
  i10 = i19 - i11 << 15;
  i6 = Math_imul(65536 - i21 | 0, i24) | 0;
  i7 = (i35 << 16) - (Math_imul(i28, i24) | 0) | 0;
  i18 = i18 + -1 | 0;
  i19 = i19 + -1 | 0;
  i2 = HEAP32[i32 + 20 >> 2] | 0;
  i20 = (HEAP32[i32 + 16 >> 2] | 0) - (i3 << 2) | 0;
  i4 = (i11 | 0) > 0;
  if (!i17) {
   if (i4) {
    i17 = i5 + i6 | 0;
    i16 = i10 + i7 | 0;
    i15 = (i25 | 0) == 0;
    i12 = (i26 | 0) == 0;
    i13 = i31 + 20 | 0;
    i14 = i31 + 16 | 0;
    i4 = i11;
    i11 = 0;
    while (1) {
     i6 = i35 - i11 | 0;
     i10 = i17 + (Math_imul(i6, i28) | 0) | 0;
     i6 = i16 - (Math_imul(i6, i21) | 0) | 0;
     if ((i3 | 0) > 0) {
      L37 : do if (i15) {
       i7 = 0;
       while (1) {
        i5 = i10 >> 16;
        i4 = i6 >> 16;
        if (!i12) i4 = (HEAP32[i27 >> 2] | 0) + ~i4 | 0;
        do if ((i4 | i5 | 0) > -1 ? (i5 | 0) < (HEAP32[i22 >> 2] | 0) : 0) {
         if ((i4 | 0) >= (HEAP32[i27 >> 2] | 0)) break;
         i3 = (HEAP32[i13 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i4) | 0) + (i5 << 2) | 0;
         i3 = HEAPU8[i3 >> 0] | HEAPU8[i3 + 1 >> 0] << 8 | HEAPU8[i3 + 2 >> 0] << 16 | HEAPU8[i3 + 3 >> 0] << 24;
         HEAP8[i2 >> 0] = i3;
         HEAP8[i2 + 1 >> 0] = i3 >> 8;
         HEAP8[i2 + 2 >> 0] = i3 >> 16;
         HEAP8[i2 + 3 >> 0] = i3 >> 24;
         i3 = HEAP32[i23 >> 2] | 0;
        } while (0);
        i2 = i2 + 4 | 0;
        i7 = i7 + 1 | 0;
        if ((i7 | 0) >= (i3 | 0)) break; else {
         i10 = i10 + i21 | 0;
         i6 = i6 + i28 | 0;
        }
       }
      } else {
       if (i12) i7 = 0; else {
        i7 = 0;
        while (1) {
         i26 = HEAP32[i22 >> 2] | 0;
         i4 = i26 + ~(i10 >> 16) | 0;
         i25 = HEAP32[i27 >> 2] | 0;
         i5 = i25 + ~(i6 >> 16) | 0;
         if ((i5 | 0) < (i25 | 0) & ((i4 | 0) < (i26 | 0) & (i5 | i4 | 0) > -1)) {
          i3 = (HEAP32[i13 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i5) | 0) + (i4 << 2) | 0;
          i3 = HEAPU8[i3 >> 0] | HEAPU8[i3 + 1 >> 0] << 8 | HEAPU8[i3 + 2 >> 0] << 16 | HEAPU8[i3 + 3 >> 0] << 24;
          HEAP8[i2 >> 0] = i3;
          HEAP8[i2 + 1 >> 0] = i3 >> 8;
          HEAP8[i2 + 2 >> 0] = i3 >> 16;
          HEAP8[i2 + 3 >> 0] = i3 >> 24;
          i3 = HEAP32[i23 >> 2] | 0;
         }
         i2 = i2 + 4 | 0;
         i7 = i7 + 1 | 0;
         if ((i7 | 0) >= (i3 | 0)) break L37; else {
          i10 = i10 + i21 | 0;
          i6 = i6 + i28 | 0;
         }
        }
       }
       while (1) {
        i4 = i6 >> 16;
        i26 = HEAP32[i22 >> 2] | 0;
        i5 = i26 + ~(i10 >> 16) | 0;
        if ((i5 | 0) < (i26 | 0) & (i5 | i4 | 0) > -1 ? (i4 | 0) < (HEAP32[i27 >> 2] | 0) : 0) {
         i3 = (HEAP32[i13 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i4) | 0) + (i5 << 2) | 0;
         i3 = HEAPU8[i3 >> 0] | HEAPU8[i3 + 1 >> 0] << 8 | HEAPU8[i3 + 2 >> 0] << 16 | HEAPU8[i3 + 3 >> 0] << 24;
         HEAP8[i2 >> 0] = i3;
         HEAP8[i2 + 1 >> 0] = i3 >> 8;
         HEAP8[i2 + 2 >> 0] = i3 >> 16;
         HEAP8[i2 + 3 >> 0] = i3 >> 24;
         i3 = HEAP32[i23 >> 2] | 0;
        }
        i2 = i2 + 4 | 0;
        i7 = i7 + 1 | 0;
        if ((i7 | 0) >= (i3 | 0)) break; else {
         i10 = i10 + i21 | 0;
         i6 = i6 + i28 | 0;
        }
       }
      } while (0);
      i4 = HEAP32[i29 >> 2] | 0;
     }
     i11 = i11 + 1 | 0;
     if ((i11 | 0) >= (i4 | 0)) break; else i2 = i2 + i20 | 0;
    }
   }
  } else if (i4) {
   i17 = i5 + i6 | 0;
   i16 = i10 + i7 | 0;
   i15 = (i25 | 0) == 0;
   i12 = (i26 | 0) != 0;
   i13 = i31 + 20 | 0;
   i14 = i31 + 16 | 0;
   i4 = i11;
   i11 = 0;
   while (1) {
    i6 = i35 - i11 | 0;
    i5 = i17 + (Math_imul(i6, i28) | 0) | 0;
    i6 = i16 - (Math_imul(i6, i21) | 0) | 0;
    if ((i3 | 0) > 0) {
     if (i15) {
      i10 = i5;
      i7 = 0;
      while (1) {
       i4 = i10 >> 16;
       i5 = i6 >> 16;
       i5 = i12 ? i19 - i5 | 0 : i5;
       if (((i5 | i4 | 0) > -1 ? (i4 | 0) < ((HEAP32[i22 >> 2] | 0) + -1 | 0) : 0) ? (i5 | 0) < ((HEAP32[i27 >> 2] | 0) + -1 | 0) : 0) {
        i24 = HEAP32[i13 >> 2] | 0;
        i25 = (HEAP32[i14 >> 2] | 0) / 4 | 0;
        i45 = (Math_imul(i25, i5) | 0) + i4 | 0;
        i48 = HEAP8[i24 + (i45 << 2) >> 0] | 0;
        i44 = HEAP8[i24 + (i45 << 2) + 1 >> 0] | 0;
        i40 = HEAP8[i24 + (i45 << 2) + 2 >> 0] | 0;
        i36 = HEAP8[i24 + (i45 << 2) + 3 >> 0] | 0;
        i5 = i45 + 1 | 0;
        i47 = HEAP8[i24 + (i5 << 2) >> 0] | 0;
        i43 = HEAP8[i24 + (i5 << 2) + 1 >> 0] | 0;
        i39 = HEAP8[i24 + (i5 << 2) + 2 >> 0] | 0;
        i4 = HEAP8[i24 + (i5 << 2) + 3 >> 0] | 0;
        i5 = i5 + i25 | 0;
        i46 = HEAP8[i24 + (i5 << 2) >> 0] | 0;
        i42 = HEAP8[i24 + (i5 << 2) + 1 >> 0] | 0;
        i38 = HEAP8[i24 + (i5 << 2) + 2 >> 0] | 0;
        i5 = HEAP8[i24 + (i5 << 2) + 3 >> 0] | 0;
        i25 = i45 + i25 | 0;
        i45 = HEAP8[i24 + (i25 << 2) >> 0] | 0;
        i41 = HEAP8[i24 + (i25 << 2) + 1 >> 0] | 0;
        i37 = HEAP8[i24 + (i25 << 2) + 2 >> 0] | 0;
        i25 = HEAP8[i24 + (i25 << 2) + 3 >> 0] | 0;
        i24 = i10 & 65535;
        i26 = i6 & 65535;
        i3 = (i12 ? i45 : i48) & 255;
        i3 = ((Math_imul(((i12 ? i46 : i47) & 255) - i3 | 0, i24) | 0) >>> 16) + i3 | 0;
        i45 = (i12 ? i48 : i45) & 255;
        HEAP8[i2 >> 0] = ((Math_imul((((Math_imul(((i12 ? i47 : i46) & 255) - i45 | 0, i24) | 0) >>> 16) + i45 & 255) - (i3 & 255) | 0, i26) | 0) >>> 16) + i3;
        i3 = (i12 ? i41 : i44) & 255;
        i3 = ((Math_imul(((i12 ? i42 : i43) & 255) - i3 | 0, i24) | 0) >>> 16) + i3 | 0;
        i41 = (i12 ? i44 : i41) & 255;
        HEAP8[i2 + 1 >> 0] = ((Math_imul((((Math_imul(((i12 ? i43 : i42) & 255) - i41 | 0, i24) | 0) >>> 16) + i41 & 255) - (i3 & 255) | 0, i26) | 0) >>> 16) + i3;
        i3 = (i12 ? i37 : i40) & 255;
        i3 = ((Math_imul(((i12 ? i38 : i39) & 255) - i3 | 0, i24) | 0) >>> 16) + i3 | 0;
        i37 = (i12 ? i40 : i37) & 255;
        HEAP8[i2 + 2 >> 0] = ((Math_imul((((Math_imul(((i12 ? i39 : i38) & 255) - i37 | 0, i24) | 0) >>> 16) + i37 & 255) - (i3 & 255) | 0, i26) | 0) >>> 16) + i3;
        i3 = (i12 ? i25 : i36) & 255;
        i3 = ((Math_imul(((i12 ? i5 : i4) & 255) - i3 | 0, i24) | 0) >>> 16) + i3 | 0;
        i25 = (i12 ? i36 : i25) & 255;
        HEAP8[i2 + 3 >> 0] = ((Math_imul((((Math_imul(((i12 ? i4 : i5) & 255) - i25 | 0, i24) | 0) >>> 16) + i25 & 255) - (i3 & 255) | 0, i26) | 0) >>> 16) + i3;
        i3 = HEAP32[i23 >> 2] | 0;
       }
       i2 = i2 + 4 | 0;
       i7 = i7 + 1 | 0;
       if ((i7 | 0) >= (i3 | 0)) break; else {
        i10 = i10 + i21 | 0;
        i6 = i6 + i28 | 0;
       }
      }
     } else {
      i10 = i5;
      i7 = 0;
      while (1) {
       i5 = i6 >> 16;
       i4 = i18 - (i10 >> 16) | 0;
       i5 = i12 ? i19 - i5 | 0 : i5;
       if (((i5 | i4 | 0) > -1 ? (i4 | 0) < ((HEAP32[i22 >> 2] | 0) + -1 | 0) : 0) ? (i5 | 0) < ((HEAP32[i27 >> 2] | 0) + -1 | 0) : 0) {
        i46 = HEAP32[i13 >> 2] | 0;
        i45 = (HEAP32[i14 >> 2] | 0) / 4 | 0;
        i24 = (Math_imul(i45, i5) | 0) + i4 | 0;
        i5 = HEAP8[i46 + (i24 << 2) >> 0] | 0;
        i36 = HEAP8[i46 + (i24 << 2) + 1 >> 0] | 0;
        i40 = HEAP8[i46 + (i24 << 2) + 2 >> 0] | 0;
        i44 = HEAP8[i46 + (i24 << 2) + 3 >> 0] | 0;
        i47 = i24 + 1 | 0;
        i4 = HEAP8[i46 + (i47 << 2) >> 0] | 0;
        i26 = HEAP8[i46 + (i47 << 2) + 1 >> 0] | 0;
        i39 = HEAP8[i46 + (i47 << 2) + 2 >> 0] | 0;
        i43 = HEAP8[i46 + (i47 << 2) + 3 >> 0] | 0;
        i47 = i47 + i45 | 0;
        i25 = HEAP8[i46 + (i47 << 2) >> 0] | 0;
        i38 = HEAP8[i46 + (i47 << 2) + 1 >> 0] | 0;
        i42 = HEAP8[i46 + (i47 << 2) + 2 >> 0] | 0;
        i47 = HEAP8[i46 + (i47 << 2) + 3 >> 0] | 0;
        i45 = i24 + i45 | 0;
        i24 = HEAP8[i46 + (i45 << 2) >> 0] | 0;
        i37 = HEAP8[i46 + (i45 << 2) + 1 >> 0] | 0;
        i41 = HEAP8[i46 + (i45 << 2) + 2 >> 0] | 0;
        i45 = HEAP8[i46 + (i45 << 2) + 3 >> 0] | 0;
        i46 = i10 & 65535;
        i48 = i6 & 65535;
        i3 = (i12 ? i25 : i4) & 255;
        i3 = ((Math_imul(((i12 ? i24 : i5) & 255) - i3 | 0, i46) | 0) >>> 16) + i3 | 0;
        i25 = (i12 ? i4 : i25) & 255;
        HEAP8[i2 >> 0] = ((Math_imul((((Math_imul(((i12 ? i5 : i24) & 255) - i25 | 0, i46) | 0) >>> 16) + i25 & 255) - (i3 & 255) | 0, i48) | 0) >>> 16) + i3;
        i3 = (i12 ? i38 : i26) & 255;
        i3 = ((Math_imul(((i12 ? i37 : i36) & 255) - i3 | 0, i46) | 0) >>> 16) + i3 | 0;
        i38 = (i12 ? i26 : i38) & 255;
        HEAP8[i2 + 1 >> 0] = ((Math_imul((((Math_imul(((i12 ? i36 : i37) & 255) - i38 | 0, i46) | 0) >>> 16) + i38 & 255) - (i3 & 255) | 0, i48) | 0) >>> 16) + i3;
        i3 = (i12 ? i42 : i39) & 255;
        i3 = ((Math_imul(((i12 ? i41 : i40) & 255) - i3 | 0, i46) | 0) >>> 16) + i3 | 0;
        i42 = (i12 ? i39 : i42) & 255;
        HEAP8[i2 + 2 >> 0] = ((Math_imul((((Math_imul(((i12 ? i40 : i41) & 255) - i42 | 0, i46) | 0) >>> 16) + i42 & 255) - (i3 & 255) | 0, i48) | 0) >>> 16) + i3;
        i3 = (i12 ? i47 : i43) & 255;
        i3 = ((Math_imul(((i12 ? i45 : i44) & 255) - i3 | 0, i46) | 0) >>> 16) + i3 | 0;
        i47 = (i12 ? i43 : i47) & 255;
        HEAP8[i2 + 3 >> 0] = ((Math_imul((((Math_imul(((i12 ? i44 : i45) & 255) - i47 | 0, i46) | 0) >>> 16) + i47 & 255) - (i3 & 255) | 0, i48) | 0) >>> 16) + i3;
        i3 = HEAP32[i23 >> 2] | 0;
       }
       i2 = i2 + 4 | 0;
       i7 = i7 + 1 | 0;
       if ((i7 | 0) >= (i3 | 0)) break; else {
        i10 = i10 + i21 | 0;
        i6 = i6 + i28 | 0;
       }
      }
     }
     i4 = HEAP32[i29 >> 2] | 0;
    }
    i11 = i11 + 1 | 0;
    if ((i11 | 0) >= (i4 | 0)) break; else i2 = i2 + i20 | 0;
   }
  }
  HEAP32[i33 >> 2] = 0;
  _SDL_GetColorKey(i31, i33) | 0;
  _SDL_SetColorKey(i32, 3, HEAP32[i33 >> 2] | 0) | 0;
 } else {
  i6 = i31 + 4 | 0;
  i4 = HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0;
  i3 = HEAP32[i4 >> 2] | 0;
  i7 = i32 + 4 | 0;
  i2 = HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0;
  if ((i3 | 0) > 0) {
   i5 = 0;
   do {
    i3 = (HEAP32[i2 + 4 >> 2] | 0) + (i5 << 2) | 0;
    i2 = (HEAP32[i4 + 4 >> 2] | 0) + (i5 << 2) | 0;
    i2 = HEAPU8[i2 >> 0] | HEAPU8[i2 + 1 >> 0] << 8 | HEAPU8[i2 + 2 >> 0] << 16 | HEAPU8[i2 + 3 >> 0] << 24;
    HEAP8[i3 >> 0] = i2;
    HEAP8[i3 + 1 >> 0] = i2 >> 8;
    HEAP8[i3 + 2 >> 0] = i2 >> 16;
    HEAP8[i3 + 3 >> 0] = i2 >> 24;
    i5 = i5 + 1 | 0;
    i4 = HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0;
    i3 = HEAP32[i4 >> 2] | 0;
    i2 = HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0;
   } while ((i5 | 0) < (i3 | 0));
  }
  HEAP32[i2 >> 2] = i3;
  i23 = ~~d1;
  i18 = ~~d8;
  i19 = i31 + 8 | 0;
  i2 = HEAP32[i19 >> 2] | 0;
  i20 = i32 + 8 | 0;
  i3 = HEAP32[i20 >> 2] | 0;
  i21 = i31 + 12 | 0;
  i4 = HEAP32[i21 >> 2] | 0;
  i5 = HEAP32[i29 >> 2] | 0;
  i7 = HEAP32[i32 + 20 >> 2] | 0;
  i6 = i32 + 16 | 0;
  i22 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  HEAP32[i33 >> 2] = 0;
  _SDL_GetColorKey(i31, i33) | 0;
  _SDL_memset(i7, HEAP32[i33 >> 2] & 255, Math_imul(HEAP32[i29 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0) | 0;
  i6 = HEAP32[i29 >> 2] | 0;
  if ((i6 | 0) > 0) {
   i17 = (i2 - i3 << 15) + (Math_imul(65536 - i18 | 0, i24) | 0) | 0;
   i16 = (i35 << 16) - (Math_imul(i23, i24) | 0) + (i4 - i5 << 15) | 0;
   i15 = (i25 | 0) == 0;
   i12 = (i26 | 0) == 0;
   i13 = i31 + 20 | 0;
   i14 = i31 + 16 | 0;
   i2 = HEAP32[i20 >> 2] | 0;
   i4 = i6;
   i3 = i7;
   i11 = 0;
   while (1) {
    i5 = i35 - i11 | 0;
    if ((i2 | 0) > 0) {
     i10 = i17 + (Math_imul(i5, i23) | 0) | 0;
     i6 = i16 - (Math_imul(i5, i18) | 0) | 0;
     i7 = 0;
     while (1) {
      i4 = i10 >> 16;
      i5 = i6 >> 16;
      if (!i15) i4 = (HEAP32[i19 >> 2] | 0) + ~i4 | 0;
      if (!i12) i5 = (HEAP32[i21 >> 2] | 0) + ~i5 | 0;
      if (((i5 | i4 | 0) > -1 ? (i4 | 0) < (HEAP32[i19 >> 2] | 0) : 0) ? (i5 | 0) < (HEAP32[i21 >> 2] | 0) : 0) {
       HEAP8[i3 >> 0] = HEAP8[(HEAP32[i13 >> 2] | 0) + ((Math_imul(HEAP32[i14 >> 2] | 0, i5) | 0) + i4) >> 0] | 0;
       i2 = HEAP32[i20 >> 2] | 0;
      }
      i3 = i3 + 1 | 0;
      i7 = i7 + 1 | 0;
      if ((i7 | 0) >= (i2 | 0)) break; else {
       i10 = i10 + i18 | 0;
       i6 = i6 + i23 | 0;
      }
     }
     i4 = HEAP32[i29 >> 2] | 0;
    }
    i11 = i11 + 1 | 0;
    if ((i11 | 0) >= (i4 | 0)) break; else i3 = i3 + i22 | 0;
   }
  }
  HEAP32[i33 >> 2] = 0;
  _SDL_GetColorKey(i31, i33) | 0;
  _SDL_SetColorKey(i32, 3, HEAP32[i33 >> 2] | 0) | 0;
 }
 if (HEAP32[i31 >> 2] & 2) _SDL_UnlockSurface(i31);
 if (!i30) {
  i48 = i32;
  STACKTOP = i34;
  return i48 | 0;
 }
 _SDL_FreeSurface(i31);
 i48 = i32;
 STACKTOP = i34;
 return i48 | 0;
}

function _SDL_RLEAlphaBlit(i2, i16, i20, i1) {
 i2 = i2 | 0;
 i16 = i16 | 0;
 i20 = i20 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0;
 i8 = i2 + 8 | 0;
 i18 = HEAP32[i8 >> 2] | 0;
 i11 = i20 + 4 | 0;
 i12 = HEAP32[i11 >> 2] | 0;
 if ((HEAP32[i20 >> 2] & 2 | 0) != 0 ? (_SDL_LockSurface(i20) | 0) < 0 : 0) {
  i20 = -1;
  return i20 | 0;
 }
 i15 = HEAP32[i20 + 20 >> 2] | 0;
 i19 = i20 + 16 | 0;
 i14 = Math_imul(HEAP32[i19 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0) | 0;
 i3 = HEAP8[i12 + 9 >> 0] | 0;
 i10 = i3 & 255;
 i14 = (Math_imul(i10, HEAP32[i1 >> 2] | 0) | 0) + i14 | 0;
 i9 = i15 + i14 | 0;
 i2 = (HEAP32[(HEAP32[i2 + 52 >> 2] | 0) + 12 >> 2] | 0) + 28 | 0;
 i1 = HEAP32[i16 + 4 >> 2] | 0;
 L5 : do if (!i1) i7 = 20; else {
  if (i3 << 24 >> 24 == 2) i6 = i1; else {
   i4 = i1 << 1;
   while (1) {
    i1 = 0;
    do {
     i1 = (HEAPU16[i2 >> 1] | 0) + i1 | 0;
     i17 = HEAP16[i2 + 2 >> 1] | 0;
     i3 = i17 & 65535;
     if (!(i17 << 16 >> 16)) if (!i1) break L5; else i2 = i2 + 4 | 0; else {
      i1 = i1 + i3 | 0;
      i2 = i2 + ((i3 << 2) + 4) | 0;
     }
    } while ((i1 | 0) < (i18 | 0));
    i4 = i4 + -1 | 0;
    if (!i4) {
     i7 = 20;
     break L5;
    }
   }
  }
  while (1) {
   i1 = 0;
   while (1) {
    i1 = (HEAPU8[i2 >> 0] | 0) + i1 | 0;
    i17 = HEAP8[i2 + 1 >> 0] | 0;
    i3 = i17 & 255;
    if (!(i17 << 24 >> 24)) if (!i1) break L5; else {
     i4 = 2;
     i5 = i2 + 2 | 0;
    } else {
     i5 = (i3 << 1) + 2 | 0;
     i4 = i5;
     i1 = i1 + i3 | 0;
     i5 = i2 + i5 | 0;
    }
    if ((i1 | 0) < (i18 | 0)) i2 = i5; else {
     i3 = i4;
     i1 = i5;
     break;
    }
   }
   i4 = 0;
   i1 = i2 + ((i1 & 2) + i3) | 0;
   while (1) {
    i17 = HEAPU16[i1 + 2 >> 1] | 0;
    i2 = i1 + ((i17 << 2) + 4) | 0;
    i4 = (HEAPU16[i1 >> 1] | 0) + i4 + i17 | 0;
    if ((i4 | 0) >= (i18 | 0)) break; else i1 = i2;
   }
   i6 = i6 + -1 | 0;
   if (!i6) {
    i7 = 20;
    break;
   }
  }
 } while (0);
 L30 : do if ((i7 | 0) == 20) {
  i17 = HEAP32[i16 >> 2] | 0;
  if ((i17 | 0) == 0 ? (HEAP32[i16 + 8 >> 2] | 0) == (HEAP32[i8 >> 2] | 0) : 0) {
   switch (i10 | 0) {
   case 2:
    break;
   case 4:
    {
     i1 = HEAP32[i16 + 12 >> 2] | 0;
     while (1) {
      i3 = 0;
      do {
       i3 = (HEAPU16[i2 >> 1] | 0) + i3 | 0;
       i17 = HEAP16[i2 + 2 >> 1] | 0;
       i4 = i17 & 65535;
       i5 = i2 + 4 | 0;
       if (!(i17 << 16 >> 16)) if (!i3) break L30; else i2 = i5; else {
        i17 = i4 << 2;
        _SDL_memcpy(i9 + (i3 << 2) | 0, i5, i17) | 0;
        i3 = i3 + i4 | 0;
        i2 = i2 + (i17 + 4) | 0;
       }
      } while ((i3 | 0) < (i18 | 0));
      i3 = 0;
      do {
       i3 = (HEAPU16[i2 >> 1] | 0) + i3 | 0;
       i17 = HEAP16[i2 + 2 >> 1] | 0;
       i5 = i17 & 65535;
       i4 = i2 + 4 | 0;
       if (!(i17 << 16 >> 16)) i2 = i4; else {
        i8 = i5 << 2;
        i6 = i9 + (i3 << 2) | 0;
        i7 = 0;
        while (1) {
         i15 = HEAP32[i4 >> 2] | 0;
         i14 = HEAP32[i6 >> 2] | 0;
         i16 = i15 >>> 24;
         i17 = i14 & 16711935;
         i14 = i14 & 65280;
         HEAP32[i6 >> 2] = ((Math_imul((i15 & 65280) - i14 | 0, i16) | 0) >>> 8) + i14 & 65280 | ((Math_imul((i15 & 16711935) - i17 | 0, i16) | 0) >>> 8) + i17 & 16711935 | -16777216;
         i7 = i7 + 1 | 0;
         if ((i7 | 0) == (i5 | 0)) break; else {
          i6 = i6 + 4 | 0;
          i4 = i4 + 4 | 0;
         }
        }
        i3 = i3 + i5 | 0;
        i2 = i2 + (i8 + 4) | 0;
       }
      } while ((i3 | 0) < (i18 | 0));
      i1 = i1 + -1 | 0;
      if (!i1) break L30; else i9 = i9 + (HEAP32[i19 >> 2] | 0) | 0;
     }
    }
   default:
    break L30;
   }
   if (((HEAP32[i12 + 16 >> 2] | 0) != 2016 ? (HEAP32[i12 + 12 >> 2] | 0) != 2016 : 0) ? (HEAP32[i12 + 20 >> 2] | 0) != 2016 : 0) {
    i1 = HEAP32[i16 + 12 >> 2] | 0;
    while (1) {
     i3 = 0;
     while (1) {
      i3 = (HEAPU8[i2 >> 0] | 0) + i3 | 0;
      i17 = HEAP8[i2 + 1 >> 0] | 0;
      i4 = i17 & 255;
      i5 = i2 + 2 | 0;
      if (!(i17 << 24 >> 24)) if (!i3) break L30; else i6 = 2; else {
       i6 = i4 << 1;
       _SDL_memcpy(i9 + (i3 << 1) | 0, i5, i6) | 0;
       i5 = i6 + 2 | 0;
       i6 = i5;
       i3 = i3 + i4 | 0;
       i5 = i2 + i5 | 0;
      }
      if ((i3 | 0) < (i18 | 0)) i2 = i5; else {
       i4 = i6;
       i3 = i5;
       break;
      }
     }
     i5 = 0;
     i8 = i2 + ((i3 & 2) + i4) | 0;
     while (1) {
      i3 = (HEAPU16[i8 >> 1] | 0) + i5 | 0;
      i17 = HEAP16[i8 + 2 >> 1] | 0;
      i4 = i17 & 65535;
      i2 = i8 + 4 | 0;
      if (i17 << 16 >> 16) {
       i7 = i4 << 2;
       i5 = i9 + (i3 << 1) | 0;
       i6 = 0;
       while (1) {
        i16 = HEAP32[i2 >> 2] | 0;
        i17 = HEAPU16[i5 >> 1] | 0;
        i17 = (i17 << 16 | i17) & 65043487;
        i17 = ((Math_imul((i16 & 65043487) - i17 | 0, i16 >>> 5 & 31) | 0) >>> 5) + i17 & 65043487;
        HEAP16[i5 >> 1] = i17 >>> 16 | i17;
        i6 = i6 + 1 | 0;
        if ((i6 | 0) == (i4 | 0)) break; else {
         i5 = i5 + 2 | 0;
         i2 = i2 + 4 | 0;
        }
       }
       i3 = i3 + i4 | 0;
       i2 = i8 + (i7 + 4) | 0;
      }
      if ((i3 | 0) < (i18 | 0)) {
       i5 = i3;
       i8 = i2;
      } else break;
     }
     i1 = i1 + -1 | 0;
     if (!i1) break L30; else i9 = i9 + (HEAP32[i19 >> 2] | 0) | 0;
    }
   }
   i1 = HEAP32[i16 + 12 >> 2] | 0;
   while (1) {
    i3 = 0;
    while (1) {
     i3 = (HEAPU8[i2 >> 0] | 0) + i3 | 0;
     i17 = HEAP8[i2 + 1 >> 0] | 0;
     i4 = i17 & 255;
     i6 = i2 + 2 | 0;
     if (!(i17 << 24 >> 24)) if (!i3) break L30; else {
      i5 = 2;
      i4 = i6;
     } else {
      i17 = i4 << 1;
      _SDL_memcpy(i9 + (i3 << 1) | 0, i6, i17) | 0;
      i17 = i17 + 2 | 0;
      i5 = i17;
      i3 = i3 + i4 | 0;
      i4 = i2 + i17 | 0;
     }
     if ((i3 | 0) < (i18 | 0)) i2 = i4; else break;
    }
    i3 = 0;
    i8 = i2 + ((i4 & 2) + i5) | 0;
    while (1) {
     i3 = (HEAPU16[i8 >> 1] | 0) + i3 | 0;
     i17 = HEAP16[i8 + 2 >> 1] | 0;
     i4 = i17 & 65535;
     i2 = i8 + 4 | 0;
     if (i17 << 16 >> 16) {
      i7 = i4 << 2;
      i5 = i9 + (i3 << 1) | 0;
      i6 = 0;
      while (1) {
       i16 = HEAP32[i2 >> 2] | 0;
       i17 = HEAPU16[i5 >> 1] | 0;
       i17 = (i17 << 16 | i17) & 132184095;
       i17 = ((Math_imul((i16 & 132184095) - i17 | 0, i16 >>> 5 & 31) | 0) >>> 5) + i17 & 132184095;
       HEAP16[i5 >> 1] = i17 >>> 16 | i17;
       i6 = i6 + 1 | 0;
       if ((i6 | 0) == (i4 | 0)) break; else {
        i5 = i5 + 2 | 0;
        i2 = i2 + 4 | 0;
       }
      }
      i3 = i3 + i4 | 0;
      i2 = i8 + (i7 + 4) | 0;
     }
     if ((i3 | 0) < (i18 | 0)) i8 = i2; else break;
    }
    i1 = i1 + -1 | 0;
    if (!i1) break L30; else i9 = i9 + (HEAP32[i19 >> 2] | 0) | 0;
   }
  }
  i1 = HEAP32[i11 >> 2] | 0;
  switch (HEAPU8[i1 + 9 >> 0] | 0 | 0) {
  case 2:
   break;
  case 4:
   {
    i13 = HEAP32[i16 + 8 >> 2] | 0;
    i12 = i13 + i17 | 0;
    i13 = ~i13 - i17 | 0;
    i11 = i15 + (i14 - (i17 << 2)) | 0;
    i1 = HEAP32[i16 + 12 >> 2] | 0;
    while (1) {
     i3 = 0;
     do {
      i3 = (HEAPU16[i2 >> 1] | 0) + i3 | 0;
      i16 = HEAP16[i2 + 2 >> 1] | 0;
      i6 = i16 & 65535;
      if (!(i16 << 16 >> 16)) if (!i3) break L30; else i2 = i2 + 4 | 0; else {
       i5 = i17 - i3 | 0;
       i16 = (i5 | 0) > 0;
       i4 = i16 ? i17 : i3;
       i5 = i6 - (i16 ? i5 : 0) | 0;
       i16 = i12 - i4 | 0;
       i5 = (i5 | 0) > (i16 | 0) ? i16 : i5;
       if ((i5 | 0) > 0) _SDL_memcpy(i11 + (i4 << 2) | 0, i2 + ((i4 - i3 << 2) + 4) | 0, i5 << 2) | 0;
       i2 = i2 + ((i6 << 2) + 4) | 0;
       i3 = i3 + i6 | 0;
      }
     } while ((i3 | 0) < (i18 | 0));
     i6 = 0;
     while (1) {
      i4 = HEAPU16[i2 >> 1] | 0;
      i3 = i4 + i6 | 0;
      i16 = HEAP16[i2 + 2 >> 1] | 0;
      i10 = i16 & 65535;
      i8 = i2 + 4 | 0;
      if (!(i16 << 16 >> 16)) i2 = i8; else {
       i5 = i17 - i3 | 0;
       i16 = (i5 | 0) > 0;
       i7 = i16 ? i17 : i3;
       i5 = i16 ? i5 : 0;
       i16 = i10 - i5 | 0;
       i15 = i12 - i7 | 0;
       if ((((i16 | 0) > (i15 | 0) ? i15 : i16) | 0) > 0) {
        i9 = i7 - i3 | 0;
        i16 = i13 + i6 + i4 + i5 | 0;
        i4 = i5 + ~i10 | 0;
        i4 = ~((i16 | 0) > (i4 | 0) ? i16 : i4);
        i5 = 0;
        do {
         i6 = HEAP32[i8 + (i9 + i5 << 2) >> 2] | 0;
         i16 = i11 + (i5 + i7 << 2) | 0;
         i15 = HEAP32[i16 >> 2] | 0;
         i14 = i6 >>> 24;
         i21 = i15 & 16711935;
         i15 = i15 & 65280;
         HEAP32[i16 >> 2] = ((Math_imul((i6 & 16711935) - i21 | 0, i14) | 0) >>> 8) + i21 & 16711935 | ((Math_imul((i6 & 65280) - i15 | 0, i14) | 0) >>> 8) + i15 & 65280 | -16777216;
         i5 = i5 + 1 | 0;
        } while ((i5 | 0) != (i4 | 0));
       }
       i2 = i2 + ((i10 << 2) + 4) | 0;
       i3 = i3 + i10 | 0;
      }
      if ((i3 | 0) < (i18 | 0)) i6 = i3; else break;
     }
     i1 = i1 + -1 | 0;
     if (!i1) break L30; else i11 = i11 + (HEAP32[i19 >> 2] | 0) | 0;
    }
   }
  default:
   break L30;
  }
  if (((HEAP32[i1 + 16 >> 2] | 0) != 2016 ? (HEAP32[i1 + 12 >> 2] | 0) != 2016 : 0) ? (HEAP32[i1 + 20 >> 2] | 0) != 2016 : 0) {
   i13 = HEAP32[i16 + 8 >> 2] | 0;
   i12 = i13 + i17 | 0;
   i13 = ~i13 - i17 | 0;
   i11 = i15 + (i14 - (i17 << 1)) | 0;
   i1 = HEAP32[i16 + 12 >> 2] | 0;
   while (1) {
    i3 = 0;
    while (1) {
     i3 = (HEAPU8[i2 >> 0] | 0) + i3 | 0;
     i21 = HEAP8[i2 + 1 >> 0] | 0;
     i6 = i21 & 255;
     if (!(i21 << 24 >> 24)) if (!i3) break L30; else {
      i4 = i2 + 2 | 0;
      i5 = 2;
     } else {
      i5 = i17 - i3 | 0;
      i4 = (i5 | 0) > 0;
      i5 = i6 - (i4 ? i5 : 0) | 0;
      i4 = i4 ? i17 : i3;
      i21 = i12 - i4 | 0;
      i5 = (i5 | 0) > (i21 | 0) ? i21 : i5;
      if ((i5 | 0) > 0) _SDL_memcpy(i11 + (i4 << 1) | 0, i2 + ((i4 - i3 << 1) + 2) | 0, i5 << 1) | 0;
      i5 = (i6 << 1) + 2 | 0;
      i4 = i2 + i5 | 0;
      i3 = i3 + i6 | 0;
     }
     if ((i3 | 0) < (i18 | 0)) i2 = i4; else {
      i3 = i5;
      break;
     }
    }
    i2 = i2 + ((i4 & 2) + i3) | 0;
    i6 = 0;
    while (1) {
     i4 = HEAPU16[i2 >> 1] | 0;
     i3 = i4 + i6 | 0;
     i21 = HEAP16[i2 + 2 >> 1] | 0;
     i10 = i21 & 65535;
     i8 = i2 + 4 | 0;
     if (!(i21 << 16 >> 16)) i2 = i8; else {
      i5 = i17 - i3 | 0;
      i7 = (i5 | 0) > 0;
      i5 = i7 ? i5 : 0;
      i21 = i10 - i5 | 0;
      i7 = i7 ? i17 : i3;
      i16 = i12 - i7 | 0;
      if ((((i21 | 0) > (i16 | 0) ? i16 : i21) | 0) > 0) {
       i9 = i7 - i3 | 0;
       i21 = i13 + i6 + i4 + i5 | 0;
       i4 = i5 + ~i10 | 0;
       i4 = ~((i21 | 0) > (i4 | 0) ? i21 : i4);
       i5 = 0;
       do {
        i15 = HEAP32[i8 + (i9 + i5 << 2) >> 2] | 0;
        i21 = i11 + (i5 + i7 << 1) | 0;
        i16 = HEAPU16[i21 >> 1] | 0;
        i16 = (i16 << 16 | i16) & 65043487;
        i16 = ((Math_imul((i15 & 65043487) - i16 | 0, i15 >>> 5 & 31) | 0) >>> 5) + i16 & 65043487;
        HEAP16[i21 >> 1] = i16 >>> 16 | i16;
        i5 = i5 + 1 | 0;
       } while ((i5 | 0) != (i4 | 0));
      }
      i2 = i2 + ((i10 << 2) + 4) | 0;
      i3 = i3 + i10 | 0;
     }
     if ((i3 | 0) < (i18 | 0)) i6 = i3; else break;
    }
    i1 = i1 + -1 | 0;
    if (!i1) break L30; else i11 = i11 + (HEAP32[i19 >> 2] | 0) | 0;
   }
  }
  i12 = HEAP32[i16 + 8 >> 2] | 0;
  i13 = i12 + i17 | 0;
  i12 = ~i12 - i17 | 0;
  i11 = i15 + (i14 - (i17 << 1)) | 0;
  i1 = HEAP32[i16 + 12 >> 2] | 0;
  while (1) {
   i3 = 0;
   while (1) {
    i3 = (HEAPU8[i2 >> 0] | 0) + i3 | 0;
    i21 = HEAP8[i2 + 1 >> 0] | 0;
    i6 = i21 & 255;
    if (!(i21 << 24 >> 24)) if (!i3) break L30; else {
     i4 = i2 + 2 | 0;
     i5 = 2;
    } else {
     i5 = i17 - i3 | 0;
     i4 = (i5 | 0) > 0;
     i5 = i6 - (i4 ? i5 : 0) | 0;
     i4 = i4 ? i17 : i3;
     i21 = i13 - i4 | 0;
     i5 = (i5 | 0) > (i21 | 0) ? i21 : i5;
     if ((i5 | 0) > 0) _SDL_memcpy(i11 + (i4 << 1) | 0, i2 + ((i4 - i3 << 1) + 2) | 0, i5 << 1) | 0;
     i5 = (i6 << 1) + 2 | 0;
     i4 = i2 + i5 | 0;
     i3 = i3 + i6 | 0;
    }
    if ((i3 | 0) < (i18 | 0)) i2 = i4; else {
     i3 = i5;
     break;
    }
   }
   i2 = i2 + ((i4 & 2) + i3) | 0;
   i6 = 0;
   while (1) {
    i4 = HEAPU16[i2 >> 1] | 0;
    i3 = i4 + i6 | 0;
    i21 = HEAP16[i2 + 2 >> 1] | 0;
    i10 = i21 & 65535;
    i8 = i2 + 4 | 0;
    if (!(i21 << 16 >> 16)) i2 = i8; else {
     i5 = i17 - i3 | 0;
     i7 = (i5 | 0) > 0;
     i5 = i7 ? i5 : 0;
     i21 = i10 - i5 | 0;
     i7 = i7 ? i17 : i3;
     i16 = i13 - i7 | 0;
     if ((((i21 | 0) > (i16 | 0) ? i16 : i21) | 0) > 0) {
      i9 = i7 - i3 | 0;
      i21 = i12 + i6 + i4 + i5 | 0;
      i4 = i5 + ~i10 | 0;
      i4 = ~((i21 | 0) > (i4 | 0) ? i21 : i4);
      i5 = 0;
      do {
       i15 = HEAP32[i8 + (i9 + i5 << 2) >> 2] | 0;
       i21 = i11 + (i5 + i7 << 1) | 0;
       i16 = HEAPU16[i21 >> 1] | 0;
       i16 = (i16 << 16 | i16) & 132184095;
       i16 = ((Math_imul((i15 & 132184095) - i16 | 0, i15 >>> 5 & 31) | 0) >>> 5) + i16 & 132184095;
       HEAP16[i21 >> 1] = i16 >>> 16 | i16;
       i5 = i5 + 1 | 0;
      } while ((i5 | 0) != (i4 | 0));
     }
     i2 = i2 + ((i10 << 2) + 4) | 0;
     i3 = i3 + i10 | 0;
    }
    if ((i3 | 0) < (i18 | 0)) i6 = i3; else break;
   }
   i1 = i1 + -1 | 0;
   if (!i1) break; else i11 = i11 + (HEAP32[i19 >> 2] | 0) | 0;
  }
 } while (0);
 if (!(HEAP32[i20 >> 2] & 2)) {
  i21 = 0;
  return i21 | 0;
 }
 _SDL_UnlockSurface(i20);
 i21 = 0;
 return i21 | 0;
}

function _SDL_RLESurface(i27) {
 i27 = i27 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 if (HEAP32[i27 >> 2] & 2) _SDL_UnRLESurface(i27, 1);
 i8 = i27 + 4 | 0;
 i4 = HEAP32[i8 >> 2] | 0;
 i5 = HEAP8[i4 + 8 >> 0] | 0;
 if ((i5 & 255) < 8) {
  i27 = -1;
  return i27 | 0;
 }
 i26 = i27 + 20 | 0;
 if (!(HEAP32[i26 >> 2] | 0)) {
  i27 = -1;
  return i27 | 0;
 }
 i25 = i27 + 52 | 0;
 i2 = HEAP32[i25 >> 2] | 0;
 i3 = HEAP32[i2 + 68 >> 2] | 0;
 if (!((i3 & 272 | 0) != 0 & (i3 & 1 | 0) == 0)) {
  i27 = -1;
  return i27 | 0;
 }
 do if (!(i3 & 2)) if (!(i3 & 608)) {
  i1 = HEAP32[i4 + 24 >> 2] | 0;
  break;
 } else {
  i27 = -1;
  return i27 | 0;
 } else {
  i1 = HEAP32[i4 + 24 >> 2] | 0;
  if (i3 & 608 | i1) {
   i27 = -1;
   return i27 | 0;
  }
 } while (0);
 if ((i3 & 16 | 0) == 0 | (i1 | 0) == 0) {
  if (!(HEAP32[i2 + 4 >> 2] | 0)) {
   i27 = -1;
   return i27 | 0;
  }
  i2 = HEAP8[i4 + 9 >> 0] | 0;
  i22 = i2 & 255;
  switch (i22 | 0) {
  case 1:
   {
    i1 = (Math_imul((HEAP32[i27 + 12 >> 2] | 0) * 3 | 0, ((HEAP32[i27 + 8 >> 2] | 0) / 2 | 0) + 1 | 0) | 0) + 2 | 0;
    break;
   }
  case 3:
  case 2:
   {
    i1 = HEAP32[i27 + 8 >> 2] | 0;
    i1 = (Math_imul((Math_imul(i1, i22) | 0) + 2 + (((i1 | 0) / 255 | 0) << 1) | 0, HEAP32[i27 + 12 >> 2] | 0) | 0) + 2 | 0;
    break;
   }
  case 4:
   {
    i1 = HEAP32[i27 + 8 >> 2] | 0;
    i1 = (Math_imul((((i1 | 0) / 65535 | 0) + i1 << 2) + 4 | 0, HEAP32[i27 + 12 >> 2] | 0) | 0) + 4 | 0;
    break;
   }
  default:
   i1 = 0;
  }
  i23 = _SDL_malloc(i1) | 0;
  do if (!i23) if ((_SDL_Error(0) | 0) < 0) {
   i27 = -1;
   return i27 | 0;
  } else {
   i1 = HEAP32[i25 >> 2] | 0;
   break;
  } else {
   i21 = i2 << 24 >> 24 == 4;
   i20 = i21 ? 65535 : 255;
   i12 = ~HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2];
   i13 = HEAP32[(HEAP32[i25 >> 2] | 0) + 72 >> 2] & i12;
   i14 = HEAP32[12864 + (i22 + -1 << 2) >> 2] | 0;
   i15 = HEAP32[i27 + 8 >> 2] | 0;
   i16 = HEAP32[i27 + 12 >> 2] | 0;
   if ((i16 | 0) > 0) {
    i17 = i20 & 65535;
    i18 = i27 + 16 | 0;
    i2 = i23;
    i1 = i23;
    i19 = HEAP32[i26 >> 2] | 0;
    i3 = 0;
    while (1) {
     i11 = 0;
     i6 = 0;
     while (1) {
      L43 : do if ((i6 | 0) < (i15 | 0)) {
       i4 = i6;
       do {
        i24 = i19 + (Math_imul(i4, i22) | 0) | 0;
        if (((FUNCTION_TABLE_ii[i14 & 127](i24) | 0) & i12 | 0) != (i13 | 0)) break L43;
        i4 = i4 + 1 | 0;
       } while ((i4 | 0) < (i15 | 0));
      } else i4 = i6; while (0);
      L48 : do if ((i4 | 0) < (i15 | 0)) {
       i5 = i4;
       while (1) {
        i24 = i19 + (Math_imul(i5, i22) | 0) | 0;
        if (((FUNCTION_TABLE_ii[i14 & 127](i24) | 0) & i12 | 0) == (i13 | 0)) {
         i10 = 1;
         break L48;
        }
        i5 = i5 + 1 | 0;
        if ((i5 | 0) >= (i15 | 0)) {
         i10 = 0;
         break;
        }
       }
      } else {
       i10 = 0;
       i5 = i4;
      } while (0);
      i6 = i4 - i6 | 0;
      i11 = (i6 | 0) == (i15 | 0) ? 1 : i11;
      i9 = i5 - i4 | 0;
      if ((i6 | 0) > (i20 | 0)) if (i21) do {
       HEAP16[i2 >> 1] = i17;
       HEAP16[i2 + 2 >> 1] = 0;
       i2 = i2 + 4 | 0;
       i6 = i6 - i20 | 0;
      } while ((i6 | 0) > (i20 | 0)); else do {
       HEAP8[i2 >> 0] = -1;
       HEAP8[i2 + 1 >> 0] = 0;
       i2 = i2 + 2 | 0;
       i6 = i6 - i20 | 0;
      } while ((i6 | 0) > (i20 | 0));
      i8 = (i9 | 0) < (i20 | 0) ? i9 : i20;
      if (i21) {
       HEAP16[i2 >> 1] = i6;
       HEAP16[i2 + 2 >> 1] = i8;
       i6 = 4;
       i7 = i2 + 4 | 0;
      } else {
       HEAP8[i2 >> 0] = i6;
       HEAP8[i2 + 1 >> 0] = i8;
       i6 = 2;
       i7 = i2 + 2 | 0;
      }
      i24 = Math_imul(i8, i22) | 0;
      _SDL_memcpy(i7, i19 + (Math_imul(i4, i22) | 0) | 0, i24) | 0;
      i2 = i2 + (i6 + i24) | 0;
      i7 = i9 - i8 | 0;
      i6 = i8 + i4 | 0;
      if ((i9 | 0) != (i8 | 0)) if (i21) while (1) {
       i4 = (i7 | 0) < (i20 | 0) ? i7 : i20;
       HEAP16[i2 >> 1] = 0;
       HEAP16[i2 + 2 >> 1] = i4;
       i24 = Math_imul(i4, i22) | 0;
       _SDL_memcpy(i2 + 4 | 0, i19 + (Math_imul(i6, i22) | 0) | 0, i24) | 0;
       i2 = i2 + (i24 + 4) | 0;
       if ((i7 | 0) == (i4 | 0)) break; else {
        i7 = i7 - i4 | 0;
        i6 = i4 + i6 | 0;
       }
      } else while (1) {
       i4 = (i7 | 0) < (i20 | 0) ? i7 : i20;
       HEAP8[i2 >> 0] = 0;
       HEAP8[i2 + 1 >> 0] = i4;
       i24 = Math_imul(i4, i22) | 0;
       _SDL_memcpy(i2 + 2 | 0, i19 + (Math_imul(i6, i22) | 0) | 0, i24) | 0;
       i2 = i2 + (i24 + 2) | 0;
       if ((i7 | 0) == (i4 | 0)) break; else {
        i7 = i7 - i4 | 0;
        i6 = i4 + i6 | 0;
       }
      }
      i1 = (i11 | 0) == 0 ? i2 : i1;
      if (!i10) break; else i6 = i5;
     }
     i3 = i3 + 1 | 0;
     if ((i3 | 0) == (i16 | 0)) break; else i19 = i19 + (HEAP32[i18 >> 2] | 0) | 0;
    }
   } else i1 = i23;
   if (i21) {
    HEAP16[i1 >> 1] = 0;
    HEAP16[i1 + 2 >> 1] = 0;
    i1 = i1 + 4 | 0;
   } else {
    HEAP8[i1 >> 0] = 0;
    HEAP8[i1 + 1 >> 0] = 0;
    i1 = i1 + 2 | 0;
   }
   if (!(HEAP32[i27 >> 2] & 1)) {
    _SDL_free(HEAP32[i26 >> 2] | 0);
    HEAP32[i26 >> 2] = 0;
   }
   i26 = _SDL_realloc(i23, i1 - i23 | 0) | 0;
   i1 = HEAP32[i25 >> 2] | 0;
   HEAP32[i1 + 12 >> 2] = (i26 | 0) == 0 ? i23 : i26;
  } while (0);
  HEAP32[i1 + 8 >> 2] = 11;
  i26 = i1 + 68 | 0;
  HEAP32[i26 >> 2] = HEAP32[i26 >> 2] | 8192;
 } else {
  i1 = HEAP32[i2 >> 2] | 0;
  if (!i1) {
   i27 = -1;
   return i27 | 0;
  }
  i23 = HEAP32[i1 + 4 >> 2] | 0;
  if (i5 << 24 >> 24 != 32) {
   i27 = -1;
   return i27 | 0;
  }
  i5 = i23 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i23 + 16 | 0;
  i2 = HEAP32[i6 >> 2] | 0;
  i7 = i23 + 20 | 0;
  i3 = HEAP32[i7 >> 2] | 0;
  i4 = i2 | i1 | i3;
  i24 = i23 + 9 | 0;
  L90 : do switch (HEAPU8[i24 >> 0] | 0) {
  case 2:
   {
    if ((i4 | 0) < 65535) {
     switch (i4 | 0) {
     case 32767:
      break;
     default:
      {
       i27 = -1;
       return i27 | 0;
      }
     }
     if ((i1 | 0) == 992 | (i2 | 0) == 992 | (i3 | 0) == 992) i1 = 25; else {
      i27 = -1;
      return i27 | 0;
     }
    } else {
     switch (i4 | 0) {
     case 65535:
      break;
     default:
      {
       i27 = -1;
       return i27 | 0;
      }
     }
     if ((i1 | 0) == 2016 | (i2 | 0) == 2016 | (i3 | 0) == 2016) i1 = 24; else {
      i27 = -1;
      return i27 | 0;
     }
    }
    i21 = 26;
    i20 = i1;
    i1 = (Math_imul(((HEAP32[i27 + 8 >> 2] | 0) * 6 | 0) + 8 | 0, HEAP32[i27 + 12 >> 2] | 0) | 0) + 2 | 0;
    break;
   }
  case 4:
   if ((i4 | 0) == 16777215) {
    i21 = 27;
    i20 = 27;
    i1 = Math_imul(HEAP32[i27 + 12 >> 2] << 3, (HEAP32[i27 + 8 >> 2] | 0) + 1 | 0) | 0 | 4;
    break L90;
   } else {
    i27 = -1;
    return i27 | 0;
   }
  default:
   {
    i27 = -1;
    return i27 | 0;
   }
  } while (0);
  i22 = _SDL_malloc(i1 + 28 | 0) | 0;
  do if (!i22) if ((_SDL_Error(0) | 0) < 0) {
   i27 = -1;
   return i27 | 0;
  } else {
   i1 = HEAP32[i25 >> 2] | 0;
   break;
  } else {
   i2 = HEAP8[i24 >> 0] | 0;
   HEAP8[i22 >> 0] = i2;
   HEAP32[i22 + 4 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i22 + 8 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i22 + 12 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i22 + 16 >> 2] = HEAP32[i23 + 24 >> 2];
   HEAP8[i22 + 20 >> 0] = HEAP8[i23 + 28 >> 0] | 0;
   HEAP8[i22 + 21 >> 0] = HEAP8[i23 + 29 >> 0] | 0;
   HEAP8[i22 + 22 >> 0] = HEAP8[i23 + 30 >> 0] | 0;
   HEAP8[i22 + 23 >> 0] = HEAP8[i23 + 31 >> 0] | 0;
   HEAP8[i22 + 24 >> 0] = HEAP8[i23 + 32 >> 0] | 0;
   HEAP8[i22 + 25 >> 0] = HEAP8[i23 + 33 >> 0] | 0;
   HEAP8[i22 + 26 >> 0] = HEAP8[i23 + 34 >> 0] | 0;
   HEAP8[i22 + 27 >> 0] = HEAP8[i23 + 35 >> 0] | 0;
   i1 = i22 + 28 | 0;
   i18 = HEAP32[i27 + 12 >> 2] | 0;
   i19 = HEAP32[i27 + 8 >> 2] | 0;
   i17 = HEAP32[i8 >> 2] | 0;
   if ((i18 | 0) > 0) {
    i14 = i17 + 24 | 0;
    i15 = i17 + 35 | 0;
    i16 = i27 + 16 | 0;
    i2 = i1;
    i13 = HEAP32[i26 >> 2] | 0;
    i12 = 0;
    while (1) {
     i3 = 0;
     i8 = 0;
     while (1) {
      L122 : do if ((i8 | 0) < (i19 | 0)) {
       i5 = HEAP32[i14 >> 2] | 0;
       i6 = HEAPU8[i15 >> 0] | 0;
       i4 = i8;
       do {
        if (((HEAP32[i13 + (i4 << 2) >> 2] & i5) >>> i6 | 0) == 255) break L122;
        i4 = i4 + 1 | 0;
       } while ((i4 | 0) < (i19 | 0));
      } else i4 = i8; while (0);
      L128 : do if ((i4 | 0) < (i19 | 0)) {
       i5 = HEAP32[i14 >> 2] | 0;
       i6 = HEAPU8[i15 >> 0] | 0;
       i7 = i4;
       while (1) {
        if (((HEAP32[i13 + (i7 << 2) >> 2] & i5) >>> i6 | 0) != 255) {
         i10 = 1;
         break L128;
        }
        i7 = i7 + 1 | 0;
        if ((i7 | 0) >= (i19 | 0)) {
         i10 = 0;
         break;
        }
       }
      } else {
       i10 = 0;
       i7 = i4;
      } while (0);
      i5 = i4 - i8 | 0;
      i3 = (i5 | 0) == (i19 | 0) ? 1 : i3;
      i9 = i7 - i4 | 0;
      if ((i5 | 0) > 255) {
       i6 = -256 - i8 + i4 | 0;
       do {
        if ((HEAP8[i24 >> 0] | 0) == 4) {
         HEAP16[i2 >> 1] = 255;
         HEAP16[i2 + 2 >> 1] = 0;
         i2 = i2 + 4 | 0;
        } else {
         HEAP8[i2 >> 0] = -1;
         HEAP8[i2 + 1 >> 0] = 0;
         i2 = i2 + 2 | 0;
        }
        i5 = i5 + -255 | 0;
       } while ((i5 | 0) > 255);
       i5 = -255 - i8 + i4 - i6 + ((i6 >>> 0) % 255 | 0) | 0;
      }
      i8 = (i9 | 0) < 255 ? i9 : 255;
      if ((HEAP8[i24 >> 0] | 0) == 4) {
       HEAP16[i2 >> 1] = i5;
       HEAP16[i2 + 2 >> 1] = i8;
       i5 = 4;
       i6 = i2 + 4 | 0;
      } else {
       HEAP8[i2 >> 0] = i5;
       HEAP8[i2 + 1 >> 0] = i8;
       i5 = 2;
       i6 = i2 + 2 | 0;
      }
      i2 = i2 + ((FUNCTION_TABLE_iiiiii[i21 & 63](i6, i13 + (i4 << 2) | 0, i8, i17, i23) | 0) + i5) | 0;
      if ((i9 | 0) != (i8 | 0)) {
       i9 = i9 - i8 | 0;
       i8 = i8 + i4 | 0;
       while (1) {
        i6 = (i9 | 0) < 255 ? i9 : 255;
        if ((HEAP8[i24 >> 0] | 0) == 4) {
         HEAP16[i2 >> 1] = 0;
         HEAP16[i2 + 2 >> 1] = i6;
         i4 = 4;
         i5 = i2 + 4 | 0;
        } else {
         HEAP8[i2 >> 0] = 0;
         HEAP8[i2 + 1 >> 0] = i6;
         i4 = 2;
         i5 = i2 + 2 | 0;
        }
        i2 = i2 + ((FUNCTION_TABLE_iiiiii[i21 & 63](i5, i13 + (i8 << 2) | 0, i6, i17, i23) | 0) + i4) | 0;
        if ((i9 | 0) == (i6 | 0)) break; else {
         i9 = i9 - i6 | 0;
         i8 = i6 + i8 | 0;
        }
       }
      }
      if (i10) i8 = i7; else break;
     }
     i2 = i2 + (i2 & 2) | 0;
     i9 = 0;
     while (1) {
      L160 : do if ((i9 | 0) < (i19 | 0)) {
       i5 = HEAP32[i14 >> 2] | 0;
       i6 = HEAPU8[i15 >> 0] | 0;
       i4 = i9;
       do {
        if ((((HEAP32[i13 + (i4 << 2) >> 2] & i5) >>> i6) + -1 | 0) >>> 0 <= 253) break L160;
        i4 = i4 + 1 | 0;
       } while ((i4 | 0) < (i19 | 0));
      } else i4 = i9; while (0);
      L166 : do if ((i4 | 0) < (i19 | 0)) {
       i5 = HEAP32[i14 >> 2] | 0;
       i6 = HEAPU8[i15 >> 0] | 0;
       i7 = i4;
       while (1) {
        if ((((HEAP32[i13 + (i7 << 2) >> 2] & i5) >>> i6) + -1 | 0) >>> 0 >= 254) {
         i11 = 1;
         break L166;
        }
        i7 = i7 + 1 | 0;
        if ((i7 | 0) >= (i19 | 0)) {
         i11 = 0;
         break;
        }
       }
      } else {
       i11 = 0;
       i7 = i4;
      } while (0);
      i5 = i4 - i9 | 0;
      i3 = (i5 | 0) == (i19 | 0) & i3;
      i10 = i7 - i4 | 0;
      if ((i5 | 0) > 65535) {
       i8 = ((-65536 - i9 + i4 | 0) >>> 0) / 65535 | 0;
       i9 = i4 + -65535 - i9 + (Math_imul(i8, -65535) | 0) | 0;
       i6 = i2;
       while (1) {
        HEAP16[i6 >> 1] = -1;
        HEAP16[i6 + 2 >> 1] = 0;
        i5 = i5 + -65535 | 0;
        if ((i5 | 0) <= 65535) break; else i6 = i6 + 4 | 0;
       }
       i2 = i2 + ((i8 << 2) + 4) | 0;
       i5 = i9;
      }
      i8 = (i10 | 0) < 65535 ? i10 : 65535;
      HEAP16[i2 >> 1] = i5;
      HEAP16[i2 + 2 >> 1] = i8;
      i2 = i2 + ((FUNCTION_TABLE_iiiiii[i20 & 63](i2 + 4 | 0, i13 + (i4 << 2) | 0, i8, i17, i23) | 0) + 4) | 0;
      if ((i10 | 0) != (i8 | 0)) {
       i6 = i10 - i8 | 0;
       i5 = i8 + i4 | 0;
       while (1) {
        i4 = (i6 | 0) < 65535 ? i6 : 65535;
        HEAP16[i2 >> 1] = 0;
        HEAP16[i2 + 2 >> 1] = i4;
        i2 = i2 + ((FUNCTION_TABLE_iiiiii[i20 & 63](i2 + 4 | 0, i13 + (i5 << 2) | 0, i4, i17, i23) | 0) + 4) | 0;
        if ((i6 | 0) == (i4 | 0)) break; else {
         i6 = i6 - i4 | 0;
         i5 = i4 + i5 | 0;
        }
       }
      }
      i1 = (i3 | 0) == 0 ? i2 : i1;
      if (!i11) break; else i9 = i7;
     }
     i3 = i12 + 1 | 0;
     if ((i3 | 0) == (i18 | 0)) break; else {
      i13 = i13 + (HEAP32[i16 >> 2] >> 2 << 2) | 0;
      i12 = i3;
     }
    }
    i2 = HEAP8[i24 >> 0] | 0;
   }
   if (i2 << 24 >> 24 == 4) {
    HEAP16[i1 >> 1] = 0;
    HEAP16[i1 + 2 >> 1] = 0;
    i1 = i1 + 4 | 0;
   } else {
    HEAP8[i1 >> 0] = 0;
    HEAP8[i1 + 1 >> 0] = 0;
    i1 = i1 + 2 | 0;
   }
   if (!(HEAP32[i27 >> 2] & 1)) {
    _SDL_free(HEAP32[i26 >> 2] | 0);
    HEAP32[i26 >> 2] = 0;
   }
   i26 = _SDL_realloc(i22, i1 - i22 | 0) | 0;
   i1 = HEAP32[i25 >> 2] | 0;
   HEAP32[i1 + 12 >> 2] = (i26 | 0) == 0 ? i22 : i26;
  } while (0);
  HEAP32[i1 + 8 >> 2] = 12;
  i26 = i1 + 68 | 0;
  HEAP32[i26 >> 2] = HEAP32[i26 >> 2] | 16384;
 }
 HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 2;
 i27 = 0;
 return i27 | 0;
}

function _Blit2101010toN(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i1 = HEAP32[i4 + 24 >> 2] | 0;
 i3 = HEAP32[i4 + 28 >> 2] | 0;
 i23 = HEAP32[i4 + 16 >> 2] | 0;
 i24 = HEAP32[i4 + 36 >> 2] | 0;
 i2 = HEAP32[i4 + 44 >> 2] | 0;
 i21 = HEAPU8[i2 + 9 >> 0] | 0;
 if (!i3) return;
 i22 = (i1 + 7 | 0) / 8 | 0;
 i13 = i1 & 7;
 i14 = i2 + 28 | 0;
 i15 = i2 + 32 | 0;
 i16 = i2 + 29 | 0;
 i17 = i2 + 33 | 0;
 i18 = i2 + 30 | 0;
 i19 = i2 + 34 | 0;
 i20 = i2 + 31 | 0;
 i12 = i2 + 35 | 0;
 i1 = HEAP32[i4 + 20 >> 2] | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 L4 : while (1) {
  i3 = i3 + -1 | 0;
  switch (i13 | 0) {
  case 0:
   {
    i11 = i22;
    i4 = 4;
    break;
   }
  case 7:
   {
    i11 = i22;
    i4 = 10;
    break;
   }
  case 6:
   {
    i11 = i22;
    i4 = 16;
    break;
   }
  case 5:
   {
    i11 = i22;
    i4 = 22;
    break;
   }
  case 4:
   {
    i11 = i22;
    i4 = 28;
    break;
   }
  case 3:
   {
    i11 = i22;
    i4 = 34;
    break;
   }
  case 2:
   {
    i11 = i22;
    i4 = 40;
    break;
   }
  case 1:
   {
    i11 = i22;
    i4 = 46;
    break;
   }
  default:
   i4 = 52;
  }
  while (1) if ((i4 | 0) == 4) {
   i10 = HEAP32[i2 >> 2] | 0;
   i4 = i10 >>> 22;
   i5 = i4 & 255;
   i6 = i10 >>> 12;
   i7 = i6 & 255;
   i8 = i10 >>> 2;
   i9 = i8 & 255;
   i10 = HEAPU8[(HEAP32[1504] | 0) + (i10 >>> 30) >> 0] | 0;
   switch (i21 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i9 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i10 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i9 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i10 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] = i4;
     HEAP8[i1 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     break;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i9 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i10 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i21 | 0;
   i2 = i2 + 4 | 0;
   i4 = 10;
   continue;
  } else if ((i4 | 0) == 10) {
   i10 = HEAP32[i2 >> 2] | 0;
   i4 = i10 >>> 22;
   i5 = i4 & 255;
   i6 = i10 >>> 12;
   i7 = i6 & 255;
   i8 = i10 >>> 2;
   i9 = i8 & 255;
   i10 = HEAPU8[(HEAP32[1504] | 0) + (i10 >>> 30) >> 0] | 0;
   switch (i21 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i9 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i10 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i9 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i10 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] = i4;
     HEAP8[i1 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     break;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i9 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i10 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i21 | 0;
   i2 = i2 + 4 | 0;
   i4 = 16;
   continue;
  } else if ((i4 | 0) == 16) {
   i10 = HEAP32[i2 >> 2] | 0;
   i4 = i10 >>> 22;
   i5 = i4 & 255;
   i6 = i10 >>> 12;
   i7 = i6 & 255;
   i8 = i10 >>> 2;
   i9 = i8 & 255;
   i10 = HEAPU8[(HEAP32[1504] | 0) + (i10 >>> 30) >> 0] | 0;
   switch (i21 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i9 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i10 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i9 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i10 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] = i4;
     HEAP8[i1 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     break;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i9 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i10 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i21 | 0;
   i2 = i2 + 4 | 0;
   i4 = 22;
   continue;
  } else if ((i4 | 0) == 22) {
   i10 = HEAP32[i2 >> 2] | 0;
   i4 = i10 >>> 22;
   i5 = i4 & 255;
   i6 = i10 >>> 12;
   i7 = i6 & 255;
   i8 = i10 >>> 2;
   i9 = i8 & 255;
   i10 = HEAPU8[(HEAP32[1504] | 0) + (i10 >>> 30) >> 0] | 0;
   switch (i21 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i9 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i10 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i9 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i10 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] = i4;
     HEAP8[i1 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     break;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i9 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i10 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i21 | 0;
   i2 = i2 + 4 | 0;
   i4 = 28;
   continue;
  } else if ((i4 | 0) == 28) {
   i10 = HEAP32[i2 >> 2] | 0;
   i4 = i10 >>> 22;
   i5 = i4 & 255;
   i6 = i10 >>> 12;
   i7 = i6 & 255;
   i8 = i10 >>> 2;
   i9 = i8 & 255;
   i10 = HEAPU8[(HEAP32[1504] | 0) + (i10 >>> 30) >> 0] | 0;
   switch (i21 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i9 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i10 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i9 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i10 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] = i4;
     HEAP8[i1 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     break;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i9 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i10 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i21 | 0;
   i2 = i2 + 4 | 0;
   i4 = 34;
   continue;
  } else if ((i4 | 0) == 34) {
   i10 = HEAP32[i2 >> 2] | 0;
   i4 = i10 >>> 22;
   i5 = i4 & 255;
   i6 = i10 >>> 12;
   i7 = i6 & 255;
   i8 = i10 >>> 2;
   i9 = i8 & 255;
   i10 = HEAPU8[(HEAP32[1504] | 0) + (i10 >>> 30) >> 0] | 0;
   switch (i21 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i9 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i10 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i9 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i10 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] = i4;
     HEAP8[i1 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     break;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i9 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i10 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i21 | 0;
   i2 = i2 + 4 | 0;
   i4 = 40;
   continue;
  } else if ((i4 | 0) == 40) {
   i10 = HEAP32[i2 >> 2] | 0;
   i4 = i10 >>> 22;
   i5 = i4 & 255;
   i6 = i10 >>> 12;
   i7 = i6 & 255;
   i8 = i10 >>> 2;
   i9 = i8 & 255;
   i10 = HEAPU8[(HEAP32[1504] | 0) + (i10 >>> 30) >> 0] | 0;
   switch (i21 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i9 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i10 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i9 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i10 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] = i4;
     HEAP8[i1 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     break;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i9 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i10 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i21 | 0;
   i2 = i2 + 4 | 0;
   i4 = 46;
   continue;
  } else if ((i4 | 0) == 46) {
   i10 = HEAP32[i2 >> 2] | 0;
   i4 = i10 >>> 22;
   i5 = i4 & 255;
   i6 = i10 >>> 12;
   i7 = i6 & 255;
   i8 = i10 >>> 2;
   i9 = i8 & 255;
   i10 = HEAPU8[(HEAP32[1504] | 0) + (i10 >>> 30) >> 0] | 0;
   switch (i21 | 0) {
   case 1:
    {
     HEAP8[i1 >> 0] = i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i9 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i10 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i1 >> 1] = i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i9 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i10 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i1 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] = i4;
     HEAP8[i1 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     break;
    }
   case 4:
    {
     HEAP32[i1 >> 2] = i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i9 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i10 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i21 | 0;
   i2 = i2 + 4 | 0;
   if ((i11 | 0) > 1) {
    i11 = i11 + -1 | 0;
    i4 = 4;
    continue;
   } else {
    i4 = 52;
    continue;
   }
  } else if ((i4 | 0) == 52) if (!i3) break L4; else {
   i1 = i1 + i24 | 0;
   i2 = i2 + i23 | 0;
   continue L4;
  }
 }
 return;
}

function _BlitNto1PixelAlpha(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i1 = HEAP32[i4 + 24 >> 2] | 0;
 i3 = HEAP32[i4 + 28 >> 2] | 0;
 i26 = HEAP32[i4 + 16 >> 2] | 0;
 i27 = HEAP32[i4 + 36 >> 2] | 0;
 i28 = HEAP32[i4 + 48 >> 2] | 0;
 i2 = HEAP32[i4 + 40 >> 2] | 0;
 i24 = HEAPU8[i2 + 9 >> 0] | 0;
 if (!i3) return;
 i25 = (i1 + 3 | 0) / 4 | 0;
 i10 = i1 & 3;
 i11 = (HEAP32[i4 + 44 >> 2] | 0) + 4 | 0;
 i12 = (i28 | 0) == 0;
 i13 = i2 + 12 | 0;
 i14 = i2 + 32 | 0;
 i15 = i2 + 28 | 0;
 i16 = i2 + 16 | 0;
 i17 = i2 + 33 | 0;
 i18 = i2 + 29 | 0;
 i19 = i2 + 20 | 0;
 i20 = i2 + 34 | 0;
 i21 = i2 + 30 | 0;
 i22 = i2 + 24 | 0;
 i23 = i2 + 35 | 0;
 i9 = i2 + 31 | 0;
 i1 = HEAP32[i4 + 20 >> 2] | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 L4 : while (1) {
  i3 = i3 + -1 | 0;
  switch (i10 | 0) {
  case 0:
   {
    i7 = i1;
    i8 = i25;
    i4 = 4;
    break;
   }
  case 3:
   {
    i7 = i1;
    i8 = i25;
    i4 = 13;
    break;
   }
  case 2:
   {
    i7 = i1;
    i8 = i25;
    i4 = 22;
    break;
   }
  case 1:
   {
    i7 = i1;
    i8 = i25;
    i4 = 31;
    break;
   }
  default:
   i4 = 40;
  }
  while (1) if ((i4 | 0) == 4) {
   switch (i24 | 0) {
   case 1:
    {
     i6 = HEAPU8[i2 >> 0] | 0;
     i1 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i13 >> 2]) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i2 >> 1] | 0;
     i1 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i13 >> 2]) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i1 = 255;
     i4 = HEAPU8[i2 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i6 = HEAP32[i2 >> 2] | 0;
     i1 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i1 = 0;
     i4 = 0;
     i5 = 0;
     i6 = 0;
    }
   }
   i29 = HEAPU8[i7 >> 0] | 0;
   i32 = HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0;
   i30 = HEAPU8[i32 + (i29 << 2) >> 0] | 0;
   i31 = HEAPU8[i32 + (i29 << 2) + 1 >> 0] | 0;
   i29 = HEAPU8[i32 + (i29 << 2) + 2 >> 0] | 0;
   i1 = ((((Math_imul(i5 - i31 | 0, i1) | 0) >>> 0) / 255 | 0) + i31 | 0) >>> 3 & 28 | (((Math_imul(i6 - i30 | 0, i1) | 0) >>> 0) / 255 | 0) + i30 & 224 | ((((Math_imul(i4 - i29 | 0, i1) | 0) >>> 0) / 255 | 0) + i29 | 0) >>> 6 & 3;
   if (i12) i1 = i1 & 255; else i1 = HEAP8[i28 + i1 >> 0] | 0;
   HEAP8[i7 >> 0] = i1;
   i7 = i7 + 1 | 0;
   i2 = i2 + i24 | 0;
   i4 = 13;
   continue;
  } else if ((i4 | 0) == 13) {
   switch (i24 | 0) {
   case 1:
    {
     i6 = HEAPU8[i2 >> 0] | 0;
     i1 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i13 >> 2]) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i2 >> 1] | 0;
     i1 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i13 >> 2]) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i1 = 255;
     i4 = HEAPU8[i2 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i6 = HEAP32[i2 >> 2] | 0;
     i1 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i1 = 0;
     i4 = 0;
     i5 = 0;
     i6 = 0;
    }
   }
   i32 = HEAPU8[i7 >> 0] | 0;
   i29 = HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0;
   i31 = HEAPU8[i29 + (i32 << 2) >> 0] | 0;
   i30 = HEAPU8[i29 + (i32 << 2) + 1 >> 0] | 0;
   i32 = HEAPU8[i29 + (i32 << 2) + 2 >> 0] | 0;
   i1 = ((((Math_imul(i5 - i30 | 0, i1) | 0) >>> 0) / 255 | 0) + i30 | 0) >>> 3 & 28 | (((Math_imul(i6 - i31 | 0, i1) | 0) >>> 0) / 255 | 0) + i31 & 224 | ((((Math_imul(i4 - i32 | 0, i1) | 0) >>> 0) / 255 | 0) + i32 | 0) >>> 6 & 3;
   if (i12) i1 = i1 & 255; else i1 = HEAP8[i28 + i1 >> 0] | 0;
   HEAP8[i7 >> 0] = i1;
   i7 = i7 + 1 | 0;
   i2 = i2 + i24 | 0;
   i4 = 22;
   continue;
  } else if ((i4 | 0) == 22) {
   switch (i24 | 0) {
   case 1:
    {
     i6 = HEAPU8[i2 >> 0] | 0;
     i1 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i13 >> 2]) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i2 >> 1] | 0;
     i1 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i13 >> 2]) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i1 = 255;
     i4 = HEAPU8[i2 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i6 = HEAP32[i2 >> 2] | 0;
     i1 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i1 = 0;
     i4 = 0;
     i5 = 0;
     i6 = 0;
    }
   }
   i32 = HEAPU8[i7 >> 0] | 0;
   i29 = HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0;
   i31 = HEAPU8[i29 + (i32 << 2) >> 0] | 0;
   i30 = HEAPU8[i29 + (i32 << 2) + 1 >> 0] | 0;
   i32 = HEAPU8[i29 + (i32 << 2) + 2 >> 0] | 0;
   i1 = ((((Math_imul(i5 - i30 | 0, i1) | 0) >>> 0) / 255 | 0) + i30 | 0) >>> 3 & 28 | (((Math_imul(i6 - i31 | 0, i1) | 0) >>> 0) / 255 | 0) + i31 & 224 | ((((Math_imul(i4 - i32 | 0, i1) | 0) >>> 0) / 255 | 0) + i32 | 0) >>> 6 & 3;
   if (i12) i1 = i1 & 255; else i1 = HEAP8[i28 + i1 >> 0] | 0;
   HEAP8[i7 >> 0] = i1;
   i7 = i7 + 1 | 0;
   i2 = i2 + i24 | 0;
   i4 = 31;
   continue;
  } else if ((i4 | 0) == 31) {
   switch (i24 | 0) {
   case 1:
    {
     i6 = HEAPU8[i2 >> 0] | 0;
     i1 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i13 >> 2]) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i2 >> 1] | 0;
     i1 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((i6 & HEAP32[i13 >> 2]) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i1 = 255;
     i4 = HEAPU8[i2 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAPU8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i6 = HEAP32[i2 >> 2] | 0;
     i1 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i6) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i1 = 0;
     i4 = 0;
     i5 = 0;
     i6 = 0;
    }
   }
   i32 = HEAPU8[i7 >> 0] | 0;
   i29 = HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0;
   i31 = HEAPU8[i29 + (i32 << 2) >> 0] | 0;
   i30 = HEAPU8[i29 + (i32 << 2) + 1 >> 0] | 0;
   i32 = HEAPU8[i29 + (i32 << 2) + 2 >> 0] | 0;
   i1 = ((((Math_imul(i5 - i30 | 0, i1) | 0) >>> 0) / 255 | 0) + i30 | 0) >>> 3 & 28 | (((Math_imul(i6 - i31 | 0, i1) | 0) >>> 0) / 255 | 0) + i31 & 224 | ((((Math_imul(i4 - i32 | 0, i1) | 0) >>> 0) / 255 | 0) + i32 | 0) >>> 6 & 3;
   if (i12) i1 = i1 & 255; else i1 = HEAP8[i28 + i1 >> 0] | 0;
   HEAP8[i7 >> 0] = i1;
   i1 = i7 + 1 | 0;
   i2 = i2 + i24 | 0;
   if ((i8 | 0) > 1) {
    i7 = i1;
    i8 = i8 + -1 | 0;
    i4 = 4;
    continue;
   } else {
    i4 = 40;
    continue;
   }
  } else if ((i4 | 0) == 40) if (!i3) break L4; else {
   i1 = i1 + i27 | 0;
   i2 = i2 + i26 | 0;
   continue L4;
  }
 }
 return;
}

function _SDL_BlendFillRect_RGB565(i4, i5, i2, i7, i12, i14, i1) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i12 = i12 | 0;
 i14 = i14 | 0;
 i1 = i1 | 0;
 var i3 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i15 = 0;
 i13 = i1 & 255 ^ 255;
 switch (i2 | 0) {
 case 1:
  {
   i2 = HEAP32[i5 + 8 >> 2] | 0;
   i3 = HEAP32[i5 + 12 >> 2] | 0;
   i1 = (HEAP32[i4 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i4 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i11 = i1 - i2 | 0;
   if (!i3) return 0;
   i1 = Math_imul(HEAP32[i5 + 4 >> 2] | 0, i1) | 0;
   i10 = (i2 + 3 | 0) / 4 | 0;
   i9 = i2 & 3;
   i8 = i7 & 255;
   i7 = i12 & 255;
   i6 = i14 & 255;
   i2 = i3;
   i1 = (HEAP32[i4 + 20 >> 2] | 0) + (i1 + (HEAP32[i5 >> 2] | 0) << 1) | 0;
   L35 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i9 | 0) {
    case 0:
     {
      i3 = HEAP32[1501] | 0;
      i4 = HEAP32[1500] | 0;
      i5 = i10;
      i12 = 9;
      break;
     }
    case 3:
     {
      i3 = HEAP32[1501] | 0;
      i4 = HEAP32[1500] | 0;
      i5 = i10;
      i12 = 10;
      break;
     }
    case 2:
     {
      i3 = HEAP32[1501] | 0;
      i4 = HEAP32[1500] | 0;
      i5 = i10;
      i12 = 11;
      break;
     }
    case 1:
     {
      i3 = HEAP32[1501] | 0;
      i4 = HEAP32[1500] | 0;
      i5 = i10;
      i12 = 12;
      break;
     }
    default:
     i12 = 13;
    }
    while (1) if ((i12 | 0) == 9) {
     i14 = HEAPU16[i1 >> 1] | 0;
     HEAP16[i1 >> 1] = ((((Math_imul(HEAPU8[i4 + (i14 >>> 5 & 63) >> 0] | 0, i13) | 0) >>> 0) / 255 | 0) + i7 | 0) >>> 2 << 5 | ((((Math_imul(HEAPU8[i3 + (i14 >>> 11) >> 0] | 0, i13) | 0) >>> 0) / 255 | 0) + i8 | 0) >>> 3 << 11 | ((((Math_imul(HEAPU8[i3 + (i14 & 31) >> 0] | 0, i13) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3;
     i1 = i1 + 2 | 0;
     i12 = 10;
     continue;
    } else if ((i12 | 0) == 10) {
     i14 = HEAPU16[i1 >> 1] | 0;
     HEAP16[i1 >> 1] = ((((Math_imul(HEAPU8[i4 + (i14 >>> 5 & 63) >> 0] | 0, i13) | 0) >>> 0) / 255 | 0) + i7 | 0) >>> 2 << 5 | ((((Math_imul(HEAPU8[i3 + (i14 >>> 11) >> 0] | 0, i13) | 0) >>> 0) / 255 | 0) + i8 | 0) >>> 3 << 11 | ((((Math_imul(HEAPU8[i3 + (i14 & 31) >> 0] | 0, i13) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3;
     i1 = i1 + 2 | 0;
     i12 = 11;
     continue;
    } else if ((i12 | 0) == 11) {
     i14 = HEAPU16[i1 >> 1] | 0;
     HEAP16[i1 >> 1] = ((((Math_imul(HEAPU8[i4 + (i14 >>> 5 & 63) >> 0] | 0, i13) | 0) >>> 0) / 255 | 0) + i7 | 0) >>> 2 << 5 | ((((Math_imul(HEAPU8[i3 + (i14 >>> 11) >> 0] | 0, i13) | 0) >>> 0) / 255 | 0) + i8 | 0) >>> 3 << 11 | ((((Math_imul(HEAPU8[i3 + (i14 & 31) >> 0] | 0, i13) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3;
     i1 = i1 + 2 | 0;
     i12 = 12;
     continue;
    } else if ((i12 | 0) == 12) {
     i14 = HEAPU16[i1 >> 1] | 0;
     HEAP16[i1 >> 1] = ((((Math_imul(HEAPU8[i4 + (i14 >>> 5 & 63) >> 0] | 0, i13) | 0) >>> 0) / 255 | 0) + i7 | 0) >>> 2 << 5 | ((((Math_imul(HEAPU8[i3 + (i14 >>> 11) >> 0] | 0, i13) | 0) >>> 0) / 255 | 0) + i8 | 0) >>> 3 << 11 | ((((Math_imul(HEAPU8[i3 + (i14 & 31) >> 0] | 0, i13) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3;
     i1 = i1 + 2 | 0;
     if ((i5 | 0) > 1) {
      i5 = i5 + -1 | 0;
      i12 = 9;
      continue;
     } else {
      i12 = 13;
      continue;
     }
    } else if ((i12 | 0) == 13) if (!i2) break L35; else {
     i1 = i1 + (i11 << 1) | 0;
     continue L35;
    }
   }
   return 0;
  }
 case 2:
  {
   i2 = HEAP32[i5 + 8 >> 2] | 0;
   i3 = HEAP32[i5 + 12 >> 2] | 0;
   i1 = (HEAP32[i4 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i4 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i11 = i1 - i2 | 0;
   if (!i3) return 0;
   i1 = Math_imul(HEAP32[i5 + 4 >> 2] | 0, i1) | 0;
   i10 = (i2 + 3 | 0) / 4 | 0;
   i9 = i2 & 3;
   i8 = i7 & 255;
   i7 = i12 & 255;
   i6 = i14 & 255;
   i2 = i3;
   i1 = (HEAP32[i4 + 20 >> 2] | 0) + (i1 + (HEAP32[i5 >> 2] | 0) << 1) | 0;
   L54 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i9 | 0) {
    case 0:
     {
      i3 = HEAP32[1501] | 0;
      i4 = HEAP32[1500] | 0;
      i5 = i10;
      i12 = 21;
      break;
     }
    case 3:
     {
      i3 = HEAP32[1501] | 0;
      i4 = HEAP32[1500] | 0;
      i5 = i10;
      i12 = 22;
      break;
     }
    case 2:
     {
      i3 = HEAP32[1501] | 0;
      i4 = HEAP32[1500] | 0;
      i5 = i10;
      i12 = 23;
      break;
     }
    case 1:
     {
      i3 = HEAP32[1501] | 0;
      i4 = HEAP32[1500] | 0;
      i5 = i10;
      i12 = 24;
      break;
     }
    default:
     i12 = 25;
    }
    while (1) if ((i12 | 0) == 21) {
     i14 = HEAPU16[i1 >> 1] | 0;
     i13 = (HEAPU8[i3 + (i14 >>> 11) >> 0] | 0) + i8 | 0;
     i15 = (HEAPU8[i4 + (i14 >>> 5 & 63) >> 0] | 0) + i7 | 0;
     i14 = (HEAPU8[i3 + (i14 & 31) >> 0] | 0) + i6 | 0;
     HEAP16[i1 >> 1] = (i15 >>> 0 > 255 ? 2016 : i15 >>> 2 << 5) | (i13 >>> 0 > 255 ? 63488 : i13 >>> 3 << 11) | (i14 >>> 0 > 255 ? 31 : i14 >>> 3);
     i1 = i1 + 2 | 0;
     i12 = 22;
     continue;
    } else if ((i12 | 0) == 22) {
     i15 = HEAPU16[i1 >> 1] | 0;
     i14 = (HEAPU8[i3 + (i15 >>> 11) >> 0] | 0) + i8 | 0;
     i13 = (HEAPU8[i4 + (i15 >>> 5 & 63) >> 0] | 0) + i7 | 0;
     i15 = (HEAPU8[i3 + (i15 & 31) >> 0] | 0) + i6 | 0;
     HEAP16[i1 >> 1] = (i13 >>> 0 > 255 ? 2016 : i13 >>> 2 << 5) | (i14 >>> 0 > 255 ? 63488 : i14 >>> 3 << 11) | (i15 >>> 0 > 255 ? 31 : i15 >>> 3);
     i1 = i1 + 2 | 0;
     i12 = 23;
     continue;
    } else if ((i12 | 0) == 23) {
     i15 = HEAPU16[i1 >> 1] | 0;
     i14 = (HEAPU8[i3 + (i15 >>> 11) >> 0] | 0) + i8 | 0;
     i13 = (HEAPU8[i4 + (i15 >>> 5 & 63) >> 0] | 0) + i7 | 0;
     i15 = (HEAPU8[i3 + (i15 & 31) >> 0] | 0) + i6 | 0;
     HEAP16[i1 >> 1] = (i13 >>> 0 > 255 ? 2016 : i13 >>> 2 << 5) | (i14 >>> 0 > 255 ? 63488 : i14 >>> 3 << 11) | (i15 >>> 0 > 255 ? 31 : i15 >>> 3);
     i1 = i1 + 2 | 0;
     i12 = 24;
     continue;
    } else if ((i12 | 0) == 24) {
     i15 = HEAPU16[i1 >> 1] | 0;
     i14 = (HEAPU8[i3 + (i15 >>> 11) >> 0] | 0) + i8 | 0;
     i13 = (HEAPU8[i4 + (i15 >>> 5 & 63) >> 0] | 0) + i7 | 0;
     i15 = (HEAPU8[i3 + (i15 & 31) >> 0] | 0) + i6 | 0;
     HEAP16[i1 >> 1] = (i13 >>> 0 > 255 ? 2016 : i13 >>> 2 << 5) | (i14 >>> 0 > 255 ? 63488 : i14 >>> 3 << 11) | (i15 >>> 0 > 255 ? 31 : i15 >>> 3);
     i1 = i1 + 2 | 0;
     if ((i5 | 0) > 1) {
      i5 = i5 + -1 | 0;
      i12 = 21;
      continue;
     } else {
      i12 = 25;
      continue;
     }
    } else if ((i12 | 0) == 25) if (!i2) break L54; else {
     i1 = i1 + (i11 << 1) | 0;
     continue L54;
    }
   }
   return 0;
  }
 case 4:
  {
   i2 = HEAP32[i5 + 8 >> 2] | 0;
   i3 = HEAP32[i5 + 12 >> 2] | 0;
   i1 = (HEAP32[i4 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i4 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i11 = i1 - i2 | 0;
   if (!i3) return 0;
   i1 = Math_imul(HEAP32[i5 + 4 >> 2] | 0, i1) | 0;
   i10 = (i2 + 3 | 0) / 4 | 0;
   i9 = i2 & 3;
   i8 = i7 & 255;
   i7 = i12 & 255;
   i6 = i14 & 255;
   i2 = i3;
   i1 = (HEAP32[i4 + 20 >> 2] | 0) + (i1 + (HEAP32[i5 >> 2] | 0) << 1) | 0;
   L73 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i9 | 0) {
    case 0:
     {
      i3 = HEAP32[1501] | 0;
      i4 = HEAP32[1500] | 0;
      i5 = i10;
      i12 = 33;
      break;
     }
    case 3:
     {
      i3 = HEAP32[1501] | 0;
      i4 = HEAP32[1500] | 0;
      i5 = i10;
      i12 = 34;
      break;
     }
    case 2:
     {
      i3 = HEAP32[1501] | 0;
      i4 = HEAP32[1500] | 0;
      i5 = i10;
      i12 = 35;
      break;
     }
    case 1:
     {
      i3 = HEAP32[1501] | 0;
      i4 = HEAP32[1500] | 0;
      i5 = i10;
      i12 = 36;
      break;
     }
    default:
     i12 = 37;
    }
    while (1) if ((i12 | 0) == 33) {
     i15 = HEAPU16[i1 >> 1] | 0;
     HEAP16[i1 >> 1] = (((Math_imul(HEAPU8[i4 + (i15 >>> 5 & 63) >> 0] | 0, i7) | 0) >>> 0) / 255 | 0) >>> 2 << 5 | (((Math_imul(HEAPU8[i3 + (i15 >>> 11) >> 0] | 0, i8) | 0) >>> 0) / 255 | 0) >>> 3 << 11 | (((Math_imul(HEAPU8[i3 + (i15 & 31) >> 0] | 0, i6) | 0) >>> 0) / 255 | 0) >>> 3;
     i1 = i1 + 2 | 0;
     i12 = 34;
     continue;
    } else if ((i12 | 0) == 34) {
     i15 = HEAPU16[i1 >> 1] | 0;
     HEAP16[i1 >> 1] = (((Math_imul(HEAPU8[i4 + (i15 >>> 5 & 63) >> 0] | 0, i7) | 0) >>> 0) / 255 | 0) >>> 2 << 5 | (((Math_imul(HEAPU8[i3 + (i15 >>> 11) >> 0] | 0, i8) | 0) >>> 0) / 255 | 0) >>> 3 << 11 | (((Math_imul(HEAPU8[i3 + (i15 & 31) >> 0] | 0, i6) | 0) >>> 0) / 255 | 0) >>> 3;
     i1 = i1 + 2 | 0;
     i12 = 35;
     continue;
    } else if ((i12 | 0) == 35) {
     i15 = HEAPU16[i1 >> 1] | 0;
     HEAP16[i1 >> 1] = (((Math_imul(HEAPU8[i4 + (i15 >>> 5 & 63) >> 0] | 0, i7) | 0) >>> 0) / 255 | 0) >>> 2 << 5 | (((Math_imul(HEAPU8[i3 + (i15 >>> 11) >> 0] | 0, i8) | 0) >>> 0) / 255 | 0) >>> 3 << 11 | (((Math_imul(HEAPU8[i3 + (i15 & 31) >> 0] | 0, i6) | 0) >>> 0) / 255 | 0) >>> 3;
     i1 = i1 + 2 | 0;
     i12 = 36;
     continue;
    } else if ((i12 | 0) == 36) {
     i15 = HEAPU16[i1 >> 1] | 0;
     HEAP16[i1 >> 1] = (((Math_imul(HEAPU8[i4 + (i15 >>> 5 & 63) >> 0] | 0, i7) | 0) >>> 0) / 255 | 0) >>> 2 << 5 | (((Math_imul(HEAPU8[i3 + (i15 >>> 11) >> 0] | 0, i8) | 0) >>> 0) / 255 | 0) >>> 3 << 11 | (((Math_imul(HEAPU8[i3 + (i15 & 31) >> 0] | 0, i6) | 0) >>> 0) / 255 | 0) >>> 3;
     i1 = i1 + 2 | 0;
     if ((i5 | 0) > 1) {
      i5 = i5 + -1 | 0;
      i12 = 33;
      continue;
     } else {
      i12 = 37;
      continue;
     }
    } else if ((i12 | 0) == 37) if (!i2) break L73; else {
     i1 = i1 + (i11 << 1) | 0;
     continue L73;
    }
   }
   return 0;
  }
 default:
  {
   i2 = HEAP32[i5 + 8 >> 2] | 0;
   i15 = HEAP32[i5 + 12 >> 2] | 0;
   i1 = (HEAP32[i4 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i4 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i6 = i1 - i2 | 0;
   i1 = Math_imul(HEAP32[i5 + 4 >> 2] | 0, i1) | 0;
   i1 = (HEAP32[i4 + 20 >> 2] | 0) + (i1 + (HEAP32[i5 >> 2] | 0) << 1) | 0;
   i3 = i15 + -1 | 0;
   if (!i15) return 0;
   i4 = i2 + 3 | 0;
   i8 = (i4 | 0) / 4 | 0;
   i5 = i2 & 3;
   i7 = ((i12 & 255) >>> 2 << 5 | (i7 & 255) >>> 3 << 11 | (i14 & 255) >>> 3) & 65535;
   switch (i5 | 0) {
   case 0:
    {
     i4 = i6 + 4 | 0;
     while (1) {
      i2 = i8;
      while (1) {
       HEAP16[i1 >> 1] = i7;
       HEAP16[i1 + 2 >> 1] = i7;
       HEAP16[i1 + 4 >> 1] = i7;
       HEAP16[i1 + 6 >> 1] = i7;
       if ((i2 | 0) > 1) {
        i2 = i2 + -1 | 0;
        i1 = i1 + 8 | 0;
       } else break;
      }
      if (!i3) break; else {
       i3 = i3 + -1 | 0;
       i1 = i1 + (i4 << 1) | 0;
      }
     }
     return 0;
    }
   case 3:
    {
     i6 = i6 + 3 | 0;
     i5 = (i4 | 0) > 7;
     while (1) {
      HEAP16[i1 >> 1] = i7;
      HEAP16[i1 + 2 >> 1] = i7;
      HEAP16[i1 + 4 >> 1] = i7;
      if (i5) {
       i4 = i8;
       i2 = i1;
       while (1) {
        i4 = i4 + -1 | 0;
        HEAP16[i2 + 6 >> 1] = i7;
        i1 = i2 + 8 | 0;
        HEAP16[i1 >> 1] = i7;
        HEAP16[i2 + 10 >> 1] = i7;
        HEAP16[i2 + 12 >> 1] = i7;
        if ((i4 | 0) <= 1) break; else i2 = i1;
       }
      }
      if (!i3) break; else {
       i3 = i3 + -1 | 0;
       i1 = i1 + (i6 << 1) | 0;
      }
     }
     return 0;
    }
   default:
    {
     L7 : while (1) {
      switch (i5 | 0) {
      case 1:
       {
        i4 = i8;
        i12 = 51;
        break;
       }
      case 2:
       {
        i2 = i8;
        i12 = 50;
        break;
       }
      default:
       i12 = 52;
      }
      while (1) if ((i12 | 0) == 50) {
       HEAP16[i1 >> 1] = i7;
       i4 = i2;
       i1 = i1 + 2 | 0;
       i12 = 51;
       continue;
      } else if ((i12 | 0) == 51) {
       HEAP16[i1 >> 1] = i7;
       i2 = i1 + 2 | 0;
       if ((i4 | 0) <= 1) {
        i1 = i2;
        i12 = 52;
        continue;
       }
       HEAP16[i2 >> 1] = i7;
       HEAP16[i1 + 4 >> 1] = i7;
       i2 = i4 + -1 | 0;
       i1 = i1 + 6 | 0;
       i12 = 50;
       continue;
      } else if ((i12 | 0) == 52) if (!i3) break L7; else {
       i3 = i3 + -1 | 0;
       i1 = i1 + (i6 << 1) | 0;
       continue L7;
      }
     }
     return 0;
    }
   }
  }
 }
 return 0;
}

function _SDL_BlendFillRect_RGB555(i4, i13, i2, i5, i6, i12, i1) {
 i4 = i4 | 0;
 i13 = i13 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i12 = i12 | 0;
 i1 = i1 | 0;
 var i3 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i14 = 0;
 i11 = i1 & 255 ^ 255;
 switch (i2 | 0) {
 case 1:
  {
   i2 = HEAP32[i13 + 8 >> 2] | 0;
   i3 = HEAP32[i13 + 12 >> 2] | 0;
   i1 = (HEAP32[i4 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i4 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i10 = i1 - i2 | 0;
   if (!i3) return 0;
   i1 = Math_imul(HEAP32[i13 + 4 >> 2] | 0, i1) | 0;
   i9 = (i2 + 3 | 0) / 4 | 0;
   i8 = i2 & 3;
   i7 = i5 & 255;
   i6 = i6 & 255;
   i5 = i12 & 255;
   i2 = i3;
   i1 = (HEAP32[i4 + 20 >> 2] | 0) + (i1 + (HEAP32[i13 >> 2] | 0) << 1) | 0;
   L43 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i8 | 0) {
    case 0:
     {
      i3 = HEAP32[1501] | 0;
      i4 = i9;
      i12 = 9;
      break;
     }
    case 3:
     {
      i3 = HEAP32[1501] | 0;
      i4 = i9;
      i12 = 10;
      break;
     }
    case 2:
     {
      i3 = HEAP32[1501] | 0;
      i4 = i9;
      i12 = 11;
      break;
     }
    case 1:
     {
      i3 = HEAP32[1501] | 0;
      i4 = i9;
      i12 = 12;
      break;
     }
    default:
     i12 = 13;
    }
    while (1) if ((i12 | 0) == 9) {
     i13 = HEAPU16[i1 >> 1] | 0;
     HEAP16[i1 >> 1] = ((((Math_imul(HEAPU8[i3 + (i13 >>> 5 & 31) >> 0] | 0, i11) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3 << 5 | ((((Math_imul(HEAPU8[i3 + (i13 >>> 10 & 31) >> 0] | 0, i11) | 0) >>> 0) / 255 | 0) + i7 | 0) >>> 3 << 10 | ((((Math_imul(HEAPU8[i3 + (i13 & 31) >> 0] | 0, i11) | 0) >>> 0) / 255 | 0) + i5 | 0) >>> 3;
     i1 = i1 + 2 | 0;
     i12 = 10;
     continue;
    } else if ((i12 | 0) == 10) {
     i13 = HEAPU16[i1 >> 1] | 0;
     HEAP16[i1 >> 1] = ((((Math_imul(HEAPU8[i3 + (i13 >>> 5 & 31) >> 0] | 0, i11) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3 << 5 | ((((Math_imul(HEAPU8[i3 + (i13 >>> 10 & 31) >> 0] | 0, i11) | 0) >>> 0) / 255 | 0) + i7 | 0) >>> 3 << 10 | ((((Math_imul(HEAPU8[i3 + (i13 & 31) >> 0] | 0, i11) | 0) >>> 0) / 255 | 0) + i5 | 0) >>> 3;
     i1 = i1 + 2 | 0;
     i12 = 11;
     continue;
    } else if ((i12 | 0) == 11) {
     i13 = HEAPU16[i1 >> 1] | 0;
     HEAP16[i1 >> 1] = ((((Math_imul(HEAPU8[i3 + (i13 >>> 5 & 31) >> 0] | 0, i11) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3 << 5 | ((((Math_imul(HEAPU8[i3 + (i13 >>> 10 & 31) >> 0] | 0, i11) | 0) >>> 0) / 255 | 0) + i7 | 0) >>> 3 << 10 | ((((Math_imul(HEAPU8[i3 + (i13 & 31) >> 0] | 0, i11) | 0) >>> 0) / 255 | 0) + i5 | 0) >>> 3;
     i1 = i1 + 2 | 0;
     i12 = 12;
     continue;
    } else if ((i12 | 0) == 12) {
     i13 = HEAPU16[i1 >> 1] | 0;
     HEAP16[i1 >> 1] = ((((Math_imul(HEAPU8[i3 + (i13 >>> 5 & 31) >> 0] | 0, i11) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3 << 5 | ((((Math_imul(HEAPU8[i3 + (i13 >>> 10 & 31) >> 0] | 0, i11) | 0) >>> 0) / 255 | 0) + i7 | 0) >>> 3 << 10 | ((((Math_imul(HEAPU8[i3 + (i13 & 31) >> 0] | 0, i11) | 0) >>> 0) / 255 | 0) + i5 | 0) >>> 3;
     i1 = i1 + 2 | 0;
     if ((i4 | 0) > 1) {
      i4 = i4 + -1 | 0;
      i12 = 9;
      continue;
     } else {
      i12 = 13;
      continue;
     }
    } else if ((i12 | 0) == 13) if (!i2) break L43; else {
     i1 = i1 + (i10 << 1) | 0;
     continue L43;
    }
   }
   return 0;
  }
 case 2:
  {
   i2 = HEAP32[i13 + 8 >> 2] | 0;
   i3 = HEAP32[i13 + 12 >> 2] | 0;
   i1 = (HEAP32[i4 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i4 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i10 = i1 - i2 | 0;
   if (!i3) return 0;
   i1 = Math_imul(HEAP32[i13 + 4 >> 2] | 0, i1) | 0;
   i9 = (i2 + 3 | 0) / 4 | 0;
   i8 = i2 & 3;
   i7 = i5 & 255;
   i6 = i6 & 255;
   i5 = i12 & 255;
   i2 = i3;
   i1 = (HEAP32[i4 + 20 >> 2] | 0) + (i1 + (HEAP32[i13 >> 2] | 0) << 1) | 0;
   L62 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i8 | 0) {
    case 0:
     {
      i3 = HEAP32[1501] | 0;
      i4 = i9;
      i12 = 21;
      break;
     }
    case 3:
     {
      i3 = HEAP32[1501] | 0;
      i4 = i9;
      i12 = 22;
      break;
     }
    case 2:
     {
      i3 = HEAP32[1501] | 0;
      i4 = i9;
      i12 = 23;
      break;
     }
    case 1:
     {
      i3 = HEAP32[1501] | 0;
      i4 = i9;
      i12 = 24;
      break;
     }
    default:
     i12 = 25;
    }
    while (1) if ((i12 | 0) == 21) {
     i13 = HEAPU16[i1 >> 1] | 0;
     i11 = (HEAPU8[i3 + (i13 >>> 10 & 31) >> 0] | 0) + i7 | 0;
     i14 = (HEAPU8[i3 + (i13 >>> 5 & 31) >> 0] | 0) + i6 | 0;
     i13 = (HEAPU8[i3 + (i13 & 31) >> 0] | 0) + i5 | 0;
     HEAP16[i1 >> 1] = (i14 >>> 0 > 255 ? 992 : i14 >>> 3 << 5) | (i11 >>> 0 > 255 ? 31744 : i11 >>> 3 << 10) | (i13 >>> 0 > 255 ? 31 : i13 >>> 3);
     i1 = i1 + 2 | 0;
     i12 = 22;
     continue;
    } else if ((i12 | 0) == 22) {
     i14 = HEAPU16[i1 >> 1] | 0;
     i13 = (HEAPU8[i3 + (i14 >>> 10 & 31) >> 0] | 0) + i7 | 0;
     i11 = (HEAPU8[i3 + (i14 >>> 5 & 31) >> 0] | 0) + i6 | 0;
     i14 = (HEAPU8[i3 + (i14 & 31) >> 0] | 0) + i5 | 0;
     HEAP16[i1 >> 1] = (i11 >>> 0 > 255 ? 992 : i11 >>> 3 << 5) | (i13 >>> 0 > 255 ? 31744 : i13 >>> 3 << 10) | (i14 >>> 0 > 255 ? 31 : i14 >>> 3);
     i1 = i1 + 2 | 0;
     i12 = 23;
     continue;
    } else if ((i12 | 0) == 23) {
     i14 = HEAPU16[i1 >> 1] | 0;
     i13 = (HEAPU8[i3 + (i14 >>> 10 & 31) >> 0] | 0) + i7 | 0;
     i11 = (HEAPU8[i3 + (i14 >>> 5 & 31) >> 0] | 0) + i6 | 0;
     i14 = (HEAPU8[i3 + (i14 & 31) >> 0] | 0) + i5 | 0;
     HEAP16[i1 >> 1] = (i11 >>> 0 > 255 ? 992 : i11 >>> 3 << 5) | (i13 >>> 0 > 255 ? 31744 : i13 >>> 3 << 10) | (i14 >>> 0 > 255 ? 31 : i14 >>> 3);
     i1 = i1 + 2 | 0;
     i12 = 24;
     continue;
    } else if ((i12 | 0) == 24) {
     i14 = HEAPU16[i1 >> 1] | 0;
     i13 = (HEAPU8[i3 + (i14 >>> 10 & 31) >> 0] | 0) + i7 | 0;
     i12 = (HEAPU8[i3 + (i14 >>> 5 & 31) >> 0] | 0) + i6 | 0;
     i14 = (HEAPU8[i3 + (i14 & 31) >> 0] | 0) + i5 | 0;
     HEAP16[i1 >> 1] = (i12 >>> 0 > 255 ? 992 : i12 >>> 3 << 5) | (i13 >>> 0 > 255 ? 31744 : i13 >>> 3 << 10) | (i14 >>> 0 > 255 ? 31 : i14 >>> 3);
     i1 = i1 + 2 | 0;
     if ((i4 | 0) > 1) {
      i4 = i4 + -1 | 0;
      i12 = 21;
      continue;
     } else {
      i12 = 25;
      continue;
     }
    } else if ((i12 | 0) == 25) if (!i2) break L62; else {
     i1 = i1 + (i10 << 1) | 0;
     continue L62;
    }
   }
   return 0;
  }
 case 4:
  {
   i2 = HEAP32[i13 + 8 >> 2] | 0;
   i3 = HEAP32[i13 + 12 >> 2] | 0;
   i1 = (HEAP32[i4 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i4 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i10 = i1 - i2 | 0;
   if (!i3) return 0;
   i1 = Math_imul(HEAP32[i13 + 4 >> 2] | 0, i1) | 0;
   i9 = (i2 + 3 | 0) / 4 | 0;
   i8 = i2 & 3;
   i7 = i5 & 255;
   i6 = i6 & 255;
   i5 = i12 & 255;
   i2 = i3;
   i1 = (HEAP32[i4 + 20 >> 2] | 0) + (i1 + (HEAP32[i13 >> 2] | 0) << 1) | 0;
   L81 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i8 | 0) {
    case 0:
     {
      i3 = HEAP32[1501] | 0;
      i4 = i9;
      i12 = 33;
      break;
     }
    case 3:
     {
      i3 = HEAP32[1501] | 0;
      i4 = i9;
      i12 = 34;
      break;
     }
    case 2:
     {
      i3 = HEAP32[1501] | 0;
      i4 = i9;
      i12 = 35;
      break;
     }
    case 1:
     {
      i3 = HEAP32[1501] | 0;
      i4 = i9;
      i12 = 36;
      break;
     }
    default:
     i12 = 37;
    }
    while (1) if ((i12 | 0) == 33) {
     i14 = HEAPU16[i1 >> 1] | 0;
     HEAP16[i1 >> 1] = (((Math_imul(HEAPU8[i3 + (i14 >>> 5 & 31) >> 0] | 0, i6) | 0) >>> 0) / 255 | 0) >>> 3 << 5 | (((Math_imul(HEAPU8[i3 + (i14 >>> 10 & 31) >> 0] | 0, i7) | 0) >>> 0) / 255 | 0) >>> 3 << 10 | (((Math_imul(HEAPU8[i3 + (i14 & 31) >> 0] | 0, i5) | 0) >>> 0) / 255 | 0) >>> 3;
     i1 = i1 + 2 | 0;
     i12 = 34;
     continue;
    } else if ((i12 | 0) == 34) {
     i14 = HEAPU16[i1 >> 1] | 0;
     HEAP16[i1 >> 1] = (((Math_imul(HEAPU8[i3 + (i14 >>> 5 & 31) >> 0] | 0, i6) | 0) >>> 0) / 255 | 0) >>> 3 << 5 | (((Math_imul(HEAPU8[i3 + (i14 >>> 10 & 31) >> 0] | 0, i7) | 0) >>> 0) / 255 | 0) >>> 3 << 10 | (((Math_imul(HEAPU8[i3 + (i14 & 31) >> 0] | 0, i5) | 0) >>> 0) / 255 | 0) >>> 3;
     i1 = i1 + 2 | 0;
     i12 = 35;
     continue;
    } else if ((i12 | 0) == 35) {
     i14 = HEAPU16[i1 >> 1] | 0;
     HEAP16[i1 >> 1] = (((Math_imul(HEAPU8[i3 + (i14 >>> 5 & 31) >> 0] | 0, i6) | 0) >>> 0) / 255 | 0) >>> 3 << 5 | (((Math_imul(HEAPU8[i3 + (i14 >>> 10 & 31) >> 0] | 0, i7) | 0) >>> 0) / 255 | 0) >>> 3 << 10 | (((Math_imul(HEAPU8[i3 + (i14 & 31) >> 0] | 0, i5) | 0) >>> 0) / 255 | 0) >>> 3;
     i1 = i1 + 2 | 0;
     i12 = 36;
     continue;
    } else if ((i12 | 0) == 36) {
     i14 = HEAPU16[i1 >> 1] | 0;
     HEAP16[i1 >> 1] = (((Math_imul(HEAPU8[i3 + (i14 >>> 5 & 31) >> 0] | 0, i6) | 0) >>> 0) / 255 | 0) >>> 3 << 5 | (((Math_imul(HEAPU8[i3 + (i14 >>> 10 & 31) >> 0] | 0, i7) | 0) >>> 0) / 255 | 0) >>> 3 << 10 | (((Math_imul(HEAPU8[i3 + (i14 & 31) >> 0] | 0, i5) | 0) >>> 0) / 255 | 0) >>> 3;
     i1 = i1 + 2 | 0;
     if ((i4 | 0) > 1) {
      i4 = i4 + -1 | 0;
      i12 = 33;
      continue;
     } else {
      i12 = 37;
      continue;
     }
    } else if ((i12 | 0) == 37) if (!i2) break L81; else {
     i1 = i1 + (i10 << 1) | 0;
     continue L81;
    }
   }
   return 0;
  }
 default:
  {
   i2 = HEAP32[i13 + 8 >> 2] | 0;
   i14 = HEAP32[i13 + 12 >> 2] | 0;
   i1 = (HEAP32[i4 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i4 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i7 = i1 - i2 | 0;
   i1 = Math_imul(HEAP32[i13 + 4 >> 2] | 0, i1) | 0;
   i1 = (HEAP32[i4 + 20 >> 2] | 0) + (i1 + (HEAP32[i13 >> 2] | 0) << 1) | 0;
   i3 = i14 + -1 | 0;
   if (!i14) return 0;
   i4 = i2 + 3 | 0;
   i9 = (i4 | 0) / 4 | 0;
   i2 = i2 & 3;
   i8 = ((i6 & 255) >>> 3 << 5 | (i5 & 255) >>> 3 << 10 | (i12 & 255) >>> 3) & 65535;
   switch (i2 | 0) {
   case 0:
    {
     i4 = i7 + 4 | 0;
     while (1) {
      i2 = i9;
      while (1) {
       HEAP16[i1 >> 1] = i8;
       HEAP16[i1 + 2 >> 1] = i8;
       HEAP16[i1 + 4 >> 1] = i8;
       HEAP16[i1 + 6 >> 1] = i8;
       if ((i2 | 0) > 1) {
        i2 = i2 + -1 | 0;
        i1 = i1 + 8 | 0;
       } else break;
      }
      if (!i3) break; else {
       i3 = i3 + -1 | 0;
       i1 = i1 + (i4 << 1) | 0;
      }
     }
     return 0;
    }
   case 3:
    {
     i6 = i7 + 3 | 0;
     i5 = (i4 | 0) > 7;
     while (1) {
      HEAP16[i1 >> 1] = i8;
      HEAP16[i1 + 2 >> 1] = i8;
      HEAP16[i1 + 4 >> 1] = i8;
      if (i5) {
       i4 = i9;
       i2 = i1;
       while (1) {
        i4 = i4 + -1 | 0;
        HEAP16[i2 + 6 >> 1] = i8;
        i1 = i2 + 8 | 0;
        HEAP16[i1 >> 1] = i8;
        HEAP16[i2 + 10 >> 1] = i8;
        HEAP16[i2 + 12 >> 1] = i8;
        if ((i4 | 0) <= 1) break; else i2 = i1;
       }
      }
      if (!i3) break; else {
       i3 = i3 + -1 | 0;
       i1 = i1 + (i6 << 1) | 0;
      }
     }
     return 0;
    }
   case 2:
    {
     i6 = i7 + 2 | 0;
     i5 = (i4 | 0) > 7;
     while (1) {
      HEAP16[i1 >> 1] = i8;
      HEAP16[i1 + 2 >> 1] = i8;
      if (i5) {
       i4 = i9;
       i2 = i1;
       while (1) {
        i4 = i4 + -1 | 0;
        HEAP16[i2 + 4 >> 1] = i8;
        HEAP16[i2 + 6 >> 1] = i8;
        i1 = i2 + 8 | 0;
        HEAP16[i1 >> 1] = i8;
        HEAP16[i2 + 10 >> 1] = i8;
        if ((i4 | 0) <= 1) break; else i2 = i1;
       }
      }
      if (!i3) break; else {
       i3 = i3 + -1 | 0;
       i1 = i1 + (i6 << 1) | 0;
      }
     }
     return 0;
    }
   default:
    {
     i6 = (i2 | 0) == 1;
     i5 = (i4 | 0) > 7;
     while (1) {
      if (i6) {
       HEAP16[i1 >> 1] = i8;
       i2 = i1 + 2 | 0;
       if (i5) {
        i4 = i9;
        do {
         i4 = i4 + -1 | 0;
         HEAP16[i2 >> 1] = i8;
         HEAP16[i1 + 4 >> 1] = i8;
         HEAP16[i1 + 6 >> 1] = i8;
         i2 = i1;
         i1 = i1 + 8 | 0;
         HEAP16[i1 >> 1] = i8;
         i2 = i2 + 10 | 0;
        } while ((i4 | 0) > 1);
        i1 = i2;
       } else i1 = i2;
      }
      if (!i3) break; else {
       i3 = i3 + -1 | 0;
       i1 = i1 + (i7 << 1) | 0;
      }
     }
     return 0;
    }
   }
  }
 }
 return 0;
}

function _BlitNto1SurfaceAlpha(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i1 = HEAP32[i4 + 24 >> 2] | 0;
 i3 = HEAP32[i4 + 28 >> 2] | 0;
 i23 = HEAP32[i4 + 16 >> 2] | 0;
 i24 = HEAP32[i4 + 36 >> 2] | 0;
 i25 = HEAP32[i4 + 48 >> 2] | 0;
 i2 = HEAP32[i4 + 40 >> 2] | 0;
 i20 = HEAPU8[i2 + 9 >> 0] | 0;
 i21 = HEAPU8[i4 + 63 >> 0] | 0;
 if (!i3) return;
 i22 = (i1 + 3 | 0) / 4 | 0;
 i9 = i1 & 3;
 i10 = (HEAP32[i4 + 44 >> 2] | 0) + 4 | 0;
 i11 = (i25 | 0) == 0;
 i12 = i2 + 12 | 0;
 i13 = i2 + 32 | 0;
 i14 = i2 + 28 | 0;
 i15 = i2 + 16 | 0;
 i16 = i2 + 33 | 0;
 i17 = i2 + 29 | 0;
 i18 = i2 + 20 | 0;
 i19 = i2 + 34 | 0;
 i8 = i2 + 30 | 0;
 i1 = HEAP32[i4 + 20 >> 2] | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 L4 : while (1) {
  i3 = i3 + -1 | 0;
  switch (i9 | 0) {
  case 0:
   {
    i6 = i1;
    i7 = i22;
    i4 = 4;
    break;
   }
  case 3:
   {
    i6 = i1;
    i7 = i22;
    i4 = 13;
    break;
   }
  case 2:
   {
    i6 = i1;
    i7 = i22;
    i4 = 22;
    break;
   }
  case 1:
   {
    i6 = i1;
    i7 = i22;
    i4 = 31;
    break;
   }
  default:
   i4 = 40;
  }
  while (1) if ((i4 | 0) == 4) {
   switch (i20 | 0) {
   case 1:
    {
     i5 = HEAPU8[i2 >> 0] | 0;
     i1 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i5) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i12 >> 2]) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i5 = HEAPU16[i2 >> 1] | 0;
     i1 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i5) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i12 >> 2]) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i1 = HEAPU8[i2 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i4 = HEAPU8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i2 + ((HEAPU8[i13 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i5 = HEAP32[i2 >> 2] | 0;
     i1 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i5) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i5) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i1 = 0;
     i4 = 0;
     i5 = 0;
    }
   }
   i26 = HEAPU8[i6 >> 0] | 0;
   i29 = HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0;
   i27 = HEAPU8[i29 + (i26 << 2) >> 0] | 0;
   i28 = HEAPU8[i29 + (i26 << 2) + 1 >> 0] | 0;
   i26 = HEAPU8[i29 + (i26 << 2) + 2 >> 0] | 0;
   i1 = ((((Math_imul(i4 - i28 | 0, i21) | 0) >>> 0) / 255 | 0) + i28 | 0) >>> 3 & 28 | (((Math_imul(i5 - i27 | 0, i21) | 0) >>> 0) / 255 | 0) + i27 & 224 | ((((Math_imul(i1 - i26 | 0, i21) | 0) >>> 0) / 255 | 0) + i26 | 0) >>> 6 & 3;
   if (i11) i1 = i1 & 255; else i1 = HEAP8[i25 + i1 >> 0] | 0;
   HEAP8[i6 >> 0] = i1;
   i6 = i6 + 1 | 0;
   i2 = i2 + i20 | 0;
   i4 = 13;
   continue;
  } else if ((i4 | 0) == 13) {
   switch (i20 | 0) {
   case 1:
    {
     i5 = HEAPU8[i2 >> 0] | 0;
     i1 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i5) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i12 >> 2]) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i5 = HEAPU16[i2 >> 1] | 0;
     i1 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i5) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i12 >> 2]) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i1 = HEAPU8[i2 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i4 = HEAPU8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i2 + ((HEAPU8[i13 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i5 = HEAP32[i2 >> 2] | 0;
     i1 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i5) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i5) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i1 = 0;
     i4 = 0;
     i5 = 0;
    }
   }
   i29 = HEAPU8[i6 >> 0] | 0;
   i26 = HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0;
   i28 = HEAPU8[i26 + (i29 << 2) >> 0] | 0;
   i27 = HEAPU8[i26 + (i29 << 2) + 1 >> 0] | 0;
   i29 = HEAPU8[i26 + (i29 << 2) + 2 >> 0] | 0;
   i1 = ((((Math_imul(i4 - i27 | 0, i21) | 0) >>> 0) / 255 | 0) + i27 | 0) >>> 3 & 28 | (((Math_imul(i5 - i28 | 0, i21) | 0) >>> 0) / 255 | 0) + i28 & 224 | ((((Math_imul(i1 - i29 | 0, i21) | 0) >>> 0) / 255 | 0) + i29 | 0) >>> 6 & 3;
   if (i11) i1 = i1 & 255; else i1 = HEAP8[i25 + i1 >> 0] | 0;
   HEAP8[i6 >> 0] = i1;
   i6 = i6 + 1 | 0;
   i2 = i2 + i20 | 0;
   i4 = 22;
   continue;
  } else if ((i4 | 0) == 22) {
   switch (i20 | 0) {
   case 1:
    {
     i5 = HEAPU8[i2 >> 0] | 0;
     i1 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i5) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i12 >> 2]) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i5 = HEAPU16[i2 >> 1] | 0;
     i1 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i5) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i12 >> 2]) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i1 = HEAPU8[i2 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i4 = HEAPU8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i2 + ((HEAPU8[i13 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i5 = HEAP32[i2 >> 2] | 0;
     i1 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i5) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i5) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i1 = 0;
     i4 = 0;
     i5 = 0;
    }
   }
   i29 = HEAPU8[i6 >> 0] | 0;
   i26 = HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0;
   i28 = HEAPU8[i26 + (i29 << 2) >> 0] | 0;
   i27 = HEAPU8[i26 + (i29 << 2) + 1 >> 0] | 0;
   i29 = HEAPU8[i26 + (i29 << 2) + 2 >> 0] | 0;
   i1 = ((((Math_imul(i4 - i27 | 0, i21) | 0) >>> 0) / 255 | 0) + i27 | 0) >>> 3 & 28 | (((Math_imul(i5 - i28 | 0, i21) | 0) >>> 0) / 255 | 0) + i28 & 224 | ((((Math_imul(i1 - i29 | 0, i21) | 0) >>> 0) / 255 | 0) + i29 | 0) >>> 6 & 3;
   if (i11) i1 = i1 & 255; else i1 = HEAP8[i25 + i1 >> 0] | 0;
   HEAP8[i6 >> 0] = i1;
   i6 = i6 + 1 | 0;
   i2 = i2 + i20 | 0;
   i4 = 31;
   continue;
  } else if ((i4 | 0) == 31) {
   switch (i20 | 0) {
   case 1:
    {
     i5 = HEAPU8[i2 >> 0] | 0;
     i1 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i5) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i12 >> 2]) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i5 = HEAPU16[i2 >> 1] | 0;
     i1 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i5) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i12 >> 2]) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i1 = HEAPU8[i2 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i4 = HEAPU8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAPU8[i2 + ((HEAPU8[i13 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i5 = HEAP32[i2 >> 2] | 0;
     i1 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i8 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
     i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i5) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i5) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i1 = 0;
     i4 = 0;
     i5 = 0;
    }
   }
   i29 = HEAPU8[i6 >> 0] | 0;
   i26 = HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0;
   i28 = HEAPU8[i26 + (i29 << 2) >> 0] | 0;
   i27 = HEAPU8[i26 + (i29 << 2) + 1 >> 0] | 0;
   i29 = HEAPU8[i26 + (i29 << 2) + 2 >> 0] | 0;
   i1 = ((((Math_imul(i4 - i27 | 0, i21) | 0) >>> 0) / 255 | 0) + i27 | 0) >>> 3 & 28 | (((Math_imul(i5 - i28 | 0, i21) | 0) >>> 0) / 255 | 0) + i28 & 224 | ((((Math_imul(i1 - i29 | 0, i21) | 0) >>> 0) / 255 | 0) + i29 | 0) >>> 6 & 3;
   if (i11) i1 = i1 & 255; else i1 = HEAP8[i25 + i1 >> 0] | 0;
   HEAP8[i6 >> 0] = i1;
   i1 = i6 + 1 | 0;
   i2 = i2 + i20 | 0;
   if ((i7 | 0) > 1) {
    i6 = i1;
    i7 = i7 + -1 | 0;
    i4 = 4;
    continue;
   } else {
    i4 = 40;
    continue;
   }
  } else if ((i4 | 0) == 40) if (!i3) break L4; else {
   i1 = i1 + i24 | 0;
   i2 = i2 + i23 | 0;
   continue L4;
  }
 }
 return;
}

function _SDL_SW_CopyYUVToRGB(i28, i27, i22, i16, i15, i9, i2) {
 i28 = i28 | 0;
 i27 = i27 | 0;
 i22 = i22 | 0;
 i16 = i16 | 0;
 i15 = i15 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i29 = 0;
 i29 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i23 = i29 + 16 | 0;
 i5 = i29 + 8 | 0;
 i3 = i29;
 i4 = i29 + 76 | 0;
 i10 = i29 + 72 | 0;
 i8 = i29 + 68 | 0;
 i7 = i29 + 64 | 0;
 i6 = i29 + 60 | 0;
 i21 = i29 + 56 | 0;
 i20 = i29 + 52 | 0;
 i19 = i29 + 48 | 0;
 i18 = i29 + 44 | 0;
 i17 = i29 + 40 | 0;
 i26 = i29 + 24 | 0;
 i14 = (i22 | 0) == 0 | (i22 & -268435456 | 0) == 268435456;
 L1 : do if (i14) {
  i1 = i22 & 255;
  if (!i1) {
   i28 = _SDL_SetError(38295, i3) | 0;
   STACKTOP = i29;
   return i28 | 0;
  } else i24 = i1;
 } else {
  L6 : do if ((i22 | 0) >= 1431918169) if ((i22 | 0) < 1498831189) switch (i22 | 0) {
  case 1431918169:
   {
    i24 = 2;
    break L1;
   }
  default:
   break L6;
  } else switch (i22 | 0) {
  case 1498831189:
   {
    i24 = 2;
    break L1;
   }
  default:
   break L6;
  } else switch (i22 | 0) {
  case 844715353:
   {
    i24 = 2;
    break L1;
   }
  default:
   {}
  } while (0);
  i24 = 1;
 } while (0);
 i1 = i28 + 4 | 0;
 do if ((HEAP32[i1 >> 2] | 0) != (i22 | 0)) {
  i11 = (_SDL_PixelFormatEnumToMasks(i22, i4, i10, i8, i7, i6) | 0) == 0;
  if (i11 | (HEAP32[i4 >> 2] | 0) < 15) {
   if ((_SDL_SetError(38323, i5) | 0) < 0) i1 = -1; else break;
   STACKTOP = i29;
   return i1 | 0;
  }
  HEAP32[i1 >> 2] = i22;
  i11 = HEAP32[i28 + 24 >> 2] | 0;
  i4 = 0;
  do {
   i1 = HEAP32[i10 >> 2] | 0;
   if (!i1) i1 = 0; else {
    i3 = 0;
    do {
     i3 = (i1 & 1) + i3 | 0;
     i1 = i1 >>> 1;
    } while ((i1 | 0) != 0);
    i1 = i3;
   }
   i5 = i4 >> 8 - i1;
   i1 = i11 + (i4 + 256 << 2) | 0;
   HEAP32[i1 >> 2] = i5;
   i5 = i5 << (_free_bits_at_bottom(HEAP32[i10 >> 2] | 0) | 0);
   HEAP32[i1 >> 2] = i5;
   HEAP32[i1 >> 2] = i5 | HEAP32[i6 >> 2];
   i1 = HEAP32[i8 >> 2] | 0;
   if (!i1) i1 = 0; else {
    i3 = 0;
    do {
     i3 = (i1 & 1) + i3 | 0;
     i1 = i1 >>> 1;
    } while ((i1 | 0) != 0);
    i1 = i3;
   }
   i5 = i4 >> 8 - i1;
   i1 = i11 + (i4 + 1024 << 2) | 0;
   HEAP32[i1 >> 2] = i5;
   i5 = i5 << (_free_bits_at_bottom(HEAP32[i8 >> 2] | 0) | 0);
   HEAP32[i1 >> 2] = i5;
   HEAP32[i1 >> 2] = i5 | HEAP32[i6 >> 2];
   i1 = HEAP32[i7 >> 2] | 0;
   if (!i1) i1 = 0; else {
    i3 = 0;
    do {
     i3 = (i1 & 1) + i3 | 0;
     i1 = i1 >>> 1;
    } while ((i1 | 0) != 0);
    i1 = i3;
   }
   i3 = i4 >> 8 - i1;
   i5 = i11 + (i4 + 1792 << 2) | 0;
   HEAP32[i5 >> 2] = i3;
   i3 = i3 << (_free_bits_at_bottom(HEAP32[i7 >> 2] | 0) | 0);
   HEAP32[i5 >> 2] = i3;
   HEAP32[i5 >> 2] = i3 | HEAP32[i6 >> 2];
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) != 256);
  L35 : do if (i14) {
   if ((i22 & 255 | 0) == 2) {
    i1 = 0;
    i25 = 21;
   }
  } else {
   if ((i22 | 0) < 1431918169) switch (i22 | 0) {
   case 844715353:
    {
     i1 = 0;
     i25 = 21;
     break L35;
    }
   default:
    break L35;
   }
   if ((i22 | 0) < 1498831189) switch (i22 | 0) {
   case 1431918169:
    {
     i1 = 0;
     i25 = 21;
     break L35;
    }
   default:
    break L35;
   } else switch (i22 | 0) {
   case 1498831189:
    {
     i1 = 0;
     i25 = 21;
     break L35;
    }
   default:
    break L35;
   }
  } while (0);
  if ((i25 | 0) == 21) while (1) {
   i25 = 0;
   i10 = i11 + (i1 + 256 << 2) | 0;
   i8 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i8 << 16 | i8;
   i10 = i11 + (i1 + 1024 << 2) | 0;
   i8 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i8 << 16 | i8;
   i10 = i11 + (i1 + 1792 << 2) | 0;
   i8 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i8 << 16 | i8;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) == 256) break; else i25 = 21;
  }
  i1 = i11 + 1024 | 0;
  i3 = i11 + 2044 | 0;
  i4 = i11 + 4096 | 0;
  i5 = i11 + 5116 | 0;
  i6 = i11 + 7168 | 0;
  i7 = i11 + 8188 | 0;
  i8 = 0;
  do {
   HEAP32[i11 + (i8 << 2) >> 2] = HEAP32[i1 >> 2];
   HEAP32[i11 + (i8 + 512 << 2) >> 2] = HEAP32[i3 >> 2];
   HEAP32[i11 + (i8 + 768 << 2) >> 2] = HEAP32[i4 >> 2];
   HEAP32[i11 + (i8 + 1280 << 2) >> 2] = HEAP32[i5 >> 2];
   HEAP32[i11 + (i8 + 1536 << 2) >> 2] = HEAP32[i6 >> 2];
   HEAP32[i11 + (i8 + 2048 << 2) >> 2] = HEAP32[i7 >> 2];
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) != 256);
  i1 = HEAP32[i28 >> 2] | 0;
  L51 : do if ((i1 | 0) < 1431918169) if ((i1 | 0) < 844715353) switch (i1 | 0) {
  case 842094169:
   {
    i25 = 24;
    break L51;
   }
  default:
   break L51;
  } else switch (i1 | 0) {
  case 844715353:
   {
    i25 = 31;
    break L51;
   }
  default:
   break L51;
  } else {
   if ((i1 | 0) < 1448433993) switch (i1 | 0) {
   case 1431918169:
    {
     i25 = 31;
     break L51;
    }
   default:
    break L51;
   }
   if ((i1 | 0) < 1498831189) switch (i1 | 0) {
   case 1448433993:
    {
     i25 = 24;
     break L51;
    }
   default:
    break L51;
   } else switch (i1 | 0) {
   case 1498831189:
    {
     i25 = 31;
     break L51;
    }
   default:
    break L51;
   }
  } while (0);
  L63 : do if ((i25 | 0) == 24) {
   if (i14) switch (i22 & 255 | 0) {
   case 2:
    {
     HEAP32[i28 + 28 >> 2] = 1;
     HEAP32[i28 + 32 >> 2] = 2;
     break L63;
    }
   case 3:
    {
     HEAP32[i28 + 28 >> 2] = 3;
     HEAP32[i28 + 32 >> 2] = 4;
     break L63;
    }
   case 4:
    {
     HEAP32[i28 + 28 >> 2] = 5;
     HEAP32[i28 + 32 >> 2] = 6;
     break L63;
    }
   default:
    break L63;
   }
   L72 : do if ((i22 | 0) >= 1431918169) if ((i22 | 0) < 1498831189) switch (i22 | 0) {
   case 1431918169:
    break L72;
   default:
    break L63;
   } else switch (i22 | 0) {
   case 1498831189:
    break L72;
   default:
    break L63;
   } else switch (i22 | 0) {
   case 844715353:
    break;
   default:
    break L63;
   } while (0);
   HEAP32[i28 + 28 >> 2] = 1;
   HEAP32[i28 + 32 >> 2] = 2;
  } else if ((i25 | 0) == 31) {
   if (i14) switch (i22 & 255 | 0) {
   case 2:
    {
     HEAP32[i28 + 28 >> 2] = 7;
     HEAP32[i28 + 32 >> 2] = 8;
     break L63;
    }
   case 3:
    {
     HEAP32[i28 + 28 >> 2] = 9;
     HEAP32[i28 + 32 >> 2] = 10;
     break L63;
    }
   case 4:
    {
     HEAP32[i28 + 28 >> 2] = 11;
     HEAP32[i28 + 32 >> 2] = 12;
     break L63;
    }
   default:
    break L63;
   }
   L87 : do if ((i22 | 0) >= 1431918169) if ((i22 | 0) < 1498831189) switch (i22 | 0) {
   case 1431918169:
    break L87;
   default:
    break L63;
   } else switch (i22 | 0) {
   case 1498831189:
    break L87;
   default:
    break L63;
   } else switch (i22 | 0) {
   case 844715353:
    break;
   default:
    break L63;
   } while (0);
   HEAP32[i28 + 28 >> 2] = 7;
   HEAP32[i28 + 32 >> 2] = 8;
  } while (0);
  i14 = i28 + 60 | 0;
  _SDL_FreeSurface(HEAP32[i14 >> 2] | 0);
  HEAP32[i14 >> 2] = 0;
 } while (0);
 if ((((HEAP32[i27 >> 2] | 0) == 0 ? (HEAP32[i27 + 4 >> 2] | 0) == 0 : 0) ? (i12 = HEAP32[i27 + 8 >> 2] | 0, (i12 | 0) >= (HEAP32[i28 + 8 >> 2] | 0)) : 0) ? (i13 = HEAP32[i27 + 12 >> 2] | 0, (i13 | 0) >= (HEAP32[i28 + 12 >> 2] | 0)) : 0) if (!((i12 | 0) == (i16 | 0) & (i13 | 0) == (i15 | 0))) if ((i12 << 1 | 0) == (i16 | 0) & (i13 << 1 | 0) == (i15 | 0)) {
  i10 = 1;
  i11 = 0;
 } else i25 = 45; else {
  i10 = 0;
  i11 = 0;
 } else i25 = 45;
 if ((i25 | 0) == 45) {
  i1 = i28 + 60 | 0;
  i3 = HEAP32[i1 >> 2] | 0;
  if (!i3) {
   _SDL_PixelFormatEnumToMasks(i22, i21, i20, i19, i18, i17) | 0;
   i16 = _SDL_CreateRGBSurfaceFrom(i9, i16, i15, HEAP32[i21 >> 2] | 0, i2, HEAP32[i20 >> 2] | 0, HEAP32[i19 >> 2] | 0, HEAP32[i18 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0;
   HEAP32[i1 >> 2] = i16;
   if (!i16) {
    i28 = -1;
    STACKTOP = i29;
    return i28 | 0;
   }
  } else {
   HEAP32[i3 + 8 >> 2] = i16;
   HEAP32[i3 + 12 >> 2] = i15;
   HEAP32[i3 + 20 >> 2] = i9;
   HEAP32[i3 + 16 >> 2] = i2;
  }
  i2 = i28 + 56 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (!i1) {
   _SDL_PixelFormatEnumToMasks(i22, i21, i20, i19, i18, i17) | 0;
   i1 = _SDL_CreateRGBSurface(0, HEAP32[i28 + 8 >> 2] | 0, HEAP32[i28 + 12 >> 2] | 0, HEAP32[i21 >> 2] | 0, HEAP32[i20 >> 2] | 0, HEAP32[i19 >> 2] | 0, HEAP32[i18 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0;
   HEAP32[i2 >> 2] = i1;
   if (!i1) {
    i28 = -1;
    STACKTOP = i29;
    return i28 | 0;
   }
  }
  i2 = HEAP32[i1 + 16 >> 2] | 0;
  i9 = HEAP32[i1 + 20 >> 2] | 0;
  i10 = 0;
  i11 = 1;
 }
 i1 = HEAP32[i28 >> 2] | 0;
 L114 : do if ((i1 | 0) < 1431918169) if ((i1 | 0) < 844715353) {
  switch (i1 | 0) {
  case 842094169:
   break;
  default:
   {
    i25 = 57;
    break L114;
   }
  }
  i6 = HEAP32[i28 + 52 >> 2] | 0;
  i7 = HEAP32[i28 + 48 >> 2] | 0;
  i8 = HEAP32[i28 + 44 >> 2] | 0;
  break;
 } else {
  switch (i1 | 0) {
  case 844715353:
   break;
  default:
   {
    i25 = 57;
    break L114;
   }
  }
  i8 = HEAP32[i28 + 44 >> 2] | 0;
  i6 = i8 + 1 | 0;
  i7 = i8 + 3 | 0;
  break;
 } else {
  if ((i1 | 0) < 1448433993) {
   switch (i1 | 0) {
   case 1431918169:
    break;
   default:
    {
     i25 = 57;
     break L114;
    }
   }
   i8 = HEAP32[i28 + 44 >> 2] | 0;
   i6 = i8 + 3 | 0;
   i7 = i8 + 1 | 0;
   break;
  }
  if ((i1 | 0) < 1498831189) {
   switch (i1 | 0) {
   case 1448433993:
    break;
   default:
    {
     i25 = 57;
     break L114;
    }
   }
   i6 = HEAP32[i28 + 48 >> 2] | 0;
   i7 = HEAP32[i28 + 52 >> 2] | 0;
   i8 = HEAP32[i28 + 44 >> 2] | 0;
   break;
  } else {
   switch (i1 | 0) {
   case 1498831189:
    break;
   default:
    {
     i25 = 57;
     break L114;
    }
   }
   i8 = HEAP32[i28 + 44 >> 2] | 0;
   i6 = i8;
   i7 = i8 + 2 | 0;
   i8 = i8 + 1 | 0;
   break;
  }
 } while (0);
 if ((i25 | 0) == 57) {
  i28 = _SDL_SetError(38358, i23) | 0;
  STACKTOP = i29;
  return i28 | 0;
 }
 i1 = (i2 | 0) / (i24 | 0) | 0;
 i2 = HEAP32[i28 + 8 >> 2] | 0;
 i3 = HEAP32[i28 + 20 >> 2] | 0;
 i4 = HEAP32[i28 + 24 >> 2] | 0;
 i5 = HEAP32[i28 + 12 >> 2] | 0;
 if (!i10) FUNCTION_TABLE_viiiiiiiii[HEAP32[i28 + 28 >> 2] & 15](i3, i4, i8, i7, i6, i9, i5, i2, i1 - i2 | 0); else FUNCTION_TABLE_viiiiiiiii[HEAP32[i28 + 32 >> 2] & 15](i3, i4, i8, i7, i6, i9, i5, i2, i1 - (i2 << 1) | 0);
 if (!i11) {
  i28 = 0;
  STACKTOP = i29;
  return i28 | 0;
 };
 HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
 HEAP32[i26 + 4 >> 2] = HEAP32[i27 + 4 >> 2];
 HEAP32[i26 + 8 >> 2] = HEAP32[i27 + 8 >> 2];
 HEAP32[i26 + 12 >> 2] = HEAP32[i27 + 12 >> 2];
 _SDL_SoftStretch(HEAP32[i28 + 56 >> 2] | 0, i26, HEAP32[i28 + 60 >> 2] | 0, 0) | 0;
 i28 = 0;
 STACKTOP = i29;
 return i28 | 0;
}

function __ZNSt3__112__next_primeEj(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i9 + 8 | 0;
 i7 = i9 + 4 | 0;
 i2 = i9;
 HEAP32[i7 >> 2] = i3;
 do if (i3 >>> 0 >= 212) {
  i6 = (i3 >>> 0) / 210 | 0;
  i4 = i6 * 210 | 0;
  HEAP32[i2 >> 2] = i3 - i4;
  i1 = (__ZNSt3__113__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_(28708, 28900, i2, i1) | 0) - 28708 >> 2;
  i5 = i1;
  i1 = (HEAP32[28708 + (i1 << 2) >> 2] | 0) + i4 | 0;
  L4 : while (1) {
   i4 = 5;
   while (1) {
    if (i4 >>> 0 >= 47) {
     i4 = 211;
     i8 = 8;
     break;
    }
    i2 = HEAP32[28516 + (i4 << 2) >> 2] | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 106;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break; else i4 = i4 + 1 | 0;
   }
   L10 : do if ((i8 | 0) == 8) while (1) {
    i8 = 0;
    i2 = (i1 >>> 0) / (i4 >>> 0) | 0;
    if (i2 >>> 0 < i4 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i2, i4) | 0)) break L10;
    i2 = i4 + 10 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 12 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 16 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 18 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 22 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 28 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 30 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 36 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 40 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 42 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 46 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 52 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 58 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 60 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 66 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 70 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 72 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 78 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 82 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 88 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 96 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 100 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 102 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 106 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 108 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 112 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 120 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 126 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 130 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 136 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 138 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 142 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 148 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 150 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 156 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 162 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 166 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 168 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 172 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 178 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 180 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 186 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 190 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 192 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 196 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 198 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break L10;
    i2 = i4 + 208 | 0;
    i3 = (i1 >>> 0) / (i2 >>> 0) | 0;
    if (i3 >>> 0 < i2 >>> 0) {
     i8 = 105;
     break L4;
    }
    if ((i1 | 0) == (Math_imul(i3, i2) | 0)) break; else {
     i4 = i4 + 210 | 0;
     i8 = 8;
    }
   } while (0);
   i4 = i5 + 1 | 0;
   i1 = (i4 | 0) == 48;
   i4 = i1 ? 0 : i4;
   i1 = (i1 & 1) + i6 | 0;
   i5 = i4;
   i6 = i1;
   i1 = (HEAP32[28708 + (i4 << 2) >> 2] | 0) + (i1 * 210 | 0) | 0;
  }
  if ((i8 | 0) == 105) {
   HEAP32[i7 >> 2] = i1;
   break;
  } else if ((i8 | 0) == 106) {
   HEAP32[i7 >> 2] = i1;
   break;
  }
 } else i1 = HEAP32[(__ZNSt3__113__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_(28516, 28708, i7, i1) | 0) >> 2] | 0; while (0);
 STACKTOP = i9;
 return i1 | 0;
}

function _SDL_GestureProcessEvent(i23) {
 i23 = i23 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, d5 = 0.0, i6 = 0, i7 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, i11 = 0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, i17 = 0, i18 = 0, i19 = 0, d20 = 0.0, d21 = 0.0, i22 = 0, i24 = 0, i25 = 0, d26 = 0.0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 1024 | 0;
 i22 = i25;
 i17 = i25 + 512 | 0;
 i1 = HEAP32[i23 >> 2] | 0;
 if ((i1 + -1792 | 0) >>> 0 >= 3) {
  STACKTOP = i25;
  return;
 }
 i3 = i23 + 8 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i3 + 4 >> 2] | 0;
 i4 = HEAP32[816] | 0;
 if ((i4 | 0) <= 0) {
  STACKTOP = i25;
  return;
 }
 i24 = HEAP32[818] | 0;
 i7 = 0;
 while (1) {
  i6 = i24 + (i7 * 8232 | 0) | 0;
  i19 = i6;
  if ((HEAP32[i19 >> 2] | 0) == (i2 | 0) ? (HEAP32[i19 + 4 >> 2] | 0) == (i3 | 0) : 0) {
   i2 = i6;
   i19 = i6;
   break;
  }
  i7 = i7 + 1 | 0;
  if ((i7 | 0) >= (i4 | 0)) {
   i11 = 52;
   break;
  }
 }
 if ((i11 | 0) == 52) {
  STACKTOP = i25;
  return;
 }
 if (!i2) {
  STACKTOP = i25;
  return;
 }
 d20 = +HEAPF32[i23 + 24 >> 2];
 d21 = +HEAPF32[i23 + 28 >> 2];
 switch (i1 | 0) {
 case 1793:
  {
   i18 = i24 + (i7 * 8232 | 0) + 8216 | 0;
   HEAP16[i18 >> 1] = (HEAP16[i18 >> 1] | 0) + -1 << 16 >> 16;
   i1 = i24 + (i7 * 8232 | 0) + 8228 | 0;
   do if (!(HEAP32[i1 >> 2] | 0)) {
    _SDL_memset(i22, 0, 512) | 0;
    _dollarNormalize(i24 + (i7 * 8232 | 0) + 16 | 0, i22);
    i4 = i24 + (i7 * 8232 | 0) + 8220 | 0;
    if ((HEAP32[i4 >> 2] | 0) <= 0) break;
    i11 = i24 + (i7 * 8232 | 0) + 8224 | 0;
    i1 = -1;
    d5 = 1.0e4;
    i6 = 0;
    do {
     i3 = (HEAP32[i11 >> 2] | 0) + (i6 * 516 | 0) | 0;
     d9 = +_dollarDifference(i22, i3, -.185407355427742);
     d8 = +_dollarDifference(i22, i3, .185407355427742);
     i2 = d9 < d8;
     L25 : do if (+_SDL_fabs(-1.5707963267948966) > .03490658503988659) {
      d10 = d9;
      d13 = -.7853981633974483;
      d9 = .7853981633974483;
      d12 = -.185407355427742;
      d14 = .185407355427742;
      while (1) {
       d16 = d9 * .618033989;
       d15 = d14;
       while (1) {
        if (i2) {
         d8 = d10;
         d14 = d12;
         d9 = d15;
         break;
        }
        d13 = d12;
        d10 = d16 + d13 * .38196601100000005;
        d12 = +_dollarDifference(i22, i3, d10);
        i2 = d8 < d12;
        if (!(+_SDL_fabs(d13 - d9) > .03490658503988659)) {
         d9 = d8;
         d8 = d12;
         break L25;
        } else {
         d26 = d15;
         d14 = d8;
         d8 = d12;
         d15 = d10;
         d12 = d26;
         d10 = d14;
        }
       }
       d12 = d9 * .38196601100000005 + d13 * .618033989;
       d10 = +_dollarDifference(i22, i3, d12);
       i2 = d10 < d8;
       if (!(+_SDL_fabs(d13 - d9) > .03490658503988659)) {
        d9 = d10;
        break;
       }
      }
     } while (0);
     d26 = i2 ? d9 : d8;
     i17 = d26 < d5;
     i1 = i17 ? i6 : i1;
     d5 = i17 ? d26 : d5;
     i6 = i6 + 1 | 0;
    } while ((i6 | 0) < (HEAP32[i4 >> 2] | 0));
    if ((i1 | 0) > -1) {
     i17 = HEAP32[(HEAP32[i11 >> 2] | 0) + (i1 * 516 | 0) + 512 >> 2] | 0;
     HEAP32[i22 >> 2] = 2048;
     i6 = i19;
     i11 = HEAP32[i6 + 4 >> 2] | 0;
     i19 = i22 + 8 | 0;
     HEAP32[i19 >> 2] = HEAP32[i6 >> 2];
     HEAP32[i19 + 4 >> 2] = i11;
     HEAP32[i22 + 32 >> 2] = HEAP32[i24 + (i7 * 8232 | 0) + 8 >> 2];
     HEAP32[i22 + 36 >> 2] = HEAP32[i24 + (i7 * 8232 | 0) + 12 >> 2];
     i19 = i22 + 16 | 0;
     HEAP32[i19 >> 2] = i17;
     HEAP32[i19 + 4 >> 2] = 0;
     HEAPF32[i22 + 28 >> 2] = d5;
     HEAP32[i22 + 24 >> 2] = (HEAPU16[i18 >> 1] | 0) + 1;
     _SDL_PushEvent(i22) | 0;
    }
   } else {
    HEAP32[i1 >> 2] = 0;
    _dollarNormalize(i24 + (i7 * 8232 | 0) + 16 | 0, i17);
    do if (HEAP32[817] | 0) {
     if ((HEAP32[816] | 0) > 0) i11 = 0; else {
      i2 = i19;
      i1 = HEAP32[i2 >> 2] | 0;
      i2 = HEAP32[i2 + 4 >> 2] | 0;
      break;
     }
     do {
      i2 = HEAP32[818] | 0;
      i4 = i2 + (i11 * 8232 | 0) + 8220 | 0;
      i1 = HEAP32[i4 >> 2] | 0;
      i2 = i2 + (i11 * 8232 | 0) + 8224 | 0;
      i6 = _SDL_realloc(HEAP32[i2 >> 2] | 0, (i1 * 516 | 0) + 516 | 0) | 0;
      if (!i6) i1 = _SDL_Error(0) | 0; else {
       HEAP32[i2 >> 2] = i6;
       _SDL_memcpy(i6 + (i1 * 516 | 0) | 0, i17, 512) | 0;
       i2 = 5381;
       i3 = 0;
       do {
        i2 = (((~~+HEAPF32[i6 + (i1 * 516 | 0) + (i3 << 3) >> 2] >>> 0) + (i2 * 33 | 0) | 0) * 33 | 0) + (~~+HEAPF32[i6 + (i1 * 516 | 0) + (i3 << 3) + 4 >> 2] >>> 0) | 0;
        i3 = i3 + 1 | 0;
       } while ((i3 | 0) != 64);
       HEAP32[i6 + (i1 * 516 | 0) + 512 >> 2] = i2;
       HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
      }
      i11 = i11 + 1 | 0;
      i2 = HEAP32[816] | 0;
      if ((i1 | 0) < 0) {
       i1 = -1;
       break;
      }
     } while ((i11 | 0) < (i2 | 0));
     if ((i2 | 0) > 0) {
      i3 = HEAP32[818] | 0;
      i4 = 0;
      do {
       HEAP32[i3 + (i4 * 8232 | 0) + 8228 >> 2] = 0;
       i4 = i4 + 1 | 0;
      } while ((i4 | 0) < (i2 | 0));
      i3 = i1;
      i11 = 27;
     } else {
      i3 = i1;
      i11 = 27;
     }
    } else {
     i4 = i24 + (i7 * 8232 | 0) + 8220 | 0;
     i3 = HEAP32[i4 >> 2] | 0;
     i1 = i24 + (i7 * 8232 | 0) + 8224 | 0;
     i6 = _SDL_realloc(HEAP32[i1 >> 2] | 0, (i3 * 516 | 0) + 516 | 0) | 0;
     if (!i6) {
      i3 = _SDL_Error(0) | 0;
      i11 = 27;
      break;
     }
     HEAP32[i1 >> 2] = i6;
     _SDL_memcpy(i6 + (i3 * 516 | 0) | 0, i17, 512) | 0;
     i1 = 5381;
     i2 = 0;
     do {
      i1 = (((~~+HEAPF32[i6 + (i3 * 516 | 0) + (i2 << 3) >> 2] >>> 0) + (i1 * 33 | 0) | 0) * 33 | 0) + (~~+HEAPF32[i6 + (i3 * 516 | 0) + (i2 << 3) + 4 >> 2] >>> 0) | 0;
      i2 = i2 + 1 | 0;
     } while ((i2 | 0) != 64);
     HEAP32[i6 + (i3 * 516 | 0) + 512 >> 2] = i1;
     HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
     i11 = 27;
    } while (0);
    if ((i11 | 0) == 27) {
     i2 = i19;
     i1 = HEAP32[i2 >> 2] | 0;
     i2 = HEAP32[i2 + 4 >> 2] | 0;
     if ((i3 | 0) > -1) {
      i17 = HEAP32[(HEAP32[i24 + (i7 * 8232 | 0) + 8224 >> 2] | 0) + (i3 * 516 | 0) + 512 >> 2] | 0;
      HEAP32[i22 >> 2] = 2049;
      i19 = i22 + 8 | 0;
      HEAP32[i19 >> 2] = i1;
      HEAP32[i19 + 4 >> 2] = i2;
      i19 = i22 + 16 | 0;
      HEAP32[i19 >> 2] = i17;
      HEAP32[i19 + 4 >> 2] = 0;
      _SDL_PushEvent(i22) | 0;
      break;
     }
    }
    HEAP32[i22 >> 2] = 2049;
    i19 = i22 + 8 | 0;
    HEAP32[i19 >> 2] = i1;
    HEAP32[i19 + 4 >> 2] = i2;
    i19 = i22 + 16 | 0;
    HEAP32[i19 >> 2] = -1;
    HEAP32[i19 + 4 >> 2] = -1;
    _SDL_PushEvent(i22) | 0;
   } while (0);
   i22 = HEAP16[i18 >> 1] | 0;
   i1 = i22 & 65535;
   if (i22 << 16 >> 16) {
    i22 = i24 + (i7 * 8232 | 0) + 8 | 0;
    d16 = +(i1 + 1 | 0);
    d26 = +(i1 | 0);
    HEAPF32[i22 >> 2] = (d16 * +HEAPF32[i22 >> 2] - d20) / d26;
    i22 = i24 + (i7 * 8232 | 0) + 12 | 0;
    HEAPF32[i22 >> 2] = (+HEAPF32[i22 >> 2] * d16 - d21) / d26;
   }
   i11 = 49;
   break;
  }
 case 1794:
  {
   d9 = +HEAPF32[i23 + 32 >> 2];
   d10 = +HEAPF32[i23 + 36 >> 2];
   i1 = i24 + (i7 * 8232 | 0) + 20 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if ((i2 | 0) < 1024) {
    HEAP32[i24 + (i7 * 8232 | 0) + 24 + (i2 << 3) >> 2] = HEAP32[i24 + (i7 * 8232 | 0) + 8 >> 2];
    i18 = i24 + (i7 * 8232 | 0) + 12 | 0;
    HEAP32[i24 + (i7 * 8232 | 0) + 24 + (i2 << 3) + 4 >> 2] = HEAP32[i18 >> 2];
    i11 = HEAP32[i1 >> 2] | 0;
    i17 = i11 + -1 | 0;
    d16 = +HEAPF32[i24 + (i7 * 8232 | 0) + 24 + (i11 << 3) >> 2] - +HEAPF32[i24 + (i7 * 8232 | 0) + 24 + (i17 << 3) >> 2];
    d26 = +HEAPF32[i24 + (i7 * 8232 | 0) + 24 + (i11 << 3) + 4 >> 2] - +HEAPF32[i24 + (i7 * 8232 | 0) + 24 + (i17 << 3) + 4 >> 2];
    d26 = +_SDL_sqrt(d16 * d16 + d26 * d26);
    i17 = i24 + (i7 * 8232 | 0) + 16 | 0;
    HEAPF32[i17 >> 2] = +HEAPF32[i17 >> 2] + d26;
    HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
    i1 = i18;
   } else i1 = i24 + (i7 * 8232 | 0) + 12 | 0;
   i2 = i24 + (i7 * 8232 | 0) + 8 | 0;
   d5 = +HEAPF32[i2 >> 2];
   d8 = +HEAPF32[i1 >> 2];
   i3 = i24 + (i7 * 8232 | 0) + 8216 | 0;
   i18 = HEAP16[i3 >> 1] | 0;
   d26 = +(i18 & 65535 | 0);
   HEAPF32[i2 >> 2] = d5 + d9 / d26;
   HEAPF32[i1 >> 2] = d10 / d26 + d8;
   if ((i18 & 65535) > 1) {
    d12 = d20 - d9 - d5;
    d14 = d21 - d10 - d8;
    d26 = +_SDL_sqrt(d12 * d12 + d14 * d14);
    d13 = d20 - +HEAPF32[i2 >> 2];
    d15 = d21 - +HEAPF32[i1 >> 2];
    d16 = +_SDL_sqrt(d13 * d13 + d15 * d15);
    d12 = d12 / d26;
    d14 = d14 / d26;
    d13 = d13 / d16;
    d15 = d15 / d16;
    d15 = +_SDL_atan2(d12 * d15 - d14 * d13, d12 * d13 + d14 * d15);
    i11 = d26 == 0.0;
    HEAP32[i22 >> 2] = 2050;
    i17 = i19;
    i18 = HEAP32[i17 + 4 >> 2] | 0;
    i19 = i22 + 8 | 0;
    HEAP32[i19 >> 2] = HEAP32[i17 >> 2];
    HEAP32[i19 + 4 >> 2] = i18;
    HEAP32[i22 + 24 >> 2] = HEAP32[i24 + (i7 * 8232 | 0) + 8 >> 2];
    HEAP32[i22 + 28 >> 2] = HEAP32[i1 >> 2];
    HEAPF32[i22 + 16 >> 2] = i11 ? 0.0 : d15;
    HEAPF32[i22 + 20 >> 2] = i11 ? 0.0 : d16 - d26;
    HEAP16[i22 + 32 >> 1] = HEAP16[i3 >> 1] | 0;
    _SDL_PushEvent(i22) | 0;
    i11 = 49;
   } else i11 = 49;
   break;
  }
 default:
  {}
 }
 if ((i11 | 0) == 49) i1 = HEAP32[i23 >> 2] | 0;
 if ((i1 | 0) != 1792) {
  STACKTOP = i25;
  return;
 }
 i23 = i24 + (i7 * 8232 | 0) + 8216 | 0;
 i22 = (HEAP16[i23 >> 1] | 0) + 1 << 16 >> 16;
 HEAP16[i23 >> 1] = i22;
 i23 = i24 + (i7 * 8232 | 0) + 8 | 0;
 i22 = i22 & 65535;
 d16 = +(i22 + -1 | 0);
 d26 = +(i22 | 0);
 HEAPF32[i23 >> 2] = (d20 + +HEAPF32[i23 >> 2] * d16) / d26;
 i23 = i24 + (i7 * 8232 | 0) + 12 | 0;
 HEAPF32[i23 >> 2] = (d21 + +HEAPF32[i23 >> 2] * d16) / d26;
 HEAPF32[i24 + (i7 * 8232 | 0) + 16 >> 2] = 0.0;
 HEAPF32[i24 + (i7 * 8232 | 0) + 24 >> 2] = d20;
 HEAPF32[i24 + (i7 * 8232 | 0) + 28 >> 2] = d21;
 HEAP32[i24 + (i7 * 8232 | 0) + 20 >> 2] = 1;
 STACKTOP = i25;
 return;
}

function _free(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 if (!i15) return;
 i1 = i15 + -8 | 0;
 i7 = HEAP32[6687] | 0;
 if (i1 >>> 0 < i7 >>> 0) _abort();
 i2 = HEAP32[i15 + -4 >> 2] | 0;
 i3 = i2 & 3;
 if ((i3 | 0) == 1) _abort();
 i13 = i2 & -8;
 i16 = i15 + (i13 + -8) | 0;
 do if (!(i2 & 1)) {
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i3) return;
  i8 = -8 - i1 | 0;
  i10 = i15 + i8 | 0;
  i11 = i1 + i13 | 0;
  if (i10 >>> 0 < i7 >>> 0) _abort();
  if ((i10 | 0) == (HEAP32[6688] | 0)) {
   i1 = i15 + (i13 + -4) | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if ((i2 & 3 | 0) != 3) {
    i20 = i10;
    i5 = i11;
    break;
   }
   HEAP32[6685] = i11;
   HEAP32[i1 >> 2] = i2 & -2;
   HEAP32[i15 + (i8 + 4) >> 2] = i11 | 1;
   HEAP32[i16 >> 2] = i11;
   return;
  }
  i4 = i1 >>> 3;
  if (i1 >>> 0 < 256) {
   i3 = HEAP32[i15 + (i8 + 8) >> 2] | 0;
   i2 = HEAP32[i15 + (i8 + 12) >> 2] | 0;
   i1 = 26772 + (i4 << 1 << 2) | 0;
   if ((i3 | 0) != (i1 | 0)) {
    if (i3 >>> 0 < i7 >>> 0) _abort();
    if ((HEAP32[i3 + 12 >> 2] | 0) != (i10 | 0)) _abort();
   }
   if ((i2 | 0) == (i3 | 0)) {
    HEAP32[6683] = HEAP32[6683] & ~(1 << i4);
    i20 = i10;
    i5 = i11;
    break;
   }
   if ((i2 | 0) != (i1 | 0)) {
    if (i2 >>> 0 < i7 >>> 0) _abort();
    i1 = i2 + 8 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i10 | 0)) i6 = i1; else _abort();
   } else i6 = i2 + 8 | 0;
   HEAP32[i3 + 12 >> 2] = i2;
   HEAP32[i6 >> 2] = i3;
   i20 = i10;
   i5 = i11;
   break;
  }
  i6 = HEAP32[i15 + (i8 + 24) >> 2] | 0;
  i3 = HEAP32[i15 + (i8 + 12) >> 2] | 0;
  do if ((i3 | 0) == (i10 | 0)) {
   i2 = i15 + (i8 + 20) | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    i2 = i15 + (i8 + 16) | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i9 = 0;
     break;
    }
   }
   while (1) {
    i3 = i1 + 20 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (i4) {
     i1 = i4;
     i2 = i3;
     continue;
    }
    i3 = i1 + 16 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (!i4) break; else {
     i1 = i4;
     i2 = i3;
    }
   }
   if (i2 >>> 0 < i7 >>> 0) _abort(); else {
    HEAP32[i2 >> 2] = 0;
    i9 = i1;
    break;
   }
  } else {
   i4 = HEAP32[i15 + (i8 + 8) >> 2] | 0;
   if (i4 >>> 0 < i7 >>> 0) _abort();
   i1 = i4 + 12 | 0;
   if ((HEAP32[i1 >> 2] | 0) != (i10 | 0)) _abort();
   i2 = i3 + 8 | 0;
   if ((HEAP32[i2 >> 2] | 0) == (i10 | 0)) {
    HEAP32[i1 >> 2] = i3;
    HEAP32[i2 >> 2] = i4;
    i9 = i3;
    break;
   } else _abort();
  } while (0);
  if (i6) {
   i1 = HEAP32[i15 + (i8 + 28) >> 2] | 0;
   i2 = 27036 + (i1 << 2) | 0;
   if ((i10 | 0) == (HEAP32[i2 >> 2] | 0)) {
    HEAP32[i2 >> 2] = i9;
    if (!i9) {
     HEAP32[6684] = HEAP32[6684] & ~(1 << i1);
     i20 = i10;
     i5 = i11;
     break;
    }
   } else {
    if (i6 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort();
    i1 = i6 + 16 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i10 | 0)) HEAP32[i1 >> 2] = i9; else HEAP32[i6 + 20 >> 2] = i9;
    if (!i9) {
     i20 = i10;
     i5 = i11;
     break;
    }
   }
   i2 = HEAP32[6687] | 0;
   if (i9 >>> 0 < i2 >>> 0) _abort();
   HEAP32[i9 + 24 >> 2] = i6;
   i1 = HEAP32[i15 + (i8 + 16) >> 2] | 0;
   do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
    HEAP32[i9 + 16 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i9;
    break;
   } while (0);
   i1 = HEAP32[i15 + (i8 + 20) >> 2] | 0;
   if (i1) if (i1 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort(); else {
    HEAP32[i9 + 20 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i9;
    i20 = i10;
    i5 = i11;
    break;
   } else {
    i20 = i10;
    i5 = i11;
   }
  } else {
   i20 = i10;
   i5 = i11;
  }
 } else {
  i20 = i1;
  i5 = i13;
 } while (0);
 if (i20 >>> 0 >= i16 >>> 0) _abort();
 i1 = i15 + (i13 + -4) | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!(i2 & 1)) _abort();
 if (!(i2 & 2)) {
  if ((i16 | 0) == (HEAP32[6689] | 0)) {
   i19 = (HEAP32[6686] | 0) + i5 | 0;
   HEAP32[6686] = i19;
   HEAP32[6689] = i20;
   HEAP32[i20 + 4 >> 2] = i19 | 1;
   if ((i20 | 0) != (HEAP32[6688] | 0)) return;
   HEAP32[6688] = 0;
   HEAP32[6685] = 0;
   return;
  }
  if ((i16 | 0) == (HEAP32[6688] | 0)) {
   i19 = (HEAP32[6685] | 0) + i5 | 0;
   HEAP32[6685] = i19;
   HEAP32[6688] = i20;
   HEAP32[i20 + 4 >> 2] = i19 | 1;
   HEAP32[i20 + i19 >> 2] = i19;
   return;
  }
  i5 = (i2 & -8) + i5 | 0;
  i4 = i2 >>> 3;
  do if (i2 >>> 0 >= 256) {
   i6 = HEAP32[i15 + (i13 + 16) >> 2] | 0;
   i1 = HEAP32[i15 + (i13 | 4) >> 2] | 0;
   do if ((i1 | 0) == (i16 | 0)) {
    i2 = i15 + (i13 + 12) | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i2 = i15 + (i13 + 8) | 0;
     i1 = HEAP32[i2 >> 2] | 0;
     if (!i1) {
      i14 = 0;
      break;
     }
    }
    while (1) {
     i3 = i1 + 20 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if (i4) {
      i1 = i4;
      i2 = i3;
      continue;
     }
     i3 = i1 + 16 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if (!i4) break; else {
      i1 = i4;
      i2 = i3;
     }
    }
    if (i2 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort(); else {
     HEAP32[i2 >> 2] = 0;
     i14 = i1;
     break;
    }
   } else {
    i2 = HEAP32[i15 + i13 >> 2] | 0;
    if (i2 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort();
    i3 = i2 + 12 | 0;
    if ((HEAP32[i3 >> 2] | 0) != (i16 | 0)) _abort();
    i4 = i1 + 8 | 0;
    if ((HEAP32[i4 >> 2] | 0) == (i16 | 0)) {
     HEAP32[i3 >> 2] = i1;
     HEAP32[i4 >> 2] = i2;
     i14 = i1;
     break;
    } else _abort();
   } while (0);
   if (i6) {
    i1 = HEAP32[i15 + (i13 + 20) >> 2] | 0;
    i2 = 27036 + (i1 << 2) | 0;
    if ((i16 | 0) == (HEAP32[i2 >> 2] | 0)) {
     HEAP32[i2 >> 2] = i14;
     if (!i14) {
      HEAP32[6684] = HEAP32[6684] & ~(1 << i1);
      break;
     }
    } else {
     if (i6 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort();
     i1 = i6 + 16 | 0;
     if ((HEAP32[i1 >> 2] | 0) == (i16 | 0)) HEAP32[i1 >> 2] = i14; else HEAP32[i6 + 20 >> 2] = i14;
     if (!i14) break;
    }
    i2 = HEAP32[6687] | 0;
    if (i14 >>> 0 < i2 >>> 0) _abort();
    HEAP32[i14 + 24 >> 2] = i6;
    i1 = HEAP32[i15 + (i13 + 8) >> 2] | 0;
    do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
     HEAP32[i14 + 16 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i14;
     break;
    } while (0);
    i1 = HEAP32[i15 + (i13 + 12) >> 2] | 0;
    if (i1) if (i1 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort(); else {
     HEAP32[i14 + 20 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i14;
     break;
    }
   }
  } else {
   i3 = HEAP32[i15 + i13 >> 2] | 0;
   i2 = HEAP32[i15 + (i13 | 4) >> 2] | 0;
   i1 = 26772 + (i4 << 1 << 2) | 0;
   if ((i3 | 0) != (i1 | 0)) {
    if (i3 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort();
    if ((HEAP32[i3 + 12 >> 2] | 0) != (i16 | 0)) _abort();
   }
   if ((i2 | 0) == (i3 | 0)) {
    HEAP32[6683] = HEAP32[6683] & ~(1 << i4);
    break;
   }
   if ((i2 | 0) != (i1 | 0)) {
    if (i2 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort();
    i1 = i2 + 8 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i16 | 0)) i12 = i1; else _abort();
   } else i12 = i2 + 8 | 0;
   HEAP32[i3 + 12 >> 2] = i2;
   HEAP32[i12 >> 2] = i3;
  } while (0);
  HEAP32[i20 + 4 >> 2] = i5 | 1;
  HEAP32[i20 + i5 >> 2] = i5;
  if ((i20 | 0) == (HEAP32[6688] | 0)) {
   HEAP32[6685] = i5;
   return;
  }
 } else {
  HEAP32[i1 >> 2] = i2 & -2;
  HEAP32[i20 + 4 >> 2] = i5 | 1;
  HEAP32[i20 + i5 >> 2] = i5;
 }
 i1 = i5 >>> 3;
 if (i5 >>> 0 < 256) {
  i2 = i1 << 1;
  i4 = 26772 + (i2 << 2) | 0;
  i3 = HEAP32[6683] | 0;
  i1 = 1 << i1;
  if (i3 & i1) {
   i1 = 26772 + (i2 + 2 << 2) | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort(); else {
    i17 = i1;
    i18 = i2;
   }
  } else {
   HEAP32[6683] = i3 | i1;
   i17 = 26772 + (i2 + 2 << 2) | 0;
   i18 = i4;
  }
  HEAP32[i17 >> 2] = i20;
  HEAP32[i18 + 12 >> 2] = i20;
  HEAP32[i20 + 8 >> 2] = i18;
  HEAP32[i20 + 12 >> 2] = i4;
  return;
 }
 i1 = i5 >>> 8;
 if (i1) if (i5 >>> 0 > 16777215) i4 = 31; else {
  i17 = (i1 + 1048320 | 0) >>> 16 & 8;
  i18 = i1 << i17;
  i16 = (i18 + 520192 | 0) >>> 16 & 4;
  i18 = i18 << i16;
  i4 = (i18 + 245760 | 0) >>> 16 & 2;
  i4 = 14 - (i16 | i17 | i4) + (i18 << i4 >>> 15) | 0;
  i4 = i5 >>> (i4 + 7 | 0) & 1 | i4 << 1;
 } else i4 = 0;
 i1 = 27036 + (i4 << 2) | 0;
 HEAP32[i20 + 28 >> 2] = i4;
 HEAP32[i20 + 20 >> 2] = 0;
 HEAP32[i20 + 16 >> 2] = 0;
 i2 = HEAP32[6684] | 0;
 i3 = 1 << i4;
 L199 : do if (i2 & i3) {
  i1 = HEAP32[i1 >> 2] | 0;
  L202 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i5 | 0)) {
   i4 = i5 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
   while (1) {
    i2 = i1 + 16 + (i4 >>> 31 << 2) | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if (!i3) break;
    if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i5 | 0)) {
     i19 = i3;
     break L202;
    } else {
     i4 = i4 << 1;
     i1 = i3;
    }
   }
   if (i2 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort(); else {
    HEAP32[i2 >> 2] = i20;
    HEAP32[i20 + 24 >> 2] = i1;
    HEAP32[i20 + 12 >> 2] = i20;
    HEAP32[i20 + 8 >> 2] = i20;
    break L199;
   }
  } else i19 = i1; while (0);
  i1 = i19 + 8 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  i18 = HEAP32[6687] | 0;
  if (i2 >>> 0 >= i18 >>> 0 & i19 >>> 0 >= i18 >>> 0) {
   HEAP32[i2 + 12 >> 2] = i20;
   HEAP32[i1 >> 2] = i20;
   HEAP32[i20 + 8 >> 2] = i2;
   HEAP32[i20 + 12 >> 2] = i19;
   HEAP32[i20 + 24 >> 2] = 0;
   break;
  } else _abort();
 } else {
  HEAP32[6684] = i2 | i3;
  HEAP32[i1 >> 2] = i20;
  HEAP32[i20 + 24 >> 2] = i1;
  HEAP32[i20 + 12 >> 2] = i20;
  HEAP32[i20 + 8 >> 2] = i20;
 } while (0);
 i20 = (HEAP32[6691] | 0) + -1 | 0;
 HEAP32[6691] = i20;
 if (!i20) i1 = 27188; else return;
 while (1) {
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) break; else i1 = i1 + 8 | 0;
 }
 HEAP32[6691] = -1;
 return;
}

function _SDL_BlendFillRect_ARGB8888(i14, i15, i2, i4, i11, i13, i1) {
 i14 = i14 | 0;
 i15 = i15 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i11 = i11 | 0;
 i13 = i13 | 0;
 i1 = i1 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0;
 i12 = i1 & 255;
 i10 = i12 ^ 255;
 switch (i2 | 0) {
 case 1:
  {
   i2 = HEAP32[i15 + 8 >> 2] | 0;
   i3 = HEAP32[i15 + 12 >> 2] | 0;
   i1 = (HEAP32[i14 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i14 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i9 = i1 - i2 | 0;
   if (!i3) return 0;
   i1 = Math_imul(HEAP32[i15 + 4 >> 2] | 0, i1) | 0;
   i8 = (i2 + 3 | 0) / 4 | 0;
   i7 = i2 & 3;
   i6 = i4 & 255;
   i5 = i11 & 255;
   i4 = i13 & 255;
   i2 = i3;
   i1 = (HEAP32[i14 + 20 >> 2] | 0) + (i1 + (HEAP32[i15 >> 2] | 0) << 2) | 0;
   L20 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i7 | 0) {
    case 0:
     {
      i3 = i8;
      i11 = 5;
      break;
     }
    case 3:
     {
      i3 = i8;
      i11 = 6;
      break;
     }
    case 2:
     {
      i3 = i8;
      i11 = 7;
      break;
     }
    case 1:
     {
      i3 = i8;
      i11 = 8;
      break;
     }
    default:
     i11 = 9;
    }
    while (1) if ((i11 | 0) == 5) {
     i15 = HEAP32[i1 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i15 >>> 8 & 255, i10) | 0) >>> 0) / 255 | 0) + i5 << 8 | (((Math_imul(i15 >>> 16 & 255, i10) | 0) >>> 0) / 255 | 0) + i6 << 16 | (((Math_imul(i15 & 255, i10) | 0) >>> 0) / 255 | 0) + i4 | (((Math_imul(i15 >>> 24, i10) | 0) >>> 0) / 255 | 0) + i12 << 24;
     i1 = i1 + 4 | 0;
     i11 = 6;
     continue;
    } else if ((i11 | 0) == 6) {
     i15 = HEAP32[i1 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i15 >>> 8 & 255, i10) | 0) >>> 0) / 255 | 0) + i5 << 8 | (((Math_imul(i15 >>> 16 & 255, i10) | 0) >>> 0) / 255 | 0) + i6 << 16 | (((Math_imul(i15 & 255, i10) | 0) >>> 0) / 255 | 0) + i4 | (((Math_imul(i15 >>> 24, i10) | 0) >>> 0) / 255 | 0) + i12 << 24;
     i1 = i1 + 4 | 0;
     i11 = 7;
     continue;
    } else if ((i11 | 0) == 7) {
     i15 = HEAP32[i1 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i15 >>> 8 & 255, i10) | 0) >>> 0) / 255 | 0) + i5 << 8 | (((Math_imul(i15 >>> 16 & 255, i10) | 0) >>> 0) / 255 | 0) + i6 << 16 | (((Math_imul(i15 & 255, i10) | 0) >>> 0) / 255 | 0) + i4 | (((Math_imul(i15 >>> 24, i10) | 0) >>> 0) / 255 | 0) + i12 << 24;
     i1 = i1 + 4 | 0;
     i11 = 8;
     continue;
    } else if ((i11 | 0) == 8) {
     i15 = HEAP32[i1 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i15 >>> 8 & 255, i10) | 0) >>> 0) / 255 | 0) + i5 << 8 | (((Math_imul(i15 >>> 16 & 255, i10) | 0) >>> 0) / 255 | 0) + i6 << 16 | (((Math_imul(i15 & 255, i10) | 0) >>> 0) / 255 | 0) + i4 | (((Math_imul(i15 >>> 24, i10) | 0) >>> 0) / 255 | 0) + i12 << 24;
     i1 = i1 + 4 | 0;
     if ((i3 | 0) > 1) {
      i3 = i3 + -1 | 0;
      i11 = 5;
      continue;
     } else {
      i11 = 9;
      continue;
     }
    } else if ((i11 | 0) == 9) if (!i2) break L20; else {
     i1 = i1 + (i9 << 2) | 0;
     continue L20;
    }
   }
   return 0;
  }
 case 2:
  {
   i2 = HEAP32[i15 + 8 >> 2] | 0;
   i3 = HEAP32[i15 + 12 >> 2] | 0;
   i1 = (HEAP32[i14 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i14 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i9 = i1 - i2 | 0;
   if (!i3) return 0;
   i1 = Math_imul(HEAP32[i15 + 4 >> 2] | 0, i1) | 0;
   i8 = (i2 + 3 | 0) / 4 | 0;
   i7 = i2 & 3;
   i6 = i4 & 255;
   i5 = i11 & 255;
   i4 = i13 & 255;
   i2 = i3;
   i1 = (HEAP32[i14 + 20 >> 2] | 0) + (i1 + (HEAP32[i15 >> 2] | 0) << 2) | 0;
   L34 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i7 | 0) {
    case 0:
     {
      i3 = i8;
      i11 = 13;
      break;
     }
    case 3:
     {
      i3 = i8;
      i11 = 14;
      break;
     }
    case 2:
     {
      i3 = i8;
      i11 = 15;
      break;
     }
    case 1:
     {
      i3 = i8;
      i11 = 16;
      break;
     }
    default:
     i11 = 17;
    }
    while (1) if ((i11 | 0) == 13) {
     i13 = HEAP32[i1 >> 2] | 0;
     i14 = (i13 >>> 16 & 255) + i6 | 0;
     i15 = (i13 >>> 8 & 255) + i5 | 0;
     i12 = (i13 & 255) + i4 | 0;
     HEAP32[i1 >> 2] = (i12 >>> 0 > 255 ? 255 : i12) | i13 & -16777216 | (i14 >>> 0 > 255 ? 16711680 : i14 << 16) | (i15 >>> 0 > 255 ? 65280 : i15 << 8);
     i1 = i1 + 4 | 0;
     i11 = 14;
     continue;
    } else if ((i11 | 0) == 14) {
     i13 = HEAP32[i1 >> 2] | 0;
     i14 = (i13 >>> 16 & 255) + i6 | 0;
     i15 = (i13 >>> 8 & 255) + i5 | 0;
     i12 = (i13 & 255) + i4 | 0;
     HEAP32[i1 >> 2] = (i12 >>> 0 > 255 ? 255 : i12) | i13 & -16777216 | (i14 >>> 0 > 255 ? 16711680 : i14 << 16) | (i15 >>> 0 > 255 ? 65280 : i15 << 8);
     i1 = i1 + 4 | 0;
     i11 = 15;
     continue;
    } else if ((i11 | 0) == 15) {
     i13 = HEAP32[i1 >> 2] | 0;
     i14 = (i13 >>> 16 & 255) + i6 | 0;
     i15 = (i13 >>> 8 & 255) + i5 | 0;
     i12 = (i13 & 255) + i4 | 0;
     HEAP32[i1 >> 2] = (i12 >>> 0 > 255 ? 255 : i12) | i13 & -16777216 | (i14 >>> 0 > 255 ? 16711680 : i14 << 16) | (i15 >>> 0 > 255 ? 65280 : i15 << 8);
     i1 = i1 + 4 | 0;
     i11 = 16;
     continue;
    } else if ((i11 | 0) == 16) {
     i13 = HEAP32[i1 >> 2] | 0;
     i14 = (i13 >>> 16 & 255) + i6 | 0;
     i15 = (i13 >>> 8 & 255) + i5 | 0;
     i12 = (i13 & 255) + i4 | 0;
     HEAP32[i1 >> 2] = (i12 >>> 0 > 255 ? 255 : i12) | i13 & -16777216 | (i14 >>> 0 > 255 ? 16711680 : i14 << 16) | (i15 >>> 0 > 255 ? 65280 : i15 << 8);
     i1 = i1 + 4 | 0;
     if ((i3 | 0) > 1) {
      i3 = i3 + -1 | 0;
      i11 = 13;
      continue;
     } else {
      i11 = 17;
      continue;
     }
    } else if ((i11 | 0) == 17) if (!i2) break L34; else {
     i1 = i1 + (i9 << 2) | 0;
     continue L34;
    }
   }
   return 0;
  }
 case 4:
  {
   i2 = HEAP32[i15 + 8 >> 2] | 0;
   i3 = HEAP32[i15 + 12 >> 2] | 0;
   i1 = (HEAP32[i14 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i14 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i9 = i1 - i2 | 0;
   if (!i3) return 0;
   i1 = Math_imul(HEAP32[i15 + 4 >> 2] | 0, i1) | 0;
   i8 = (i2 + 3 | 0) / 4 | 0;
   i7 = i2 & 3;
   i6 = i4 & 255;
   i5 = i11 & 255;
   i4 = i13 & 255;
   i2 = i3;
   i1 = (HEAP32[i14 + 20 >> 2] | 0) + (i1 + (HEAP32[i15 >> 2] | 0) << 2) | 0;
   L48 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i7 | 0) {
    case 0:
     {
      i3 = i8;
      i11 = 21;
      break;
     }
    case 3:
     {
      i3 = i8;
      i11 = 22;
      break;
     }
    case 2:
     {
      i3 = i8;
      i11 = 23;
      break;
     }
    case 1:
     {
      i3 = i8;
      i11 = 24;
      break;
     }
    default:
     i11 = 25;
    }
    while (1) if ((i11 | 0) == 21) {
     i15 = HEAP32[i1 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i15 >>> 16 & 255, i6) | 0) >>> 0) / 255 | 0) << 16 | i15 & -16777216 | (((Math_imul(i15 >>> 8 & 255, i5) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i15 & 255, i4) | 0) >>> 0) / 255 | 0);
     i1 = i1 + 4 | 0;
     i11 = 22;
     continue;
    } else if ((i11 | 0) == 22) {
     i15 = HEAP32[i1 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i15 >>> 16 & 255, i6) | 0) >>> 0) / 255 | 0) << 16 | i15 & -16777216 | (((Math_imul(i15 >>> 8 & 255, i5) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i15 & 255, i4) | 0) >>> 0) / 255 | 0);
     i1 = i1 + 4 | 0;
     i11 = 23;
     continue;
    } else if ((i11 | 0) == 23) {
     i15 = HEAP32[i1 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i15 >>> 16 & 255, i6) | 0) >>> 0) / 255 | 0) << 16 | i15 & -16777216 | (((Math_imul(i15 >>> 8 & 255, i5) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i15 & 255, i4) | 0) >>> 0) / 255 | 0);
     i1 = i1 + 4 | 0;
     i11 = 24;
     continue;
    } else if ((i11 | 0) == 24) {
     i15 = HEAP32[i1 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i15 >>> 16 & 255, i6) | 0) >>> 0) / 255 | 0) << 16 | i15 & -16777216 | (((Math_imul(i15 >>> 8 & 255, i5) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i15 & 255, i4) | 0) >>> 0) / 255 | 0);
     i1 = i1 + 4 | 0;
     if ((i3 | 0) > 1) {
      i3 = i3 + -1 | 0;
      i11 = 21;
      continue;
     } else {
      i11 = 25;
      continue;
     }
    } else if ((i11 | 0) == 25) if (!i2) break L48; else {
     i1 = i1 + (i9 << 2) | 0;
     continue L48;
    }
   }
   return 0;
  }
 default:
  {
   i3 = HEAP32[i15 + 8 >> 2] | 0;
   i2 = HEAP32[i15 + 12 >> 2] | 0;
   i1 = (HEAP32[i14 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i14 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i7 = i1 - i3 | 0;
   if (!i2) return 0;
   i1 = Math_imul(HEAP32[i15 + 4 >> 2] | 0, i1) | 0;
   i6 = (i3 + 3 | 0) / 4 | 0;
   i5 = i3 & 3;
   i4 = (i11 & 255) << 8 | (i4 & 255) << 16 | i13 & 255 | i12 << 24;
   i1 = (HEAP32[i14 + 20 >> 2] | 0) + (i1 + (HEAP32[i15 >> 2] | 0) << 2) | 0;
   L6 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i5 | 0) {
    case 0:
     {
      i3 = i6;
      i11 = 29;
      break;
     }
    case 3:
     {
      i3 = i6;
      i11 = 30;
      break;
     }
    case 2:
     {
      i3 = i6;
      i11 = 31;
      break;
     }
    case 1:
     {
      i3 = i6;
      i11 = 32;
      break;
     }
    default:
     i11 = 33;
    }
    while (1) if ((i11 | 0) == 29) {
     HEAP32[i1 >> 2] = i4;
     i1 = i1 + 4 | 0;
     i11 = 30;
     continue;
    } else if ((i11 | 0) == 30) {
     HEAP32[i1 >> 2] = i4;
     i1 = i1 + 4 | 0;
     i11 = 31;
     continue;
    } else if ((i11 | 0) == 31) {
     HEAP32[i1 >> 2] = i4;
     i1 = i1 + 4 | 0;
     i11 = 32;
     continue;
    } else if ((i11 | 0) == 32) {
     HEAP32[i1 >> 2] = i4;
     i1 = i1 + 4 | 0;
     if ((i3 | 0) > 1) {
      i3 = i3 + -1 | 0;
      i11 = 29;
      continue;
     } else {
      i11 = 33;
      continue;
     }
    } else if ((i11 | 0) == 33) if (!i2) break L6; else {
     i1 = i1 + (i7 << 2) | 0;
     continue L6;
    }
   }
   return 0;
  }
 }
 return 0;
}

function _SDL_BlendFillRect_RGB888(i13, i14, i2, i4, i11, i12, i1) {
 i13 = i13 | 0;
 i14 = i14 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i1 = i1 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = i1 & 255 ^ 255;
 switch (i2 | 0) {
 case 1:
  {
   i2 = HEAP32[i14 + 8 >> 2] | 0;
   i3 = HEAP32[i14 + 12 >> 2] | 0;
   i1 = (HEAP32[i13 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i13 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i9 = i1 - i2 | 0;
   if (!i3) return 0;
   i1 = Math_imul(HEAP32[i14 + 4 >> 2] | 0, i1) | 0;
   i8 = (i2 + 3 | 0) / 4 | 0;
   i7 = i2 & 3;
   i6 = i4 & 255;
   i5 = i11 & 255;
   i4 = i12 & 255;
   i2 = i3;
   i1 = (HEAP32[i13 + 20 >> 2] | 0) + (i1 + (HEAP32[i14 >> 2] | 0) << 2) | 0;
   L28 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i7 | 0) {
    case 0:
     {
      i3 = i8;
      i11 = 5;
      break;
     }
    case 3:
     {
      i3 = i8;
      i11 = 6;
      break;
     }
    case 2:
     {
      i3 = i8;
      i11 = 7;
      break;
     }
    case 1:
     {
      i3 = i8;
      i11 = 8;
      break;
     }
    default:
     i11 = 9;
    }
    while (1) if ((i11 | 0) == 5) {
     i14 = HEAP32[i1 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i14 >>> 8 & 255, i10) | 0) >>> 0) / 255 | 0) + i5 << 8 | (((Math_imul(i14 >>> 16 & 255, i10) | 0) >>> 0) / 255 | 0) + i6 << 16 | (((Math_imul(i14 & 255, i10) | 0) >>> 0) / 255 | 0) + i4;
     i1 = i1 + 4 | 0;
     i11 = 6;
     continue;
    } else if ((i11 | 0) == 6) {
     i14 = HEAP32[i1 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i14 >>> 8 & 255, i10) | 0) >>> 0) / 255 | 0) + i5 << 8 | (((Math_imul(i14 >>> 16 & 255, i10) | 0) >>> 0) / 255 | 0) + i6 << 16 | (((Math_imul(i14 & 255, i10) | 0) >>> 0) / 255 | 0) + i4;
     i1 = i1 + 4 | 0;
     i11 = 7;
     continue;
    } else if ((i11 | 0) == 7) {
     i14 = HEAP32[i1 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i14 >>> 8 & 255, i10) | 0) >>> 0) / 255 | 0) + i5 << 8 | (((Math_imul(i14 >>> 16 & 255, i10) | 0) >>> 0) / 255 | 0) + i6 << 16 | (((Math_imul(i14 & 255, i10) | 0) >>> 0) / 255 | 0) + i4;
     i1 = i1 + 4 | 0;
     i11 = 8;
     continue;
    } else if ((i11 | 0) == 8) {
     i14 = HEAP32[i1 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i14 >>> 8 & 255, i10) | 0) >>> 0) / 255 | 0) + i5 << 8 | (((Math_imul(i14 >>> 16 & 255, i10) | 0) >>> 0) / 255 | 0) + i6 << 16 | (((Math_imul(i14 & 255, i10) | 0) >>> 0) / 255 | 0) + i4;
     i1 = i1 + 4 | 0;
     if ((i3 | 0) > 1) {
      i3 = i3 + -1 | 0;
      i11 = 5;
      continue;
     } else {
      i11 = 9;
      continue;
     }
    } else if ((i11 | 0) == 9) if (!i2) break L28; else {
     i1 = i1 + (i9 << 2) | 0;
     continue L28;
    }
   }
   return 0;
  }
 case 2:
  {
   i2 = HEAP32[i14 + 8 >> 2] | 0;
   i3 = HEAP32[i14 + 12 >> 2] | 0;
   i1 = (HEAP32[i13 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i13 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i9 = i1 - i2 | 0;
   if (!i3) return 0;
   i1 = Math_imul(HEAP32[i14 + 4 >> 2] | 0, i1) | 0;
   i8 = (i2 + 3 | 0) / 4 | 0;
   i7 = i2 & 3;
   i6 = i4 & 255;
   i5 = i11 & 255;
   i4 = i12 & 255;
   i2 = i3;
   i1 = (HEAP32[i13 + 20 >> 2] | 0) + (i1 + (HEAP32[i14 >> 2] | 0) << 2) | 0;
   L42 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i7 | 0) {
    case 0:
     {
      i3 = i8;
      i11 = 13;
      break;
     }
    case 3:
     {
      i3 = i8;
      i11 = 14;
      break;
     }
    case 2:
     {
      i3 = i8;
      i11 = 15;
      break;
     }
    case 1:
     {
      i3 = i8;
      i11 = 16;
      break;
     }
    default:
     i11 = 17;
    }
    while (1) if ((i11 | 0) == 13) {
     i13 = HEAP32[i1 >> 2] | 0;
     i14 = (i13 >>> 16 & 255) + i6 | 0;
     i12 = (i13 >>> 8 & 255) + i5 | 0;
     i13 = (i13 & 255) + i4 | 0;
     HEAP32[i1 >> 2] = (i12 >>> 0 > 255 ? 65280 : i12 << 8) | (i13 >>> 0 > 255 ? 255 : i13) | (i14 >>> 0 > 255 ? 16711680 : i14 << 16);
     i1 = i1 + 4 | 0;
     i11 = 14;
     continue;
    } else if ((i11 | 0) == 14) {
     i13 = HEAP32[i1 >> 2] | 0;
     i14 = (i13 >>> 16 & 255) + i6 | 0;
     i12 = (i13 >>> 8 & 255) + i5 | 0;
     i13 = (i13 & 255) + i4 | 0;
     HEAP32[i1 >> 2] = (i12 >>> 0 > 255 ? 65280 : i12 << 8) | (i13 >>> 0 > 255 ? 255 : i13) | (i14 >>> 0 > 255 ? 16711680 : i14 << 16);
     i1 = i1 + 4 | 0;
     i11 = 15;
     continue;
    } else if ((i11 | 0) == 15) {
     i13 = HEAP32[i1 >> 2] | 0;
     i14 = (i13 >>> 16 & 255) + i6 | 0;
     i12 = (i13 >>> 8 & 255) + i5 | 0;
     i13 = (i13 & 255) + i4 | 0;
     HEAP32[i1 >> 2] = (i12 >>> 0 > 255 ? 65280 : i12 << 8) | (i13 >>> 0 > 255 ? 255 : i13) | (i14 >>> 0 > 255 ? 16711680 : i14 << 16);
     i1 = i1 + 4 | 0;
     i11 = 16;
     continue;
    } else if ((i11 | 0) == 16) {
     i13 = HEAP32[i1 >> 2] | 0;
     i14 = (i13 >>> 16 & 255) + i6 | 0;
     i12 = (i13 >>> 8 & 255) + i5 | 0;
     i13 = (i13 & 255) + i4 | 0;
     HEAP32[i1 >> 2] = (i12 >>> 0 > 255 ? 65280 : i12 << 8) | (i13 >>> 0 > 255 ? 255 : i13) | (i14 >>> 0 > 255 ? 16711680 : i14 << 16);
     i1 = i1 + 4 | 0;
     if ((i3 | 0) > 1) {
      i3 = i3 + -1 | 0;
      i11 = 13;
      continue;
     } else {
      i11 = 17;
      continue;
     }
    } else if ((i11 | 0) == 17) if (!i2) break L42; else {
     i1 = i1 + (i9 << 2) | 0;
     continue L42;
    }
   }
   return 0;
  }
 case 4:
  {
   i2 = HEAP32[i14 + 8 >> 2] | 0;
   i3 = HEAP32[i14 + 12 >> 2] | 0;
   i1 = (HEAP32[i13 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i13 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i9 = i1 - i2 | 0;
   if (!i3) return 0;
   i1 = Math_imul(HEAP32[i14 + 4 >> 2] | 0, i1) | 0;
   i8 = (i2 + 3 | 0) / 4 | 0;
   i7 = i2 & 3;
   i6 = i4 & 255;
   i5 = i11 & 255;
   i4 = i12 & 255;
   i2 = i3;
   i1 = (HEAP32[i13 + 20 >> 2] | 0) + (i1 + (HEAP32[i14 >> 2] | 0) << 2) | 0;
   L56 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i7 | 0) {
    case 0:
     {
      i3 = i8;
      i11 = 21;
      break;
     }
    case 3:
     {
      i3 = i8;
      i11 = 22;
      break;
     }
    case 2:
     {
      i3 = i8;
      i11 = 23;
      break;
     }
    case 1:
     {
      i3 = i8;
      i11 = 24;
      break;
     }
    default:
     i11 = 25;
    }
    while (1) if ((i11 | 0) == 21) {
     i14 = HEAP32[i1 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i14 >>> 8 & 255, i5) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i14 >>> 16 & 255, i6) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i14 & 255, i4) | 0) >>> 0) / 255 | 0);
     i1 = i1 + 4 | 0;
     i11 = 22;
     continue;
    } else if ((i11 | 0) == 22) {
     i14 = HEAP32[i1 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i14 >>> 8 & 255, i5) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i14 >>> 16 & 255, i6) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i14 & 255, i4) | 0) >>> 0) / 255 | 0);
     i1 = i1 + 4 | 0;
     i11 = 23;
     continue;
    } else if ((i11 | 0) == 23) {
     i14 = HEAP32[i1 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i14 >>> 8 & 255, i5) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i14 >>> 16 & 255, i6) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i14 & 255, i4) | 0) >>> 0) / 255 | 0);
     i1 = i1 + 4 | 0;
     i11 = 24;
     continue;
    } else if ((i11 | 0) == 24) {
     i14 = HEAP32[i1 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i14 >>> 8 & 255, i5) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i14 >>> 16 & 255, i6) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i14 & 255, i4) | 0) >>> 0) / 255 | 0);
     i1 = i1 + 4 | 0;
     if ((i3 | 0) > 1) {
      i3 = i3 + -1 | 0;
      i11 = 21;
      continue;
     } else {
      i11 = 25;
      continue;
     }
    } else if ((i11 | 0) == 25) if (!i2) break L56; else {
     i1 = i1 + (i9 << 2) | 0;
     continue L56;
    }
   }
   return 0;
  }
 default:
  {
   i2 = HEAP32[i14 + 8 >> 2] | 0;
   i10 = HEAP32[i14 + 12 >> 2] | 0;
   i1 = (HEAP32[i13 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i13 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i6 = i1 - i2 | 0;
   i1 = Math_imul(HEAP32[i14 + 4 >> 2] | 0, i1) | 0;
   i1 = (HEAP32[i13 + 20 >> 2] | 0) + (i1 + (HEAP32[i14 >> 2] | 0) << 2) | 0;
   i3 = i10 + -1 | 0;
   if (!i10) return 0;
   i8 = (i2 + 3 | 0) / 4 | 0;
   i5 = i2 & 3;
   i7 = (i11 & 255) << 8 | (i4 & 255) << 16 | i12 & 255;
   if (!i5) {
    i4 = i6 + 4 | 0;
    while (1) {
     i2 = i8;
     while (1) {
      HEAP32[i1 >> 2] = i7;
      HEAP32[i1 + 4 >> 2] = i7;
      HEAP32[i1 + 8 >> 2] = i7;
      HEAP32[i1 + 12 >> 2] = i7;
      if ((i2 | 0) > 1) {
       i2 = i2 + -1 | 0;
       i1 = i1 + 16 | 0;
      } else break;
     }
     if (!i3) break; else {
      i3 = i3 + -1 | 0;
      i1 = i1 + (i4 << 2) | 0;
     }
    }
    return 0;
   }
   L14 : while (1) {
    switch (i5 | 0) {
    case 1:
     {
      i4 = i8;
      i11 = 36;
      break;
     }
    case 3:
     {
      i2 = i8;
      i11 = 34;
      break;
     }
    case 2:
     {
      i2 = i8;
      i11 = 35;
      break;
     }
    default:
     i11 = 37;
    }
    while (1) if ((i11 | 0) == 34) {
     HEAP32[i1 >> 2] = i7;
     i1 = i1 + 4 | 0;
     i11 = 35;
     continue;
    } else if ((i11 | 0) == 35) {
     HEAP32[i1 >> 2] = i7;
     i4 = i2;
     i1 = i1 + 4 | 0;
     i11 = 36;
     continue;
    } else if ((i11 | 0) == 36) {
     HEAP32[i1 >> 2] = i7;
     i2 = i1 + 4 | 0;
     if ((i4 | 0) <= 1) {
      i1 = i2;
      i11 = 37;
      continue;
     }
     HEAP32[i2 >> 2] = i7;
     i2 = i4 + -1 | 0;
     i1 = i1 + 8 | 0;
     i11 = 34;
     continue;
    } else if ((i11 | 0) == 37) if (!i3) break L14; else {
     i3 = i3 + -1 | 0;
     i1 = i1 + (i6 << 2) | 0;
     continue L14;
    }
   }
   return 0;
  }
 }
 return 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc(i41, i35, i36, i39, i37, i40, i38, i1) {
 i41 = i41 | 0;
 i35 = i35 | 0;
 i36 = i36 | 0;
 i39 = i39 | 0;
 i37 = i37 | 0;
 i40 = i40 | 0;
 i38 = i38 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i42 = 0, i43 = 0, i44 = 0;
 i42 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i2 = i42 + 132 | 0;
 i1 = i42 + 116 | 0;
 i28 = i42 + 128 | 0;
 i13 = i42 + 124 | 0;
 i24 = i42 + 120 | 0;
 i29 = i42 + 112 | 0;
 i30 = i42 + 108 | 0;
 i31 = i42 + 104 | 0;
 i32 = i42 + 100 | 0;
 i33 = i42 + 96 | 0;
 i34 = i42 + 92 | 0;
 i3 = i42 + 88 | 0;
 i4 = i42 + 84 | 0;
 i5 = i42 + 80 | 0;
 i6 = i42 + 76 | 0;
 i7 = i42 + 72 | 0;
 i8 = i42 + 68 | 0;
 i9 = i42 + 64 | 0;
 i10 = i42 + 60 | 0;
 i11 = i42 + 56 | 0;
 i12 = i42 + 52 | 0;
 i14 = i42 + 48 | 0;
 i15 = i42 + 44 | 0;
 i16 = i42 + 40 | 0;
 i17 = i42 + 36 | 0;
 i18 = i42 + 32 | 0;
 i19 = i42 + 28 | 0;
 i20 = i42 + 24 | 0;
 i21 = i42 + 20 | 0;
 i22 = i42 + 16 | 0;
 i23 = i42 + 12 | 0;
 i25 = i42 + 8 | 0;
 i26 = i42 + 4 | 0;
 i27 = i42;
 HEAP32[i37 >> 2] = 0;
 i44 = __ZNKSt3__18ios_base6getlocEv(i39) | 0;
 HEAP32[i28 >> 2] = i44;
 i28 = __ZNKSt3__16locale9use_facetERNS0_2idE(i28, 30376) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i44) | 0;
 do switch (i38 << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[i13 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i13 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 24 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[i24 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i24 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 16 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 99:
  {
   i44 = i41 + 8 | 0;
   i44 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i44 >> 2] | 0) + 12 >> 2] & 127](i44) | 0;
   HEAP32[i29 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i30 >> 2] = HEAP32[i36 >> 2];
   i38 = HEAP8[i44 >> 0] | 0;
   i36 = (i38 & 1) == 0;
   i43 = i44 + 4 | 0;
   i44 = i36 ? i43 : HEAP32[i44 + 8 >> 2] | 0;
   i43 = i44 + ((i36 ? (i38 & 255) >>> 1 : HEAP32[i43 >> 2] | 0) << 2) | 0;
   HEAP32[i1 >> 2] = HEAP32[i29 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i30 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i41, i1, i2, i39, i37, i40, i44, i43) | 0;
   i43 = 26;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[i31 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i31 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 12 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 68:
  {
   HEAP32[i32 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i33 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i32 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i33 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i41, i1, i2, i39, i37, i40, 30984, 31016) | 0;
   i43 = 26;
   break;
  }
 case 70:
  {
   HEAP32[i34 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i3 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i34 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i41, i1, i2, i39, i37, i40, 31016, 31048) | 0;
   i43 = 26;
   break;
  }
 case 72:
  {
   HEAP32[i4 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 8 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 73:
  {
   HEAP32[i5 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 8 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 106:
  {
   HEAP32[i6 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i6 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 28 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 109:
  {
   HEAP32[i7 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 16 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 77:
  {
   HEAP32[i8 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i8 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 4 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[i9 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i9 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(i41, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 112:
  {
   HEAP32[i10 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i10 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 8 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 114:
  {
   HEAP32[i11 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i12 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i41, i1, i2, i39, i37, i40, 31048, 31092) | 0;
   i43 = 26;
   break;
  }
 case 82:
  {
   HEAP32[i14 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i15 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i41, i1, i2, i39, i37, i40, 31092, 31112) | 0;
   i43 = 26;
   break;
  }
 case 83:
  {
   HEAP32[i16 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i16 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 84:
  {
   HEAP32[i17 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i18 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i18 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i41, i1, i2, i39, i37, i40, 31112, 31144) | 0;
   i43 = 26;
   break;
  }
 case 119:
  {
   HEAP32[i19 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i19 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 24 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 120:
  {
   i44 = HEAP32[(HEAP32[i41 >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[i20 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i21 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i20 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i21 >> 2];
   i1 = FUNCTION_TABLE_iiiiiii[i44 & 63](i41, i1, i2, i39, i37, i40) | 0;
   break;
  }
 case 88:
  {
   i44 = i41 + 8 | 0;
   i44 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i44 >> 2] | 0) + 24 >> 2] & 127](i44) | 0;
   HEAP32[i22 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i23 >> 2] = HEAP32[i36 >> 2];
   i38 = HEAP8[i44 >> 0] | 0;
   i36 = (i38 & 1) == 0;
   i43 = i44 + 4 | 0;
   i44 = i36 ? i43 : HEAP32[i44 + 8 >> 2] | 0;
   i43 = i44 + ((i36 ? (i38 & 255) >>> 1 : HEAP32[i43 >> 2] | 0) << 2) | 0;
   HEAP32[i1 >> 2] = HEAP32[i22 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i23 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i41, i1, i2, i39, i37, i40, i44, i43) | 0;
   i43 = 26;
   break;
  }
 case 121:
  {
   HEAP32[i25 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i25 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 20 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 89:
  {
   HEAP32[i26 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i26 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 20 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 37:
  {
   HEAP32[i27 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i27 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(i41, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 default:
  {
   HEAP32[i37 >> 2] = HEAP32[i37 >> 2] | 4;
   i43 = 26;
  }
 } while (0);
 if ((i43 | 0) == 26) i1 = HEAP32[i35 >> 2] | 0;
 STACKTOP = i42;
 return i1 | 0;
}

function _GLES2_SelectProgram(i16, i2, i3) {
 i16 = i16 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i4 = i19;
 i15 = i19 + 8 | 0;
 i17 = i16 + 316 | 0;
 i18 = HEAP32[i17 >> 2] | 0;
 switch (i2 | 0) {
 case 0:
  {
   i1 = 1;
   i8 = 9;
   break;
  }
 case 1:
  {
   i1 = 2;
   i8 = 9;
   break;
  }
 case 2:
  {
   i1 = 3;
   i8 = 9;
   break;
  }
 case 3:
  {
   i1 = 5;
   i8 = 9;
   break;
  }
 case 4:
  {
   i1 = 4;
   i8 = 9;
   break;
  }
 case 5:
  {
   i1 = 6;
   i8 = 9;
   break;
  }
 case 6:
  {
   i1 = 7;
   i8 = 9;
   break;
  }
 case 7:
  {
   i1 = 8;
   i8 = 9;
   break;
  }
 default:
  {}
 }
 if ((i8 | 0) == 9 ? (i10 = _GLES2_CacheShader(i16, 0, i3) | 0, (i10 | 0) != 0) : 0) {
  i5 = _GLES2_CacheShader(i16, i1, i3) | 0;
  L12 : do if (!i5) i5 = 0; else {
   i12 = i18 + 268 | 0;
   i11 = HEAP32[i12 >> 2] | 0;
   if (((i11 | 0) != 0 ? (HEAP32[i11 + 8 >> 2] | 0) == (i10 | 0) : 0) ? (HEAP32[i11 + 12 >> 2] | 0) == (i5 | 0) : 0) {
    i18 = 0;
    STACKTOP = i19;
    return i18 | 0;
   }
   i11 = HEAP32[i17 >> 2] | 0;
   i9 = i11 + 260 | 0;
   i1 = HEAP32[i9 >> 2] | 0;
   i7 = i1;
   L19 : do if (!i1) i8 = 24; else {
    i6 = i1;
    while (1) {
     if ((HEAP32[i6 + 8 >> 2] | 0) == (i10 | 0) ? (HEAP32[i6 + 12 >> 2] | 0) == (i5 | 0) : 0) break;
     i6 = HEAP32[i6 + 156 >> 2] | 0;
     if (!i6) {
      i8 = 24;
      break L19;
     }
    }
    if ((i1 | 0) == (i6 | 0)) break;
    i3 = i6 + 156 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    i2 = i6 + 152 | 0;
    if (i4) HEAP32[i4 + 152 >> 2] = HEAP32[i2 >> 2];
    i5 = HEAP32[i2 >> 2] | 0;
    if (i5) HEAP32[i5 + 156 >> 2] = i4;
    HEAP32[i2 >> 2] = 0;
    HEAP32[i3 >> 2] = i7;
    HEAP32[i1 + 152 >> 2] = i6;
    HEAP32[i9 >> 2] = i6;
    i1 = i6;
    i8 = 49;
   } while (0);
   L35 : do if ((i8 | 0) == 24) {
    i1 = _SDL_calloc(1, 160) | 0;
    do if (!i1) _SDL_Error(0) | 0; else {
     HEAP32[i1 + 8 >> 2] = i10;
     HEAP32[i1 + 12 >> 2] = i5;
     HEAP32[i1 + 4 >> 2] = i3;
     i7 = FUNCTION_TABLE_i[HEAP32[i11 + 48 >> 2] & 7]() | 0;
     HEAP32[i1 >> 2] = i7;
     i8 = i11 + 20 | 0;
     FUNCTION_TABLE_vii[HEAP32[i8 >> 2] & 127](i7, HEAP32[i10 >> 2] | 0);
     FUNCTION_TABLE_vii[HEAP32[i8 >> 2] & 127](HEAP32[i1 >> 2] | 0, HEAP32[i5 >> 2] | 0);
     i8 = i11 + 24 | 0;
     FUNCTION_TABLE_viii[HEAP32[i8 >> 2] & 31](HEAP32[i1 >> 2] | 0, 0, 46844);
     FUNCTION_TABLE_viii[HEAP32[i8 >> 2] & 31](HEAP32[i1 >> 2] | 0, 1, 46855);
     FUNCTION_TABLE_viii[HEAP32[i8 >> 2] & 31](HEAP32[i1 >> 2] | 0, 2, 46866);
     FUNCTION_TABLE_viii[HEAP32[i8 >> 2] & 31](HEAP32[i1 >> 2] | 0, 3, 46874);
     FUNCTION_TABLE_vi[HEAP32[i11 + 132 >> 2] & 511](HEAP32[i1 >> 2] | 0);
     FUNCTION_TABLE_viii[HEAP32[i11 + 116 >> 2] & 31](HEAP32[i1 >> 2] | 0, 35714, i15);
     if (!(HEAP32[i15 >> 2] | 0)) {
      FUNCTION_TABLE_vi[HEAP32[i11 + 56 >> 2] & 511](HEAP32[i1 >> 2] | 0);
      _SDL_free(i1);
      _SDL_SetError(46883, i4) | 0;
      break;
     }
     i4 = i11 + 128 | 0;
     i8 = i1 + 16 | 0;
     HEAP32[i8 >> 2] = FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 63](HEAP32[i1 >> 2] | 0, 46913) | 0;
     i20 = i1 + 36 | 0;
     HEAP32[i20 >> 2] = FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 63](HEAP32[i1 >> 2] | 0, 46926) | 0;
     i3 = i1 + 32 | 0;
     HEAP32[i3 >> 2] = FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 63](HEAP32[i1 >> 2] | 0, 46938) | 0;
     i6 = i1 + 20 | 0;
     HEAP32[i6 >> 2] = FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 63](HEAP32[i1 >> 2] | 0, 46950) | 0;
     i7 = i1 + 24 | 0;
     HEAP32[i7 >> 2] = FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 63](HEAP32[i1 >> 2] | 0, 46960) | 0;
     i2 = i1 + 28 | 0;
     HEAP32[i2 >> 2] = FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 63](HEAP32[i1 >> 2] | 0, 46973) | 0;
     i4 = i1 + 80 | 0;
     i21 = i4;
     HEAP8[i21 >> 0] = -1;
     HEAP8[i21 + 1 >> 0] = -1 >> 8;
     HEAP8[i21 + 2 >> 0] = -1 >> 16;
     HEAP8[i21 + 3 >> 0] = -1 >> 24;
     i4 = i4 + 4 | 0;
     HEAP8[i4 >> 0] = -1;
     HEAP8[i4 + 1 >> 0] = -1 >> 8;
     HEAP8[i4 + 2 >> 0] = -1 >> 16;
     HEAP8[i4 + 3 >> 0] = -1 >> 24;
     FUNCTION_TABLE_vi[HEAP32[i11 + 180 >> 2] & 511](HEAP32[i1 >> 2] | 0);
     i4 = i11 + 168 | 0;
     FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 127](HEAP32[i20 >> 2] | 0, 2);
     FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 127](HEAP32[i3 >> 2] | 0, 1);
     FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 127](HEAP32[i6 >> 2] | 0, 0);
     FUNCTION_TABLE_viiii[HEAP32[i11 + 176 >> 2] & 63](HEAP32[i8 >> 2] | 0, 1, 0, i1 + 88 | 0);
     i8 = i11 + 172 | 0;
     FUNCTION_TABLE_vidddd[HEAP32[i8 >> 2] & 3](HEAP32[i7 >> 2] | 0, 1.0, 1.0, 1.0, 1.0);
     FUNCTION_TABLE_vidddd[HEAP32[i8 >> 2] & 3](HEAP32[i2 >> 2] | 0, 1.0, 1.0, 1.0, 1.0);
     i2 = HEAP32[i9 >> 2] | 0;
     if (!i2) HEAP32[i11 + 264 >> 2] = i1; else {
      HEAP32[i1 + 156 >> 2] = i2;
      HEAP32[i2 + 152 >> 2] = i1;
     }
     HEAP32[i9 >> 2] = i1;
     i8 = i11 + 256 | 0;
     i21 = HEAP32[i8 >> 2] | 0;
     HEAP32[i8 >> 2] = i21 + 1;
     i20 = i10 + 12 | 0;
     HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
     i20 = i5 + 12 | 0;
     HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
     if ((i21 | 0) <= 7) {
      i8 = 49;
      break L35;
     }
     i7 = i11 + 264 | 0;
     i2 = HEAP32[i7 >> 2] | 0;
     i6 = HEAP32[i2 + 8 >> 2] | 0;
     i20 = i6 + 12 | 0;
     i21 = HEAP32[i20 >> 2] | 0;
     HEAP32[i20 >> 2] = i21 + -1;
     if ((i21 | 0) < 2) {
      i4 = HEAP32[i17 >> 2] | 0;
      i5 = i6 + 24 | 0;
      i3 = HEAP32[i5 >> 2] | 0;
      i2 = i6 + 20 | 0;
      if (i3) HEAP32[i3 + 20 >> 2] = HEAP32[i2 >> 2];
      i2 = HEAP32[i2 >> 2] | 0;
      if (i2) HEAP32[i2 + 24 >> 2] = i3;
      i2 = i4 + 252 | 0;
      if ((HEAP32[i2 >> 2] | 0) == (i6 | 0)) HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
      i2 = i4 + 248 | 0;
      HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
      FUNCTION_TABLE_vi[HEAP32[i4 + 60 >> 2] & 511](HEAP32[i6 >> 2] | 0);
      _SDL_free(i6);
      i2 = HEAP32[i7 >> 2] | 0;
     }
     i6 = HEAP32[i2 + 12 >> 2] | 0;
     i20 = i6 + 12 | 0;
     i21 = HEAP32[i20 >> 2] | 0;
     HEAP32[i20 >> 2] = i21 + -1;
     if ((i21 | 0) < 2) {
      i4 = HEAP32[i17 >> 2] | 0;
      i5 = i6 + 24 | 0;
      i3 = HEAP32[i5 >> 2] | 0;
      i2 = i6 + 20 | 0;
      if (i3) HEAP32[i3 + 20 >> 2] = HEAP32[i2 >> 2];
      i2 = HEAP32[i2 >> 2] | 0;
      if (i2) HEAP32[i2 + 24 >> 2] = i3;
      i2 = i4 + 252 | 0;
      if ((HEAP32[i2 >> 2] | 0) == (i6 | 0)) HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
      i2 = i4 + 248 | 0;
      HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
      FUNCTION_TABLE_vi[HEAP32[i4 + 60 >> 2] & 511](HEAP32[i6 >> 2] | 0);
      _SDL_free(i6);
      i2 = HEAP32[i7 >> 2] | 0;
     }
     FUNCTION_TABLE_vi[HEAP32[i11 + 56 >> 2] & 511](HEAP32[i2 >> 2] | 0);
     i21 = HEAP32[(HEAP32[i7 >> 2] | 0) + 152 >> 2] | 0;
     HEAP32[i7 >> 2] = i21;
     _SDL_free(HEAP32[i21 + 156 >> 2] | 0);
     HEAP32[(HEAP32[i7 >> 2] | 0) + 156 >> 2] = 0;
     HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
     i8 = 49;
     break L35;
    } while (0);
    break L12;
   } while (0);
   FUNCTION_TABLE_vi[HEAP32[i18 + 180 >> 2] & 511](HEAP32[i1 >> 2] | 0);
   HEAP32[i12 >> 2] = i1;
   i1 = HEAP32[i17 >> 2] | 0;
   i2 = HEAP32[i16 + 220 >> 2] | 0;
   if (((i2 | 0) != 0 ? (i13 = HEAP32[i16 + 224 >> 2] | 0, (i13 | 0) != 0) : 0) ? (HEAPF32[i15 >> 2] = 2.0 / +(i2 | 0), i14 = i15 + 4 | 0, HEAP32[i14 >> 2] = 0, HEAP32[i14 + 4 >> 2] = 0, HEAP32[i14 + 8 >> 2] = 0, HEAP32[i14 + 12 >> 2] = 0, i14 = (HEAP32[i16 + 304 >> 2] | 0) == 0, HEAPF32[i15 + 20 >> 2] = (i14 ? -2.0 : 2.0) / +(i13 | 0), i21 = i15 + 24 | 0, HEAP32[i21 >> 2] = 0, HEAP32[i21 + 4 >> 2] = 0, HEAP32[i21 + 8 >> 2] = 0, HEAP32[i21 + 12 >> 2] = 0, HEAP32[i21 + 16 >> 2] = 0, HEAP32[i21 + 20 >> 2] = 0, HEAPF32[i15 + 48 >> 2] = -1.0, HEAPF32[i15 + 52 >> 2] = i14 ? 1.0 : -1.0, HEAPF32[i15 + 56 >> 2] = 0.0, HEAPF32[i15 + 60 >> 2] = 1.0, i14 = i1 + 268 | 0, (_SDL_memcmp((HEAP32[i14 >> 2] | 0) + 88 | 0, i15, 64) | 0) != 0) : 0) {
    FUNCTION_TABLE_viiii[HEAP32[i1 + 176 >> 2] & 63](HEAP32[(HEAP32[i14 >> 2] | 0) + 16 >> 2] | 0, 1, 0, i15);
    _SDL_memcpy((HEAP32[i14 >> 2] | 0) + 88 | 0, i15, 64) | 0;
   }
   i21 = 0;
   STACKTOP = i19;
   return i21 | 0;
  } while (0);
  if ((HEAP32[i10 + 12 >> 2] | 0) < 1) {
   i3 = HEAP32[i17 >> 2] | 0;
   i4 = i10 + 24 | 0;
   i2 = HEAP32[i4 >> 2] | 0;
   i1 = i10 + 20 | 0;
   if (i2) HEAP32[i2 + 20 >> 2] = HEAP32[i1 >> 2];
   i1 = HEAP32[i1 >> 2] | 0;
   if (i1) HEAP32[i1 + 24 >> 2] = i2;
   i1 = i3 + 252 | 0;
   if ((HEAP32[i1 >> 2] | 0) == (i10 | 0)) HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
   i21 = i3 + 248 | 0;
   HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + -1;
   FUNCTION_TABLE_vi[HEAP32[i3 + 60 >> 2] & 511](HEAP32[i10 >> 2] | 0);
   _SDL_free(i10);
  }
  if ((i5 | 0) != 0 ? (HEAP32[i5 + 12 >> 2] | 0) < 1 : 0) {
   i3 = HEAP32[i17 >> 2] | 0;
   i4 = i5 + 24 | 0;
   i2 = HEAP32[i4 >> 2] | 0;
   i1 = i5 + 20 | 0;
   if (i2) HEAP32[i2 + 20 >> 2] = HEAP32[i1 >> 2];
   i1 = HEAP32[i1 >> 2] | 0;
   if (i1) HEAP32[i1 + 24 >> 2] = i2;
   i1 = i3 + 252 | 0;
   if ((HEAP32[i1 >> 2] | 0) == (i5 | 0)) HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
   i21 = i3 + 248 | 0;
   HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + -1;
   FUNCTION_TABLE_vi[HEAP32[i3 + 60 >> 2] & 511](HEAP32[i5 >> 2] | 0);
   _SDL_free(i5);
  }
 }
 HEAP32[i18 + 268 >> 2] = 0;
 i21 = -1;
 STACKTOP = i19;
 return i21 | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc(i41, i35, i36, i39, i37, i40, i38, i1) {
 i41 = i41 | 0;
 i35 = i35 | 0;
 i36 = i36 | 0;
 i39 = i39 | 0;
 i37 = i37 | 0;
 i40 = i40 | 0;
 i38 = i38 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i42 = 0, i43 = 0, i44 = 0;
 i42 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i2 = i42 + 132 | 0;
 i1 = i42 + 116 | 0;
 i28 = i42 + 128 | 0;
 i13 = i42 + 124 | 0;
 i24 = i42 + 120 | 0;
 i29 = i42 + 112 | 0;
 i30 = i42 + 108 | 0;
 i31 = i42 + 104 | 0;
 i32 = i42 + 100 | 0;
 i33 = i42 + 96 | 0;
 i34 = i42 + 92 | 0;
 i3 = i42 + 88 | 0;
 i4 = i42 + 84 | 0;
 i5 = i42 + 80 | 0;
 i6 = i42 + 76 | 0;
 i7 = i42 + 72 | 0;
 i8 = i42 + 68 | 0;
 i9 = i42 + 64 | 0;
 i10 = i42 + 60 | 0;
 i11 = i42 + 56 | 0;
 i12 = i42 + 52 | 0;
 i14 = i42 + 48 | 0;
 i15 = i42 + 44 | 0;
 i16 = i42 + 40 | 0;
 i17 = i42 + 36 | 0;
 i18 = i42 + 32 | 0;
 i19 = i42 + 28 | 0;
 i20 = i42 + 24 | 0;
 i21 = i42 + 20 | 0;
 i22 = i42 + 16 | 0;
 i23 = i42 + 12 | 0;
 i25 = i42 + 8 | 0;
 i26 = i42 + 4 | 0;
 i27 = i42;
 HEAP32[i37 >> 2] = 0;
 i44 = __ZNKSt3__18ios_base6getlocEv(i39) | 0;
 HEAP32[i28 >> 2] = i44;
 i28 = __ZNKSt3__16locale9use_facetERNS0_2idE(i28, 30384) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i44) | 0;
 do switch (i38 << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[i13 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i13 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 24 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[i24 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i24 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 16 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 99:
  {
   i43 = i41 + 8 | 0;
   i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i43 >> 2] | 0) + 12 >> 2] & 127](i43) | 0;
   HEAP32[i29 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i30 >> 2] = HEAP32[i36 >> 2];
   i38 = HEAP8[i43 >> 0] | 0;
   i36 = (i38 & 1) == 0;
   i44 = i36 ? i43 + 1 | 0 : HEAP32[i43 + 8 >> 2] | 0;
   i43 = i44 + (i36 ? (i38 & 255) >>> 1 : HEAP32[i43 + 4 >> 2] | 0) | 0;
   HEAP32[i1 >> 2] = HEAP32[i29 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i30 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i41, i1, i2, i39, i37, i40, i44, i43) | 0;
   i43 = 26;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[i31 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i31 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 12 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 68:
  {
   HEAP32[i32 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i33 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i32 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i33 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i41, i1, i2, i39, i37, i40, 62986, 62994) | 0;
   i43 = 26;
   break;
  }
 case 70:
  {
   HEAP32[i34 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i3 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i34 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i41, i1, i2, i39, i37, i40, 62994, 63002) | 0;
   i43 = 26;
   break;
  }
 case 72:
  {
   HEAP32[i4 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 8 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 73:
  {
   HEAP32[i5 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 8 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 106:
  {
   HEAP32[i6 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i6 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 28 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 109:
  {
   HEAP32[i7 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 16 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 77:
  {
   HEAP32[i8 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i8 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 4 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[i9 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i9 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(i41, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 112:
  {
   HEAP32[i10 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i10 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 8 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 114:
  {
   HEAP32[i11 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i12 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i41, i1, i2, i39, i37, i40, 63002, 63013) | 0;
   i43 = 26;
   break;
  }
 case 82:
  {
   HEAP32[i14 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i15 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i41, i1, i2, i39, i37, i40, 63013, 63018) | 0;
   i43 = 26;
   break;
  }
 case 83:
  {
   HEAP32[i16 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i16 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 84:
  {
   HEAP32[i17 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i18 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i18 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i41, i1, i2, i39, i37, i40, 63018, 63026) | 0;
   i43 = 26;
   break;
  }
 case 119:
  {
   HEAP32[i19 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i19 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 24 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 120:
  {
   i44 = HEAP32[(HEAP32[i41 >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[i20 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i21 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i20 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i21 >> 2];
   i1 = FUNCTION_TABLE_iiiiiii[i44 & 63](i41, i1, i2, i39, i37, i40) | 0;
   break;
  }
 case 88:
  {
   i43 = i41 + 8 | 0;
   i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i43 >> 2] | 0) + 24 >> 2] & 127](i43) | 0;
   HEAP32[i22 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i23 >> 2] = HEAP32[i36 >> 2];
   i38 = HEAP8[i43 >> 0] | 0;
   i36 = (i38 & 1) == 0;
   i44 = i36 ? i43 + 1 | 0 : HEAP32[i43 + 8 >> 2] | 0;
   i43 = i44 + (i36 ? (i38 & 255) >>> 1 : HEAP32[i43 + 4 >> 2] | 0) | 0;
   HEAP32[i1 >> 2] = HEAP32[i22 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i23 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i41, i1, i2, i39, i37, i40, i44, i43) | 0;
   i43 = 26;
   break;
  }
 case 121:
  {
   HEAP32[i25 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i25 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 20 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 89:
  {
   HEAP32[i26 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i26 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 20 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 37:
  {
   HEAP32[i27 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i27 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(i41, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 default:
  {
   HEAP32[i37 >> 2] = HEAP32[i37 >> 2] | 4;
   i43 = 26;
  }
 } while (0);
 if ((i43 | 0) == 26) i1 = HEAP32[i35 >> 2] | 0;
 STACKTOP = i42;
 return i1 | 0;
}

function _SDL_ConvertSurface(i35, i6, i33) {
 i35 = i35 | 0;
 i6 = i6 | 0;
 i33 = i33 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i34 = 0, i36 = 0;
 i36 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i31 = i36 + 24 | 0;
 i18 = i36 + 16 | 0;
 i17 = i36 + 8 | 0;
 i5 = i36;
 i34 = i36 + 48 | 0;
 i10 = i36 + 32 | 0;
 i16 = i36 + 67 | 0;
 i15 = i36 + 66 | 0;
 i14 = i36 + 65 | 0;
 i13 = i36 + 64 | 0;
 i11 = i6 + 4 | 0;
 i2 = HEAP32[i11 >> 2] | 0;
 if (i2) {
  i4 = HEAP32[i2 >> 2] | 0;
  L3 : do if ((i4 | 0) > 0) {
   i3 = HEAP32[i2 + 4 >> 2] | 0;
   i2 = 0;
   do {
    if ((HEAP8[i3 + (i2 << 2) >> 0] | 0) != -1) break L3;
    if ((HEAP8[i3 + (i2 << 2) + 1 >> 0] | 0) != -1) break L3;
    if ((HEAP8[i3 + (i2 << 2) + 2 >> 0] | 0) != -1) break L3;
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) < (i4 | 0));
  } else i2 = 0; while (0);
  if ((i2 | 0) == (i4 | 0)) {
   _SDL_SetError(40978, i5) | 0;
   i35 = 0;
   STACKTOP = i36;
   return i35 | 0;
  }
 }
 i3 = i35 + 8 | 0;
 i4 = i35 + 12 | 0;
 i29 = i6 + 24 | 0;
 i30 = _SDL_CreateRGBSurface(0, HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0, HEAPU8[i6 + 8 >> 0] | 0, HEAP32[i6 + 12 >> 2] | 0, HEAP32[i6 + 16 >> 2] | 0, HEAP32[i6 + 20 >> 2] | 0, HEAP32[i29 >> 2] | 0) | 0;
 if (!i30) {
  i35 = 0;
  STACKTOP = i36;
  return i35 | 0;
 }
 i2 = HEAP32[i11 >> 2] | 0;
 if ((i2 | 0) != 0 ? (i7 = i30 + 4 | 0, i8 = HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0, (i8 | 0) != 0) : 0) {
  _SDL_memcpy(HEAP32[i8 + 4 >> 2] | 0, HEAP32[i2 + 4 >> 2] | 0, HEAP32[i2 >> 2] << 2) | 0;
  HEAP32[HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] >> 2] = HEAP32[HEAP32[i11 >> 2] >> 2];
 }
 i9 = i35 + 52 | 0;
 i2 = HEAP32[i9 >> 2] | 0;
 i23 = i2 + 68 | 0;
 i24 = HEAP32[i23 >> 2] | 0;
 i22 = i2 + 76 | 0;
 i5 = HEAP8[i22 >> 0] | 0;
 i6 = HEAP8[i2 + 77 >> 0] | 0;
 i7 = HEAP8[i2 + 78 >> 0] | 0;
 i8 = HEAP8[i2 + 79 >> 0] | 0;
 HEAP8[i22 >> 0] = -1;
 HEAP8[i22 + 1 >> 0] = -1 >> 8;
 HEAP8[i22 + 2 >> 0] = -1 >> 16;
 HEAP8[i22 + 3 >> 0] = -1 >> 24;
 HEAP32[i23 >> 2] = 0;
 _SDL_InvalidateMap(i2);
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i10 + 12 >> 2] = HEAP32[i4 >> 2];
 i2 = HEAP32[i9 >> 2] | 0;
 do if ((HEAP32[i2 >> 2] | 0) == (i30 | 0)) {
  i23 = HEAP32[(HEAP32[i30 + 4 >> 2] | 0) + 4 >> 2] | 0;
  if ((i23 | 0) != 0 ? (HEAP32[i2 + 80 >> 2] | 0) != (HEAP32[i23 + 8 >> 2] | 0) : 0) {
   i23 = 19;
   break;
  }
  i23 = HEAP32[(HEAP32[i35 + 4 >> 2] | 0) + 4 >> 2] | 0;
  if ((i23 | 0) != 0 ? (HEAP32[i2 + 84 >> 2] | 0) != (HEAP32[i23 + 8 >> 2] | 0) : 0) i23 = 19; else i23 = 21;
 } else i23 = 19; while (0);
 if ((i23 | 0) == 19 ? (_SDL_MapSurface(i35, i30) | 0) >= 0 : 0) {
  i2 = HEAP32[i9 >> 2] | 0;
  i23 = 21;
 }
 if ((i23 | 0) == 21) FUNCTION_TABLE_iiiii[HEAP32[i2 + 8 >> 2] & 31](i35, i10, i30, i10) | 0;
 i22 = i30 + 52 | 0;
 i19 = HEAP32[i22 >> 2] | 0;
 HEAP8[i19 + 76 >> 0] = i5;
 HEAP8[i19 + 77 >> 0] = i6;
 HEAP8[i19 + 78 >> 0] = i7;
 HEAP8[i19 + 79 >> 0] = i8;
 HEAP32[i19 + 68 >> 2] = i24 & -28945;
 i19 = HEAP32[i9 >> 2] | 0;
 HEAP8[i19 + 76 >> 0] = i5;
 HEAP8[i19 + 77 >> 0] = i6;
 HEAP8[i19 + 78 >> 0] = i7;
 HEAP8[i19 + 79 >> 0] = i8;
 HEAP32[i19 + 68 >> 2] = i24;
 _SDL_InvalidateMap(i19);
 i19 = i35 + 4 | 0;
 do if (i24 & 256) {
  i2 = HEAP32[i19 >> 2] | 0;
  i3 = HEAP32[i2 + 4 >> 2] | 0;
  if (i3) {
   i2 = HEAP32[i11 >> 2] | 0;
   if (((i2 | 0) != 0 ? (i12 = HEAP32[i3 >> 2] | 0, (i12 | 0) <= (HEAP32[i2 >> 2] | 0)) : 0) ? (_SDL_memcmp(HEAP32[i3 + 4 >> 2] | 0, HEAP32[i2 + 4 >> 2] | 0, i12 << 2) | 0) == 0 : 0) {
    i4 = HEAP32[(HEAP32[i9 >> 2] | 0) + 72 >> 2] | 0;
    i5 = HEAP32[(HEAP32[i30 + 4 >> 2] | 0) + 4 >> 2] | 0;
    i6 = (i5 | 0) == 0;
    if (!i6 ? (HEAP32[i5 >> 2] | 0) >>> 0 <= i4 >>> 0 : 0) {
     HEAP32[i17 >> 2] = 40854;
     _SDL_SetError(41366, i17) | 0;
     break;
    }
    i1 = HEAP32[i22 >> 2] | 0;
    i31 = i1 + 68 | 0;
    i2 = HEAP32[i31 >> 2] | 0;
    i3 = i2 | 256;
    HEAP32[i31 >> 2] = i3;
    HEAP32[i1 + 72 >> 2] = i4;
    if (!i6) {
     HEAP8[(HEAP32[i5 + 4 >> 2] | 0) + (i4 << 2) + 3 >> 0] = 0;
     i31 = i5 + 8 | 0;
     i28 = (HEAP32[i31 >> 2] | 0) + 1 | 0;
     HEAP32[i31 >> 2] = (i28 | 0) == 0 ? 1 : i28;
    }
    if ((i3 | 0) == (i2 | 0)) break;
    _SDL_InvalidateMap(i1);
    break;
   }
   if (HEAP32[i29 >> 2] | 0) break;
   i2 = HEAP32[i19 >> 2] | 0;
  }
  _SDL_GetRGBA(HEAP32[(HEAP32[i9 >> 2] | 0) + 72 >> 2] | 0, i2, i16, i15, i14, i13);
  i11 = i30 + 4 | 0;
  i5 = _SDL_MapRGBA(HEAP32[i11 >> 2] | 0, HEAP8[i16 >> 0] | 0, HEAP8[i15 >> 0] | 0, HEAP8[i14 >> 0] | 0, HEAP8[i13 >> 0] | 0) | 0;
  i6 = HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0;
  i7 = (i6 | 0) == 0;
  if (!i7 ? (HEAP32[i6 >> 2] | 0) >>> 0 <= i5 >>> 0 : 0) {
   HEAP32[i18 >> 2] = 40854;
   _SDL_SetError(41366, i18) | 0;
  } else {
   i2 = HEAP32[i22 >> 2] | 0;
   i18 = i2 + 68 | 0;
   i3 = HEAP32[i18 >> 2] | 0;
   i4 = i3 | 256;
   HEAP32[i18 >> 2] = i4;
   HEAP32[i2 + 72 >> 2] = i5;
   if (!i7) {
    HEAP8[(HEAP32[i6 + 4 >> 2] | 0) + (i5 << 2) + 3 >> 0] = 0;
    i18 = i6 + 8 | 0;
    i17 = (HEAP32[i18 >> 2] | 0) + 1 | 0;
    HEAP32[i18 >> 2] = (i17 | 0) == 0 ? 1 : i17;
   }
   if ((i4 | 0) != (i3 | 0)) _SDL_InvalidateMap(i2);
  }
  if ((HEAP32[(HEAP32[i22 >> 2] | 0) + 68 >> 2] & 256 | 0) != 0 ? (i1 = HEAP32[i11 >> 2] | 0, (HEAP32[i1 + 24 >> 2] | 0) != 0) : 0) {
   i10 = i30 + 28 | 0;
   i2 = HEAP32[i10 >> 2] | 0;
   if (!i2) if (!(HEAP32[i30 >> 2] & 2)) i2 = 0; else {
    _SDL_UnRLESurface(i30, 1);
    HEAP32[i30 >> 2] = HEAP32[i30 >> 2] | 2;
    i2 = HEAP32[i10 >> 2] | 0;
    i1 = HEAP32[i11 >> 2] | 0;
   }
   i2 = i2 + 1 | 0;
   HEAP32[i10 >> 2] = i2;
   switch (HEAPU8[i1 + 9 >> 0] | 0) {
   case 2:
    {
     i7 = HEAP32[i1 + 24 >> 2] & 65535 ^ 65535;
     i8 = i7 & HEAP32[(HEAP32[i22 >> 2] | 0) + 72 >> 2];
     i4 = HEAP32[i30 + 20 >> 2] | 0;
     i3 = HEAP32[i30 + 12 >> 2] | 0;
     if ((i3 | 0) != 0 ? (i20 = HEAP32[i30 + 8 >> 2] | 0, i21 = (HEAP32[i30 + 16 >> 2] | 0) / 2 | 0, (i20 | 0) != 0) : 0) {
      i9 = i8 & 65535;
      while (1) {
       i5 = i20;
       i6 = i4;
       while (1) {
        i5 = i5 + -1 | 0;
        if ((HEAPU16[i6 >> 1] & i7 | 0) == (i8 | 0)) HEAP16[i6 >> 1] = i9;
        if (!i5) break; else i6 = i6 + 2 | 0;
       }
       i3 = i3 + -1 | 0;
       if (!i3) break; else i4 = i4 + (i21 << 1) | 0;
      }
     }
     break;
    }
   case 4:
    {
     i8 = ~HEAP32[i1 + 24 >> 2];
     i9 = HEAP32[(HEAP32[i22 >> 2] | 0) + 72 >> 2] & i8;
     i3 = HEAP32[i30 + 12 >> 2] | 0;
     if (i3) {
      i6 = i30 + 8 | 0;
      i7 = i30 + 16 | 0;
      i5 = HEAP32[i30 + 20 >> 2] | 0;
      while (1) {
       i3 = i3 + -1 | 0;
       i2 = HEAP32[i6 >> 2] | 0;
       if (i2) {
        i4 = i5;
        while (1) {
         i2 = i2 + -1 | 0;
         if ((HEAP32[i4 >> 2] & i8 | 0) == (i9 | 0)) HEAP32[i4 >> 2] = i9;
         if (!i2) break; else i4 = i4 + 4 | 0;
        }
       }
       if (!i3) break; else i5 = i5 + (((HEAP32[i7 >> 2] | 0) / 4 | 0) << 2) | 0;
      }
      i2 = HEAP32[i10 >> 2] | 0;
     }
     break;
    }
   default:
    {}
   }
   if (((i2 | 0) != 0 ? (HEAP32[i10 >> 2] = i2 + -1, (i2 | 0) <= 1) : 0) ? (i25 = HEAP32[i30 >> 2] | 0, (i25 & 2 | 0) != 0) : 0) {
    HEAP32[i30 >> 2] = i25 & -3;
    _SDL_RLESurface(i30) | 0;
    i1 = HEAP32[i11 >> 2] | 0;
   }
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   do if (i1) if (!(HEAP32[i1 >> 2] | 0)) {
    HEAP32[i31 >> 2] = 40854;
    _SDL_SetError(41366, i31) | 0;
    break;
   } else {
    i28 = HEAP32[i22 >> 2] | 0;
    i27 = i28 + 68 | 0;
    i26 = HEAP32[i27 >> 2] | 0;
    HEAP8[(HEAP32[i1 + 4 >> 2] | 0) + (HEAP32[i28 + 72 >> 2] << 2) + 3 >> 0] = -1;
    i23 = i1 + 8 | 0;
    i31 = (HEAP32[i23 >> 2] | 0) + 1 | 0;
    HEAP32[i23 >> 2] = (i31 | 0) == 0 ? 1 : i31;
    i23 = 74;
    break;
   } else {
    i28 = HEAP32[i22 >> 2] | 0;
    i27 = i28 + 68 | 0;
    i26 = HEAP32[i27 >> 2] | 0;
    i23 = 74;
   } while (0);
   if ((i23 | 0) == 74 ? (i31 = i26 & -257, HEAP32[i27 >> 2] = i31, (i31 | 0) != (i26 | 0)) : 0) _SDL_InvalidateMap(i28);
   i1 = HEAP32[i22 >> 2] | 0;
   i27 = i1 + 68 | 0;
   i31 = HEAP32[i27 >> 2] | 0;
   i28 = i31 & -113 | 16;
   HEAP32[i27 >> 2] = i28;
   if ((i28 | 0) != (i31 | 0)) _SDL_InvalidateMap(i1);
  }
 } while (0);
 HEAP32[i34 >> 2] = 0;
 HEAP32[i34 + 4 >> 2] = 0;
 HEAP32[i34 + 8 >> 2] = HEAP32[i30 + 8 >> 2];
 HEAP32[i34 + 12 >> 2] = HEAP32[i30 + 12 >> 2];
 _SDL_IntersectRect(i35 + 36 | 0, i34, i30 + 36 | 0) | 0;
 if (!(HEAP32[(HEAP32[i19 >> 2] | 0) + 24 >> 2] | 0)) {
  if (i24 & 258) i23 = 81;
 } else if (HEAP32[i29 >> 2] | i24 & 258) i23 = 81;
 if ((i23 | 0) == 81 ? (i32 = HEAP32[i22 >> 2] | 0, i31 = i32 + 68 | 0, i35 = HEAP32[i31 >> 2] | 0, i34 = i35 & -113 | 16, HEAP32[i31 >> 2] = i34, (i34 | 0) != (i35 | 0)) : 0) _SDL_InvalidateMap(i32);
 if (!(i24 & 4096 | i33 & 2)) {
  i35 = i30;
  STACKTOP = i36;
  return i35 | 0;
 }
 i1 = HEAP32[i22 >> 2] | 0;
 i33 = i1 + 68 | 0;
 i35 = HEAP32[i33 >> 2] | 0;
 i34 = i35 | 4096;
 HEAP32[i33 >> 2] = i34;
 if ((i34 | 0) == (i35 | 0)) {
  i35 = i30;
  STACKTOP = i36;
  return i35 | 0;
 }
 _SDL_InvalidateMap(i1);
 i35 = i30;
 STACKTOP = i36;
 return i35 | 0;
}

function _dispose_chunk(i14, i15) {
 i14 = i14 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i16 = i14 + i15 | 0;
 i1 = HEAP32[i14 + 4 >> 2] | 0;
 do if (!(i1 & 1)) {
  i8 = HEAP32[i14 >> 2] | 0;
  if (!(i1 & 3)) return;
  i11 = i14 + (0 - i8) | 0;
  i10 = i8 + i15 | 0;
  i7 = HEAP32[6687] | 0;
  if (i11 >>> 0 < i7 >>> 0) _abort();
  if ((i11 | 0) == (HEAP32[6688] | 0)) {
   i2 = i14 + (i15 + 4) | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if ((i1 & 3 | 0) != 3) {
    i19 = i11;
    i5 = i10;
    break;
   }
   HEAP32[6685] = i10;
   HEAP32[i2 >> 2] = i1 & -2;
   HEAP32[i14 + (4 - i8) >> 2] = i10 | 1;
   HEAP32[i16 >> 2] = i10;
   return;
  }
  i4 = i8 >>> 3;
  if (i8 >>> 0 < 256) {
   i3 = HEAP32[i14 + (8 - i8) >> 2] | 0;
   i2 = HEAP32[i14 + (12 - i8) >> 2] | 0;
   i1 = 26772 + (i4 << 1 << 2) | 0;
   if ((i3 | 0) != (i1 | 0)) {
    if (i3 >>> 0 < i7 >>> 0) _abort();
    if ((HEAP32[i3 + 12 >> 2] | 0) != (i11 | 0)) _abort();
   }
   if ((i2 | 0) == (i3 | 0)) {
    HEAP32[6683] = HEAP32[6683] & ~(1 << i4);
    i19 = i11;
    i5 = i10;
    break;
   }
   if ((i2 | 0) != (i1 | 0)) {
    if (i2 >>> 0 < i7 >>> 0) _abort();
    i1 = i2 + 8 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i11 | 0)) i6 = i1; else _abort();
   } else i6 = i2 + 8 | 0;
   HEAP32[i3 + 12 >> 2] = i2;
   HEAP32[i6 >> 2] = i3;
   i19 = i11;
   i5 = i10;
   break;
  }
  i6 = HEAP32[i14 + (24 - i8) >> 2] | 0;
  i3 = HEAP32[i14 + (12 - i8) >> 2] | 0;
  do if ((i3 | 0) == (i11 | 0)) {
   i3 = 16 - i8 | 0;
   i2 = i14 + (i3 + 4) | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    i2 = i14 + i3 | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i9 = 0;
     break;
    }
   }
   while (1) {
    i3 = i1 + 20 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (i4) {
     i1 = i4;
     i2 = i3;
     continue;
    }
    i3 = i1 + 16 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (!i4) break; else {
     i1 = i4;
     i2 = i3;
    }
   }
   if (i2 >>> 0 < i7 >>> 0) _abort(); else {
    HEAP32[i2 >> 2] = 0;
    i9 = i1;
    break;
   }
  } else {
   i4 = HEAP32[i14 + (8 - i8) >> 2] | 0;
   if (i4 >>> 0 < i7 >>> 0) _abort();
   i1 = i4 + 12 | 0;
   if ((HEAP32[i1 >> 2] | 0) != (i11 | 0)) _abort();
   i2 = i3 + 8 | 0;
   if ((HEAP32[i2 >> 2] | 0) == (i11 | 0)) {
    HEAP32[i1 >> 2] = i3;
    HEAP32[i2 >> 2] = i4;
    i9 = i3;
    break;
   } else _abort();
  } while (0);
  if (i6) {
   i1 = HEAP32[i14 + (28 - i8) >> 2] | 0;
   i2 = 27036 + (i1 << 2) | 0;
   if ((i11 | 0) == (HEAP32[i2 >> 2] | 0)) {
    HEAP32[i2 >> 2] = i9;
    if (!i9) {
     HEAP32[6684] = HEAP32[6684] & ~(1 << i1);
     i19 = i11;
     i5 = i10;
     break;
    }
   } else {
    if (i6 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort();
    i1 = i6 + 16 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i11 | 0)) HEAP32[i1 >> 2] = i9; else HEAP32[i6 + 20 >> 2] = i9;
    if (!i9) {
     i19 = i11;
     i5 = i10;
     break;
    }
   }
   i3 = HEAP32[6687] | 0;
   if (i9 >>> 0 < i3 >>> 0) _abort();
   HEAP32[i9 + 24 >> 2] = i6;
   i1 = 16 - i8 | 0;
   i2 = HEAP32[i14 + i1 >> 2] | 0;
   do if (i2) if (i2 >>> 0 < i3 >>> 0) _abort(); else {
    HEAP32[i9 + 16 >> 2] = i2;
    HEAP32[i2 + 24 >> 2] = i9;
    break;
   } while (0);
   i1 = HEAP32[i14 + (i1 + 4) >> 2] | 0;
   if (i1) if (i1 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort(); else {
    HEAP32[i9 + 20 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i9;
    i19 = i11;
    i5 = i10;
    break;
   } else {
    i19 = i11;
    i5 = i10;
   }
  } else {
   i19 = i11;
   i5 = i10;
  }
 } else {
  i19 = i14;
  i5 = i15;
 } while (0);
 i7 = HEAP32[6687] | 0;
 if (i16 >>> 0 < i7 >>> 0) _abort();
 i1 = i14 + (i15 + 4) | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!(i2 & 2)) {
  if ((i16 | 0) == (HEAP32[6689] | 0)) {
   i18 = (HEAP32[6686] | 0) + i5 | 0;
   HEAP32[6686] = i18;
   HEAP32[6689] = i19;
   HEAP32[i19 + 4 >> 2] = i18 | 1;
   if ((i19 | 0) != (HEAP32[6688] | 0)) return;
   HEAP32[6688] = 0;
   HEAP32[6685] = 0;
   return;
  }
  if ((i16 | 0) == (HEAP32[6688] | 0)) {
   i18 = (HEAP32[6685] | 0) + i5 | 0;
   HEAP32[6685] = i18;
   HEAP32[6688] = i19;
   HEAP32[i19 + 4 >> 2] = i18 | 1;
   HEAP32[i19 + i18 >> 2] = i18;
   return;
  }
  i5 = (i2 & -8) + i5 | 0;
  i4 = i2 >>> 3;
  do if (i2 >>> 0 >= 256) {
   i6 = HEAP32[i14 + (i15 + 24) >> 2] | 0;
   i3 = HEAP32[i14 + (i15 + 12) >> 2] | 0;
   do if ((i3 | 0) == (i16 | 0)) {
    i2 = i14 + (i15 + 20) | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i2 = i14 + (i15 + 16) | 0;
     i1 = HEAP32[i2 >> 2] | 0;
     if (!i1) {
      i13 = 0;
      break;
     }
    }
    while (1) {
     i3 = i1 + 20 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if (i4) {
      i1 = i4;
      i2 = i3;
      continue;
     }
     i3 = i1 + 16 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if (!i4) break; else {
      i1 = i4;
      i2 = i3;
     }
    }
    if (i2 >>> 0 < i7 >>> 0) _abort(); else {
     HEAP32[i2 >> 2] = 0;
     i13 = i1;
     break;
    }
   } else {
    i4 = HEAP32[i14 + (i15 + 8) >> 2] | 0;
    if (i4 >>> 0 < i7 >>> 0) _abort();
    i1 = i4 + 12 | 0;
    if ((HEAP32[i1 >> 2] | 0) != (i16 | 0)) _abort();
    i2 = i3 + 8 | 0;
    if ((HEAP32[i2 >> 2] | 0) == (i16 | 0)) {
     HEAP32[i1 >> 2] = i3;
     HEAP32[i2 >> 2] = i4;
     i13 = i3;
     break;
    } else _abort();
   } while (0);
   if (i6) {
    i1 = HEAP32[i14 + (i15 + 28) >> 2] | 0;
    i2 = 27036 + (i1 << 2) | 0;
    if ((i16 | 0) == (HEAP32[i2 >> 2] | 0)) {
     HEAP32[i2 >> 2] = i13;
     if (!i13) {
      HEAP32[6684] = HEAP32[6684] & ~(1 << i1);
      break;
     }
    } else {
     if (i6 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort();
     i1 = i6 + 16 | 0;
     if ((HEAP32[i1 >> 2] | 0) == (i16 | 0)) HEAP32[i1 >> 2] = i13; else HEAP32[i6 + 20 >> 2] = i13;
     if (!i13) break;
    }
    i2 = HEAP32[6687] | 0;
    if (i13 >>> 0 < i2 >>> 0) _abort();
    HEAP32[i13 + 24 >> 2] = i6;
    i1 = HEAP32[i14 + (i15 + 16) >> 2] | 0;
    do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
     HEAP32[i13 + 16 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i13;
     break;
    } while (0);
    i1 = HEAP32[i14 + (i15 + 20) >> 2] | 0;
    if (i1) if (i1 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort(); else {
     HEAP32[i13 + 20 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i13;
     break;
    }
   }
  } else {
   i3 = HEAP32[i14 + (i15 + 8) >> 2] | 0;
   i2 = HEAP32[i14 + (i15 + 12) >> 2] | 0;
   i1 = 26772 + (i4 << 1 << 2) | 0;
   if ((i3 | 0) != (i1 | 0)) {
    if (i3 >>> 0 < i7 >>> 0) _abort();
    if ((HEAP32[i3 + 12 >> 2] | 0) != (i16 | 0)) _abort();
   }
   if ((i2 | 0) == (i3 | 0)) {
    HEAP32[6683] = HEAP32[6683] & ~(1 << i4);
    break;
   }
   if ((i2 | 0) != (i1 | 0)) {
    if (i2 >>> 0 < i7 >>> 0) _abort();
    i1 = i2 + 8 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i16 | 0)) i12 = i1; else _abort();
   } else i12 = i2 + 8 | 0;
   HEAP32[i3 + 12 >> 2] = i2;
   HEAP32[i12 >> 2] = i3;
  } while (0);
  HEAP32[i19 + 4 >> 2] = i5 | 1;
  HEAP32[i19 + i5 >> 2] = i5;
  if ((i19 | 0) == (HEAP32[6688] | 0)) {
   HEAP32[6685] = i5;
   return;
  }
 } else {
  HEAP32[i1 >> 2] = i2 & -2;
  HEAP32[i19 + 4 >> 2] = i5 | 1;
  HEAP32[i19 + i5 >> 2] = i5;
 }
 i1 = i5 >>> 3;
 if (i5 >>> 0 < 256) {
  i2 = i1 << 1;
  i4 = 26772 + (i2 << 2) | 0;
  i3 = HEAP32[6683] | 0;
  i1 = 1 << i1;
  if (i3 & i1) {
   i1 = 26772 + (i2 + 2 << 2) | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort(); else {
    i17 = i1;
    i18 = i2;
   }
  } else {
   HEAP32[6683] = i3 | i1;
   i17 = 26772 + (i2 + 2 << 2) | 0;
   i18 = i4;
  }
  HEAP32[i17 >> 2] = i19;
  HEAP32[i18 + 12 >> 2] = i19;
  HEAP32[i19 + 8 >> 2] = i18;
  HEAP32[i19 + 12 >> 2] = i4;
  return;
 }
 i1 = i5 >>> 8;
 if (i1) if (i5 >>> 0 > 16777215) i4 = 31; else {
  i17 = (i1 + 1048320 | 0) >>> 16 & 8;
  i18 = i1 << i17;
  i16 = (i18 + 520192 | 0) >>> 16 & 4;
  i18 = i18 << i16;
  i4 = (i18 + 245760 | 0) >>> 16 & 2;
  i4 = 14 - (i16 | i17 | i4) + (i18 << i4 >>> 15) | 0;
  i4 = i5 >>> (i4 + 7 | 0) & 1 | i4 << 1;
 } else i4 = 0;
 i1 = 27036 + (i4 << 2) | 0;
 HEAP32[i19 + 28 >> 2] = i4;
 HEAP32[i19 + 20 >> 2] = 0;
 HEAP32[i19 + 16 >> 2] = 0;
 i2 = HEAP32[6684] | 0;
 i3 = 1 << i4;
 if (!(i2 & i3)) {
  HEAP32[6684] = i2 | i3;
  HEAP32[i1 >> 2] = i19;
  HEAP32[i19 + 24 >> 2] = i1;
  HEAP32[i19 + 12 >> 2] = i19;
  HEAP32[i19 + 8 >> 2] = i19;
  return;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 L191 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i5 | 0)) {
  i4 = i5 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
  while (1) {
   i2 = i1 + 16 + (i4 >>> 31 << 2) | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if (!i3) break;
   if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i5 | 0)) {
    i1 = i3;
    break L191;
   } else {
    i4 = i4 << 1;
    i1 = i3;
   }
  }
  if (i2 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort();
  HEAP32[i2 >> 2] = i19;
  HEAP32[i19 + 24 >> 2] = i1;
  HEAP32[i19 + 12 >> 2] = i19;
  HEAP32[i19 + 8 >> 2] = i19;
  return;
 } while (0);
 i2 = i1 + 8 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i18 = HEAP32[6687] | 0;
 if (!(i3 >>> 0 >= i18 >>> 0 & i1 >>> 0 >= i18 >>> 0)) _abort();
 HEAP32[i3 + 12 >> 2] = i19;
 HEAP32[i2 >> 2] = i19;
 HEAP32[i19 + 8 >> 2] = i3;
 HEAP32[i19 + 12 >> 2] = i1;
 HEAP32[i19 + 24 >> 2] = 0;
 return;
}

function _SDL_FillRect(i4, i3, i11) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i14 + 16 | 0;
 i2 = i14 + 24 | 0;
 if (!i4) {
  i13 = _SDL_SetError(40249, i14) | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 i6 = i4 + 4 | 0;
 if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 8 >> 0] | 0) < 8) {
  i13 = _SDL_SetError(40281, i14 + 8 | 0) | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 i1 = i4 + 36 | 0;
 if (!i3) {
  if ((HEAP32[i4 + 44 >> 2] | 0) < 1) {
   i13 = 0;
   STACKTOP = i14;
   return i13 | 0;
  }
  if ((HEAP32[i4 + 48 >> 2] | 0) < 1) {
   i13 = 0;
   STACKTOP = i14;
   return i13 | 0;
  } else i3 = i1;
 } else if (!(_SDL_IntersectRect(i3, i1, i2) | 0)) {
  i13 = 0;
  STACKTOP = i14;
  return i13 | 0;
 } else i3 = i2;
 i1 = HEAP32[i4 + 20 >> 2] | 0;
 if (!i1) {
  i13 = _SDL_SetError(40324, i5) | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 i13 = HEAP32[i4 + 16 >> 2] | 0;
 i2 = Math_imul(i13, HEAP32[i3 + 4 >> 2] | 0) | 0;
 i10 = HEAPU8[(HEAP32[i6 >> 2] | 0) + 9 >> 0] | 0;
 i2 = i1 + ((Math_imul(i10, HEAP32[i3 >> 2] | 0) | 0) + i2) | 0;
 switch (i10 | 0) {
 case 1:
  {
   i9 = i11 << 8 | i11;
   i9 = i9 << 16 | i9;
   i10 = HEAP32[i3 + 8 >> 2] | 0;
   i8 = HEAP32[i3 + 12 >> 2] | 0;
   i4 = i8 + -1 | 0;
   if (!i8) {
    i13 = 0;
    STACKTOP = i14;
    return i13 | 0;
   }
   i11 = i11 & 255;
   i8 = i10 + -1 | 0;
   if ((i10 | 0) > 3) i7 = i4; else {
    i7 = i10 & 3;
    i8 = (i7 | 0) == 0;
    i6 = i10 & -4;
    i5 = i6 | 1;
    while (1) {
     L31 : do if (!i8) {
      i1 = i2 + i6 | 0;
      switch (i7 | 0) {
      case 3:
       {
        HEAP8[i1 >> 0] = i11;
        i3 = i5;
        i1 = i2 + i5 | 0;
        i12 = 34;
        break;
       }
      case 2:
       {
        i3 = i6;
        i12 = 34;
        break;
       }
      case 1:
       break;
      default:
       break L31;
      }
      if ((i12 | 0) == 34) {
       i12 = 0;
       HEAP8[i1 >> 0] = i11;
       i1 = i2 + (i3 + 1) | 0;
      }
      HEAP8[i1 >> 0] = i11;
     } while (0);
     if (!i4) {
      i1 = 0;
      break;
     } else {
      i2 = i2 + i13 | 0;
      i4 = i4 + -1 | 0;
     }
    }
    STACKTOP = i14;
    return i1 | 0;
   }
   while (1) {
    switch (i2 & 3 | 0) {
    case 1:
     {
      HEAP8[i2 >> 0] = i11;
      i1 = i8;
      i3 = i2 + 1 | 0;
      i12 = 17;
      break;
     }
    case 2:
     {
      i1 = i10;
      i3 = i2;
      i12 = 17;
      break;
     }
    case 3:
     {
      i1 = i10;
      i3 = i2;
      i12 = 18;
      break;
     }
    default:
     {
      i5 = i10;
      i6 = i2;
     }
    }
    if ((i12 | 0) == 17) {
     HEAP8[i3 >> 0] = i11;
     i1 = i1 + -1 | 0;
     i3 = i3 + 1 | 0;
     i12 = 18;
    }
    if ((i12 | 0) == 18) {
     i12 = 0;
     HEAP8[i3 >> 0] = i11;
     i5 = i1 + -1 | 0;
     i6 = i3 + 1 | 0;
    }
    i1 = i5 >> 2;
    i3 = (i1 + 3 | 0) >>> 2;
    L49 : do if (i1) {
     switch (i1 & 3 | 0) {
     case 0:
      {
       i1 = i6;
       i12 = 21;
       break;
      }
     case 3:
      {
       i1 = i6;
       i12 = 22;
       break;
      }
     case 2:
      {
       i1 = i6;
       i12 = 23;
       break;
      }
     case 1:
      {
       i1 = i6;
       i12 = 24;
       break;
      }
     default:
      break L49;
     }
     while (1) if ((i12 | 0) == 21) {
      HEAP32[i1 >> 2] = i9;
      i1 = i1 + 4 | 0;
      i12 = 22;
      continue;
     } else if ((i12 | 0) == 22) {
      HEAP32[i1 >> 2] = i9;
      i1 = i1 + 4 | 0;
      i12 = 23;
      continue;
     } else if ((i12 | 0) == 23) {
      HEAP32[i1 >> 2] = i9;
      i1 = i1 + 4 | 0;
      i12 = 24;
      continue;
     } else if ((i12 | 0) == 24) {
      i12 = 0;
      HEAP32[i1 >> 2] = i9;
      i3 = i3 + -1 | 0;
      if (!i3) break; else {
       i1 = i1 + 4 | 0;
       i12 = 21;
       continue;
      }
     }
    } while (0);
    i4 = i5 & 3;
    L58 : do if (i4) {
     i3 = i5 & -4;
     i1 = i6 + i3 | 0;
     switch (i4 | 0) {
     case 3:
      {
       i12 = i3 | 1;
       HEAP8[i1 >> 0] = i11;
       i3 = i12;
       i1 = i6 + i12 | 0;
       i12 = 28;
       break;
      }
     case 2:
      {
       i12 = 28;
       break;
      }
     case 1:
      break;
     default:
      break L58;
     }
     if ((i12 | 0) == 28) {
      i12 = 0;
      HEAP8[i1 >> 0] = i11;
      i1 = i6 + (i3 + 1) | 0;
     }
     HEAP8[i1 >> 0] = i11;
    } while (0);
    if (!i7) {
     i1 = 0;
     break;
    } else {
     i2 = i2 + i13 | 0;
     i7 = i7 + -1 | 0;
    }
   }
   STACKTOP = i14;
   return i1 | 0;
  }
 case 2:
  {
   i7 = i11 << 16 | i11;
   i8 = HEAP32[i3 + 8 >> 2] | 0;
   i12 = HEAP32[i3 + 12 >> 2] | 0;
   i1 = i12 + -1 | 0;
   if (!i12) {
    i13 = 0;
    STACKTOP = i14;
    return i13 | 0;
   }
   i9 = i11 & 65535;
   i10 = i8 + -1 | 0;
   if ((i8 | 0) <= 1) {
    i3 = (i8 & 1 | 0) == 0;
    while (1) {
     if (!i3) HEAP16[i2 + (i10 << 1) >> 1] = i9;
     if (!i1) {
      i1 = 0;
      break;
     } else {
      i2 = i2 + i13 | 0;
      i1 = i1 + -1 | 0;
     }
    }
    STACKTOP = i14;
    return i1 | 0;
   }
   while (1) {
    if (!(i2 & 2)) {
     i5 = i8;
     i6 = i2;
    } else {
     HEAP16[i2 >> 1] = i9;
     i5 = i10;
     i6 = i2 + 2 | 0;
    }
    i3 = i5 >> 1;
    i4 = (i3 + 3 | 0) >>> 2;
    L84 : do if (i3) {
     switch (i3 & 3 | 0) {
     case 0:
      {
       i3 = i6;
       i12 = 44;
       break;
      }
     case 3:
      {
       i3 = i6;
       i12 = 45;
       break;
      }
     case 2:
      {
       i3 = i6;
       i12 = 46;
       break;
      }
     case 1:
      {
       i3 = i6;
       i12 = 47;
       break;
      }
     default:
      break L84;
     }
     while (1) if ((i12 | 0) == 44) {
      HEAP32[i3 >> 2] = i7;
      i3 = i3 + 4 | 0;
      i12 = 45;
      continue;
     } else if ((i12 | 0) == 45) {
      HEAP32[i3 >> 2] = i7;
      i3 = i3 + 4 | 0;
      i12 = 46;
      continue;
     } else if ((i12 | 0) == 46) {
      HEAP32[i3 >> 2] = i7;
      i3 = i3 + 4 | 0;
      i12 = 47;
      continue;
     } else if ((i12 | 0) == 47) {
      HEAP32[i3 >> 2] = i7;
      i4 = i4 + -1 | 0;
      if (!i4) break; else {
       i3 = i3 + 4 | 0;
       i12 = 44;
       continue;
      }
     }
    } while (0);
    if (i5 & 1) HEAP16[i6 + (i5 + -1 << 1) >> 1] = i9;
    if (!i1) {
     i1 = 0;
     break;
    } else {
     i2 = i2 + i13 | 0;
     i1 = i1 + -1 | 0;
    }
   }
   STACKTOP = i14;
   return i1 | 0;
  }
 case 3:
  {
   i8 = HEAP32[i3 + 8 >> 2] | 0;
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   i6 = i11 >>> 16 & 255;
   i7 = i11 >>> 8 & 255;
   i5 = i11 & 255;
   if ((i8 | 0) == 0 | (i1 | 0) == 0) {
    i13 = 0;
    STACKTOP = i14;
    return i13 | 0;
   }
   while (1) {
    i3 = i8;
    i4 = i2;
    while (1) {
     i3 = i3 + -1 | 0;
     HEAP8[i4 >> 0] = i6;
     HEAP8[i4 + 1 >> 0] = i7;
     HEAP8[i4 + 2 >> 0] = i5;
     if (!i3) break; else i4 = i4 + 3 | 0;
    }
    i1 = i1 + -1 | 0;
    if (!i1) {
     i1 = 0;
     break;
    } else i2 = i2 + i13 | 0;
   }
   STACKTOP = i14;
   return i1 | 0;
  }
 case 4:
  {
   i1 = HEAP32[i3 + 8 >> 2] | 0;
   i3 = HEAP32[i3 + 12 >> 2] | 0;
   if (!i3) {
    i13 = 0;
    STACKTOP = i14;
    return i13 | 0;
   }
   i6 = (i1 + 3 | 0) >>> 2;
   i7 = (i1 | 0) == 0;
   i5 = i1 & 3;
   while (1) {
    i3 = i3 + -1 | 0;
    L112 : do if (!i7) {
     switch (i5 | 0) {
     case 0:
      {
       i1 = i6;
       i4 = i2;
       i12 = 62;
       break;
      }
     case 3:
      {
       i1 = i6;
       i4 = i2;
       i12 = 63;
       break;
      }
     case 2:
      {
       i1 = i6;
       i4 = i2;
       i12 = 64;
       break;
      }
     case 1:
      {
       i1 = i6;
       i4 = i2;
       i12 = 65;
       break;
      }
     default:
      break L112;
     }
     while (1) if ((i12 | 0) == 62) {
      HEAP32[i4 >> 2] = i11;
      i4 = i4 + 4 | 0;
      i12 = 63;
      continue;
     } else if ((i12 | 0) == 63) {
      HEAP32[i4 >> 2] = i11;
      i4 = i4 + 4 | 0;
      i12 = 64;
      continue;
     } else if ((i12 | 0) == 64) {
      HEAP32[i4 >> 2] = i11;
      i4 = i4 + 4 | 0;
      i12 = 65;
      continue;
     } else if ((i12 | 0) == 65) {
      HEAP32[i4 >> 2] = i11;
      i1 = i1 + -1 | 0;
      if (!i1) break; else {
       i4 = i4 + 4 | 0;
       i12 = 62;
       continue;
      }
     }
    } while (0);
    if (!i3) {
     i1 = 0;
     break;
    } else i2 = i2 + i13 | 0;
   }
   STACKTOP = i14;
   return i1 | 0;
  }
 default:
  {
   i13 = 0;
   STACKTOP = i14;
   return i13 | 0;
  }
 }
 return 0;
}

function _SDL_GameControllerEventWatcher(i1, i20) {
 i1 = i1 | 0;
 i20 = i20 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i22 = i23;
 switch (HEAP32[i20 >> 2] | 0) {
 case 1536:
  {
   i2 = HEAP8[i20 + 12 >> 0] | 0;
   if ((i2 & 255) > 19) {
    STACKTOP = i23;
    return 1;
   }
   i1 = HEAP32[3036] | 0;
   if (!i1) {
    STACKTOP = i23;
    return 1;
   }
   i3 = HEAP32[i20 + 8 >> 2] | 0;
   while (1) {
    if ((HEAP32[HEAP32[i1 >> 2] >> 2] | 0) == (i3 | 0)) {
     i13 = i1;
     i4 = i1;
     break;
    }
    i1 = HEAP32[i1 + 896 >> 2] | 0;
    if (!i1) {
     i21 = 91;
     break;
    }
   }
   if ((i21 | 0) == 91) {
    STACKTOP = i23;
    return 1;
   }
   i1 = i2 & 255;
   i2 = HEAP32[i4 + 320 + (i1 << 2) >> 2] | 0;
   if ((i2 | 0) > -1) {
    i1 = HEAP16[i20 + 16 >> 1] | 0;
    if ((i2 & -2 | 0) == 4) i1 = ((i1 << 16 >> 16 | 0) / 2 | 0) + 16384 & 65535;
    if ((_SDL_EventState(1616, -1) | 0) << 24 >> 24 != 1) {
     STACKTOP = i23;
     return 1;
    }
    HEAP32[i22 >> 2] = 1616;
    HEAP32[i22 + 8 >> 2] = HEAP32[HEAP32[i13 >> 2] >> 2];
    HEAP8[i22 + 12 >> 0] = i2;
    HEAP16[i22 + 16 >> 1] = i1;
    _SDL_PushEvent(i22) | 0;
    STACKTOP = i23;
    return 1;
   }
   i2 = HEAP32[i4 + 560 + (i1 << 2) >> 2] | 0;
   if ((i2 | 0) <= -1) {
    STACKTOP = i23;
    return 1;
   }
   i1 = HEAP16[i20 + 16 >> 1] | 0;
   i20 = i1 << 16 >> 16;
   i20 = ((i1 << 16 >> 16 < 0 ? 0 - i20 | 0 : i20) | 0) > 16384;
   i1 = i20 & 1;
   switch (i20 & 1 | 0) {
   case 1:
    {
     HEAP32[i22 >> 2] = 1617;
     i7 = 1617;
     i21 = 17;
     break;
    }
   case 0:
    {
     HEAP32[i22 >> 2] = 1618;
     i7 = 1618;
     i21 = 17;
     break;
    }
   default:
    {}
   }
   if ((i21 | 0) == 17 ? (_SDL_EventState(i7, -1) | 0) << 24 >> 24 == 1 : 0) {
    HEAP32[i22 + 8 >> 2] = HEAP32[HEAP32[i13 >> 2] >> 2];
    HEAP8[i22 + 12 >> 0] = i2;
    HEAP8[i22 + 13 >> 0] = i1;
    _SDL_PushEvent(i22) | 0;
   }
   STACKTOP = i23;
   return 1;
  }
 case 1540:
 case 1539:
  {
   i2 = HEAP8[i20 + 12 >> 0] | 0;
   if ((i2 & 255) > 19) {
    STACKTOP = i23;
    return 1;
   }
   i1 = HEAP32[3036] | 0;
   if (!i1) {
    STACKTOP = i23;
    return 1;
   }
   i3 = HEAP32[i20 + 8 >> 2] | 0;
   while (1) {
    if ((HEAP32[HEAP32[i1 >> 2] >> 2] | 0) == (i3 | 0)) {
     i8 = i1;
     i5 = i1;
     break;
    }
    i1 = HEAP32[i1 + 896 >> 2] | 0;
    if (!i1) {
     i21 = 91;
     break;
    }
   }
   if ((i21 | 0) == 91) {
    STACKTOP = i23;
    return 1;
   }
   i1 = i2 & 255;
   i2 = HEAP32[i5 + 480 + (i1 << 2) >> 2] | 0;
   if ((i2 | 0) <= -1) {
    i2 = HEAP32[i5 + 400 + (i1 << 2) >> 2] | 0;
    if ((i2 | 0) <= -1) {
     STACKTOP = i23;
     return 1;
    }
    i1 = HEAP8[i20 + 13 >> 0] | 0;
    if ((_SDL_EventState(1616, -1) | 0) << 24 >> 24 != 1) {
     STACKTOP = i23;
     return 1;
    }
    HEAP32[i22 >> 2] = 1616;
    HEAP32[i22 + 8 >> 2] = HEAP32[HEAP32[i8 >> 2] >> 2];
    HEAP8[i22 + 12 >> 0] = i2;
    HEAP16[i22 + 16 >> 1] = i1 << 24 >> 24 != 0 ? 32767 : 0;
    _SDL_PushEvent(i22) | 0;
    STACKTOP = i23;
    return 1;
   }
   i1 = HEAP8[i20 + 13 >> 0] | 0;
   switch (i1 & 255 | 0) {
   case 1:
    {
     HEAP32[i22 >> 2] = 1617;
     i6 = 1617;
     i21 = 29;
     break;
    }
   case 0:
    {
     HEAP32[i22 >> 2] = 1618;
     i6 = 1618;
     i21 = 29;
     break;
    }
   default:
    {}
   }
   if ((i21 | 0) == 29 ? (_SDL_EventState(i6, -1) | 0) << 24 >> 24 == 1 : 0) {
    HEAP32[i22 + 8 >> 2] = HEAP32[HEAP32[i8 >> 2] >> 2];
    HEAP8[i22 + 12 >> 0] = i2;
    HEAP8[i22 + 13 >> 0] = i1;
    _SDL_PushEvent(i22) | 0;
   }
   STACKTOP = i23;
   return 1;
  }
 case 1538:
  {
   i5 = i20 + 12 | 0;
   i3 = HEAP8[i5 >> 0] | 0;
   if ((i3 & 255) > 3) {
    STACKTOP = i23;
    return 1;
   }
   i1 = HEAP32[3036] | 0;
   if (!i1) {
    STACKTOP = i23;
    return 1;
   }
   i2 = HEAP32[i20 + 8 >> 2] | 0;
   while (1) {
    if ((HEAP32[HEAP32[i1 >> 2] >> 2] | 0) == (i2 | 0)) {
     i14 = i1;
     i19 = i1;
     break;
    }
    i1 = HEAP32[i1 + 896 >> 2] | 0;
    if (!i1) {
     i21 = 91;
     break;
    }
   }
   if ((i21 | 0) == 91) {
    STACKTOP = i23;
    return 1;
   }
   i4 = i3 & 255;
   i2 = HEAP8[i19 + 8 + i4 >> 0] | 0;
   i3 = i20 + 13 | 0;
   i1 = HEAP8[i3 >> 0] & i2;
   i4 = i4 << 4;
   i2 = (i1 ^ i2) & 255;
   if (((i2 & 4 | 0) != 0 ? (i9 = HEAP32[i19 + 640 + ((i4 | 4) << 2) >> 2] | 0, (i9 | 0) != -1) : 0) ? (HEAP32[i22 >> 2] = 1618, (_SDL_EventState(1618, -1) | 0) << 24 >> 24 == 1) : 0) {
    HEAP32[i22 + 8 >> 2] = HEAP32[HEAP32[i14 >> 2] >> 2];
    HEAP8[i22 + 12 >> 0] = i9;
    HEAP8[i22 + 13 >> 0] = 0;
    _SDL_PushEvent(i22) | 0;
   }
   if (((i2 & 1 | 0) != 0 ? (i10 = HEAP32[i19 + 640 + ((i4 | 1) << 2) >> 2] | 0, (i10 | 0) != -1) : 0) ? (HEAP32[i22 >> 2] = 1618, (_SDL_EventState(1618, -1) | 0) << 24 >> 24 == 1) : 0) {
    HEAP32[i22 + 8 >> 2] = HEAP32[HEAP32[i14 >> 2] >> 2];
    HEAP8[i22 + 12 >> 0] = i10;
    HEAP8[i22 + 13 >> 0] = 0;
    _SDL_PushEvent(i22) | 0;
   }
   if (((i2 & 8 | 0) != 0 ? (i11 = HEAP32[i19 + 640 + ((i4 | 8) << 2) >> 2] | 0, (i11 | 0) != -1) : 0) ? (HEAP32[i22 >> 2] = 1618, (_SDL_EventState(1618, -1) | 0) << 24 >> 24 == 1) : 0) {
    HEAP32[i22 + 8 >> 2] = HEAP32[HEAP32[i14 >> 2] >> 2];
    HEAP8[i22 + 12 >> 0] = i11;
    HEAP8[i22 + 13 >> 0] = 0;
    _SDL_PushEvent(i22) | 0;
   }
   if (((i2 & 2 | 0) != 0 ? (i12 = HEAP32[i19 + 640 + ((i4 | 2) << 2) >> 2] | 0, (i12 | 0) != -1) : 0) ? (HEAP32[i22 >> 2] = 1618, (_SDL_EventState(1618, -1) | 0) << 24 >> 24 == 1) : 0) {
    HEAP32[i22 + 8 >> 2] = HEAP32[HEAP32[i14 >> 2] >> 2];
    HEAP8[i22 + 12 >> 0] = i12;
    HEAP8[i22 + 13 >> 0] = 0;
    _SDL_PushEvent(i22) | 0;
   }
   i1 = (HEAP8[i3 >> 0] ^ i1) & 255;
   if (((i1 & 4 | 0) != 0 ? (i15 = HEAP32[i19 + 640 + ((i4 | 4) << 2) >> 2] | 0, (i15 | 0) != -1) : 0) ? (HEAP32[i22 >> 2] = 1617, (_SDL_EventState(1617, -1) | 0) << 24 >> 24 == 1) : 0) {
    HEAP32[i22 + 8 >> 2] = HEAP32[HEAP32[i14 >> 2] >> 2];
    HEAP8[i22 + 12 >> 0] = i15;
    HEAP8[i22 + 13 >> 0] = 1;
    _SDL_PushEvent(i22) | 0;
   }
   if (((i1 & 1 | 0) != 0 ? (i16 = HEAP32[i19 + 640 + ((i4 | 1) << 2) >> 2] | 0, (i16 | 0) != -1) : 0) ? (HEAP32[i22 >> 2] = 1617, (_SDL_EventState(1617, -1) | 0) << 24 >> 24 == 1) : 0) {
    HEAP32[i22 + 8 >> 2] = HEAP32[HEAP32[i14 >> 2] >> 2];
    HEAP8[i22 + 12 >> 0] = i16;
    HEAP8[i22 + 13 >> 0] = 1;
    _SDL_PushEvent(i22) | 0;
   }
   if (((i1 & 8 | 0) != 0 ? (i17 = HEAP32[i19 + 640 + ((i4 | 8) << 2) >> 2] | 0, (i17 | 0) != -1) : 0) ? (HEAP32[i22 >> 2] = 1617, (_SDL_EventState(1617, -1) | 0) << 24 >> 24 == 1) : 0) {
    HEAP32[i22 + 8 >> 2] = HEAP32[HEAP32[i14 >> 2] >> 2];
    HEAP8[i22 + 12 >> 0] = i17;
    HEAP8[i22 + 13 >> 0] = 1;
    _SDL_PushEvent(i22) | 0;
   }
   if (((i1 & 2 | 0) != 0 ? (i18 = HEAP32[i19 + 640 + ((i4 | 2) << 2) >> 2] | 0, (i18 | 0) != -1) : 0) ? (HEAP32[i22 >> 2] = 1617, (_SDL_EventState(1617, -1) | 0) << 24 >> 24 == 1) : 0) {
    HEAP32[i22 + 8 >> 2] = HEAP32[HEAP32[i14 >> 2] >> 2];
    HEAP8[i22 + 12 >> 0] = i18;
    HEAP8[i22 + 13 >> 0] = 1;
    _SDL_PushEvent(i22) | 0;
   }
   HEAP8[(HEAPU8[i5 >> 0] | 0) + (i19 + 8) >> 0] = HEAP8[i3 >> 0] | 0;
   STACKTOP = i23;
   return 1;
  }
 case 1541:
  {
   i2 = i20 + 8 | 0;
   L138 : do if (!(HEAP32[3037] | 0)) {
    _SDL_JoystickGetDeviceGUID(i22, HEAP32[i2 >> 2] | 0);
    i1 = HEAP32[3038] | 0;
    if (i1) do {
     if (!(_SDL_memcmp(i22, i1, 16) | 0)) break L138;
     i1 = HEAP32[i1 + 24 >> 2] | 0;
    } while ((i1 | 0) != 0);
    STACKTOP = i23;
    return 1;
   } while (0);
   HEAP32[i22 >> 2] = 1619;
   HEAP32[i22 + 8 >> 2] = HEAP32[i2 >> 2];
   _SDL_PushEvent(i22) | 0;
   STACKTOP = i23;
   return 1;
  }
 case 1542:
  {
   i1 = HEAP32[3036] | 0;
   if (!i1) {
    STACKTOP = i23;
    return 1;
   }
   i2 = HEAP32[i20 + 8 >> 2] | 0;
   while (1) {
    if ((HEAP32[HEAP32[i1 >> 2] >> 2] | 0) == (i2 | 0)) break;
    i1 = HEAP32[i1 + 896 >> 2] | 0;
    if (!i1) {
     i21 = 91;
     break;
    }
   }
   if ((i21 | 0) == 91) {
    STACKTOP = i23;
    return 1;
   }
   HEAP32[i22 >> 2] = 1620;
   HEAP32[i22 + 8 >> 2] = i2;
   _SDL_PushEvent(i22) | 0;
   STACKTOP = i23;
   return 1;
  }
 default:
  {
   STACKTOP = i23;
   return 1;
  }
 }
 return 0;
}

function _strstr(i1, i17) {
 i1 = i1 | 0;
 i17 = i17 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 i16 = i19 + 1024 | 0;
 i18 = i19;
 i6 = HEAP8[i17 >> 0] | 0;
 do if (i6 << 24 >> 24) {
  i15 = _strchr(i1, i6 << 24 >> 24) | 0;
  if (i15) {
   i5 = HEAP8[i17 + 1 >> 0] | 0;
   if (i5 << 24 >> 24) {
    i2 = i15 + 1 | 0;
    i8 = HEAP8[i2 >> 0] | 0;
    if (i8 << 24 >> 24) {
     i4 = HEAP8[i17 + 2 >> 0] | 0;
     if (!(i4 << 24 >> 24)) {
      i6 = i5 & 255 | (i6 & 255) << 8;
      i1 = i8;
      i5 = i15;
      i3 = HEAPU8[i15 >> 0] << 8 | i8 & 255;
      while (1) {
       i4 = i3 & 65535;
       if ((i4 | 0) == (i6 | 0)) {
        i2 = i5;
        break;
       }
       i1 = i2 + 1 | 0;
       i3 = HEAP8[i1 >> 0] | 0;
       if (!(i3 << 24 >> 24)) {
        i1 = 0;
        break;
       } else {
        i5 = i2;
        i2 = i1;
        i1 = i3;
        i3 = i3 & 255 | i4 << 8;
       }
      }
      i1 = i1 << 24 >> 24 != 0 ? i2 : 0;
      break;
     }
     i2 = i15 + 2 | 0;
     i7 = HEAP8[i2 >> 0] | 0;
     if (i7 << 24 >> 24) {
      i3 = HEAP8[i17 + 3 >> 0] | 0;
      if (!(i3 << 24 >> 24)) {
       i4 = (i5 & 255) << 16 | (i6 & 255) << 24 | (i4 & 255) << 8;
       i1 = (i7 & 255) << 8 | (i8 & 255) << 16 | HEAPU8[i15 >> 0] << 24;
       if ((i1 | 0) == (i4 | 0)) i1 = i7; else {
        i3 = i1;
        do {
         i2 = i2 + 1 | 0;
         i1 = HEAP8[i2 >> 0] | 0;
         i3 = (i1 & 255 | i3) << 8;
        } while (!(i1 << 24 >> 24 == 0 | (i3 | 0) == (i4 | 0)));
       }
       i1 = i1 << 24 >> 24 != 0 ? i2 + -2 | 0 : 0;
       break;
      }
      i2 = i15 + 3 | 0;
      i1 = HEAP8[i2 >> 0] | 0;
      if (i1 << 24 >> 24) {
       if (!(HEAP8[i17 + 4 >> 0] | 0)) {
        i4 = (i5 & 255) << 16 | (i6 & 255) << 24 | (i4 & 255) << 8 | i3 & 255;
        i3 = (i7 & 255) << 8 | (i8 & 255) << 16 | i1 & 255 | HEAPU8[i15 >> 0] << 24;
        if ((i3 | 0) != (i4 | 0)) do {
         i2 = i2 + 1 | 0;
         i1 = HEAP8[i2 >> 0] | 0;
         i3 = i1 & 255 | i3 << 8;
        } while (!(i1 << 24 >> 24 == 0 | (i3 | 0) == (i4 | 0)));
        i1 = i1 << 24 >> 24 != 0 ? i2 + -3 | 0 : 0;
        break;
       };
       HEAP32[i16 >> 2] = 0;
       HEAP32[i16 + 4 >> 2] = 0;
       HEAP32[i16 + 8 >> 2] = 0;
       HEAP32[i16 + 12 >> 2] = 0;
       HEAP32[i16 + 16 >> 2] = 0;
       HEAP32[i16 + 20 >> 2] = 0;
       HEAP32[i16 + 24 >> 2] = 0;
       HEAP32[i16 + 28 >> 2] = 0;
       i1 = i6;
       i3 = 0;
       while (1) {
        if (!(HEAP8[i15 + i3 >> 0] | 0)) {
         i1 = 0;
         break;
        }
        i2 = i16 + (((i1 & 255) >>> 5 & 255) << 2) | 0;
        HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 1 << (i1 & 31);
        i2 = i3 + 1 | 0;
        HEAP32[i18 + ((i1 & 255) << 2) >> 2] = i2;
        i1 = HEAP8[i17 + i2 >> 0] | 0;
        if (!(i1 << 24 >> 24)) {
         i9 = 23;
         break;
        } else i3 = i2;
       }
       L32 : do if ((i9 | 0) == 23) {
        L34 : do if (i2 >>> 0 > 1) {
         i4 = 1;
         i9 = -1;
         i1 = 0;
         L35 : while (1) {
          i8 = 1;
          while (1) {
           L39 : while (1) {
            i5 = 1;
            while (1) {
             i6 = HEAP8[i17 + (i5 + i9) >> 0] | 0;
             i7 = HEAP8[i17 + i4 >> 0] | 0;
             if (i6 << 24 >> 24 != i7 << 24 >> 24) {
              i8 = i4;
              i5 = i6;
              i4 = i7;
              break L39;
             }
             if ((i5 | 0) == (i8 | 0)) break;
             i5 = i5 + 1 | 0;
             i4 = i5 + i1 | 0;
             if (i4 >>> 0 >= i2 >>> 0) {
              i1 = i9;
              i11 = i8;
              break L35;
             }
            }
            i1 = i1 + i8 | 0;
            i4 = i1 + 1 | 0;
            if (i4 >>> 0 >= i2 >>> 0) {
             i1 = i9;
             i11 = i8;
             break L35;
            }
           }
           i6 = i8 - i9 | 0;
           if ((i5 & 255) <= (i4 & 255)) break;
           i1 = i8 + 1 | 0;
           if (i1 >>> 0 < i2 >>> 0) {
            i4 = i1;
            i1 = i8;
            i8 = i6;
           } else {
            i1 = i9;
            i11 = i6;
            break L35;
           }
          }
          i4 = i1 + 2 | 0;
          if (i4 >>> 0 >= i2 >>> 0) {
           i11 = 1;
           break;
          } else {
           i9 = i1;
           i1 = i1 + 1 | 0;
          }
         }
         i5 = 1;
         i6 = -1;
         i4 = 0;
         while (1) {
          i7 = i4;
          i4 = 1;
          while (1) {
           i10 = i7;
           L54 : while (1) {
            i7 = 1;
            while (1) {
             i9 = HEAP8[i17 + (i7 + i6) >> 0] | 0;
             i8 = HEAP8[i17 + i5 >> 0] | 0;
             if (i9 << 24 >> 24 != i8 << 24 >> 24) {
              i7 = i5;
              i5 = i10;
              break L54;
             }
             if ((i7 | 0) == (i4 | 0)) break;
             i7 = i7 + 1 | 0;
             i5 = i7 + i10 | 0;
             if (i5 >>> 0 >= i2 >>> 0) {
              i5 = i11;
              break L34;
             }
            }
            i10 = i10 + i4 | 0;
            i5 = i10 + 1 | 0;
            if (i5 >>> 0 >= i2 >>> 0) {
             i5 = i11;
             break L34;
            }
           }
           i4 = i7 - i6 | 0;
           if ((i9 & 255) >= (i8 & 255)) {
            i4 = i5;
            break;
           }
           i5 = i7 + 1 | 0;
           if (i5 >>> 0 >= i2 >>> 0) {
            i5 = i11;
            break L34;
           }
          }
          i5 = i4 + 2 | 0;
          if (i5 >>> 0 >= i2 >>> 0) {
           i6 = i4;
           i5 = i11;
           i4 = 1;
           break;
          } else {
           i6 = i4;
           i4 = i4 + 1 | 0;
          }
         }
        } else {
         i1 = -1;
         i6 = -1;
         i5 = 1;
         i4 = 1;
        } while (0);
        i13 = (i6 + 1 | 0) >>> 0 > (i1 + 1 | 0) >>> 0;
        i4 = i13 ? i4 : i5;
        i13 = i13 ? i6 : i1;
        i12 = i13 + 1 | 0;
        if (!(_memcmp(i17, i17 + i4 | 0, i12) | 0)) i14 = i2 - i4 | 0; else {
         i4 = i2 - i13 + -1 | 0;
         i14 = 0;
         i4 = (i13 >>> 0 > i4 >>> 0 ? i13 : i4) + 1 | 0;
        }
        i9 = i2 | 63;
        i10 = (i14 | 0) != 0;
        i11 = i2 - i4 | 0;
        i1 = i15;
        i8 = 0;
        i7 = i15;
        L69 : while (1) {
         i5 = i1;
         do if ((i7 - i5 | 0) >>> 0 < i2 >>> 0) {
          i6 = _memchr(i7, 0, i9) | 0;
          if (i6) if ((i6 - i5 | 0) >>> 0 < i2 >>> 0) {
           i1 = 0;
           break L32;
          } else break; else {
           i6 = i7 + i9 | 0;
           break;
          }
         } else i6 = i7; while (0);
         i5 = HEAP8[i1 + i3 >> 0] | 0;
         if (!(1 << (i5 & 31) & HEAP32[i16 + (((i5 & 255) >>> 5 & 255) << 2) >> 2])) {
          i1 = i1 + i2 | 0;
          i8 = 0;
          i7 = i6;
          continue;
         }
         i15 = HEAP32[i18 + ((i5 & 255) << 2) >> 2] | 0;
         i5 = i2 - i15 | 0;
         if ((i2 | 0) != (i15 | 0)) {
          i1 = i1 + (i10 & (i8 | 0) != 0 & i5 >>> 0 < i4 >>> 0 ? i11 : i5) | 0;
          i8 = 0;
          i7 = i6;
          continue;
         }
         i5 = i12 >>> 0 > i8 >>> 0 ? i12 : i8;
         i7 = HEAP8[i17 + i5 >> 0] | 0;
         L83 : do if (!(i7 << 24 >> 24)) i5 = i12; else {
          while (1) {
           if (i7 << 24 >> 24 != (HEAP8[i1 + i5 >> 0] | 0)) break;
           i5 = i5 + 1 | 0;
           i7 = HEAP8[i17 + i5 >> 0] | 0;
           if (!(i7 << 24 >> 24)) {
            i5 = i12;
            break L83;
           }
          }
          i1 = i1 + (i5 - i13) | 0;
          i8 = 0;
          i7 = i6;
          continue L69;
         } while (0);
         do {
          if (i5 >>> 0 <= i8 >>> 0) break L32;
          i5 = i5 + -1 | 0;
         } while ((HEAP8[i17 + i5 >> 0] | 0) == (HEAP8[i1 + i5 >> 0] | 0));
         i1 = i1 + i4 | 0;
         i8 = i14;
         i7 = i6;
        }
       } while (0);
      } else i1 = 0;
     } else i1 = 0;
    } else i1 = 0;
   } else i1 = i15;
  } else i1 = 0;
 } while (0);
 STACKTOP = i19;
 return i1 | 0;
}

function _GLES2_SetupCopy(i4, i7) {
 i4 = i4 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i16 + 8 | 0;
 i3 = i16;
 i15 = HEAP32[i4 + 316 >> 2] | 0;
 i5 = HEAP32[i7 + 68 >> 2] | 0;
 i14 = HEAP32[i7 + 24 >> 2] | 0;
 i6 = i4 + 304 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 L1 : do if (i1) {
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  i2 = HEAP32[i7 + 4 >> 2] | 0;
  if ((i1 | 0) == (i2 | 0)) i1 = 1; else {
   L34 : do if ((i2 | 0) < 825382478) if ((i2 | 0) < 374740996) {
    if ((i2 | 0) >= 372645892) {
     switch (i2 | 0) {
     case 372645892:
      break;
     default:
      break L34;
     }
     if ((i1 | 0) < 376840196) switch (i1 | 0) {
     case 374740996:
      break;
     default:
      {
       i1 = 1;
       break L1;
      }
     } else switch (i1 | 0) {
     case 376840196:
      break;
     default:
      {
       i1 = 1;
       break L1;
      }
     }
     i1 = 2;
     break L1;
    }
    switch (i2 | 0) {
    case 370546692:
     break;
    default:
     break L34;
    }
    if ((i1 | 0) < 374740996) {
     switch (i1 | 0) {
     case 372645892:
      break;
     default:
      {
       i1 = 1;
       break L1;
      }
     }
     i1 = 4;
     break L1;
    }
    if ((i1 | 0) < 376840196) {
     switch (i1 | 0) {
     case 374740996:
      break;
     default:
      {
       i1 = 1;
       break L1;
      }
     }
     i1 = 2;
     break L1;
    } else {
     switch (i1 | 0) {
     case 376840196:
      break;
     default:
      {
       i1 = 1;
       break L1;
      }
     }
     i1 = 2;
     break L1;
    }
   } else {
    if ((i2 | 0) >= 376840196) {
     switch (i2 | 0) {
     case 376840196:
      break;
     default:
      break L34;
     }
     if ((i1 | 0) < 372645892) switch (i1 | 0) {
     case 370546692:
      break;
     default:
      {
       i1 = 1;
       break L1;
      }
     } else switch (i1 | 0) {
     case 372645892:
      break;
     default:
      {
       i1 = 1;
       break L1;
      }
     }
     i1 = 2;
     break L1;
    }
    switch (i2 | 0) {
    case 374740996:
     break;
    default:
     break L34;
    }
    if ((i1 | 0) < 372645892) {
     switch (i1 | 0) {
     case 370546692:
      break;
     default:
      {
       i1 = 1;
       break L1;
      }
     }
     i1 = 2;
     break L1;
    }
    if ((i1 | 0) < 376840196) {
     switch (i1 | 0) {
     case 372645892:
      break;
     default:
      {
       i1 = 1;
       break L1;
      }
     }
     i1 = 3;
     break L1;
    } else {
     switch (i1 | 0) {
     case 376840196:
      break;
     default:
      {
       i1 = 1;
       break L1;
      }
     }
     i1 = 4;
     break L1;
    }
   } else {
    if ((i2 | 0) >= 842094169) if ((i2 | 0) < 1448433993) switch (i2 | 0) {
    case 842094169:
     {
      i1 = 5;
      break L1;
     }
    default:
     break L34;
    } else switch (i2 | 0) {
    case 1448433993:
     {
      i1 = 5;
      break L1;
     }
    default:
     break L34;
    }
    if ((i2 | 0) < 842094158) {
     switch (i2 | 0) {
     case 825382478:
      break;
     default:
      break L34;
     }
     i1 = 7;
     break L1;
    } else {
     switch (i2 | 0) {
     case 842094158:
      break;
     default:
      break L34;
     }
     i1 = 6;
     break L1;
    }
   } while (0);
   i15 = _SDL_SetError(46817, i3) | 0;
   STACKTOP = i16;
   return i15 | 0;
  }
 } else {
  i1 = HEAP32[i7 + 4 >> 2] | 0;
  L3 : do if ((i1 | 0) < 825382478) {
   if ((i1 | 0) < 374740996) {
    if ((i1 | 0) >= 372645892) switch (i1 | 0) {
    case 372645892:
     {
      i1 = 2;
      break L1;
     }
    default:
     break L3;
    }
    switch (i1 | 0) {
    case 370546692:
     break;
    default:
     break L3;
    }
    i1 = 3;
    break L1;
   }
   if ((i1 | 0) < 376840196) {
    switch (i1 | 0) {
    case 374740996:
     break;
    default:
     break L3;
    }
    i1 = 4;
    break L1;
   } else {
    switch (i1 | 0) {
    case 376840196:
     break;
    default:
     break L3;
    }
    i1 = 1;
    break L1;
   }
  } else {
   if ((i1 | 0) >= 842094169) {
    if ((i1 | 0) < 1448433993) switch (i1 | 0) {
    case 842094169:
     break;
    default:
     break L3;
    } else switch (i1 | 0) {
    case 1448433993:
     break;
    default:
     break L3;
    }
    i1 = 5;
    break L1;
   }
   if ((i1 | 0) < 842094158) {
    switch (i1 | 0) {
    case 825382478:
     break;
    default:
     break L3;
    }
    i1 = 7;
    break L1;
   } else {
    switch (i1 | 0) {
    case 842094158:
     break;
    default:
     break L3;
    }
    i1 = 6;
    break L1;
   }
  } while (0);
  i15 = _SDL_SetError(46817, i2) | 0;
  STACKTOP = i16;
  return i15 | 0;
 } while (0);
 if ((_GLES2_SelectProgram(i4, i1, i14) | 0) < 0) {
  i15 = -1;
  STACKTOP = i16;
  return i15 | 0;
 }
 if (HEAP32[i5 + 24 >> 2] | 0) {
  i13 = i15 + 16 | 0;
  FUNCTION_TABLE_vi[HEAP32[i13 >> 2] & 511](33986);
  i11 = i15 + 28 | 0;
  i12 = i5 + 4 | 0;
  FUNCTION_TABLE_vii[HEAP32[i11 >> 2] & 127](HEAP32[i12 >> 2] | 0, HEAP32[i5 + 32 >> 2] | 0);
  FUNCTION_TABLE_vi[HEAP32[i13 >> 2] & 511](33985);
  FUNCTION_TABLE_vii[HEAP32[i11 >> 2] & 127](HEAP32[i12 >> 2] | 0, HEAP32[i5 + 36 >> 2] | 0);
  FUNCTION_TABLE_vi[HEAP32[i13 >> 2] & 511](33984);
 }
 if (!(HEAP32[i5 + 28 >> 2] | 0)) {
  i1 = i5 + 4 | 0;
  i2 = i15 + 28 | 0;
 } else {
  i13 = i15 + 16 | 0;
  FUNCTION_TABLE_vi[HEAP32[i13 >> 2] & 511](33985);
  i2 = i15 + 28 | 0;
  i1 = i5 + 4 | 0;
  FUNCTION_TABLE_vii[HEAP32[i2 >> 2] & 127](HEAP32[i1 >> 2] | 0, HEAP32[i5 + 36 >> 2] | 0);
  FUNCTION_TABLE_vi[HEAP32[i13 >> 2] & 511](33984);
 }
 FUNCTION_TABLE_vii[HEAP32[i2 >> 2] & 127](HEAP32[i1 >> 2] | 0, HEAP32[i5 >> 2] | 0);
 i12 = HEAP8[i7 + 29 >> 0] | 0;
 i13 = HEAP8[i7 + 31 >> 0] | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 L100 : do if (!i1) i8 = 36; else {
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  if ((i1 | 0) < 372645892) switch (i1 | 0) {
  case 370546692:
   break;
  default:
   {
    i8 = 36;
    break L100;
   }
  } else switch (i1 | 0) {
  case 372645892:
   break;
  default:
   {
    i8 = 36;
    break L100;
   }
  }
  i1 = i7 + 28 | 0;
  i2 = i7 + 30 | 0;
 } while (0);
 if ((i8 | 0) == 36) {
  i1 = i7 + 30 | 0;
  i2 = i7 + 28 | 0;
 }
 i11 = HEAP8[i1 >> 0] | 0;
 i10 = HEAP8[i2 >> 0] | 0;
 i1 = HEAP32[i15 + 268 >> 2] | 0;
 i2 = i1 + 84 | 0;
 i3 = i1 + 85 | 0;
 i4 = i1 + 86 | 0;
 i5 = i1 + 87 | 0;
 i6 = i10 & 255;
 i7 = i12 & 255;
 i8 = i11 & 255;
 i9 = i13 & 255;
 if (((HEAPU8[i3 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i5 >> 0] | 0) | 0) != (i9 | i7 << 16 | i8 << 8 | i6 << 24 | 0)) {
  FUNCTION_TABLE_vidddd[HEAP32[i15 + 172 >> 2] & 3](HEAP32[i1 + 24 >> 2] | 0, +(i6 | 0) * .003921568859368563, +(i7 | 0) * .003921568859368563, +(i8 | 0) * .003921568859368563, +(i9 | 0) * .003921568859368563);
  HEAP8[i2 >> 0] = i10;
  HEAP8[i3 >> 0] = i12;
  HEAP8[i4 >> 0] = i11;
  HEAP8[i5 >> 0] = i13;
 }
 i1 = i15 + 8 | 0;
 if ((HEAP32[i1 >> 2] | 0) != (i14 | 0)) {
  switch (i14 | 0) {
  case 4:
   {
    FUNCTION_TABLE_vi[HEAP32[i15 + 80 >> 2] & 511](3042);
    FUNCTION_TABLE_viiii[HEAP32[i15 + 32 >> 2] & 63](0, 768, 0, 1);
    break;
   }
  case 1:
   {
    FUNCTION_TABLE_vi[HEAP32[i15 + 80 >> 2] & 511](3042);
    FUNCTION_TABLE_viiii[HEAP32[i15 + 32 >> 2] & 63](770, 771, 1, 771);
    break;
   }
  case 2:
   {
    FUNCTION_TABLE_vi[HEAP32[i15 + 80 >> 2] & 511](3042);
    FUNCTION_TABLE_viiii[HEAP32[i15 + 32 >> 2] & 63](770, 1, 0, 1);
    break;
   }
  default:
   FUNCTION_TABLE_vi[HEAP32[i15 + 68 >> 2] & 511](3042);
  }
  HEAP32[i1 >> 2] = i14;
 }
 i1 = i15 + 12 | 0;
 if ((HEAP32[i1 >> 2] | 0) == 1) {
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 FUNCTION_TABLE_vi[HEAP32[i15 + 84 >> 2] & 511](1);
 HEAP32[i1 >> 2] = 1;
 i15 = 0;
 STACKTOP = i16;
 return i15 | 0;
}

function ___intscan(i13, i3, i6, i1, i2) {
 i13 = i13 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0;
 L1 : do if (i3 >>> 0 > 36) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  i2 = 0;
  i1 = 0;
 } else {
  i15 = i13 + 4 | 0;
  i14 = i13 + 100 | 0;
  do {
   i4 = HEAP32[i15 >> 2] | 0;
   if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    HEAP32[i15 >> 2] = i4 + 1;
    i4 = HEAPU8[i4 >> 0] | 0;
   } else i4 = ___shgetc(i13) | 0;
  } while ((_isspace(i4) | 0) != 0);
  L11 : do switch (i4 | 0) {
  case 43:
  case 45:
   {
    i5 = ((i4 | 0) == 45) << 31 >> 31;
    i4 = HEAP32[i15 >> 2] | 0;
    if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     HEAP32[i15 >> 2] = i4 + 1;
     i4 = HEAPU8[i4 >> 0] | 0;
     i12 = i5;
     break L11;
    } else {
     i4 = ___shgetc(i13) | 0;
     i12 = i5;
     break L11;
    }
   }
  default:
   i12 = 0;
  } while (0);
  i5 = (i3 | 0) == 0;
  do if ((i3 & -17 | 0) == 0 & (i4 | 0) == 48) {
   i4 = HEAP32[i15 >> 2] | 0;
   if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    HEAP32[i15 >> 2] = i4 + 1;
    i4 = HEAPU8[i4 >> 0] | 0;
   } else i4 = ___shgetc(i13) | 0;
   if ((i4 | 32 | 0) != 120) if (i5) {
    i3 = 8;
    i10 = 46;
    break;
   } else {
    i10 = 32;
    break;
   }
   i3 = HEAP32[i15 >> 2] | 0;
   if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    HEAP32[i15 >> 2] = i3 + 1;
    i4 = HEAPU8[i3 >> 0] | 0;
   } else i4 = ___shgetc(i13) | 0;
   if ((HEAPU8[58107 + (i4 + 1) >> 0] | 0) > 15) {
    i1 = (HEAP32[i14 >> 2] | 0) == 0;
    if (!i1) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    if (!i6) {
     ___shlim(i13, 0);
     i2 = 0;
     i1 = 0;
     break L1;
    }
    if (i1) {
     i2 = 0;
     i1 = 0;
     break L1;
    }
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    i2 = 0;
    i1 = 0;
    break L1;
   } else {
    i3 = 16;
    i10 = 46;
   }
  } else {
   i3 = i5 ? 10 : i3;
   if ((HEAPU8[58107 + (i4 + 1) >> 0] | 0) >>> 0 < i3 >>> 0) i10 = 32; else {
    if (HEAP32[i14 >> 2] | 0) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    ___shlim(i13, 0);
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    i2 = 0;
    i1 = 0;
    break L1;
   }
  } while (0);
  if ((i10 | 0) == 32) if ((i3 | 0) == 10) {
   i3 = i4 + -48 | 0;
   if (i3 >>> 0 < 10) {
    i4 = 0;
    while (1) {
     i5 = (i4 * 10 | 0) + i3 | 0;
     i3 = HEAP32[i15 >> 2] | 0;
     if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i3 + 1;
      i4 = HEAPU8[i3 >> 0] | 0;
     } else i4 = ___shgetc(i13) | 0;
     i3 = i4 + -48 | 0;
     if (!(i3 >>> 0 < 10 & i5 >>> 0 < 429496729)) {
      i3 = i5;
      break;
     } else i4 = i5;
    }
    i5 = 0;
   } else {
    i3 = 0;
    i5 = 0;
   }
   i6 = i4 + -48 | 0;
   if (i6 >>> 0 < 10) {
    while (1) {
     i7 = ___muldi3(i3 | 0, i5 | 0, 10, 0) | 0;
     i8 = tempRet0;
     i9 = ((i6 | 0) < 0) << 31 >> 31;
     i11 = ~i9;
     if (i8 >>> 0 > i11 >>> 0 | (i8 | 0) == (i11 | 0) & i7 >>> 0 > ~i6 >>> 0) {
      i7 = i3;
      break;
     }
     i3 = _i64Add(i7 | 0, i8 | 0, i6 | 0, i9 | 0) | 0;
     i5 = tempRet0;
     i4 = HEAP32[i15 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i4 + 1;
      i4 = HEAPU8[i4 >> 0] | 0;
     } else i4 = ___shgetc(i13) | 0;
     i6 = i4 + -48 | 0;
     if (!(i6 >>> 0 < 10 & (i5 >>> 0 < 429496729 | (i5 | 0) == 429496729 & i3 >>> 0 < 2576980378))) {
      i7 = i3;
      break;
     }
    }
    if (i6 >>> 0 > 9) {
     i4 = i7;
     i3 = i12;
    } else {
     i3 = 10;
     i10 = 72;
    }
   } else {
    i4 = i3;
    i3 = i12;
   }
  } else i10 = 46;
  L63 : do if ((i10 | 0) == 46) {
   if (!(i3 + -1 & i3)) {
    i10 = HEAP8[58364 + ((i3 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    i5 = HEAP8[58107 + (i4 + 1) >> 0] | 0;
    i6 = i5 & 255;
    if (i6 >>> 0 < i3 >>> 0) {
     i4 = 0;
     while (1) {
      i7 = i6 | i4 << i10;
      i4 = HEAP32[i15 >> 2] | 0;
      if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
       HEAP32[i15 >> 2] = i4 + 1;
       i4 = HEAPU8[i4 >> 0] | 0;
      } else i4 = ___shgetc(i13) | 0;
      i5 = HEAP8[58107 + (i4 + 1) >> 0] | 0;
      i6 = i5 & 255;
      if (!(i7 >>> 0 < 134217728 & i6 >>> 0 < i3 >>> 0)) break; else i4 = i7;
     }
     i6 = 0;
    } else {
     i6 = 0;
     i7 = 0;
    }
    i8 = _bitshift64Lshr(-1, -1, i10 | 0) | 0;
    i9 = tempRet0;
    if ((i5 & 255) >>> 0 >= i3 >>> 0 | (i6 >>> 0 > i9 >>> 0 | (i6 | 0) == (i9 | 0) & i7 >>> 0 > i8 >>> 0)) {
     i5 = i6;
     i10 = 72;
     break;
    } else i4 = i6;
    while (1) {
     i7 = _bitshift64Shl(i7 | 0, i4 | 0, i10 | 0) | 0;
     i6 = tempRet0;
     i7 = i5 & 255 | i7;
     i4 = HEAP32[i15 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i4 + 1;
      i4 = HEAPU8[i4 >> 0] | 0;
     } else i4 = ___shgetc(i13) | 0;
     i5 = HEAP8[58107 + (i4 + 1) >> 0] | 0;
     if ((i5 & 255) >>> 0 >= i3 >>> 0 | (i6 >>> 0 > i9 >>> 0 | (i6 | 0) == (i9 | 0) & i7 >>> 0 > i8 >>> 0)) {
      i5 = i6;
      i10 = 72;
      break L63;
     } else i4 = i6;
    }
   }
   i5 = HEAP8[58107 + (i4 + 1) >> 0] | 0;
   i6 = i5 & 255;
   if (i6 >>> 0 < i3 >>> 0) {
    i4 = 0;
    while (1) {
     i7 = i6 + (Math_imul(i4, i3) | 0) | 0;
     i4 = HEAP32[i15 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i4 + 1;
      i4 = HEAPU8[i4 >> 0] | 0;
     } else i4 = ___shgetc(i13) | 0;
     i5 = HEAP8[58107 + (i4 + 1) >> 0] | 0;
     i6 = i5 & 255;
     if (!(i7 >>> 0 < 119304647 & i6 >>> 0 < i3 >>> 0)) break; else i4 = i7;
    }
    i6 = 0;
   } else {
    i7 = 0;
    i6 = 0;
   }
   if ((i5 & 255) >>> 0 < i3 >>> 0) {
    i10 = ___udivdi3(-1, -1, i3 | 0, 0) | 0;
    i11 = tempRet0;
    i9 = i6;
    while (1) {
     if (i9 >>> 0 > i11 >>> 0 | (i9 | 0) == (i11 | 0) & i7 >>> 0 > i10 >>> 0) {
      i5 = i9;
      i10 = 72;
      break L63;
     }
     i6 = ___muldi3(i7 | 0, i9 | 0, i3 | 0, 0) | 0;
     i8 = tempRet0;
     i5 = i5 & 255;
     if (i8 >>> 0 > 4294967295 | (i8 | 0) == -1 & i6 >>> 0 > ~i5 >>> 0) {
      i5 = i9;
      i10 = 72;
      break L63;
     }
     i7 = _i64Add(i5 | 0, 0, i6 | 0, i8 | 0) | 0;
     i6 = tempRet0;
     i4 = HEAP32[i15 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i4 + 1;
      i4 = HEAPU8[i4 >> 0] | 0;
     } else i4 = ___shgetc(i13) | 0;
     i5 = HEAP8[58107 + (i4 + 1) >> 0] | 0;
     if ((i5 & 255) >>> 0 >= i3 >>> 0) {
      i5 = i6;
      i10 = 72;
      break;
     } else i9 = i6;
    }
   } else {
    i5 = i6;
    i10 = 72;
   }
  } while (0);
  if ((i10 | 0) == 72) if ((HEAPU8[58107 + (i4 + 1) >> 0] | 0) >>> 0 < i3 >>> 0) {
   do {
    i4 = HEAP32[i15 >> 2] | 0;
    if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     HEAP32[i15 >> 2] = i4 + 1;
     i4 = HEAPU8[i4 >> 0] | 0;
    } else i4 = ___shgetc(i13) | 0;
   } while ((HEAPU8[58107 + (i4 + 1) >> 0] | 0) >>> 0 < i3 >>> 0);
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   i5 = i2;
   i4 = i1;
   i3 = (i1 & 1 | 0) == 0 & 0 == 0 ? i12 : 0;
  } else {
   i4 = i7;
   i3 = i12;
  }
  if (HEAP32[i14 >> 2] | 0) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
  if (!(i5 >>> 0 < i2 >>> 0 | (i5 | 0) == (i2 | 0) & i4 >>> 0 < i1 >>> 0)) {
   if (!((i1 & 1 | 0) != 0 | 0 != 0 | (i3 | 0) != 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    i1 = _i64Add(i1 | 0, i2 | 0, -1, -1) | 0;
    i2 = tempRet0;
    break;
   }
   if (i5 >>> 0 > i2 >>> 0 | (i5 | 0) == (i2 | 0) & i4 >>> 0 > i1 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    break;
   }
  }
  i1 = ((i3 | 0) < 0) << 31 >> 31;
  i1 = _i64Subtract(i4 ^ i3 | 0, i5 ^ i1 | 0, i3 | 0, i1 | 0) | 0;
  i2 = tempRet0;
 } while (0);
 tempRet0 = i2;
 return i1 | 0;
}

function _Blit_RGB888_index8(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = HEAP32[i2 + 24 >> 2] | 0;
 i5 = HEAP32[i2 + 28 >> 2] | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i11 = (HEAP32[i2 + 16 >> 2] | 0) / 4 | 0;
 i1 = HEAP32[i2 + 20 >> 2] | 0;
 i10 = HEAP32[i2 + 36 >> 2] | 0;
 i7 = HEAP32[i2 + 48 >> 2] | 0;
 if (i7) {
  if (!i5) return;
  i8 = (i4 + 7 | 0) / 8 | 0;
  i6 = i4 & 7;
  L6 : while (1) {
   i5 = i5 + -1 | 0;
   switch (i6 | 0) {
   case 0:
    {
     i2 = i8;
     i9 = 25;
     break;
    }
   case 7:
    {
     i2 = i8;
     i9 = 26;
     break;
    }
   case 6:
    {
     i2 = i8;
     i9 = 27;
     break;
    }
   case 5:
    {
     i2 = i8;
     i9 = 28;
     break;
    }
   case 4:
    {
     i2 = i8;
     i9 = 29;
     break;
    }
   case 3:
    {
     i2 = i8;
     i9 = 30;
     break;
    }
   case 2:
    {
     i2 = i8;
     i9 = 31;
     break;
    }
   case 1:
    {
     i4 = i1;
     i2 = i8;
     i9 = 32;
     break;
    }
   default:
    i9 = 33;
   }
   while (1) if ((i9 | 0) == 25) {
    i4 = HEAP32[i3 >> 2] | 0;
    HEAP8[i1 >> 0] = HEAP8[i7 + (i4 >>> 16 & 224 | i4 >>> 11 & 28 | i4 >>> 6 & 3) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i3 = i3 + 4 | 0;
    i9 = 26;
    continue;
   } else if ((i9 | 0) == 26) {
    i4 = HEAP32[i3 >> 2] | 0;
    HEAP8[i1 >> 0] = HEAP8[i7 + (i4 >>> 16 & 224 | i4 >>> 11 & 28 | i4 >>> 6 & 3) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i3 = i3 + 4 | 0;
    i9 = 27;
    continue;
   } else if ((i9 | 0) == 27) {
    i4 = HEAP32[i3 >> 2] | 0;
    HEAP8[i1 >> 0] = HEAP8[i7 + (i4 >>> 16 & 224 | i4 >>> 11 & 28 | i4 >>> 6 & 3) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i3 = i3 + 4 | 0;
    i9 = 28;
    continue;
   } else if ((i9 | 0) == 28) {
    i4 = HEAP32[i3 >> 2] | 0;
    HEAP8[i1 >> 0] = HEAP8[i7 + (i4 >>> 16 & 224 | i4 >>> 11 & 28 | i4 >>> 6 & 3) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i3 = i3 + 4 | 0;
    i9 = 29;
    continue;
   } else if ((i9 | 0) == 29) {
    i4 = HEAP32[i3 >> 2] | 0;
    HEAP8[i1 >> 0] = HEAP8[i7 + (i4 >>> 16 & 224 | i4 >>> 11 & 28 | i4 >>> 6 & 3) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i3 = i3 + 4 | 0;
    i9 = 30;
    continue;
   } else if ((i9 | 0) == 30) {
    i4 = HEAP32[i3 >> 2] | 0;
    HEAP8[i1 >> 0] = HEAP8[i7 + (i4 >>> 16 & 224 | i4 >>> 11 & 28 | i4 >>> 6 & 3) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i3 = i3 + 4 | 0;
    i9 = 31;
    continue;
   } else if ((i9 | 0) == 31) {
    i4 = HEAP32[i3 >> 2] | 0;
    HEAP8[i1 >> 0] = HEAP8[i7 + (i4 >>> 16 & 224 | i4 >>> 11 & 28 | i4 >>> 6 & 3) >> 0] | 0;
    i4 = i1 + 1 | 0;
    i3 = i3 + 4 | 0;
    i9 = 32;
    continue;
   } else if ((i9 | 0) == 32) {
    i9 = HEAP32[i3 >> 2] | 0;
    i1 = i4 + 1 | 0;
    HEAP8[i4 >> 0] = HEAP8[i7 + (i9 >>> 16 & 224 | i9 >>> 11 & 28 | i9 >>> 6 & 3) >> 0] | 0;
    i3 = i3 + 4 | 0;
    if ((i2 | 0) > 1) {
     i2 = i2 + -1 | 0;
     i9 = 25;
     continue;
    } else {
     i9 = 33;
     continue;
    }
   } else if ((i9 | 0) == 33) if (!i5) break L6; else {
    i1 = i1 + i10 | 0;
    i3 = i3 + (i11 << 2) | 0;
    continue L6;
   }
  }
  return;
 }
 i2 = i5 + -1 | 0;
 if (!i5) return;
 i7 = (i4 + 7 | 0) / 8 | 0;
 i6 = i4 & 7;
 switch (i6 | 0) {
 case 0:
  {
   i5 = i10 + 8 | 0;
   i4 = i2;
   while (1) {
    i2 = i7;
    while (1) {
     i10 = HEAP32[i3 >> 2] | 0;
     HEAP8[i1 >> 0] = i10 >>> 16 & 224 | i10 >>> 11 & 28 | i10 >>> 6 & 3;
     i10 = HEAP32[i3 >> 2] | 0;
     HEAP8[i1 + 1 >> 0] = i10 >>> 16 & 224 | i10 >>> 11 & 28 | i10 >>> 6 & 3;
     i10 = HEAP32[i3 >> 2] | 0;
     HEAP8[i1 + 2 >> 0] = i10 >>> 16 & 224 | i10 >>> 11 & 28 | i10 >>> 6 & 3;
     i10 = HEAP32[i3 >> 2] | 0;
     HEAP8[i1 + 3 >> 0] = i10 >>> 16 & 224 | i10 >>> 11 & 28 | i10 >>> 6 & 3;
     i10 = HEAP32[i3 >> 2] | 0;
     HEAP8[i1 + 4 >> 0] = i10 >>> 16 & 224 | i10 >>> 11 & 28 | i10 >>> 6 & 3;
     i10 = HEAP32[i3 >> 2] | 0;
     HEAP8[i1 + 5 >> 0] = i10 >>> 16 & 224 | i10 >>> 11 & 28 | i10 >>> 6 & 3;
     i10 = HEAP32[i3 >> 2] | 0;
     HEAP8[i1 + 6 >> 0] = i10 >>> 16 & 224 | i10 >>> 11 & 28 | i10 >>> 6 & 3;
     i10 = HEAP32[i3 >> 2] | 0;
     HEAP8[i1 + 7 >> 0] = i10 >>> 16 & 224 | i10 >>> 11 & 28 | i10 >>> 6 & 3;
     if ((i2 | 0) > 1) {
      i1 = i1 + 8 | 0;
      i2 = i2 + -1 | 0;
     } else break;
    }
    if (!i4) break; else {
     i4 = i4 + -1 | 0;
     i1 = i1 + i5 | 0;
     i3 = i3 + (i11 << 2) | 0;
    }
   }
   return;
  }
 case 7:
  {
   i5 = i10 + 7 | 0;
   i4 = i2;
   while (1) {
    i2 = i7;
    while (1) {
     i10 = HEAP32[i3 >> 2] | 0;
     HEAP8[i1 >> 0] = i10 >>> 16 & 224 | i10 >>> 11 & 28 | i10 >>> 6 & 3;
     i10 = HEAP32[i3 >> 2] | 0;
     HEAP8[i1 + 1 >> 0] = i10 >>> 16 & 224 | i10 >>> 11 & 28 | i10 >>> 6 & 3;
     i10 = HEAP32[i3 >> 2] | 0;
     HEAP8[i1 + 2 >> 0] = i10 >>> 16 & 224 | i10 >>> 11 & 28 | i10 >>> 6 & 3;
     i10 = HEAP32[i3 >> 2] | 0;
     HEAP8[i1 + 3 >> 0] = i10 >>> 16 & 224 | i10 >>> 11 & 28 | i10 >>> 6 & 3;
     i10 = HEAP32[i3 >> 2] | 0;
     HEAP8[i1 + 4 >> 0] = i10 >>> 16 & 224 | i10 >>> 11 & 28 | i10 >>> 6 & 3;
     i10 = HEAP32[i3 >> 2] | 0;
     HEAP8[i1 + 5 >> 0] = i10 >>> 16 & 224 | i10 >>> 11 & 28 | i10 >>> 6 & 3;
     i10 = HEAP32[i3 >> 2] | 0;
     HEAP8[i1 + 6 >> 0] = i10 >>> 16 & 224 | i10 >>> 11 & 28 | i10 >>> 6 & 3;
     if ((i2 | 0) <= 1) break;
     i10 = HEAP32[i3 >> 2] | 0;
     HEAP8[i1 + 7 >> 0] = i10 >>> 16 & 224 | i10 >>> 11 & 28 | i10 >>> 6 & 3;
     i1 = i1 + 8 | 0;
     i2 = i2 + -1 | 0;
    }
    if (!i4) break; else {
     i4 = i4 + -1 | 0;
     i1 = i1 + i5 | 0;
     i3 = i3 + (i11 << 2) | 0;
    }
   }
   return;
  }
 default:
  {
   i5 = i2;
   L25 : while (1) {
    switch (i6 | 0) {
    case 1:
     {
      i4 = i7;
      i9 = 22;
      break;
     }
    case 2:
     {
      i2 = i7;
      i9 = 21;
      break;
     }
    case 6:
     {
      i2 = i7;
      i9 = 17;
      break;
     }
    case 5:
     {
      i2 = i7;
      i9 = 18;
      break;
     }
    case 4:
     {
      i2 = i7;
      i9 = 19;
      break;
     }
    case 3:
     {
      i2 = i7;
      i9 = 20;
      break;
     }
    default:
     i9 = 23;
    }
    while (1) if ((i9 | 0) == 17) {
     i8 = HEAP32[i3 >> 2] | 0;
     HEAP8[i1 >> 0] = i8 >>> 16 & 224 | i8 >>> 11 & 28 | i8 >>> 6 & 3;
     i1 = i1 + 1 | 0;
     i9 = 18;
     continue;
    } else if ((i9 | 0) == 18) {
     i8 = HEAP32[i3 >> 2] | 0;
     HEAP8[i1 >> 0] = i8 >>> 16 & 224 | i8 >>> 11 & 28 | i8 >>> 6 & 3;
     i1 = i1 + 1 | 0;
     i9 = 19;
     continue;
    } else if ((i9 | 0) == 19) {
     i8 = HEAP32[i3 >> 2] | 0;
     HEAP8[i1 >> 0] = i8 >>> 16 & 224 | i8 >>> 11 & 28 | i8 >>> 6 & 3;
     i1 = i1 + 1 | 0;
     i9 = 20;
     continue;
    } else if ((i9 | 0) == 20) {
     i8 = HEAP32[i3 >> 2] | 0;
     HEAP8[i1 >> 0] = i8 >>> 16 & 224 | i8 >>> 11 & 28 | i8 >>> 6 & 3;
     i1 = i1 + 1 | 0;
     i9 = 21;
     continue;
    } else if ((i9 | 0) == 21) {
     i4 = HEAP32[i3 >> 2] | 0;
     HEAP8[i1 >> 0] = i4 >>> 16 & 224 | i4 >>> 11 & 28 | i4 >>> 6 & 3;
     i1 = i1 + 1 | 0;
     i4 = i2;
     i9 = 22;
     continue;
    } else if ((i9 | 0) == 22) {
     i9 = HEAP32[i3 >> 2] | 0;
     i2 = i1 + 1 | 0;
     HEAP8[i1 >> 0] = i9 >>> 16 & 224 | i9 >>> 11 & 28 | i9 >>> 6 & 3;
     if ((i4 | 0) <= 1) {
      i1 = i2;
      i9 = 23;
      continue;
     }
     i9 = HEAP32[i3 >> 2] | 0;
     HEAP8[i2 >> 0] = i9 >>> 16 & 224 | i9 >>> 11 & 28 | i9 >>> 6 & 3;
     i2 = HEAP32[i3 >> 2] | 0;
     HEAP8[i1 + 2 >> 0] = i2 >>> 16 & 224 | i2 >>> 11 & 28 | i2 >>> 6 & 3;
     i1 = i1 + 3 | 0;
     i2 = i4 + -1 | 0;
     i9 = 17;
     continue;
    } else if ((i9 | 0) == 23) if (!i5) break L25; else {
     i5 = i5 + -1 | 0;
     i1 = i1 + i10 | 0;
     i3 = i3 + (i11 << 2) | 0;
     continue L25;
    }
   }
   return;
  }
 }
}

function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri(i1, i15, i2, i16, i18, i21, i19, i20, i17, i22) {
 i1 = i1 | 0;
 i15 = i15 | 0;
 i2 = i2 | 0;
 i16 = i16 | 0;
 i18 = i18 | 0;
 i21 = i21 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 i17 = i17 | 0;
 i22 = i22 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i3 = i23 + 108 | 0;
 i4 = i23 + 96 | 0;
 i5 = i23 + 92 | 0;
 i6 = i23 + 80 | 0;
 i13 = i23 + 68 | 0;
 i14 = i23 + 56 | 0;
 i7 = i23 + 52 | 0;
 i8 = i23 + 40 | 0;
 i9 = i23 + 36 | 0;
 i10 = i23 + 24 | 0;
 i11 = i23 + 12 | 0;
 i12 = i23;
 if (i1) {
  i2 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 29992) | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i15) {
   FUNCTION_TABLE_vii[HEAP32[i1 + 44 >> 2] & 127](i3, i2);
   i15 = HEAP32[i3 >> 2] | 0;
   HEAP8[i16 >> 0] = i15;
   HEAP8[i16 + 1 >> 0] = i15 >> 8;
   HEAP8[i16 + 2 >> 0] = i15 >> 16;
   HEAP8[i16 + 3 >> 0] = i15 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 127](i4, i2);
   if (!(HEAP8[i17 >> 0] & 1)) {
    HEAP8[i17 + 1 >> 0] = 0;
    HEAP8[i17 >> 0] = 0;
   } else {
    HEAP8[HEAP32[i17 + 8 >> 2] >> 0] = 0;
    HEAP32[i17 + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i17, 0);
   HEAP32[i17 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i17 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
   HEAP32[i17 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
   HEAP32[i4 >> 2] = 0;
   HEAP32[i4 + 4 >> 2] = 0;
   HEAP32[i4 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
   i1 = i2;
  } else {
   FUNCTION_TABLE_vii[HEAP32[i1 + 40 >> 2] & 127](i5, i2);
   i15 = HEAP32[i5 >> 2] | 0;
   HEAP8[i16 >> 0] = i15;
   HEAP8[i16 + 1 >> 0] = i15 >> 8;
   HEAP8[i16 + 2 >> 0] = i15 >> 16;
   HEAP8[i16 + 3 >> 0] = i15 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 127](i6, i2);
   if (!(HEAP8[i17 >> 0] & 1)) {
    HEAP8[i17 + 1 >> 0] = 0;
    HEAP8[i17 >> 0] = 0;
   } else {
    HEAP8[HEAP32[i17 + 8 >> 2] >> 0] = 0;
    HEAP32[i17 + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i17, 0);
   HEAP32[i17 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i17 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
   HEAP32[i17 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
   HEAP32[i6 >> 2] = 0;
   HEAP32[i6 + 4 >> 2] = 0;
   HEAP32[i6 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
   i1 = i2;
  }
  HEAP8[i18 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 127](i2) | 0;
  HEAP8[i21 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 127](i13, i2);
  if (!(HEAP8[i19 >> 0] & 1)) {
   HEAP8[i19 + 1 >> 0] = 0;
   HEAP8[i19 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i19 + 8 >> 2] >> 0] = 0;
   HEAP32[i19 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i19, 0);
  HEAP32[i19 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i19 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i19 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  HEAP32[i13 >> 2] = 0;
  HEAP32[i13 + 4 >> 2] = 0;
  HEAP32[i13 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 127](i14, i2);
  if (!(HEAP8[i20 >> 0] & 1)) {
   HEAP8[i20 + 1 >> 0] = 0;
   HEAP8[i20 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i20 + 8 >> 2] >> 0] = 0;
   HEAP32[i20 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i20, 0);
  HEAP32[i20 >> 2] = HEAP32[i14 >> 2];
  HEAP32[i20 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
  HEAP32[i20 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
  HEAP32[i14 >> 2] = 0;
  HEAP32[i14 + 4 >> 2] = 0;
  HEAP32[i14 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i14);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0;
 } else {
  i2 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 29928) | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i15) {
   FUNCTION_TABLE_vii[HEAP32[i1 + 44 >> 2] & 127](i7, i2);
   i15 = HEAP32[i7 >> 2] | 0;
   HEAP8[i16 >> 0] = i15;
   HEAP8[i16 + 1 >> 0] = i15 >> 8;
   HEAP8[i16 + 2 >> 0] = i15 >> 16;
   HEAP8[i16 + 3 >> 0] = i15 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 127](i8, i2);
   if (!(HEAP8[i17 >> 0] & 1)) {
    HEAP8[i17 + 1 >> 0] = 0;
    HEAP8[i17 >> 0] = 0;
   } else {
    HEAP8[HEAP32[i17 + 8 >> 2] >> 0] = 0;
    HEAP32[i17 + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i17, 0);
   HEAP32[i17 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i17 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
   HEAP32[i17 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
   HEAP32[i8 >> 2] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
   HEAP32[i8 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i8);
   i1 = i2;
  } else {
   FUNCTION_TABLE_vii[HEAP32[i1 + 40 >> 2] & 127](i9, i2);
   i15 = HEAP32[i9 >> 2] | 0;
   HEAP8[i16 >> 0] = i15;
   HEAP8[i16 + 1 >> 0] = i15 >> 8;
   HEAP8[i16 + 2 >> 0] = i15 >> 16;
   HEAP8[i16 + 3 >> 0] = i15 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 127](i10, i2);
   if (!(HEAP8[i17 >> 0] & 1)) {
    HEAP8[i17 + 1 >> 0] = 0;
    HEAP8[i17 >> 0] = 0;
   } else {
    HEAP8[HEAP32[i17 + 8 >> 2] >> 0] = 0;
    HEAP32[i17 + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i17, 0);
   HEAP32[i17 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i17 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
   HEAP32[i17 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
   HEAP32[i10 >> 2] = 0;
   HEAP32[i10 + 4 >> 2] = 0;
   HEAP32[i10 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
   i1 = i2;
  }
  HEAP8[i18 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 127](i2) | 0;
  HEAP8[i21 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 127](i11, i2);
  if (!(HEAP8[i19 >> 0] & 1)) {
   HEAP8[i19 + 1 >> 0] = 0;
   HEAP8[i19 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i19 + 8 >> 2] >> 0] = 0;
   HEAP32[i19 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i19, 0);
  HEAP32[i19 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i19 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i19 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i11 >> 2] = 0;
  HEAP32[i11 + 4 >> 2] = 0;
  HEAP32[i11 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 127](i12, i2);
  if (!(HEAP8[i20 >> 0] & 1)) {
   HEAP8[i20 + 1 >> 0] = 0;
   HEAP8[i20 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i20 + 8 >> 2] >> 0] = 0;
   HEAP32[i20 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i20, 0);
  HEAP32[i20 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i20 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i20 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  HEAP32[i12 >> 2] = 0;
  HEAP32[i12 + 4 >> 2] = 0;
  HEAP32[i12 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0;
 }
 HEAP32[i22 >> 2] = i1;
 STACKTOP = i23;
 return;
}

function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri(i1, i17, i2, i18, i15, i21, i16, i20, i19, i22) {
 i1 = i1 | 0;
 i17 = i17 | 0;
 i2 = i2 | 0;
 i18 = i18 | 0;
 i15 = i15 | 0;
 i21 = i21 | 0;
 i16 = i16 | 0;
 i20 = i20 | 0;
 i19 = i19 | 0;
 i22 = i22 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i3 = i23 + 108 | 0;
 i4 = i23 + 96 | 0;
 i7 = i23 + 92 | 0;
 i8 = i23 + 80 | 0;
 i9 = i23 + 68 | 0;
 i10 = i23 + 56 | 0;
 i11 = i23 + 52 | 0;
 i12 = i23 + 40 | 0;
 i13 = i23 + 36 | 0;
 i14 = i23 + 24 | 0;
 i5 = i23 + 12 | 0;
 i6 = i23;
 if (i1) {
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 30120) | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i17) {
   FUNCTION_TABLE_vii[HEAP32[i2 + 44 >> 2] & 127](i3, i1);
   i17 = HEAP32[i3 >> 2] | 0;
   HEAP8[i18 >> 0] = i17;
   HEAP8[i18 + 1 >> 0] = i17 >> 8;
   HEAP8[i18 + 2 >> 0] = i17 >> 16;
   HEAP8[i18 + 3 >> 0] = i17 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 127](i4, i1);
   if (!(HEAP8[i19 >> 0] & 1)) HEAP8[i19 >> 0] = 0; else HEAP32[HEAP32[i19 + 8 >> 2] >> 2] = 0;
   HEAP32[i19 + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i19, 0);
   HEAP32[i19 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i19 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
   HEAP32[i19 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
   HEAP32[i4 >> 2] = 0;
   HEAP32[i4 + 4 >> 2] = 0;
   HEAP32[i4 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i4);
  } else {
   FUNCTION_TABLE_vii[HEAP32[i2 + 40 >> 2] & 127](i7, i1);
   i17 = HEAP32[i7 >> 2] | 0;
   HEAP8[i18 >> 0] = i17;
   HEAP8[i18 + 1 >> 0] = i17 >> 8;
   HEAP8[i18 + 2 >> 0] = i17 >> 16;
   HEAP8[i18 + 3 >> 0] = i17 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i8, i1);
   if (!(HEAP8[i19 >> 0] & 1)) HEAP8[i19 >> 0] = 0; else HEAP32[HEAP32[i19 + 8 >> 2] >> 2] = 0;
   HEAP32[i19 + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i19, 0);
   HEAP32[i19 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i19 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
   HEAP32[i19 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
   HEAP32[i8 >> 2] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
   HEAP32[i8 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i8);
  }
  HEAP32[i15 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP32[i21 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 127](i9, i1);
  if (!(HEAP8[i16 >> 0] & 1)) {
   HEAP8[i16 + 1 >> 0] = 0;
   HEAP8[i16 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i16 + 8 >> 2] >> 0] = 0;
   HEAP32[i16 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i16, 0);
  HEAP32[i16 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i16 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
  HEAP32[i16 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
  HEAP32[i9 >> 2] = 0;
  HEAP32[i9 + 4 >> 2] = 0;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i9);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 127](i10, i1);
  if (!(HEAP8[i20 >> 0] & 1)) HEAP8[i20 >> 0] = 0; else HEAP32[HEAP32[i20 + 8 >> 2] >> 2] = 0;
  HEAP32[i20 + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i20, 0);
  HEAP32[i20 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i20 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
  HEAP32[i20 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
  HEAP32[i10 >> 2] = 0;
  HEAP32[i10 + 4 >> 2] = 0;
  HEAP32[i10 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i10);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 } else {
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 30056) | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i17) {
   FUNCTION_TABLE_vii[HEAP32[i2 + 44 >> 2] & 127](i11, i1);
   i17 = HEAP32[i11 >> 2] | 0;
   HEAP8[i18 >> 0] = i17;
   HEAP8[i18 + 1 >> 0] = i17 >> 8;
   HEAP8[i18 + 2 >> 0] = i17 >> 16;
   HEAP8[i18 + 3 >> 0] = i17 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 127](i12, i1);
   if (!(HEAP8[i19 >> 0] & 1)) HEAP8[i19 >> 0] = 0; else HEAP32[HEAP32[i19 + 8 >> 2] >> 2] = 0;
   HEAP32[i19 + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i19, 0);
   HEAP32[i19 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i19 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
   HEAP32[i19 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
   HEAP32[i12 >> 2] = 0;
   HEAP32[i12 + 4 >> 2] = 0;
   HEAP32[i12 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i12);
  } else {
   FUNCTION_TABLE_vii[HEAP32[i2 + 40 >> 2] & 127](i13, i1);
   i17 = HEAP32[i13 >> 2] | 0;
   HEAP8[i18 >> 0] = i17;
   HEAP8[i18 + 1 >> 0] = i17 >> 8;
   HEAP8[i18 + 2 >> 0] = i17 >> 16;
   HEAP8[i18 + 3 >> 0] = i17 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i14, i1);
   if (!(HEAP8[i19 >> 0] & 1)) HEAP8[i19 >> 0] = 0; else HEAP32[HEAP32[i19 + 8 >> 2] >> 2] = 0;
   HEAP32[i19 + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i19, 0);
   HEAP32[i19 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i19 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
   HEAP32[i19 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
   HEAP32[i14 >> 2] = 0;
   HEAP32[i14 + 4 >> 2] = 0;
   HEAP32[i14 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i14);
  }
  HEAP32[i15 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP32[i21 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 127](i5, i1);
  if (!(HEAP8[i16 >> 0] & 1)) {
   HEAP8[i16 + 1 >> 0] = 0;
   HEAP8[i16 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i16 + 8 >> 2] >> 0] = 0;
   HEAP32[i16 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i16, 0);
  HEAP32[i16 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i16 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i16 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  HEAP32[i5 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i5);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 127](i6, i1);
  if (!(HEAP8[i20 >> 0] & 1)) HEAP8[i20 >> 0] = 0; else HEAP32[HEAP32[i20 + 8 >> 2] >> 2] = 0;
  HEAP32[i20 + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i20, 0);
  HEAP32[i20 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i20 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i20 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i6 >> 2] = 0;
  HEAP32[i6 + 4 >> 2] = 0;
  HEAP32[i6 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i6);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 }
 HEAP32[i22 >> 2] = i1;
 STACKTOP = i23;
 return;
}

function _GLES2_UpdateTexture(i4, i5, i28, i1, i29) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i28 = i28 | 0;
 i1 = i1 | 0;
 i29 = i29 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0;
 i33 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i32 = i33;
 i30 = i4 + 316 | 0;
 i31 = HEAP32[i30 >> 2] | 0;
 i27 = HEAP32[i5 + 68 >> 2] | 0;
 i3 = HEAP32[i31 >> 2] | 0;
 if ((HEAP32[3491] | 0) != (i3 | 0)) {
  HEAP32[i31 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i4 + 188 >> 2] | 0, i3) | 0) >= 0) {
   HEAP32[3491] = HEAP32[i31 >> 2];
   _GLES2_UpdateViewport(i4) | 0;
   i2 = HEAP32[i30 >> 2] | 0;
   i16 = 4;
  }
 } else {
  i2 = i31;
  i16 = 4;
 }
 if ((i16 | 0) == 4 ? (HEAP32[i2 + 4 >> 2] | 0) != 0 : 0) {
  i2 = i2 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i2 >> 2] & 7]() | 0) != 0);
 }
 i25 = i28 + 8 | 0;
 if ((HEAP32[i25 >> 2] | 0) < 1) {
  i32 = 0;
  STACKTOP = i33;
  return i32 | 0;
 }
 i26 = i28 + 12 | 0;
 if ((HEAP32[i26 >> 2] | 0) < 1) {
  i32 = 0;
  STACKTOP = i33;
  return i32 | 0;
 }
 i22 = i31 + 28 | 0;
 i23 = i27 + 4 | 0;
 FUNCTION_TABLE_vii[HEAP32[i22 >> 2] & 127](HEAP32[i23 >> 2] | 0, HEAP32[i27 >> 2] | 0);
 i7 = HEAP32[i23 >> 2] | 0;
 i8 = HEAP32[i28 >> 2] | 0;
 i24 = i28 + 4 | 0;
 i9 = HEAP32[i24 >> 2] | 0;
 i10 = HEAP32[i25 >> 2] | 0;
 i11 = HEAP32[i26 >> 2] | 0;
 i20 = i27 + 8 | 0;
 i12 = HEAP32[i20 >> 2] | 0;
 i21 = i27 + 12 | 0;
 i13 = HEAP32[i21 >> 2] | 0;
 i19 = i5 + 4 | 0;
 i2 = HEAP32[i19 >> 2] | 0;
 L16 : do if ((i2 | 0) == 0 | (i2 & -268435456 | 0) == 268435456) i2 = i2 & 255; else {
  if ((i2 | 0) < 1498831189) switch (i2 | 0) {
  case 844715353:
   {
    i2 = 2;
    break L16;
   }
  default:
   {}
  } else switch (i2 | 0) {
  case 1498831189:
   {
    i2 = 2;
    break L16;
   }
  default:
   {}
  }
  i2 = (i2 | 0) == 1431918169 ? 2 : 1;
 } while (0);
 i5 = Math_imul(i2, i10) | 0;
 do if ((i5 | 0) != (i29 | 0)) {
  i6 = _SDL_malloc(Math_imul(i5, i11) | 0) | 0;
  if (!i6) {
   _SDL_Error(0) | 0;
   break;
  }
  if ((i11 | 0) > 0) {
   i2 = i1;
   i3 = i6;
   i4 = 0;
   while (1) {
    _SDL_memcpy(i3, i2, i5) | 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) == (i11 | 0)) {
     i14 = i6;
     i15 = i6;
     i16 = 18;
     break;
    } else {
     i2 = i2 + i29 | 0;
     i3 = i3 + i5 | 0;
    }
   }
  } else {
   i14 = i6;
   i15 = i6;
   i16 = 18;
  }
 } else {
  i14 = 0;
  i15 = i1;
  i16 = 18;
 } while (0);
 if ((i16 | 0) == 18 ? (FUNCTION_TABLE_viiiiiiiii[HEAP32[i31 + 164 >> 2] & 15](i7, 0, i8, i9, i10, i11, i12, i13, i15), (i14 | 0) != 0) : 0) _SDL_free(i14);
 do if (HEAP32[i27 + 24 >> 2] | 0) {
  i13 = Math_imul(HEAP32[i26 >> 2] | 0, i29) | 0;
  i4 = i1 + i13 | 0;
  i2 = HEAP32[i22 >> 2] | 0;
  i3 = HEAP32[i23 >> 2] | 0;
  if ((HEAP32[i19 >> 2] | 0) == 842094169) FUNCTION_TABLE_vii[i2 & 127](i3, HEAP32[i27 + 32 >> 2] | 0); else FUNCTION_TABLE_vii[i2 & 127](i3, HEAP32[i27 + 36 >> 2] | 0);
  i5 = HEAP32[i23 >> 2] | 0;
  i6 = (HEAP32[i28 >> 2] | 0) / 2 | 0;
  i7 = (HEAP32[i24 >> 2] | 0) / 2 | 0;
  i8 = (HEAP32[i25 >> 2] | 0) / 2 | 0;
  i2 = HEAP32[i26 >> 2] | 0;
  i9 = (i2 | 0) / 2 | 0;
  i10 = HEAP32[i20 >> 2] | 0;
  i11 = HEAP32[i21 >> 2] | 0;
  i14 = (i29 | 0) / 2 | 0;
  do if ((i8 | 0) != (i14 | 0)) {
   i12 = _SDL_malloc(Math_imul(i9, i8) | 0) | 0;
   if (!i12) {
    _SDL_Error(0) | 0;
    break;
   }
   if ((i2 | 0) > 1) {
    i2 = i4;
    i3 = i12;
    i4 = 0;
    while (1) {
     _SDL_memcpy(i3, i2, i8) | 0;
     i4 = i4 + 1 | 0;
     if ((i4 | 0) == (i9 | 0)) {
      i17 = i12;
      i18 = i12;
      i16 = 29;
      break;
     } else {
      i2 = i2 + i14 | 0;
      i3 = i3 + i8 | 0;
     }
    }
   } else {
    i17 = i12;
    i18 = i12;
    i16 = 29;
   }
  } else {
   i17 = 0;
   i18 = i4;
   i16 = 29;
  } while (0);
  if ((i16 | 0) == 29 ? (FUNCTION_TABLE_viiiiiiiii[HEAP32[i31 + 164 >> 2] & 15](i5, 0, i6, i7, i8, i9, i10, i11, i18), (i17 | 0) != 0) : 0) _SDL_free(i17);
  i1 = i1 + (((Math_imul(HEAP32[i26 >> 2] | 0, i29) | 0) / 4 | 0) + i13) | 0;
  i2 = HEAP32[i22 >> 2] | 0;
  i3 = HEAP32[i23 >> 2] | 0;
  if ((HEAP32[i19 >> 2] | 0) == 842094169) FUNCTION_TABLE_vii[i2 & 127](i3, HEAP32[i27 + 36 >> 2] | 0); else FUNCTION_TABLE_vii[i2 & 127](i3, HEAP32[i27 + 32 >> 2] | 0);
  i8 = HEAP32[i23 >> 2] | 0;
  i9 = (HEAP32[i28 >> 2] | 0) / 2 | 0;
  i10 = (HEAP32[i24 >> 2] | 0) / 2 | 0;
  i11 = (HEAP32[i25 >> 2] | 0) / 2 | 0;
  i2 = HEAP32[i26 >> 2] | 0;
  i12 = (i2 | 0) / 2 | 0;
  i7 = HEAP32[i20 >> 2] | 0;
  i6 = HEAP32[i21 >> 2] | 0;
  if ((i11 | 0) != (i14 | 0)) {
   i5 = _SDL_malloc(Math_imul(i12, i11) | 0) | 0;
   if (!i5) {
    _SDL_Error(0) | 0;
    break;
   }
   if ((i2 | 0) > 1) {
    i2 = i1;
    i3 = i5;
    i4 = 0;
    while (1) {
     _SDL_memcpy(i3, i2, i11) | 0;
     i4 = i4 + 1 | 0;
     if ((i4 | 0) == (i12 | 0)) {
      i3 = i5;
      i2 = i5;
      break;
     } else {
      i2 = i2 + i14 | 0;
      i3 = i3 + i11 | 0;
     }
    }
   } else {
    i3 = i5;
    i2 = i5;
   }
  } else {
   i3 = 0;
   i2 = i1;
  }
  FUNCTION_TABLE_viiiiiiiii[HEAP32[i31 + 164 >> 2] & 15](i8, 0, i9, i10, i11, i12, i7, i6, i2);
  if (i3) _SDL_free(i3);
 } while (0);
 do if (HEAP32[i27 + 28 >> 2] | 0) {
  i1 = i1 + (Math_imul(HEAP32[i26 >> 2] | 0, i29) | 0) | 0;
  FUNCTION_TABLE_vii[HEAP32[i22 >> 2] & 127](HEAP32[i23 >> 2] | 0, HEAP32[i27 + 36 >> 2] | 0);
  i10 = HEAP32[i23 >> 2] | 0;
  i9 = (HEAP32[i28 >> 2] | 0) / 2 | 0;
  i8 = (HEAP32[i24 >> 2] | 0) / 2 | 0;
  i7 = (HEAP32[i25 >> 2] | 0) / 2 | 0;
  i2 = HEAP32[i26 >> 2] | 0;
  i6 = (i2 | 0) / 2 | 0;
  i4 = i7 << 1;
  if ((i4 | 0) != (i29 | 0)) {
   i5 = _SDL_malloc(Math_imul(i6, i4) | 0) | 0;
   if (!i5) {
    _SDL_Error(0) | 0;
    break;
   }
   if ((i2 | 0) > 1) {
    i2 = i5;
    i3 = 0;
    while (1) {
     _SDL_memcpy(i2, i1, i4) | 0;
     i3 = i3 + 1 | 0;
     if ((i3 | 0) == (i6 | 0)) {
      i2 = i5;
      i1 = i5;
      break;
     } else {
      i1 = i1 + i29 | 0;
      i2 = i2 + i4 | 0;
     }
    }
   } else {
    i2 = i5;
    i1 = i5;
   }
  } else i2 = 0;
  FUNCTION_TABLE_viiiiiiiii[HEAP32[i31 + 164 >> 2] & 15](i10, 0, i9, i8, i7, i6, 6410, 5121, i1);
  if (i2) _SDL_free(i2);
 } while (0);
 i1 = HEAP32[i30 >> 2] | 0;
 if (!(HEAP32[i1 + 4 >> 2] | 0)) {
  i32 = 0;
  STACKTOP = i33;
  return i32 | 0;
 }
 i3 = i1 + 108 | 0;
 i1 = FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 7]() | 0;
 if (!i1) {
  i32 = 0;
  STACKTOP = i33;
  return i32 | 0;
 }
 while (1) {
  switch (i1 | 0) {
  case 1280:
   {
    i2 = 46398;
    break;
   }
  case 1281:
   {
    i2 = 46381;
    break;
   }
  case 1282:
   {
    i2 = 46360;
    break;
   }
  case 1285:
   {
    i2 = 46343;
    break;
   }
  default:
   i2 = 46335;
  }
  HEAP32[i32 >> 2] = 47453;
  HEAP32[i32 + 4 >> 2] = 46440;
  HEAP32[i32 + 8 >> 2] = 735;
  HEAP32[i32 + 12 >> 2] = 47607;
  HEAP32[i32 + 16 >> 2] = i2;
  HEAP32[i32 + 20 >> 2] = i1;
  _SDL_SetError(46414, i32) | 0;
  i1 = FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 7]() | 0;
  if (!i1) {
   i1 = -1;
   break;
  }
 }
 STACKTOP = i33;
 return i1 | 0;
}
function _SDL_BlendPoint_RGB(i5, i8, i9, i4, i7, i6, i3, i1) {
 i5 = i5 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = HEAP32[i5 + 4 >> 2] | 0;
 i1 = i1 & 255 ^ 255;
 switch (HEAPU8[i2 + 9 >> 0] | 0 | 0) {
 case 2:
  switch (i4 | 0) {
  case 1:
   {
    i9 = (HEAP32[i5 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i5 + 16 >> 2] | 0, i9) | 0) + (i8 << 1)) | 0;
    i10 = HEAPU16[i9 >> 1] | 0;
    i12 = HEAPU8[i2 + 32 >> 0] | 0;
    i13 = HEAPU8[i2 + 28 >> 0] | 0;
    i8 = HEAPU8[i2 + 33 >> 0] | 0;
    i11 = HEAPU8[i2 + 29 >> 0] | 0;
    i5 = HEAPU8[i2 + 34 >> 0] | 0;
    i4 = HEAPU8[i2 + 30 >> 0] | 0;
    i7 = ((((Math_imul(HEAPU8[(HEAP32[5992 + (i13 << 2) >> 2] | 0) + ((i10 & HEAP32[i2 + 12 >> 2]) >>> i12) >> 0] | 0, i1) | 0) >>> 0) / 255 | 0) + (i7 & 255) | 0) >>> i13 << i12;
    i8 = ((((Math_imul(HEAPU8[(HEAP32[5992 + (i11 << 2) >> 2] | 0) + ((HEAP32[i2 + 16 >> 2] & i10) >>> i8) >> 0] | 0, i1) | 0) >>> 0) / 255 | 0) + (i6 & 255) | 0) >>> i11 << i8;
    HEAP16[i9 >> 1] = ((((Math_imul(HEAPU8[(HEAP32[5992 + (i4 << 2) >> 2] | 0) + ((HEAP32[i2 + 20 >> 2] & i10) >>> i5) >> 0] | 0, i1) | 0) >>> 0) / 255 | 0) + (i3 & 255) | 0) >>> i4 << i5 | (HEAP32[i2 + 24 >> 2] | i7 | i8);
    i9 = 0;
    return i9 | 0;
   }
  case 2:
   {
    i13 = (HEAP32[i5 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i5 + 16 >> 2] | 0, i9) | 0) + (i8 << 1)) | 0;
    i10 = HEAPU16[i13 >> 1] | 0;
    i9 = HEAPU8[i2 + 32 >> 0] | 0;
    i8 = HEAPU8[i2 + 28 >> 0] | 0;
    i5 = HEAPU8[i2 + 33 >> 0] | 0;
    i4 = HEAPU8[i2 + 29 >> 0] | 0;
    i12 = HEAPU8[i2 + 34 >> 0] | 0;
    i11 = HEAPU8[i2 + 30 >> 0] | 0;
    i7 = (HEAPU8[(HEAP32[5992 + (i8 << 2) >> 2] | 0) + ((i10 & HEAP32[i2 + 12 >> 2]) >>> i9) >> 0] | 0) + (i7 & 255) | 0;
    i6 = (HEAPU8[(HEAP32[5992 + (i4 << 2) >> 2] | 0) + ((HEAP32[i2 + 16 >> 2] & i10) >>> i5) >> 0] | 0) + (i6 & 255) | 0;
    i10 = (HEAPU8[(HEAP32[5992 + (i11 << 2) >> 2] | 0) + ((HEAP32[i2 + 20 >> 2] & i10) >>> i12) >> 0] | 0) + (i3 & 255) | 0;
    HEAP16[i13 >> 1] = (i6 >>> 0 > 255 ? 255 : i6) >>> i4 << i5 | (i7 >>> 0 > 255 ? 255 : i7) >>> i8 << i9 | HEAP32[i2 + 24 >> 2] | (i10 >>> 0 > 255 ? 255 : i10) >>> i11 << i12;
    i13 = 0;
    return i13 | 0;
   }
  case 4:
   {
    i13 = (HEAP32[i5 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i5 + 16 >> 2] | 0, i9) | 0) + (i8 << 1)) | 0;
    i9 = HEAPU16[i13 >> 1] | 0;
    i12 = HEAPU8[i2 + 32 >> 0] | 0;
    i8 = HEAPU8[i2 + 28 >> 0] | 0;
    i5 = HEAPU8[i2 + 33 >> 0] | 0;
    i4 = HEAPU8[i2 + 29 >> 0] | 0;
    i11 = HEAPU8[i2 + 34 >> 0] | 0;
    i10 = HEAPU8[i2 + 30 >> 0] | 0;
    i12 = (((Math_imul(HEAPU8[(HEAP32[5992 + (i4 << 2) >> 2] | 0) + ((HEAP32[i2 + 16 >> 2] & i9) >>> i5) >> 0] | 0, i6 & 255) | 0) >>> 0) / 255 | 0) >>> i4 << i5 | (((Math_imul(HEAPU8[(HEAP32[5992 + (i8 << 2) >> 2] | 0) + ((i9 & HEAP32[i2 + 12 >> 2]) >>> i12) >> 0] | 0, i7 & 255) | 0) >>> 0) / 255 | 0) >>> i8 << i12;
    HEAP16[i13 >> 1] = (((Math_imul(HEAPU8[(HEAP32[5992 + (i10 << 2) >> 2] | 0) + ((HEAP32[i2 + 20 >> 2] & i9) >>> i11) >> 0] | 0, i3 & 255) | 0) >>> 0) / 255 | 0) >>> i10 << i11 | (i12 | HEAP32[i2 + 24 >> 2]);
    i13 = 0;
    return i13 | 0;
   }
  default:
   {
    HEAP16[(HEAP32[i5 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i5 + 16 >> 2] | 0, i9) | 0) + (i8 << 1)) >> 1] = (i6 & 255) >>> (HEAPU8[i2 + 29 >> 0] | 0) << (HEAPU8[i2 + 33 >> 0] | 0) | (i7 & 255) >>> (HEAPU8[i2 + 28 >> 0] | 0) << (HEAPU8[i2 + 32 >> 0] | 0) | HEAP32[i2 + 24 >> 2] | (i3 & 255) >>> (HEAPU8[i2 + 30 >> 0] | 0) << (HEAPU8[i2 + 34 >> 0] | 0);
    i13 = 0;
    return i13 | 0;
   }
  }
 case 4:
  switch (i4 | 0) {
  case 1:
   {
    i13 = (HEAP32[i5 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i5 + 16 >> 2] | 0, i9) | 0) + (i8 << 2)) | 0;
    i8 = HEAP32[i13 >> 2] | 0;
    i11 = HEAPU8[i2 + 32 >> 0] | 0;
    i4 = HEAPU8[i2 + 28 >> 0] | 0;
    i12 = HEAPU8[i2 + 33 >> 0] | 0;
    i5 = HEAPU8[i2 + 29 >> 0] | 0;
    i10 = HEAPU8[i2 + 34 >> 0] | 0;
    i9 = HEAPU8[i2 + 30 >> 0] | 0;
    i11 = ((((Math_imul(HEAPU8[(HEAP32[5992 + (i4 << 2) >> 2] | 0) + ((HEAP32[i2 + 12 >> 2] & i8) >>> i11) >> 0] | 0, i1) | 0) >>> 0) / 255 | 0) + (i7 & 255) | 0) >>> i4 << i11;
    i12 = ((((Math_imul(HEAPU8[(HEAP32[5992 + (i5 << 2) >> 2] | 0) + ((HEAP32[i2 + 16 >> 2] & i8) >>> i12) >> 0] | 0, i1) | 0) >>> 0) / 255 | 0) + (i6 & 255) | 0) >>> i5 << i12;
    HEAP32[i13 >> 2] = ((((Math_imul(HEAPU8[(HEAP32[5992 + (i9 << 2) >> 2] | 0) + ((HEAP32[i2 + 20 >> 2] & i8) >>> i10) >> 0] | 0, i1) | 0) >>> 0) / 255 | 0) + (i3 & 255) | 0) >>> i9 << i10 | (HEAP32[i2 + 24 >> 2] | i11 | i12);
    i13 = 0;
    return i13 | 0;
   }
  case 2:
   {
    i13 = (HEAP32[i5 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i5 + 16 >> 2] | 0, i9) | 0) + (i8 << 2)) | 0;
    i10 = HEAP32[i13 >> 2] | 0;
    i9 = HEAPU8[i2 + 32 >> 0] | 0;
    i8 = HEAPU8[i2 + 28 >> 0] | 0;
    i5 = HEAPU8[i2 + 33 >> 0] | 0;
    i4 = HEAPU8[i2 + 29 >> 0] | 0;
    i12 = HEAPU8[i2 + 34 >> 0] | 0;
    i11 = HEAPU8[i2 + 30 >> 0] | 0;
    i7 = (HEAPU8[(HEAP32[5992 + (i8 << 2) >> 2] | 0) + ((HEAP32[i2 + 12 >> 2] & i10) >>> i9) >> 0] | 0) + (i7 & 255) | 0;
    i6 = (HEAPU8[(HEAP32[5992 + (i4 << 2) >> 2] | 0) + ((HEAP32[i2 + 16 >> 2] & i10) >>> i5) >> 0] | 0) + (i6 & 255) | 0;
    i10 = (HEAPU8[(HEAP32[5992 + (i11 << 2) >> 2] | 0) + ((HEAP32[i2 + 20 >> 2] & i10) >>> i12) >> 0] | 0) + (i3 & 255) | 0;
    HEAP32[i13 >> 2] = (i6 >>> 0 > 255 ? 255 : i6) >>> i4 << i5 | (i7 >>> 0 > 255 ? 255 : i7) >>> i8 << i9 | HEAP32[i2 + 24 >> 2] | (i10 >>> 0 > 255 ? 255 : i10) >>> i11 << i12;
    i13 = 0;
    return i13 | 0;
   }
  case 4:
   {
    i13 = (HEAP32[i5 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i5 + 16 >> 2] | 0, i9) | 0) + (i8 << 2)) | 0;
    i9 = HEAP32[i13 >> 2] | 0;
    i12 = HEAPU8[i2 + 32 >> 0] | 0;
    i8 = HEAPU8[i2 + 28 >> 0] | 0;
    i5 = HEAPU8[i2 + 33 >> 0] | 0;
    i4 = HEAPU8[i2 + 29 >> 0] | 0;
    i11 = HEAPU8[i2 + 34 >> 0] | 0;
    i10 = HEAPU8[i2 + 30 >> 0] | 0;
    i12 = (((Math_imul(HEAPU8[(HEAP32[5992 + (i4 << 2) >> 2] | 0) + ((HEAP32[i2 + 16 >> 2] & i9) >>> i5) >> 0] | 0, i6 & 255) | 0) >>> 0) / 255 | 0) >>> i4 << i5 | (((Math_imul(HEAPU8[(HEAP32[5992 + (i8 << 2) >> 2] | 0) + ((HEAP32[i2 + 12 >> 2] & i9) >>> i12) >> 0] | 0, i7 & 255) | 0) >>> 0) / 255 | 0) >>> i8 << i12;
    HEAP32[i13 >> 2] = (((Math_imul(HEAPU8[(HEAP32[5992 + (i10 << 2) >> 2] | 0) + ((HEAP32[i2 + 20 >> 2] & i9) >>> i11) >> 0] | 0, i3 & 255) | 0) >>> 0) / 255 | 0) >>> i10 << i11 | (i12 | HEAP32[i2 + 24 >> 2]);
    i13 = 0;
    return i13 | 0;
   }
  default:
   {
    HEAP32[(HEAP32[i5 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i5 + 16 >> 2] | 0, i9) | 0) + (i8 << 2)) >> 2] = (i6 & 255) >>> (HEAPU8[i2 + 29 >> 0] | 0) << (HEAPU8[i2 + 33 >> 0] | 0) | (i7 & 255) >>> (HEAPU8[i2 + 28 >> 0] | 0) << (HEAPU8[i2 + 32 >> 0] | 0) | HEAP32[i2 + 24 >> 2] | (i3 & 255) >>> (HEAPU8[i2 + 30 >> 0] | 0) << (HEAPU8[i2 + 34 >> 0] | 0);
    i13 = 0;
    return i13 | 0;
   }
  }
 default:
  {
   i13 = _SDL_Error(4) | 0;
   return i13 | 0;
  }
 }
 return 0;
}

function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri(i1, i2, i16, i13, i19, i14, i18, i17, i15, i20) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i16 = i16 | 0;
 i13 = i13 | 0;
 i19 = i19 | 0;
 i14 = i14 | 0;
 i18 = i18 | 0;
 i17 = i17 | 0;
 i15 = i15 | 0;
 i20 = i20 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i21 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i3 = i21 + 100 | 0;
 i4 = i21 + 88 | 0;
 i5 = i21 + 76 | 0;
 i6 = i21 + 64 | 0;
 i7 = i21 + 52 | 0;
 i8 = i21 + 48 | 0;
 i9 = i21 + 36 | 0;
 i10 = i21 + 24 | 0;
 i11 = i21 + 12 | 0;
 i12 = i21;
 if (i1) {
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 29992) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 127](i3, i1);
  i12 = HEAP32[i3 >> 2] | 0;
  HEAP8[i16 >> 0] = i12;
  HEAP8[i16 + 1 >> 0] = i12 >> 8;
  HEAP8[i16 + 2 >> 0] = i12 >> 16;
  HEAP8[i16 + 3 >> 0] = i12 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 127](i4, i1);
  if (!(HEAP8[i15 >> 0] & 1)) {
   HEAP8[i15 + 1 >> 0] = 0;
   HEAP8[i15 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i15 + 8 >> 2] >> 0] = 0;
   HEAP32[i15 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i15, 0);
  HEAP32[i15 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i15 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i15 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i4 >> 2] = 0;
  HEAP32[i4 + 4 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i5, i1);
  if (!(HEAP8[i17 >> 0] & 1)) {
   HEAP8[i17 + 1 >> 0] = 0;
   HEAP8[i17 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i17 + 8 >> 2] >> 0] = 0;
   HEAP32[i17 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i17, 0);
  HEAP32[i17 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i17 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i17 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  HEAP32[i5 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i5);
  HEAP8[i13 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP8[i19 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 127](i6, i1);
  if (!(HEAP8[i14 >> 0] & 1)) {
   HEAP8[i14 + 1 >> 0] = 0;
   HEAP8[i14 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i14 + 8 >> 2] >> 0] = 0;
   HEAP32[i14 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i14, 0);
  HEAP32[i14 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i14 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i14 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i6 >> 2] = 0;
  HEAP32[i6 + 4 >> 2] = 0;
  HEAP32[i6 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 127](i7, i1);
  if (!(HEAP8[i18 >> 0] & 1)) {
   HEAP8[i18 + 1 >> 0] = 0;
   HEAP8[i18 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i18 + 8 >> 2] >> 0] = 0;
   HEAP32[i18 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i18, 0);
  HEAP32[i18 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i18 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i18 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAP32[i7 >> 2] = 0;
  HEAP32[i7 + 4 >> 2] = 0;
  HEAP32[i7 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i7);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 } else {
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 29928) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 127](i8, i1);
  i8 = HEAP32[i8 >> 2] | 0;
  HEAP8[i16 >> 0] = i8;
  HEAP8[i16 + 1 >> 0] = i8 >> 8;
  HEAP8[i16 + 2 >> 0] = i8 >> 16;
  HEAP8[i16 + 3 >> 0] = i8 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 127](i9, i1);
  if (!(HEAP8[i15 >> 0] & 1)) {
   HEAP8[i15 + 1 >> 0] = 0;
   HEAP8[i15 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i15 + 8 >> 2] >> 0] = 0;
   HEAP32[i15 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i15, 0);
  HEAP32[i15 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i15 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
  HEAP32[i15 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
  HEAP32[i9 >> 2] = 0;
  HEAP32[i9 + 4 >> 2] = 0;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i9);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i10, i1);
  if (!(HEAP8[i17 >> 0] & 1)) {
   HEAP8[i17 + 1 >> 0] = 0;
   HEAP8[i17 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i17 + 8 >> 2] >> 0] = 0;
   HEAP32[i17 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i17, 0);
  HEAP32[i17 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i17 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
  HEAP32[i17 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
  HEAP32[i10 >> 2] = 0;
  HEAP32[i10 + 4 >> 2] = 0;
  HEAP32[i10 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
  HEAP8[i13 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP8[i19 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 127](i11, i1);
  if (!(HEAP8[i14 >> 0] & 1)) {
   HEAP8[i14 + 1 >> 0] = 0;
   HEAP8[i14 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i14 + 8 >> 2] >> 0] = 0;
   HEAP32[i14 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i14, 0);
  HEAP32[i14 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i14 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i14 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i11 >> 2] = 0;
  HEAP32[i11 + 4 >> 2] = 0;
  HEAP32[i11 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 127](i12, i1);
  if (!(HEAP8[i18 >> 0] & 1)) {
   HEAP8[i18 + 1 >> 0] = 0;
   HEAP8[i18 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i18 + 8 >> 2] >> 0] = 0;
   HEAP32[i18 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i18, 0);
  HEAP32[i18 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i18 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i18 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  HEAP32[i12 >> 2] = 0;
  HEAP32[i12 + 4 >> 2] = 0;
  HEAP32[i12 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 }
 HEAP32[i20 >> 2] = i1;
 STACKTOP = i21;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i16, i17, i18, i14, i19, i15, i2, i13) {
 i16 = i16 | 0;
 i17 = i17 | 0;
 i18 = i18 | 0;
 i14 = i14 | 0;
 i19 = i19 | 0;
 i15 = i15 | 0;
 i2 = i2 | 0;
 i13 = i13 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i20 = 0, i21 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i21 + 16 | 0;
 i8 = i21 + 12 | 0;
 i12 = i21 + 8 | 0;
 i10 = i21 + 4 | 0;
 i11 = i21;
 i1 = __ZNKSt3__18ios_base6getlocEv(i14) | 0;
 HEAP32[i12 >> 2] = i1;
 i12 = __ZNKSt3__16locale9use_facetERNS0_2idE(i12, 30376) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i1) | 0;
 HEAP32[i19 >> 2] = 0;
 i1 = HEAP32[i17 >> 2] | 0;
 L1 : do if ((i2 | 0) != (i13 | 0)) {
  L2 : while (1) {
   i4 = i1;
   if (i1) {
    i3 = HEAP32[i1 + 12 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i3 = HEAP32[i3 >> 2] | 0;
    if ((i3 | 0) == -1) {
     HEAP32[i17 >> 2] = 0;
     i1 = 0;
     i6 = 1;
     i7 = 0;
    } else {
     i6 = 0;
     i7 = i4;
    }
   } else {
    i1 = 0;
    i6 = 1;
    i7 = i4;
   }
   i5 = HEAP32[i18 >> 2] | 0;
   i3 = i5;
   do if (i5) {
    i4 = HEAP32[i5 + 12 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0; else i4 = HEAP32[i4 >> 2] | 0;
    if ((i4 | 0) != -1) if (i6) break; else {
     i20 = 16;
     break L2;
    } else {
     HEAP32[i18 >> 2] = 0;
     i3 = 0;
     i20 = 14;
     break;
    }
   } else i20 = 14; while (0);
   if ((i20 | 0) == 14) {
    i20 = 0;
    if (i6) {
     i20 = 16;
     break;
    } else i5 = 0;
   }
   L24 : do if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 52 >> 2] & 63](i12, HEAP32[i2 >> 2] | 0, 0) | 0) << 24 >> 24 == 37) {
    i4 = i2 + 4 | 0;
    if ((i4 | 0) == (i13 | 0)) {
     i20 = 19;
     break L2;
    }
    i6 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 52 >> 2] & 63](i12, HEAP32[i4 >> 2] | 0, 0) | 0;
    switch (i6 << 24 >> 24) {
    case 48:
    case 69:
     {
      i5 = i2 + 8 | 0;
      if ((i5 | 0) == (i13 | 0)) {
       i20 = 22;
       break L2;
      }
      i2 = i4;
      i4 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 52 >> 2] & 63](i12, HEAP32[i5 >> 2] | 0, 0) | 0;
      i1 = i6;
      break;
     }
    default:
     {
      i4 = i6;
      i1 = 0;
     }
    }
    i6 = HEAP32[(HEAP32[i16 >> 2] | 0) + 36 >> 2] | 0;
    HEAP32[i10 >> 2] = i7;
    HEAP32[i11 >> 2] = i3;
    HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
    HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
    HEAP32[i17 >> 2] = FUNCTION_TABLE_iiiiiiiii[i6 & 31](i16, i8, i9, i14, i19, i15, i4, i1) | 0;
    i2 = i2 + 8 | 0;
   } else {
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 63](i12, 8192, HEAP32[i2 >> 2] | 0) | 0)) {
     i4 = i1 + 12 | 0;
     i3 = HEAP32[i4 >> 2] | 0;
     i5 = i1 + 16 | 0;
     if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i3 = HEAP32[i3 >> 2] | 0;
     i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 28 >> 2] & 63](i12, i3) | 0;
     if ((i7 | 0) != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 28 >> 2] & 63](i12, HEAP32[i2 >> 2] | 0) | 0)) {
      i20 = 59;
      break L2;
     }
     i3 = HEAP32[i4 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i4 >> 2] = i3 + 4;
     i2 = i2 + 4 | 0;
     break;
    }
    do {
     i2 = i2 + 4 | 0;
     if ((i2 | 0) == (i13 | 0)) {
      i2 = i13;
      break;
     }
    } while (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 63](i12, 8192, HEAP32[i2 >> 2] | 0) | 0);
    i3 = i5;
    i6 = i5;
    while (1) {
     if (i1) {
      i4 = HEAP32[i1 + 12 >> 2] | 0;
      if ((i4 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i4 = HEAP32[i4 >> 2] | 0;
      if ((i4 | 0) == -1) {
       HEAP32[i17 >> 2] = 0;
       i5 = 1;
       i1 = 0;
      } else i5 = 0;
     } else {
      i5 = 1;
      i1 = 0;
     }
     do if (i6) {
      i4 = HEAP32[i6 + 12 >> 2] | 0;
      if ((i4 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0; else i4 = HEAP32[i4 >> 2] | 0;
      if ((i4 | 0) != -1) if (i5 ^ (i3 | 0) == 0) {
       i7 = i3;
       i6 = i3;
       break;
      } else break L24; else {
       HEAP32[i18 >> 2] = 0;
       i3 = 0;
       i20 = 42;
       break;
      }
     } else i20 = 42; while (0);
     if ((i20 | 0) == 42) {
      i20 = 0;
      if (i5) break L24; else {
       i7 = i3;
       i6 = 0;
      }
     }
     i4 = i1 + 12 | 0;
     i3 = HEAP32[i4 >> 2] | 0;
     i5 = i1 + 16 | 0;
     if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i3 = HEAP32[i3 >> 2] | 0;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 63](i12, 8192, i3) | 0)) break L24;
     i3 = HEAP32[i4 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
      i3 = i7;
      continue;
     } else {
      HEAP32[i4 >> 2] = i3 + 4;
      i3 = i7;
      continue;
     }
    }
   } while (0);
   i1 = HEAP32[i17 >> 2] | 0;
   if (!((i2 | 0) != (i13 | 0) & (HEAP32[i19 >> 2] | 0) == 0)) break L1;
  }
  if ((i20 | 0) == 16) {
   HEAP32[i19 >> 2] = 4;
   break;
  } else if ((i20 | 0) == 19) {
   HEAP32[i19 >> 2] = 4;
   break;
  } else if ((i20 | 0) == 22) {
   HEAP32[i19 >> 2] = 4;
   break;
  } else if ((i20 | 0) == 59) {
   HEAP32[i19 >> 2] = 4;
   i1 = HEAP32[i17 >> 2] | 0;
   break;
  }
 } while (0);
 if (i1) {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAP32[i2 >> 2] | 0;
  if ((i2 | 0) == -1) {
   HEAP32[i17 >> 2] = 0;
   i1 = 0;
   i4 = 1;
  } else i4 = 0;
 } else {
  i1 = 0;
  i4 = 1;
 }
 i2 = HEAP32[i18 >> 2] | 0;
 do if (i2) {
  i3 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAP32[i3 >> 2] | 0;
  if ((i2 | 0) != -1) if (i4) break; else {
   i20 = 74;
   break;
  } else {
   HEAP32[i18 >> 2] = 0;
   i20 = 72;
   break;
  }
 } else i20 = 72; while (0);
 if ((i20 | 0) == 72 ? i4 : 0) i20 = 74;
 if ((i20 | 0) == 74) HEAP32[i19 >> 2] = HEAP32[i19 >> 2] | 2;
 STACKTOP = i21;
 return i1 | 0;
}

function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri(i1, i2, i16, i13, i19, i14, i18, i17, i15, i20) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i16 = i16 | 0;
 i13 = i13 | 0;
 i19 = i19 | 0;
 i14 = i14 | 0;
 i18 = i18 | 0;
 i17 = i17 | 0;
 i15 = i15 | 0;
 i20 = i20 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i21 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i3 = i21 + 100 | 0;
 i4 = i21 + 88 | 0;
 i5 = i21 + 76 | 0;
 i6 = i21 + 64 | 0;
 i7 = i21 + 52 | 0;
 i8 = i21 + 48 | 0;
 i9 = i21 + 36 | 0;
 i10 = i21 + 24 | 0;
 i11 = i21 + 12 | 0;
 i12 = i21;
 if (i1) {
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 30120) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 127](i3, i1);
  i12 = HEAP32[i3 >> 2] | 0;
  HEAP8[i16 >> 0] = i12;
  HEAP8[i16 + 1 >> 0] = i12 >> 8;
  HEAP8[i16 + 2 >> 0] = i12 >> 16;
  HEAP8[i16 + 3 >> 0] = i12 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 127](i4, i1);
  if (!(HEAP8[i15 >> 0] & 1)) HEAP8[i15 >> 0] = 0; else HEAP32[HEAP32[i15 + 8 >> 2] >> 2] = 0;
  HEAP32[i15 + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i15, 0);
  HEAP32[i15 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i15 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i15 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i4 >> 2] = 0;
  HEAP32[i4 + 4 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i4);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i5, i1);
  if (!(HEAP8[i17 >> 0] & 1)) HEAP8[i17 >> 0] = 0; else HEAP32[HEAP32[i17 + 8 >> 2] >> 2] = 0;
  HEAP32[i17 + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i17, 0);
  HEAP32[i17 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i17 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i17 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  HEAP32[i5 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i5);
  HEAP32[i13 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP32[i19 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 127](i6, i1);
  if (!(HEAP8[i14 >> 0] & 1)) {
   HEAP8[i14 + 1 >> 0] = 0;
   HEAP8[i14 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i14 + 8 >> 2] >> 0] = 0;
   HEAP32[i14 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i14, 0);
  HEAP32[i14 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i14 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i14 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i6 >> 2] = 0;
  HEAP32[i6 + 4 >> 2] = 0;
  HEAP32[i6 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 127](i7, i1);
  if (!(HEAP8[i18 >> 0] & 1)) HEAP8[i18 >> 0] = 0; else HEAP32[HEAP32[i18 + 8 >> 2] >> 2] = 0;
  HEAP32[i18 + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i18, 0);
  HEAP32[i18 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i18 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i18 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAP32[i7 >> 2] = 0;
  HEAP32[i7 + 4 >> 2] = 0;
  HEAP32[i7 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i7);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 } else {
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 30056) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 127](i8, i1);
  i8 = HEAP32[i8 >> 2] | 0;
  HEAP8[i16 >> 0] = i8;
  HEAP8[i16 + 1 >> 0] = i8 >> 8;
  HEAP8[i16 + 2 >> 0] = i8 >> 16;
  HEAP8[i16 + 3 >> 0] = i8 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 127](i9, i1);
  if (!(HEAP8[i15 >> 0] & 1)) HEAP8[i15 >> 0] = 0; else HEAP32[HEAP32[i15 + 8 >> 2] >> 2] = 0;
  HEAP32[i15 + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i15, 0);
  HEAP32[i15 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i15 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
  HEAP32[i15 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
  HEAP32[i9 >> 2] = 0;
  HEAP32[i9 + 4 >> 2] = 0;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i9);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i10, i1);
  if (!(HEAP8[i17 >> 0] & 1)) HEAP8[i17 >> 0] = 0; else HEAP32[HEAP32[i17 + 8 >> 2] >> 2] = 0;
  HEAP32[i17 + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i17, 0);
  HEAP32[i17 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i17 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
  HEAP32[i17 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
  HEAP32[i10 >> 2] = 0;
  HEAP32[i10 + 4 >> 2] = 0;
  HEAP32[i10 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i10);
  HEAP32[i13 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP32[i19 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 127](i11, i1);
  if (!(HEAP8[i14 >> 0] & 1)) {
   HEAP8[i14 + 1 >> 0] = 0;
   HEAP8[i14 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i14 + 8 >> 2] >> 0] = 0;
   HEAP32[i14 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i14, 0);
  HEAP32[i14 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i14 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i14 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i11 >> 2] = 0;
  HEAP32[i11 + 4 >> 2] = 0;
  HEAP32[i11 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 127](i12, i1);
  if (!(HEAP8[i18 >> 0] & 1)) HEAP8[i18 >> 0] = 0; else HEAP32[HEAP32[i18 + 8 >> 2] >> 2] = 0;
  HEAP32[i18 + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i18, 0);
  HEAP32[i18 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i18 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i18 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  HEAP32[i12 >> 2] = 0;
  HEAP32[i12 + 4 >> 2] = 0;
  HEAP32[i12 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i12);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 }
 HEAP32[i20 >> 2] = i1;
 STACKTOP = i21;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i18, i19, i20, i16, i21, i17, i2, i15) {
 i18 = i18 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 i16 = i16 | 0;
 i21 = i21 | 0;
 i17 = i17 | 0;
 i2 = i2 | 0;
 i15 = i15 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i22 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i23 + 16 | 0;
 i8 = i23 + 12 | 0;
 i12 = i23 + 8 | 0;
 i10 = i23 + 4 | 0;
 i11 = i23;
 i13 = __ZNKSt3__18ios_base6getlocEv(i16) | 0;
 HEAP32[i12 >> 2] = i13;
 i12 = __ZNKSt3__16locale9use_facetERNS0_2idE(i12, 30384) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i13) | 0;
 HEAP32[i21 >> 2] = 0;
 i13 = i12 + 8 | 0;
 i1 = HEAP32[i19 >> 2] | 0;
 L1 : do if ((i2 | 0) != (i15 | 0)) {
  L2 : while (1) {
   i3 = i1;
   if (i1) {
    if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
     HEAP32[i19 >> 2] = 0;
     i1 = 0;
     i3 = 0;
    }
   } else i1 = 0;
   i6 = (i1 | 0) == 0;
   i5 = HEAP32[i20 >> 2] | 0;
   i4 = i5;
   do if (i5) {
    if ((HEAP32[i5 + 12 >> 2] | 0) == (HEAP32[i5 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0) == -1 : 0) {
     HEAP32[i20 >> 2] = 0;
     i4 = 0;
     i22 = 11;
     break;
    }
    if (!i6) {
     i22 = 12;
     break L2;
    }
   } else i22 = 11; while (0);
   if ((i22 | 0) == 11) {
    i22 = 0;
    if (i6) {
     i22 = 12;
     break;
    } else i5 = 0;
   }
   L18 : do if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] & 63](i12, HEAP8[i2 >> 0] | 0, 0) | 0) << 24 >> 24 == 37) {
    i5 = i2 + 1 | 0;
    if ((i5 | 0) == (i15 | 0)) {
     i22 = 15;
     break L2;
    }
    i7 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] & 63](i12, HEAP8[i5 >> 0] | 0, 0) | 0;
    switch (i7 << 24 >> 24) {
    case 48:
    case 69:
     {
      i6 = i2 + 2 | 0;
      if ((i6 | 0) == (i15 | 0)) {
       i22 = 18;
       break L2;
      }
      i2 = i5;
      i5 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] & 63](i12, HEAP8[i6 >> 0] | 0, 0) | 0;
      i1 = i7;
      break;
     }
    default:
     {
      i5 = i7;
      i1 = 0;
     }
    }
    i7 = HEAP32[(HEAP32[i18 >> 2] | 0) + 36 >> 2] | 0;
    HEAP32[i10 >> 2] = i3;
    HEAP32[i11 >> 2] = i4;
    HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
    HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
    HEAP32[i19 >> 2] = FUNCTION_TABLE_iiiiiiiii[i7 & 31](i18, i8, i9, i16, i21, i17, i5, i1) | 0;
    i2 = i2 + 2 | 0;
   } else {
    i3 = HEAP8[i2 >> 0] | 0;
    if (i3 << 24 >> 24 > -1 ? (i14 = HEAP32[i13 >> 2] | 0, (HEAP16[i14 + (i3 << 24 >> 24 << 1) >> 1] & 8192) != 0) : 0) {
     do {
      i2 = i2 + 1 | 0;
      if ((i2 | 0) == (i15 | 0)) {
       i2 = i15;
       break;
      }
      i3 = HEAP8[i2 >> 0] | 0;
      if (i3 << 24 >> 24 <= -1) break;
     } while ((HEAP16[i14 + (i3 << 24 >> 24 << 1) >> 1] & 8192) != 0);
     i3 = i5;
     while (1) {
      if (i1) {
       if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
        HEAP32[i19 >> 2] = 0;
        i1 = 0;
       }
      } else i1 = 0;
      i4 = (i1 | 0) == 0;
      do if (i5) {
       if ((HEAP32[i5 + 12 >> 2] | 0) != (HEAP32[i5 + 16 >> 2] | 0)) if (i4) {
        i7 = i3;
        break;
       } else break L18;
       if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0) != -1) if (i4 ^ (i3 | 0) == 0) {
        i7 = i3;
        i5 = i3;
        break;
       } else break L18; else {
        HEAP32[i20 >> 2] = 0;
        i3 = 0;
        i22 = 37;
        break;
       }
      } else i22 = 37; while (0);
      if ((i22 | 0) == 37) {
       i22 = 0;
       if (i4) break L18; else {
        i7 = i3;
        i5 = 0;
       }
      }
      i4 = i1 + 12 | 0;
      i3 = HEAP32[i4 >> 2] | 0;
      i6 = i1 + 16 | 0;
      if ((i3 | 0) == (HEAP32[i6 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i3 = HEAPU8[i3 >> 0] | 0;
      if ((i3 & 255) << 24 >> 24 <= -1) break L18;
      if (!(HEAP16[(HEAP32[i13 >> 2] | 0) + (i3 << 24 >> 24 << 1) >> 1] & 8192)) break L18;
      i3 = HEAP32[i4 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i6 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
       i3 = i7;
       continue;
      } else {
       HEAP32[i4 >> 2] = i3 + 1;
       i3 = i7;
       continue;
      }
     }
    }
    i4 = i1 + 12 | 0;
    i3 = HEAP32[i4 >> 2] | 0;
    i5 = i1 + 16 | 0;
    if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i3 = HEAPU8[i3 >> 0] | 0;
    i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 63](i12, i3 & 255) | 0;
    if (i7 << 24 >> 24 != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 63](i12, HEAP8[i2 >> 0] | 0) | 0) << 24 >> 24) {
     i22 = 55;
     break L2;
    }
    i3 = HEAP32[i4 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i4 >> 2] = i3 + 1;
    i2 = i2 + 1 | 0;
   } while (0);
   i1 = HEAP32[i19 >> 2] | 0;
   if (!((i2 | 0) != (i15 | 0) & (HEAP32[i21 >> 2] | 0) == 0)) break L1;
  }
  if ((i22 | 0) == 12) {
   HEAP32[i21 >> 2] = 4;
   break;
  } else if ((i22 | 0) == 15) {
   HEAP32[i21 >> 2] = 4;
   break;
  } else if ((i22 | 0) == 18) {
   HEAP32[i21 >> 2] = 4;
   break;
  } else if ((i22 | 0) == 55) {
   HEAP32[i21 >> 2] = 4;
   i1 = HEAP32[i19 >> 2] | 0;
   break;
  }
 } while (0);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i19 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i2 = (i1 | 0) == 0;
 i3 = HEAP32[i20 >> 2] | 0;
 do if (i3) {
  if ((HEAP32[i3 + 12 >> 2] | 0) == (HEAP32[i3 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) == -1 : 0) {
   HEAP32[i20 >> 2] = 0;
   i22 = 65;
   break;
  }
  if (!i2) i22 = 66;
 } else i22 = 65; while (0);
 if ((i22 | 0) == 65 ? i2 : 0) i22 = 66;
 if ((i22 | 0) == 66) HEAP32[i21 >> 2] = HEAP32[i21 >> 2] | 2;
 STACKTOP = i23;
 return i1 | 0;
}

function _GLES2_RenderCopyEx(i4, i17, i16, i12, d5, i6, i13) {
 i4 = i4 | 0;
 i17 = i17 | 0;
 i16 = i16 | 0;
 i12 = i12 | 0;
 d5 = +d5;
 i6 = i6 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, d7 = 0.0, i8 = 0, i9 = 0, d10 = 0.0, d11 = 0.0, i14 = 0, i15 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i22 = i23;
 i18 = i23 + 104 | 0;
 i21 = i23 + 72 | 0;
 i15 = i23 + 40 | 0;
 i14 = i23 + 24 | 0;
 i19 = i4 + 316 | 0;
 i20 = HEAP32[i19 >> 2] | 0;
 i2 = HEAP32[i20 >> 2] | 0;
 if ((HEAP32[3491] | 0) != (i2 | 0)) {
  HEAP32[i20 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i4 + 188 >> 2] | 0, i2) | 0) >= 0) {
   HEAP32[3491] = HEAP32[i20 >> 2];
   _GLES2_UpdateViewport(i4) | 0;
   i1 = HEAP32[i19 >> 2] | 0;
   i3 = 4;
  }
 } else {
  i1 = i20;
  i3 = 4;
 }
 if ((i3 | 0) == 4 ? (HEAP32[i1 + 4 >> 2] | 0) != 0 : 0) {
  i1 = i1 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 7]() | 0) != 0);
 }
 if ((_GLES2_SetupCopy(i4, i17) | 0) < 0) {
  i22 = -1;
  STACKTOP = i23;
  return i22 | 0;
 }
 i4 = i20 + 84 | 0;
 FUNCTION_TABLE_vi[HEAP32[i4 >> 2] & 511](3);
 FUNCTION_TABLE_vi[HEAP32[i4 >> 2] & 511](2);
 d10 = 360.0 - d5;
 HEAPF32[i14 + 12 >> 2] = d10;
 HEAPF32[i14 + 8 >> 2] = d10;
 HEAPF32[i14 + 4 >> 2] = d10;
 HEAPF32[i14 >> 2] = d10;
 d10 = +HEAPF32[i12 >> 2];
 d11 = +HEAPF32[i6 >> 2] + d10;
 HEAPF32[i15 + 24 >> 2] = d11;
 HEAPF32[i15 + 16 >> 2] = d11;
 HEAPF32[i15 + 8 >> 2] = d11;
 HEAPF32[i15 >> 2] = d11;
 d11 = +HEAPF32[i12 + 4 >> 2];
 d7 = +HEAPF32[i6 + 4 >> 2] + d11;
 HEAPF32[i15 + 28 >> 2] = d7;
 HEAPF32[i15 + 20 >> 2] = d7;
 HEAPF32[i15 + 12 >> 2] = d7;
 HEAPF32[i15 + 4 >> 2] = d7;
 HEAPF32[i18 >> 2] = d10;
 i4 = i18 + 4 | 0;
 HEAPF32[i4 >> 2] = d11;
 d7 = d10 + +HEAPF32[i12 + 8 >> 2];
 i6 = i18 + 8 | 0;
 HEAPF32[i6 >> 2] = d7;
 i8 = i18 + 12 | 0;
 HEAPF32[i8 >> 2] = d11;
 i9 = i18 + 16 | 0;
 HEAPF32[i9 >> 2] = d10;
 d5 = d11 + +HEAPF32[i12 + 12 >> 2];
 i1 = i18 + 20 | 0;
 HEAPF32[i1 >> 2] = d5;
 i2 = i18 + 24 | 0;
 HEAPF32[i2 >> 2] = d7;
 i3 = i18 + 28 | 0;
 HEAPF32[i3 >> 2] = d5;
 if (i13 & 1) {
  HEAPF32[i9 >> 2] = d7;
  HEAPF32[i18 >> 2] = d7;
  HEAPF32[i2 >> 2] = d10;
  HEAPF32[i6 >> 2] = d10;
 }
 if (i13 & 2) {
  HEAPF32[i8 >> 2] = d5;
  HEAPF32[i4 >> 2] = d5;
  HEAPF32[i3 >> 2] = d11;
  HEAPF32[i1 >> 2] = d11;
 }
 i3 = HEAP32[i19 >> 2] | 0;
 i2 = i3 + 284 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  FUNCTION_TABLE_vii[HEAP32[i3 + 216 >> 2] & 127](1, i2);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[i3 + 220 >> 2] & 127](34962, i1);
 i1 = i3 + 300 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 < 16) {
  FUNCTION_TABLE_viiii[HEAP32[i3 + 224 >> 2] & 63](34962, 16, i14, 35040);
  HEAP32[i1 >> 2] = 16;
 } else FUNCTION_TABLE_viiii[HEAP32[i3 + 228 >> 2] & 63](34962, 0, 16, i14);
 FUNCTION_TABLE_viiiiii[HEAP32[i3 + 184 >> 2] & 15](2, 1, 5126, 0, 0, 0);
 i3 = HEAP32[i19 >> 2] | 0;
 i2 = i3 + 288 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  FUNCTION_TABLE_vii[HEAP32[i3 + 216 >> 2] & 127](1, i2);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[i3 + 220 >> 2] & 127](34962, i1);
 i1 = i3 + 304 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 < 32) {
  FUNCTION_TABLE_viiii[HEAP32[i3 + 224 >> 2] & 63](34962, 32, i15, 35040);
  HEAP32[i1 >> 2] = 32;
 } else FUNCTION_TABLE_viiii[HEAP32[i3 + 228 >> 2] & 63](34962, 0, 32, i15);
 FUNCTION_TABLE_viiiiii[HEAP32[i3 + 184 >> 2] & 15](3, 2, 5126, 0, 0, 0);
 i3 = HEAP32[i19 >> 2] | 0;
 i2 = i3 + 276 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  FUNCTION_TABLE_vii[HEAP32[i3 + 216 >> 2] & 127](1, i2);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[i3 + 220 >> 2] & 127](34962, i1);
 i1 = i3 + 292 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 < 32) {
  FUNCTION_TABLE_viiii[HEAP32[i3 + 224 >> 2] & 63](34962, 32, i18, 35040);
  HEAP32[i1 >> 2] = 32;
 } else FUNCTION_TABLE_viiii[HEAP32[i3 + 228 >> 2] & 63](34962, 0, 32, i18);
 FUNCTION_TABLE_viiiiii[HEAP32[i3 + 184 >> 2] & 15](0, 2, 5126, 0, 0, 0);
 i2 = HEAP32[i16 >> 2] | 0;
 d10 = +(HEAP32[i17 + 12 >> 2] | 0);
 d7 = +(i2 | 0) / d10;
 HEAPF32[i21 >> 2] = d7;
 i3 = HEAP32[i16 + 4 >> 2] | 0;
 d11 = +(HEAP32[i17 + 16 >> 2] | 0);
 d5 = +(i3 | 0) / d11;
 HEAPF32[i21 + 4 >> 2] = d5;
 d10 = +((HEAP32[i16 + 8 >> 2] | 0) + i2 | 0) / d10;
 HEAPF32[i21 + 8 >> 2] = d10;
 HEAPF32[i21 + 12 >> 2] = d5;
 HEAPF32[i21 + 16 >> 2] = d7;
 d11 = +((HEAP32[i16 + 12 >> 2] | 0) + i3 | 0) / d11;
 HEAPF32[i21 + 20 >> 2] = d11;
 HEAPF32[i21 + 24 >> 2] = d10;
 HEAPF32[i21 + 28 >> 2] = d11;
 i3 = HEAP32[i19 >> 2] | 0;
 i2 = i3 + 280 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  FUNCTION_TABLE_vii[HEAP32[i3 + 216 >> 2] & 127](1, i2);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[i3 + 220 >> 2] & 127](34962, i1);
 i1 = i3 + 296 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 < 32) {
  FUNCTION_TABLE_viiii[HEAP32[i3 + 224 >> 2] & 63](34962, 32, i21, 35040);
  HEAP32[i1 >> 2] = 32;
 } else FUNCTION_TABLE_viiii[HEAP32[i3 + 228 >> 2] & 63](34962, 0, 32, i21);
 FUNCTION_TABLE_viiiiii[HEAP32[i3 + 184 >> 2] & 15](1, 2, 5126, 0, 0, 0);
 FUNCTION_TABLE_viii[HEAP32[i20 + 76 >> 2] & 31](5, 0, 4);
 i1 = i20 + 72 | 0;
 FUNCTION_TABLE_vi[HEAP32[i1 >> 2] & 511](3);
 FUNCTION_TABLE_vi[HEAP32[i1 >> 2] & 511](2);
 i1 = HEAP32[i19 >> 2] | 0;
 if (!(HEAP32[i1 + 4 >> 2] | 0)) {
  i22 = 0;
  STACKTOP = i23;
  return i22 | 0;
 }
 i4 = i1 + 108 | 0;
 i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
 if (!i1) {
  i22 = 0;
  STACKTOP = i23;
  return i22 | 0;
 } else i2 = 62969;
 while (1) {
  if ((i2 | 0) != 0 ? (HEAP8[i2 >> 0] | 0) != 0 : 0) i3 = i2; else i3 = 46327;
  switch (i1 | 0) {
  case 1280:
   {
    i2 = 46398;
    break;
   }
  case 1281:
   {
    i2 = 46381;
    break;
   }
  case 1282:
   {
    i2 = 46360;
    break;
   }
  case 1285:
   {
    i2 = 46343;
    break;
   }
  default:
   i2 = 46335;
  }
  HEAP32[i22 >> 2] = i3;
  HEAP32[i22 + 4 >> 2] = 46440;
  HEAP32[i22 + 8 >> 2] = 1802;
  HEAP32[i22 + 12 >> 2] = 46668;
  HEAP32[i22 + 16 >> 2] = i2;
  HEAP32[i22 + 20 >> 2] = i1;
  _SDL_SetError(46414, i22) | 0;
  i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
  if (!i1) {
   i1 = -1;
   break;
  } else i2 = i3;
 }
 STACKTOP = i23;
 return i1 | 0;
}

function _SDL_UpdateFullscreenMode(i17, i8) {
 i17 = i17 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i10 = i18 + 40 | 0;
 i11 = i18 + 32 | 0;
 i7 = i18 + 24 | 0;
 i6 = i18 + 16 | 0;
 i2 = i18 + 8 | 0;
 i16 = i18 + 84 | 0;
 i15 = i18 + 64 | 0;
 i12 = i18 + 44 | 0;
 i1 = HEAP32[3256] | 0;
 if (!i1) {
  _SDL_SetError(41242, i18) | 0;
  STACKTOP = i18;
  return;
 }
 if ((i17 | 0) != 0 ? (HEAP32[i17 >> 2] | 0) == (i1 + 248 | 0) : 0) {
  i2 = (i8 | 0) != 0;
  if (i2 & (HEAP32[i17 + 112 >> 2] | 0) != 0) {
   STACKTOP = i18;
   return;
  }
  i1 = _SDL_GetWindowDisplayIndex(i17) | 0;
  if ((i1 | 0) > -1) i13 = (HEAP32[(HEAP32[3256] | 0) + 240 >> 2] | 0) + (i1 * 68 | 0) | 0; else i13 = 0;
  i14 = i13 + 56 | 0;
  do if (i2 ? (i3 = HEAP32[i14 >> 2] | 0, !((i3 | 0) == 0 | (i3 | 0) == (i17 | 0))) : 0) {
   i1 = HEAP32[3256] | 0;
   if (!i1) {
    _SDL_SetError(41242, i6) | 0;
    break;
   }
   if ((HEAP32[i3 >> 2] | 0) != (i1 + 248 | 0)) {
    _SDL_SetError(41324, i7) | 0;
    break;
   }
   if ((HEAP32[i3 + 48 >> 2] & 64 | 0) == 0 ? (_SDL_UpdateFullscreenMode(i3, 0), i4 = HEAP32[3256] | 0, i5 = HEAP32[i4 + 72 >> 2] | 0, (i5 | 0) != 0) : 0) FUNCTION_TABLE_vii[i5 & 127](i4, i3);
  } while (0);
  if (((HEAP32[i14 >> 2] | 0) == (i17 | 0) | 0) == (i8 | 0) ? ((HEAP32[i17 + 48 >> 2] ^ HEAP32[i17 + 52 >> 2]) & 4097 | 0) == 0 : 0) {
   STACKTOP = i18;
   return;
  }
  i1 = HEAP32[(HEAP32[3256] | 0) + 244 >> 2] | 0;
  L30 : do if (i1) {
   L32 : do if (!i8) {
    i2 = i1;
    while (1) {
     if ((i2 | 0) != (i17 | 0) ? (HEAP32[i2 + 48 >> 2] & 69 | 0) == 5 : 0) {
      i1 = _SDL_GetWindowDisplayIndex(i2) | 0;
      if ((i1 | 0) > -1) i1 = (HEAP32[(HEAP32[3256] | 0) + 240 >> 2] | 0) + (i1 * 68 | 0) | 0; else i1 = 0;
      if ((i1 | 0) == (i13 | 0) ? (_SDL_memset(i12, 0, 20) | 0, (_SDL_GetWindowDisplayMode(i2, i12) | 0) == 0) : 0) break L32;
     }
     i2 = HEAP32[i2 + 144 >> 2] | 0;
     if (!i2) break L30;
    }
   } else {
    i2 = i1;
    while (1) {
     if ((i2 | 0) != (i17 | 0)) {
      if ((HEAP32[i2 + 48 >> 2] & 69 | 0) == 5) {
       i1 = _SDL_GetWindowDisplayIndex(i2) | 0;
       if ((i1 | 0) > -1) i1 = (HEAP32[(HEAP32[3256] | 0) + 240 >> 2] | 0) + (i1 * 68 | 0) | 0; else i1 = 0;
       if ((i1 | 0) == (i13 | 0)) i9 = 34;
      }
     } else i9 = 34;
     if ((i9 | 0) == 34 ? (i9 = 0, _SDL_memset(i12, 0, 20) | 0, (_SDL_GetWindowDisplayMode(i2, i12) | 0) == 0) : 0) break L32;
     i2 = HEAP32[i2 + 144 >> 2] | 0;
     if (!i2) break L30;
    }
   } while (0);
   i5 = i2 + 24 | 0;
   i6 = i12 + 4 | 0;
   if ((HEAP32[i5 >> 2] | 0) == (HEAP32[i6 >> 2] | 0)) i8 = (HEAP32[i2 + 28 >> 2] | 0) != (HEAP32[i12 + 8 >> 2] | 0) & 1; else i8 = 1;
   i7 = i17 + 48 | 0;
   if ((HEAP32[i7 >> 2] & 4097 | 0) == 4097) {
    i1 = i13 + 16 | 0;
    HEAP32[i16 >> 2] = HEAP32[i1 >> 2];
    HEAP32[i16 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
    HEAP32[i16 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
    HEAP32[i16 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
    HEAP32[i16 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
    i1 = i13 + 36 | 0;
    HEAP32[i15 >> 2] = HEAP32[i1 >> 2];
    HEAP32[i15 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
    HEAP32[i15 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
    HEAP32[i15 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
    HEAP32[i15 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
    do if (_SDL_memcmp(i16, i15, 20) | 0) {
     i3 = HEAP32[3256] | 0;
     i4 = HEAP32[i3 + 20 >> 2] | 0;
     if (!i4) {
      _SDL_SetError(48126, i11) | 0;
      break;
     }
     if ((FUNCTION_TABLE_iiii[i4 & 63](i3, i13, i16) | 0) >= 0) {
      HEAP32[i1 >> 2] = HEAP32[i16 >> 2];
      HEAP32[i1 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
      HEAP32[i1 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
      HEAP32[i1 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
      HEAP32[i1 + 16 >> 2] = HEAP32[i16 + 16 >> 2];
     }
    } while (0);
   } else _SDL_SetDisplayModeForDisplay(i13, i12);
   i1 = HEAP32[3256] | 0;
   i3 = HEAP32[i1 + 84 >> 2] | 0;
   if (i3) FUNCTION_TABLE_viiii[i3 & 63](i1, i2, i13, 1);
   HEAP32[i14 >> 2] = i2;
   if (!i8) {
    HEAP32[i2 + 108 >> 2] = 0;
    _SDL_SendWindowEvent(i2, 6, HEAP32[i5 >> 2] | 0, HEAP32[i2 + 28 >> 2] | 0) | 0;
   } else _SDL_SendWindowEvent(i2, 5, HEAP32[i6 >> 2] | 0, HEAP32[i12 + 8 >> 2] | 0) | 0;
   if ((_SDL_GetMouseFocus() | 0) == (i2 | 0)) {
    _SDL_GetMouseState(i16, i15) | 0;
    _SDL_WarpMouseInWindow(i2, HEAP32[i16 >> 2] | 0, HEAP32[i15 >> 2] | 0);
   }
   HEAP32[i17 + 52 >> 2] = HEAP32[i7 >> 2];
   STACKTOP = i18;
   return;
  } while (0);
  i1 = i13 + 16 | 0;
  HEAP32[i16 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i16 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i16 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i16 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
  HEAP32[i16 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
  i1 = i13 + 36 | 0;
  HEAP32[i15 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i15 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i15 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i15 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
  HEAP32[i15 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
  do if (_SDL_memcmp(i16, i15, 20) | 0) {
   i2 = HEAP32[3256] | 0;
   i3 = HEAP32[i2 + 20 >> 2] | 0;
   if (!i3) {
    _SDL_SetError(48126, i10) | 0;
    break;
   }
   if ((FUNCTION_TABLE_iiii[i3 & 63](i2, i13, i16) | 0) >= 0) {
    HEAP32[i1 >> 2] = HEAP32[i16 >> 2];
    HEAP32[i1 + 4 >> 2] = HEAP32[i16 + 4 >> 2];
    HEAP32[i1 + 8 >> 2] = HEAP32[i16 + 8 >> 2];
    HEAP32[i1 + 12 >> 2] = HEAP32[i16 + 12 >> 2];
    HEAP32[i1 + 16 >> 2] = HEAP32[i16 + 16 >> 2];
   }
  } while (0);
  i1 = HEAP32[3256] | 0;
  i2 = HEAP32[i1 + 84 >> 2] | 0;
  if (i2) FUNCTION_TABLE_viiii[i2 & 63](i1, i17, i13, 0);
  HEAP32[i14 >> 2] = 0;
  HEAP32[i17 + 108 >> 2] = 0;
  _SDL_SendWindowEvent(i17, 6, HEAP32[i17 + 24 >> 2] | 0, HEAP32[i17 + 28 >> 2] | 0) | 0;
  if ((_SDL_GetMouseFocus() | 0) == (i17 | 0)) {
   _SDL_GetMouseState(i16, i15) | 0;
   _SDL_WarpMouseInWindow(i17, HEAP32[i16 >> 2] | 0, HEAP32[i15 >> 2] | 0);
  }
  HEAP32[i17 + 52 >> 2] = HEAP32[i17 + 48 >> 2];
  STACKTOP = i18;
  return;
 }
 _SDL_SetError(41324, i2) | 0;
 STACKTOP = i18;
 return;
}

function _BlitBtoNAlpha(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0;
 i16 = HEAP32[i4 + 24 >> 2] | 0;
 i3 = HEAP32[i4 + 28 >> 2] | 0;
 i33 = HEAP32[i4 + 36 >> 2] | 0;
 i17 = HEAP32[(HEAP32[(HEAP32[i4 + 40 >> 2] | 0) + 4 >> 2] | 0) + 4 >> 2] | 0;
 i1 = HEAP32[i4 + 44 >> 2] | 0;
 i18 = HEAPU8[i4 + 63 >> 0] | 0;
 i2 = HEAP8[i1 + 9 >> 0] | 0;
 i19 = i2 & 255;
 i20 = (HEAP32[i4 + 16 >> 2] | 0) + i16 + ((i16 + 7 | 0) / -8 | 0) | 0;
 if (!i3) return;
 i21 = (i16 | 0) > 0;
 i22 = i1 + 28 | 0;
 i23 = i1 + 32 | 0;
 i24 = i1 + 29 | 0;
 i25 = i1 + 33 | 0;
 i26 = i1 + 30 | 0;
 i27 = i1 + 34 | 0;
 i28 = i1 + 31 | 0;
 i29 = i1 + 35 | 0;
 i30 = i1 + 12 | 0;
 i31 = i1 + 16 | 0;
 i32 = i1 + 20 | 0;
 i15 = i1 + 24 | 0;
 i14 = i2 << 24 >> 24 == 1;
 i2 = HEAP32[i4 + 20 >> 2] | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 while (1) {
  i3 = i3 + -1 | 0;
  L6 : do if (i21) {
   if (i14) {
    i4 = 0;
    i5 = 0;
    i6 = i2;
    while (1) {
     if (!(i5 & 7)) {
      i4 = HEAP8[i1 >> 0] | 0;
      i1 = i1 + 1 | 0;
     }
     i9 = (i4 & 255) >>> 7 & 255;
     i13 = HEAPU8[i6 >> 0] | 0;
     i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((i13 & HEAP32[i30 >> 2]) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i13) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     i12 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i13) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i13 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i13) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     i13 = i13 + i18 - (((Math_imul(i13, i18) | 0) >>> 0) / 255 | 0) | 0;
     i12 = (((Math_imul((HEAPU8[i17 + (i9 << 2) + 2 >> 0] | 0) - i12 | 0, i18) | 0) >>> 0) / 255 | 0) + i12 | 0;
     i10 = (((Math_imul((HEAPU8[i17 + (i9 << 2) + 1 >> 0] | 0) - i10 | 0, i18) | 0) >>> 0) / 255 | 0) + i10 | 0;
     i11 = (((Math_imul((HEAPU8[i17 + (i9 << 2) >> 0] | 0) - i11 | 0, i18) | 0) >>> 0) / 255 | 0) + i11 | 0;
     HEAP8[i6 >> 0] = i10 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i11 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i12 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i13 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0);
     i5 = i5 + 1 | 0;
     if ((i5 | 0) == (i16 | 0)) break; else {
      i4 = (i4 & 255) << 1 & 255;
      i6 = i6 + 1 | 0;
     }
    }
    i2 = i2 + i16 | 0;
    break;
   } else {
    i4 = 0;
    i13 = 0;
   }
   while (1) {
    if (!(i13 & 7)) {
     i4 = HEAP8[i1 >> 0] | 0;
     i1 = i1 + 1 | 0;
    }
    i12 = i4 & 255;
    i8 = (i4 & 255) >>> 7 & 255;
    i4 = HEAPU8[i17 + (i8 << 2) >> 0] | 0;
    i6 = HEAPU8[i17 + (i8 << 2) + 1 >> 0] | 0;
    i8 = HEAPU8[i17 + (i8 << 2) + 2 >> 0] | 0;
    switch (i19 | 0) {
    case 4:
     {
      i5 = HEAP32[i2 >> 2] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i5) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i5) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i5) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i30 >> 2] & i5) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i5 = HEAPU16[i2 >> 1] | 0;
      i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i5) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
      i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i5) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i5) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & HEAP32[i30 >> 2]) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i11 = 255;
      i10 = HEAPU8[i2 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i7 = HEAPU8[i2 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAPU8[i2 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    default:
     {
      i11 = 0;
      i10 = 0;
      i7 = 0;
      i5 = 0;
     }
    }
    i9 = (((Math_imul(i4 - i5 | 0, i18) | 0) >>> 0) / 255 | 0) + i5 | 0;
    i6 = (((Math_imul(i6 - i7 | 0, i18) | 0) >>> 0) / 255 | 0) + i7 | 0;
    i5 = (((Math_imul(i8 - i10 | 0, i18) | 0) >>> 0) / 255 | 0) + i10 | 0;
    i4 = i11 + i18 - (((Math_imul(i11, i18) | 0) >>> 0) / 255 | 0) | 0;
    switch (i19 | 0) {
    case 4:
     {
      HEAP32[i2 >> 2] = i6 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i9 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i5 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i4 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0);
      break;
     }
    case 2:
     {
      HEAP16[i2 >> 1] = i6 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i9 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i5 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i4 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0);
      break;
     }
    case 3:
     {
      HEAP8[i2 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
      HEAP8[i2 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i2 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      break;
     }
    default:
     {}
    }
    i2 = i2 + i19 | 0;
    i13 = i13 + 1 | 0;
    if ((i13 | 0) >= (i16 | 0)) break L6; else i4 = i12 << 1 & 255;
   }
  } while (0);
  if (!i3) break; else {
   i2 = i2 + i33 | 0;
   i1 = i1 + i20 | 0;
  }
 }
 return;
}

function _SDL_SoftStretch(i28, i3, i27, i7) {
 i28 = i28 | 0;
 i3 = i3 | 0;
 i27 = i27 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i29 = 0, i30 = 0;
 i29 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i10 = i29 + 32 | 0;
 i9 = i29 + 24 | 0;
 i8 = i29 + 16 | 0;
 i4 = i29 + 8 | 0;
 i1 = i29 + 56 | 0;
 i5 = i29 + 40 | 0;
 i25 = HEAP32[i27 + 4 >> 2] | 0;
 i26 = HEAPU8[i25 + 9 >> 0] | 0;
 if ((HEAP32[HEAP32[i28 + 4 >> 2] >> 2] | 0) != (HEAP32[i25 >> 2] | 0)) {
  i28 = _SDL_SetError(40658, i29) | 0;
  STACKTOP = i29;
  return i28 | 0;
 }
 do if (!i3) {
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = HEAP32[i28 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i28 + 12 >> 2];
  i3 = i1;
 } else {
  i1 = HEAP32[i3 >> 2] | 0;
  if ((((i1 | 0) >= 0 ? (i2 = HEAP32[i3 + 4 >> 2] | 0, (i2 | 0) >= 0) : 0) ? ((HEAP32[i3 + 8 >> 2] | 0) + i1 | 0) <= (HEAP32[i28 + 8 >> 2] | 0) : 0) ? ((HEAP32[i3 + 12 >> 2] | 0) + i2 | 0) <= (HEAP32[i28 + 12 >> 2] | 0) : 0) break;
  i28 = _SDL_SetError(40695, i4) | 0;
  STACKTOP = i29;
  return i28 | 0;
 } while (0);
 do if (!i7) {
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  HEAP32[i5 + 8 >> 2] = HEAP32[i27 + 8 >> 2];
  HEAP32[i5 + 12 >> 2] = HEAP32[i27 + 12 >> 2];
 } else {
  i1 = HEAP32[i7 >> 2] | 0;
  if ((((i1 | 0) >= 0 ? (i6 = HEAP32[i7 + 4 >> 2] | 0, (i6 | 0) >= 0) : 0) ? ((HEAP32[i7 + 8 >> 2] | 0) + i1 | 0) <= (HEAP32[i27 + 8 >> 2] | 0) : 0) ? ((HEAP32[i7 + 12 >> 2] | 0) + i6 | 0) <= (HEAP32[i27 + 12 >> 2] | 0) : 0) {
   i5 = i7;
   break;
  }
  i28 = _SDL_SetError(40725, i8) | 0;
  STACKTOP = i29;
  return i28 | 0;
 } while (0);
 if (HEAP32[i27 >> 2] & 2) if ((_SDL_LockSurface(i27) | 0) < 0) {
  i28 = _SDL_SetError(40760, i9) | 0;
  STACKTOP = i29;
  return i28 | 0;
 } else i25 = 1; else i25 = 0;
 if (HEAP32[i28 >> 2] & 2) if ((_SDL_LockSurface(i28) | 0) < 0) {
  if (i25) _SDL_UnlockSurface(i27);
  i28 = _SDL_SetError(40795, i10) | 0;
  STACKTOP = i29;
  return i28 | 0;
 } else i24 = 1; else i24 = 0;
 i23 = HEAP32[i5 + 12 >> 2] | 0;
 i16 = (HEAP32[i3 + 12 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i1 = HEAP32[i5 + 4 >> 2] | 0;
 i17 = i1 + i23 | 0;
 L38 : do if ((i23 | 0) > 0) {
  i18 = i27 + 20 | 0;
  i19 = i27 + 16 | 0;
  i20 = i3 + 8 | 0;
  i21 = i5 + 8 | 0;
  i22 = i28 + 20 | 0;
  i23 = i28 + 16 | 0;
  i2 = 65536;
  i4 = HEAP32[i3 + 4 >> 2] | 0;
  i6 = 0;
  while (1) {
   i11 = Math_imul(HEAP32[i19 >> 2] | 0, i1) | 0;
   i11 = (HEAP32[i18 >> 2] | 0) + ((Math_imul(HEAP32[i5 >> 2] | 0, i26) | 0) + i11) | 0;
   if ((i2 | 0) > 65535) {
    i2 = i2 + -65536 | 0;
    i15 = i2 >>> 16;
    i6 = Math_imul(HEAP32[i23 >> 2] | 0, i4 + i15 | 0) | 0;
    i2 = i2 - (i15 << 16) | 0;
    i4 = i4 + 1 + i15 | 0;
    i6 = (HEAP32[i22 >> 2] | 0) + ((Math_imul(HEAP32[i3 >> 2] | 0, i26) | 0) + i6) | 0;
   }
   switch (i26 | 0) {
   case 1:
    {
     i7 = HEAP32[i21 >> 2] | 0;
     i13 = (HEAP32[i20 >> 2] << 16 | 0) / (i7 | 0) | 0;
     if ((i7 | 0) > 0) {
      i12 = i6;
      i8 = 0;
      i9 = 65536;
      while (1) {
       if ((i9 | 0) > 65535) {
        i15 = i9 + -65536 | 0;
        i9 = i15 >>> 16;
        i10 = i12 + (i9 + 1) | 0;
        i8 = HEAP8[i12 + i9 >> 0] | 0;
        i9 = i15 - (i9 << 16) | 0;
       } else i10 = i12;
       HEAP8[i11 >> 0] = i8;
       if ((i7 | 0) > 1) {
        i11 = i11 + 1 | 0;
        i12 = i10;
        i7 = i7 + -1 | 0;
        i9 = i9 + i13 | 0;
       } else break;
      }
     }
     break;
    }
   case 2:
    {
     i7 = HEAP32[i21 >> 2] | 0;
     i13 = (HEAP32[i20 >> 2] << 16 | 0) / (i7 | 0) | 0;
     if ((i7 | 0) > 0) {
      i12 = i6;
      i8 = 0;
      i9 = 65536;
      while (1) {
       if ((i9 | 0) > 65535) {
        i15 = i9 + -65536 | 0;
        i9 = i15 >>> 16;
        i10 = i12 + (i9 + 1 << 1) | 0;
        i8 = HEAP16[i12 + (i9 << 1) >> 1] | 0;
        i9 = i15 - (i9 << 16) | 0;
       } else i10 = i12;
       HEAP16[i11 >> 1] = i8;
       if ((i7 | 0) > 1) {
        i11 = i11 + 2 | 0;
        i12 = i10;
        i7 = i7 + -1 | 0;
        i9 = i9 + i13 | 0;
       } else break;
      }
     }
     break;
    }
   case 3:
    {
     i7 = HEAP32[i21 >> 2] | 0;
     i15 = (HEAP32[i20 >> 2] << 16 | 0) / (i7 | 0) | 0;
     if ((i7 | 0) > 0) {
      i14 = i6;
      i8 = 0;
      i9 = 0;
      i10 = 0;
      i12 = 65536;
      while (1) {
       if ((i12 | 0) > 65535) {
        i30 = i12 + -65536 | 0;
        i12 = i30 >>> 16;
        i10 = i12 * 3 | 0;
        i13 = i14 + (i10 + 3) | 0;
        i8 = HEAP8[i14 + i10 >> 0] | 0;
        i9 = HEAP8[i14 + (i10 + 1) >> 0] | 0;
        i10 = HEAP8[i14 + (i10 + 2) >> 0] | 0;
        i12 = i30 - (i12 << 16) | 0;
       } else i13 = i14;
       HEAP8[i11 >> 0] = i8;
       HEAP8[i11 + 1 >> 0] = i9;
       HEAP8[i11 + 2 >> 0] = i10;
       if ((i7 | 0) > 1) {
        i11 = i11 + 3 | 0;
        i14 = i13;
        i7 = i7 + -1 | 0;
        i12 = i12 + i15 | 0;
       } else break;
      }
     }
     break;
    }
   case 4:
    {
     i7 = HEAP32[i21 >> 2] | 0;
     i13 = (HEAP32[i20 >> 2] << 16 | 0) / (i7 | 0) | 0;
     if ((i7 | 0) > 0) {
      i12 = i6;
      i8 = 0;
      i9 = 65536;
      while (1) {
       if ((i9 | 0) > 65535) {
        i30 = i9 + -65536 | 0;
        i9 = i30 >>> 16;
        i10 = i12 + (i9 + 1 << 2) | 0;
        i8 = HEAP32[i12 + (i9 << 2) >> 2] | 0;
        i9 = i30 - (i9 << 16) | 0;
       } else i10 = i12;
       HEAP32[i11 >> 2] = i8;
       if ((i7 | 0) > 1) {
        i11 = i11 + 4 | 0;
        i12 = i10;
        i7 = i7 + -1 | 0;
        i9 = i9 + i13 | 0;
       } else break;
      }
     }
     break;
    }
   default:
    {}
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i17 | 0)) break L38; else i2 = i2 + i16 | 0;
  }
 } while (0);
 if (i25) _SDL_UnlockSurface(i27);
 if (!i24) {
  i30 = 0;
  STACKTOP = i29;
  return i30 | 0;
 }
 _SDL_UnlockSurface(i28);
 i30 = 0;
 STACKTOP = i29;
 return i30 | 0;
}

function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i(i37, i39, i38, i36, i1, i24, i23, i28, i29, i25, i32, i27, i31, i30, i26) {
 i37 = i37 | 0;
 i39 = i39 | 0;
 i38 = i38 | 0;
 i36 = i36 | 0;
 i1 = i1 | 0;
 i24 = i24 | 0;
 i23 = i23 | 0;
 i28 = i28 | 0;
 i29 = i29 | 0;
 i25 = i25 | 0;
 i32 = i32 | 0;
 i27 = i27 | 0;
 i31 = i31 | 0;
 i30 = i30 | 0;
 i26 = i26 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i33 = 0, i34 = 0, i35 = 0;
 HEAP32[i38 >> 2] = i37;
 i33 = i30 + 4 | 0;
 i34 = i30 + 8 | 0;
 i35 = i30 + 1 | 0;
 i17 = i31 + 4 | 0;
 i18 = (i36 & 512 | 0) == 0;
 i19 = i31 + 8 | 0;
 i20 = i31 + 1 | 0;
 i21 = i23 + 8 | 0;
 i22 = (i26 | 0) > 0;
 i10 = i27 + 4 | 0;
 i11 = i27 + 8 | 0;
 i12 = i27 + 1 | 0;
 i13 = i26 + 1 | 0;
 i15 = -2 - i26 - ((i26 | 0) < 0 ? ~i26 : -1) | 0;
 i16 = (i26 | 0) > 0;
 i9 = 0;
 do {
  switch (HEAP8[i29 + i9 >> 0] | 0) {
  case 0:
   {
    HEAP32[i39 >> 2] = HEAP32[i38 >> 2];
    break;
   }
  case 1:
   {
    HEAP32[i39 >> 2] = HEAP32[i38 >> 2];
    i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i23 >> 2] | 0) + 28 >> 2] & 63](i23, 32) | 0;
    i8 = HEAP32[i38 >> 2] | 0;
    HEAP32[i38 >> 2] = i8 + 1;
    HEAP8[i8 >> 0] = i7;
    break;
   }
  case 3:
   {
    i8 = HEAP8[i30 >> 0] | 0;
    i2 = (i8 & 1) == 0;
    if ((i2 ? (i8 & 255) >>> 1 : HEAP32[i33 >> 2] | 0) | 0) {
     i7 = HEAP8[(i2 ? i35 : HEAP32[i34 >> 2] | 0) >> 0] | 0;
     i8 = HEAP32[i38 >> 2] | 0;
     HEAP32[i38 >> 2] = i8 + 1;
     HEAP8[i8 >> 0] = i7;
    }
    break;
   }
  case 2:
   {
    i4 = HEAP8[i31 >> 0] | 0;
    i2 = (i4 & 1) == 0;
    i4 = i2 ? (i4 & 255) >>> 1 : HEAP32[i17 >> 2] | 0;
    if (!(i18 | (i4 | 0) == 0)) {
     i3 = i2 ? i20 : HEAP32[i19 >> 2] | 0;
     i5 = i3 + i4 | 0;
     i2 = HEAP32[i38 >> 2] | 0;
     if (i4) do {
      HEAP8[i2 >> 0] = HEAP8[i3 >> 0] | 0;
      i3 = i3 + 1 | 0;
      i2 = i2 + 1 | 0;
     } while ((i3 | 0) != (i5 | 0));
     HEAP32[i38 >> 2] = i2;
    }
    break;
   }
  case 4:
   {
    i2 = HEAP32[i38 >> 2] | 0;
    i1 = i28 ? i1 + 1 | 0 : i1;
    i6 = i1;
    i5 = HEAP32[i21 >> 2] | 0;
    L15 : do if (i1 >>> 0 < i24 >>> 0) {
     i3 = i1;
     do {
      i4 = HEAP8[i3 >> 0] | 0;
      if (i4 << 24 >> 24 <= -1) break L15;
      if (!(HEAP16[i5 + (i4 << 24 >> 24 << 1) >> 1] & 2048)) break L15;
      i3 = i3 + 1 | 0;
     } while (i3 >>> 0 < i24 >>> 0);
    } else i3 = i1; while (0);
    i4 = i3;
    if (i22) {
     i7 = -2 - i4 - ~(i4 >>> 0 > i6 >>> 0 ? i6 : i4) | 0;
     i7 = i15 >>> 0 > i7 >>> 0 ? i15 : i7;
     if (i3 >>> 0 > i1 >>> 0 & i16) {
      i4 = i3;
      i6 = i26;
      while (1) {
       i4 = i4 + -1 | 0;
       i8 = HEAP8[i4 >> 0] | 0;
       i5 = HEAP32[i38 >> 2] | 0;
       HEAP32[i38 >> 2] = i5 + 1;
       HEAP8[i5 >> 0] = i8;
       i5 = (i6 | 0) > 1;
       if (!(i4 >>> 0 > i1 >>> 0 & i5)) break; else i6 = i6 + -1 | 0;
      }
     } else i5 = i16;
     i8 = i13 + i7 | 0;
     i4 = i3 + (i7 + 1) | 0;
     if (i5) i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i23 >> 2] | 0) + 28 >> 2] & 63](i23, 48) | 0; else i6 = 0;
     i3 = HEAP32[i38 >> 2] | 0;
     HEAP32[i38 >> 2] = i3 + 1;
     if ((i8 | 0) > 0) {
      i5 = i8;
      while (1) {
       HEAP8[i3 >> 0] = i6;
       i3 = HEAP32[i38 >> 2] | 0;
       HEAP32[i38 >> 2] = i3 + 1;
       if ((i5 | 0) > 1) i5 = i5 + -1 | 0; else break;
      }
     }
     HEAP8[i3 >> 0] = i25;
    } else i4 = i3;
    if ((i4 | 0) != (i1 | 0)) {
     i8 = HEAP8[i27 >> 0] | 0;
     i3 = (i8 & 1) == 0;
     if (!((i3 ? (i8 & 255) >>> 1 : HEAP32[i10 >> 2] | 0) | 0)) i3 = -1; else i3 = HEAP8[(i3 ? i12 : HEAP32[i11 >> 2] | 0) >> 0] | 0;
     if ((i4 | 0) != (i1 | 0)) {
      i5 = 0;
      i6 = 0;
      while (1) {
       if ((i6 | 0) == (i3 | 0)) {
        i8 = HEAP32[i38 >> 2] | 0;
        HEAP32[i38 >> 2] = i8 + 1;
        HEAP8[i8 >> 0] = i32;
        i5 = i5 + 1 | 0;
        i8 = HEAP8[i27 >> 0] | 0;
        i3 = (i8 & 1) == 0;
        if (i5 >>> 0 < (i3 ? (i8 & 255) >>> 1 : HEAP32[i10 >> 2] | 0) >>> 0) {
         i3 = HEAP8[(i3 ? i12 : HEAP32[i11 >> 2] | 0) + i5 >> 0] | 0;
         i3 = i3 << 24 >> 24 == 127 ? -1 : i3 << 24 >> 24;
         i6 = 0;
        } else {
         i3 = i6;
         i6 = 0;
        }
       }
       i4 = i4 + -1 | 0;
       i7 = HEAP8[i4 >> 0] | 0;
       i8 = HEAP32[i38 >> 2] | 0;
       HEAP32[i38 >> 2] = i8 + 1;
       HEAP8[i8 >> 0] = i7;
       if ((i4 | 0) == (i1 | 0)) break; else i6 = i6 + 1 | 0;
      }
     }
    } else {
     i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i23 >> 2] | 0) + 28 >> 2] & 63](i23, 48) | 0;
     i8 = HEAP32[i38 >> 2] | 0;
     HEAP32[i38 >> 2] = i8 + 1;
     HEAP8[i8 >> 0] = i7;
    }
    i3 = HEAP32[i38 >> 2] | 0;
    if ((i2 | 0) != (i3 | 0) ? (i14 = i3 + -1 | 0, i2 >>> 0 < i14 >>> 0) : 0) {
     i3 = i14;
     do {
      i8 = HEAP8[i2 >> 0] | 0;
      HEAP8[i2 >> 0] = HEAP8[i3 >> 0] | 0;
      HEAP8[i3 >> 0] = i8;
      i2 = i2 + 1 | 0;
      i3 = i3 + -1 | 0;
     } while (i2 >>> 0 < i3 >>> 0);
    }
    break;
   }
  default:
   {}
  }
  i9 = i9 + 1 | 0;
 } while ((i9 | 0) != 4);
 i3 = HEAP8[i30 >> 0] | 0;
 i1 = (i3 & 1) == 0;
 i3 = i1 ? (i3 & 255) >>> 1 : HEAP32[i33 >> 2] | 0;
 if (i3 >>> 0 > 1) {
  i2 = i1 ? i35 : HEAP32[i34 >> 2] | 0;
  i4 = i2 + i3 | 0;
  i1 = HEAP32[i38 >> 2] | 0;
  if ((i3 | 0) != 1) {
   i2 = i2 + 1 | 0;
   do {
    HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
    i1 = i1 + 1 | 0;
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != (i4 | 0));
  }
  HEAP32[i38 >> 2] = i1;
 }
 switch (i36 & 176 | 0) {
 case 32:
  {
   HEAP32[i39 >> 2] = HEAP32[i38 >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[i39 >> 2] = i37;
 }
 return;
}

function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i(i33, i35, i34, i32, i1, i21, i20, i25, i26, i22, i29, i24, i28, i27, i23) {
 i33 = i33 | 0;
 i35 = i35 | 0;
 i34 = i34 | 0;
 i32 = i32 | 0;
 i1 = i1 | 0;
 i21 = i21 | 0;
 i20 = i20 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 i22 = i22 | 0;
 i29 = i29 | 0;
 i24 = i24 | 0;
 i28 = i28 | 0;
 i27 = i27 | 0;
 i23 = i23 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i30 = 0, i31 = 0;
 HEAP32[i34 >> 2] = i33;
 i30 = i27 + 4 | 0;
 i31 = i27 + 8 | 0;
 i13 = i28 + 4 | 0;
 i14 = (i32 & 512 | 0) == 0;
 i15 = i28 + 8 | 0;
 i16 = (i23 | 0) > 0;
 i17 = i24 + 4 | 0;
 i18 = i24 + 8 | 0;
 i19 = i24 + 1 | 0;
 i11 = (i23 | 0) > 0;
 i10 = 0;
 do {
  switch (HEAP8[i26 + i10 >> 0] | 0) {
  case 0:
   {
    HEAP32[i35 >> 2] = HEAP32[i34 >> 2];
    break;
   }
  case 1:
   {
    HEAP32[i35 >> 2] = HEAP32[i34 >> 2];
    i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i20 >> 2] | 0) + 44 >> 2] & 63](i20, 32) | 0;
    i9 = HEAP32[i34 >> 2] | 0;
    HEAP32[i34 >> 2] = i9 + 4;
    HEAP32[i9 >> 2] = i8;
    break;
   }
  case 3:
   {
    i9 = HEAP8[i27 >> 0] | 0;
    i2 = (i9 & 1) == 0;
    if ((i2 ? (i9 & 255) >>> 1 : HEAP32[i30 >> 2] | 0) | 0) {
     i8 = HEAP32[(i2 ? i30 : HEAP32[i31 >> 2] | 0) >> 2] | 0;
     i9 = HEAP32[i34 >> 2] | 0;
     HEAP32[i34 >> 2] = i9 + 4;
     HEAP32[i9 >> 2] = i8;
    }
    break;
   }
  case 2:
   {
    i6 = HEAP8[i28 >> 0] | 0;
    i2 = (i6 & 1) == 0;
    i6 = i2 ? (i6 & 255) >>> 1 : HEAP32[i13 >> 2] | 0;
    if (!(i14 | (i6 | 0) == 0)) {
     i2 = i2 ? i13 : HEAP32[i15 >> 2] | 0;
     i4 = i2 + (i6 << 2) | 0;
     i5 = HEAP32[i34 >> 2] | 0;
     if (i6) {
      i3 = i5;
      while (1) {
       HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
       i2 = i2 + 4 | 0;
       if ((i2 | 0) == (i4 | 0)) break; else i3 = i3 + 4 | 0;
      }
     }
     HEAP32[i34 >> 2] = i5 + (i6 << 2);
    }
    break;
   }
  case 4:
   {
    i2 = HEAP32[i34 >> 2] | 0;
    i1 = i25 ? i1 + 4 | 0 : i1;
    L15 : do if (i1 >>> 0 < i21 >>> 0) {
     i3 = i1;
     do {
      if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i20 >> 2] | 0) + 12 >> 2] & 63](i20, 2048, HEAP32[i3 >> 2] | 0) | 0)) break L15;
      i3 = i3 + 4 | 0;
     } while (i3 >>> 0 < i21 >>> 0);
    } else i3 = i1; while (0);
    if (i16) {
     if (i3 >>> 0 > i1 >>> 0 & i11) {
      i6 = HEAP32[i34 >> 2] | 0;
      i5 = i23;
      while (1) {
       i3 = i3 + -4 | 0;
       i4 = i6 + 4 | 0;
       HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
       i7 = i5 + -1 | 0;
       i5 = (i5 | 0) > 1;
       if (i3 >>> 0 > i1 >>> 0 & i5) {
        i6 = i4;
        i5 = i7;
       } else {
        i6 = i7;
        break;
       }
      }
      HEAP32[i34 >> 2] = i4;
      i4 = i6;
     } else {
      i5 = i11;
      i4 = i23;
     }
     if (i5) i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i20 >> 2] | 0) + 44 >> 2] & 63](i20, 48) | 0; else i7 = 0;
     i8 = HEAP32[i34 >> 2] | 0;
     i5 = i4 + ((i4 | 0) < 0 ? ~i4 : -1) | 0;
     if ((i4 | 0) > 0) {
      i6 = i8;
      while (1) {
       HEAP32[i6 >> 2] = i7;
       if ((i4 | 0) > 1) {
        i6 = i6 + 4 | 0;
        i4 = i4 + -1 | 0;
       } else break;
      }
     }
     HEAP32[i34 >> 2] = i8 + (i5 + 2 << 2);
     HEAP32[i8 + (i5 + 1 << 2) >> 2] = i22;
    }
    if ((i3 | 0) == (i1 | 0)) {
     i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i20 >> 2] | 0) + 44 >> 2] & 63](i20, 48) | 0;
     i9 = HEAP32[i34 >> 2] | 0;
     i3 = i9 + 4 | 0;
     HEAP32[i34 >> 2] = i3;
     HEAP32[i9 >> 2] = i8;
    } else {
     i8 = HEAP8[i24 >> 0] | 0;
     i4 = (i8 & 1) == 0;
     i9 = HEAP32[i17 >> 2] | 0;
     if (!((i4 ? (i8 & 255) >>> 1 : i9) | 0)) i4 = -1; else i4 = HEAP8[(i4 ? i19 : HEAP32[i18 >> 2] | 0) >> 0] | 0;
     if ((i3 | 0) != (i1 | 0)) {
      i7 = 0;
      i8 = 0;
      while (1) {
       i5 = HEAP32[i34 >> 2] | 0;
       if ((i8 | 0) == (i4 | 0)) {
        i6 = i5 + 4 | 0;
        HEAP32[i34 >> 2] = i6;
        HEAP32[i5 >> 2] = i29;
        i7 = i7 + 1 | 0;
        i5 = HEAP8[i24 >> 0] | 0;
        i4 = (i5 & 1) == 0;
        if (i7 >>> 0 < (i4 ? (i5 & 255) >>> 1 : i9) >>> 0) {
         i4 = HEAP8[(i4 ? i19 : HEAP32[i18 >> 2] | 0) + i7 >> 0] | 0;
         i5 = i6;
         i4 = i4 << 24 >> 24 == 127 ? -1 : i4 << 24 >> 24;
         i6 = 0;
        } else {
         i5 = i6;
         i4 = i8;
         i6 = 0;
        }
       } else i6 = i8;
       i3 = i3 + -4 | 0;
       i8 = HEAP32[i3 >> 2] | 0;
       HEAP32[i34 >> 2] = i5 + 4;
       HEAP32[i5 >> 2] = i8;
       if ((i3 | 0) == (i1 | 0)) break; else i8 = i6 + 1 | 0;
      }
     }
     i3 = HEAP32[i34 >> 2] | 0;
    }
    if ((i2 | 0) != (i3 | 0) ? (i12 = i3 + -4 | 0, i2 >>> 0 < i12 >>> 0) : 0) {
     i3 = i12;
     do {
      i9 = HEAP32[i2 >> 2] | 0;
      HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
      HEAP32[i3 >> 2] = i9;
      i2 = i2 + 4 | 0;
      i3 = i3 + -4 | 0;
     } while (i2 >>> 0 < i3 >>> 0);
    }
    break;
   }
  default:
   {}
  }
  i10 = i10 + 1 | 0;
 } while ((i10 | 0) != 4);
 i2 = HEAP8[i27 >> 0] | 0;
 i1 = (i2 & 1) == 0;
 i2 = i1 ? (i2 & 255) >>> 1 : HEAP32[i30 >> 2] | 0;
 if (i2 >>> 0 > 1) {
  i3 = i1 ? i30 : HEAP32[i31 >> 2] | 0;
  i1 = i3 + 4 | 0;
  i3 = i3 + (i2 << 2) | 0;
  i4 = HEAP32[i34 >> 2] | 0;
  i5 = i3 - i1 | 0;
  if ((i2 | 0) != 1) {
   i2 = i4;
   while (1) {
    HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
    i1 = i1 + 4 | 0;
    if ((i1 | 0) == (i3 | 0)) break; else i2 = i2 + 4 | 0;
   }
  }
  HEAP32[i34 >> 2] = i4 + (i5 >>> 2 << 2);
 }
 switch (i32 & 176 | 0) {
 case 32:
  {
   HEAP32[i35 >> 2] = HEAP32[i34 >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[i35 >> 2] = i33;
 }
 return;
}

function _SDL_MapSurface(i27, i24) {
 i27 = i27 | 0;
 i24 = i24 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0, i26 = 0, i28 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 i5 = i28;
 i4 = i28 + 16 | 0;
 i2 = i27 + 52 | 0;
 i26 = HEAP32[i2 >> 2] | 0;
 if (HEAP32[i27 >> 2] & 2) _SDL_UnRLESurface(i27, 1);
 if (i26) {
  i1 = HEAP32[i26 >> 2] | 0;
  if ((i1 | 0) != 0 ? (i23 = i1 + 56 | 0, i25 = HEAP32[i23 >> 2] | 0, HEAP32[i23 >> 2] = i25 + -1, (i25 | 0) < 2) : 0) _SDL_FreeSurface(i1);
  HEAP32[i26 >> 2] = 0;
  HEAP32[i26 + 84 >> 2] = 0;
  HEAP32[i26 + 80 >> 2] = 0;
  i25 = i26 + 64 | 0;
  _SDL_free(HEAP32[i25 >> 2] | 0);
  HEAP32[i25 >> 2] = 0;
 }
 i3 = i26 + 4 | 0;
 HEAP32[i3 >> 2] = 0;
 i25 = HEAP32[i27 + 4 >> 2] | 0;
 i23 = HEAP32[i24 + 4 >> 2] | 0;
 i22 = HEAP32[i25 >> 2] | 0;
 do if ((i22 | 0) == 0 | (i22 & -268435456 | 0) == 268435456 ? ((i22 >>> 24 & 15) + -1 | 0) >>> 0 < 3 : 0) {
  i22 = HEAP32[i23 >> 2] | 0;
  if ((i22 | 0) == 0 | (i22 & -268435456 | 0) == 268435456 ? ((i22 >>> 24 & 15) + -1 | 0) >>> 0 < 3 : 0) {
   i22 = _Map1to1(HEAP32[i25 + 4 >> 2] | 0, HEAP32[i23 + 4 >> 2] | 0, i3) | 0;
   HEAP32[i26 + 64 >> 2] = i22;
   if ((i22 | 0) == 0 & (HEAP32[i3 >> 2] | 0) == 0) {
    i27 = -1;
    STACKTOP = i28;
    return i27 | 0;
   }
   if ((HEAP8[i25 + 8 >> 0] | 0) == (HEAP8[i23 + 8 >> 0] | 0)) {
    i1 = 35;
    break;
   }
   HEAP32[i3 >> 2] = 0;
   i1 = 35;
   break;
  }
  i4 = HEAP32[i2 >> 2] | 0;
  i1 = HEAP8[i4 + 76 >> 0] | 0;
  i2 = HEAP8[i4 + 77 >> 0] | 0;
  i3 = HEAP8[i4 + 78 >> 0] | 0;
  i4 = HEAP8[i4 + 79 >> 0] | 0;
  i19 = HEAP32[i25 + 4 >> 2] | 0;
  i20 = i23 + 9 | 0;
  i18 = HEAP8[i20 >> 0] | 0;
  i18 = i18 << 24 >> 24 == 3 ? 4 : i18 & 255;
  i21 = _SDL_malloc(Math_imul(i18, HEAP32[i19 >> 2] | 0) | 0) | 0;
  if (!i21) {
   _SDL_Error(0) | 0;
   HEAP32[i26 + 64 >> 2] = 0;
   i27 = -1;
   STACKTOP = i28;
   return i27 | 0;
  }
  if ((HEAP32[i19 >> 2] | 0) <= 0) {
   HEAP32[i26 + 64 >> 2] = i21;
   i1 = 35;
   break;
  }
  i22 = i19 + 4 | 0;
  i17 = i1 & 255;
  i16 = i2 & 255;
  i15 = i3 & 255;
  i1 = i4 & 255;
  i2 = i23 + 28 | 0;
  i3 = i23 + 32 | 0;
  i4 = i23 + 29 | 0;
  i5 = i23 + 33 | 0;
  i6 = i23 + 30 | 0;
  i7 = i23 + 34 | 0;
  i8 = i23 + 31 | 0;
  i9 = i23 + 35 | 0;
  i14 = 0;
  do {
   i13 = HEAP32[i22 >> 2] | 0;
   i10 = ((Math_imul(HEAPU8[i13 + (i14 << 2) >> 0] | 0, i17) | 0) >>> 0) / 255 | 0;
   i11 = ((Math_imul(HEAPU8[i13 + (i14 << 2) + 1 >> 0] | 0, i16) | 0) >>> 0) / 255 | 0;
   i12 = ((Math_imul(HEAPU8[i13 + (i14 << 2) + 2 >> 0] | 0, i15) | 0) >>> 0) / 255 | 0;
   i13 = ((Math_imul(HEAPU8[i13 + (i14 << 2) + 3 >> 0] | 0, i1) | 0) >>> 0) / 255 | 0;
   switch (HEAPU8[i20 >> 0] | 0) {
   case 1:
    {
     HEAP8[i21 + (Math_imul(i14, i18) | 0) >> 0] = (i11 & 255) >>> (HEAPU8[i4 >> 0] | 0) << HEAPU8[i5 >> 0] | (i10 & 255) >>> (HEAPU8[i2 >> 0] | 0) << HEAPU8[i3 >> 0] | (i12 & 255) >>> (HEAPU8[i6 >> 0] | 0) << HEAPU8[i7 >> 0] | (i13 & 255) >>> (HEAPU8[i8 >> 0] | 0) << HEAPU8[i9 >> 0];
     break;
    }
   case 2:
    {
     HEAP16[i21 + (Math_imul(i14, i18) | 0) >> 1] = (i11 & 255) >>> (HEAPU8[i4 >> 0] | 0) << HEAPU8[i5 >> 0] | (i10 & 255) >>> (HEAPU8[i2 >> 0] | 0) << HEAPU8[i3 >> 0] | (i12 & 255) >>> (HEAPU8[i6 >> 0] | 0) << HEAPU8[i7 >> 0] | (i13 & 255) >>> (HEAPU8[i8 >> 0] | 0) << HEAPU8[i9 >> 0];
     break;
    }
   case 3:
    {
     i13 = Math_imul(i14, i18) | 0;
     HEAP8[i21 + (((HEAPU8[i3 >> 0] | 0) >>> 3 & 255) + i13) >> 0] = i10;
     HEAP8[i21 + (((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) + i13) >> 0] = i11;
     HEAP8[i21 + (((HEAPU8[i7 >> 0] | 0) >>> 3 & 255) + i13) >> 0] = i12;
     break;
    }
   case 4:
    {
     HEAP32[i21 + (Math_imul(i14, i18) | 0) >> 2] = (i11 & 255) >>> (HEAPU8[i4 >> 0] | 0) << HEAPU8[i5 >> 0] | (i10 & 255) >>> (HEAPU8[i2 >> 0] | 0) << HEAPU8[i3 >> 0] | (i12 & 255) >>> (HEAPU8[i6 >> 0] | 0) << HEAPU8[i7 >> 0] | (i13 & 255) >>> (HEAPU8[i8 >> 0] | 0) << HEAPU8[i9 >> 0];
     break;
    }
   default:
    {}
   }
   i14 = i14 + 1 | 0;
  } while ((i14 | 0) < (HEAP32[i19 >> 2] | 0));
  HEAP32[i26 + 64 >> 2] = i21;
  i1 = 36;
 } else i1 = 27; while (0);
 do if ((i1 | 0) == 27) {
  i22 = HEAP32[i23 >> 2] | 0;
  if ((i22 | 0) == 0 | (i22 & -268435456 | 0) == 268435456 ? ((i22 >>> 24 & 15) + -1 | 0) >>> 0 < 3 : 0) {
   i1 = HEAP32[i23 + 4 >> 2] | 0;
   HEAP32[i5 >> 2] = 256;
   i2 = 0;
   do {
    i22 = i2 & 224;
    HEAP8[i4 + (i2 << 2) >> 0] = i22 >>> 6 | i22 | i22 >>> 3;
    i22 = i2 << 3 & 224;
    HEAP8[i4 + (i2 << 2) + 1 >> 0] = i22 >>> 6 | i22 | i22 >>> 3;
    i22 = i2 & 3;
    i22 = i22 << 2 | i22;
    HEAP8[i4 + (i2 << 2) + 2 >> 0] = i22 << 4 | i22;
    HEAP8[i4 + (i2 << 2) + 3 >> 0] = -1;
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != 256);
   HEAP32[i5 + 4 >> 2] = i4;
   i22 = _Map1to1(i5, i1, i3) | 0;
   HEAP32[i26 + 64 >> 2] = i22;
   if ((i22 | 0) == 0 & (HEAP32[i3 >> 2] | 0) == 0) {
    i27 = -1;
    STACKTOP = i28;
    return i27 | 0;
   } else {
    HEAP32[i3 >> 2] = 0;
    i1 = 36;
    break;
   }
  }
  if ((i25 | 0) == (i23 | 0)) {
   HEAP32[i3 >> 2] = 1;
   i1 = 35;
  } else i1 = 35;
 } while (0);
 if ((i1 | 0) == 35) {
  HEAP32[i26 >> 2] = i24;
  i1 = 37;
 } else if ((i1 | 0) == 36 ? (HEAP32[i26 >> 2] = i24, (i24 | 0) != 0) : 0) i1 = 37;
 if ((i1 | 0) == 37) {
  i24 = i24 + 56 | 0;
  HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + 1;
 }
 i1 = HEAP32[i23 + 4 >> 2] | 0;
 if (!i1) i1 = 0; else i1 = HEAP32[i1 + 8 >> 2] | 0;
 HEAP32[i26 + 80 >> 2] = i1;
 i1 = HEAP32[i25 + 4 >> 2] | 0;
 if (!i1) i1 = 0; else i1 = HEAP32[i1 + 8 >> 2] | 0;
 HEAP32[i26 + 84 >> 2] = i1;
 i27 = _SDL_CalculateBlit(i27) | 0;
 STACKTOP = i28;
 return i27 | 0;
}

function _SDL_SaveBMP_RW(i20, i18, i19) {
 i20 = i20 | 0;
 i18 = i18 | 0;
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i21 = 0, i22 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i7 = i22 + 8 | 0;
 i5 = i22;
 i9 = i22 + 56 | 0;
 i6 = i22 + 12 | 0;
 i17 = i22 + 58 | 0;
 HEAP16[i9 >> 1] = 19778;
 if (!i18) {
  i21 = _SDL_GetError() | 0;
  i21 = _SDL_strcmp(i21, 62969) | 0;
  i21 = (i21 | 0) != 0;
  i21 = i21 << 31 >> 31;
  STACKTOP = i22;
  return i21 | 0;
 }
 i3 = HEAP32[i20 + 4 >> 2] | 0;
 if ((HEAP32[(HEAP32[i20 + 52 >> 2] | 0) + 68 >> 2] & 256 | 0) == 0 ? (HEAP32[i3 + 24 >> 2] | 0) == 0 : 0) i4 = 0; else i4 = 1;
 i1 = HEAP8[i3 + 8 >> 0] | 0;
 i2 = i1 & 255;
 do if (i4 | (HEAP32[i3 + 4 >> 2] | 0) == 0) {
  if (((i1 << 24 >> 24 == 24 ? (HEAP32[i3 + 12 >> 2] | 0) == 16711680 : 0) ? (HEAP32[i3 + 16 >> 2] | 0) == 65280 : 0) ? (HEAP32[i3 + 20 >> 2] | 0) == 255 : 0) {
   i21 = i20;
   i8 = 18;
   break;
  }
  if (i4) _SDL_InitFormat(i6, 372645892) | 0; else _SDL_InitFormat(i6, 390076419) | 0;
  i1 = _SDL_ConvertSurface(i20, i6, 0) | 0;
  if (!i1) {
   HEAP32[i7 >> 2] = HEAPU8[i6 + 8 >> 0];
   _SDL_SetError(38980, i7) | 0;
   break;
  } else {
   i21 = i1;
   i8 = 18;
   break;
  }
 } else if (i1 << 24 >> 24 == 8) {
  i21 = i20;
  i8 = 18;
 } else {
  HEAP32[i5 >> 2] = i2;
  _SDL_SetError(38949, i5) | 0;
 } while (0);
 if ((i8 | 0) == 18 ? (_SDL_LockSurface(i21) | 0) == 0 : 0) {
  i2 = i21 + 8 | 0;
  i6 = i21 + 4 | 0;
  i12 = Math_imul(HEAPU8[(HEAP32[i6 >> 2] | 0) + 9 >> 0] | 0, HEAP32[i2 >> 2] | 0) | 0;
  i14 = i18 + 4 | 0;
  i15 = FUNCTION_TABLE_iiiii[HEAP32[i14 >> 2] & 31](i18, 0, 0, 1) | 0;
  i16 = tempRet0;
  _SDL_ClearError();
  i13 = i18 + 12 | 0;
  FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 31](i18, i9, 2, 1) | 0;
  _SDL_WriteLE32(i18, 0) | 0;
  _SDL_WriteLE16(i18, 0) | 0;
  _SDL_WriteLE16(i18, 0) | 0;
  _SDL_WriteLE32(i18, 0) | 0;
  i2 = HEAP32[i2 >> 2] | 0;
  i7 = i21 + 12 | 0;
  i3 = HEAP32[i7 >> 2] | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  i4 = HEAPU8[i1 + 8 >> 0] | 0;
  i8 = i21 + 16 | 0;
  i5 = Math_imul(HEAP32[i8 >> 2] | 0, i3) | 0;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  if (!i1) i1 = 0; else i1 = HEAP32[i1 >> 2] | 0;
  _SDL_WriteLE32(i18, 40) | 0;
  _SDL_WriteLE32(i18, i2) | 0;
  _SDL_WriteLE32(i18, i3) | 0;
  _SDL_WriteLE16(i18, 1) | 0;
  _SDL_WriteLE16(i18, i4) | 0;
  _SDL_WriteLE32(i18, 0) | 0;
  _SDL_WriteLE32(i18, i5) | 0;
  _SDL_WriteLE32(i18, 0) | 0;
  _SDL_WriteLE32(i18, 0) | 0;
  _SDL_WriteLE32(i18, i1) | 0;
  _SDL_WriteLE32(i18, 0) | 0;
  i1 = HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0;
  if ((i1 | 0) != 0 ? (i10 = HEAP32[i1 + 4 >> 2] | 0, i11 = HEAP32[i1 >> 2] | 0, (i11 | 0) > 0) : 0) {
   i1 = 0;
   do {
    FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 31](i18, i10 + (i1 << 2) + 2 | 0, 1, 1) | 0;
    FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 31](i18, i10 + (i1 << 2) + 1 | 0, 1, 1) | 0;
    FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 31](i18, i10 + (i1 << 2) | 0, 1, 1) | 0;
    FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 31](i18, i10 + (i1 << 2) + 3 | 0, 1, 1) | 0;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != (i11 | 0));
  }
  i1 = FUNCTION_TABLE_iiiii[HEAP32[i14 >> 2] & 31](i18, 0, 0, 1) | 0;
  i1 = _i64Subtract(i1 | 0, tempRet0 | 0, i15 | 0, i16 | 0) | 0;
  i10 = HEAP32[i14 >> 2] | 0;
  i11 = _i64Add(i15 | 0, i16 | 0, 10, 0) | 0;
  FUNCTION_TABLE_iiiii[i10 & 31](i18, i11, tempRet0, 0) | 0;
  if ((tempRet0 | 0) < 0) _SDL_Error(3) | 0;
  _SDL_WriteLE32(i18, i1) | 0;
  i10 = HEAP32[i14 >> 2] | 0;
  i11 = _i64Add(i1 | 0, 0, i15 | 0, i16 | 0) | 0;
  FUNCTION_TABLE_iiiii[i10 & 31](i18, i11, tempRet0, 0) | 0;
  if ((tempRet0 | 0) < 0) _SDL_Error(3) | 0;
  i5 = i21 + 20 | 0;
  i2 = HEAP32[i8 >> 2] | 0;
  i1 = Math_imul(i2, HEAP32[i7 >> 2] | 0) | 0;
  i3 = (i12 | 0) % 4 | 0;
  i3 = (i3 | 0) == 0 ? 0 : 4 - i3 | 0;
  L42 : do if ((i1 | 0) > 0) {
   i4 = (i3 | 0) > 0;
   i1 = (HEAP32[i5 >> 2] | 0) + (i1 - i2) | 0;
   i2 = (FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 31](i18, i1, 1, i12) | 0) == (i12 | 0);
   if (!i3) {
    if (i2) do {
     if (i1 >>> 0 <= (HEAP32[i5 >> 2] | 0) >>> 0) break L42;
     i1 = i1 + (0 - (HEAP32[i8 >> 2] | 0)) | 0;
    } while ((FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 31](i18, i1, 1, i12) | 0) == (i12 | 0));
   } else if (i2) do {
    HEAP8[i17 >> 0] = 0;
    if (i4) {
     i2 = 0;
     do {
      FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 31](i18, i17, 1, 1) | 0;
      i2 = i2 + 1 | 0;
     } while ((i2 | 0) != (i3 | 0));
    }
    if (i1 >>> 0 <= (HEAP32[i5 >> 2] | 0) >>> 0) break L42;
    i1 = i1 + (0 - (HEAP32[i8 >> 2] | 0)) | 0;
   } while ((FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 31](i18, i1, 1, i12) | 0) == (i12 | 0));
   _SDL_Error(2) | 0;
  } while (0);
  i1 = FUNCTION_TABLE_iiiii[HEAP32[i14 >> 2] & 31](i18, 0, 0, 1) | 0;
  i1 = _i64Subtract(i1 | 0, tempRet0 | 0, i15 | 0, i16 | 0) | 0;
  i13 = HEAP32[i14 >> 2] | 0;
  i17 = _i64Add(i15 | 0, i16 | 0, 2, 0) | 0;
  FUNCTION_TABLE_iiiii[i13 & 31](i18, i17, tempRet0, 0) | 0;
  if ((tempRet0 | 0) < 0) _SDL_Error(3) | 0;
  _SDL_WriteLE32(i18, i1) | 0;
  i14 = HEAP32[i14 >> 2] | 0;
  i17 = _i64Add(i1 | 0, 0, i15 | 0, i16 | 0) | 0;
  FUNCTION_TABLE_iiiii[i14 & 31](i18, i17, tempRet0, 0) | 0;
  if ((tempRet0 | 0) < 0) _SDL_Error(3) | 0;
  _SDL_UnlockSurface(i21);
  if ((i21 | 0) != (i20 | 0)) _SDL_FreeSurface(i21);
 }
 if (!i19) {
  i21 = _SDL_GetError() | 0;
  i21 = _SDL_strcmp(i21, 62969) | 0;
  i21 = (i21 | 0) != 0;
  i21 = i21 << 31 >> 31;
  STACKTOP = i22;
  return i21 | 0;
 }
 FUNCTION_TABLE_ii[HEAP32[i18 + 16 >> 2] & 127](i18) | 0;
 i21 = _SDL_GetError() | 0;
 i21 = _SDL_strcmp(i21, 62969) | 0;
 i21 = (i21 | 0) != 0;
 i21 = i21 << 31 >> 31;
 STACKTOP = i22;
 return i21 | 0;
}

function _SDL_ConvertPixels(i13, i21, i18, i2, i19, i8, i3, i20) {
 i13 = i13 | 0;
 i21 = i21 | 0;
 i18 = i18 | 0;
 i2 = i2 | 0;
 i19 = i19 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 i20 = i20 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i22 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 448 | 0;
 i10 = i22 + 32 | 0;
 i6 = i22 + 24 | 0;
 i5 = i22 + 16 | 0;
 i4 = i22 + 8 | 0;
 i1 = i22;
 i16 = i22 + 380 | 0;
 i14 = i22 + 320 | 0;
 i7 = i22 + 276 | 0;
 i12 = i22 + 232 | 0;
 i9 = i22 + 144 | 0;
 i11 = i22 + 56 | 0;
 i15 = i22 + 40 | 0;
 if (!i3) {
  HEAP32[i1 >> 2] = 41004;
  i21 = _SDL_SetError(41366, i1) | 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 if (!i20) {
  HEAP32[i4 >> 2] = 41008;
  i21 = _SDL_SetError(41366, i4) | 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 i1 = (i18 | 0) == 0 | (i18 & -268435456 | 0) == 268435456;
 if ((i18 | 0) != (i8 | 0)) {
  if (i1 ? ((i18 >>> 24 & 15) + -1 | 0) >>> 0 < 3 : 0) {
   _SDL_SetError(41046, i6) | 0;
   i21 = -1;
   STACKTOP = i22;
   return i21 | 0;
  }
  if ((_SDL_InitFormat(i7, i18) | 0) < 0) {
   i21 = -1;
   STACKTOP = i22;
   return i21 | 0;
  }
  _SDL_memset(i16, 0, 60) | 0;
  HEAP32[i16 >> 2] = 1;
  i5 = i16 + 4 | 0;
  HEAP32[i5 >> 2] = i7;
  HEAP32[i16 + 20 >> 2] = i2;
  HEAP32[i16 + 8 >> 2] = i13;
  HEAP32[i16 + 12 >> 2] = i21;
  HEAP32[i16 + 16 >> 2] = i19;
  _SDL_memset(i9, 0, 88) | 0;
  i4 = i16 + 52 | 0;
  HEAP32[i9 + 76 >> 2] = -1;
  HEAP32[i4 >> 2] = i9;
  HEAP32[i16 + 56 >> 2] = 1;
  if ((i8 | 0) == 0 | (i8 & -268435456 | 0) == 268435456 ? ((i8 >>> 24 & 15) + -1 | 0) >>> 0 < 3 : 0) {
   _SDL_SetError(41046, i10) | 0;
   i21 = -1;
   STACKTOP = i22;
   return i21 | 0;
  }
  if ((_SDL_InitFormat(i12, i8) | 0) < 0) {
   i21 = -1;
   STACKTOP = i22;
   return i21 | 0;
  }
  _SDL_memset(i14, 0, 60) | 0;
  HEAP32[i14 >> 2] = 1;
  i2 = i14 + 4 | 0;
  HEAP32[i2 >> 2] = i12;
  HEAP32[i14 + 20 >> 2] = i3;
  HEAP32[i14 + 8 >> 2] = i13;
  HEAP32[i14 + 12 >> 2] = i21;
  HEAP32[i14 + 16 >> 2] = i20;
  _SDL_memset(i11, 0, 88) | 0;
  HEAP32[i11 + 76 >> 2] = -1;
  HEAP32[i14 + 52 >> 2] = i11;
  HEAP32[i14 + 56 >> 2] = 1;
  HEAP32[i15 >> 2] = 0;
  HEAP32[i15 + 4 >> 2] = 0;
  HEAP32[i15 + 8 >> 2] = i13;
  HEAP32[i15 + 12 >> 2] = i21;
  i1 = HEAP32[i4 >> 2] | 0;
  do if ((HEAP32[i1 >> 2] | 0) == (i14 | 0)) {
   i21 = HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] | 0;
   if ((i21 | 0) != 0 ? (HEAP32[i1 + 80 >> 2] | 0) != (HEAP32[i21 + 8 >> 2] | 0) : 0) {
    i17 = 35;
    break;
   }
   i21 = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0;
   if ((i21 | 0) != 0 ? (HEAP32[i1 + 84 >> 2] | 0) != (HEAP32[i21 + 8 >> 2] | 0) : 0) i17 = 35;
  } else i17 = 35; while (0);
  do if ((i17 | 0) == 35) if ((_SDL_MapSurface(i16, i14) | 0) < 0) {
   i21 = -1;
   STACKTOP = i22;
   return i21 | 0;
  } else {
   i1 = HEAP32[i4 >> 2] | 0;
   break;
  } while (0);
  i21 = FUNCTION_TABLE_iiiii[HEAP32[i1 + 8 >> 2] & 31](i16, i15, i14, i15) | 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 L41 : do if (i1) i1 = i18 & 255; else {
  L44 : do if ((i18 | 0) < 844715353) if ((i18 | 0) < 842094158) switch (i18 | 0) {
  case 825382478:
   {
    i17 = 8;
    break L44;
   }
  default:
   break L44;
  } else switch (i18 | 0) {
  case 842094158:
  case 842094169:
   {
    i17 = 8;
    break L44;
   }
  default:
   break L44;
  } else if ((i18 | 0) < 1448433993) if ((i18 | 0) < 1431918169) switch (i18 | 0) {
  case 844715353:
   {
    i1 = 2;
    break L41;
   }
  default:
   break L44;
  } else switch (i18 | 0) {
  case 1431918169:
   {
    i1 = 2;
    break L41;
   }
  default:
   break L44;
  } else if ((i18 | 0) < 1498831189) switch (i18 | 0) {
  case 1448433993:
   {
    i17 = 8;
    break L44;
   }
  default:
   break L44;
  } else switch (i18 | 0) {
  case 1498831189:
   {
    i1 = 2;
    break L41;
   }
  default:
   break L44;
  } while (0);
  if ((i17 | 0) == 8) {
   i1 = 1;
   break;
  }
  i21 = _SDL_SetError(41018, i5) | 0;
  STACKTOP = i22;
  return i21 | 0;
 } while (0);
 i8 = Math_imul(i1, i13) | 0;
 if (i21) {
  i5 = Math_imul(i20, i21) | 0;
  i7 = Math_imul(i19, i21) | 0;
  i1 = i3;
  i4 = i2;
  i6 = i21;
  while (1) {
   i6 = i6 + -1 | 0;
   _SDL_memcpy(i1, i4, i8) | 0;
   if (!i6) break; else {
    i1 = i1 + i20 | 0;
    i4 = i4 + i19 | 0;
   }
  }
  i3 = i3 + i5 | 0;
  i2 = i2 + i7 | 0;
 }
 if ((i18 | 0) < 842094169) {
  L72 : do if ((i18 | 0) < 842094158) {
   switch (i18 | 0) {
   case 825382478:
    break L72;
   default:
    i1 = 0;
   }
   STACKTOP = i22;
   return i1 | 0;
  } else {
   switch (i18 | 0) {
   case 842094158:
    break L72;
   default:
    i1 = 0;
   }
   STACKTOP = i22;
   return i1 | 0;
  } while (0);
  if ((i21 + 1 | 0) >>> 0 < 3) {
   i21 = 0;
   STACKTOP = i22;
   return i21 | 0;
  }
  i1 = (i21 | 0) / 2 | 0;
  while (1) {
   i1 = i1 + -1 | 0;
   _SDL_memcpy(i3, i2, i8) | 0;
   if (!i1) {
    i1 = 0;
    break;
   } else {
    i3 = i3 + i20 | 0;
    i2 = i2 + i19 | 0;
   }
  }
  STACKTOP = i22;
  return i1 | 0;
 } else {
  L85 : do if ((i18 | 0) < 1448433993) {
   switch (i18 | 0) {
   case 842094169:
    break L85;
   default:
    i1 = 0;
   }
   STACKTOP = i22;
   return i1 | 0;
  } else {
   switch (i18 | 0) {
   case 1448433993:
    break L85;
   default:
    i1 = 0;
   }
   STACKTOP = i22;
   return i1 | 0;
  } while (0);
  i6 = (i8 | 0) / 2 | 0;
  i5 = (i19 | 0) / 2 | 0;
  i4 = (i20 | 0) / 2 | 0;
  if ((i21 + 1 | 0) >>> 0 < 3) {
   i21 = 0;
   STACKTOP = i22;
   return i21 | 0;
  }
  i1 = ((i21 | 0) / 2 | 0) << 1;
  while (1) {
   i1 = i1 + -1 | 0;
   _SDL_memcpy(i3, i2, i6) | 0;
   if (!i1) {
    i1 = 0;
    break;
   } else {
    i3 = i3 + i4 | 0;
    i2 = i2 + i5 | 0;
   }
  }
  STACKTOP = i22;
  return i1 | 0;
 }
 return 0;
}

function _SDL_DrawLine2(i19, i17, i18, i6, i7, i16, i8) {
 i19 = i19 | 0;
 i17 = i17 | 0;
 i18 = i18 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i16 = i16 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i20 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i20 + 3 | 0;
 i4 = i20 + 2 | 0;
 i3 = i20 + 1 | 0;
 i2 = i20;
 if ((i7 | 0) == (i18 | 0)) {
  i1 = Math_imul((HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i7) | 0;
  if ((i6 | 0) < (i17 | 0)) {
   i18 = (i8 | 0) != 0 & 1;
   i4 = (i18 ^ 1) + i6 + i1 | 0;
   i1 = i17 - i6 + i18 | 0;
  } else {
   i4 = i1 + i17 | 0;
   i1 = i6 - i17 + ((i8 | 0) != 0 & 1) | 0;
  }
  if (!i1) {
   STACKTOP = i20;
   return;
  }
  i3 = i16 & 65535;
  i2 = i1;
  i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i4 << 1) | 0;
  while (1) {
   i2 = i2 + -1 | 0;
   HEAP16[i1 >> 1] = i3;
   if (!i2) break; else i1 = i1 + 2 | 0;
  }
  STACKTOP = i20;
  return;
 }
 if ((i6 | 0) == (i17 | 0)) {
  i5 = (HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
  if ((i7 | 0) < (i18 | 0)) {
   i4 = (Math_imul(i5, i7) | 0) + i6 | 0;
   i1 = (i8 | 0) != 0;
   i4 = i4 + (i1 ? 0 : i5) | 0;
   i1 = i18 - i7 + (i1 & 1) | 0;
  } else {
   i4 = (Math_imul(i5, i18) | 0) + i6 | 0;
   i1 = i7 - i18 + ((i8 | 0) != 0 & 1) | 0;
  }
  if (!i1) {
   STACKTOP = i20;
   return;
  }
  i3 = i16 & 65535;
  i2 = i1;
  i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i4 << 1) | 0;
  while (1) {
   i2 = i2 + -1 | 0;
   HEAP16[i1 >> 1] = i3;
   if (!i2) break; else i1 = i1 + (i5 << 1) | 0;
  }
  STACKTOP = i20;
  return;
 }
 i15 = i17 - i6 | 0;
 i1 = i18 - i7 | 0;
 if ((((i15 | 0) < 0 ? 0 - i15 | 0 : i15) | 0) == (((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0)) {
  i2 = (HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
  if ((i7 | 0) < (i18 | 0)) {
   i5 = (Math_imul(i2, i7) | 0) + i6 | 0;
   i4 = i2 + ((i6 | 0) > (i17 | 0) ? -1 : 1) | 0;
   i5 = i5 + ((i8 | 0) == 0 ? i4 : 0) | 0;
  } else {
   i5 = (Math_imul(i2, i18) | 0) + i17 | 0;
   i1 = i7 - i18 | 0;
   i4 = i2 + ((i6 | 0) < (i17 | 0) ? -1 : 1) | 0;
  }
  i1 = i1 + ((i8 | 0) != 0 & 1) | 0;
  if (!i1) {
   STACKTOP = i20;
   return;
  }
  i3 = i16 & 65535;
  i2 = i1;
  i1 = (HEAP32[i19 + 20 >> 2] | 0) + (i5 << 1) | 0;
  while (1) {
   i2 = i2 + -1 | 0;
   HEAP16[i1 >> 1] = i3;
   if (!i2) break; else i1 = i1 + (i4 << 1) | 0;
  }
  STACKTOP = i20;
  return;
 }
 i15 = HEAP32[i19 + 4 >> 2] | 0;
 _SDL_GetRGBA(i16, i15, i5, i4, i3, i2);
 i2 = HEAP32[i15 + 12 >> 2] | 0;
 if ((i2 | 0) == 31744) {
  i1 = i6 - i17 | 0;
  i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
  i2 = i7 - i18 | 0;
  i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
  if ((i1 | 0) < (i2 | 0)) {
   i15 = i1 << 1;
   i5 = i15 - i2 | 0;
   i3 = i1 - i2 | 0;
   i1 = i2;
   i2 = 0;
   i4 = 1;
  } else {
   i15 = i2 << 1;
   i5 = i15 - i1 | 0;
   i3 = i2 - i1 | 0;
   i2 = 1;
   i4 = 0;
  }
  i14 = i3 << 1;
  i12 = (i6 | 0) < (i17 | 0);
  i13 = i12 ? 0 - i2 | 0 : i2;
  i12 = i12 ? -1 : 1;
  i11 = (i7 | 0) < (i18 | 0);
  i10 = i11 ? 0 - i4 | 0 : i4;
  i11 = i11 ? -1 : 1;
  i9 = i1 + ((i8 | 0) != 0 & 1) | 0;
  if ((i9 | 0) <= 0) {
   STACKTOP = i20;
   return;
  }
  i7 = i16 & 65535;
  i8 = HEAP32[i19 + 20 >> 2] | 0;
  i6 = HEAP32[i19 + 16 >> 2] | 0;
  i4 = i5;
  i5 = 0;
  i3 = i17;
  i2 = i18;
  while (1) {
   HEAP16[i8 + ((Math_imul(i6, i2) | 0) + (i3 << 1)) >> 1] = i7;
   i1 = (i4 | 0) < 0;
   i5 = i5 + 1 | 0;
   if ((i5 | 0) == (i9 | 0)) break; else {
    i4 = (i1 ? i15 : i14) + i4 | 0;
    i3 = (i1 ? i13 : i12) + i3 | 0;
    i2 = i2 + (i1 ? i10 : i11) | 0;
   }
  }
  STACKTOP = i20;
  return;
 }
 i3 = i6 - i17 | 0;
 i3 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
 i4 = i7 - i18 | 0;
 i4 = (i4 | 0) < 0 ? 0 - i4 | 0 : i4;
 i1 = (i3 | 0) < (i4 | 0);
 if ((i2 | 0) == 63488) {
  if (i1) {
   i15 = i3 << 1;
   i5 = i15 - i4 | 0;
   i2 = i3 - i4 | 0;
   i1 = 0;
   i3 = 1;
  } else {
   i15 = i4 << 1;
   i5 = i15 - i3 | 0;
   i2 = i4 - i3 | 0;
   i4 = i3;
   i1 = 1;
   i3 = 0;
  }
  i14 = i2 << 1;
  i12 = (i6 | 0) < (i17 | 0);
  i13 = i12 ? 0 - i1 | 0 : i1;
  i12 = i12 ? -1 : 1;
  i11 = (i7 | 0) < (i18 | 0);
  i10 = i11 ? 0 - i3 | 0 : i3;
  i11 = i11 ? -1 : 1;
  i9 = i4 + ((i8 | 0) != 0 & 1) | 0;
  if ((i9 | 0) <= 0) {
   STACKTOP = i20;
   return;
  }
  i7 = i16 & 65535;
  i8 = HEAP32[i19 + 20 >> 2] | 0;
  i6 = HEAP32[i19 + 16 >> 2] | 0;
  i4 = i5;
  i5 = 0;
  i3 = i17;
  i2 = i18;
  while (1) {
   HEAP16[i8 + ((Math_imul(i6, i2) | 0) + (i3 << 1)) >> 1] = i7;
   i1 = (i4 | 0) < 0;
   i5 = i5 + 1 | 0;
   if ((i5 | 0) == (i9 | 0)) break; else {
    i4 = (i1 ? i15 : i14) + i4 | 0;
    i3 = (i1 ? i13 : i12) + i3 | 0;
    i2 = i2 + (i1 ? i10 : i11) | 0;
   }
  }
  STACKTOP = i20;
  return;
 } else {
  if (i1) {
   i15 = i3 << 1;
   i5 = i15 - i4 | 0;
   i2 = i3 - i4 | 0;
   i1 = 0;
   i3 = 1;
  } else {
   i15 = i4 << 1;
   i5 = i15 - i3 | 0;
   i2 = i4 - i3 | 0;
   i4 = i3;
   i1 = 1;
   i3 = 0;
  }
  i14 = i2 << 1;
  i12 = (i6 | 0) < (i17 | 0);
  i13 = i12 ? 0 - i1 | 0 : i1;
  i12 = i12 ? -1 : 1;
  i11 = (i7 | 0) < (i18 | 0);
  i10 = i11 ? 0 - i3 | 0 : i3;
  i11 = i11 ? -1 : 1;
  i9 = i4 + ((i8 | 0) != 0 & 1) | 0;
  if ((i9 | 0) <= 0) {
   STACKTOP = i20;
   return;
  }
  i7 = i16 & 65535;
  i8 = HEAP32[i19 + 20 >> 2] | 0;
  i6 = HEAP32[i19 + 16 >> 2] | 0;
  i4 = i5;
  i5 = 0;
  i3 = i17;
  i2 = i18;
  while (1) {
   HEAP16[i8 + ((Math_imul(i6, i2) | 0) + (i3 << 1)) >> 1] = i7;
   i1 = (i4 | 0) < 0;
   i5 = i5 + 1 | 0;
   if ((i5 | 0) == (i9 | 0)) break; else {
    i4 = (i1 ? i15 : i14) + i4 | 0;
    i3 = (i1 ? i13 : i12) + i3 | 0;
    i2 = i2 + (i1 ? i10 : i11) | 0;
   }
  }
  STACKTOP = i20;
  return;
 }
}

function _Blit1to1Key(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = HEAP32[i1 + 24 >> 2] | 0;
 i3 = HEAP32[i1 + 28 >> 2] | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i12 = HEAP32[i1 + 16 >> 2] | 0;
 i5 = HEAP32[i1 + 20 >> 2] | 0;
 i11 = HEAP32[i1 + 36 >> 2] | 0;
 i8 = HEAP32[i1 + 48 >> 2] | 0;
 i10 = HEAP32[i1 + 56 >> 2] | 0;
 i1 = (i3 | 0) == 0;
 if (!i8) {
  if (i1) return;
  i8 = (i4 + 7 | 0) / 8 | 0;
  i7 = i4 & 7;
  i1 = i5;
  L6 : while (1) {
   i3 = i3 + -1 | 0;
   switch (i7 | 0) {
   case 0:
    {
     i5 = i8;
     i4 = i2;
     i9 = 33;
     break;
    }
   case 7:
    {
     i5 = i8;
     i4 = i2;
     i9 = 36;
     break;
    }
   case 6:
    {
     i6 = i8;
     i4 = i2;
     i9 = 39;
     break;
    }
   case 5:
    {
     i5 = i1;
     i6 = i8;
     i9 = 42;
     break;
    }
   case 4:
    {
     i4 = i1;
     i6 = i8;
     i9 = 45;
     break;
    }
   case 3:
    {
     i4 = i1;
     i6 = i8;
     i9 = 48;
     break;
    }
   case 2:
    {
     i4 = i1;
     i6 = i8;
     i9 = 51;
     break;
    }
   case 1:
    {
     i4 = i1;
     i6 = i8;
     i9 = 54;
     break;
    }
   default:
    i9 = 57;
   }
   while (1) if ((i9 | 0) == 33) {
    i2 = HEAP8[i4 >> 0] | 0;
    if ((i2 & 255 | 0) != (i10 | 0)) HEAP8[i1 >> 0] = i2;
    i1 = i1 + 1 | 0;
    i4 = i4 + 1 | 0;
    i9 = 36;
    continue;
   } else if ((i9 | 0) == 36) {
    i2 = HEAP8[i4 >> 0] | 0;
    if ((i2 & 255 | 0) != (i10 | 0)) HEAP8[i1 >> 0] = i2;
    i1 = i1 + 1 | 0;
    i6 = i5;
    i4 = i4 + 1 | 0;
    i9 = 39;
    continue;
   } else if ((i9 | 0) == 39) {
    i2 = HEAP8[i4 >> 0] | 0;
    if ((i2 & 255 | 0) != (i10 | 0)) HEAP8[i1 >> 0] = i2;
    i5 = i1 + 1 | 0;
    i2 = i4 + 1 | 0;
    i9 = 42;
    continue;
   } else if ((i9 | 0) == 42) {
    i1 = HEAP8[i2 >> 0] | 0;
    if ((i1 & 255 | 0) != (i10 | 0)) HEAP8[i5 >> 0] = i1;
    i4 = i5 + 1 | 0;
    i2 = i2 + 1 | 0;
    i9 = 45;
    continue;
   } else if ((i9 | 0) == 45) {
    i1 = HEAP8[i2 >> 0] | 0;
    if ((i1 & 255 | 0) != (i10 | 0)) HEAP8[i4 >> 0] = i1;
    i4 = i4 + 1 | 0;
    i2 = i2 + 1 | 0;
    i9 = 48;
    continue;
   } else if ((i9 | 0) == 48) {
    i1 = HEAP8[i2 >> 0] | 0;
    if ((i1 & 255 | 0) != (i10 | 0)) HEAP8[i4 >> 0] = i1;
    i4 = i4 + 1 | 0;
    i2 = i2 + 1 | 0;
    i9 = 51;
    continue;
   } else if ((i9 | 0) == 51) {
    i1 = HEAP8[i2 >> 0] | 0;
    if ((i1 & 255 | 0) != (i10 | 0)) HEAP8[i4 >> 0] = i1;
    i4 = i4 + 1 | 0;
    i2 = i2 + 1 | 0;
    i9 = 54;
    continue;
   } else if ((i9 | 0) == 54) {
    i1 = HEAP8[i2 >> 0] | 0;
    if ((i1 & 255 | 0) != (i10 | 0)) HEAP8[i4 >> 0] = i1;
    i1 = i4 + 1 | 0;
    i2 = i2 + 1 | 0;
    if ((i6 | 0) > 1) {
     i5 = i6 + -1 | 0;
     i4 = i2;
     i9 = 33;
     continue;
    } else {
     i9 = 57;
     continue;
    }
   } else if ((i9 | 0) == 57) if (!i3) break L6; else {
    i1 = i1 + i11 | 0;
    i2 = i2 + i12 | 0;
    continue L6;
   }
  }
  return;
 } else {
  if (i1) return;
  i7 = (i4 + 7 | 0) / 8 | 0;
  i6 = i4 & 7;
  i1 = i5;
  L48 : while (1) {
   i3 = i3 + -1 | 0;
   switch (i6 | 0) {
   case 0:
    {
     i4 = i1;
     i5 = i7;
     i9 = 7;
     break;
    }
   case 7:
    {
     i4 = i1;
     i5 = i7;
     i9 = 10;
     break;
    }
   case 6:
    {
     i4 = i1;
     i5 = i7;
     i9 = 13;
     break;
    }
   case 5:
    {
     i4 = i1;
     i5 = i7;
     i9 = 16;
     break;
    }
   case 4:
    {
     i4 = i1;
     i5 = i7;
     i9 = 19;
     break;
    }
   case 3:
    {
     i4 = i1;
     i5 = i7;
     i9 = 22;
     break;
    }
   case 2:
    {
     i4 = i1;
     i5 = i7;
     i9 = 25;
     break;
    }
   case 1:
    {
     i4 = i1;
     i5 = i7;
     i9 = 28;
     break;
    }
   default:
    i9 = 31;
   }
   while (1) if ((i9 | 0) == 7) {
    i1 = HEAPU8[i2 >> 0] | 0;
    if ((i1 | 0) != (i10 | 0)) HEAP8[i4 >> 0] = HEAP8[i8 + i1 >> 0] | 0;
    i4 = i4 + 1 | 0;
    i2 = i2 + 1 | 0;
    i9 = 10;
    continue;
   } else if ((i9 | 0) == 10) {
    i1 = HEAPU8[i2 >> 0] | 0;
    if ((i1 | 0) != (i10 | 0)) HEAP8[i4 >> 0] = HEAP8[i8 + i1 >> 0] | 0;
    i4 = i4 + 1 | 0;
    i2 = i2 + 1 | 0;
    i9 = 13;
    continue;
   } else if ((i9 | 0) == 13) {
    i1 = HEAPU8[i2 >> 0] | 0;
    if ((i1 | 0) != (i10 | 0)) HEAP8[i4 >> 0] = HEAP8[i8 + i1 >> 0] | 0;
    i4 = i4 + 1 | 0;
    i2 = i2 + 1 | 0;
    i9 = 16;
    continue;
   } else if ((i9 | 0) == 16) {
    i1 = HEAPU8[i2 >> 0] | 0;
    if ((i1 | 0) != (i10 | 0)) HEAP8[i4 >> 0] = HEAP8[i8 + i1 >> 0] | 0;
    i4 = i4 + 1 | 0;
    i2 = i2 + 1 | 0;
    i9 = 19;
    continue;
   } else if ((i9 | 0) == 19) {
    i1 = HEAPU8[i2 >> 0] | 0;
    if ((i1 | 0) != (i10 | 0)) HEAP8[i4 >> 0] = HEAP8[i8 + i1 >> 0] | 0;
    i4 = i4 + 1 | 0;
    i2 = i2 + 1 | 0;
    i9 = 22;
    continue;
   } else if ((i9 | 0) == 22) {
    i1 = HEAPU8[i2 >> 0] | 0;
    if ((i1 | 0) != (i10 | 0)) HEAP8[i4 >> 0] = HEAP8[i8 + i1 >> 0] | 0;
    i4 = i4 + 1 | 0;
    i2 = i2 + 1 | 0;
    i9 = 25;
    continue;
   } else if ((i9 | 0) == 25) {
    i1 = HEAPU8[i2 >> 0] | 0;
    if ((i1 | 0) != (i10 | 0)) HEAP8[i4 >> 0] = HEAP8[i8 + i1 >> 0] | 0;
    i4 = i4 + 1 | 0;
    i2 = i2 + 1 | 0;
    i9 = 28;
    continue;
   } else if ((i9 | 0) == 28) {
    i1 = HEAPU8[i2 >> 0] | 0;
    if ((i1 | 0) != (i10 | 0)) HEAP8[i4 >> 0] = HEAP8[i8 + i1 >> 0] | 0;
    i1 = i4 + 1 | 0;
    i2 = i2 + 1 | 0;
    if ((i5 | 0) > 1) {
     i4 = i1;
     i5 = i5 + -1 | 0;
     i9 = 7;
     continue;
    } else {
     i9 = 31;
     continue;
    }
   } else if ((i9 | 0) == 31) if (!i3) break L48; else {
    i1 = i1 + i11 | 0;
    i2 = i2 + i12 | 0;
    continue L48;
   }
  }
  return;
 }
}

function _SDL_CreateWindow(i17, i8, i13, i1, i2, i7) {
 i17 = i17 | 0;
 i8 = i8 | 0;
 i13 = i13 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i16 = i18 + 32 | 0;
 i15 = i18 + 24 | 0;
 i5 = i18 + 16 | 0;
 i4 = i18 + 8 | 0;
 i3 = i18;
 i14 = i18 + 40 | 0;
 if ((HEAP32[3256] | 0) == 0 ? (_SDL_VideoInit(0) | 0) < 0 : 0) {
  i17 = 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 i12 = (i1 | 0) < 1 ? 1 : i1;
 i11 = (i2 | 0) < 1 ? 1 : i2;
 L5 : do if (i7 & 2) {
  i2 = HEAP32[3256] | 0;
  if (!(HEAP32[i2 + 148 >> 2] | 0)) {
   _SDL_SetError(41430, i3) | 0;
   i17 = 0;
   STACKTOP = i18;
   return i17 | 0;
  }
  L11 : do if (!i2) i1 = _SDL_SetError(41242, i4) | 0; else {
   i1 = HEAP32[i2 + 356 >> 2] | 0;
   do if (!i1) {
    i1 = HEAP32[i2 + 136 >> 2] | 0;
    if (!i1) {
     i1 = _SDL_SetError(41464, i5) | 0;
     break L11;
    }
    i1 = FUNCTION_TABLE_iii[i1 & 63](i2, 0) | 0;
    i3 = HEAP32[3256] | 0;
    if (!i1) {
     i2 = i3;
     i1 = HEAP32[i3 + 356 >> 2] | 0;
     break;
    }
    i2 = HEAP32[i3 + 144 >> 2] | 0;
    if (!i2) break L11;
    FUNCTION_TABLE_vi[i2 & 511](i3);
    break L11;
   } while (0);
   HEAP32[i2 + 356 >> 2] = i1 + 1;
   break L5;
  } while (0);
  if ((i1 | 0) < 0) {
   i17 = 0;
   STACKTOP = i18;
   return i17 | 0;
  }
 } while (0);
 if ((i7 & 8192 | 0) != 0 ? (i6 = _SDL_GetHint(41502) | 0, (i6 | 0) != 0) : 0) {
  i10 = (_SDL_atoi(i6) | 0) > 0;
  i7 = i10 ? i7 & -8193 : i7;
 }
 i10 = _SDL_calloc(1, 148) | 0;
 if (!i10) {
  _SDL_Error(0) | 0;
  i17 = 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 HEAP32[i10 >> 2] = (HEAP32[3256] | 0) + 248;
 i9 = (HEAP32[3256] | 0) + 252 | 0;
 i6 = HEAP32[i9 >> 2] | 0;
 HEAP32[i9 >> 2] = i6 + 1;
 HEAP32[i10 + 4 >> 2] = i6;
 i6 = i10 + 16 | 0;
 HEAP32[i6 >> 2] = i8;
 i9 = i10 + 20 | 0;
 HEAP32[i9 >> 2] = i13;
 HEAP32[i10 + 24 >> 2] = i12;
 HEAP32[i10 + 28 >> 2] = i11;
 i5 = i8 & -65536;
 L35 : do if ((i5 | 0) < 805240832) {
  switch (i5 | 0) {
  case 536805376:
   break;
  default:
   {
    i2 = 23;
    break L35;
   }
  }
  i1 = _SDL_GetWindowDisplayIndex(i10) | 0;
  i2 = HEAP32[3256] | 0;
  if ((i1 | 0) > -1) i3 = (HEAP32[i2 + 240 >> 2] | 0) + (i1 * 68 | 0) | 0; else i3 = 0;
  i4 = HEAP32[i2 + 236 >> 2] | 0;
  L41 : do if ((i4 | 0) > 0) {
   i2 = HEAP32[i2 + 240 >> 2] | 0;
   i1 = 0;
   while (1) {
    if ((i2 + (i1 * 68 | 0) | 0) == (i3 | 0)) break L41;
    i1 = i1 + 1 | 0;
    if ((i1 | 0) >= (i4 | 0)) {
     i1 = 0;
     break;
    }
   }
  } else i1 = 0; while (0);
  _SDL_GetDisplayBounds(i1, i14) | 0;
  i2 = 38;
 } else switch (i5 | 0) {
 case 805240832:
  {
   i2 = 24;
   break;
  }
 default:
  i2 = 23;
 } while (0);
 L48 : do if ((i2 | 0) == 23) {
  i1 = i13 & -65536;
  if ((i1 | 0) < 805240832) switch (i1 | 0) {
  case 536805376:
   {
    i2 = 24;
    break L48;
   }
  default:
   break L48;
  } else switch (i1 | 0) {
  case 805240832:
   {
    i2 = 24;
    break L48;
   }
  default:
   break L48;
  }
 } while (0);
 L53 : do if ((i2 | 0) == 24) {
  i1 = _SDL_GetWindowDisplayIndex(i10) | 0;
  i2 = HEAP32[3256] | 0;
  if ((i1 | 0) > -1) i3 = (HEAP32[i2 + 240 >> 2] | 0) + (i1 * 68 | 0) | 0; else i3 = 0;
  i4 = HEAP32[i2 + 236 >> 2] | 0;
  L58 : do if ((i4 | 0) > 0) {
   i2 = HEAP32[i2 + 240 >> 2] | 0;
   i1 = 0;
   while (1) {
    if ((i2 + (i1 * 68 | 0) | 0) == (i3 | 0)) break L58;
    i1 = i1 + 1 | 0;
    if ((i1 | 0) >= (i4 | 0)) {
     i1 = 0;
     break;
    }
   }
  } else i1 = 0; while (0);
  _SDL_GetDisplayBounds(i1, i14) | 0;
  if ((i5 | 0) < 805240832) switch (i5 | 0) {
  case 536805376:
   {
    i2 = 38;
    break L53;
   }
  default:
   {
    i2 = 39;
    break L53;
   }
  } else switch (i5 | 0) {
  case 805240832:
   {
    i2 = 38;
    break L53;
   }
  default:
   {
    i2 = 39;
    break L53;
   }
  }
 } while (0);
 if ((i2 | 0) == 38) {
  HEAP32[i6 >> 2] = (((HEAP32[i14 + 8 >> 2] | 0) - i12 | 0) / 2 | 0) + (HEAP32[i14 >> 2] | 0);
  i2 = 39;
 }
 L69 : do if ((i2 | 0) == 39) {
  i1 = i13 & -65536;
  if ((i1 | 0) < 805240832) switch (i1 | 0) {
  case 536805376:
   break;
  default:
   break L69;
  } else switch (i1 | 0) {
  case 805240832:
   break;
  default:
   break L69;
  }
  HEAP32[i9 >> 2] = (((HEAP32[i14 + 12 >> 2] | 0) - i11 | 0) / 2 | 0) + (HEAP32[i14 + 4 >> 2] | 0);
 } while (0);
 i1 = i7 & 8242 | 8;
 i3 = i10 + 48 | 0;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i10 + 52 >> 2] = i1;
 HEAPF32[i10 + 92 >> 2] = 1.0;
 HEAP32[i10 + 144 >> 2] = HEAP32[(HEAP32[3256] | 0) + 244 >> 2];
 HEAP32[i10 + 116 >> 2] = 0;
 i1 = HEAP32[3256] | 0;
 i2 = HEAP32[i1 + 244 >> 2] | 0;
 if (i2) {
  HEAP32[i2 + 140 >> 2] = i10;
  i1 = HEAP32[3256] | 0;
 }
 HEAP32[i1 + 244 >> 2] = i10;
 i1 = HEAP32[3256] | 0;
 i2 = HEAP32[i1 + 24 >> 2] | 0;
 if ((i2 | 0) != 0 ? (FUNCTION_TABLE_iii[i2 & 63](i1, i10) | 0) < 0 : 0) {
  _SDL_DestroyWindow(i10);
  i17 = 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 do if (i17) {
  i1 = HEAP32[3256] | 0;
  if (!i1) {
   _SDL_SetError(41242, i15) | 0;
   break;
  }
  if ((HEAP32[i10 >> 2] | 0) != (i1 + 248 | 0)) {
   _SDL_SetError(41324, i16) | 0;
   break;
  }
  i2 = i10 + 8 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) != (i17 | 0)) {
   _SDL_free(i1);
   if (!(HEAP8[i17 >> 0] | 0)) i1 = 0; else i1 = _SDL_strdup(i17) | 0;
   HEAP32[i2 >> 2] = i1;
   i1 = HEAP32[3256] | 0;
   i2 = HEAP32[i1 + 32 >> 2] | 0;
   if (i2) FUNCTION_TABLE_vii[i2 & 127](i1, i10);
  }
 } while (0);
 _SDL_FinishWindowCreation(i10, i7);
 _SDL_UpdateFullscreenMode(i10, (HEAP32[i3 >> 2] & 69 | 0) == 5 & 1);
 i17 = i10;
 STACKTOP = i18;
 return i17 | 0;
}

function _SDL_DrawLine4(i16, i17, i18, i7, i8, i19, i15) {
 i16 = i16 | 0;
 i17 = i17 | 0;
 i18 = i18 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i19 = i19 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i20 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i20 + 3 | 0;
 i4 = i20 + 2 | 0;
 i3 = i20 + 1 | 0;
 i2 = i20;
 if ((i8 | 0) == (i18 | 0)) {
  i1 = Math_imul((HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i16 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i8) | 0;
  if ((i7 | 0) < (i17 | 0)) {
   i18 = (i15 | 0) != 0 & 1;
   i3 = (i18 ^ 1) + i7 + i1 | 0;
   i1 = i17 - i7 + i18 | 0;
  } else {
   i3 = i1 + i17 | 0;
   i1 = i7 - i17 + ((i15 | 0) != 0 & 1) | 0;
  }
  if (!i1) {
   STACKTOP = i20;
   return;
  }
  i2 = i1;
  i1 = (HEAP32[i16 + 20 >> 2] | 0) + (i3 << 2) | 0;
  while (1) {
   i2 = i2 + -1 | 0;
   HEAP32[i1 >> 2] = i19;
   if (!i2) break; else i1 = i1 + 4 | 0;
  }
  STACKTOP = i20;
  return;
 }
 if ((i7 | 0) == (i17 | 0)) {
  i4 = (HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i16 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
  if ((i8 | 0) < (i18 | 0)) {
   i3 = (Math_imul(i4, i8) | 0) + i7 | 0;
   i1 = (i15 | 0) != 0;
   i3 = i3 + (i1 ? 0 : i4) | 0;
   i1 = i18 - i8 + (i1 & 1) | 0;
  } else {
   i3 = (Math_imul(i4, i18) | 0) + i7 | 0;
   i1 = i8 - i18 + ((i15 | 0) != 0 & 1) | 0;
  }
  if (!i1) {
   STACKTOP = i20;
   return;
  }
  i2 = i1;
  i1 = (HEAP32[i16 + 20 >> 2] | 0) + (i3 << 2) | 0;
  while (1) {
   i2 = i2 + -1 | 0;
   HEAP32[i1 >> 2] = i19;
   if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
  }
  STACKTOP = i20;
  return;
 }
 i14 = i17 - i7 | 0;
 i1 = i18 - i8 | 0;
 if ((((i14 | 0) < 0 ? 0 - i14 | 0 : i14) | 0) == (((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0)) {
  i2 = (HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i16 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
  if ((i8 | 0) < (i18 | 0)) {
   i4 = (Math_imul(i2, i8) | 0) + i7 | 0;
   i3 = i2 + ((i7 | 0) > (i17 | 0) ? -1 : 1) | 0;
   i4 = i4 + ((i15 | 0) == 0 ? i3 : 0) | 0;
  } else {
   i4 = (Math_imul(i2, i18) | 0) + i17 | 0;
   i1 = i8 - i18 | 0;
   i3 = i2 + ((i7 | 0) < (i17 | 0) ? -1 : 1) | 0;
  }
  i1 = i1 + ((i15 | 0) != 0 & 1) | 0;
  if (!i1) {
   STACKTOP = i20;
   return;
  }
  i2 = i1;
  i1 = (HEAP32[i16 + 20 >> 2] | 0) + (i4 << 2) | 0;
  while (1) {
   i2 = i2 + -1 | 0;
   HEAP32[i1 >> 2] = i19;
   if (!i2) break; else i1 = i1 + (i3 << 2) | 0;
  }
  STACKTOP = i20;
  return;
 }
 i6 = HEAP32[i16 + 4 >> 2] | 0;
 _SDL_GetRGBA(i19, i6, i5, i4, i3, i2);
 if ((HEAP32[i6 + 12 >> 2] | 0) != 16711680) {
  i1 = i7 - i17 | 0;
  i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
  i2 = i8 - i18 | 0;
  i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
  if ((i1 | 0) < (i2 | 0)) {
   i14 = i1 << 1;
   i5 = i14 - i2 | 0;
   i3 = i1 - i2 | 0;
   i1 = i2;
   i2 = 0;
   i4 = 1;
  } else {
   i14 = i2 << 1;
   i5 = i14 - i1 | 0;
   i3 = i2 - i1 | 0;
   i2 = 1;
   i4 = 0;
  }
  i13 = i3 << 1;
  i11 = (i7 | 0) < (i17 | 0);
  i12 = i11 ? 0 - i2 | 0 : i2;
  i11 = i11 ? -1 : 1;
  i10 = (i8 | 0) < (i18 | 0);
  i9 = i10 ? 0 - i4 | 0 : i4;
  i10 = i10 ? -1 : 1;
  i8 = i1 + ((i15 | 0) != 0 & 1) | 0;
  if ((i8 | 0) <= 0) {
   STACKTOP = i20;
   return;
  }
  i7 = HEAP32[i16 + 20 >> 2] | 0;
  i6 = i16 + 16 | 0;
  i4 = i5;
  i5 = 0;
  i3 = i17;
  i2 = i18;
  while (1) {
   HEAP32[i7 + ((Math_imul(HEAP32[i6 >> 2] | 0, i2) | 0) + (i3 << 2)) >> 2] = i19;
   i1 = (i4 | 0) < 0;
   i5 = i5 + 1 | 0;
   if ((i5 | 0) == (i8 | 0)) break; else {
    i4 = (i1 ? i14 : i13) + i4 | 0;
    i3 = (i1 ? i12 : i11) + i3 | 0;
    i2 = i2 + (i1 ? i9 : i10) | 0;
   }
  }
  STACKTOP = i20;
  return;
 }
 i3 = i7 - i17 | 0;
 i3 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
 i4 = i8 - i18 | 0;
 i4 = (i4 | 0) < 0 ? 0 - i4 | 0 : i4;
 i1 = (i3 | 0) < (i4 | 0);
 if (!(HEAP32[i6 + 24 >> 2] | 0)) {
  if (i1) {
   i14 = i3 << 1;
   i5 = i14 - i4 | 0;
   i2 = i3 - i4 | 0;
   i1 = 0;
   i3 = 1;
  } else {
   i14 = i4 << 1;
   i5 = i14 - i3 | 0;
   i2 = i4 - i3 | 0;
   i4 = i3;
   i1 = 1;
   i3 = 0;
  }
  i13 = i2 << 1;
  i11 = (i7 | 0) < (i17 | 0);
  i12 = i11 ? 0 - i1 | 0 : i1;
  i11 = i11 ? -1 : 1;
  i10 = (i8 | 0) < (i18 | 0);
  i9 = i10 ? 0 - i3 | 0 : i3;
  i10 = i10 ? -1 : 1;
  i8 = i4 + ((i15 | 0) != 0 & 1) | 0;
  if ((i8 | 0) <= 0) {
   STACKTOP = i20;
   return;
  }
  i7 = HEAP32[i16 + 20 >> 2] | 0;
  i6 = i16 + 16 | 0;
  i4 = i5;
  i5 = 0;
  i3 = i17;
  i2 = i18;
  while (1) {
   HEAP32[i7 + ((Math_imul(HEAP32[i6 >> 2] | 0, i2) | 0) + (i3 << 2)) >> 2] = i19;
   i1 = (i4 | 0) < 0;
   i5 = i5 + 1 | 0;
   if ((i5 | 0) == (i8 | 0)) break; else {
    i4 = (i1 ? i14 : i13) + i4 | 0;
    i3 = (i1 ? i12 : i11) + i3 | 0;
    i2 = i2 + (i1 ? i9 : i10) | 0;
   }
  }
  STACKTOP = i20;
  return;
 } else {
  if (i1) {
   i14 = i3 << 1;
   i5 = i14 - i4 | 0;
   i2 = i3 - i4 | 0;
   i1 = 0;
   i3 = 1;
  } else {
   i14 = i4 << 1;
   i5 = i14 - i3 | 0;
   i2 = i4 - i3 | 0;
   i4 = i3;
   i1 = 1;
   i3 = 0;
  }
  i13 = i2 << 1;
  i11 = (i7 | 0) < (i17 | 0);
  i12 = i11 ? 0 - i1 | 0 : i1;
  i11 = i11 ? -1 : 1;
  i10 = (i8 | 0) < (i18 | 0);
  i9 = i10 ? 0 - i3 | 0 : i3;
  i10 = i10 ? -1 : 1;
  i8 = i4 + ((i15 | 0) != 0 & 1) | 0;
  if ((i8 | 0) <= 0) {
   STACKTOP = i20;
   return;
  }
  i7 = HEAP32[i16 + 20 >> 2] | 0;
  i6 = i16 + 16 | 0;
  i4 = i5;
  i5 = 0;
  i3 = i17;
  i2 = i18;
  while (1) {
   HEAP32[i7 + ((Math_imul(HEAP32[i6 >> 2] | 0, i2) | 0) + (i3 << 2)) >> 2] = i19;
   i1 = (i4 | 0) < 0;
   i5 = i5 + 1 | 0;
   if ((i5 | 0) == (i8 | 0)) break; else {
    i4 = (i1 ? i14 : i13) + i4 | 0;
    i3 = (i1 ? i12 : i11) + i3 | 0;
    i2 = i2 + (i1 ? i9 : i10) | 0;
   }
  }
  STACKTOP = i20;
  return;
 }
}

function _BlitBtoNAlphaKey(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
 i17 = HEAP32[i4 + 24 >> 2] | 0;
 i2 = HEAP32[i4 + 28 >> 2] | 0;
 i35 = HEAP32[i4 + 36 >> 2] | 0;
 i1 = HEAP32[i4 + 44 >> 2] | 0;
 i18 = HEAP32[(HEAP32[(HEAP32[i4 + 40 >> 2] | 0) + 4 >> 2] | 0) + 4 >> 2] | 0;
 i19 = HEAPU8[i4 + 63 >> 0] | 0;
 i20 = HEAP32[i4 + 56 >> 2] | 0;
 i21 = HEAPU8[i1 + 9 >> 0] | 0;
 i22 = (HEAP32[i4 + 16 >> 2] | 0) + i17 + ((i17 + 7 | 0) / -8 | 0) | 0;
 if (!i2) return;
 i23 = (i17 | 0) > 0;
 i24 = i1 + 28 | 0;
 i25 = i1 + 32 | 0;
 i26 = i1 + 29 | 0;
 i27 = i1 + 33 | 0;
 i28 = i1 + 30 | 0;
 i29 = i1 + 34 | 0;
 i30 = i1 + 31 | 0;
 i31 = i1 + 35 | 0;
 i32 = i1 + 12 | 0;
 i33 = i1 + 16 | 0;
 i34 = i1 + 20 | 0;
 i15 = i1 + 24 | 0;
 i16 = Math_imul(i17, i21) | 0;
 i3 = HEAP32[i4 + 20 >> 2] | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 while (1) {
  i2 = i2 + -1 | 0;
  if (i23) {
   i4 = 0;
   i13 = 0;
   i14 = i3;
   while (1) {
    if (!(i13 & 7)) {
     i4 = HEAP8[i1 >> 0] | 0;
     i1 = i1 + 1 | 0;
    }
    i12 = i4 & 255;
    i4 = (i4 & 255) >>> 7 & 255;
    L12 : do if ((i4 | 0) != (i20 | 0)) {
     i5 = HEAPU8[i18 + (i4 << 2) >> 0] | 0;
     i8 = HEAPU8[i18 + (i4 << 2) + 1 >> 0] | 0;
     i9 = HEAPU8[i18 + (i4 << 2) + 2 >> 0] | 0;
     switch (i21 | 0) {
     case 1:
      {
       i4 = HEAPU8[i14 >> 0] | 0;
       i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i4) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
       i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i4) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
       i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i4) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
       i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i32 >> 2]) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
       break;
      }
     case 2:
      {
       i4 = HEAPU16[i14 >> 1] | 0;
       i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i4) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
       i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i4) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
       i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i4) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
       i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((i4 & HEAP32[i32 >> 2]) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
       break;
      }
     case 3:
      {
       i11 = 255;
       i10 = HEAPU8[i14 + ((HEAPU8[i29 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
       i6 = HEAPU8[i14 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
       i4 = HEAPU8[i14 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
       break;
      }
     case 4:
      {
       i4 = HEAP32[i14 >> 2] | 0;
       i11 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i4) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
       i10 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i4) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
       i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i4) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
       i4 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i4) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
       break;
      }
     default:
      {
       i11 = 0;
       i10 = 0;
       i6 = 0;
       i4 = 0;
      }
     }
     i7 = (((Math_imul(i5 - i4 | 0, i19) | 0) >>> 0) / 255 | 0) + i4 | 0;
     i6 = (((Math_imul(i8 - i6 | 0, i19) | 0) >>> 0) / 255 | 0) + i6 | 0;
     i5 = (((Math_imul(i9 - i10 | 0, i19) | 0) >>> 0) / 255 | 0) + i10 | 0;
     i4 = i11 + i19 - (((Math_imul(i11, i19) | 0) >>> 0) / 255 | 0) | 0;
     switch (i21 | 0) {
     case 1:
      {
       HEAP8[i14 >> 0] = i6 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i7 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i5 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0) | i4 >>> (HEAPU8[i30 >> 0] | 0) << (HEAPU8[i31 >> 0] | 0);
       break L12;
      }
     case 2:
      {
       HEAP16[i14 >> 1] = i6 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i7 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i5 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0) | i4 >>> (HEAPU8[i30 >> 0] | 0) << (HEAPU8[i31 >> 0] | 0);
       break L12;
      }
     case 3:
      {
       HEAP8[i14 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
       HEAP8[i14 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
       HEAP8[i14 + ((HEAPU8[i29 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
       break L12;
      }
     case 4:
      {
       HEAP32[i14 >> 2] = i6 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i7 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i5 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0) | i4 >>> (HEAPU8[i30 >> 0] | 0) << (HEAPU8[i31 >> 0] | 0);
       break L12;
      }
     default:
      break L12;
     }
    } while (0);
    i13 = i13 + 1 | 0;
    if ((i13 | 0) == (i17 | 0)) break; else {
     i4 = i12 << 1 & 255;
     i14 = i14 + i21 | 0;
    }
   }
   i3 = i3 + i16 | 0;
  }
  if (!i2) break; else {
   i3 = i3 + i35 | 0;
   i1 = i1 + i22 | 0;
  }
 }
 return;
}

function _BlitARGBto565PixelAlpha(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = HEAP32[i1 + 24 >> 2] | 0;
 i12 = HEAP32[i1 + 28 >> 2] | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i11 = HEAP32[i1 + 16 >> 2] >> 2;
 i4 = HEAP32[i1 + 20 >> 2] | 0;
 i10 = HEAP32[i1 + 36 >> 2] >> 1;
 i1 = i12 + -1 | 0;
 if (!i12) return;
 i12 = (i3 + 3 | 0) / 4 | 0;
 i9 = i3 & 3;
 if (!i9) {
  i9 = i11 + 4 | 0;
  i8 = i10 + 4 | 0;
  i7 = i1;
  i1 = i4;
  while (1) {
   i6 = i12;
   while (1) {
    i3 = HEAP32[i2 >> 2] | 0;
    i4 = i3 >>> 27;
    switch (i4 | 0) {
    case 0:
     break;
    case 31:
     {
      HEAP16[i1 >> 1] = i3 >>> 8 & 63488 | i3 >>> 5 & 2016 | i3 >>> 3 & 31;
      break;
     }
    default:
     {
      i11 = HEAPU16[i1 >> 1] | 0;
      i11 = (i11 << 16 | i11) & 132184095;
      i11 = ((Math_imul((i3 << 11 & 132120576 | i3 >>> 8 & 63488 | i3 >>> 3 & 31) - i11 | 0, i4) | 0) >>> 5) + i11 & 132184095;
      HEAP16[i1 >> 1] = i11 >>> 16 | i11;
     }
    }
    i3 = i1 + 2 | 0;
    i4 = HEAP32[i2 + 4 >> 2] | 0;
    i5 = i4 >>> 27;
    switch (i5 | 0) {
    case 0:
     break;
    case 31:
     {
      HEAP16[i3 >> 1] = i4 >>> 8 & 63488 | i4 >>> 5 & 2016 | i4 >>> 3 & 31;
      break;
     }
    default:
     {
      i11 = HEAPU16[i3 >> 1] | 0;
      i11 = (i11 << 16 | i11) & 132184095;
      i11 = ((Math_imul((i4 << 11 & 132120576 | i4 >>> 8 & 63488 | i4 >>> 3 & 31) - i11 | 0, i5) | 0) >>> 5) + i11 & 132184095;
      HEAP16[i3 >> 1] = i11 >>> 16 | i11;
     }
    }
    i3 = i1 + 4 | 0;
    i4 = HEAP32[i2 + 8 >> 2] | 0;
    i5 = i4 >>> 27;
    switch (i5 | 0) {
    case 0:
     break;
    case 31:
     {
      HEAP16[i3 >> 1] = i4 >>> 8 & 63488 | i4 >>> 5 & 2016 | i4 >>> 3 & 31;
      break;
     }
    default:
     {
      i11 = HEAPU16[i3 >> 1] | 0;
      i11 = (i11 << 16 | i11) & 132184095;
      i11 = ((Math_imul((i4 << 11 & 132120576 | i4 >>> 8 & 63488 | i4 >>> 3 & 31) - i11 | 0, i5) | 0) >>> 5) + i11 & 132184095;
      HEAP16[i3 >> 1] = i11 >>> 16 | i11;
     }
    }
    i3 = i1 + 6 | 0;
    i4 = HEAP32[i2 + 12 >> 2] | 0;
    i5 = i4 >>> 27;
    switch (i5 | 0) {
    case 0:
     break;
    case 31:
     {
      HEAP16[i3 >> 1] = i4 >>> 8 & 63488 | i4 >>> 5 & 2016 | i4 >>> 3 & 31;
      break;
     }
    default:
     {
      i11 = HEAPU16[i3 >> 1] | 0;
      i11 = (i11 << 16 | i11) & 132184095;
      i11 = ((Math_imul((i4 << 11 & 132120576 | i4 >>> 8 & 63488 | i4 >>> 3 & 31) - i11 | 0, i5) | 0) >>> 5) + i11 & 132184095;
      HEAP16[i3 >> 1] = i11 >>> 16 | i11;
     }
    }
    if ((i6 | 0) > 1) {
     i1 = i1 + 8 | 0;
     i6 = i6 + -1 | 0;
     i2 = i2 + 16 | 0;
    } else break;
   }
   if (!i7) break; else {
    i7 = i7 + -1 | 0;
    i1 = i1 + (i8 << 1) | 0;
    i2 = i2 + (i9 << 2) | 0;
   }
  }
  return;
 } else {
  i8 = i1;
  i1 = i4;
 }
 L28 : while (1) {
  switch (i9 | 0) {
  case 1:
   {
    i7 = i12;
    i3 = 32;
    break;
   }
  case 3:
   {
    i6 = i12;
    i3 = 24;
    break;
   }
  case 2:
   {
    i6 = i12;
    i3 = 28;
    break;
   }
  default:
   i3 = 36;
  }
  while (1) if ((i3 | 0) == 24) {
   i3 = HEAP32[i2 >> 2] | 0;
   i4 = i3 >>> 27;
   switch (i4 | 0) {
   case 0:
    break;
   case 31:
    {
     HEAP16[i1 >> 1] = i3 >>> 8 & 63488 | i3 >>> 5 & 2016 | i3 >>> 3 & 31;
     break;
    }
   default:
    {
     i7 = HEAPU16[i1 >> 1] | 0;
     i7 = (i7 << 16 | i7) & 132184095;
     i7 = ((Math_imul((i3 << 11 & 132120576 | i3 >>> 8 & 63488 | i3 >>> 3 & 31) - i7 | 0, i4) | 0) >>> 5) + i7 & 132184095;
     HEAP16[i1 >> 1] = i7 >>> 16 | i7;
    }
   }
   i1 = i1 + 2 | 0;
   i2 = i2 + 4 | 0;
   i3 = 28;
   continue;
  } else if ((i3 | 0) == 28) {
   i3 = HEAP32[i2 >> 2] | 0;
   i4 = i3 >>> 27;
   switch (i4 | 0) {
   case 0:
    break;
   case 31:
    {
     HEAP16[i1 >> 1] = i3 >>> 8 & 63488 | i3 >>> 5 & 2016 | i3 >>> 3 & 31;
     break;
    }
   default:
    {
     i7 = HEAPU16[i1 >> 1] | 0;
     i7 = (i7 << 16 | i7) & 132184095;
     i7 = ((Math_imul((i3 << 11 & 132120576 | i3 >>> 8 & 63488 | i3 >>> 3 & 31) - i7 | 0, i4) | 0) >>> 5) + i7 & 132184095;
     HEAP16[i1 >> 1] = i7 >>> 16 | i7;
    }
   }
   i1 = i1 + 2 | 0;
   i7 = i6;
   i2 = i2 + 4 | 0;
   i3 = 32;
   continue;
  } else if ((i3 | 0) == 32) {
   i3 = HEAP32[i2 >> 2] | 0;
   i4 = i3 >>> 27;
   switch (i4 | 0) {
   case 0:
    break;
   case 31:
    {
     HEAP16[i1 >> 1] = i3 >>> 8 & 63488 | i3 >>> 5 & 2016 | i3 >>> 3 & 31;
     break;
    }
   default:
    {
     i6 = HEAPU16[i1 >> 1] | 0;
     i6 = (i6 << 16 | i6) & 132184095;
     i6 = ((Math_imul((i3 << 11 & 132120576 | i3 >>> 8 & 63488 | i3 >>> 3 & 31) - i6 | 0, i4) | 0) >>> 5) + i6 & 132184095;
     HEAP16[i1 >> 1] = i6 >>> 16 | i6;
    }
   }
   i3 = i2 + 4 | 0;
   i5 = i1 + 2 | 0;
   i6 = i7 + -1 | 0;
   if ((i7 | 0) <= 1) {
    i1 = i5;
    i2 = i3;
    i3 = 36;
    continue;
   }
   i3 = HEAP32[i3 >> 2] | 0;
   i4 = i3 >>> 27;
   switch (i4 | 0) {
   case 0:
    break;
   case 31:
    {
     HEAP16[i5 >> 1] = i3 >>> 8 & 63488 | i3 >>> 5 & 2016 | i3 >>> 3 & 31;
     break;
    }
   default:
    {
     i7 = HEAPU16[i5 >> 1] | 0;
     i7 = (i7 << 16 | i7) & 132184095;
     i7 = ((Math_imul((i3 << 11 & 132120576 | i3 >>> 8 & 63488 | i3 >>> 3 & 31) - i7 | 0, i4) | 0) >>> 5) + i7 & 132184095;
     HEAP16[i5 >> 1] = i7 >>> 16 | i7;
    }
   }
   i1 = i1 + 4 | 0;
   i2 = i2 + 8 | 0;
   i3 = 24;
   continue;
  } else if ((i3 | 0) == 36) if (!i8) break L28; else {
   i8 = i8 + -1 | 0;
   i1 = i1 + (i10 << 1) | 0;
   i2 = i2 + (i11 << 2) | 0;
   continue L28;
  }
 }
 return;
}

function _Blit_RGB101010_index8(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = HEAP32[i1 + 24 >> 2] | 0;
 i2 = HEAP32[i1 + 28 >> 2] | 0;
 i5 = HEAP32[i1 >> 2] | 0;
 i11 = (HEAP32[i1 + 16 >> 2] | 0) / 4 | 0;
 i4 = HEAP32[i1 + 20 >> 2] | 0;
 i10 = HEAP32[i1 + 36 >> 2] | 0;
 i8 = HEAP32[i1 + 48 >> 2] | 0;
 i1 = (i2 | 0) == 0;
 if (!i8) {
  if (i1) return;
  i7 = (i3 + 7 | 0) / 8 | 0;
  i6 = i3 & 7;
  i1 = i4;
  L6 : while (1) {
   i2 = i2 + -1 | 0;
   switch (i6 | 0) {
   case 0:
    {
     i3 = i7;
     i9 = 7;
     break;
    }
   case 7:
    {
     i3 = i7;
     i9 = 8;
     break;
    }
   case 6:
    {
     i3 = i7;
     i9 = 9;
     break;
    }
   case 5:
    {
     i3 = i7;
     i9 = 10;
     break;
    }
   case 4:
    {
     i3 = i7;
     i9 = 11;
     break;
    }
   case 3:
    {
     i3 = i7;
     i9 = 12;
     break;
    }
   case 2:
    {
     i3 = i7;
     i9 = 13;
     break;
    }
   case 1:
    {
     i4 = i1;
     i3 = i7;
     i9 = 14;
     break;
    }
   default:
    i9 = 15;
   }
   while (1) if ((i9 | 0) == 7) {
    i8 = HEAP32[i5 >> 2] | 0;
    HEAP8[i1 >> 0] = i8 >>> 22 & 224 | i8 >>> 15 & 28 | i8 >>> 8 & 3;
    i1 = i1 + 1 | 0;
    i9 = 8;
    continue;
   } else if ((i9 | 0) == 8) {
    i8 = HEAP32[i5 >> 2] | 0;
    HEAP8[i1 >> 0] = i8 >>> 22 & 224 | i8 >>> 15 & 28 | i8 >>> 8 & 3;
    i1 = i1 + 1 | 0;
    i9 = 9;
    continue;
   } else if ((i9 | 0) == 9) {
    i8 = HEAP32[i5 >> 2] | 0;
    HEAP8[i1 >> 0] = i8 >>> 22 & 224 | i8 >>> 15 & 28 | i8 >>> 8 & 3;
    i1 = i1 + 1 | 0;
    i9 = 10;
    continue;
   } else if ((i9 | 0) == 10) {
    i8 = HEAP32[i5 >> 2] | 0;
    HEAP8[i1 >> 0] = i8 >>> 22 & 224 | i8 >>> 15 & 28 | i8 >>> 8 & 3;
    i1 = i1 + 1 | 0;
    i9 = 11;
    continue;
   } else if ((i9 | 0) == 11) {
    i8 = HEAP32[i5 >> 2] | 0;
    HEAP8[i1 >> 0] = i8 >>> 22 & 224 | i8 >>> 15 & 28 | i8 >>> 8 & 3;
    i1 = i1 + 1 | 0;
    i9 = 12;
    continue;
   } else if ((i9 | 0) == 12) {
    i8 = HEAP32[i5 >> 2] | 0;
    HEAP8[i1 >> 0] = i8 >>> 22 & 224 | i8 >>> 15 & 28 | i8 >>> 8 & 3;
    i1 = i1 + 1 | 0;
    i9 = 13;
    continue;
   } else if ((i9 | 0) == 13) {
    i4 = HEAP32[i5 >> 2] | 0;
    HEAP8[i1 >> 0] = i4 >>> 22 & 224 | i4 >>> 15 & 28 | i4 >>> 8 & 3;
    i4 = i1 + 1 | 0;
    i9 = 14;
    continue;
   } else if ((i9 | 0) == 14) {
    i9 = HEAP32[i5 >> 2] | 0;
    i1 = i4 + 1 | 0;
    HEAP8[i4 >> 0] = i9 >>> 22 & 224 | i9 >>> 15 & 28 | i9 >>> 8 & 3;
    if ((i3 | 0) > 1) {
     i3 = i3 + -1 | 0;
     i9 = 7;
     continue;
    } else {
     i9 = 15;
     continue;
    }
   } else if ((i9 | 0) == 15) if (!i2) break L6; else {
    i1 = i1 + i10 | 0;
    i5 = i5 + (i11 << 2) | 0;
    continue L6;
   }
  }
  return;
 } else {
  if (i1) return;
  i7 = (i3 + 7 | 0) / 8 | 0;
  i6 = i3 & 7;
  i1 = i4;
  i3 = i5;
  L24 : while (1) {
   i2 = i2 + -1 | 0;
   switch (i6 | 0) {
   case 0:
    {
     i4 = i7;
     i9 = 17;
     break;
    }
   case 7:
    {
     i4 = i7;
     i9 = 18;
     break;
    }
   case 6:
    {
     i4 = i7;
     i9 = 19;
     break;
    }
   case 5:
    {
     i4 = i7;
     i9 = 20;
     break;
    }
   case 4:
    {
     i4 = i7;
     i9 = 21;
     break;
    }
   case 3:
    {
     i4 = i7;
     i9 = 22;
     break;
    }
   case 2:
    {
     i4 = i7;
     i9 = 23;
     break;
    }
   case 1:
    {
     i5 = i1;
     i4 = i7;
     i9 = 24;
     break;
    }
   default:
    i9 = 25;
   }
   while (1) if ((i9 | 0) == 17) {
    i5 = HEAP32[i3 >> 2] | 0;
    HEAP8[i1 >> 0] = HEAP8[i8 + (i5 >>> 22 & 224 | i5 >>> 15 & 28 | i5 >>> 8 & 3) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i3 = i3 + 4 | 0;
    i9 = 18;
    continue;
   } else if ((i9 | 0) == 18) {
    i5 = HEAP32[i3 >> 2] | 0;
    HEAP8[i1 >> 0] = HEAP8[i8 + (i5 >>> 22 & 224 | i5 >>> 15 & 28 | i5 >>> 8 & 3) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i3 = i3 + 4 | 0;
    i9 = 19;
    continue;
   } else if ((i9 | 0) == 19) {
    i5 = HEAP32[i3 >> 2] | 0;
    HEAP8[i1 >> 0] = HEAP8[i8 + (i5 >>> 22 & 224 | i5 >>> 15 & 28 | i5 >>> 8 & 3) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i3 = i3 + 4 | 0;
    i9 = 20;
    continue;
   } else if ((i9 | 0) == 20) {
    i5 = HEAP32[i3 >> 2] | 0;
    HEAP8[i1 >> 0] = HEAP8[i8 + (i5 >>> 22 & 224 | i5 >>> 15 & 28 | i5 >>> 8 & 3) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i3 = i3 + 4 | 0;
    i9 = 21;
    continue;
   } else if ((i9 | 0) == 21) {
    i5 = HEAP32[i3 >> 2] | 0;
    HEAP8[i1 >> 0] = HEAP8[i8 + (i5 >>> 22 & 224 | i5 >>> 15 & 28 | i5 >>> 8 & 3) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i3 = i3 + 4 | 0;
    i9 = 22;
    continue;
   } else if ((i9 | 0) == 22) {
    i5 = HEAP32[i3 >> 2] | 0;
    HEAP8[i1 >> 0] = HEAP8[i8 + (i5 >>> 22 & 224 | i5 >>> 15 & 28 | i5 >>> 8 & 3) >> 0] | 0;
    i1 = i1 + 1 | 0;
    i3 = i3 + 4 | 0;
    i9 = 23;
    continue;
   } else if ((i9 | 0) == 23) {
    i5 = HEAP32[i3 >> 2] | 0;
    HEAP8[i1 >> 0] = HEAP8[i8 + (i5 >>> 22 & 224 | i5 >>> 15 & 28 | i5 >>> 8 & 3) >> 0] | 0;
    i5 = i1 + 1 | 0;
    i3 = i3 + 4 | 0;
    i9 = 24;
    continue;
   } else if ((i9 | 0) == 24) {
    i9 = HEAP32[i3 >> 2] | 0;
    i1 = i5 + 1 | 0;
    HEAP8[i5 >> 0] = HEAP8[i8 + (i9 >>> 22 & 224 | i9 >>> 15 & 28 | i9 >>> 8 & 3) >> 0] | 0;
    i3 = i3 + 4 | 0;
    if ((i4 | 0) > 1) {
     i4 = i4 + -1 | 0;
     i9 = 17;
     continue;
    } else {
     i9 = 25;
     continue;
    }
   } else if ((i9 | 0) == 25) if (!i2) break L24; else {
    i1 = i1 + i10 | 0;
    i3 = i3 + (i11 << 2) | 0;
    continue L24;
   }
  }
  return;
 }
}

function _HandleAudioProcess(i17) {
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i16 = (HEAPU16[i17 + 8 >> 1] | 0) >>> 3 & 31;
 i14 = i17 + 28 | 0;
 i3 = i17 + 32 | 0;
 i3 = ((HEAPU8[i3 >> 0] | HEAPU8[i3 + 1 >> 0] << 8) & 65535) >>> 3 & 31;
 if (!(HEAP32[i17 + 136 >> 2] | 0)) return;
 if (HEAP32[i17 + 144 >> 2] | 0) return;
 i15 = i17 + 184 | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 if (HEAPU8[i14 >> 0] | HEAPU8[i14 + 1 >> 0] << 8 | HEAPU8[i14 + 2 >> 0] << 16 | HEAPU8[i14 + 3 >> 0] << 24) {
  i1 = HEAP32[i2 + 8 >> 2] | 0;
  if (!i1) {
   i1 = i17 + 48 | 0;
   i10 = i1;
   i1 = HEAPU8[i1 >> 0] | HEAPU8[i1 + 1 >> 0] << 8 | HEAPU8[i1 + 2 >> 0] << 16 | HEAPU8[i1 + 3 >> 0] << 24;
  } else {
   i1 = Math_imul(i1, i3) | 0;
   i1 = Math_imul(i1, HEAPU8[i17 + 10 >> 0] | 0) | 0;
   i10 = i17 + 48 | 0;
   HEAP8[i10 >> 0] = i1;
   HEAP8[i10 + 1 >> 0] = i1 >> 8;
   HEAP8[i10 + 2 >> 0] = i1 >> 16;
   HEAP8[i10 + 3 >> 0] = i1 >> 24;
  }
  i11 = i17 + 20 | 0;
  i12 = i17 + 24 | 0;
  i13 = i17 + 44 | 0;
  FUNCTION_TABLE_viii[HEAP32[i11 >> 2] & 31](HEAP32[i12 >> 2] | 0, HEAPU8[i13 >> 0] | HEAPU8[i13 + 1 >> 0] << 8 | HEAPU8[i13 + 2 >> 0] << 16 | HEAPU8[i13 + 3 >> 0] << 24, i1);
  _SDL_ConvertAudio(i14) | 0;
  i8 = i17 + 52 | 0;
  i1 = HEAPU8[i8 >> 0] | HEAPU8[i8 + 1 >> 0] << 8 | HEAPU8[i8 + 2 >> 0] << 16 | HEAPU8[i8 + 3 >> 0] << 24;
  i9 = i17 + 16 | 0;
  i2 = HEAP32[i9 >> 2] | 0;
  if ((i1 | 0) == (i2 | 0)) i2 = HEAPU8[i13 >> 0] | HEAPU8[i13 + 1 >> 0] << 8 | HEAPU8[i13 + 2 >> 0] << 16 | HEAPU8[i13 + 3 >> 0] << 24; else {
   i3 = HEAP32[i15 >> 2] | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if (!i4) {
    i2 = (i2 >>> 0 > i1 >>> 0 ? i2 : i1) << 1;
    HEAP32[i3 + 4 >> 2] = i2;
    i2 = _SDL_malloc(i2) | 0;
    i3 = HEAP32[i15 >> 2] | 0;
    HEAP32[i3 >> 2] = i2;
    i1 = HEAPU8[i8 >> 0] | HEAPU8[i8 + 1 >> 0] << 8 | HEAPU8[i8 + 2 >> 0] << 16 | HEAPU8[i8 + 3 >> 0] << 24;
   } else i2 = i4;
   i4 = i3 + 12 | 0;
   i7 = HEAP32[i4 >> 2] | 0;
   i5 = HEAP32[i3 + 4 >> 2] | 0;
   if ((i1 + i7 | 0) >>> 0 > i5 >>> 0) {
    i6 = HEAP32[i3 + 16 >> 2] | 0;
    if (i7 >>> 0 > i6 >>> 0) {
     _SDL_memmove(i2, i2 + i6 | 0, i5 - i6 | 0) | 0;
     i3 = HEAP32[i15 >> 2] | 0;
     i1 = i3 + 12 | 0;
     i4 = (HEAP32[i1 >> 2] | 0) - (HEAP32[i3 + 16 >> 2] | 0) | 0;
     HEAP32[i1 >> 2] = i4;
     i1 = HEAPU8[i8 >> 0] | HEAPU8[i8 + 1 >> 0] << 8 | HEAPU8[i8 + 2 >> 0] << 16 | HEAPU8[i8 + 3 >> 0] << 24;
     i2 = HEAP32[i3 >> 2] | 0;
    } else {
     HEAP32[i4 >> 2] = 0;
     i4 = 0;
    }
    HEAP32[i3 + 16 >> 2] = 0;
    i3 = i4;
   } else i3 = i7;
   _SDL_memcpy(i2 + i3 | 0, HEAPU8[i13 >> 0] | HEAPU8[i13 + 1 >> 0] << 8 | HEAPU8[i13 + 2 >> 0] << 16 | HEAPU8[i13 + 3 >> 0] << 24, i1) | 0;
   i3 = HEAP32[i15 >> 2] | 0;
   i2 = i3 + 12 | 0;
   i7 = (HEAP32[i2 >> 2] | 0) + (HEAPU8[i8 >> 0] | HEAPU8[i8 + 1 >> 0] << 8 | HEAPU8[i8 + 2 >> 0] << 16 | HEAPU8[i8 + 3 >> 0] << 24) | 0;
   HEAP32[i2 >> 2] = i7;
   i2 = HEAP32[i3 + 16 >> 2] | 0;
   i1 = HEAP32[i9 >> 2] | 0;
   if ((i7 - i2 | 0) >>> 0 < i1 >>> 0) do {
    FUNCTION_TABLE_viii[HEAP32[i11 >> 2] & 31](HEAP32[i12 >> 2] | 0, HEAPU8[i13 >> 0] | HEAPU8[i13 + 1 >> 0] << 8 | HEAPU8[i13 + 2 >> 0] << 16 | HEAPU8[i13 + 3 >> 0] << 24, HEAPU8[i10 >> 0] | HEAPU8[i10 + 1 >> 0] << 8 | HEAPU8[i10 + 2 >> 0] << 16 | HEAPU8[i10 + 3 >> 0] << 24);
    _SDL_ConvertAudio(i14) | 0;
    i1 = HEAP32[i15 >> 2] | 0;
    i5 = i1 + 12 | 0;
    i3 = HEAP32[i5 >> 2] | 0;
    i2 = HEAPU8[i8 >> 0] | HEAPU8[i8 + 1 >> 0] << 8 | HEAPU8[i8 + 2 >> 0] << 16 | HEAPU8[i8 + 3 >> 0] << 24;
    i6 = HEAP32[i1 + 4 >> 2] | 0;
    if ((i2 + i3 | 0) >>> 0 > i6 >>> 0) {
     i4 = HEAP32[i1 + 16 >> 2] | 0;
     if (i3 >>> 0 > i4 >>> 0) {
      i1 = HEAP32[i1 >> 2] | 0;
      _SDL_memmove(i1, i1 + i4 | 0, i6 - i4 | 0) | 0;
      i1 = HEAP32[i15 >> 2] | 0;
      i2 = i1 + 12 | 0;
      i3 = (HEAP32[i2 >> 2] | 0) - (HEAP32[i1 + 16 >> 2] | 0) | 0;
      HEAP32[i2 >> 2] = i3;
      i2 = HEAPU8[i8 >> 0] | HEAPU8[i8 + 1 >> 0] << 8 | HEAPU8[i8 + 2 >> 0] << 16 | HEAPU8[i8 + 3 >> 0] << 24;
     } else {
      HEAP32[i5 >> 2] = 0;
      i3 = 0;
     }
     HEAP32[i1 + 16 >> 2] = 0;
    }
    _SDL_memcpy((HEAP32[i1 >> 2] | 0) + i3 | 0, HEAPU8[i13 >> 0] | HEAPU8[i13 + 1 >> 0] << 8 | HEAPU8[i13 + 2 >> 0] << 16 | HEAPU8[i13 + 3 >> 0] << 24, i2) | 0;
    i3 = HEAP32[i15 >> 2] | 0;
    i2 = i3 + 12 | 0;
    i7 = (HEAP32[i2 >> 2] | 0) + (HEAPU8[i8 >> 0] | HEAPU8[i8 + 1 >> 0] << 8 | HEAPU8[i8 + 2 >> 0] << 16 | HEAPU8[i8 + 3 >> 0] << 24) | 0;
    HEAP32[i2 >> 2] = i7;
    i2 = HEAP32[i3 + 16 >> 2] | 0;
    i1 = HEAP32[i9 >> 2] | 0;
   } while ((i7 - i2 | 0) >>> 0 < i1 >>> 0);
   i15 = (HEAP32[i3 >> 2] | 0) + i2 | 0;
   HEAP32[i3 + 16 >> 2] = i2 + i1;
   i2 = i15;
  }
 } else {
  i1 = HEAP32[i2 >> 2] | 0;
  if (!i1) {
   i1 = HEAP32[i17 + 16 >> 2] | 0;
   HEAP32[i2 + 4 >> 2] = i1;
   i1 = _SDL_malloc(i1) | 0;
   i2 = HEAP32[i15 >> 2] | 0;
   HEAP32[i2 >> 2] = i1;
  }
  FUNCTION_TABLE_viii[HEAP32[i17 + 20 >> 2] & 31](HEAP32[i17 + 24 >> 2] | 0, i1, HEAP32[i2 + 4 >> 2] | 0);
  i1 = HEAP32[i15 >> 2] | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
 }
 if (!i2) return;
 _emscripten_asm_const_2(7, i2 | 0, ((i1 | 0) / (i16 | 0) | 0 | 0) / (HEAPU8[i17 + 10 >> 0] | 0 | 0) | 0 | 0) | 0;
 return;
}

function _SDL_CreateTexture(i9, i1, i13, i15, i14) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 i13 = i13 | 0;
 i15 = i15 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i16 + 32 | 0;
 i5 = i16 + 24 | 0;
 i4 = i16 + 16 | 0;
 i3 = i16 + 8 | 0;
 i2 = i16;
 if ((i9 | 0) != 0 ? (HEAP32[i9 >> 2] | 0) == 37791 : 0) {
  if (!i1) i11 = HEAP32[i9 + 116 >> 2] | 0; else i11 = i1;
  i12 = (i11 | 0) == 0 | (i11 & -268435456 | 0) == 268435456;
  if (i12) {
   if (!(i11 & 255)) {
    _SDL_SetError(37893, i3) | 0;
    i15 = 0;
    STACKTOP = i16;
    return i15 | 0;
   }
   if (((i11 >>> 24 & 15) + -1 | 0) >>> 0 < 3) {
    _SDL_SetError(37916, i4) | 0;
    i15 = 0;
    STACKTOP = i16;
    return i15 | 0;
   }
  }
  if ((i15 | 0) < 1 | (i14 | 0) < 1) {
   _SDL_SetError(37954, i5) | 0;
   i15 = 0;
   STACKTOP = i16;
   return i15 | 0;
  }
  i2 = HEAP32[i9 + 180 >> 2] | 0;
  i1 = HEAP32[i9 + 184 >> 2] | 0;
  if (!((i2 | 0) != 0 & (i2 | 0) < (i15 | 0)) ? !((i1 | 0) != 0 & (i1 | 0) < (i14 | 0)) : 0) {
   i8 = _SDL_calloc(1, 80) | 0;
   if (!i8) {
    _SDL_Error(0) | 0;
    i15 = 0;
    STACKTOP = i16;
    return i15 | 0;
   }
   HEAP32[i8 >> 2] = 37830;
   i5 = i8 + 4 | 0;
   HEAP32[i5 >> 2] = i11;
   HEAP32[i8 + 8 >> 2] = i13;
   HEAP32[i8 + 12 >> 2] = i15;
   HEAP32[i8 + 16 >> 2] = i14;
   i6 = i8 + 28 | 0;
   HEAP8[i6 >> 0] = -1;
   HEAP8[i6 + 1 >> 0] = -1 >> 8;
   HEAP8[i6 + 2 >> 0] = -1 >> 16;
   HEAP8[i6 + 3 >> 0] = -1 >> 24;
   HEAP32[i8 + 32 >> 2] = i9;
   i6 = i9 + 300 | 0;
   i1 = HEAP32[i6 >> 2] | 0;
   i7 = i8 + 76 | 0;
   HEAP32[i7 >> 2] = i1;
   if (i1) HEAP32[i1 + 72 >> 2] = i8;
   HEAP32[i6 >> 2] = i8;
   i4 = HEAP32[i9 + 112 >> 2] | 0;
   i2 = (i4 | 0) == 0;
   L30 : do if (!i2) {
    i1 = 0;
    while (1) {
     if ((HEAP32[i9 + 116 + (i1 << 2) >> 2] | 0) == (i11 | 0)) break;
     i1 = i1 + 1 | 0;
     if (i1 >>> 0 >= i4 >>> 0) break L30;
    }
    if ((FUNCTION_TABLE_iii[HEAP32[i9 + 12 >> 2] & 63](i9, i8) | 0) >= 0) {
     i15 = i8;
     STACKTOP = i16;
     return i15 | 0;
    }
    _SDL_DestroyTexture(i8);
    i15 = 0;
    STACKTOP = i16;
    return i15 | 0;
   } while (0);
   L40 : do if (i12) {
    i1 = (i11 >>> 20 & 15) + -3 | 0;
    if (i1 >>> 0 < 6) i1 = (51 >>> (i1 & 63) & 1) != 0; else i1 = 0;
    if (!i2) if (i1) {
     i2 = 0;
     while (1) {
      i1 = HEAP32[i9 + 116 + (i2 << 2) >> 2] | 0;
      do if ((i1 | 0) == 0 | (i1 & -268435456 | 0) == 268435456) {
       i3 = (i1 >>> 20 & 15) + -3 | 0;
       if (i3 >>> 0 >= 6) break;
       if (51 >>> (i3 & 63) & 1) break L40;
      } while (0);
      i2 = i2 + 1 | 0;
      if (i2 >>> 0 >= i4 >>> 0) {
       i10 = 41;
       break;
      }
     }
    } else {
     i2 = 0;
     while (1) {
      i1 = HEAP32[i9 + 116 + (i2 << 2) >> 2] | 0;
      if ((i1 | 0) == 0 | (i1 & -268435456 | 0) == 268435456) {
       i3 = (i1 >>> 20 & 15) + -3 | 0;
       if (i3 >>> 0 >= 6) break L40;
       if (!(51 >>> (i3 & 63) & 1)) break L40;
      }
      i2 = i2 + 1 | 0;
      if (i2 >>> 0 >= i4 >>> 0) {
       i10 = 41;
       break;
      }
     }
    } else i10 = 41;
   } else if (i2) i10 = 41; else {
    i1 = 0;
    while (1) {
     if ((HEAP32[i9 + 116 + (i1 << 2) >> 2] | 0) == (i11 | 0)) {
      i1 = i11;
      break L40;
     }
     i1 = i1 + 1 | 0;
     if (i1 >>> 0 >= i4 >>> 0) {
      i10 = 41;
      break;
     }
    }
   } while (0);
   if ((i10 | 0) == 41) i1 = HEAP32[i9 + 116 >> 2] | 0;
   i3 = _SDL_CreateTexture(i9, i1, i13, i15, i14) | 0;
   HEAP32[i8 + 36 >> 2] = i3;
   if (!i3) {
    _SDL_DestroyTexture(i8);
    i15 = 0;
    STACKTOP = i16;
    return i15 | 0;
   }
   i1 = HEAP32[i7 >> 2] | 0;
   HEAP32[i3 + 76 >> 2] = i1;
   if (i1) HEAP32[i1 + 72 >> 2] = i3;
   i1 = i3 + 72 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   HEAP32[i8 + 72 >> 2] = i2;
   if (i2) HEAP32[i2 + 76 >> 2] = i8;
   HEAP32[i1 >> 2] = i8;
   HEAP32[i7 >> 2] = i3;
   HEAP32[i6 >> 2] = i8;
   i10 = HEAP32[i5 >> 2] | 0;
   if (!((i10 | 0) == 0 | (i10 & -268435456 | 0) == 268435456)) {
    i15 = _SDL_SW_CreateYUVTexture(i11, i15, i14) | 0;
    HEAP32[i8 + 40 >> 2] = i15;
    if (i15) {
     i15 = i8;
     STACKTOP = i16;
     return i15 | 0;
    }
    _SDL_DestroyTexture(i8);
    i15 = 0;
    STACKTOP = i16;
    return i15 | 0;
   }
   if ((i13 | 0) != 1) {
    i15 = i8;
    STACKTOP = i16;
    return i15 | 0;
   }
   L86 : do if (i12) i1 = i11 & 255; else {
    if ((i11 | 0) < 1498831189) switch (i11 | 0) {
    case 844715353:
     {
      i1 = 2;
      break L86;
     }
    default:
     {}
    } else switch (i11 | 0) {
    case 1498831189:
     {
      i1 = 2;
      break L86;
     }
    default:
     {}
    }
    i1 = (i11 | 0) == 1431918169 ? 2 : 1;
   } while (0);
   i15 = (Math_imul(i1, i15) | 0) + 3 & -4;
   HEAP32[i8 + 48 >> 2] = i15;
   i15 = _SDL_calloc(1, Math_imul(i15, i14) | 0) | 0;
   HEAP32[i8 + 44 >> 2] = i15;
   if (i15) {
    i15 = i8;
    STACKTOP = i16;
    return i15 | 0;
   }
   _SDL_DestroyTexture(i8);
   i15 = 0;
   STACKTOP = i16;
   return i15 | 0;
  }
  HEAP32[i6 >> 2] = i2;
  HEAP32[i6 + 4 >> 2] = i1;
  _SDL_SetError(37984, i6) | 0;
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 _SDL_SetError(37792, i2) | 0;
 i15 = 0;
 STACKTOP = i16;
 return i15 | 0;
}

function _GLES2_UpdateTextureYUV(i4, i2, i29, i1, i35, i20, i27, i13, i16) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i29 = i29 | 0;
 i1 = i1 | 0;
 i35 = i35 | 0;
 i20 = i20 | 0;
 i27 = i27 | 0;
 i13 = i13 | 0;
 i16 = i16 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i28 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i36 = 0, i37 = 0;
 i37 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i36 = i37;
 i33 = i4 + 316 | 0;
 i34 = HEAP32[i33 >> 2] | 0;
 i25 = HEAP32[i2 + 68 >> 2] | 0;
 i2 = HEAP32[i34 >> 2] | 0;
 if ((HEAP32[3491] | 0) != (i2 | 0)) {
  HEAP32[i34 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i4 + 188 >> 2] | 0, i2) | 0) >= 0) {
   HEAP32[3491] = HEAP32[i34 >> 2];
   _GLES2_UpdateViewport(i4) | 0;
   i3 = HEAP32[i33 >> 2] | 0;
   i30 = 4;
  }
 } else {
  i3 = i34;
  i30 = 4;
 }
 if ((i30 | 0) == 4 ? (HEAP32[i3 + 4 >> 2] | 0) != 0 : 0) {
  i2 = i3 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i2 >> 2] & 7]() | 0) != 0);
 }
 i23 = i29 + 8 | 0;
 if ((HEAP32[i23 >> 2] | 0) < 1) {
  i36 = 0;
  STACKTOP = i37;
  return i36 | 0;
 }
 i24 = i29 + 12 | 0;
 if ((HEAP32[i24 >> 2] | 0) < 1) {
  i36 = 0;
  STACKTOP = i37;
  return i36 | 0;
 }
 i17 = i34 + 28 | 0;
 i18 = i25 + 4 | 0;
 FUNCTION_TABLE_vii[HEAP32[i17 >> 2] & 127](HEAP32[i18 >> 2] | 0, HEAP32[i25 + 32 >> 2] | 0);
 i5 = HEAP32[i18 >> 2] | 0;
 i6 = (HEAP32[i29 >> 2] | 0) / 2 | 0;
 i19 = i29 + 4 | 0;
 i7 = (HEAP32[i19 >> 2] | 0) / 2 | 0;
 i8 = (HEAP32[i23 >> 2] | 0) / 2 | 0;
 i2 = HEAP32[i24 >> 2] | 0;
 i9 = (i2 | 0) / 2 | 0;
 i26 = i25 + 8 | 0;
 i10 = HEAP32[i26 >> 2] | 0;
 i28 = i25 + 12 | 0;
 i11 = HEAP32[i28 >> 2] | 0;
 do if ((i8 | 0) != (i16 | 0)) {
  i12 = _SDL_malloc(Math_imul(i9, i8) | 0) | 0;
  if (!i12) {
   _SDL_Error(0) | 0;
   break;
  }
  if ((i2 | 0) > 1) {
   i2 = i13;
   i3 = i12;
   i4 = 0;
   while (1) {
    _SDL_memcpy(i3, i2, i8) | 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) == (i9 | 0)) {
     i14 = i12;
     i15 = i12;
     i30 = 14;
     break;
    } else {
     i2 = i2 + i16 | 0;
     i3 = i3 + i8 | 0;
    }
   }
  } else {
   i14 = i12;
   i15 = i12;
   i30 = 14;
  }
 } else {
  i14 = 0;
  i15 = i13;
  i30 = 14;
 } while (0);
 if ((i30 | 0) == 14 ? (FUNCTION_TABLE_viiiiiiiii[HEAP32[i34 + 164 >> 2] & 15](i5, 0, i6, i7, i8, i9, i10, i11, i15), (i14 | 0) != 0) : 0) _SDL_free(i14);
 FUNCTION_TABLE_vii[HEAP32[i17 >> 2] & 127](HEAP32[i18 >> 2] | 0, HEAP32[i25 + 36 >> 2] | 0);
 i5 = HEAP32[i18 >> 2] | 0;
 i6 = (HEAP32[i29 >> 2] | 0) / 2 | 0;
 i7 = (HEAP32[i19 >> 2] | 0) / 2 | 0;
 i8 = (HEAP32[i23 >> 2] | 0) / 2 | 0;
 i2 = HEAP32[i24 >> 2] | 0;
 i9 = (i2 | 0) / 2 | 0;
 i10 = HEAP32[i26 >> 2] | 0;
 i11 = HEAP32[i28 >> 2] | 0;
 do if ((i8 | 0) != (i27 | 0)) {
  i12 = _SDL_malloc(Math_imul(i9, i8) | 0) | 0;
  if (!i12) {
   _SDL_Error(0) | 0;
   break;
  }
  if ((i2 | 0) > 1) {
   i2 = i20;
   i3 = i12;
   i4 = 0;
   while (1) {
    _SDL_memcpy(i3, i2, i8) | 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) == (i9 | 0)) {
     i21 = i12;
     i22 = i12;
     i30 = 21;
     break;
    } else {
     i2 = i2 + i27 | 0;
     i3 = i3 + i8 | 0;
    }
   }
  } else {
   i21 = i12;
   i22 = i12;
   i30 = 21;
  }
 } else {
  i21 = 0;
  i22 = i20;
  i30 = 21;
 } while (0);
 if ((i30 | 0) == 21 ? (FUNCTION_TABLE_viiiiiiiii[HEAP32[i34 + 164 >> 2] & 15](i5, 0, i6, i7, i8, i9, i10, i11, i22), (i21 | 0) != 0) : 0) _SDL_free(i21);
 FUNCTION_TABLE_vii[HEAP32[i17 >> 2] & 127](HEAP32[i18 >> 2] | 0, HEAP32[i25 >> 2] | 0);
 i11 = HEAP32[i18 >> 2] | 0;
 i10 = HEAP32[i29 >> 2] | 0;
 i9 = HEAP32[i19 >> 2] | 0;
 i8 = HEAP32[i23 >> 2] | 0;
 i7 = HEAP32[i24 >> 2] | 0;
 i6 = HEAP32[i26 >> 2] | 0;
 i4 = HEAP32[i28 >> 2] | 0;
 do if ((i8 | 0) != (i35 | 0)) {
  i5 = _SDL_malloc(Math_imul(i7, i8) | 0) | 0;
  if (!i5) {
   _SDL_Error(0) | 0;
   break;
  }
  if ((i7 | 0) > 0) {
   i2 = i5;
   i3 = 0;
   while (1) {
    _SDL_memcpy(i2, i1, i8) | 0;
    i3 = i3 + 1 | 0;
    if ((i3 | 0) == (i7 | 0)) {
     i31 = i5;
     i32 = i5;
     i30 = 28;
     break;
    } else {
     i1 = i1 + i35 | 0;
     i2 = i2 + i8 | 0;
    }
   }
  } else {
   i31 = i5;
   i32 = i5;
   i30 = 28;
  }
 } else {
  i31 = 0;
  i32 = i1;
  i30 = 28;
 } while (0);
 if ((i30 | 0) == 28 ? (FUNCTION_TABLE_viiiiiiiii[HEAP32[i34 + 164 >> 2] & 15](i11, 0, i10, i9, i8, i7, i6, i4, i32), (i31 | 0) != 0) : 0) _SDL_free(i31);
 i1 = HEAP32[i33 >> 2] | 0;
 if (!(HEAP32[i1 + 4 >> 2] | 0)) {
  i36 = 0;
  STACKTOP = i37;
  return i36 | 0;
 }
 i3 = i1 + 108 | 0;
 i1 = FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 7]() | 0;
 if (!i1) {
  i36 = 0;
  STACKTOP = i37;
  return i36 | 0;
 }
 while (1) {
  switch (i1 | 0) {
  case 1280:
   {
    i2 = 46398;
    break;
   }
  case 1281:
   {
    i2 = 46381;
    break;
   }
  case 1282:
   {
    i2 = 46360;
    break;
   }
  case 1285:
   {
    i2 = 46343;
    break;
   }
  default:
   i2 = 46335;
  }
  HEAP32[i36 >> 2] = 47453;
  HEAP32[i36 + 4 >> 2] = 46440;
  HEAP32[i36 + 8 >> 2] = 784;
  HEAP32[i36 + 12 >> 2] = 47471;
  HEAP32[i36 + 16 >> 2] = i2;
  HEAP32[i36 + 20 >> 2] = i1;
  _SDL_SetError(46414, i36) | 0;
  i1 = FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 7]() | 0;
  if (!i1) {
   i1 = -1;
   break;
  }
 }
 STACKTOP = i37;
 return i1 | 0;
}

function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i16, i17, i1, i19, i15, i18, i14) {
 i16 = i16 | 0;
 i17 = i17 | 0;
 i1 = i1 | 0;
 i19 = i19 | 0;
 i15 = i15 | 0;
 i18 = i18 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i20 = 0, i21 = 0, i22 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i3 = i22;
 i4 = (i19 - i1 | 0) / 12 | 0;
 if (i4 >>> 0 > 100) {
  i3 = _malloc(i4) | 0;
  if (!i3) __ZSt17__throw_bad_allocv(); else {
   i20 = i3;
   i2 = i3;
  }
 } else {
  i20 = 0;
  i2 = i3;
 }
 if ((i1 | 0) == (i19 | 0)) i3 = 0; else {
  i7 = i1;
  i5 = 0;
  i6 = i2;
  while (1) {
   i3 = HEAP8[i7 >> 0] | 0;
   if (!(i3 & 1)) i3 = (i3 & 255) >>> 1; else i3 = HEAP32[i7 + 4 >> 2] | 0;
   if (!i3) {
    HEAP8[i6 >> 0] = 2;
    i3 = i5 + 1 | 0;
    i4 = i4 + -1 | 0;
   } else {
    HEAP8[i6 >> 0] = 1;
    i3 = i5;
   }
   i7 = i7 + 12 | 0;
   if ((i7 | 0) == (i19 | 0)) break; else {
    i5 = i3;
    i6 = i6 + 1 | 0;
   }
  }
 }
 i12 = (i1 | 0) == (i19 | 0);
 i13 = (i1 | 0) == (i19 | 0);
 i11 = 0;
 i8 = i4;
 L17 : while (1) {
  i4 = HEAP32[i16 >> 2] | 0;
  do if (i4) {
   i5 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i5 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i4 = HEAP32[i5 >> 2] | 0;
   if ((i4 | 0) == -1) {
    HEAP32[i16 >> 2] = 0;
    i7 = 1;
    break;
   } else {
    i7 = (HEAP32[i16 >> 2] | 0) == 0;
    break;
   }
  } else i7 = 1; while (0);
  i5 = HEAP32[i17 >> 2] | 0;
  if (i5) {
   i4 = HEAP32[i5 + 12 >> 2] | 0;
   if ((i4 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0; else i4 = HEAP32[i4 >> 2] | 0;
   if ((i4 | 0) == -1) {
    HEAP32[i17 >> 2] = 0;
    i5 = 0;
    i6 = 1;
   } else i6 = 0;
  } else {
   i5 = 0;
   i6 = 1;
  }
  i4 = HEAP32[i16 >> 2] | 0;
  if (!((i8 | 0) != 0 & (i7 ^ i6))) break;
  i5 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i5 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i4 = HEAP32[i5 >> 2] | 0;
  if (!i14) i4 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i15 >> 2] | 0) + 28 >> 2] & 63](i15, i4) | 0;
  i10 = i11 + 1 | 0;
  if (i12) {
   i4 = 0;
   i7 = i8;
  } else {
   i7 = 0;
   i9 = i1;
   i6 = i8;
   i8 = i2;
   while (1) {
    do if ((HEAP8[i8 >> 0] | 0) == 1) {
     if (!(HEAP8[i9 >> 0] & 1)) i5 = i9 + 4 | 0; else i5 = HEAP32[i9 + 8 >> 2] | 0;
     i5 = HEAP32[i5 + (i11 << 2) >> 2] | 0;
     if (!i14) i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i15 >> 2] | 0) + 28 >> 2] & 63](i15, i5) | 0;
     if ((i4 | 0) != (i5 | 0)) {
      HEAP8[i8 >> 0] = 0;
      i5 = i7;
      i6 = i6 + -1 | 0;
      break;
     }
     i5 = HEAP8[i9 >> 0] | 0;
     if (!(i5 & 1)) i5 = (i5 & 255) >>> 1; else i5 = HEAP32[i9 + 4 >> 2] | 0;
     if ((i5 | 0) == (i10 | 0)) {
      HEAP8[i8 >> 0] = 2;
      i5 = 1;
      i3 = i3 + 1 | 0;
      i6 = i6 + -1 | 0;
     } else i5 = 1;
    } else i5 = i7; while (0);
    i9 = i9 + 12 | 0;
    if ((i9 | 0) == (i19 | 0)) {
     i4 = i5;
     i7 = i6;
     break;
    } else {
     i7 = i5;
     i8 = i8 + 1 | 0;
    }
   }
  }
  if (!i4) {
   i11 = i10;
   i8 = i7;
   continue;
  }
  i4 = HEAP32[i16 >> 2] | 0;
  i5 = i4 + 12 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  if ((i6 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] & 127](i4) | 0; else HEAP32[i5 >> 2] = i6 + 4;
  if ((i3 + i7 | 0) >>> 0 < 2 | i13) {
   i11 = i10;
   i8 = i7;
   continue;
  } else {
   i4 = i1;
   i6 = i2;
  }
  while (1) {
   if ((HEAP8[i6 >> 0] | 0) == 2) {
    i5 = HEAP8[i4 >> 0] | 0;
    if (!(i5 & 1)) i5 = (i5 & 255) >>> 1; else i5 = HEAP32[i4 + 4 >> 2] | 0;
    if ((i5 | 0) != (i10 | 0)) {
     HEAP8[i6 >> 0] = 0;
     i3 = i3 + -1 | 0;
    }
   }
   i4 = i4 + 12 | 0;
   if ((i4 | 0) == (i19 | 0)) {
    i11 = i10;
    i8 = i7;
    continue L17;
   } else i6 = i6 + 1 | 0;
  }
 }
 do if (i4) {
  i3 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i3 = HEAP32[i3 >> 2] | 0;
  if ((i3 | 0) == -1) {
   HEAP32[i16 >> 2] = 0;
   i4 = 1;
   break;
  } else {
   i4 = (HEAP32[i16 >> 2] | 0) == 0;
   break;
  }
 } else i4 = 1; while (0);
 do if (i5) {
  i3 = HEAP32[i5 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0; else i3 = HEAP32[i3 >> 2] | 0;
  if ((i3 | 0) != -1) if (i4) break; else {
   i21 = 74;
   break;
  } else {
   HEAP32[i17 >> 2] = 0;
   i21 = 72;
   break;
  }
 } else i21 = 72; while (0);
 if ((i21 | 0) == 72 ? i4 : 0) i21 = 74;
 if ((i21 | 0) == 74) HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 2;
 L107 : do if ((i1 | 0) == (i19 | 0)) i21 = 78; else while (1) {
  if ((HEAP8[i2 >> 0] | 0) == 2) break L107;
  i1 = i1 + 12 | 0;
  if ((i1 | 0) == (i19 | 0)) {
   i21 = 78;
   break;
  } else i2 = i2 + 1 | 0;
 } while (0);
 if ((i21 | 0) == 78) {
  HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 4;
  i1 = i19;
 }
 _free(i20);
 STACKTOP = i22;
 return i1 | 0;
}

function _SDL_IntersectRectAndLine(i6, i23, i25, i24, i26) {
 i6 = i6 | 0;
 i23 = i23 | 0;
 i25 = i25 | 0;
 i24 = i24 | 0;
 i26 = i26 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i27 = 0;
 i27 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i3 = i27 + 32 | 0;
 i5 = i27 + 24 | 0;
 i4 = i27 + 16 | 0;
 i2 = i27 + 8 | 0;
 i1 = i27;
 if (!i6) {
  HEAP32[i1 >> 2] = 40608;
  _SDL_SetError(41366, i1) | 0;
  i26 = 0;
  STACKTOP = i27;
  return i26 | 0;
 }
 if (!i23) {
  HEAP32[i2 >> 2] = 40613;
  _SDL_SetError(41366, i2) | 0;
  i26 = 0;
  STACKTOP = i27;
  return i26 | 0;
 }
 if (!i25) {
  HEAP32[i4 >> 2] = 40616;
  _SDL_SetError(41366, i4) | 0;
  i26 = 0;
  STACKTOP = i27;
  return i26 | 0;
 }
 if (!i24) {
  HEAP32[i5 >> 2] = 40619;
  _SDL_SetError(41366, i5) | 0;
  i26 = 0;
  STACKTOP = i27;
  return i26 | 0;
 }
 if (!i26) {
  HEAP32[i3 >> 2] = 40622;
  _SDL_SetError(41366, i3) | 0;
  i26 = 0;
  STACKTOP = i27;
  return i26 | 0;
 }
 i16 = HEAP32[i6 + 8 >> 2] | 0;
 if ((i16 | 0) < 1) {
  i26 = 0;
  STACKTOP = i27;
  return i26 | 0;
 }
 i4 = HEAP32[i6 + 12 >> 2] | 0;
 if ((i4 | 0) < 1) {
  i26 = 0;
  STACKTOP = i27;
  return i26 | 0;
 }
 i13 = HEAP32[i23 >> 2] | 0;
 i2 = HEAP32[i25 >> 2] | 0;
 i3 = HEAP32[i24 >> 2] | 0;
 i1 = HEAP32[i26 >> 2] | 0;
 i22 = HEAP32[i6 >> 2] | 0;
 i20 = HEAP32[i6 + 4 >> 2] | 0;
 i21 = i22 + -1 + i16 | 0;
 i18 = i4 + i20 | 0;
 i19 = i18 + -1 | 0;
 i9 = (i13 | 0) < (i22 | 0);
 i4 = (i13 | 0) > (i21 | 0);
 i11 = (i3 | 0) < (i22 | 0);
 i5 = (i3 | 0) > (i21 | 0);
 i6 = (i2 | 0) < (i20 | 0);
 i7 = (i2 | 0) > (i19 | 0);
 i10 = (i1 | 0) < (i20 | 0);
 i8 = (i1 | 0) > (i19 | 0);
 if (!(i8 | (i10 | (i7 | (i6 | (i5 | (i11 | (i9 | i4)))))))) {
  i26 = 1;
  STACKTOP = i27;
  return i26 | 0;
 }
 if (i7 & i8 | (i6 & i10 | (i9 & i11 | i4 & i5))) {
  i26 = 0;
  STACKTOP = i27;
  return i26 | 0;
 }
 if ((i2 | 0) == (i1 | 0)) {
  if (!i9) {
   if (i4) HEAP32[i23 >> 2] = i21;
  } else HEAP32[i23 >> 2] = i22;
  if (i11) {
   HEAP32[i24 >> 2] = i22;
   i26 = 1;
   STACKTOP = i27;
   return i26 | 0;
  }
  if (!i5) {
   i26 = 1;
   STACKTOP = i27;
   return i26 | 0;
  }
  HEAP32[i24 >> 2] = i21;
  i26 = 1;
  STACKTOP = i27;
  return i26 | 0;
 }
 if ((i13 | 0) == (i3 | 0)) {
  if (!i6) {
   if (i7) HEAP32[i25 >> 2] = i19;
  } else HEAP32[i25 >> 2] = i20;
  if (i10) {
   HEAP32[i26 >> 2] = i20;
   i26 = 1;
   STACKTOP = i27;
   return i26 | 0;
  }
  if (!i8) {
   i26 = 1;
   STACKTOP = i27;
   return i26 | 0;
  }
  HEAP32[i26 >> 2] = i19;
  i26 = 1;
  STACKTOP = i27;
  return i26 | 0;
 }
 i4 = i6 ? 2 : (i18 | 0) <= (i2 | 0) & 1;
 if (i9) i5 = i4 | 4; else i5 = (i16 + i22 | 0) > (i13 | 0) ? i4 : i4 | 8;
 i4 = i10 ? 2 : (i18 | 0) <= (i1 | 0) & 1;
 if (i11) i11 = i4 | 4; else i11 = (i16 + i22 | 0) > (i3 | 0) ? i4 : i4 | 8;
 L73 : do if (!(i11 | i5)) i4 = i13; else {
  i12 = i16 + i22 | 0;
  i9 = 0;
  i6 = 0;
  while (1) {
   i7 = i21 - i13 | 0;
   i8 = i22 - i13 | 0;
   i4 = i19 - i2 | 0;
   i10 = i20 - i2 | 0;
   if (!i5) {
    i15 = i4;
    i14 = i10;
    i4 = i13;
    break;
   }
   if (i11 & i5) {
    i1 = 0;
    i17 = 70;
    break;
   }
   do if (!(i5 & 2)) {
    if (i5 & 1) {
     i4 = ((Math_imul(i3 - i13 | 0, i4) | 0) / (i1 - i2 | 0) | 0) + i13 | 0;
     i2 = i19;
     break;
    }
    if (i5 & 4) {
     i4 = i22;
     i2 = ((Math_imul(i8, i1 - i2 | 0) | 0) / (i3 - i13 | 0) | 0) + i2 | 0;
     break;
    }
    if (!(i5 & 8)) {
     i4 = i9;
     i2 = i6;
     break;
    }
    i4 = i21;
    i2 = ((Math_imul(i7, i1 - i2 | 0) | 0) / (i3 - i13 | 0) | 0) + i2 | 0;
   } else {
    i4 = ((Math_imul(i3 - i13 | 0, i10) | 0) / (i1 - i2 | 0) | 0) + i13 | 0;
    i2 = i20;
   } while (0);
   i5 = (i20 | 0) > (i2 | 0) ? 2 : (i18 | 0) <= (i2 | 0) & 1;
   if ((i22 | 0) > (i4 | 0)) i5 = i5 | 4; else i5 = (i12 | 0) > (i4 | 0) ? i5 : i5 | 8;
   if (!(i11 | i5)) break L73; else {
    i9 = i4;
    i13 = i4;
    i6 = i2;
   }
  }
  if ((i17 | 0) == 70) {
   STACKTOP = i27;
   return i1 | 0;
  }
  i12 = i16 + i22 | 0;
  while (1) {
   if (i11 & i5) {
    i1 = 0;
    break;
   }
   do if (!(i11 & 2)) {
    if (i11 & 1) {
     i10 = ((Math_imul(i3 - i4 | 0, i15) | 0) / (i1 - i2 | 0) | 0) + i4 | 0;
     i1 = i19;
     break;
    }
    if (i11 & 4) {
     i10 = i22;
     i1 = ((Math_imul(i8, i1 - i2 | 0) | 0) / (i3 - i4 | 0) | 0) + i2 | 0;
     break;
    }
    if (!(i11 & 8)) {
     i10 = i9;
     i1 = i6;
     break;
    }
    i10 = i21;
    i1 = ((Math_imul(i7, i1 - i2 | 0) | 0) / (i3 - i4 | 0) | 0) + i2 | 0;
   } else {
    i10 = ((Math_imul(i3 - i4 | 0, i14) | 0) / (i1 - i2 | 0) | 0) + i4 | 0;
    i1 = i20;
   } while (0);
   i3 = (i20 | 0) > (i1 | 0) ? 2 : (i18 | 0) <= (i1 | 0) & 1;
   if ((i22 | 0) > (i10 | 0)) i3 = i3 | 4; else i3 = (i12 | 0) > (i10 | 0) ? i3 : i3 | 8;
   if (!(i3 | i5)) {
    i3 = i10;
    break L73;
   } else {
    i11 = i3;
    i9 = i10;
    i3 = i10;
    i6 = i1;
   }
  }
  STACKTOP = i27;
  return i1 | 0;
 } while (0);
 HEAP32[i23 >> 2] = i4;
 HEAP32[i25 >> 2] = i2;
 HEAP32[i24 >> 2] = i3;
 HEAP32[i26 >> 2] = i1;
 i26 = 1;
 STACKTOP = i27;
 return i26 | 0;
}

function _SDL_VideoInit(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i15 + 16 | 0;
 i4 = i15 + 8 | 0;
 i7 = i15;
 if (HEAP32[3256] | 0) _SDL_VideoQuit();
 _SDL_TicksInit();
 if ((_SDL_InitSubSystem(16384) | 0) < 0) {
  i14 = -1;
  STACKTOP = i15;
  return i14 | 0;
 }
 if ((_SDL_KeyboardInit() | 0) < 0) {
  i14 = -1;
  STACKTOP = i15;
  return i14 | 0;
 }
 if ((_SDL_MouseInit() | 0) < 0) {
  i14 = -1;
  STACKTOP = i15;
  return i14 | 0;
 }
 if ((_SDL_TouchInit() | 0) < 0) {
  i14 = -1;
  STACKTOP = i15;
  return i14 | 0;
 }
 do if (!i3) {
  i3 = _SDL_getenv(44653) | 0;
  if (!i3) {
   if ((FUNCTION_TABLE_i[HEAP32[6036 >> 2] & 7]() | 0) != 0 ? (i6 = FUNCTION_TABLE_ii[HEAP32[6040 >> 2] & 127](0) | 0, (i6 | 0) != 0) : 0) {
    i2 = 0;
    i1 = i6;
    break;
   }
   if ((FUNCTION_TABLE_i[HEAP32[6068 >> 2] & 7]() | 0) != 0 ? (i1 = FUNCTION_TABLE_ii[HEAP32[6072 >> 2] & 127](0) | 0, (i1 | 0) != 0) : 0) {
    i2 = 1;
    break;
   }
   i14 = _SDL_SetError(41099, i4) | 0;
   STACKTOP = i15;
   return i14 | 0;
  } else {
   i1 = i3;
   i14 = 10;
  }
 } else {
  i1 = i3;
  i14 = 10;
 } while (0);
 do if ((i14 | 0) == 10) {
  i14 = HEAP32[1507] | 0;
  if ((_SDL_strncasecmp(i14, i1, _SDL_strlen(i1) | 0) | 0) == 0 ? (FUNCTION_TABLE_i[HEAP32[6036 >> 2] & 7]() | 0) != 0 : 0) {
   i5 = 13012;
   i2 = 0;
   i14 = 15;
  } else i14 = 12;
  if (((i14 | 0) == 12 ? (i6 = HEAP32[1515] | 0, (_SDL_strncasecmp(i6, i1, _SDL_strlen(i1) | 0) | 0) == 0) : 0) ? (FUNCTION_TABLE_i[HEAP32[6068 >> 2] & 7]() | 0) != 0 : 0) {
   i5 = 13016;
   i2 = 1;
   i14 = 15;
  }
  if ((i14 | 0) == 15 ? (i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] & 127](0) | 0, (i8 | 0) != 0) : 0) {
   i1 = i8;
   break;
  }
  HEAP32[i7 >> 2] = i1;
  i14 = _SDL_SetError(41082, i7) | 0;
  STACKTOP = i15;
  return i14 | 0;
 } while (0);
 HEAP32[3256] = i1;
 HEAP32[i1 >> 2] = HEAP32[HEAP32[13012 + (i2 << 2) >> 2] >> 2];
 i1 = HEAP32[3256] | 0;
 HEAP32[i1 + 252 >> 2] = 1;
 HEAP32[i1 + 356 >> 2] = 0;
 HEAP32[i1 + 616 >> 2] = 0;
 i1 = HEAP32[3256] | 0;
 if (i1) {
  HEAP32[i1 + 260 >> 2] = 3;
  HEAP32[i1 + 264 >> 2] = 3;
  HEAP32[i1 + 268 >> 2] = 2;
  HEAP32[i1 + 272 >> 2] = 0;
  HEAP32[i1 + 280 >> 2] = 0;
  HEAP32[i1 + 276 >> 2] = 16;
  HEAP32[i1 + 284 >> 2] = 0;
  HEAP32[i1 + 288 >> 2] = 1;
  i8 = i1 + 292 | 0;
  HEAP32[i8 >> 2] = 0;
  HEAP32[i8 + 4 >> 2] = 0;
  HEAP32[i8 + 8 >> 2] = 0;
  HEAP32[i8 + 12 >> 2] = 0;
  HEAP32[i8 + 16 >> 2] = 0;
  HEAP32[i8 + 20 >> 2] = 0;
  HEAP32[i8 + 24 >> 2] = 0;
  HEAP32[i1 + 352 >> 2] = 1;
  HEAP32[i1 + 320 >> 2] = -1;
  HEAP32[i1 + 324 >> 2] = 2;
  HEAP32[i1 + 328 >> 2] = 0;
  HEAP32[i1 + 336 >> 2] = 4;
  HEAP32[i1 + 332 >> 2] = 0;
  HEAP32[i1 + 348 >> 2] = 0;
  HEAP32[i1 + 344 >> 2] = 1;
  HEAP32[i1 + 340 >> 2] = 0;
 }
 i7 = _SDL_TLSCreate() | 0;
 HEAP32[(HEAP32[3256] | 0) + 628 >> 2] = i7;
 i7 = _SDL_TLSCreate() | 0;
 i8 = HEAP32[3256] | 0;
 HEAP32[i8 + 632 >> 2] = i7;
 if ((FUNCTION_TABLE_ii[HEAP32[i8 + 4 >> 2] & 127](i8) | 0) < 0) {
  _SDL_VideoQuit();
  i14 = -1;
  STACKTOP = i15;
  return i14 | 0;
 }
 i1 = HEAP32[3256] | 0;
 if (!(HEAP32[i1 + 236 >> 2] | 0)) {
  _SDL_VideoQuit();
  i14 = _SDL_SetError(41125, i9) | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 do if (HEAP32[i1 + 104 >> 2] | 0) {
  i1 = _SDL_GetHint(41167) | 0;
  if ((i1 | 0) != 0 ? (_SDL_strcasecmp(i1, 43854) | 0) == 0 : 0) break;
  i9 = _SDL_GetHint(41185) | 0;
  if ((i9 | 0) != 0 ? (HEAP8[i9 >> 0] | 0) != 48 : 0) {
   i1 = HEAP32[3256] | 0;
   i14 = 30;
  }
 } else i14 = 30; while (0);
 if ((i14 | 0) == 30) {
  HEAP32[i1 + 104 >> 2] = 31;
  HEAP32[(HEAP32[3256] | 0) + 108 >> 2] = 14;
  HEAP32[(HEAP32[3256] | 0) + 112 >> 2] = 44;
 }
 i1 = _SDL_GetHint(41214) | 0;
 if ((i1 | 0) != 0 ? (_SDL_atoi(i1) | 0) != 0 : 0) i14 = 37; else i14 = 33;
 if ((i14 | 0) == 33 ? (i11 = HEAP32[3256] | 0, (i11 | 0) != 0) : 0) {
  i1 = i11 + 232 | 0;
  if ((HEAP32[i1 >> 2] | 0) == 0 ? (HEAP32[i1 >> 2] = 1, i12 = HEAP32[i11 + 180 >> 2] | 0, (i12 | 0) != 0) : 0) {
   FUNCTION_TABLE_vi[i12 & 511](i11);
   i14 = 37;
  } else i14 = 37;
 }
 if ((((i14 | 0) == 37 ? (i10 = HEAP32[3256] | 0, (i10 | 0) != 0) : 0) ? (i13 = HEAP32[i10 + 196 >> 2] | 0, (i13 | 0) != 0) : 0) ? (FUNCTION_TABLE_ii[i13 & 127](i10) | 0) != 0 : 0) {
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 _SDL_EventState(771, 1) | 0;
 _SDL_EventState(770, 1) | 0;
 i1 = HEAP32[3256] | 0;
 if (!i1) {
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 i2 = HEAP32[i1 + 244 >> 2] | 0;
 do if (i2) {
  do {
   if (HEAP32[i2 + 48 >> 2] & 512) {
    i3 = i2;
    i14 = 44;
    break;
   }
   i2 = HEAP32[i2 + 144 >> 2] | 0;
  } while ((i2 | 0) != 0);
  if ((i14 | 0) == 44) {
   i2 = HEAP32[i1 + 200 >> 2] | 0;
   if (!i2) break;
   FUNCTION_TABLE_vii[i2 & 127](i1, i3);
   i1 = HEAP32[3256] | 0;
  }
  if (!i1) {
   i14 = 0;
   STACKTOP = i15;
   return i14 | 0;
  }
 } while (0);
 i2 = HEAP32[i1 + 184 >> 2] | 0;
 if (!i2) {
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 FUNCTION_TABLE_vi[i2 & 511](i1);
 i14 = 0;
 STACKTOP = i15;
 return i14 | 0;
}

function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i17, i18, i1, i20, i16, i19, i15) {
 i17 = i17 | 0;
 i18 = i18 | 0;
 i1 = i1 | 0;
 i20 = i20 | 0;
 i16 = i16 | 0;
 i19 = i19 | 0;
 i15 = i15 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i21 = 0, i22 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i3 = i23;
 i4 = (i20 - i1 | 0) / 12 | 0;
 if (i4 >>> 0 > 100) {
  i3 = _malloc(i4) | 0;
  if (!i3) __ZSt17__throw_bad_allocv(); else {
   i21 = i3;
   i2 = i3;
  }
 } else {
  i21 = 0;
  i2 = i3;
 }
 if ((i1 | 0) == (i20 | 0)) i3 = 0; else {
  i7 = i1;
  i5 = 0;
  i6 = i2;
  while (1) {
   i3 = HEAP8[i7 >> 0] | 0;
   if (!(i3 & 1)) i3 = (i3 & 255) >>> 1; else i3 = HEAP32[i7 + 4 >> 2] | 0;
   if (!i3) {
    HEAP8[i6 >> 0] = 2;
    i3 = i5 + 1 | 0;
    i4 = i4 + -1 | 0;
   } else {
    HEAP8[i6 >> 0] = 1;
    i3 = i5;
   }
   i7 = i7 + 12 | 0;
   if ((i7 | 0) == (i20 | 0)) break; else {
    i5 = i3;
    i6 = i6 + 1 | 0;
   }
  }
 }
 i13 = (i1 | 0) == (i20 | 0);
 i14 = (i1 | 0) == (i20 | 0);
 i12 = 0;
 i8 = i3;
 i10 = i4;
 L17 : while (1) {
  i3 = HEAP32[i17 >> 2] | 0;
  do if (i3) {
   if ((HEAP32[i3 + 12 >> 2] | 0) == (HEAP32[i3 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) == -1) {
    HEAP32[i17 >> 2] = 0;
    i3 = 0;
    break;
   } else {
    i3 = HEAP32[i17 >> 2] | 0;
    break;
   }
  } else i3 = 0; while (0);
  i6 = (i3 | 0) == 0;
  i4 = HEAP32[i18 >> 2] | 0;
  if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
    HEAP32[i18 >> 2] = 0;
    i4 = 0;
   }
  } else i4 = 0;
  i5 = (i4 | 0) == 0;
  i3 = HEAP32[i17 >> 2] | 0;
  if (!((i10 | 0) != 0 & (i6 ^ i5))) break;
  i4 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i4 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i3 = HEAPU8[i4 >> 0] | 0;
  i3 = i3 & 255;
  if (!i15) i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i16 >> 2] | 0) + 12 >> 2] & 63](i16, i3) | 0;
  i11 = i12 + 1 | 0;
  if (i13) {
   i3 = 0;
   i6 = i8;
   i7 = i10;
  } else {
   i7 = 0;
   i9 = i1;
   i6 = i8;
   i5 = i10;
   i8 = i2;
   while (1) {
    do if ((HEAP8[i8 >> 0] | 0) == 1) {
     if (!(HEAP8[i9 >> 0] & 1)) i4 = i9 + 1 | 0; else i4 = HEAP32[i9 + 8 >> 2] | 0;
     i4 = HEAP8[i4 + i12 >> 0] | 0;
     if (!i15) i4 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i16 >> 2] | 0) + 12 >> 2] & 63](i16, i4) | 0;
     if (i3 << 24 >> 24 != i4 << 24 >> 24) {
      HEAP8[i8 >> 0] = 0;
      i4 = i7;
      i5 = i5 + -1 | 0;
      break;
     }
     i4 = HEAP8[i9 >> 0] | 0;
     if (!(i4 & 1)) i4 = (i4 & 255) >>> 1; else i4 = HEAP32[i9 + 4 >> 2] | 0;
     if ((i4 | 0) == (i11 | 0)) {
      HEAP8[i8 >> 0] = 2;
      i4 = 1;
      i6 = i6 + 1 | 0;
      i5 = i5 + -1 | 0;
     } else i4 = 1;
    } else i4 = i7; while (0);
    i9 = i9 + 12 | 0;
    if ((i9 | 0) == (i20 | 0)) {
     i3 = i4;
     i7 = i5;
     break;
    } else {
     i7 = i4;
     i8 = i8 + 1 | 0;
    }
   }
  }
  if (!i3) {
   i12 = i11;
   i8 = i6;
   i10 = i7;
   continue;
  }
  i3 = HEAP32[i17 >> 2] | 0;
  i4 = i3 + 12 | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0; else HEAP32[i4 >> 2] = i5 + 1;
  if ((i6 + i7 | 0) >>> 0 < 2 | i14) {
   i12 = i11;
   i8 = i6;
   i10 = i7;
   continue;
  } else {
   i3 = i1;
   i5 = i6;
   i6 = i2;
  }
  while (1) {
   if ((HEAP8[i6 >> 0] | 0) == 2) {
    i4 = HEAP8[i3 >> 0] | 0;
    if (!(i4 & 1)) i4 = (i4 & 255) >>> 1; else i4 = HEAP32[i3 + 4 >> 2] | 0;
    if ((i4 | 0) != (i11 | 0)) {
     HEAP8[i6 >> 0] = 0;
     i5 = i5 + -1 | 0;
    }
   }
   i3 = i3 + 12 | 0;
   if ((i3 | 0) == (i20 | 0)) {
    i12 = i11;
    i8 = i5;
    i10 = i7;
    continue L17;
   } else i6 = i6 + 1 | 0;
  }
 }
 do if (i3) {
  if ((HEAP32[i3 + 12 >> 2] | 0) == (HEAP32[i3 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) == -1) {
   HEAP32[i17 >> 2] = 0;
   i3 = 0;
   break;
  } else {
   i3 = HEAP32[i17 >> 2] | 0;
   break;
  }
 } else i3 = 0; while (0);
 i3 = (i3 | 0) == 0;
 do if (!i5) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i18 >> 2] = 0;
   i22 = 65;
   break;
  }
  if (!i3) i22 = 66;
 } else i22 = 65; while (0);
 if ((i22 | 0) == 65 ? i3 : 0) i22 = 66;
 if ((i22 | 0) == 66) HEAP32[i19 >> 2] = HEAP32[i19 >> 2] | 2;
 L95 : do if ((i1 | 0) == (i20 | 0)) i22 = 70; else while (1) {
  if ((HEAP8[i2 >> 0] | 0) == 2) break L95;
  i1 = i1 + 12 | 0;
  if ((i1 | 0) == (i20 | 0)) {
   i22 = 70;
   break;
  } else i2 = i2 + 1 | 0;
 } while (0);
 if ((i22 | 0) == 70) {
  HEAP32[i19 >> 2] = HEAP32[i19 >> 2] | 4;
  i1 = i20;
 }
 _free(i21);
 STACKTOP = i23;
 return i1 | 0;
}

function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE(i14, i16, i15, i17, i19, i18, i1) {
 i14 = i14 | 0;
 i16 = i16 | 0;
 i15 = i15 | 0;
 i17 = i17 | 0;
 i19 = i19 | 0;
 i18 = i18 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i20 = 0, i21 = 0, i22 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = i20;
 i12 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 30376) | 0;
 i10 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 30532) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] & 127](i13, i10);
 HEAP32[i18 >> 2] = i17;
 i1 = HEAP8[i14 >> 0] | 0;
 switch (i1 << 24 >> 24) {
 case 43:
 case 45:
  {
   i11 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 44 >> 2] & 63](i12, i1) | 0;
   i3 = HEAP32[i18 >> 2] | 0;
   HEAP32[i18 >> 2] = i3 + 4;
   HEAP32[i3 >> 2] = i11;
   i3 = i14 + 1 | 0;
   break;
  }
 default:
  i3 = i14;
 }
 i11 = i15;
 L4 : do if ((i11 - i3 | 0) > 1 ? (HEAP8[i3 >> 0] | 0) == 48 : 0) {
  i1 = i3 + 1 | 0;
  switch (HEAP8[i1 >> 0] | 0) {
  case 88:
  case 120:
   break;
  default:
   {
    i4 = 4;
    break L4;
   }
  }
  i9 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 44 >> 2] & 63](i12, 48) | 0;
  i8 = HEAP32[i18 >> 2] | 0;
  HEAP32[i18 >> 2] = i8 + 4;
  HEAP32[i8 >> 2] = i9;
  i3 = i3 + 2 | 0;
  i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 44 >> 2] & 63](i12, HEAP8[i1 >> 0] | 0) | 0;
  i9 = HEAP32[i18 >> 2] | 0;
  HEAP32[i18 >> 2] = i9 + 4;
  HEAP32[i9 >> 2] = i8;
  if (i3 >>> 0 < i15 >>> 0) {
   i1 = i3;
   while (1) {
    i9 = HEAP8[i1 >> 0] | 0;
    if (!(_isxdigit_l(i9, __ZNSt3__16__clocEv() | 0) | 0)) {
     i9 = i3;
     break L4;
    }
    i1 = i1 + 1 | 0;
    if (i1 >>> 0 >= i15 >>> 0) {
     i9 = i3;
     break;
    }
   }
  } else {
   i9 = i3;
   i1 = i3;
  }
 } else i4 = 4; while (0);
 L11 : do if ((i4 | 0) == 4) if (i3 >>> 0 < i15 >>> 0) {
  i1 = i3;
  while (1) {
   i9 = HEAP8[i1 >> 0] | 0;
   if (!(_isdigit_l(i9, __ZNSt3__16__clocEv() | 0) | 0)) {
    i9 = i3;
    break L11;
   }
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i15 >>> 0) {
    i9 = i3;
    break;
   }
  }
 } else {
  i9 = i3;
  i1 = i3;
 } while (0);
 i7 = HEAP8[i13 >> 0] | 0;
 i8 = i13 + 4 | 0;
 if (((i7 & 1) == 0 ? (i7 & 255) >>> 1 : HEAP32[i8 >> 2] | 0) | 0) {
  if ((i9 | 0) != (i1 | 0) ? (i2 = i1 + -1 | 0, i9 >>> 0 < i2 >>> 0) : 0) {
   i3 = i9;
   do {
    i7 = HEAP8[i3 >> 0] | 0;
    HEAP8[i3 >> 0] = HEAP8[i2 >> 0] | 0;
    HEAP8[i2 >> 0] = i7;
    i3 = i3 + 1 | 0;
    i2 = i2 + -1 | 0;
   } while (i3 >>> 0 < i2 >>> 0);
  }
  i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] & 127](i10) | 0;
  i5 = i13 + 8 | 0;
  i6 = i13 + 1 | 0;
  if (i9 >>> 0 < i1 >>> 0) {
   i2 = 0;
   i3 = 0;
   i7 = i9;
   while (1) {
    i21 = HEAP8[((HEAP8[i13 >> 0] & 1) == 0 ? i6 : HEAP32[i5 >> 2] | 0) + i3 >> 0] | 0;
    if (i21 << 24 >> 24 > 0 & (i2 | 0) == (i21 << 24 >> 24 | 0)) {
     i21 = HEAP32[i18 >> 2] | 0;
     HEAP32[i18 >> 2] = i21 + 4;
     HEAP32[i21 >> 2] = i4;
     i21 = HEAP8[i13 >> 0] | 0;
     i2 = 0;
     i3 = (i3 >>> 0 < (((i21 & 1) == 0 ? (i21 & 255) >>> 1 : HEAP32[i8 >> 2] | 0) + -1 | 0) >>> 0 & 1) + i3 | 0;
    }
    i22 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 44 >> 2] & 63](i12, HEAP8[i7 >> 0] | 0) | 0;
    i21 = HEAP32[i18 >> 2] | 0;
    HEAP32[i18 >> 2] = i21 + 4;
    HEAP32[i21 >> 2] = i22;
    i7 = i7 + 1 | 0;
    if (i7 >>> 0 >= i1 >>> 0) break; else i2 = i2 + 1 | 0;
   }
  }
  i2 = i17 + (i9 - i14 << 2) | 0;
  i4 = HEAP32[i18 >> 2] | 0;
  if ((i2 | 0) != (i4 | 0)) {
   i3 = i4 + -4 | 0;
   if (i2 >>> 0 < i3 >>> 0) {
    do {
     i22 = HEAP32[i2 >> 2] | 0;
     HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
     HEAP32[i3 >> 2] = i22;
     i2 = i2 + 4 | 0;
     i3 = i3 + -4 | 0;
    } while (i2 >>> 0 < i3 >>> 0);
    i3 = i12;
    i2 = i4;
   } else {
    i3 = i12;
    i2 = i4;
   }
  } else i3 = i12;
 } else {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 48 >> 2] & 31](i12, i9, i1, HEAP32[i18 >> 2] | 0) | 0;
  i2 = (HEAP32[i18 >> 2] | 0) + (i1 - i9 << 2) | 0;
  HEAP32[i18 >> 2] = i2;
  i3 = i12;
 }
 L36 : do if (i1 >>> 0 < i15 >>> 0) {
  while (1) {
   i2 = HEAP8[i1 >> 0] | 0;
   if (i2 << 24 >> 24 == 46) break;
   i21 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 44 >> 2] & 63](i12, i2) | 0;
   i22 = HEAP32[i18 >> 2] | 0;
   i2 = i22 + 4 | 0;
   HEAP32[i18 >> 2] = i2;
   HEAP32[i22 >> 2] = i21;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i15 >>> 0) break L36;
  }
  i21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] & 127](i10) | 0;
  i22 = HEAP32[i18 >> 2] | 0;
  i2 = i22 + 4 | 0;
  HEAP32[i18 >> 2] = i2;
  HEAP32[i22 >> 2] = i21;
  i1 = i1 + 1 | 0;
 } while (0);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 48 >> 2] & 31](i12, i1, i15, i2) | 0;
 i22 = (HEAP32[i18 >> 2] | 0) + (i11 - i1 << 2) | 0;
 HEAP32[i18 >> 2] = i22;
 HEAP32[i19 >> 2] = (i16 | 0) == (i15 | 0) ? i22 : i17 + (i16 - i14 << 2) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
 STACKTOP = i20;
 return;
}

function _SDL_RendererEventWatch(i10, i5) {
 i10 = i10 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, d3 = 0.0, d4 = 0.0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i11 + 4 | 0;
 i8 = i11;
 switch (HEAP32[i5 >> 2] | 0) {
 case 512:
  {
   i1 = _SDL_GetWindowFromID(HEAP32[i5 + 8 >> 2] | 0) | 0;
   i7 = i10 + 188 | 0;
   if ((i1 | 0) != (HEAP32[i7 >> 2] | 0)) {
    STACKTOP = i11;
    return 0;
   }
   i2 = HEAP32[i10 + 4 >> 2] | 0;
   if (i2) FUNCTION_TABLE_vii[i2 & 127](i10, i5);
   switch (HEAP8[i5 + 12 >> 0] | 0) {
   case 6:
    {
     i2 = i10 + 304 | 0;
     i5 = HEAP32[i2 >> 2] | 0;
     i6 = (i5 | 0) != 0;
     do if (i6) {
      i1 = HEAP32[i10 + 44 >> 2] | 0;
      if ((i1 | 0) != 0 ? (HEAP32[i10 + 108 >> 2] & 8 | 0) != 0 : 0) {
       HEAP32[i2 >> 2] = 0;
       if ((FUNCTION_TABLE_iii[i1 & 63](i10, 0) | 0) < 0) break;
       i13 = i10 + 212 | 0;
       i12 = i10 + 228 | 0;
       HEAP32[i13 >> 2] = HEAP32[i12 >> 2];
       HEAP32[i13 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
       HEAP32[i13 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
       HEAP32[i13 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
       i13 = i10 + 244 | 0;
       i12 = i10 + 260 | 0;
       HEAP32[i13 >> 2] = HEAP32[i12 >> 2];
       HEAP32[i13 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
       HEAP32[i13 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
       HEAP32[i13 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
       HEAP32[i10 + 276 >> 2] = HEAP32[i10 + 280 >> 2];
       i13 = i10 + 292 | 0;
       i12 = HEAP32[i13 + 4 >> 2] | 0;
       i1 = i10 + 284 | 0;
       HEAP32[i1 >> 2] = HEAP32[i13 >> 2];
       HEAP32[i1 + 4 >> 2] = i12;
       i1 = HEAP32[i10 + 208 >> 2] | 0;
       HEAP32[i10 + 196 >> 2] = HEAP32[i10 + 204 >> 2];
       HEAP32[i10 + 200 >> 2] = i1;
       if ((FUNCTION_TABLE_ii[HEAP32[i10 + 48 >> 2] & 127](i10) | 0) < 0) break;
       FUNCTION_TABLE_ii[HEAP32[i10 + 52 >> 2] & 127](i10) | 0;
       break;
      }
      _SDL_Error(4) | 0;
     } while (0);
     do if (!(HEAP32[i10 + 196 >> 2] | 0)) {
      i1 = HEAP32[i10 + 8 >> 2] | 0;
      if (!i1) _SDL_GetWindowSize(HEAP32[i7 >> 2] | 0, i9, i8); else FUNCTION_TABLE_iiii[i1 & 63](i10, i9, i8) | 0;
      if (!(HEAP32[i2 >> 2] | 0)) {
       HEAP32[i10 + 212 >> 2] = 0;
       HEAP32[i10 + 216 >> 2] = 0;
       HEAP32[i10 + 220 >> 2] = HEAP32[i9 >> 2];
       HEAP32[i10 + 224 >> 2] = HEAP32[i8 >> 2];
       FUNCTION_TABLE_ii[HEAP32[i10 + 48 >> 2] & 127](i10) | 0;
       break;
      } else {
       HEAP32[i10 + 228 >> 2] = 0;
       HEAP32[i10 + 232 >> 2] = 0;
       HEAP32[i10 + 236 >> 2] = HEAP32[i9 >> 2];
       HEAP32[i10 + 240 >> 2] = HEAP32[i8 >> 2];
       break;
      }
     } else _UpdateLogicalSize(i10) | 0; while (0);
     if (!i6) {
      STACKTOP = i11;
      return 0;
     }
     _SDL_SetRenderTarget(i10, i5) | 0;
     STACKTOP = i11;
     return 0;
    }
   case 2:
    {
     HEAP32[i10 + 192 >> 2] = 1;
     STACKTOP = i11;
     return 0;
    }
   case 1:
    {
     if ((_SDL_GetWindowFlags(i1) | 0) & 64) {
      STACKTOP = i11;
      return 0;
     }
     HEAP32[i10 + 192 >> 2] = 0;
     STACKTOP = i11;
     return 0;
    }
   case 7:
    {
     HEAP32[i10 + 192 >> 2] = 1;
     STACKTOP = i11;
     return 0;
    }
   case 9:
    {
     if ((_SDL_GetWindowFlags(i1) | 0) & 8) {
      STACKTOP = i11;
      return 0;
     }
     HEAP32[i10 + 192 >> 2] = 0;
     STACKTOP = i11;
     return 0;
    }
   default:
    {
     STACKTOP = i11;
     return 0;
    }
   }
  }
 case 1024:
  {
   if (!(HEAP32[i10 + 196 >> 2] | 0)) {
    STACKTOP = i11;
    return 0;
   }
   i13 = i5 + 20 | 0;
   i1 = i5 + 24 | 0;
   i2 = (HEAP32[i1 >> 2] | 0) - (HEAP32[i10 + 216 >> 2] | 0) | 0;
   d3 = +HEAPF32[i10 + 284 >> 2];
   HEAP32[i13 >> 2] = ~~(+((HEAP32[i13 >> 2] | 0) - (HEAP32[i10 + 212 >> 2] | 0) | 0) / d3);
   d4 = +HEAPF32[i10 + 288 >> 2];
   HEAP32[i1 >> 2] = ~~(+(i2 | 0) / d4);
   i1 = i5 + 28 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if ((i2 | 0) <= 0) {
    if ((i2 | 0) < 0) {
     i13 = ~~(+(i2 | 0) / d3);
     HEAP32[i1 >> 2] = (i13 | 0) > -1 ? -1 : i13;
    }
   } else {
    i13 = ~~(+(i2 | 0) / d3);
    HEAP32[i1 >> 2] = (i13 | 0) < 1 ? 1 : i13;
   }
   i1 = i5 + 32 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if ((i2 | 0) > 0) {
    i13 = ~~(+(i2 | 0) / d4);
    HEAP32[i1 >> 2] = (i13 | 0) < 1 ? 1 : i13;
    STACKTOP = i11;
    return 0;
   }
   if ((i2 | 0) >= 0) {
    STACKTOP = i11;
    return 0;
   }
   i13 = ~~(+(i2 | 0) / d4);
   HEAP32[i1 >> 2] = (i13 | 0) > -1 ? -1 : i13;
   STACKTOP = i11;
   return 0;
  }
 case 1026:
 case 1025:
  {
   if (!(HEAP32[i10 + 196 >> 2] | 0)) {
    STACKTOP = i11;
    return 0;
   }
   i9 = i5 + 20 | 0;
   i13 = i5 + 24 | 0;
   i12 = (HEAP32[i13 >> 2] | 0) - (HEAP32[i10 + 216 >> 2] | 0) | 0;
   HEAP32[i9 >> 2] = ~~(+((HEAP32[i9 >> 2] | 0) - (HEAP32[i10 + 212 >> 2] | 0) | 0) / +HEAPF32[i10 + 284 >> 2]);
   HEAP32[i13 >> 2] = ~~(+(i12 | 0) / +HEAPF32[i10 + 288 >> 2]);
   STACKTOP = i11;
   return 0;
  }
 default:
  {
   STACKTOP = i11;
   return 0;
  }
 }
 return 0;
}

function _SDL_RecreateWindow(i21, i2) {
 i21 = i21 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i17 = i22 + 80 | 0;
 i16 = i22 + 72 | 0;
 i11 = i22 + 64 | 0;
 i10 = i22 + 56 | 0;
 i9 = i22 + 48 | 0;
 i7 = i22 + 40 | 0;
 i8 = i22 + 32 | 0;
 i6 = i22 + 24 | 0;
 i5 = i22 + 16 | 0;
 i4 = i22 + 8 | 0;
 i1 = i22;
 i13 = i21 + 8 | 0;
 i15 = HEAP32[i13 >> 2] | 0;
 i19 = i21 + 12 | 0;
 i20 = HEAP32[i19 >> 2] | 0;
 i3 = HEAP32[3256] | 0;
 if ((i2 & 2 | 0) != 0 ? (HEAP32[i3 + 148 >> 2] | 0) == 0 : 0) {
  i21 = _SDL_SetError(41430, i1) | 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 i12 = i21 + 48 | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 i18 = (i1 & 2048 | 0) == 0 ? i2 & -2049 : i2 | 2048;
 do if (i3) {
  if ((HEAP32[i21 >> 2] | 0) != (i3 + 248 | 0)) {
   _SDL_SetError(41324, i5) | 0;
   break;
  }
  if (i1 & 4) {
   i1 = i21 + 112 | 0;
   HEAP32[i1 >> 2] = 1;
   _SDL_UpdateFullscreenMode(i21, 0);
   i2 = HEAP32[3256] | 0;
   i3 = HEAP32[i2 + 60 >> 2] | 0;
   if (i3) FUNCTION_TABLE_vii[i3 & 127](i2, i21);
   HEAP32[i1 >> 2] = 0;
   _SDL_SendWindowEvent(i21, 2, 0, 0) | 0;
  }
 } else _SDL_SetError(41242, i4) | 0; while (0);
 i1 = HEAP32[i21 + 104 >> 2] | 0;
 if (i1) {
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -5;
  _SDL_FreeSurface(i1);
 }
 i1 = HEAP32[3256] | 0;
 i2 = HEAP32[i1 + 112 >> 2] | 0;
 if (i2) {
  FUNCTION_TABLE_vii[i2 & 127](i1, i21);
  i1 = HEAP32[3256] | 0;
 }
 i2 = HEAP32[i1 + 100 >> 2] | 0;
 i4 = (i18 & 2048 | 0) == 0;
 if (i4 & (i2 | 0) != 0) FUNCTION_TABLE_vii[i2 & 127](i1, i21);
 i1 = i18 & 2;
 L26 : do if ((HEAP32[i12 >> 2] & 2 | 0) != (i1 | 0)) {
  i3 = HEAP32[3256] | 0;
  i2 = (i3 | 0) == 0;
  if (!i1) {
   if (i2) {
    _SDL_SetError(41242, i7) | 0;
    i3 = 0;
    break;
   }
   i1 = i3 + 356 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if ((i2 | 0) <= 0) {
    i3 = 0;
    break;
   }
   HEAP32[i1 >> 2] = i2 + -1;
   if ((i2 | 0) > 1) {
    i3 = 0;
    break;
   }
   i1 = HEAP32[i3 + 144 >> 2] | 0;
   if (!i1) {
    i3 = 0;
    break;
   }
   FUNCTION_TABLE_vi[i1 & 511](i3);
   i3 = 0;
   break;
  }
  L37 : do if (i2) i1 = _SDL_SetError(41242, i6) | 0; else {
   i1 = HEAP32[i3 + 356 >> 2] | 0;
   do if (!i1) {
    i1 = HEAP32[i3 + 136 >> 2] | 0;
    if (!i1) {
     i1 = _SDL_SetError(41464, i8) | 0;
     break L37;
    }
    i1 = FUNCTION_TABLE_iii[i1 & 63](i3, 0) | 0;
    i3 = HEAP32[3256] | 0;
    if (!i1) {
     i2 = i3;
     i1 = HEAP32[i3 + 356 >> 2] | 0;
     break;
    }
    i2 = HEAP32[i3 + 144 >> 2] | 0;
    if (!i2) break L37;
    FUNCTION_TABLE_vi[i2 & 511](i3);
    break L37;
   } else i2 = i3; while (0);
   HEAP32[i2 + 356 >> 2] = i1 + 1;
   i3 = 1;
   break L26;
  } while (0);
  if ((i1 | 0) < 0) {
   i21 = -1;
   STACKTOP = i22;
   return i21 | 0;
  } else i3 = 1;
 } else i3 = 0; while (0);
 HEAP32[i13 >> 2] = 0;
 HEAP32[i19 >> 2] = 0;
 i1 = i18 & 8242 | 8;
 HEAP32[i12 >> 2] = i1;
 HEAP32[i21 + 52 >> 2] = i1;
 HEAP32[i21 + 116 >> 2] = 0;
 i1 = HEAP32[3256] | 0;
 i2 = HEAP32[i1 + 24 >> 2] | 0;
 if (i4 & (i2 | 0) != 0 ? (FUNCTION_TABLE_iii[i2 & 63](i1, i21) | 0) < 0 : 0) {
  if (!i3) {
   i21 = -1;
   STACKTOP = i22;
   return i21 | 0;
  }
  i3 = HEAP32[3256] | 0;
  if (i3) {
   i1 = i3 + 356 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (((i2 | 0) > 0 ? (HEAP32[i1 >> 2] = i2 + -1, (i2 | 0) <= 1) : 0) ? (i14 = HEAP32[i3 + 144 >> 2] | 0, (i14 | 0) != 0) : 0) FUNCTION_TABLE_vi[i14 & 511](i3);
  } else _SDL_SetError(41242, i9) | 0;
  HEAP32[i12 >> 2] = HEAP32[i12 >> 2] & -3;
  i21 = -1;
  STACKTOP = i22;
  return i21 | 0;
 }
 if (!i4) HEAP32[i12 >> 2] = HEAP32[i12 >> 2] | 2048;
 if (i15) {
  i1 = HEAP32[3256] | 0;
  do if (!i1) _SDL_SetError(41242, i10) | 0; else {
   if ((i21 | 0) != 0 ? (HEAP32[i21 >> 2] | 0) == (i1 + 248 | 0) : 0) {
    i1 = HEAP32[i13 >> 2] | 0;
    if ((i1 | 0) == (i15 | 0)) break;
    _SDL_free(i1);
    if (!(HEAP8[i15 >> 0] | 0)) i1 = 0; else i1 = _SDL_strdup(i15) | 0;
    HEAP32[i13 >> 2] = i1;
    i1 = HEAP32[3256] | 0;
    i2 = HEAP32[i1 + 32 >> 2] | 0;
    if (!i2) break;
    FUNCTION_TABLE_vii[i2 & 127](i1, i21);
    break;
   }
   _SDL_SetError(41324, i11) | 0;
  } while (0);
  _SDL_free(i15);
 }
 if (i20) {
  i1 = HEAP32[3256] | 0;
  do if (!i1) _SDL_SetError(41242, i16) | 0; else {
   if ((i21 | 0) != 0 ? (HEAP32[i21 >> 2] | 0) == (i1 + 248 | 0) : 0) {
    _SDL_FreeSurface(HEAP32[i19 >> 2] | 0);
    i3 = _SDL_ConvertSurfaceFormat(i20, 372645892, 0) | 0;
    HEAP32[i19 >> 2] = i3;
    if (!i3) break;
    i1 = HEAP32[3256] | 0;
    i2 = HEAP32[i1 + 36 >> 2] | 0;
    if (!i2) break;
    FUNCTION_TABLE_viii[i2 & 31](i1, i21, i3);
    break;
   }
   _SDL_SetError(41324, i17) | 0;
  } while (0);
  _SDL_FreeSurface(i20);
 }
 if (HEAP32[i21 + 124 >> 2] | 0) FUNCTION_TABLE_iii[HEAP32[(HEAP32[13024 >> 2] | 0) + 228 >> 2] & 63](i21, 1) | 0;
 _SDL_FinishWindowCreation(i21, i18);
 i21 = 0;
 STACKTOP = i22;
 return i21 | 0;
}

function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i15, i17, i16, i18, i20, i19, i1) {
 i15 = i15 | 0;
 i17 = i17 | 0;
 i16 = i16 | 0;
 i18 = i18 | 0;
 i20 = i20 | 0;
 i19 = i19 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i21 = 0, i22 = 0, i23 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i14 = i21;
 i13 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 30384) | 0;
 i11 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 30524) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i11 >> 2] | 0) + 20 >> 2] & 127](i14, i11);
 HEAP32[i19 >> 2] = i18;
 i1 = HEAP8[i15 >> 0] | 0;
 switch (i1 << 24 >> 24) {
 case 43:
 case 45:
  {
   i12 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2] & 63](i13, i1) | 0;
   i4 = HEAP32[i19 >> 2] | 0;
   HEAP32[i19 >> 2] = i4 + 1;
   HEAP8[i4 >> 0] = i12;
   i4 = i15 + 1 | 0;
   break;
  }
 default:
  i4 = i15;
 }
 i12 = i16;
 L4 : do if ((i12 - i4 | 0) > 1 ? (HEAP8[i4 >> 0] | 0) == 48 : 0) {
  i1 = i4 + 1 | 0;
  switch (HEAP8[i1 >> 0] | 0) {
  case 88:
  case 120:
   break;
  default:
   {
    i5 = 4;
    break L4;
   }
  }
  i10 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2] & 63](i13, 48) | 0;
  i9 = HEAP32[i19 >> 2] | 0;
  HEAP32[i19 >> 2] = i9 + 1;
  HEAP8[i9 >> 0] = i10;
  i4 = i4 + 2 | 0;
  i9 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2] & 63](i13, HEAP8[i1 >> 0] | 0) | 0;
  i10 = HEAP32[i19 >> 2] | 0;
  HEAP32[i19 >> 2] = i10 + 1;
  HEAP8[i10 >> 0] = i9;
  if (i4 >>> 0 < i16 >>> 0) {
   i1 = i4;
   while (1) {
    i10 = HEAP8[i1 >> 0] | 0;
    if (!(_isxdigit_l(i10, __ZNSt3__16__clocEv() | 0) | 0)) {
     i10 = i4;
     break L4;
    }
    i1 = i1 + 1 | 0;
    if (i1 >>> 0 >= i16 >>> 0) {
     i10 = i4;
     break;
    }
   }
  } else {
   i10 = i4;
   i1 = i4;
  }
 } else i5 = 4; while (0);
 L11 : do if ((i5 | 0) == 4) if (i4 >>> 0 < i16 >>> 0) {
  i1 = i4;
  while (1) {
   i10 = HEAP8[i1 >> 0] | 0;
   if (!(_isdigit_l(i10, __ZNSt3__16__clocEv() | 0) | 0)) {
    i10 = i4;
    break L11;
   }
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i16 >>> 0) {
    i10 = i4;
    break;
   }
  }
 } else {
  i10 = i4;
  i1 = i4;
 } while (0);
 i8 = HEAP8[i14 >> 0] | 0;
 i9 = i14 + 4 | 0;
 if (((i8 & 1) == 0 ? (i8 & 255) >>> 1 : HEAP32[i9 >> 2] | 0) | 0) {
  if ((i10 | 0) != (i1 | 0) ? (i3 = i1 + -1 | 0, i10 >>> 0 < i3 >>> 0) : 0) {
   i4 = i10;
   do {
    i8 = HEAP8[i4 >> 0] | 0;
    HEAP8[i4 >> 0] = HEAP8[i3 >> 0] | 0;
    HEAP8[i3 >> 0] = i8;
    i4 = i4 + 1 | 0;
    i3 = i3 + -1 | 0;
   } while (i4 >>> 0 < i3 >>> 0);
  }
  i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] & 127](i11) | 0;
  i6 = i14 + 8 | 0;
  i7 = i14 + 1 | 0;
  if (i10 >>> 0 < i1 >>> 0) {
   i3 = 0;
   i4 = 0;
   i8 = i10;
   while (1) {
    i22 = HEAP8[((HEAP8[i14 >> 0] & 1) == 0 ? i7 : HEAP32[i6 >> 2] | 0) + i4 >> 0] | 0;
    if (i22 << 24 >> 24 > 0 & (i3 | 0) == (i22 << 24 >> 24 | 0)) {
     i22 = HEAP32[i19 >> 2] | 0;
     HEAP32[i19 >> 2] = i22 + 1;
     HEAP8[i22 >> 0] = i5;
     i22 = HEAP8[i14 >> 0] | 0;
     i3 = 0;
     i4 = (i4 >>> 0 < (((i22 & 1) == 0 ? (i22 & 255) >>> 1 : HEAP32[i9 >> 2] | 0) + -1 | 0) >>> 0 & 1) + i4 | 0;
    }
    i23 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2] & 63](i13, HEAP8[i8 >> 0] | 0) | 0;
    i22 = HEAP32[i19 >> 2] | 0;
    HEAP32[i19 >> 2] = i22 + 1;
    HEAP8[i22 >> 0] = i23;
    i8 = i8 + 1 | 0;
    if (i8 >>> 0 >= i1 >>> 0) break; else i3 = i3 + 1 | 0;
   }
  }
  i3 = i18 + (i10 - i15) | 0;
  i4 = HEAP32[i19 >> 2] | 0;
  if ((i3 | 0) != (i4 | 0) ? (i2 = i4 + -1 | 0, i3 >>> 0 < i2 >>> 0) : 0) {
   do {
    i23 = HEAP8[i3 >> 0] | 0;
    HEAP8[i3 >> 0] = HEAP8[i2 >> 0] | 0;
    HEAP8[i2 >> 0] = i23;
    i3 = i3 + 1 | 0;
    i2 = i2 + -1 | 0;
   } while (i3 >>> 0 < i2 >>> 0);
   i3 = i13;
  } else i3 = i13;
 } else {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i13 >> 2] | 0) + 32 >> 2] & 31](i13, i10, i1, HEAP32[i19 >> 2] | 0) | 0;
  HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + (i1 - i10);
  i3 = i13;
 }
 L36 : do if (i1 >>> 0 < i16 >>> 0) {
  while (1) {
   i2 = HEAP8[i1 >> 0] | 0;
   if (i2 << 24 >> 24 == 46) break;
   i22 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 63](i13, i2) | 0;
   i23 = HEAP32[i19 >> 2] | 0;
   HEAP32[i19 >> 2] = i23 + 1;
   HEAP8[i23 >> 0] = i22;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i16 >>> 0) break L36;
  }
  i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] & 127](i11) | 0;
  i23 = HEAP32[i19 >> 2] | 0;
  HEAP32[i19 >> 2] = i23 + 1;
  HEAP8[i23 >> 0] = i22;
  i1 = i1 + 1 | 0;
 } while (0);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i13 >> 2] | 0) + 32 >> 2] & 31](i13, i1, i16, HEAP32[i19 >> 2] | 0) | 0;
 i23 = (HEAP32[i19 >> 2] | 0) + (i12 - i1) | 0;
 HEAP32[i19 >> 2] = i23;
 HEAP32[i20 >> 2] = (i17 | 0) == (i16 | 0) ? i23 : i18 + (i17 - i15) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i14);
 STACKTOP = i21;
 return;
}

function _ellipseRGBA(i15, i7, i8, i5, i6, i4, i3, i2, i1) {
 i15 = i15 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0;
 i13 = i5 << 16 >> 16;
 if (i5 << 16 >> 16 < 0) {
  i16 = -1;
  return i16 | 0;
 }
 i14 = i6 << 16 >> 16;
 if (i6 << 16 >> 16 < 0) {
  i16 = -1;
  return i16 | 0;
 }
 if (!(i5 << 16 >> 16)) {
  i16 = i8 << 16 >> 16;
  i12 = _SDL_SetRenderDrawBlendMode(i15, i1 << 24 >> 24 != -1 & 1) | 0;
  i12 = _SDL_SetRenderDrawColor(i15, i4, i3, i2, i1) | 0 | i12;
  i13 = i7 << 16 >> 16;
  i16 = i12 | (_SDL_RenderDrawLine(i15, i13, i16 - i14 << 16 >> 16, i13, i14 + i16 << 16 >> 16) | 0);
  return i16 | 0;
 }
 if (!(i6 << 16 >> 16)) {
  i14 = i7 << 16 >> 16;
  i12 = _SDL_SetRenderDrawBlendMode(i15, i1 << 24 >> 24 != -1 & 1) | 0;
  i12 = _SDL_SetRenderDrawColor(i15, i4, i3, i2, i1) | 0 | i12;
  i16 = i8 << 16 >> 16;
  i16 = i12 | (_SDL_RenderDrawLine(i15, i14 - i13 << 16 >> 16, i16, i13 + i14 << 16 >> 16, i16) | 0);
  return i16 | 0;
 }
 i12 = _SDL_SetRenderDrawBlendMode(i15, i1 << 24 >> 24 != -1 & 1) | 0;
 i1 = _SDL_SetRenderDrawColor(i15, i4, i3, i2, i1) | 0 | i12;
 if (i5 << 16 >> 16 > i6 << 16 >> 16) {
  i11 = i7 << 16 >> 16;
  i8 = i8 << 16 >> 16;
  i9 = 0;
  i10 = i13 << 6;
  i2 = 65535;
  i3 = 65535;
  while (1) {
   i6 = i9 + 32 >> 6;
   i7 = i10 + 32 >> 6;
   i5 = (Math_imul(i6, i14) | 0) / (i13 | 0) | 0;
   i4 = (Math_imul(i7, i14) | 0) / (i13 | 0) | 0;
   if ((i3 | 0) == (i4 | 0) | (i2 | 0) == (i4 | 0) ? ((i2 | 0) == (i5 | 0) | (i3 | 0) == (i5 | 0)) & (i4 | 0) == (i5 | 0) : 0) {
    i5 = i2;
    i4 = i3;
   } else i16 = 11;
   do if ((i16 | 0) == 11) {
    i16 = 0;
    i2 = i6 + i11 | 0;
    i3 = i11 - i6 | 0;
    if ((i4 | 0) > 0) {
     i3 = i3 << 16 >> 16;
     i17 = i4 + i8 << 16 >> 16;
     i1 = _SDL_RenderDrawPoint(i15, i3, i17) | 0 | i1;
     i12 = i2 << 16 >> 16;
     i1 = i1 | (_SDL_RenderDrawPoint(i15, i12, i17) | 0);
     i2 = i8 - i4 << 16 >> 16;
     i3 = i1 | (_SDL_RenderDrawPoint(i15, i3, i2) | 0);
     i2 = i3 | (_SDL_RenderDrawPoint(i15, i12, i2) | 0);
    } else {
     i17 = _SDL_RenderDrawPoint(i15, i3 << 16 >> 16, i8) | 0 | i1;
     i2 = i17 | (_SDL_RenderDrawPoint(i15, i2 << 16 >> 16, i8) | 0);
    }
    i3 = i7 + i11 | 0;
    i1 = i11 - i7 | 0;
    if ((i5 | 0) > 0) {
     i12 = i1 << 16 >> 16;
     i1 = i5 + i8 << 16 >> 16;
     i2 = _SDL_RenderDrawPoint(i15, i12, i1) | 0 | i2;
     i17 = i3 << 16 >> 16;
     i3 = i2 | (_SDL_RenderDrawPoint(i15, i17, i1) | 0);
     i1 = i8 - i5 << 16 >> 16;
     i12 = i3 | (_SDL_RenderDrawPoint(i15, i12, i1) | 0);
     i1 = i12 | (_SDL_RenderDrawPoint(i15, i17, i1) | 0);
     break;
    } else {
     i1 = _SDL_RenderDrawPoint(i15, i1 << 16 >> 16, i8) | 0 | i2;
     i1 = i1 | (_SDL_RenderDrawPoint(i15, i3 << 16 >> 16, i8) | 0);
     break;
    }
   } while (0);
   i2 = ((i10 | 0) / (i13 | 0) | 0) + i9 | 0;
   if ((i7 | 0) > (i6 | 0)) {
    i9 = i2;
    i10 = i10 - ((i2 | 0) / (i13 | 0) | 0) | 0;
    i2 = i5;
    i3 = i4;
   } else break;
  }
  return i1 | 0;
 } else {
  i12 = i7 << 16 >> 16;
  i9 = i8 << 16 >> 16;
  i10 = 0;
  i11 = i14 << 6;
  i4 = 65535;
  i5 = 65535;
  while (1) {
   i7 = i10 + 32 >> 6;
   i8 = i11 + 32 >> 6;
   i2 = (Math_imul(i7, i13) | 0) / (i14 | 0) | 0;
   i6 = (Math_imul(i8, i13) | 0) / (i14 | 0) | 0;
   if (!((i5 | 0) == (i8 | 0) | (i4 | 0) == (i8 | 0) ? (i8 | 0) == (i7 | 0) | ((i4 | 0) == (i7 | 0) | (i5 | 0) == (i7 | 0)) : 0)) i16 = 21;
   do if ((i16 | 0) == 21) {
    i16 = 0;
    i3 = i12 - i2 | 0;
    i2 = i2 + i12 | 0;
    if ((i8 | 0) > 0) {
     i5 = i3 << 16 >> 16;
     i4 = i8 + i9 << 16 >> 16;
     i3 = _SDL_RenderDrawPoint(i15, i5, i4) | 0 | i1;
     i17 = i2 << 16 >> 16;
     i4 = i3 | (_SDL_RenderDrawPoint(i15, i17, i4) | 0);
     i2 = i9 - i8 << 16 >> 16;
     i5 = i4 | (_SDL_RenderDrawPoint(i15, i5, i2) | 0);
     i2 = i5 | (_SDL_RenderDrawPoint(i15, i17, i2) | 0);
    } else {
     i17 = _SDL_RenderDrawPoint(i15, i3 << 16 >> 16, i9) | 0 | i1;
     i2 = i17 | (_SDL_RenderDrawPoint(i15, i2 << 16 >> 16, i9) | 0);
    }
    i1 = i12 - i6 | 0;
    i3 = i6 + i12 | 0;
    if ((i7 | 0) > 0) {
     i6 = i1 << 16 >> 16;
     i4 = i7 + i9 << 16 >> 16;
     i1 = _SDL_RenderDrawPoint(i15, i6, i4) | 0 | i2;
     i17 = i3 << 16 >> 16;
     i4 = i1 | (_SDL_RenderDrawPoint(i15, i17, i4) | 0);
     i1 = i9 - i7 << 16 >> 16;
     i6 = i4 | (_SDL_RenderDrawPoint(i15, i6, i1) | 0);
     i4 = i7;
     i5 = i8;
     i1 = i6 | (_SDL_RenderDrawPoint(i15, i17, i1) | 0);
     break;
    } else {
     i1 = _SDL_RenderDrawPoint(i15, i1 << 16 >> 16, i9) | 0 | i2;
     i4 = i7;
     i5 = i8;
     i1 = i1 | (_SDL_RenderDrawPoint(i15, i3 << 16 >> 16, i9) | 0);
     break;
    }
   } while (0);
   i2 = ((i11 | 0) / (i14 | 0) | 0) + i10 | 0;
   if ((i8 | 0) > (i7 | 0)) {
    i10 = i2;
    i11 = i11 - ((i2 | 0) / (i14 | 0) | 0) | 0;
   } else break;
  }
  return i1 | 0;
 }
 return 0;
}

function _BlitNtoNCopyAlpha(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i26 = HEAP32[i4 + 24 >> 2] | 0;
 i3 = HEAP32[i4 + 28 >> 2] | 0;
 i37 = HEAP32[i4 + 16 >> 2] | 0;
 i38 = HEAP32[i4 + 36 >> 2] | 0;
 i2 = HEAP32[i4 + 40 >> 2] | 0;
 i27 = HEAPU8[i2 + 9 >> 0] | 0;
 i1 = HEAP32[i4 + 44 >> 2] | 0;
 i28 = HEAPU8[i1 + 9 >> 0] | 0;
 if (!i3) return;
 i29 = (i26 | 0) == 0;
 i30 = i1 + 28 | 0;
 i31 = i1 + 32 | 0;
 i32 = i1 + 29 | 0;
 i33 = i1 + 33 | 0;
 i34 = i1 + 30 | 0;
 i35 = i1 + 34 | 0;
 i36 = i1 + 31 | 0;
 i14 = i1 + 35 | 0;
 i15 = i2 + 12 | 0;
 i16 = i2 + 32 | 0;
 i17 = i2 + 28 | 0;
 i18 = i2 + 16 | 0;
 i19 = i2 + 33 | 0;
 i20 = i2 + 29 | 0;
 i21 = i2 + 20 | 0;
 i22 = i2 + 34 | 0;
 i23 = i2 + 30 | 0;
 i24 = i2 + 24 | 0;
 i25 = i2 + 35 | 0;
 i11 = i2 + 31 | 0;
 i12 = Math_imul(i26, i27) | 0;
 i13 = Math_imul(i26, i28) | 0;
 i2 = HEAP32[i4 + 20 >> 2] | 0;
 i4 = HEAP32[i4 >> 2] | 0;
 while (1) {
  i3 = i3 + -1 | 0;
  if (i29) i1 = i4; else {
   i1 = i4 + i12 | 0;
   i9 = i26;
   i10 = i2;
   while (1) {
    switch (i27 | 0) {
    case 1:
     {
      i8 = HEAPU8[i4 >> 0] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i11 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i8) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i23 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i8) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((i8 & HEAP32[i15 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i8 = HEAPU16[i4 >> 1] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i11 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i8) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i23 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i8) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((i8 & HEAP32[i15 >> 2]) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i5 = 255;
      i6 = HEAPU8[i4 + ((HEAPU8[i22 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i7 = HEAPU8[i4 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i8 = HEAPU8[i4 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i8 = HEAP32[i4 >> 2] | 0;
      i5 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i11 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i8) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
      i6 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i23 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i8) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
      i7 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i8) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i8 = HEAPU8[(HEAP32[5992 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i8) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i5 = 0;
      i6 = 0;
      i7 = 0;
      i8 = 0;
     }
    }
    switch (i28 | 0) {
    case 1:
     {
      HEAP8[i10 >> 0] = i7 >>> (HEAPU8[i32 >> 0] | 0) << (HEAPU8[i33 >> 0] | 0) | i8 >>> (HEAPU8[i30 >> 0] | 0) << (HEAPU8[i31 >> 0] | 0) | i6 >>> (HEAPU8[i34 >> 0] | 0) << (HEAPU8[i35 >> 0] | 0) | i5 >>> (HEAPU8[i36 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
      break;
     }
    case 2:
     {
      HEAP16[i10 >> 1] = i7 >>> (HEAPU8[i32 >> 0] | 0) << (HEAPU8[i33 >> 0] | 0) | i8 >>> (HEAPU8[i30 >> 0] | 0) << (HEAPU8[i31 >> 0] | 0) | i6 >>> (HEAPU8[i34 >> 0] | 0) << (HEAPU8[i35 >> 0] | 0) | i5 >>> (HEAPU8[i36 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
      break;
     }
    case 3:
     {
      HEAP8[i10 + ((HEAPU8[i31 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
      HEAP8[i10 + ((HEAPU8[i33 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
      HEAP8[i10 + ((HEAPU8[i35 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      break;
     }
    case 4:
     {
      HEAP32[i10 >> 2] = i7 >>> (HEAPU8[i32 >> 0] | 0) << (HEAPU8[i33 >> 0] | 0) | i8 >>> (HEAPU8[i30 >> 0] | 0) << (HEAPU8[i31 >> 0] | 0) | i6 >>> (HEAPU8[i34 >> 0] | 0) << (HEAPU8[i35 >> 0] | 0) | i5 >>> (HEAPU8[i36 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
      break;
     }
    default:
     {}
    }
    i9 = i9 + -1 | 0;
    if (!i9) break; else {
     i10 = i10 + i28 | 0;
     i4 = i4 + i27 | 0;
    }
   }
   i2 = i2 + i13 | 0;
  }
  if (!i3) break; else {
   i2 = i2 + i38 | 0;
   i4 = i1 + i37 | 0;
  }
 }
 return;
}

function _try_realloc_chunk(i15, i14) {
 i15 = i15 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i12 = i15 + 4 | 0;
 i13 = HEAP32[i12 >> 2] | 0;
 i7 = i13 & -8;
 i9 = i15 + i7 | 0;
 i6 = HEAP32[6687] | 0;
 i1 = i13 & 3;
 if (!((i1 | 0) != 1 & i15 >>> 0 >= i6 >>> 0 & i15 >>> 0 < i9 >>> 0)) _abort();
 i2 = i15 + (i7 | 4) | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!(i3 & 1)) _abort();
 if (!i1) {
  if (i14 >>> 0 < 256) {
   i15 = 0;
   return i15 | 0;
  }
  if (i7 >>> 0 >= (i14 + 4 | 0) >>> 0 ? (i7 - i14 | 0) >>> 0 <= HEAP32[6803] << 1 >>> 0 : 0) return i15 | 0;
  i15 = 0;
  return i15 | 0;
 }
 if (i7 >>> 0 >= i14 >>> 0) {
  i1 = i7 - i14 | 0;
  if (i1 >>> 0 <= 15) return i15 | 0;
  HEAP32[i12 >> 2] = i13 & 1 | i14 | 2;
  HEAP32[i15 + (i14 + 4) >> 2] = i1 | 3;
  HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 1;
  _dispose_chunk(i15 + i14 | 0, i1);
  return i15 | 0;
 }
 if ((i9 | 0) == (HEAP32[6689] | 0)) {
  i1 = (HEAP32[6686] | 0) + i7 | 0;
  if (i1 >>> 0 <= i14 >>> 0) {
   i15 = 0;
   return i15 | 0;
  }
  i11 = i1 - i14 | 0;
  HEAP32[i12 >> 2] = i13 & 1 | i14 | 2;
  HEAP32[i15 + (i14 + 4) >> 2] = i11 | 1;
  HEAP32[6689] = i15 + i14;
  HEAP32[6686] = i11;
  return i15 | 0;
 }
 if ((i9 | 0) == (HEAP32[6688] | 0)) {
  i2 = (HEAP32[6685] | 0) + i7 | 0;
  if (i2 >>> 0 < i14 >>> 0) {
   i15 = 0;
   return i15 | 0;
  }
  i1 = i2 - i14 | 0;
  if (i1 >>> 0 > 15) {
   HEAP32[i12 >> 2] = i13 & 1 | i14 | 2;
   HEAP32[i15 + (i14 + 4) >> 2] = i1 | 1;
   HEAP32[i15 + i2 >> 2] = i1;
   i2 = i15 + (i2 + 4) | 0;
   HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -2;
   i2 = i15 + i14 | 0;
  } else {
   HEAP32[i12 >> 2] = i13 & 1 | i2 | 2;
   i2 = i15 + (i2 + 4) | 0;
   HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 1;
   i2 = 0;
   i1 = 0;
  }
  HEAP32[6685] = i1;
  HEAP32[6688] = i2;
  return i15 | 0;
 }
 if (i3 & 2) {
  i15 = 0;
  return i15 | 0;
 }
 i10 = (i3 & -8) + i7 | 0;
 if (i10 >>> 0 < i14 >>> 0) {
  i15 = 0;
  return i15 | 0;
 }
 i11 = i10 - i14 | 0;
 i4 = i3 >>> 3;
 do if (i3 >>> 0 >= 256) {
  i5 = HEAP32[i15 + (i7 + 24) >> 2] | 0;
  i4 = HEAP32[i15 + (i7 + 12) >> 2] | 0;
  do if ((i4 | 0) == (i9 | 0)) {
   i2 = i15 + (i7 + 20) | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    i2 = i15 + (i7 + 16) | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i8 = 0;
     break;
    }
   }
   while (1) {
    i3 = i1 + 20 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (i4) {
     i1 = i4;
     i2 = i3;
     continue;
    }
    i3 = i1 + 16 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (!i4) break; else {
     i1 = i4;
     i2 = i3;
    }
   }
   if (i2 >>> 0 < i6 >>> 0) _abort(); else {
    HEAP32[i2 >> 2] = 0;
    i8 = i1;
    break;
   }
  } else {
   i3 = HEAP32[i15 + (i7 + 8) >> 2] | 0;
   if (i3 >>> 0 < i6 >>> 0) _abort();
   i1 = i3 + 12 | 0;
   if ((HEAP32[i1 >> 2] | 0) != (i9 | 0)) _abort();
   i2 = i4 + 8 | 0;
   if ((HEAP32[i2 >> 2] | 0) == (i9 | 0)) {
    HEAP32[i1 >> 2] = i4;
    HEAP32[i2 >> 2] = i3;
    i8 = i4;
    break;
   } else _abort();
  } while (0);
  if (i5) {
   i1 = HEAP32[i15 + (i7 + 28) >> 2] | 0;
   i2 = 27036 + (i1 << 2) | 0;
   if ((i9 | 0) == (HEAP32[i2 >> 2] | 0)) {
    HEAP32[i2 >> 2] = i8;
    if (!i8) {
     HEAP32[6684] = HEAP32[6684] & ~(1 << i1);
     break;
    }
   } else {
    if (i5 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort();
    i1 = i5 + 16 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i9 | 0)) HEAP32[i1 >> 2] = i8; else HEAP32[i5 + 20 >> 2] = i8;
    if (!i8) break;
   }
   i2 = HEAP32[6687] | 0;
   if (i8 >>> 0 < i2 >>> 0) _abort();
   HEAP32[i8 + 24 >> 2] = i5;
   i1 = HEAP32[i15 + (i7 + 16) >> 2] | 0;
   do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
    HEAP32[i8 + 16 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i8;
    break;
   } while (0);
   i1 = HEAP32[i15 + (i7 + 20) >> 2] | 0;
   if (i1) if (i1 >>> 0 < (HEAP32[6687] | 0) >>> 0) _abort(); else {
    HEAP32[i8 + 20 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i8;
    break;
   }
  }
 } else {
  i3 = HEAP32[i15 + (i7 + 8) >> 2] | 0;
  i2 = HEAP32[i15 + (i7 + 12) >> 2] | 0;
  i1 = 26772 + (i4 << 1 << 2) | 0;
  if ((i3 | 0) != (i1 | 0)) {
   if (i3 >>> 0 < i6 >>> 0) _abort();
   if ((HEAP32[i3 + 12 >> 2] | 0) != (i9 | 0)) _abort();
  }
  if ((i2 | 0) == (i3 | 0)) {
   HEAP32[6683] = HEAP32[6683] & ~(1 << i4);
   break;
  }
  if ((i2 | 0) != (i1 | 0)) {
   if (i2 >>> 0 < i6 >>> 0) _abort();
   i1 = i2 + 8 | 0;
   if ((HEAP32[i1 >> 2] | 0) == (i9 | 0)) i5 = i1; else _abort();
  } else i5 = i2 + 8 | 0;
  HEAP32[i3 + 12 >> 2] = i2;
  HEAP32[i5 >> 2] = i3;
 } while (0);
 if (i11 >>> 0 < 16) {
  HEAP32[i12 >> 2] = i10 | i13 & 1 | 2;
  i14 = i15 + (i10 | 4) | 0;
  HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 1;
  return i15 | 0;
 } else {
  HEAP32[i12 >> 2] = i13 & 1 | i14 | 2;
  HEAP32[i15 + (i14 + 4) >> 2] = i11 | 3;
  i13 = i15 + (i10 | 4) | 0;
  HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 1;
  _dispose_chunk(i15 + i14 | 0, i11);
  return i15 | 0;
 }
 return 0;
}

function _SDL_PeepEvents(i11, i7, i5, i14, i13) {
 i11 = i11 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 i14 = i14 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i2 = i15 + 72 | 0;
 i6 = i15 + 64 | 0;
 i1 = i15 + 56 | 0;
 i3 = i15;
 if (!(HEAP32[1587] | 0)) {
  if (!i5) {
   i14 = -1;
   STACKTOP = i15;
   return i14 | 0;
  }
  _SDL_SetError(36639, i1) | 0;
  i14 = -1;
  STACKTOP = i15;
  return i14 | 0;
 }
 i1 = HEAP32[1586] | 0;
 if ((i1 | 0) != 0 ? (_SDL_LockMutex(i1) | 0) != 0 : 0) {
  i14 = _SDL_SetError(36707, i2) | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 if (!i5) if ((i7 | 0) > 0) {
  i4 = 0;
  i1 = 0;
  do {
   i3 = i11 + (i4 * 56 | 0) | 0;
   do if ((HEAP32[1588] | 0) > 65534) {
    HEAP32[i6 >> 2] = HEAP32[1588];
    _SDL_SetError(36675, i6) | 0;
    i2 = 0;
   } else {
    i2 = HEAP32[1591] | 0;
    if (!i2) {
     i2 = _SDL_malloc(80) | 0;
     if (!i2) {
      i2 = 0;
      break;
     }
    } else HEAP32[1591] = HEAP32[i2 + 72 >> 2];
    i8 = i2;
    i9 = i3;
    i10 = i8 + 56 | 0;
    do {
     HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
     i8 = i8 + 4 | 0;
     i9 = i9 + 4 | 0;
    } while ((i8 | 0) < (i10 | 0));
    if ((HEAP32[i3 >> 2] | 0) == 513) {
     i14 = i2 + 56 | 0;
     i13 = HEAP32[i11 + (i4 * 56 | 0) + 8 >> 2] | 0;
     HEAP32[i14 >> 2] = HEAP32[i13 >> 2];
     HEAP32[i14 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
     HEAP32[i14 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
     HEAP32[i2 + 8 >> 2] = i14;
    }
    i3 = HEAP32[1590] | 0;
    if (!i3) {
     HEAP32[1589] = i2;
     HEAP32[1590] = i2;
     HEAP32[i2 + 68 >> 2] = 0;
    } else {
     HEAP32[i3 + 72 >> 2] = i2;
     HEAP32[i2 + 68 >> 2] = i3;
     HEAP32[1590] = i2;
    }
    HEAP32[i2 + 72 >> 2] = 0;
    HEAP32[1588] = (HEAP32[1588] | 0) + 1;
    i2 = 1;
   } while (0);
   i1 = i2 + i1 | 0;
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) != (i7 | 0));
 } else i1 = 0; else {
  i4 = (i11 | 0) == 0;
  i12 = i4 ? 1 : i7;
  i11 = i4 ? i3 : i11;
  i1 = HEAP32[1592] | 0;
  if (i1) {
   i3 = HEAP32[1593] | 0;
   while (1) {
    i10 = i1 + 12 | 0;
    i2 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = i3;
    if (!i2) break; else {
     i3 = i1;
     i1 = i2;
    }
   }
   HEAP32[1593] = i1;
  }
  HEAP32[1592] = 0;
  i2 = HEAP32[1589] | 0;
  i1 = (i12 | 0) > 0;
  L39 : do if ((i5 | 0) == 2 & (i4 ^ 1)) if (i1) {
   i1 = 0;
   do {
    i4 = i2;
    while (1) {
     if (!i4) break L39;
     i3 = i4 + 72 | 0;
     i2 = HEAP32[i3 >> 2] | 0;
     i10 = HEAP32[i4 >> 2] | 0;
     if (i10 >>> 0 < i14 >>> 0 | i10 >>> 0 > i13 >>> 0) i4 = i2; else {
      i5 = i4;
      i7 = i4;
      break;
     }
    }
    i8 = i11 + (i1 * 56 | 0) | 0;
    i9 = i7;
    i10 = i8 + 56 | 0;
    do {
     HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
     i8 = i8 + 4 | 0;
     i9 = i9 + 4 | 0;
    } while ((i8 | 0) < (i10 | 0));
    if ((HEAP32[i5 >> 2] | 0) == 513) {
     i4 = HEAP32[1593] | 0;
     if (!i4) i4 = _SDL_malloc(16) | 0; else HEAP32[1593] = HEAP32[i4 + 12 >> 2];
     i10 = HEAP32[i7 + 8 >> 2] | 0;
     HEAP32[i4 >> 2] = HEAP32[i10 >> 2];
     HEAP32[i4 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
     HEAP32[i4 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
     HEAP32[i4 + 12 >> 2] = HEAP32[1592];
     HEAP32[1592] = i4;
     HEAP32[i11 + (i1 * 56 | 0) + 8 >> 2] = i4;
    }
    i1 = i1 + 1 | 0;
    i4 = i7 + 68 | 0;
    i5 = HEAP32[i4 >> 2] | 0;
    if (i5) HEAP32[i5 + 72 >> 2] = HEAP32[i3 >> 2];
    i6 = HEAP32[i3 >> 2] | 0;
    if (i6) HEAP32[i6 + 68 >> 2] = i5;
    if ((HEAP32[1589] | 0) == (i7 | 0)) HEAP32[1589] = i6;
    if ((HEAP32[1590] | 0) == (i7 | 0)) HEAP32[1590] = HEAP32[i4 >> 2];
    HEAP32[i3 >> 2] = HEAP32[1591];
    HEAP32[1591] = i7;
    HEAP32[1588] = (HEAP32[1588] | 0) + -1;
   } while ((i1 | 0) < (i12 | 0));
  } else i1 = 0; else if (i1) {
   i1 = 0;
   do {
    i3 = i2;
    while (1) {
     if (!i3) break L39;
     i2 = HEAP32[i3 + 72 >> 2] | 0;
     i10 = HEAP32[i3 >> 2] | 0;
     if (i10 >>> 0 < i14 >>> 0 | i10 >>> 0 > i13 >>> 0) i3 = i2; else {
      i4 = i3;
      i5 = i3;
      break;
     }
    }
    i8 = i11 + (i1 * 56 | 0) | 0;
    i9 = i5;
    i10 = i8 + 56 | 0;
    do {
     HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
     i8 = i8 + 4 | 0;
     i9 = i9 + 4 | 0;
    } while ((i8 | 0) < (i10 | 0));
    if ((HEAP32[i4 >> 2] | 0) == 513) {
     i3 = HEAP32[1593] | 0;
     if (!i3) i3 = _SDL_malloc(16) | 0; else HEAP32[1593] = HEAP32[i3 + 12 >> 2];
     i10 = HEAP32[i5 + 8 >> 2] | 0;
     HEAP32[i3 >> 2] = HEAP32[i10 >> 2];
     HEAP32[i3 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
     HEAP32[i3 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
     HEAP32[i3 + 12 >> 2] = HEAP32[1592];
     HEAP32[1592] = i3;
     HEAP32[i11 + (i1 * 56 | 0) + 8 >> 2] = i3;
    }
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (i12 | 0));
  } else i1 = 0; while (0);
 }
 i14 = i1;
 STACKTOP = i15;
 return i14 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i19) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i19 = i19 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i26 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 i12 = i22 + 208 | 0;
 i3 = i22 + 40 | 0;
 i4 = i22 + 36 | 0;
 i21 = i22 + 24 | 0;
 i20 = i22 + 12 | 0;
 i17 = i22 + 8 | 0;
 i18 = i22 + 48 | 0;
 i15 = i22 + 4 | 0;
 i14 = i22;
 i16 = i22 + 337 | 0;
 i13 = i22 + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i21, i2, i12, i3, i4);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i9 = i20 + 8 | 0;
 i10 = i20 + 1 | 0;
 i2 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
 HEAP32[i17 >> 2] = i2;
 HEAP32[i15 >> 2] = i18;
 HEAP32[i14 >> 2] = 0;
 HEAP8[i16 >> 0] = 1;
 HEAP8[i13 >> 0] = 69;
 i11 = i20 + 4 | 0;
 i8 = HEAP32[i3 >> 2] | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 i3 = HEAP32[i23 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i23 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i24 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) break; else break L4; else {
    HEAP32[i24 >> 2] = 0;
    i26 = 16;
    break;
   }
  } else i26 = 16; while (0);
  if ((i26 | 0) == 16) {
   i26 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i20 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i11 >> 2] | 0;
  if ((HEAP32[i17 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
   i2 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
   HEAP32[i17 >> 2] = i2 + i5;
  }
  i5 = i3 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i1, i16, i13, i2, i17, i8, i7, i21, i18, i15, i14, i12) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 4;
   continue;
  }
 }
 i13 = HEAP8[i21 >> 0] | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 if (!((HEAP8[i16 >> 0] | 0) == 0 ? 1 : (((i13 & 1) == 0 ? (i13 & 255) >>> 1 : HEAP32[i21 + 4 >> 2] | 0) | 0) == 0) ? (i1 - i18 | 0) < 160 : 0) {
  i14 = HEAP32[i14 >> 2] | 0;
  i16 = i1 + 4 | 0;
  HEAP32[i15 >> 2] = i16;
  HEAP32[i1 >> 2] = i14;
  i1 = i16;
 }
 HEAPF32[i19 >> 2] = +__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj(i2, HEAP32[i17 >> 2] | 0, i25);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i21, i18, i1, i25);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i23 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i26 = 46;
   break;
  } else {
   HEAP32[i24 >> 2] = 0;
   i26 = 44;
   break;
  }
 } else i26 = 44; while (0);
 if ((i26 | 0) == 44 ? i2 : 0) i26 = 46;
 if ((i26 | 0) == 46) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i26 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 STACKTOP = i22;
 return i26 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i19) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i19 = i19 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i26 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 i12 = i22 + 208 | 0;
 i3 = i22 + 40 | 0;
 i4 = i22 + 36 | 0;
 i21 = i22 + 24 | 0;
 i20 = i22 + 12 | 0;
 i17 = i22 + 8 | 0;
 i18 = i22 + 48 | 0;
 i15 = i22 + 4 | 0;
 i14 = i22;
 i16 = i22 + 337 | 0;
 i13 = i22 + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i21, i2, i12, i3, i4);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i9 = i20 + 8 | 0;
 i10 = i20 + 1 | 0;
 i2 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
 HEAP32[i17 >> 2] = i2;
 HEAP32[i15 >> 2] = i18;
 HEAP32[i14 >> 2] = 0;
 HEAP8[i16 >> 0] = 1;
 HEAP8[i13 >> 0] = 69;
 i11 = i20 + 4 | 0;
 i8 = HEAP32[i3 >> 2] | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 i3 = HEAP32[i23 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i23 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i24 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) break; else break L4; else {
    HEAP32[i24 >> 2] = 0;
    i26 = 16;
    break;
   }
  } else i26 = 16; while (0);
  if ((i26 | 0) == 16) {
   i26 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i20 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i11 >> 2] | 0;
  if ((HEAP32[i17 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
   i2 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
   HEAP32[i17 >> 2] = i2 + i5;
  }
  i5 = i3 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i1, i16, i13, i2, i17, i8, i7, i21, i18, i15, i14, i12) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 4;
   continue;
  }
 }
 i13 = HEAP8[i21 >> 0] | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 if (!((HEAP8[i16 >> 0] | 0) == 0 ? 1 : (((i13 & 1) == 0 ? (i13 & 255) >>> 1 : HEAP32[i21 + 4 >> 2] | 0) | 0) == 0) ? (i1 - i18 | 0) < 160 : 0) {
  i14 = HEAP32[i14 >> 2] | 0;
  i16 = i1 + 4 | 0;
  HEAP32[i15 >> 2] = i16;
  HEAP32[i1 >> 2] = i14;
  i1 = i16;
 }
 HEAPF64[i19 >> 3] = +__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj(i2, HEAP32[i17 >> 2] | 0, i25);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i21, i18, i1, i25);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i23 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i26 = 46;
   break;
  } else {
   HEAP32[i24 >> 2] = 0;
   i26 = 44;
   break;
  }
 } else i26 = 44; while (0);
 if ((i26 | 0) == 44 ? i2 : 0) i26 = 46;
 if ((i26 | 0) == 46) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i26 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 STACKTOP = i22;
 return i26 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i19) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i19 = i19 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i26 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 i12 = i22 + 208 | 0;
 i3 = i22 + 40 | 0;
 i4 = i22 + 36 | 0;
 i21 = i22 + 24 | 0;
 i20 = i22 + 12 | 0;
 i17 = i22 + 8 | 0;
 i18 = i22 + 48 | 0;
 i15 = i22 + 4 | 0;
 i14 = i22;
 i16 = i22 + 337 | 0;
 i13 = i22 + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i21, i2, i12, i3, i4);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i9 = i20 + 8 | 0;
 i10 = i20 + 1 | 0;
 i2 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
 HEAP32[i17 >> 2] = i2;
 HEAP32[i15 >> 2] = i18;
 HEAP32[i14 >> 2] = 0;
 HEAP8[i16 >> 0] = 1;
 HEAP8[i13 >> 0] = 69;
 i11 = i20 + 4 | 0;
 i8 = HEAP32[i3 >> 2] | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 i3 = HEAP32[i23 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i23 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i24 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) break; else break L4; else {
    HEAP32[i24 >> 2] = 0;
    i26 = 16;
    break;
   }
  } else i26 = 16; while (0);
  if ((i26 | 0) == 16) {
   i26 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i20 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i11 >> 2] | 0;
  if ((HEAP32[i17 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
   i2 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
   HEAP32[i17 >> 2] = i2 + i5;
  }
  i5 = i3 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i1, i16, i13, i2, i17, i8, i7, i21, i18, i15, i14, i12) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 4;
   continue;
  }
 }
 i13 = HEAP8[i21 >> 0] | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 if (!((HEAP8[i16 >> 0] | 0) == 0 ? 1 : (((i13 & 1) == 0 ? (i13 & 255) >>> 1 : HEAP32[i21 + 4 >> 2] | 0) | 0) == 0) ? (i1 - i18 | 0) < 160 : 0) {
  i14 = HEAP32[i14 >> 2] | 0;
  i16 = i1 + 4 | 0;
  HEAP32[i15 >> 2] = i16;
  HEAP32[i1 >> 2] = i14;
  i1 = i16;
 }
 HEAPF64[i19 >> 3] = +__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj(i2, HEAP32[i17 >> 2] | 0, i25);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i21, i18, i1, i25);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i23 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i26 = 46;
   break;
  } else {
   HEAP32[i24 >> 2] = 0;
   i26 = 44;
   break;
  }
 } else i26 = 44; while (0);
 if ((i26 | 0) == 44 ? i2 : 0) i26 = 46;
 if ((i26 | 0) == 46) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i26 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 STACKTOP = i22;
 return i26 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i11 = i20 + 208 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i2;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i21 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i21 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) {
    i6 = i4;
    break;
   } else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 16;
    break;
   }
  } else i24 = 16; while (0);
  if ((i24 | 0) == 16) {
   i24 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i6 = 0;
  }
  i4 = HEAP8[i18 >> 0] | 0;
  i4 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i4 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
   i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i2 + i4;
  }
  i4 = i3 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i14, i2, i15, i12, i7, i19, i16, i13, i11) | 0) {
   i4 = i6;
   break;
  }
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i4 >> 2] = i1 + 4;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i1 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i1 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i1 >> 2] = i11;
  i1 = i12;
 }
 i15 = __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji(i2, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 HEAP32[i17 >> 2] = i15;
 HEAP32[i17 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i1, i23);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i21 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i24 = 46;
   break;
  } else {
   HEAP32[i22 >> 2] = 0;
   i24 = 44;
   break;
  }
 } else i24 = 44; while (0);
 if ((i24 | 0) == 44 ? i2 : 0) i24 = 46;
 if ((i24 | 0) == 46) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i11 = i20 + 208 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i2;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i21 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i21 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) {
    i6 = i4;
    break;
   } else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 16;
    break;
   }
  } else i24 = 16; while (0);
  if ((i24 | 0) == 16) {
   i24 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i6 = 0;
  }
  i4 = HEAP8[i18 >> 0] | 0;
  i4 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i4 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
   i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i2 + i4;
  }
  i4 = i3 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i14, i2, i15, i12, i7, i19, i16, i13, i11) | 0) {
   i4 = i6;
   break;
  }
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i4 >> 2] = i1 + 4;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i1 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i1 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i1 >> 2] = i11;
  i1 = i12;
 }
 i15 = __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji(i2, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 HEAP32[i17 >> 2] = i15;
 HEAP32[i17 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i1, i23);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i21 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i24 = 46;
   break;
  } else {
   HEAP32[i22 >> 2] = 0;
   i24 = 44;
   break;
  }
 } else i24 = 44; while (0);
 if ((i24 | 0) == 44 ? i2 : 0) i24 = 46;
 if ((i24 | 0) == 46) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function _Blit4to4MaskAlpha(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i4 = HEAP32[i3 + 24 >> 2] | 0;
 i5 = HEAP32[i3 + 28 >> 2] | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 i12 = HEAP32[i3 + 16 >> 2] | 0;
 i6 = HEAP32[i3 + 20 >> 2] | 0;
 i11 = HEAP32[i3 + 36 >> 2] | 0;
 i1 = HEAP32[i3 + 40 >> 2] | 0;
 i2 = HEAP32[i3 + 44 >> 2] | 0;
 if (!(HEAP32[i2 + 24 >> 2] | 0)) {
  i9 = HEAP32[i1 + 16 >> 2] | HEAP32[i1 + 12 >> 2] | HEAP32[i1 + 20 >> 2];
  if (!i5) return;
  i10 = (i4 + 7 | 0) / 8 | 0;
  i8 = i4 & 7;
  i3 = i5;
  i1 = i6;
  i2 = i7;
  L6 : while (1) {
   i3 = i3 + -1 | 0;
   switch (i8 | 0) {
   case 0:
    {
     i4 = i10;
     i5 = 17;
     break;
    }
   case 7:
    {
     i4 = i10;
     i5 = 18;
     break;
    }
   case 6:
    {
     i4 = i10;
     i5 = 19;
     break;
    }
   case 5:
    {
     i4 = i10;
     i5 = 20;
     break;
    }
   case 4:
    {
     i4 = i10;
     i5 = 21;
     break;
    }
   case 3:
    {
     i4 = i10;
     i5 = 22;
     break;
    }
   case 2:
    {
     i4 = i10;
     i5 = 23;
     break;
    }
   case 1:
    {
     i4 = i10;
     i5 = 24;
     break;
    }
   default:
    i5 = 25;
   }
   while (1) if ((i5 | 0) == 17) {
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2] & i9;
    i1 = i1 + 4 | 0;
    i2 = i2 + 4 | 0;
    i5 = 18;
    continue;
   } else if ((i5 | 0) == 18) {
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2] & i9;
    i1 = i1 + 4 | 0;
    i2 = i2 + 4 | 0;
    i5 = 19;
    continue;
   } else if ((i5 | 0) == 19) {
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2] & i9;
    i1 = i1 + 4 | 0;
    i2 = i2 + 4 | 0;
    i5 = 20;
    continue;
   } else if ((i5 | 0) == 20) {
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2] & i9;
    i1 = i1 + 4 | 0;
    i2 = i2 + 4 | 0;
    i5 = 21;
    continue;
   } else if ((i5 | 0) == 21) {
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2] & i9;
    i1 = i1 + 4 | 0;
    i2 = i2 + 4 | 0;
    i5 = 22;
    continue;
   } else if ((i5 | 0) == 22) {
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2] & i9;
    i1 = i1 + 4 | 0;
    i2 = i2 + 4 | 0;
    i5 = 23;
    continue;
   } else if ((i5 | 0) == 23) {
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2] & i9;
    i1 = i1 + 4 | 0;
    i2 = i2 + 4 | 0;
    i5 = 24;
    continue;
   } else if ((i5 | 0) == 24) {
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2] & i9;
    i1 = i1 + 4 | 0;
    i2 = i2 + 4 | 0;
    if ((i4 | 0) > 1) {
     i4 = i4 + -1 | 0;
     i5 = 17;
     continue;
    } else {
     i5 = 25;
     continue;
    }
   } else if ((i5 | 0) == 25) if (!i3) break L6; else {
    i1 = i1 + i11 | 0;
    i2 = i2 + i12 | 0;
    continue L6;
   }
  }
  return;
 } else {
  i9 = (HEAPU8[i3 + 63 >> 0] | 0) >>> (HEAPU8[i2 + 31 >> 0] | 0) << (HEAPU8[i2 + 35 >> 0] | 0);
  if (!i5) return;
  i10 = (i4 + 7 | 0) / 8 | 0;
  i8 = i4 & 7;
  i3 = i5;
  i1 = i6;
  i2 = i7;
  L24 : while (1) {
   i3 = i3 + -1 | 0;
   switch (i8 | 0) {
   case 0:
    {
     i4 = i10;
     i5 = 5;
     break;
    }
   case 7:
    {
     i4 = i10;
     i5 = 6;
     break;
    }
   case 6:
    {
     i4 = i10;
     i5 = 7;
     break;
    }
   case 5:
    {
     i4 = i10;
     i5 = 8;
     break;
    }
   case 4:
    {
     i4 = i10;
     i5 = 9;
     break;
    }
   case 3:
    {
     i4 = i10;
     i5 = 10;
     break;
    }
   case 2:
    {
     i4 = i10;
     i5 = 11;
     break;
    }
   case 1:
    {
     i4 = i10;
     i5 = 12;
     break;
    }
   default:
    i5 = 13;
   }
   while (1) if ((i5 | 0) == 5) {
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2] | i9;
    i1 = i1 + 4 | 0;
    i2 = i2 + 4 | 0;
    i5 = 6;
    continue;
   } else if ((i5 | 0) == 6) {
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2] | i9;
    i1 = i1 + 4 | 0;
    i2 = i2 + 4 | 0;
    i5 = 7;
    continue;
   } else if ((i5 | 0) == 7) {
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2] | i9;
    i1 = i1 + 4 | 0;
    i2 = i2 + 4 | 0;
    i5 = 8;
    continue;
   } else if ((i5 | 0) == 8) {
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2] | i9;
    i1 = i1 + 4 | 0;
    i2 = i2 + 4 | 0;
    i5 = 9;
    continue;
   } else if ((i5 | 0) == 9) {
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2] | i9;
    i1 = i1 + 4 | 0;
    i2 = i2 + 4 | 0;
    i5 = 10;
    continue;
   } else if ((i5 | 0) == 10) {
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2] | i9;
    i1 = i1 + 4 | 0;
    i2 = i2 + 4 | 0;
    i5 = 11;
    continue;
   } else if ((i5 | 0) == 11) {
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2] | i9;
    i1 = i1 + 4 | 0;
    i2 = i2 + 4 | 0;
    i5 = 12;
    continue;
   } else if ((i5 | 0) == 12) {
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2] | i9;
    i1 = i1 + 4 | 0;
    i2 = i2 + 4 | 0;
    if ((i4 | 0) > 1) {
     i4 = i4 + -1 | 0;
     i5 = 5;
     continue;
    } else {
     i5 = 13;
     continue;
    }
   } else if ((i5 | 0) == 13) if (!i3) break L24; else {
    i1 = i1 + i11 | 0;
    i2 = i2 + i12 | 0;
    continue L24;
   }
  }
  return;
 }
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv(i1, i20, i21, i2, i22, i16) {
 i1 = i1 | 0;
 i20 = i20 | 0;
 i21 = i21 | 0;
 i2 = i2 | 0;
 i22 = i22 | 0;
 i16 = i16 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i23 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i15 = i19;
 i8 = i19 + 208 | 0;
 i18 = i19 + 32 | 0;
 i12 = i19 + 28 | 0;
 i17 = i19 + 16 | 0;
 i14 = i19 + 12 | 0;
 i10 = i19 + 48 | 0;
 i11 = i19 + 8 | 0;
 i9 = i19 + 4 | 0;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 i13 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i12 >> 2] = i13;
 i12 = __ZNKSt3__16locale9use_facetERNS0_2idE(i12, 30376) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 48 >> 2] & 31](i12, 61569, 61595, i8) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i13) | 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 if (!(HEAP8[i17 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i17 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i17, i1, 0);
 i12 = i17 + 8 | 0;
 i13 = i17 + 1 | 0;
 i1 = (HEAP8[i17 >> 0] & 1) == 0 ? i13 : HEAP32[i12 >> 2] | 0;
 HEAP32[i14 >> 2] = i1;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i9 >> 2] = 0;
 i7 = i17 + 4 | 0;
 i3 = HEAP32[i20 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i2 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i2 = HEAP32[i2 >> 2] | 0;
   if ((i2 | 0) == -1) {
    HEAP32[i20 >> 2] = 0;
    i2 = 0;
    i5 = 1;
   } else {
    i2 = i3;
    i5 = 0;
   }
  } else {
   i2 = 0;
   i5 = 1;
  }
  i3 = HEAP32[i21 >> 2] | 0;
  do if (i3) {
   i4 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i4 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i4 = HEAP32[i4 >> 2] | 0;
   if ((i4 | 0) != -1) if (i5) break; else break L4; else {
    HEAP32[i21 >> 2] = 0;
    i23 = 16;
    break;
   }
  } else i23 = 16; while (0);
  if ((i23 | 0) == 16) {
   i23 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i4 = HEAP8[i17 >> 0] | 0;
  i4 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i7 >> 2] | 0;
  if ((HEAP32[i14 >> 2] | 0) == (i1 + i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i17, i4 << 1, 0);
   if (!(HEAP8[i17 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i17 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i17, i1, 0);
   i1 = (HEAP8[i17 >> 0] & 1) == 0 ? i13 : HEAP32[i12 >> 2] | 0;
   HEAP32[i14 >> 2] = i1 + i4;
  }
  i5 = i2 + 12 | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  i6 = i2 + 16 | 0;
  if ((i4 | 0) == (HEAP32[i6 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i4 = HEAP32[i4 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i4, 16, i1, i14, i9, 0, i18, i10, i11, i8) | 0) break;
  i3 = HEAP32[i5 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 127](i2) | 0;
   i3 = i2;
   continue;
  } else {
   HEAP32[i5 >> 2] = i3 + 4;
   i3 = i2;
   continue;
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i17, (HEAP32[i14 >> 2] | 0) - i1 | 0, 0);
 i13 = (HEAP8[i17 >> 0] & 1) == 0 ? i13 : HEAP32[i12 >> 2] | 0;
 i14 = __ZNSt3__16__clocEv() | 0;
 HEAP32[i15 >> 2] = i16;
 if ((__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z(i13, i14, 62953, i15) | 0) != 1) HEAP32[i22 >> 2] = 4;
 if (i2) {
  i1 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i20 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i23 = 45;
   break;
  } else {
   HEAP32[i21 >> 2] = 0;
   i23 = 43;
   break;
  }
 } else i23 = 43; while (0);
 if ((i23 | 0) == 43 ? i2 : 0) i23 = 45;
 if ((i23 | 0) == 45) HEAP32[i22 >> 2] = HEAP32[i22 >> 2] | 2;
 i23 = HEAP32[i20 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i17);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 STACKTOP = i19;
 return i23 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i11 = i20 + 208 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i2;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i21 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i21 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) {
    i6 = i4;
    break;
   } else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 16;
    break;
   }
  } else i24 = 16; while (0);
  if ((i24 | 0) == 16) {
   i24 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i6 = 0;
  }
  i4 = HEAP8[i18 >> 0] | 0;
  i4 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i4 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
   i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i2 + i4;
  }
  i4 = i3 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i14, i2, i15, i12, i7, i19, i16, i13, i11) | 0) {
   i4 = i6;
   break;
  }
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i4 >> 2] = i1 + 4;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i1 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i1 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i1 >> 2] = i11;
  i1 = i12;
 }
 HEAP16[i17 >> 1] = __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji(i2, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i1, i23);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i21 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i24 = 46;
   break;
  } else {
   HEAP32[i22 >> 2] = 0;
   i24 = 44;
   break;
  }
 } else i24 = 44; while (0);
 if ((i24 | 0) == 44 ? i2 : 0) i24 = 46;
 if ((i24 | 0) == 46) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i11 = i20 + 208 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i2;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i21 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i21 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) {
    i6 = i4;
    break;
   } else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 16;
    break;
   }
  } else i24 = 16; while (0);
  if ((i24 | 0) == 16) {
   i24 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i6 = 0;
  }
  i4 = HEAP8[i18 >> 0] | 0;
  i4 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i4 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
   i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i2 + i4;
  }
  i4 = i3 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i14, i2, i15, i12, i7, i19, i16, i13, i11) | 0) {
   i4 = i6;
   break;
  }
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i4 >> 2] = i1 + 4;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i1 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i1 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i1 >> 2] = i11;
  i1 = i12;
 }
 HEAP32[i17 >> 2] = __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji(i2, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i1, i23);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i21 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i24 = 46;
   break;
  } else {
   HEAP32[i22 >> 2] = 0;
   i24 = 44;
   break;
  }
 } else i24 = 44; while (0);
 if ((i24 | 0) == 44 ? i2 : 0) i24 = 46;
 if ((i24 | 0) == 46) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i11 = i20 + 208 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i2;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i21 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i21 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) {
    i6 = i4;
    break;
   } else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 16;
    break;
   }
  } else i24 = 16; while (0);
  if ((i24 | 0) == 16) {
   i24 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i6 = 0;
  }
  i4 = HEAP8[i18 >> 0] | 0;
  i4 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i4 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
   i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i2 + i4;
  }
  i4 = i3 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i14, i2, i15, i12, i7, i19, i16, i13, i11) | 0) {
   i4 = i6;
   break;
  }
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i4 >> 2] = i1 + 4;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i1 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i1 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i1 >> 2] = i11;
  i1 = i12;
 }
 HEAP32[i17 >> 2] = __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji(i2, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i1, i23);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i21 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i24 = 46;
   break;
  } else {
   HEAP32[i22 >> 2] = 0;
   i24 = 44;
   break;
  }
 } else i24 = 44; while (0);
 if ((i24 | 0) == 44 ? i2 : 0) i24 = 46;
 if ((i24 | 0) == 46) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i11 = i20 + 208 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i2;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i21 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i21 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) {
    i6 = i4;
    break;
   } else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 16;
    break;
   }
  } else i24 = 16; while (0);
  if ((i24 | 0) == 16) {
   i24 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i6 = 0;
  }
  i4 = HEAP8[i18 >> 0] | 0;
  i4 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i4 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
   i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i2 + i4;
  }
  i4 = i3 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i14, i2, i15, i12, i7, i19, i16, i13, i11) | 0) {
   i4 = i6;
   break;
  }
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i4 >> 2] = i1 + 4;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i1 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i1 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i1 >> 2] = i11;
  i1 = i12;
 }
 HEAP32[i17 >> 2] = __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji(i2, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i1, i23);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i21 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i24 = 46;
   break;
  } else {
   HEAP32[i22 >> 2] = 0;
   i24 = 44;
   break;
  }
 } else i24 = 44; while (0);
 if ((i24 | 0) == 44 ? i2 : 0) i24 = 46;
 if ((i24 | 0) == 46) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i12, i13, i14, i10, i6) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i10 = i10 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0;
 i1 = HEAP32[i12 >> 2] | 0;
 do if (i1) {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i12 >> 2] = 0;
   i3 = 1;
   break;
  } else {
   i3 = (HEAP32[i12 >> 2] | 0) == 0;
   break;
  }
 } else i3 = 1; while (0);
 i2 = HEAP32[i13 >> 2] | 0;
 do if (i2) {
  i1 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i3) {
   i11 = 17;
   break;
  } else {
   i11 = 16;
   break;
  } else {
   HEAP32[i13 >> 2] = 0;
   i11 = 14;
   break;
  }
 } else i11 = 14; while (0);
 if ((i11 | 0) == 14) if (i3) i11 = 16; else {
  i2 = 0;
  i11 = 17;
 }
 L22 : do if ((i11 | 0) == 16) {
  HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 6;
  i1 = 0;
 } else if ((i11 | 0) == 17) {
  i1 = HEAP32[i12 >> 2] | 0;
  i3 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i3 >> 2] | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] & 63](i10, 2048, i1) | 0)) {
   HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 4;
   i1 = 0;
   break;
  }
  i1 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 52 >> 2] & 63](i10, i1, 0) | 0) << 24 >> 24;
  i3 = HEAP32[i12 >> 2] | 0;
  i4 = i3 + 12 | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   i8 = i6;
   i7 = i2;
   i4 = i2;
  } else {
   HEAP32[i4 >> 2] = i5 + 4;
   i8 = i6;
   i7 = i2;
   i4 = i2;
  }
  while (1) {
   i1 = i1 + -48 | 0;
   i9 = i8 + -1 | 0;
   i2 = HEAP32[i12 >> 2] | 0;
   do if (i2) {
    i3 = HEAP32[i2 + 12 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAP32[i3 >> 2] | 0;
    if ((i2 | 0) == -1) {
     HEAP32[i12 >> 2] = 0;
     i5 = 1;
     break;
    } else {
     i5 = (HEAP32[i12 >> 2] | 0) == 0;
     break;
    }
   } else i5 = 1; while (0);
   do if (i4) {
    i2 = HEAP32[i4 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i2 = HEAP32[i2 >> 2] | 0;
    if ((i2 | 0) == -1) {
     HEAP32[i13 >> 2] = 0;
     i4 = 0;
     i6 = 0;
     i2 = 1;
     break;
    } else {
     i4 = i7;
     i6 = i7;
     i2 = (i7 | 0) == 0;
     break;
    }
   } else {
    i4 = i7;
    i6 = 0;
    i2 = 1;
   } while (0);
   i3 = HEAP32[i12 >> 2] | 0;
   if (!((i8 | 0) > 1 & (i5 ^ i2))) break;
   i2 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i2 = HEAP32[i2 >> 2] | 0;
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] & 63](i10, 2048, i2) | 0)) break L22;
   i1 = ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 52 >> 2] & 63](i10, i2, 0) | 0) << 24 >> 24) + (i1 * 10 | 0) | 0;
   i2 = HEAP32[i12 >> 2] | 0;
   i3 = i2 + 12 | 0;
   i5 = HEAP32[i3 >> 2] | 0;
   if ((i5 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) {
    FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 127](i2) | 0;
    i8 = i9;
    i7 = i4;
    i4 = i6;
    continue;
   } else {
    HEAP32[i3 >> 2] = i5 + 4;
    i8 = i9;
    i7 = i4;
    i4 = i6;
    continue;
   }
  }
  do if (i3) {
   i2 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i2 = HEAP32[i2 >> 2] | 0;
   if ((i2 | 0) == -1) {
    HEAP32[i12 >> 2] = 0;
    i3 = 1;
    break;
   } else {
    i3 = (HEAP32[i12 >> 2] | 0) == 0;
    break;
   }
  } else i3 = 1; while (0);
  do if (i4) {
   i2 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i2 = HEAP32[i2 >> 2] | 0;
   if ((i2 | 0) != -1) if (i3) break L22; else break; else {
    HEAP32[i13 >> 2] = 0;
    i11 = 60;
    break;
   }
  } else i11 = 60; while (0);
  if ((i11 | 0) == 60 ? !i3 : 0) break;
  HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 2;
 } while (0);
 return i1 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i19) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i19 = i19 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i26 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i12 = i22 + 208 | 0;
 i3 = i22 + 203 | 0;
 i4 = i22 + 202 | 0;
 i21 = i22 + 24 | 0;
 i20 = i22 + 12 | 0;
 i17 = i22 + 8 | 0;
 i18 = i22 + 40 | 0;
 i15 = i22 + 4 | 0;
 i14 = i22;
 i16 = i22 + 201 | 0;
 i13 = i22 + 200 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i21, i2, i12, i3, i4);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i9 = i20 + 8 | 0;
 i10 = i20 + 1 | 0;
 i6 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
 HEAP32[i17 >> 2] = i6;
 HEAP32[i15 >> 2] = i18;
 HEAP32[i14 >> 2] = 0;
 HEAP8[i16 >> 0] = 1;
 HEAP8[i13 >> 0] = 69;
 i11 = i20 + 4 | 0;
 i8 = HEAP8[i3 >> 0] | 0;
 i7 = HEAP8[i4 >> 0] | 0;
 i1 = HEAP32[i23 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i23 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i24 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i24 >> 2] = 0;
    i26 = 13;
    break;
   }
  } else i26 = 13; while (0);
  if ((i26 | 0) == 13) {
   i26 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i20 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i11 >> 2] | 0;
  if ((HEAP32[i17 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if (!(HEAP8[i20 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i2, 0);
   i3 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
   HEAP32[i17 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i2 & 255, i16, i13, i3, i17, i8, i7, i21, i18, i15, i14, i12) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i13 = HEAP8[i21 >> 0] | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 if (!((HEAP8[i16 >> 0] | 0) == 0 ? 1 : (((i13 & 1) == 0 ? (i13 & 255) >>> 1 : HEAP32[i21 + 4 >> 2] | 0) | 0) == 0) ? (i2 - i18 | 0) < 160 : 0) {
  i14 = HEAP32[i14 >> 2] | 0;
  i16 = i2 + 4 | 0;
  HEAP32[i15 >> 2] = i16;
  HEAP32[i2 >> 2] = i14;
  i2 = i16;
 }
 HEAPF32[i19 >> 2] = +__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj(i3, HEAP32[i17 >> 2] | 0, i25);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i21, i18, i2, i25);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i23 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i24 >> 2] = 0;
   i26 = 38;
   break;
  }
  if (!i1) i26 = 39;
 } else i26 = 38; while (0);
 if ((i26 | 0) == 38 ? i1 : 0) i26 = 39;
 if ((i26 | 0) == 39) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i26 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 STACKTOP = i22;
 return i26 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i19) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i19 = i19 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i26 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i12 = i22 + 208 | 0;
 i3 = i22 + 203 | 0;
 i4 = i22 + 202 | 0;
 i21 = i22 + 24 | 0;
 i20 = i22 + 12 | 0;
 i17 = i22 + 8 | 0;
 i18 = i22 + 40 | 0;
 i15 = i22 + 4 | 0;
 i14 = i22;
 i16 = i22 + 201 | 0;
 i13 = i22 + 200 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i21, i2, i12, i3, i4);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i9 = i20 + 8 | 0;
 i10 = i20 + 1 | 0;
 i6 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
 HEAP32[i17 >> 2] = i6;
 HEAP32[i15 >> 2] = i18;
 HEAP32[i14 >> 2] = 0;
 HEAP8[i16 >> 0] = 1;
 HEAP8[i13 >> 0] = 69;
 i11 = i20 + 4 | 0;
 i8 = HEAP8[i3 >> 0] | 0;
 i7 = HEAP8[i4 >> 0] | 0;
 i1 = HEAP32[i23 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i23 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i24 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i24 >> 2] = 0;
    i26 = 13;
    break;
   }
  } else i26 = 13; while (0);
  if ((i26 | 0) == 13) {
   i26 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i20 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i11 >> 2] | 0;
  if ((HEAP32[i17 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if (!(HEAP8[i20 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i2, 0);
   i3 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
   HEAP32[i17 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i2 & 255, i16, i13, i3, i17, i8, i7, i21, i18, i15, i14, i12) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i13 = HEAP8[i21 >> 0] | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 if (!((HEAP8[i16 >> 0] | 0) == 0 ? 1 : (((i13 & 1) == 0 ? (i13 & 255) >>> 1 : HEAP32[i21 + 4 >> 2] | 0) | 0) == 0) ? (i2 - i18 | 0) < 160 : 0) {
  i14 = HEAP32[i14 >> 2] | 0;
  i16 = i2 + 4 | 0;
  HEAP32[i15 >> 2] = i16;
  HEAP32[i2 >> 2] = i14;
  i2 = i16;
 }
 HEAPF64[i19 >> 3] = +__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj(i3, HEAP32[i17 >> 2] | 0, i25);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i21, i18, i2, i25);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i23 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i24 >> 2] = 0;
   i26 = 38;
   break;
  }
  if (!i1) i26 = 39;
 } else i26 = 38; while (0);
 if ((i26 | 0) == 38 ? i1 : 0) i26 = 39;
 if ((i26 | 0) == 39) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i26 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 STACKTOP = i22;
 return i26 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i19) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i19 = i19 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i26 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i12 = i22 + 208 | 0;
 i3 = i22 + 203 | 0;
 i4 = i22 + 202 | 0;
 i21 = i22 + 24 | 0;
 i20 = i22 + 12 | 0;
 i17 = i22 + 8 | 0;
 i18 = i22 + 40 | 0;
 i15 = i22 + 4 | 0;
 i14 = i22;
 i16 = i22 + 201 | 0;
 i13 = i22 + 200 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i21, i2, i12, i3, i4);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i9 = i20 + 8 | 0;
 i10 = i20 + 1 | 0;
 i6 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
 HEAP32[i17 >> 2] = i6;
 HEAP32[i15 >> 2] = i18;
 HEAP32[i14 >> 2] = 0;
 HEAP8[i16 >> 0] = 1;
 HEAP8[i13 >> 0] = 69;
 i11 = i20 + 4 | 0;
 i8 = HEAP8[i3 >> 0] | 0;
 i7 = HEAP8[i4 >> 0] | 0;
 i1 = HEAP32[i23 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i23 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i24 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i24 >> 2] = 0;
    i26 = 13;
    break;
   }
  } else i26 = 13; while (0);
  if ((i26 | 0) == 13) {
   i26 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i20 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i11 >> 2] | 0;
  if ((HEAP32[i17 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if (!(HEAP8[i20 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i2, 0);
   i3 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
   HEAP32[i17 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i2 & 255, i16, i13, i3, i17, i8, i7, i21, i18, i15, i14, i12) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i13 = HEAP8[i21 >> 0] | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 if (!((HEAP8[i16 >> 0] | 0) == 0 ? 1 : (((i13 & 1) == 0 ? (i13 & 255) >>> 1 : HEAP32[i21 + 4 >> 2] | 0) | 0) == 0) ? (i2 - i18 | 0) < 160 : 0) {
  i14 = HEAP32[i14 >> 2] | 0;
  i16 = i2 + 4 | 0;
  HEAP32[i15 >> 2] = i16;
  HEAP32[i2 >> 2] = i14;
  i2 = i16;
 }
 HEAPF64[i19 >> 3] = +__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj(i3, HEAP32[i17 >> 2] | 0, i25);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i21, i18, i2, i25);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i23 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i24 >> 2] = 0;
   i26 = 38;
   break;
  }
  if (!i1) i26 = 39;
 } else i26 = 38; while (0);
 if ((i26 | 0) == 38 ? i1 : 0) i26 = 39;
 if ((i26 | 0) == 39) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i26 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 STACKTOP = i22;
 return i26 | 0;
}

function _SDL_SendTouch(i7, i9, i15, i16, i6, d12, d13, d11) {
 i7 = i7 | 0;
 i9 = i9 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 i6 = i6 | 0;
 d12 = +d12;
 d13 = +d13;
 d11 = +d11;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0, i10 = 0, i14 = 0, i17 = 0, i18 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i5 = i18 + 56 | 0;
 i10 = i18;
 i4 = HEAP32[3034] | 0;
 L1 : do if ((i4 | 0) > 0) {
  i2 = HEAP32[3035] | 0;
  i1 = 0;
  while (1) {
   i3 = HEAP32[i2 + (i1 << 2) >> 2] | 0;
   i14 = i3;
   if ((HEAP32[i14 >> 2] | 0) == (i7 | 0) ? (HEAP32[i14 + 4 >> 2] | 0) == (i9 | 0) : 0) {
    i8 = i3;
    break;
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i4 | 0)) break L1;
  }
  if ((i1 | 0) > -1 & (i1 | 0) < (i4 | 0)) {
   if (!i8) {
    i17 = -1;
    STACKTOP = i18;
    return i17 | 0;
   }
   i14 = i8 + 8 | 0;
   i2 = HEAP32[i14 >> 2] | 0;
   L11 : do if ((i2 | 0) > 0) {
    i4 = HEAP32[i8 + 16 >> 2] | 0;
    i1 = 0;
    while (1) {
     i3 = HEAP32[i4 + (i1 << 2) >> 2] | 0;
     i5 = i3;
     if ((HEAP32[i5 >> 2] | 0) == (i15 | 0) ? (HEAP32[i5 + 4 >> 2] | 0) == (i16 | 0) : 0) break;
     i1 = i1 + 1 | 0;
     if ((i1 | 0) >= (i2 | 0)) {
      i3 = 0;
      break L11;
     }
    }
    i3 = (i1 | 0) > -1 & (i1 | 0) < (i2 | 0) ? i3 : 0;
   } else i3 = 0; while (0);
   i1 = (i3 | 0) != 0;
   if (!i6) {
    if (!i1) {
     i17 = 0;
     STACKTOP = i18;
     return i17 | 0;
    }
    if ((_SDL_EventState(1793, -1) | 0) << 24 >> 24 == 1) {
     HEAP32[i10 >> 2] = 1793;
     i1 = i10 + 8 | 0;
     HEAP32[i1 >> 2] = i7;
     HEAP32[i1 + 4 >> 2] = i9;
     i1 = i10 + 16 | 0;
     HEAP32[i1 >> 2] = i15;
     HEAP32[i1 + 4 >> 2] = i16;
     HEAP32[i10 + 24 >> 2] = HEAP32[i3 + 8 >> 2];
     HEAP32[i10 + 28 >> 2] = HEAP32[i3 + 12 >> 2];
     HEAPF32[i10 + 32 >> 2] = 0.0;
     HEAPF32[i10 + 36 >> 2] = 0.0;
     HEAPF32[i10 + 40 >> 2] = d11;
     i1 = (_SDL_PushEvent(i10) | 0) > 0 & 1;
    } else i1 = 0;
    i7 = HEAP32[i14 >> 2] | 0;
    if ((i7 | 0) <= 0) {
     i17 = i1;
     STACKTOP = i18;
     return i17 | 0;
    }
    i5 = i8 + 16 | 0;
    i6 = HEAP32[i5 >> 2] | 0;
    i2 = 0;
    while (1) {
     i4 = i6 + (i2 << 2) | 0;
     i3 = HEAP32[i4 >> 2] | 0;
     i10 = i3;
     if ((HEAP32[i10 >> 2] | 0) == (i15 | 0) ? (HEAP32[i10 + 4 >> 2] | 0) == (i16 | 0) : 0) break;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) >= (i7 | 0)) {
      i17 = 35;
      break;
     }
    }
    if ((i17 | 0) == 35) {
     STACKTOP = i18;
     return i1 | 0;
    }
    if ((i2 | 0) < 0) {
     i17 = i1;
     STACKTOP = i18;
     return i17 | 0;
    }
    i17 = i7 + -1 | 0;
    HEAP32[i14 >> 2] = i17;
    HEAP32[i4 >> 2] = HEAP32[i6 + (i17 << 2) >> 2];
    HEAP32[(HEAP32[i5 >> 2] | 0) + (i17 << 2) >> 2] = i3;
    i17 = i1;
    STACKTOP = i18;
    return i17 | 0;
   }
   if (i1) {
    i17 = 0;
    STACKTOP = i18;
    return i17 | 0;
   }
   i4 = i8 + 12 | 0;
   i3 = i8 + 16 | 0;
   L43 : do if ((i2 | 0) == (HEAP32[i4 >> 2] | 0)) {
    i1 = _SDL_realloc(HEAP32[i3 >> 2] | 0, (i2 << 2) + 4 | 0) | 0;
    do if (i1) {
     HEAP32[i3 >> 2] = i1;
     i1 = _SDL_malloc(24) | 0;
     i2 = HEAP32[i4 >> 2] | 0;
     HEAP32[(HEAP32[i3 >> 2] | 0) + (i2 << 2) >> 2] = i1;
     i1 = HEAP32[i3 >> 2] | 0;
     if (!(HEAP32[i1 + (i2 << 2) >> 2] | 0)) {
      i1 = _SDL_Error(0) | 0;
      break;
     } else {
      HEAP32[i4 >> 2] = i2 + 1;
      i2 = HEAP32[i14 >> 2] | 0;
      i17 = 22;
      break L43;
     }
    } else i1 = _SDL_Error(0) | 0; while (0);
    if ((i1 | 0) < 0) {
     i17 = 0;
     STACKTOP = i18;
     return i17 | 0;
    }
   } else {
    i1 = HEAP32[i3 >> 2] | 0;
    i17 = 22;
   } while (0);
   if ((i17 | 0) == 22) {
    HEAP32[i14 >> 2] = i2 + 1;
    i17 = HEAP32[i1 + (i2 << 2) >> 2] | 0;
    i14 = i17;
    HEAP32[i14 >> 2] = i15;
    HEAP32[i14 + 4 >> 2] = i16;
    HEAPF32[i17 + 8 >> 2] = d12;
    HEAPF32[i17 + 12 >> 2] = d13;
    HEAPF32[i17 + 16 >> 2] = d11;
   }
   if ((_SDL_EventState(1792, -1) | 0) << 24 >> 24 != 1) {
    i17 = 0;
    STACKTOP = i18;
    return i17 | 0;
   }
   HEAP32[i10 >> 2] = 1792;
   i17 = i10 + 8 | 0;
   HEAP32[i17 >> 2] = i7;
   HEAP32[i17 + 4 >> 2] = i9;
   i17 = i10 + 16 | 0;
   HEAP32[i17 >> 2] = i15;
   HEAP32[i17 + 4 >> 2] = i16;
   HEAPF32[i10 + 24 >> 2] = d12;
   HEAPF32[i10 + 28 >> 2] = d13;
   HEAPF32[i10 + 32 >> 2] = 0.0;
   HEAPF32[i10 + 36 >> 2] = 0.0;
   HEAPF32[i10 + 40 >> 2] = d11;
   i17 = (_SDL_PushEvent(i10) | 0) > 0 & 1;
   STACKTOP = i18;
   return i17 | 0;
  }
 } while (0);
 _SDL_SetError(36782, i5) | 0;
 i17 = -1;
 STACKTOP = i18;
 return i17 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i11 = i20 + 202 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i6 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP8[i3 >> 0] | 0;
 i1 = HEAP32[i21 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i21 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 13;
    break;
   }
  } else i24 = 13; while (0);
  if ((i24 | 0) == 13) {
   i24 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i18 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i5 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i2, 0);
   i3 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i2 & 255, i14, i3, i15, i12, i7, i19, i16, i13, i11) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i2 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i2 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i2 >> 2] = i11;
  i2 = i12;
 }
 i15 = __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji(i3, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 HEAP32[i17 >> 2] = i15;
 HEAP32[i17 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i2, i23);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i21 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i22 >> 2] = 0;
   i24 = 38;
   break;
  }
  if (!i1) i24 = 39;
 } else i24 = 38; while (0);
 if ((i24 | 0) == 38 ? i1 : 0) i24 = 39;
 if ((i24 | 0) == 39) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i11 = i20 + 202 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i6 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP8[i3 >> 0] | 0;
 i1 = HEAP32[i21 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i21 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 13;
    break;
   }
  } else i24 = 13; while (0);
  if ((i24 | 0) == 13) {
   i24 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i18 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i5 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i2, 0);
   i3 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i2 & 255, i14, i3, i15, i12, i7, i19, i16, i13, i11) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i2 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i2 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i2 >> 2] = i11;
  i2 = i12;
 }
 i15 = __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji(i3, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 HEAP32[i17 >> 2] = i15;
 HEAP32[i17 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i2, i23);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i21 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i22 >> 2] = 0;
   i24 = 38;
   break;
  }
  if (!i1) i24 = 39;
 } else i24 = 38; while (0);
 if ((i24 | 0) == 38 ? i1 : 0) i24 = 39;
 if ((i24 | 0) == 39) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function _BlitRGBtoRGBSurfaceAlpha(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i8 = HEAP8[i4 + 63 >> 0] | 0;
 i7 = i8 & 255;
 i2 = HEAP32[i4 + 24 >> 2] | 0;
 i3 = HEAP32[i4 + 28 >> 2] | 0;
 i9 = HEAP32[i4 + 16 >> 2] >> 2;
 i10 = HEAP32[i4 + 36 >> 2] >> 2;
 i1 = (i3 | 0) == 0;
 if (i8 << 24 >> 24 == -128) {
  if (i1) return;
  i7 = (i2 + 3 | 0) / 4 | 0;
  i6 = i2 & 3;
  i2 = i3;
  i1 = HEAP32[i4 + 20 >> 2] | 0;
  i3 = HEAP32[i4 >> 2] | 0;
  L6 : while (1) {
   i2 = i2 + -1 | 0;
   switch (i6 | 0) {
   case 0:
    {
     i4 = i7;
     i8 = 5;
     break;
    }
   case 3:
    {
     i4 = i7;
     i8 = 6;
     break;
    }
   case 2:
    {
     i4 = i7;
     i8 = 7;
     break;
    }
   case 1:
    {
     i5 = i1;
     i4 = i7;
     i1 = i3;
     i8 = 8;
     break;
    }
   default:
    i8 = 9;
   }
   while (1) if ((i8 | 0) == 5) {
    i11 = HEAP32[i3 >> 2] | 0;
    i5 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((i5 & 16711422) + (i11 & 16711422) | 0) >>> 1) + (i11 & 65793 & i5) | -16777216;
    i1 = i1 + 4 | 0;
    i3 = i3 + 4 | 0;
    i8 = 6;
    continue;
   } else if ((i8 | 0) == 6) {
    i5 = HEAP32[i3 >> 2] | 0;
    i11 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((i11 & 16711422) + (i5 & 16711422) | 0) >>> 1) + (i5 & 65793 & i11) | -16777216;
    i1 = i1 + 4 | 0;
    i3 = i3 + 4 | 0;
    i8 = 7;
    continue;
   } else if ((i8 | 0) == 7) {
    i11 = HEAP32[i3 >> 2] | 0;
    i5 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((i5 & 16711422) + (i11 & 16711422) | 0) >>> 1) + (i11 & 65793 & i5) | -16777216;
    i5 = i1 + 4 | 0;
    i1 = i3 + 4 | 0;
    i8 = 8;
    continue;
   } else if ((i8 | 0) == 8) {
    i3 = i1 + 4 | 0;
    i8 = HEAP32[i1 >> 2] | 0;
    i11 = HEAP32[i5 >> 2] | 0;
    i1 = i5 + 4 | 0;
    HEAP32[i5 >> 2] = (((i11 & 16711422) + (i8 & 16711422) | 0) >>> 1) + (i8 & 65793 & i11) | -16777216;
    if ((i4 | 0) > 1) {
     i4 = i4 + -1 | 0;
     i8 = 5;
     continue;
    } else {
     i8 = 9;
     continue;
    }
   } else if ((i8 | 0) == 9) if (!i2) break L6; else {
    i1 = i1 + (i10 << 2) | 0;
    i3 = i3 + (i9 << 2) | 0;
    continue L6;
   }
  }
  return;
 } else {
  if (i1) return;
  i6 = (i2 + 3 | 0) / 4 | 0;
  i5 = i2 & 3;
  i1 = HEAP32[i4 + 20 >> 2] | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  L20 : while (1) {
   i3 = i3 + -1 | 0;
   switch (i5 | 0) {
   case 0:
    {
     i4 = i6;
     i8 = 13;
     break;
    }
   case 3:
    {
     i4 = i6;
     i8 = 14;
     break;
    }
   case 2:
    {
     i4 = i6;
     i8 = 15;
     break;
    }
   case 1:
    {
     i4 = i6;
     i8 = 16;
     break;
    }
   default:
    i8 = 17;
   }
   while (1) if ((i8 | 0) == 13) {
    i12 = HEAP32[i2 >> 2] | 0;
    i13 = HEAP32[i1 >> 2] | 0;
    i11 = i13 & 16711935;
    i13 = i13 & 65280;
    HEAP32[i1 >> 2] = ((Math_imul((i12 & 65280) - i13 | 0, i7) | 0) >>> 8) + i13 & 65280 | ((Math_imul((i12 & 16711935) - i11 | 0, i7) | 0) >>> 8) + i11 & 16711935 | -16777216;
    i1 = i1 + 4 | 0;
    i2 = i2 + 4 | 0;
    i8 = 14;
    continue;
   } else if ((i8 | 0) == 14) {
    i12 = HEAP32[i2 >> 2] | 0;
    i11 = HEAP32[i1 >> 2] | 0;
    i13 = i11 & 16711935;
    i11 = i11 & 65280;
    HEAP32[i1 >> 2] = ((Math_imul((i12 & 65280) - i11 | 0, i7) | 0) >>> 8) + i11 & 65280 | ((Math_imul((i12 & 16711935) - i13 | 0, i7) | 0) >>> 8) + i13 & 16711935 | -16777216;
    i1 = i1 + 4 | 0;
    i2 = i2 + 4 | 0;
    i8 = 15;
    continue;
   } else if ((i8 | 0) == 15) {
    i12 = HEAP32[i2 >> 2] | 0;
    i11 = HEAP32[i1 >> 2] | 0;
    i13 = i11 & 16711935;
    i11 = i11 & 65280;
    HEAP32[i1 >> 2] = ((Math_imul((i12 & 65280) - i11 | 0, i7) | 0) >>> 8) + i11 & 65280 | ((Math_imul((i12 & 16711935) - i13 | 0, i7) | 0) >>> 8) + i13 & 16711935 | -16777216;
    i1 = i1 + 4 | 0;
    i2 = i2 + 4 | 0;
    i8 = 16;
    continue;
   } else if ((i8 | 0) == 16) {
    i12 = HEAP32[i2 >> 2] | 0;
    i11 = HEAP32[i1 >> 2] | 0;
    i13 = i11 & 16711935;
    i11 = i11 & 65280;
    HEAP32[i1 >> 2] = ((Math_imul((i12 & 65280) - i11 | 0, i7) | 0) >>> 8) + i11 & 65280 | ((Math_imul((i12 & 16711935) - i13 | 0, i7) | 0) >>> 8) + i13 & 16711935 | -16777216;
    i2 = i2 + 4 | 0;
    i1 = i1 + 4 | 0;
    if ((i4 | 0) > 1) {
     i4 = i4 + -1 | 0;
     i8 = 13;
     continue;
    } else {
     i8 = 17;
     continue;
    }
   } else if ((i8 | 0) == 17) if (!i3) break L20; else {
    i1 = i1 + (i10 << 2) | 0;
    i2 = i2 + (i9 << 2) | 0;
    continue L20;
   }
  }
  return;
 }
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv(i1, i20, i21, i2, i22, i16) {
 i1 = i1 | 0;
 i20 = i20 | 0;
 i21 = i21 | 0;
 i2 = i2 | 0;
 i22 = i22 | 0;
 i16 = i16 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i23 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i15 = i19;
 i8 = i19 + 208 | 0;
 i18 = i19 + 32 | 0;
 i12 = i19 + 28 | 0;
 i17 = i19 + 16 | 0;
 i14 = i19 + 12 | 0;
 i10 = i19 + 48 | 0;
 i11 = i19 + 8 | 0;
 i9 = i19 + 4 | 0;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 i13 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i12 >> 2] = i13;
 i12 = __ZNKSt3__16locale9use_facetERNS0_2idE(i12, 30384) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 32 >> 2] & 31](i12, 61569, 61595, i8) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i13) | 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 if (!(HEAP8[i17 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i17 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i17, i1, 0);
 i12 = i17 + 8 | 0;
 i13 = i17 + 1 | 0;
 i2 = (HEAP8[i17 >> 0] & 1) == 0 ? i13 : HEAP32[i12 >> 2] | 0;
 HEAP32[i14 >> 2] = i2;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i9 >> 2] = 0;
 i7 = i17 + 4 | 0;
 i1 = HEAP32[i20 >> 2] | 0;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i20 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i4 = (i1 | 0) == 0;
  i3 = HEAP32[i21 >> 2] | 0;
  do if (i3) {
   if ((HEAP32[i3 + 12 >> 2] | 0) != (HEAP32[i3 + 16 >> 2] | 0)) if (i4) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) != -1) if (i4) break; else break L4; else {
    HEAP32[i21 >> 2] = 0;
    i23 = 13;
    break;
   }
  } else i23 = 13; while (0);
  if ((i23 | 0) == 13) {
   i23 = 0;
   if (i4) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i4 = HEAP8[i17 >> 0] | 0;
  i4 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i7 >> 2] | 0;
  if ((HEAP32[i14 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i17, i4 << 1, 0);
   if (!(HEAP8[i17 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i17 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i17, i2, 0);
   i2 = (HEAP8[i17 >> 0] & 1) == 0 ? i13 : HEAP32[i12 >> 2] | 0;
   HEAP32[i14 >> 2] = i2 + i4;
  }
  i5 = i1 + 12 | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i4 | 0) == (HEAP32[i6 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i4 = HEAPU8[i4 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i4 & 255, 16, i2, i14, i9, 0, i18, i10, i11, i8) | 0) break;
  i3 = HEAP32[i5 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i3 + 1;
   continue;
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i17, (HEAP32[i14 >> 2] | 0) - i2 | 0, 0);
 i13 = (HEAP8[i17 >> 0] & 1) == 0 ? i13 : HEAP32[i12 >> 2] | 0;
 i14 = __ZNSt3__16__clocEv() | 0;
 HEAP32[i15 >> 2] = i16;
 if ((__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z(i13, i14, 62953, i15) | 0) != 1) HEAP32[i22 >> 2] = 4;
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i20 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i3) {
  if ((HEAP32[i3 + 12 >> 2] | 0) == (HEAP32[i3 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) == -1 : 0) {
   HEAP32[i21 >> 2] = 0;
   i23 = 37;
   break;
  }
  if (!i1) i23 = 38;
 } else i23 = 37; while (0);
 if ((i23 | 0) == 37 ? i1 : 0) i23 = 38;
 if ((i23 | 0) == 38) HEAP32[i22 >> 2] = HEAP32[i22 >> 2] | 2;
 i23 = HEAP32[i20 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i17);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 STACKTOP = i19;
 return i23 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i11 = i20 + 202 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i6 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP8[i3 >> 0] | 0;
 i1 = HEAP32[i21 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i21 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 13;
    break;
   }
  } else i24 = 13; while (0);
  if ((i24 | 0) == 13) {
   i24 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i18 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i5 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i2, 0);
   i3 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i2 & 255, i14, i3, i15, i12, i7, i19, i16, i13, i11) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i2 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i2 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i2 >> 2] = i11;
  i2 = i12;
 }
 HEAP16[i17 >> 1] = __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji(i3, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i2, i23);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i21 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i22 >> 2] = 0;
   i24 = 38;
   break;
  }
  if (!i1) i24 = 39;
 } else i24 = 38; while (0);
 if ((i24 | 0) == 38 ? i1 : 0) i24 = 39;
 if ((i24 | 0) == 39) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i11 = i20 + 202 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i6 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP8[i3 >> 0] | 0;
 i1 = HEAP32[i21 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i21 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 13;
    break;
   }
  } else i24 = 13; while (0);
  if ((i24 | 0) == 13) {
   i24 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i18 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i5 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i2, 0);
   i3 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i2 & 255, i14, i3, i15, i12, i7, i19, i16, i13, i11) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i2 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i2 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i2 >> 2] = i11;
  i2 = i12;
 }
 HEAP32[i17 >> 2] = __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji(i3, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i2, i23);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i21 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i22 >> 2] = 0;
   i24 = 38;
   break;
  }
  if (!i1) i24 = 39;
 } else i24 = 38; while (0);
 if ((i24 | 0) == 38 ? i1 : 0) i24 = 39;
 if ((i24 | 0) == 39) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i11 = i20 + 202 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i6 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP8[i3 >> 0] | 0;
 i1 = HEAP32[i21 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i21 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 13;
    break;
   }
  } else i24 = 13; while (0);
  if ((i24 | 0) == 13) {
   i24 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i18 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i5 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i2, 0);
   i3 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i2 & 255, i14, i3, i15, i12, i7, i19, i16, i13, i11) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i2 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i2 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i2 >> 2] = i11;
  i2 = i12;
 }
 HEAP32[i17 >> 2] = __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji(i3, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i2, i23);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i21 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i22 >> 2] = 0;
   i24 = 38;
   break;
  }
  if (!i1) i24 = 39;
 } else i24 = 38; while (0);
 if ((i24 | 0) == 38 ? i1 : 0) i24 = 39;
 if ((i24 | 0) == 39) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i11 = i20 + 202 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i6 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP8[i3 >> 0] | 0;
 i1 = HEAP32[i21 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i21 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 13;
    break;
   }
  } else i24 = 13; while (0);
  if ((i24 | 0) == 13) {
   i24 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i18 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i5 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i2, 0);
   i3 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i2 & 255, i14, i3, i15, i12, i7, i19, i16, i13, i11) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i2 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i2 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i2 >> 2] = i11;
  i2 = i12;
 }
 HEAP32[i17 >> 2] = __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji(i3, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i2, i23);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i21 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i22 >> 2] = 0;
   i24 = 38;
   break;
  }
  if (!i1) i24 = 39;
 } else i24 = 38; while (0);
 if ((i24 | 0) == 38 ? i1 : 0) i24 = 39;
 if ((i24 | 0) == 39) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i12, i14, i15, i11, i6) {
 i12 = i12 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 i11 = i11 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0;
 i1 = HEAP32[i12 >> 2] | 0;
 do if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
   HEAP32[i12 >> 2] = 0;
   i1 = 0;
   break;
  } else {
   i1 = HEAP32[i12 >> 2] | 0;
   break;
  }
 } else i1 = 0; while (0);
 i2 = (i1 | 0) == 0;
 i1 = HEAP32[i14 >> 2] | 0;
 do if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i14 >> 2] = 0;
   i13 = 11;
   break;
  }
  if (i2) i13 = 13; else i13 = 12;
 } else i13 = 11; while (0);
 if ((i13 | 0) == 11) if (i2) i13 = 12; else {
  i1 = 0;
  i13 = 13;
 }
 L16 : do if ((i13 | 0) == 12) {
  HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | 6;
  i1 = 0;
 } else if ((i13 | 0) == 13) {
  i2 = HEAP32[i12 >> 2] | 0;
  i3 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAPU8[i3 >> 0] | 0;
  i3 = i2 & 255;
  if (i3 << 24 >> 24 > -1 ? (i10 = i11 + 8 | 0, (HEAP16[(HEAP32[i10 >> 2] | 0) + (i2 << 24 >> 24 << 1) >> 1] & 2048) != 0) : 0) {
   i5 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] & 63](i11, i3, 0) | 0) << 24 >> 24;
   i2 = HEAP32[i12 >> 2] | 0;
   i3 = i2 + 12 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) {
    FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 127](i2) | 0;
    i8 = i6;
    i7 = i1;
    i6 = i1;
    i1 = i5;
   } else {
    HEAP32[i3 >> 2] = i4 + 1;
    i8 = i6;
    i7 = i1;
    i6 = i1;
    i1 = i5;
   }
   while (1) {
    i1 = i1 + -48 | 0;
    i9 = i8 + -1 | 0;
    i2 = HEAP32[i12 >> 2] | 0;
    do if (i2) {
     if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1) {
      HEAP32[i12 >> 2] = 0;
      i2 = 0;
      break;
     } else {
      i2 = HEAP32[i12 >> 2] | 0;
      break;
     }
    } else i2 = 0; while (0);
    i4 = (i2 | 0) == 0;
    if (i6) if ((HEAP32[i6 + 12 >> 2] | 0) == (HEAP32[i6 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0) == -1) {
     HEAP32[i14 >> 2] = 0;
     i3 = 0;
     i6 = 0;
    } else {
     i3 = i7;
     i6 = i7;
    } else i3 = i7; else {
     i3 = i7;
     i6 = 0;
    }
    i2 = HEAP32[i12 >> 2] | 0;
    if (!((i8 | 0) > 1 & (i4 ^ (i6 | 0) == 0))) break;
    i4 = HEAP32[i2 + 12 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAPU8[i4 >> 0] | 0;
    i4 = i2 & 255;
    if (i4 << 24 >> 24 <= -1) break L16;
    if (!(HEAP16[(HEAP32[i10 >> 2] | 0) + (i2 << 24 >> 24 << 1) >> 1] & 2048)) break L16;
    i1 = ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] & 63](i11, i4, 0) | 0) << 24 >> 24) + (i1 * 10 | 0) | 0;
    i2 = HEAP32[i12 >> 2] | 0;
    i4 = i2 + 12 | 0;
    i5 = HEAP32[i4 >> 2] | 0;
    if ((i5 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 127](i2) | 0;
     i8 = i9;
     i7 = i3;
     continue;
    } else {
     HEAP32[i4 >> 2] = i5 + 1;
     i8 = i9;
     i7 = i3;
     continue;
    }
   }
   do if (i2) {
    if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1) {
     HEAP32[i12 >> 2] = 0;
     i2 = 0;
     break;
    } else {
     i2 = HEAP32[i12 >> 2] | 0;
     break;
    }
   } else i2 = 0; while (0);
   i2 = (i2 | 0) == 0;
   do if (i3) {
    if ((HEAP32[i3 + 12 >> 2] | 0) == (HEAP32[i3 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) == -1 : 0) {
     HEAP32[i14 >> 2] = 0;
     i13 = 50;
     break;
    }
    if (i2) break L16;
   } else i13 = 50; while (0);
   if ((i13 | 0) == 50 ? !i2 : 0) break;
   HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | 2;
   break;
  }
  HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | 4;
  i1 = 0;
 } while (0);
 return i1 | 0;
}

function _Blit1to1(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = HEAP32[i1 + 24 >> 2] | 0;
 i12 = HEAP32[i1 + 28 >> 2] | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i9 = HEAP32[i1 + 16 >> 2] | 0;
 i7 = HEAP32[i1 + 20 >> 2] | 0;
 i10 = HEAP32[i1 + 36 >> 2] | 0;
 i11 = HEAP32[i1 + 48 >> 2] | 0;
 i1 = i12 + -1 | 0;
 if (!i12) return;
 i12 = (i3 + 7 | 0) / 8 | 0;
 i8 = i3 & 7;
 switch (i8 | 0) {
 case 0:
  {
   i6 = i9 + 8 | 0;
   i5 = i10 + 8 | 0;
   i4 = i1;
   i1 = i7;
   while (1) {
    i3 = i12;
    while (1) {
     HEAP8[i1 >> 0] = HEAP8[i11 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0;
     HEAP8[i1 + 1 >> 0] = HEAP8[i11 + (HEAPU8[i2 + 1 >> 0] | 0) >> 0] | 0;
     HEAP8[i1 + 2 >> 0] = HEAP8[i11 + (HEAPU8[i2 + 2 >> 0] | 0) >> 0] | 0;
     HEAP8[i1 + 3 >> 0] = HEAP8[i11 + (HEAPU8[i2 + 3 >> 0] | 0) >> 0] | 0;
     HEAP8[i1 + 4 >> 0] = HEAP8[i11 + (HEAPU8[i2 + 4 >> 0] | 0) >> 0] | 0;
     HEAP8[i1 + 5 >> 0] = HEAP8[i11 + (HEAPU8[i2 + 5 >> 0] | 0) >> 0] | 0;
     HEAP8[i1 + 6 >> 0] = HEAP8[i11 + (HEAPU8[i2 + 6 >> 0] | 0) >> 0] | 0;
     HEAP8[i1 + 7 >> 0] = HEAP8[i11 + (HEAPU8[i2 + 7 >> 0] | 0) >> 0] | 0;
     if ((i3 | 0) > 1) {
      i1 = i1 + 8 | 0;
      i3 = i3 + -1 | 0;
      i2 = i2 + 8 | 0;
     } else break;
    }
    if (!i4) break; else {
     i4 = i4 + -1 | 0;
     i1 = i1 + i5 | 0;
     i2 = i2 + i6 | 0;
    }
   }
   return;
  }
 case 7:
  {
   i6 = i9 + 7 | 0;
   i5 = i10 + 7 | 0;
   i4 = i1;
   i1 = i7;
   while (1) {
    i3 = i12;
    while (1) {
     HEAP8[i1 >> 0] = HEAP8[i11 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0;
     HEAP8[i1 + 1 >> 0] = HEAP8[i11 + (HEAPU8[i2 + 1 >> 0] | 0) >> 0] | 0;
     HEAP8[i1 + 2 >> 0] = HEAP8[i11 + (HEAPU8[i2 + 2 >> 0] | 0) >> 0] | 0;
     HEAP8[i1 + 3 >> 0] = HEAP8[i11 + (HEAPU8[i2 + 3 >> 0] | 0) >> 0] | 0;
     HEAP8[i1 + 4 >> 0] = HEAP8[i11 + (HEAPU8[i2 + 4 >> 0] | 0) >> 0] | 0;
     HEAP8[i1 + 5 >> 0] = HEAP8[i11 + (HEAPU8[i2 + 5 >> 0] | 0) >> 0] | 0;
     HEAP8[i1 + 6 >> 0] = HEAP8[i11 + (HEAPU8[i2 + 6 >> 0] | 0) >> 0] | 0;
     if ((i3 | 0) <= 1) break;
     HEAP8[i1 + 7 >> 0] = HEAP8[i11 + (HEAPU8[i2 + 7 >> 0] | 0) >> 0] | 0;
     i1 = i1 + 8 | 0;
     i3 = i3 + -1 | 0;
     i2 = i2 + 8 | 0;
    }
    if (!i4) break; else {
     i4 = i4 + -1 | 0;
     i1 = i1 + i5 | 0;
     i2 = i2 + i6 | 0;
    }
   }
   return;
  }
 default:
  {
   i6 = i1;
   i1 = i7;
   L5 : while (1) {
    switch (i8 | 0) {
    case 1:
     {
      i5 = i12;
      i4 = 19;
      break;
     }
    case 2:
     {
      i3 = i12;
      i4 = 18;
      break;
     }
    case 6:
     {
      i3 = i12;
      i4 = 14;
      break;
     }
    case 5:
     {
      i3 = i12;
      i4 = 15;
      break;
     }
    case 4:
     {
      i3 = i12;
      i4 = 16;
      break;
     }
    case 3:
     {
      i3 = i12;
      i4 = 17;
      break;
     }
    default:
     i4 = 20;
    }
    while (1) if ((i4 | 0) == 14) {
     HEAP8[i1 >> 0] = HEAP8[i11 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0;
     i1 = i1 + 1 | 0;
     i2 = i2 + 1 | 0;
     i4 = 15;
     continue;
    } else if ((i4 | 0) == 15) {
     HEAP8[i1 >> 0] = HEAP8[i11 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0;
     i1 = i1 + 1 | 0;
     i2 = i2 + 1 | 0;
     i4 = 16;
     continue;
    } else if ((i4 | 0) == 16) {
     HEAP8[i1 >> 0] = HEAP8[i11 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0;
     i1 = i1 + 1 | 0;
     i2 = i2 + 1 | 0;
     i4 = 17;
     continue;
    } else if ((i4 | 0) == 17) {
     HEAP8[i1 >> 0] = HEAP8[i11 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0;
     i1 = i1 + 1 | 0;
     i2 = i2 + 1 | 0;
     i4 = 18;
     continue;
    } else if ((i4 | 0) == 18) {
     HEAP8[i1 >> 0] = HEAP8[i11 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0;
     i1 = i1 + 1 | 0;
     i5 = i3;
     i2 = i2 + 1 | 0;
     i4 = 19;
     continue;
    } else if ((i4 | 0) == 19) {
     HEAP8[i1 >> 0] = HEAP8[i11 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0;
     i3 = i1 + 1 | 0;
     i4 = i2 + 1 | 0;
     if ((i5 | 0) <= 1) {
      i1 = i3;
      i2 = i4;
      i4 = 20;
      continue;
     }
     HEAP8[i3 >> 0] = HEAP8[i11 + (HEAPU8[i4 >> 0] | 0) >> 0] | 0;
     HEAP8[i1 + 2 >> 0] = HEAP8[i11 + (HEAPU8[i2 + 2 >> 0] | 0) >> 0] | 0;
     i1 = i1 + 3 | 0;
     i3 = i5 + -1 | 0;
     i2 = i2 + 3 | 0;
     i4 = 14;
     continue;
    } else if ((i4 | 0) == 20) if (!i6) break L5; else {
     i6 = i6 + -1 | 0;
     i1 = i1 + i10 | 0;
     i2 = i2 + i9 | 0;
     continue L5;
    }
   }
   return;
  }
 }
}

function __ZNSt3__16locale5__impC2Ej(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[i4 + 4 >> 2] = i1 + -1;
 HEAP32[i4 >> 2] = 30360;
 i2 = i4 + 8 | 0;
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej(i2, 28);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i4 + 144 | 0, 62956, 1);
 i2 = HEAP32[i2 >> 2] | 0;
 i3 = i4 + 12 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) != (i2 | 0)) {
  do i1 = i1 + -4 | 0; while ((i1 | 0) != (i2 | 0));
  HEAP32[i3 >> 2] = i1;
 }
 HEAP32[557] = 0;
 HEAP32[556] = 29288;
 __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_(i4, 2224);
 HEAP32[559] = 0;
 HEAP32[558] = 29328;
 __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_(i4, 2232);
 __ZNSt3__15ctypeIcEC2EPKtbj(2240, 0, 0, 1);
 __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_(i4, 2240);
 HEAP32[565] = 0;
 HEAP32[564] = 30648;
 __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_(i4, 2256);
 HEAP32[567] = 0;
 HEAP32[566] = 30716;
 __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_(i4, 2264);
 HEAP32[569] = 0;
 HEAP32[568] = 30468;
 HEAP32[570] = __ZNSt3__16__clocEv() | 0;
 __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_(i4, 2272);
 HEAP32[573] = 0;
 HEAP32[572] = 30764;
 __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_(i4, 2288);
 HEAP32[575] = 0;
 HEAP32[574] = 30812;
 __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_(i4, 2296);
 __ZNSt3__18numpunctIcEC2Ej(2304, 1);
 __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_(i4, 2304);
 __ZNSt3__18numpunctIwEC2Ej(2328, 1);
 __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_(i4, 2328);
 HEAP32[591] = 0;
 HEAP32[590] = 29368;
 __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i4, 2360);
 HEAP32[593] = 0;
 HEAP32[592] = 29440;
 __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i4, 2368);
 HEAP32[595] = 0;
 HEAP32[594] = 29512;
 __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i4, 2376);
 HEAP32[597] = 0;
 HEAP32[596] = 29572;
 __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i4, 2384);
 HEAP32[599] = 0;
 HEAP32[598] = 29880;
 __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_(i4, 2392);
 HEAP32[601] = 0;
 HEAP32[600] = 29944;
 __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_(i4, 2400);
 HEAP32[603] = 0;
 HEAP32[602] = 30008;
 __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_(i4, 2408);
 HEAP32[605] = 0;
 HEAP32[604] = 30072;
 __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_(i4, 2416);
 HEAP32[607] = 0;
 HEAP32[606] = 30136;
 __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i4, 2424);
 HEAP32[609] = 0;
 HEAP32[608] = 30172;
 __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i4, 2432);
 HEAP32[611] = 0;
 HEAP32[610] = 30208;
 __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i4, 2440);
 HEAP32[613] = 0;
 HEAP32[612] = 30244;
 __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i4, 2448);
 HEAP32[615] = 0;
 HEAP32[614] = 29632;
 HEAP32[616] = 29680;
 __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i4, 2456);
 HEAP32[619] = 0;
 HEAP32[618] = 29724;
 HEAP32[620] = 29772;
 __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i4, 2472);
 HEAP32[623] = 0;
 HEAP32[622] = 30628;
 HEAP32[624] = __ZNSt3__16__clocEv() | 0;
 HEAP32[622] = 29816;
 __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i4, 2488);
 HEAP32[627] = 0;
 HEAP32[626] = 30628;
 HEAP32[628] = __ZNSt3__16__clocEv() | 0;
 HEAP32[626] = 29848;
 __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i4, 2504);
 HEAP32[631] = 0;
 HEAP32[630] = 30280;
 __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_(i4, 2520);
 HEAP32[633] = 0;
 HEAP32[632] = 30320;
 __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_(i4, 2528);
 return;
}

function _mbsrtowcs(i5, i10, i1, i3) {
 i5 = i5 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = HEAP32[i10 >> 2] | 0;
 if ((i3 | 0) != 0 ? (i4 = HEAP32[i3 >> 2] | 0, (i4 | 0) != 0) : 0) if (!i5) {
  i3 = i1;
  i6 = i2;
  i9 = 16;
 } else {
  HEAP32[i3 >> 2] = 0;
  i8 = i5;
  i3 = i1;
  i7 = i4;
  i9 = 37;
 } else if (!i5) {
  i3 = i1;
  i9 = 7;
 } else {
  i4 = i5;
  i3 = i1;
  i9 = 6;
 }
 L7 : while (1) if ((i9 | 0) == 6) {
  if (!i3) {
   i9 = 26;
   break;
  } else i5 = i4;
  while (1) {
   i4 = HEAP8[i2 >> 0] | 0;
   do if (((i4 & 255) + -1 | 0) >>> 0 < 127 ? i3 >>> 0 > 4 & (i2 & 3 | 0) == 0 : 0) {
    i6 = i2;
    while (1) {
     i2 = HEAP32[i6 >> 2] | 0;
     if ((i2 + -16843009 | i2) & -2139062144) {
      i4 = i2;
      i2 = i6;
      i9 = 32;
      break;
     }
     HEAP32[i5 >> 2] = i2 & 255;
     HEAP32[i5 + 4 >> 2] = HEAPU8[i6 + 1 >> 0];
     HEAP32[i5 + 8 >> 2] = HEAPU8[i6 + 2 >> 0];
     i2 = i6 + 4 | 0;
     i4 = i5 + 16 | 0;
     HEAP32[i5 + 12 >> 2] = HEAPU8[i6 + 3 >> 0];
     i3 = i3 + -4 | 0;
     if (i3 >>> 0 > 4) {
      i5 = i4;
      i6 = i2;
     } else {
      i9 = 31;
      break;
     }
    }
    if ((i9 | 0) == 31) {
     i5 = i4;
     i4 = HEAP8[i2 >> 0] | 0;
     break;
    } else if ((i9 | 0) == 32) {
     i4 = i4 & 255;
     break;
    }
   } while (0);
   i4 = i4 & 255;
   if ((i4 + -1 | 0) >>> 0 >= 127) break;
   i2 = i2 + 1 | 0;
   HEAP32[i5 >> 2] = i4;
   i3 = i3 + -1 | 0;
   if (!i3) {
    i9 = 26;
    break L7;
   } else i5 = i5 + 4 | 0;
  }
  i4 = i4 + -194 | 0;
  if (i4 >>> 0 > 50) {
   i9 = 48;
   break;
  }
  i8 = i5;
  i7 = HEAP32[22936 + (i4 << 2) >> 2] | 0;
  i2 = i2 + 1 | 0;
  i9 = 37;
  continue;
 } else if ((i9 | 0) == 7) {
  i4 = HEAP8[i2 >> 0] | 0;
  if (((i4 & 255) + -1 | 0) >>> 0 < 127 ? (i2 & 3 | 0) == 0 : 0) {
   i4 = HEAP32[i2 >> 2] | 0;
   if (!((i4 + -16843009 | i4) & -2139062144)) do {
    i2 = i2 + 4 | 0;
    i3 = i3 + -4 | 0;
    i4 = HEAP32[i2 >> 2] | 0;
   } while (((i4 + -16843009 | i4) & -2139062144 | 0) == 0);
   i4 = i4 & 255;
  }
  i4 = i4 & 255;
  if ((i4 + -1 | 0) >>> 0 < 127) {
   i3 = i3 + -1 | 0;
   i2 = i2 + 1 | 0;
   i9 = 7;
   continue;
  }
  i4 = i4 + -194 | 0;
  if (i4 >>> 0 > 50) {
   i9 = 48;
   break;
  }
  i4 = HEAP32[22936 + (i4 << 2) >> 2] | 0;
  i6 = i2 + 1 | 0;
  i9 = 16;
  continue;
 } else if ((i9 | 0) == 16) {
  i9 = (HEAPU8[i6 >> 0] | 0) >>> 3;
  if ((i9 + -16 | i9 + (i4 >> 26)) >>> 0 > 7) {
   i9 = 17;
   break;
  }
  i2 = i6 + 1 | 0;
  if (i4 & 33554432) {
   if ((HEAP8[i2 >> 0] & -64) << 24 >> 24 != -128) {
    i9 = 20;
    break;
   }
   i2 = i6 + 2 | 0;
   if (i4 & 524288) {
    if ((HEAP8[i2 >> 0] & -64) << 24 >> 24 != -128) {
     i9 = 23;
     break;
    }
    i2 = i6 + 3 | 0;
   }
  }
  i3 = i3 + -1 | 0;
  i9 = 7;
  continue;
 } else if ((i9 | 0) == 37) {
  i4 = HEAPU8[i2 >> 0] | 0;
  i9 = i4 >>> 3;
  if ((i9 + -16 | i9 + (i7 >> 26)) >>> 0 > 7) {
   i9 = 38;
   break;
  }
  i6 = i2 + 1 | 0;
  i5 = i4 + -128 | i7 << 6;
  if ((i5 | 0) < 0) {
   i4 = HEAPU8[i6 >> 0] | 0;
   if ((i4 & 192 | 0) != 128) {
    i9 = 41;
    break;
   }
   i6 = i2 + 2 | 0;
   i5 = i4 + -128 | i5 << 6;
   if ((i5 | 0) < 0) {
    i4 = HEAPU8[i6 >> 0] | 0;
    if ((i4 & 192 | 0) != 128) {
     i9 = 44;
     break;
    }
    i5 = i4 + -128 | i5 << 6;
    i2 = i2 + 3 | 0;
   } else i2 = i6;
  } else i2 = i6;
  HEAP32[i8 >> 2] = i5;
  i4 = i8 + 4 | 0;
  i3 = i3 + -1 | 0;
  i9 = 6;
  continue;
 }
 if ((i9 | 0) == 17) {
  i2 = i6 + -1 | 0;
  i9 = 47;
 } else if ((i9 | 0) == 20) {
  i2 = i6 + -1 | 0;
  i9 = 47;
 } else if ((i9 | 0) == 23) {
  i2 = i6 + -1 | 0;
  i9 = 47;
 } else if ((i9 | 0) == 26) HEAP32[i10 >> 2] = i2; else if ((i9 | 0) == 38) {
  i5 = i8;
  i4 = i7;
  i2 = i2 + -1 | 0;
  i9 = 47;
 } else if ((i9 | 0) == 41) {
  i3 = i8;
  i1 = i2 + -1 | 0;
  i9 = 52;
 } else if ((i9 | 0) == 44) {
  i3 = i8;
  i1 = i2 + -1 | 0;
  i9 = 52;
 }
 if ((i9 | 0) == 47) if (!i4) i9 = 48; else {
  i3 = i5;
  i1 = i2;
  i9 = 52;
 }
 if ((i9 | 0) == 48) if (!(HEAP8[i2 >> 0] | 0)) {
  if (i5) {
   HEAP32[i5 >> 2] = 0;
   HEAP32[i10 >> 2] = 0;
  }
  i1 = i1 - i3 | 0;
 } else {
  i3 = i5;
  i1 = i2;
  i9 = 52;
 }
 if ((i9 | 0) == 52) {
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  if (!i3) i1 = -1; else {
   HEAP32[i10 >> 2] = i1;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function _Color24DitherYV12Mod2X(i32, i34, i5, i2, i3, i7, i4, i33, i1) {
 i32 = i32 | 0;
 i34 = i34 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 i33 = i33 | 0;
 i1 = i1 | 0;
 var i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0;
 i6 = (i33 << 1) + i1 | 0;
 i30 = i6 * 3 | 0;
 i31 = (i33 | 0) / 2 | 0;
 i1 = (i6 * 9 | 0) + (i1 * 3 | 0) | 0;
 if ((i4 + 1 | 0) >>> 0 < 3) return;
 i22 = i30 + 3 | 0;
 i23 = i30 + 4 | 0;
 i24 = i30 + 1 | 0;
 i25 = i30 + 5 | 0;
 i26 = i30 + 2 | 0;
 i16 = i30 + 9 | 0;
 i17 = i30 + 6 | 0;
 i18 = i30 + 10 | 0;
 i19 = i30 + 7 | 0;
 i20 = i30 + 11 | 0;
 i21 = i30 + 8 | 0;
 if ((i33 + 1 | 0) >>> 0 < 3) return;
 i15 = i31 * 12 | 0;
 i29 = i31 << 1;
 i27 = i29 + i33 | 0;
 i29 = i29 + i33 | 0;
 i28 = i15 + i1 | 0;
 i15 = i15 + i1 | 0;
 i14 = i5;
 i13 = (i4 | 0) / 2 | 0;
 i11 = i5;
 i12 = i7;
 i8 = i7 + (i6 * 6 | 0) | 0;
 while (1) {
  i13 = i13 + -1 | 0;
  i1 = i14;
  i4 = i2;
  i5 = i3;
  i3 = i3 + i31 | 0;
  i6 = i11 + i33 | 0;
  i7 = i12;
  i9 = i8;
  i10 = i31;
  while (1) {
   i10 = i10 + -1 | 0;
   i38 = HEAPU8[i4 >> 0] | 0;
   i37 = (HEAP32[i32 + (i38 << 2) >> 2] | 0) + 256 | 0;
   i35 = HEAPU8[i5 >> 0] | 0;
   i38 = (HEAP32[i32 + ((i38 | 256) << 2) >> 2] | 0) + 1024 + (HEAP32[i32 + ((i35 | 512) << 2) >> 2] | 0) | 0;
   i35 = (HEAP32[i32 + ((i35 | 768) << 2) >> 2] | 0) + 1792 | 0;
   i36 = HEAPU8[i1 >> 0] | 0;
   i36 = HEAP32[i34 + (i36 + i38 << 2) >> 2] | HEAP32[i34 + (i36 + i37 << 2) >> 2] | HEAP32[i34 + (i36 + i35 << 2) >> 2];
   i39 = i36 & 255;
   HEAP8[i7 + i22 >> 0] = i39;
   HEAP8[i7 + i30 >> 0] = i39;
   HEAP8[i7 + 3 >> 0] = i39;
   HEAP8[i7 >> 0] = i39;
   i39 = i36 >>> 8 & 255;
   HEAP8[i7 + i23 >> 0] = i39;
   HEAP8[i7 + i24 >> 0] = i39;
   HEAP8[i7 + 4 >> 0] = i39;
   HEAP8[i7 + 1 >> 0] = i39;
   i36 = i36 >>> 16 & 255;
   HEAP8[i7 + i25 >> 0] = i36;
   HEAP8[i7 + i26 >> 0] = i36;
   HEAP8[i7 + 5 >> 0] = i36;
   HEAP8[i7 + 2 >> 0] = i36;
   i36 = HEAPU8[i1 + 1 >> 0] | 0;
   i36 = HEAP32[i34 + (i36 + i38 << 2) >> 2] | HEAP32[i34 + (i36 + i37 << 2) >> 2] | HEAP32[i34 + (i36 + i35 << 2) >> 2];
   i39 = i36 & 255;
   HEAP8[i7 + i16 >> 0] = i39;
   HEAP8[i7 + i17 >> 0] = i39;
   HEAP8[i7 + 9 >> 0] = i39;
   HEAP8[i7 + 6 >> 0] = i39;
   i39 = i36 >>> 8 & 255;
   HEAP8[i7 + i18 >> 0] = i39;
   HEAP8[i7 + i19 >> 0] = i39;
   HEAP8[i7 + 10 >> 0] = i39;
   HEAP8[i7 + 7 >> 0] = i39;
   i36 = i36 >>> 16 & 255;
   HEAP8[i7 + i20 >> 0] = i36;
   HEAP8[i7 + i21 >> 0] = i36;
   HEAP8[i7 + 11 >> 0] = i36;
   HEAP8[i7 + 8 >> 0] = i36;
   i36 = HEAPU8[i6 >> 0] | 0;
   i36 = HEAP32[i34 + (i36 + i38 << 2) >> 2] | HEAP32[i34 + (i36 + i37 << 2) >> 2] | HEAP32[i34 + (i36 + i35 << 2) >> 2];
   i39 = i36 & 255;
   HEAP8[i9 + i22 >> 0] = i39;
   HEAP8[i9 + i30 >> 0] = i39;
   HEAP8[i9 + 3 >> 0] = i39;
   HEAP8[i9 >> 0] = i39;
   i39 = i36 >>> 8 & 255;
   HEAP8[i9 + i23 >> 0] = i39;
   HEAP8[i9 + i24 >> 0] = i39;
   HEAP8[i9 + 4 >> 0] = i39;
   HEAP8[i9 + 1 >> 0] = i39;
   i36 = i36 >>> 16 & 255;
   HEAP8[i9 + i25 >> 0] = i36;
   HEAP8[i9 + i26 >> 0] = i36;
   HEAP8[i9 + 5 >> 0] = i36;
   HEAP8[i9 + 2 >> 0] = i36;
   i36 = HEAPU8[i6 + 1 >> 0] | 0;
   i35 = HEAP32[i34 + (i36 + i38 << 2) >> 2] | HEAP32[i34 + (i36 + i37 << 2) >> 2] | HEAP32[i34 + (i36 + i35 << 2) >> 2];
   i36 = i35 & 255;
   HEAP8[i9 + i16 >> 0] = i36;
   HEAP8[i9 + i17 >> 0] = i36;
   HEAP8[i9 + 9 >> 0] = i36;
   HEAP8[i9 + 6 >> 0] = i36;
   i36 = i35 >>> 8 & 255;
   HEAP8[i9 + i18 >> 0] = i36;
   HEAP8[i9 + i19 >> 0] = i36;
   HEAP8[i9 + 10 >> 0] = i36;
   HEAP8[i9 + 7 >> 0] = i36;
   i35 = i35 >>> 16 & 255;
   HEAP8[i9 + i20 >> 0] = i35;
   HEAP8[i9 + i21 >> 0] = i35;
   HEAP8[i9 + 11 >> 0] = i35;
   HEAP8[i9 + 8 >> 0] = i35;
   if (!i10) break; else {
    i1 = i1 + 2 | 0;
    i4 = i4 + 1 | 0;
    i5 = i5 + 1 | 0;
    i6 = i6 + 2 | 0;
    i7 = i7 + 12 | 0;
    i9 = i9 + 12 | 0;
   }
  }
  if (!i13) break; else {
   i2 = i2 + i31 | 0;
   i14 = i14 + i29 | 0;
   i11 = i11 + i27 | 0;
   i12 = i12 + i28 | 0;
   i8 = i8 + i15 | 0;
  }
 }
 return;
}

function _SDL_UpdateTexture(i15, i2, i13, i12) {
 i15 = i15 | 0;
 i2 = i2 | 0;
 i13 = i13 | 0;
 i12 = i12 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i14 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i5 = i16 + 16 | 0;
 i4 = i16 + 8 | 0;
 i3 = i16;
 i14 = i16 + 48 | 0;
 i11 = i16 + 40 | 0;
 i10 = i16 + 20 | 0;
 i1 = i16 + 24 | 0;
 if ((i15 | 0) != 0 ? (HEAP32[i15 >> 2] | 0) == 37830 : 0) {
  if (!i13) {
   HEAP32[i4 >> 2] = 38024;
   i15 = _SDL_SetError(41366, i4) | 0;
   STACKTOP = i16;
   return i15 | 0;
  }
  if (!i12) {
   HEAP32[i5 >> 2] = 38031;
   i15 = _SDL_SetError(41366, i5) | 0;
   STACKTOP = i16;
   return i15 | 0;
  }
  if (!i2) {
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = HEAP32[i15 + 12 >> 2];
   HEAP32[i1 + 12 >> 2] = HEAP32[i15 + 16 >> 2];
   i7 = i1;
  } else i7 = i2;
  i8 = i15 + 40 | 0;
  i1 = HEAP32[i8 >> 2] | 0;
  if (i1) {
   i9 = HEAP32[i15 + 36 >> 2] | 0;
   do if ((_SDL_SW_UpdateYUVTexture(i1, i7, i13, i12) | 0) >= 0) {
    HEAP32[i14 >> 2] = 0;
    HEAP32[i14 + 4 >> 2] = 0;
    i2 = HEAP32[i15 + 12 >> 2] | 0;
    i5 = i14 + 8 | 0;
    HEAP32[i5 >> 2] = i2;
    i4 = HEAP32[i15 + 16 >> 2] | 0;
    i6 = i14 + 12 | 0;
    HEAP32[i6 >> 2] = i4;
    if ((HEAP32[i15 + 8 >> 2] | 0) == 1) {
     if ((_SDL_LockTexture(i9, i14, i11, i10) | 0) < 0) {
      i1 = -1;
      break;
     }
     _SDL_SW_CopyYUVToRGB(HEAP32[i8 >> 2] | 0, i14, HEAP32[i9 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
     _SDL_UnlockTexture(i9);
     i1 = 0;
     break;
    }
    i3 = i9 + 4 | 0;
    i1 = HEAP32[i3 >> 2] | 0;
    L23 : do if ((i1 | 0) == 0 | (i1 & -268435456 | 0) == 268435456) i1 = i1 & 255; else {
     if ((i1 | 0) < 1498831189) switch (i1 | 0) {
     case 844715353:
      {
       i1 = 2;
       break L23;
      }
     default:
      {}
     } else switch (i1 | 0) {
     case 1498831189:
      {
       i1 = 2;
       break L23;
      }
     default:
      {}
     }
     i1 = (i1 | 0) == 1431918169 ? 2 : 1;
    } while (0);
    i2 = (Math_imul(i1, i2) | 0) + 3 & -4;
    i1 = _SDL_malloc(Math_imul(i2, i4) | 0) | 0;
    if (!i1) {
     i1 = _SDL_Error(0) | 0;
     break;
    } else {
     _SDL_SW_CopyYUVToRGB(HEAP32[i8 >> 2] | 0, i14, HEAP32[i3 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, i1, i2) | 0;
     _SDL_UpdateTexture(i9, i14, i1, i2) | 0;
     _SDL_free(i1);
     i1 = 0;
     break;
    }
   } else i1 = -1; while (0);
   i15 = i1;
   STACKTOP = i16;
   return i15 | 0;
  }
  i6 = HEAP32[i15 + 36 >> 2] | 0;
  if (!i6) {
   i14 = HEAP32[i15 + 32 >> 2] | 0;
   i15 = FUNCTION_TABLE_iiiiii[HEAP32[i14 + 28 >> 2] & 63](i14, i15, i7, i13, i12) | 0;
   STACKTOP = i16;
   return i15 | 0;
  }
  do if ((HEAP32[i15 + 8 >> 2] | 0) == 1) if ((_SDL_LockTexture(i6, i7, i14, i11) | 0) < 0) i1 = -1; else {
   _SDL_ConvertPixels(HEAP32[i7 + 8 >> 2] | 0, HEAP32[i7 + 12 >> 2] | 0, HEAP32[i15 + 4 >> 2] | 0, i13, i12, HEAP32[i6 + 4 >> 2] | 0, HEAP32[i14 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0;
   _SDL_UnlockTexture(i6);
   i1 = 0;
  } else {
   i4 = i7 + 8 | 0;
   i2 = HEAP32[i4 >> 2] | 0;
   i5 = i6 + 4 | 0;
   i1 = HEAP32[i5 >> 2] | 0;
   L45 : do if ((i1 | 0) == 0 | (i1 & -268435456 | 0) == 268435456) i1 = i1 & 255; else {
    if ((i1 | 0) < 1498831189) switch (i1 | 0) {
    case 844715353:
     {
      i1 = 2;
      break L45;
     }
    default:
     {}
    } else switch (i1 | 0) {
    case 1498831189:
     {
      i1 = 2;
      break L45;
     }
    default:
     {}
    }
    i1 = (i1 | 0) == 1431918169 ? 2 : 1;
   } while (0);
   i1 = (Math_imul(i1, i2) | 0) + 3 & -4;
   i2 = i7 + 12 | 0;
   i3 = _SDL_malloc(Math_imul(i1, HEAP32[i2 >> 2] | 0) | 0) | 0;
   if (!i3) {
    i1 = _SDL_Error(0) | 0;
    break;
   } else {
    _SDL_ConvertPixels(HEAP32[i4 >> 2] | 0, HEAP32[i2 >> 2] | 0, HEAP32[i15 + 4 >> 2] | 0, i13, i12, HEAP32[i5 >> 2] | 0, i3, i1) | 0;
    _SDL_UpdateTexture(i6, i7, i3, i1) | 0;
    _SDL_free(i3);
    i1 = 0;
    break;
   }
  } while (0);
  i15 = i1;
  STACKTOP = i16;
  return i15 | 0;
 }
 _SDL_SetError(37831, i3) | 0;
 i15 = -1;
 STACKTOP = i16;
 return i15 | 0;
}

function _SDL_GL_GetAttribute(i8, i11) {
 i8 = i8 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i14 = i15 + 72 | 0;
 i13 = i15 + 64 | 0;
 i12 = i15 + 56 | 0;
 i10 = i15 + 48 | 0;
 i7 = i15 + 40 | 0;
 i6 = i15 + 32 | 0;
 i5 = i15 + 24 | 0;
 i4 = i15 + 16 | 0;
 i3 = i15 + 8 | 0;
 i9 = i15 + 76 | 0;
 i1 = HEAP32[3256] | 0;
 L1 : do if (i1) {
  i2 = HEAP32[i1 + 140 >> 2] | 0;
  if (!i2) {
   _SDL_SetError(41464, i4) | 0;
   i1 = -1;
   break;
  }
  if (!(HEAP32[i1 + 356 >> 2] | 0)) {
   _SDL_SetError(41691, i3) | 0;
   i1 = -1;
   break;
  }
  i3 = FUNCTION_TABLE_iii[i2 & 63](i1, 53460) | 0;
  if (i3) {
   i2 = HEAP32[3256] | 0;
   if (!i2) {
    _SDL_SetError(41242, i5) | 0;
    i1 = -1;
    break;
   }
   i1 = HEAP32[i2 + 140 >> 2] | 0;
   if (!i1) {
    _SDL_SetError(41464, i7) | 0;
    i1 = -1;
    break;
   }
   if (!(HEAP32[i2 + 356 >> 2] | 0)) {
    _SDL_SetError(41691, i6) | 0;
    i1 = -1;
    break;
   }
   i2 = FUNCTION_TABLE_iii[i1 & 63](i2, 55335) | 0;
   if (i2) {
    HEAP32[i11 >> 2] = 0;
    do switch (i8 | 0) {
    case 0:
     {
      i1 = 3410;
      break;
     }
    case 2:
     {
      i1 = 3412;
      break;
     }
    case 1:
     {
      i1 = 3411;
      break;
     }
    case 3:
     {
      i1 = 3413;
      break;
     }
    case 5:
     {
      HEAP32[i11 >> 2] = HEAP32[(HEAP32[3256] | 0) + 288 >> 2];
      i1 = 0;
      break L1;
     }
    case 6:
     {
      i1 = 3414;
      break;
     }
    case 7:
     {
      i1 = 3415;
      break;
     }
    case 12:
    case 11:
    case 10:
    case 9:
    case 8:
     {
      HEAP32[i11 >> 2] = 0;
      i1 = 0;
      break L1;
     }
    case 13:
     {
      i1 = 32936;
      break;
     }
    case 14:
     {
      i1 = 32937;
      break;
     }
    case 24:
     {
      i1 = 33531;
      break;
     }
    case 4:
     {
      FUNCTION_TABLE_vii[i3 & 127](3410, i9);
      i1 = HEAP32[i9 >> 2] | 0;
      FUNCTION_TABLE_vii[i3 & 127](3411, i9);
      i1 = (HEAP32[i9 >> 2] | 0) + i1 | 0;
      FUNCTION_TABLE_vii[i3 & 127](3412, i9);
      i1 = i1 + (HEAP32[i9 >> 2] | 0) | 0;
      FUNCTION_TABLE_vii[i3 & 127](3413, i9);
      HEAP32[i11 >> 2] = i1 + (HEAP32[i9 >> 2] | 0);
      i1 = 0;
      break L1;
     }
    case 15:
     {
      HEAP32[i11 >> 2] = (HEAP32[(HEAP32[3256] | 0) + 320 >> 2] | 0) != 0 & 1;
      i1 = 0;
      break L1;
     }
    case 16:
     {
      HEAP32[i11 >> 2] = HEAP32[(HEAP32[3256] | 0) + 352 >> 2];
      i1 = 0;
      break L1;
     }
    case 17:
     {
      HEAP32[i11 >> 2] = HEAP32[(HEAP32[3256] | 0) + 324 >> 2];
      i1 = 0;
      break L1;
     }
    case 18:
     {
      HEAP32[i11 >> 2] = HEAP32[(HEAP32[3256] | 0) + 328 >> 2];
      i1 = 0;
      break L1;
     }
    case 19:
     {
      HEAP32[i11 >> 2] = (HEAP32[(HEAP32[3256] | 0) + 336 >> 2] | 0) == 4 & 1;
      i1 = 0;
      break L1;
     }
    case 20:
     {
      HEAP32[i11 >> 2] = HEAP32[(HEAP32[3256] | 0) + 332 >> 2];
      i1 = 0;
      break L1;
     }
    case 21:
     {
      HEAP32[i11 >> 2] = HEAP32[(HEAP32[3256] | 0) + 336 >> 2];
      i1 = 0;
      break L1;
     }
    case 22:
     {
      HEAP32[i11 >> 2] = HEAP32[(HEAP32[3256] | 0) + 340 >> 2];
      i1 = 0;
      break L1;
     }
    case 23:
     {
      HEAP32[i11 >> 2] = HEAP32[(HEAP32[3256] | 0) + 348 >> 2];
      i1 = 0;
      break L1;
     }
    default:
     {
      i1 = _SDL_SetError(41785, i10) | 0;
      break L1;
     }
    } while (0);
    FUNCTION_TABLE_vii[i3 & 127](i1, i11);
    i1 = FUNCTION_TABLE_i[i2 & 7]() | 0;
    switch (i1 | 0) {
    case 0:
     {
      i1 = 0;
      break L1;
     }
    case 1280:
     {
      i1 = _SDL_SetError(41810, i12) | 0;
      break L1;
     }
    case 1281:
     {
      i1 = _SDL_SetError(41840, i13) | 0;
      break L1;
     }
    default:
     {
      HEAP32[i14 >> 2] = i1;
      i1 = _SDL_SetError(41871, i14) | 0;
      break L1;
     }
    }
   } else i1 = -1;
  } else i1 = -1;
 } else {
  _SDL_SetError(41242, i15) | 0;
  i1 = -1;
 } while (0);
 STACKTOP = i15;
 return i1 | 0;
}

function _SDL_BlendPoint_RGBA(i6, i9, i10, i5, i8, i7, i4, i1) {
 i6 = i6 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i3 = HEAP32[i6 + 4 >> 2] | 0;
 i1 = i1 & 255;
 i2 = i1 ^ 255;
 if ((HEAP8[i3 + 9 >> 0] | 0) != 4) {
  i10 = _SDL_Error(4) | 0;
  return i10 | 0;
 }
 switch (i5 | 0) {
 case 1:
  {
   i10 = (HEAP32[i6 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i6 + 16 >> 2] | 0, i10) | 0) + (i9 << 2)) | 0;
   i5 = HEAP32[i10 >> 2] | 0;
   i13 = HEAPU8[i3 + 32 >> 0] | 0;
   i14 = HEAPU8[i3 + 28 >> 0] | 0;
   i15 = HEAPU8[i3 + 33 >> 0] | 0;
   i16 = HEAPU8[i3 + 29 >> 0] | 0;
   i11 = HEAPU8[i3 + 34 >> 0] | 0;
   i12 = HEAPU8[i3 + 30 >> 0] | 0;
   i9 = HEAPU8[i3 + 35 >> 0] | 0;
   i6 = HEAPU8[i3 + 31 >> 0] | 0;
   HEAP32[i10 >> 2] = ((((Math_imul(HEAPU8[(HEAP32[5992 + (i16 << 2) >> 2] | 0) + ((HEAP32[i3 + 16 >> 2] & i5) >>> i15) >> 0] | 0, i2) | 0) >>> 0) / 255 | 0) + (i7 & 255) | 0) >>> i16 << i15 | ((((Math_imul(HEAPU8[(HEAP32[5992 + (i14 << 2) >> 2] | 0) + ((HEAP32[i3 + 12 >> 2] & i5) >>> i13) >> 0] | 0, i2) | 0) >>> 0) / 255 | 0) + (i8 & 255) | 0) >>> i14 << i13 | ((((Math_imul(HEAPU8[(HEAP32[5992 + (i12 << 2) >> 2] | 0) + ((HEAP32[i3 + 20 >> 2] & i5) >>> i11) >> 0] | 0, i2) | 0) >>> 0) / 255 | 0) + (i4 & 255) | 0) >>> i12 << i11 | ((((Math_imul(HEAPU8[(HEAP32[5992 + (i6 << 2) >> 2] | 0) + ((HEAP32[i3 + 24 >> 2] & i5) >>> i9) >> 0] | 0, i2) | 0) >>> 0) / 255 | 0) + i1 | 0) >>> i6 << i9;
   i10 = 0;
   return i10 | 0;
  }
 case 2:
  {
   i16 = (HEAP32[i6 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i6 + 16 >> 2] | 0, i10) | 0) + (i9 << 2)) | 0;
   i13 = HEAP32[i16 >> 2] | 0;
   i9 = HEAPU8[i3 + 32 >> 0] | 0;
   i6 = HEAPU8[i3 + 28 >> 0] | 0;
   i5 = HEAPU8[i3 + 33 >> 0] | 0;
   i2 = HEAPU8[i3 + 29 >> 0] | 0;
   i12 = HEAPU8[i3 + 34 >> 0] | 0;
   i11 = HEAPU8[i3 + 30 >> 0] | 0;
   i15 = HEAPU8[i3 + 35 >> 0] | 0;
   i14 = HEAPU8[i3 + 31 >> 0] | 0;
   i8 = (HEAPU8[(HEAP32[5992 + (i6 << 2) >> 2] | 0) + ((HEAP32[i3 + 12 >> 2] & i13) >>> i9) >> 0] | 0) + (i8 & 255) | 0;
   i7 = (HEAPU8[(HEAP32[5992 + (i2 << 2) >> 2] | 0) + ((HEAP32[i3 + 16 >> 2] & i13) >>> i5) >> 0] | 0) + (i7 & 255) | 0;
   i10 = (HEAPU8[(HEAP32[5992 + (i11 << 2) >> 2] | 0) + ((HEAP32[i3 + 20 >> 2] & i13) >>> i12) >> 0] | 0) + (i4 & 255) | 0;
   HEAP32[i16 >> 2] = (i7 >>> 0 > 255 ? 255 : i7) >>> i2 << i5 | (i8 >>> 0 > 255 ? 255 : i8) >>> i6 << i9 | (i10 >>> 0 > 255 ? 255 : i10) >>> i11 << i12 | (HEAPU8[(HEAP32[5992 + (i14 << 2) >> 2] | 0) + ((HEAP32[i3 + 24 >> 2] & i13) >>> i15) >> 0] | 0) >>> i14 << i15;
   i16 = 0;
   return i16 | 0;
  }
 case 4:
  {
   i16 = (HEAP32[i6 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i6 + 16 >> 2] | 0, i10) | 0) + (i9 << 2)) | 0;
   i13 = HEAP32[i16 >> 2] | 0;
   i10 = HEAPU8[i3 + 32 >> 0] | 0;
   i9 = HEAPU8[i3 + 28 >> 0] | 0;
   i12 = HEAPU8[i3 + 33 >> 0] | 0;
   i11 = HEAPU8[i3 + 29 >> 0] | 0;
   i15 = HEAPU8[i3 + 34 >> 0] | 0;
   i14 = HEAPU8[i3 + 30 >> 0] | 0;
   i6 = HEAPU8[i3 + 35 >> 0] | 0;
   i5 = HEAPU8[i3 + 31 >> 0] | 0;
   HEAP32[i16 >> 2] = (HEAPU8[(HEAP32[5992 + (i5 << 2) >> 2] | 0) + ((HEAP32[i3 + 24 >> 2] & i13) >>> i6) >> 0] | 0) >>> i5 << i6 | (((Math_imul(HEAPU8[(HEAP32[5992 + (i9 << 2) >> 2] | 0) + ((HEAP32[i3 + 12 >> 2] & i13) >>> i10) >> 0] | 0, i8 & 255) | 0) >>> 0) / 255 | 0) >>> i9 << i10 | (((Math_imul(HEAPU8[(HEAP32[5992 + (i11 << 2) >> 2] | 0) + ((HEAP32[i3 + 16 >> 2] & i13) >>> i12) >> 0] | 0, i7 & 255) | 0) >>> 0) / 255 | 0) >>> i11 << i12 | (((Math_imul(HEAPU8[(HEAP32[5992 + (i14 << 2) >> 2] | 0) + ((HEAP32[i3 + 20 >> 2] & i13) >>> i15) >> 0] | 0, i4 & 255) | 0) >>> 0) / 255 | 0) >>> i14 << i15;
   i16 = 0;
   return i16 | 0;
  }
 default:
  {
   HEAP32[(HEAP32[i6 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i6 + 16 >> 2] | 0, i10) | 0) + (i9 << 2)) >> 2] = (i7 & 255) >>> (HEAPU8[i3 + 29 >> 0] | 0) << HEAPU8[i3 + 33 >> 0] | (i8 & 255) >>> (HEAPU8[i3 + 28 >> 0] | 0) << HEAPU8[i3 + 32 >> 0] | (i4 & 255) >>> (HEAPU8[i3 + 30 >> 0] | 0) << HEAPU8[i3 + 34 >> 0] | i1 >>> (HEAPU8[i3 + 31 >> 0] | 0) << HEAPU8[i3 + 35 >> 0];
   i16 = 0;
   return i16 | 0;
  }
 }
 return 0;
}

function _qsort(i6, i1, i14, i11) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i14 = i14 | 0;
 i11 = i11 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 i12 = i16 + 8 | 0;
 i13 = i16;
 i2 = Math_imul(i14, i1) | 0;
 i10 = i13;
 HEAP32[i10 >> 2] = 1;
 HEAP32[i10 + 4 >> 2] = 0;
 if (i2) {
  i5 = i2 - i14 | 0;
  HEAP32[i12 + 4 >> 2] = i14;
  HEAP32[i12 >> 2] = i14;
  i3 = i14;
  i1 = i14;
  i4 = 2;
  while (1) {
   i1 = i1 + i14 + i3 | 0;
   HEAP32[i12 + (i4 << 2) >> 2] = i1;
   if (i1 >>> 0 < i2 >>> 0) {
    i10 = i3;
    i3 = i1;
    i4 = i4 + 1 | 0;
    i1 = i10;
   } else break;
  }
  i10 = 0 - i14 | 0;
  i7 = i6 + i5 | 0;
  i9 = i13 + 4 | 0;
  if ((i5 | 0) > 0) {
   i5 = i7;
   i2 = 1;
   i4 = 1;
   while (1) {
    do if ((i2 & 3 | 0) == 3) {
     _sift(i6, i14, i11, i4, i12);
     i8 = HEAP32[i9 >> 2] | 0;
     i1 = i8 << 30 | (HEAP32[i13 >> 2] | 0) >>> 2;
     HEAP32[i13 >> 2] = i1;
     HEAP32[i9 >> 2] = i8 >>> 2;
     i4 = i4 + 2 | 0;
    } else {
     i1 = i4 + -1 | 0;
     if ((HEAP32[i12 + (i1 << 2) >> 2] | 0) >>> 0 < (i5 - i6 | 0) >>> 0) _sift(i6, i14, i11, i4, i12); else _trinkle(i6, i14, i11, i13, i4, 0, i12);
     if ((i4 | 0) == 1) {
      i1 = HEAP32[i13 >> 2] | 0;
      HEAP32[i9 >> 2] = i1 >>> 31 | HEAP32[i9 >> 2] << 1;
      i1 = i1 << 1;
      HEAP32[i13 >> 2] = i1;
      i4 = 0;
      break;
     }
     if (i1 >>> 0 > 31) {
      i2 = HEAP32[i13 >> 2] | 0;
      HEAP32[i9 >> 2] = i2;
      HEAP32[i13 >> 2] = 0;
      i1 = i4 + -33 | 0;
      i3 = 0;
     } else {
      i2 = HEAP32[i9 >> 2] | 0;
      i3 = HEAP32[i13 >> 2] | 0;
     }
     HEAP32[i9 >> 2] = i3 >>> (32 - i1 | 0) | i2 << i1;
     i1 = i3 << i1;
     HEAP32[i13 >> 2] = i1;
     i4 = 1;
    } while (0);
    i2 = i1 | 1;
    HEAP32[i13 >> 2] = i2;
    i1 = i6 + i14 | 0;
    if (i1 >>> 0 >= i7 >>> 0) {
     i2 = i1;
     break;
    } else i6 = i1;
   }
  } else {
   i2 = i6;
   i4 = 1;
  }
  _trinkle(i2, i14, i11, i13, i4, 0, i12);
  i8 = i13 + 4 | 0;
  i1 = HEAP32[i13 >> 2] | 0;
  if (!((i4 | 0) == 1 & (i1 | 0) == 1 & (HEAP32[i8 >> 2] | 0) == 0)) {
   i3 = i2;
   while (1) {
    if ((i4 | 0) < 2) {
     i2 = i1 + -1 | 0;
     do if (i2) {
      if (!(i2 & 1)) {
       i5 = i2;
       i2 = 0;
       do {
        i2 = i2 + 1 | 0;
        i5 = i5 >>> 1;
       } while ((i5 & 1 | 0) == 0);
       if (!i2) i15 = 24;
      } else i15 = 24;
      if ((i15 | 0) == 24) {
       i15 = 0;
       i7 = HEAP32[i9 >> 2] | 0;
       if (!i7) {
        i2 = 64;
        i15 = 30;
        break;
       }
       if (!(i7 & 1)) {
        i5 = i7;
        i2 = 0;
       } else {
        i6 = 0;
        i5 = i7;
        i2 = 0;
        break;
       }
       while (1) {
        i6 = i2 + 1 | 0;
        i5 = i5 >>> 1;
        if (i5 & 1) {
         i5 = i6;
         break;
        } else i2 = i6;
       }
       if (!i5) {
        i6 = 0;
        i5 = i7;
        i2 = 0;
        break;
       } else i2 = i2 + 33 | 0;
      }
      if (i2 >>> 0 > 31) i15 = 30; else {
       i6 = i2;
       i5 = HEAP32[i9 >> 2] | 0;
      }
     } else {
      i2 = 32;
      i15 = 30;
     } while (0);
     if ((i15 | 0) == 30) {
      i15 = 0;
      i1 = HEAP32[i9 >> 2] | 0;
      HEAP32[i13 >> 2] = i1;
      HEAP32[i9 >> 2] = 0;
      i6 = i2 + -32 | 0;
      i5 = 0;
     }
     HEAP32[i13 >> 2] = i5 << 32 - i6 | i1 >>> i6;
     HEAP32[i9 >> 2] = i5 >>> i6;
     i3 = i3 + i10 | 0;
     i2 = i2 + i4 | 0;
    } else {
     i6 = i1 >>> 30;
     i7 = i6 | HEAP32[i9 >> 2] << 2;
     i2 = i4 + -2 | 0;
     HEAP32[i13 >> 2] = (i1 << 1 & 2147483646 | i6 << 31) ^ 3;
     HEAP32[i9 >> 2] = i7 >>> 1;
     _trinkle(i3 + (0 - ((HEAP32[i12 + (i2 << 2) >> 2] | 0) + i14)) | 0, i14, i11, i13, i4 + -1 | 0, 1, i12);
     i7 = HEAP32[i13 >> 2] | 0;
     HEAP32[i9 >> 2] = i7 >>> 31 | HEAP32[i9 >> 2] << 1;
     HEAP32[i13 >> 2] = i7 << 1 | 1;
     i3 = i3 + i10 | 0;
     _trinkle(i3, i14, i11, i13, i2, 1, i12);
    }
    i1 = HEAP32[i13 >> 2] | 0;
    if ((i2 | 0) == 1 & (i1 | 0) == 1 & (HEAP32[i8 >> 2] | 0) == 0) break; else i4 = i2;
   }
  }
 }
 STACKTOP = i16;
 return;
}

function _SDL_CalculateBlitN(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i14 = HEAP32[i1 + 4 >> 2] | 0;
 i1 = HEAP32[i1 + 52 >> 2] | 0;
 i13 = HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0;
 i2 = HEAP8[i13 + 8 >> 0] | 0;
 if ((i2 & 255) < 8) {
  i14 = 0;
  return i14 | 0;
 }
 switch (HEAP32[i1 + 68 >> 2] & -28673 | 0) {
 case 0:
  {
   if (i2 << 24 >> 24 == 8) {
    L8 : do if ((HEAP8[i14 + 9 >> 0] | 0) == 4) {
     i1 = HEAP32[i14 + 12 >> 2] | 0;
     if ((i1 | 0) < 1072693248) {
      switch (i1 | 0) {
      case 16711680:
       break;
      default:
       break L8;
      }
      if ((HEAP32[i14 + 16 >> 2] | 0) != 65280) break;
      if ((HEAP32[i14 + 20 >> 2] | 0) == 255) i1 = 292; else break;
      return i1 | 0;
     } else {
      switch (i1 | 0) {
      case 1072693248:
       break;
      default:
       break L8;
      }
      if ((HEAP32[i14 + 16 >> 2] | 0) != 1047552) break;
      if ((HEAP32[i14 + 20 >> 2] | 0) == 1023) i1 = 293; else break;
      return i1 | 0;
     }
    } while (0);
    i14 = 294;
    return i14 | 0;
   }
   if (!(HEAP32[i13 + 24 >> 2] | 0)) i12 = 1; else i12 = (HEAP32[i14 + 24 >> 2] | 0) != 0 ? 4 : 2;
   i11 = i14 + 9 | 0;
   i10 = HEAP32[12964 + ((HEAPU8[i11 >> 0] | 0) + -1 << 2) >> 2] | 0;
   i1 = HEAP32[i10 + 12 >> 2] | 0;
   L25 : do if (!i1) i1 = 0; else {
    i3 = i14 + 12 | 0;
    i4 = i14 + 16 | 0;
    i5 = i14 + 20 | 0;
    i6 = i13 + 12 | 0;
    i7 = i13 + 16 | 0;
    i8 = i13 + 20 | 0;
    i9 = i13 + 9 | 0;
    i2 = i1;
    i1 = 0;
    do {
     i15 = HEAP32[i10 + (i1 * 40 | 0) >> 2] | 0;
     if ((((((((((i15 | 0) == 0 ? 1 : (HEAP32[i3 >> 2] | 0) == (i15 | 0)) ? (i15 = HEAP32[i10 + (i1 * 40 | 0) + 4 >> 2] | 0, (i15 | 0) == 0 ? 1 : (HEAP32[i4 >> 2] | 0) == (i15 | 0)) : 0) ? (i15 = HEAP32[i10 + (i1 * 40 | 0) + 8 >> 2] | 0, (i15 | 0) == 0 ? 1 : (HEAP32[i5 >> 2] | 0) == (i15 | 0)) : 0) ? (i15 = HEAP32[i10 + (i1 * 40 | 0) + 16 >> 2] | 0, (i15 | 0) == 0 ? 1 : (HEAP32[i6 >> 2] | 0) == (i15 | 0)) : 0) ? (i15 = HEAP32[i10 + (i1 * 40 | 0) + 20 >> 2] | 0, (i15 | 0) == 0 ? 1 : (HEAP32[i7 >> 2] | 0) == (i15 | 0)) : 0) ? (i15 = HEAP32[i10 + (i1 * 40 | 0) + 24 >> 2] | 0, (i15 | 0) == 0 ? 1 : (HEAP32[i8 >> 2] | 0) == (i15 | 0)) : 0) ? (HEAPU8[i9 >> 0] | 0) == (i2 | 0) : 0) ? (HEAP32[i10 + (i1 * 40 | 0) + 36 >> 2] & i12 | 0) == (i12 | 0) : 0) ? (i15 = i10 + (i1 * 40 | 0) + 28 | 0, i2 = HEAP32[i15 >> 2] | 0, i2 = (_SDL_HasMMX() | 0) != 0 & i2, (i2 | 0) == (HEAP32[i15 >> 2] | 0)) : 0) break L25;
     i1 = i1 + 1 | 0;
     i2 = HEAP32[i10 + (i1 * 40 | 0) + 12 >> 2] | 0;
    } while ((i2 | 0) != 0);
   } while (0);
   i1 = HEAP32[i10 + (i1 * 40 | 0) + 32 >> 2] | 0;
   if ((i1 | 0) != 159) {
    i15 = i1;
    return i15 | 0;
   }
   if ((HEAP32[i14 >> 2] | 0) == 372711428) {
    i15 = 295;
    return i15 | 0;
   }
   if ((HEAP32[i13 >> 2] | 0) == 372711428) {
    i15 = 296;
    return i15 | 0;
   }
   if ((HEAP8[i11 >> 0] | 0) != 4) {
    i15 = (i12 | 0) == 4;
    i15 = i15 ? 291 : 159;
    return i15 | 0;
   }
   if ((HEAP8[i13 + 9 >> 0] | 0) != 4) {
    i15 = (i12 | 0) == 4;
    i15 = i15 ? 291 : 159;
    return i15 | 0;
   }
   if ((HEAP32[i14 + 12 >> 2] | 0) != (HEAP32[i13 + 12 >> 2] | 0)) {
    i15 = (i12 | 0) == 4;
    i15 = i15 ? 291 : 159;
    return i15 | 0;
   }
   if ((HEAP32[i14 + 16 >> 2] | 0) != (HEAP32[i13 + 16 >> 2] | 0)) {
    i15 = (i12 | 0) == 4;
    i15 = i15 ? 291 : 159;
    return i15 | 0;
   }
   if ((HEAP32[i14 + 20 >> 2] | 0) == (HEAP32[i13 + 20 >> 2] | 0)) {
    i15 = 297;
    return i15 | 0;
   } else {
    i15 = (i12 | 0) == 4;
    i15 = i15 ? 291 : 159;
    return i15 | 0;
   }
  }
 case 256:
  {
   if ((HEAP8[i14 + 9 >> 0] | 0) == 2 ? (HEAP32[i1 + 4 >> 2] | 0) != 0 : 0) {
    i15 = 298;
    return i15 | 0;
   }
   if ((HEAP8[i13 + 9 >> 0] | 0) == 1) {
    i15 = 299;
    return i15 | 0;
   }
   if ((HEAP32[i14 + 24 >> 2] | 0) != 0 ? (HEAP32[i13 + 24 >> 2] | 0) != 0 : 0) {
    i15 = 300;
    return i15 | 0;
   }
   i15 = 301;
   return i15 | 0;
  }
 default:
  {
   i15 = 0;
   return i15 | 0;
  }
 }
 return 0;
}

function _SDL_CreateWindowTexture(i2, i9, i10, i13, i12) {
 i2 = i2 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i13 = i13 | 0;
 i12 = i12 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i4 = i11 + 16 | 0;
 i3 = i11 + 8 | 0;
 i8 = i11 + 20 | 0;
 i2 = HEAP32[3256] | 0;
 L1 : do if (!i2) {
  _SDL_SetError(41242, i11) | 0;
  i5 = 11;
 } else {
  if ((i9 | 0) != 0 ? (HEAP32[i9 >> 2] | 0) == (i2 + 248 | 0) : 0) {
   i2 = HEAP32[i9 + 132 >> 2] | 0;
   if (!i2) {
    i5 = 11;
    break;
   }
   while (1) {
    i3 = HEAP32[i2 >> 2] | 0;
    if ((i3 | 0) != 0 ? (_SDL_strcmp(i3, 48261) | 0) == 0 : 0) break;
    i2 = HEAP32[i2 + 8 >> 2] | 0;
    if (!i2) {
     i5 = 11;
     break L1;
    }
   }
   i2 = HEAP32[i2 + 4 >> 2] | 0;
   if (!i2) {
    i5 = 11;
    break;
   } else break;
  }
  _SDL_SetError(41324, i3) | 0;
  i5 = 11;
 } while (0);
 do if ((i5 | 0) == 11) {
  i3 = _SDL_GetHint(41185) | 0;
  L16 : do if ((((i3 | 0) != 0 ? (HEAP8[i3 >> 0] & -2) << 24 >> 24 != 48 : 0) ? (_SDL_strcasecmp(i3, 43854) | 0) != 0 : 0) ? (_SDL_GetNumRenderDrivers() | 0) > 0 : 0) {
   i2 = 0;
   while (1) {
    _SDL_GetRenderDriverInfo(i2, i8) | 0;
    if (!(_SDL_strcasecmp(HEAP32[i8 >> 2] | 0, i3) | 0)) break;
    i2 = i2 + 1 | 0;
    if ((i2 | 0) >= (_SDL_GetNumRenderDrivers() | 0)) {
     i5 = 19;
     break L16;
    }
   }
   i2 = _SDL_CreateRenderer(i9, i2, 0) | 0;
   if (i2) i1 = i2; else i5 = 19;
  } else i5 = 19; while (0);
  L25 : do if ((i5 | 0) == 19) {
   L27 : do if ((_SDL_GetNumRenderDrivers() | 0) > 0) {
    i2 = 0;
    while (1) {
     _SDL_GetRenderDriverInfo(i2, i8) | 0;
     if ((_SDL_strcmp(HEAP32[i8 >> 2] | 0, 43854) | 0) != 0 ? (i1 = _SDL_CreateRenderer(i9, i2, 0) | 0, (i1 | 0) != 0) : 0) break;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) >= (_SDL_GetNumRenderDrivers() | 0)) break L27;
    }
    break L25;
   } while (0);
   i13 = _SDL_SetError(48307, i4) | 0;
   STACKTOP = i11;
   return i13 | 0;
  } while (0);
  i2 = _SDL_calloc(1, 20) | 0;
  if (i2) {
   _SDL_SetWindowData(i9, 48261, i2) | 0;
   HEAP32[i2 >> 2] = i1;
   break;
  }
  _SDL_DestroyRenderer(i1);
  i13 = _SDL_Error(0) | 0;
  STACKTOP = i11;
  return i13 | 0;
 } while (0);
 i6 = i2 + 4 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if (i1) {
  _SDL_DestroyTexture(i1);
  HEAP32[i6 >> 2] = 0;
 }
 i7 = i2 + 8 | 0;
 _SDL_free(HEAP32[i7 >> 2] | 0);
 HEAP32[i7 >> 2] = 0;
 if ((_SDL_GetRendererInfo(HEAP32[i2 >> 2] | 0, i8) | 0) < 0) {
  i13 = -1;
  STACKTOP = i11;
  return i13 | 0;
 }
 i4 = HEAP32[i8 + 12 >> 2] | 0;
 HEAP32[i10 >> 2] = i4;
 i5 = HEAP32[i8 + 8 >> 2] | 0;
 L50 : do if (!i5) i1 = i4; else {
  i1 = i4;
  i3 = 0;
  L51 : while (1) {
   if ((i1 | 0) == 0 | (i1 & -268435456 | 0) == 268435456) switch (i1 >>> 20 & 15 | 0) {
   case 8:
   case 7:
   case 4:
   case 3:
    break;
   default:
    break L51;
   }
   i3 = i3 + 1 | 0;
   if (i3 >>> 0 >= i5 >>> 0) {
    i1 = i4;
    break L50;
   }
   i1 = HEAP32[i8 + 12 + (i3 << 2) >> 2] | 0;
  }
  HEAP32[i10 >> 2] = i1;
 } while (0);
 i3 = i9 + 24 | 0;
 i4 = i9 + 28 | 0;
 i9 = _SDL_CreateTexture(HEAP32[i2 >> 2] | 0, i1, 1, HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = i9;
 if (!i9) {
  i13 = -1;
  STACKTOP = i11;
  return i13 | 0;
 }
 i1 = HEAP32[i10 >> 2] | 0;
 L62 : do if ((i1 | 0) == 0 | (i1 & -268435456 | 0) == 268435456) i1 = i1 & 255; else {
  if ((i1 | 0) < 1498831189) switch (i1 | 0) {
  case 844715353:
   {
    i1 = 2;
    break L62;
   }
  default:
   {}
  } else switch (i1 | 0) {
  case 1498831189:
   {
    i1 = 2;
    break L62;
   }
  default:
   {}
  }
  i1 = (i1 | 0) == 1431918169 ? 2 : 1;
 } while (0);
 HEAP32[i2 + 16 >> 2] = i1;
 i1 = (Math_imul(HEAP32[i3 >> 2] | 0, i1) | 0) + 3 & -4;
 i3 = i2 + 12 | 0;
 HEAP32[i3 >> 2] = i1;
 i1 = _SDL_malloc(Math_imul(i1, HEAP32[i4 >> 2] | 0) | 0) | 0;
 HEAP32[i7 >> 2] = i1;
 if (!i1) {
  i13 = _SDL_Error(0) | 0;
  STACKTOP = i11;
  return i13 | 0;
 } else {
  HEAP32[i13 >> 2] = i1;
  HEAP32[i12 >> 2] = HEAP32[i3 >> 2];
  _SDL_RenderSetViewport(HEAP32[i2 >> 2] | 0, 0) | 0;
  i13 = 0;
  STACKTOP = i11;
  return i13 | 0;
 }
 return 0;
}

function _SDL_MasksToPixelFormatEnum(i1, i13, i12, i11, i10) {
 i1 = i1 | 0;
 i13 = i13 | 0;
 i12 = i12 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 L1 : do switch (i1 | 0) {
 case 4:
  {
   i13 = 304088064;
   return i13 | 0;
  }
 case 8:
  {
   if (!i13) {
    i13 = 318769153;
    return i13 | 0;
   }
   if ((i13 | 0) == 224 & (i12 | 0) == 28 & (i11 | 0) == 3 & (i10 | 0) == 0) {
    i13 = 336660481;
    return i13 | 0;
   }
   break;
  }
 case 12:
  {
   if (!i13) {
    i13 = 353504258;
    return i13 | 0;
   }
   if ((i13 | 0) == 3840 & (i12 | 0) == 240 & (i11 | 0) == 15 & (i10 | 0) == 0) {
    i13 = 353504258;
    return i13 | 0;
   }
   break;
  }
 case 15:
  {
   if (!i13) {
    i13 = 353570562;
    return i13 | 0;
   } else i2 = 9;
   break;
  }
 case 16:
  {
   if (!i13) {
    i13 = 353701890;
    return i13 | 0;
   } else i2 = 9;
   break;
  }
 case 24:
  {
   if ((i13 | 0) < 255) {
    switch (i13 | 0) {
    case 0:
     {
      i1 = 390076419;
      break;
     }
    default:
     {
      i2 = 24;
      break L1;
     }
    }
    return i1 | 0;
   }
   if ((i13 | 0) >= 16711680) {
    switch (i13 | 0) {
    case 16711680:
     {
      i1 = 390076419;
      break;
     }
    default:
     {
      i2 = 24;
      break L1;
     }
    }
    return i1 | 0;
   }
   switch (i13 | 0) {
   case 255:
    break;
   default:
    {
     i2 = 24;
     break L1;
    }
   }
   i13 = 386930691;
   return i13 | 0;
  }
 case 32:
  {
   if (!i13) {
    i13 = 370546692;
    return i13 | 0;
   } else i2 = 24;
   break;
  }
 case 1:
  {
   i13 = 287310080;
   return i13 | 0;
  }
 default:
  {}
 } while (0);
 if ((i2 | 0) == 9) {
  i1 = (i12 | 0) == 992;
  i7 = (i11 | 0) == 31;
  i5 = (i13 | 0) == 31744 & i1 & i7;
  i8 = (i10 | 0) == 0;
  if (i5 & i8) {
   i13 = 353570562;
   return i13 | 0;
  }
  i9 = (i13 | 0) == 31;
  i6 = i9 & i1 & (i11 | 0) == 31744;
  if (i6 & i8) {
   i13 = 357764866;
   return i13 | 0;
  }
  i1 = (i12 | 0) == 240;
  i2 = (i10 | 0) == 61440;
  if ((i13 | 0) == 3840 & i1 & (i11 | 0) == 15 & i2) {
   i13 = 355602434;
   return i13 | 0;
  }
  i3 = (i12 | 0) == 3840;
  i4 = (i10 | 0) == 15;
  if ((i13 | 0) == 61440 & i3 & (i11 | 0) == 240 & i4) {
   i13 = 356651010;
   return i13 | 0;
  }
  if ((i13 | 0) == 15 & i1 & (i11 | 0) == 3840 & i2) {
   i13 = 359796738;
   return i13 | 0;
  }
  if ((i13 | 0) == 240 & i3 & (i11 | 0) == 61440 & i4) {
   i13 = 360845314;
   return i13 | 0;
  }
  i2 = (i10 | 0) == 32768;
  if (i5 & i2) {
   i13 = 355667970;
   return i13 | 0;
  }
  i4 = (i13 | 0) == 63488;
  i3 = (i12 | 0) == 1984;
  i1 = (i10 | 0) == 1;
  if (i4 & i3 & (i11 | 0) == 62 & i1) {
   i13 = 356782082;
   return i13 | 0;
  }
  if (i6 & i2) {
   i13 = 359862274;
   return i13 | 0;
  }
  i2 = (i11 | 0) == 63488;
  if ((i13 | 0) == 62 & i3 & i2 & i1) {
   i13 = 360976386;
   return i13 | 0;
  }
  i1 = (i12 | 0) == 2016;
  if (i4 & i1 & i7 & i8) {
   i13 = 353701890;
   return i13 | 0;
  }
  if (i9 & i1 & i2 & i8) {
   i13 = 357896194;
   return i13 | 0;
  }
 } else if ((i2 | 0) == 24) {
  i1 = (i12 | 0) == 65280;
  i5 = (i13 | 0) == 16711680 & i1 & (i11 | 0) == 255;
  i3 = (i10 | 0) == 0;
  if (i5 & i3) {
   i13 = 370546692;
   return i13 | 0;
  }
  i2 = (i12 | 0) == 16711680;
  i7 = (i13 | 0) == -16777216 & i2 & (i11 | 0) == 65280;
  if (i7 & i3) {
   i13 = 371595268;
   return i13 | 0;
  }
  i6 = (i13 | 0) == 255 & i1 & (i11 | 0) == 16711680;
  if (i6 & i3) {
   i13 = 374740996;
   return i13 | 0;
  }
  i4 = (i13 | 0) == 65280 & i2 & (i11 | 0) == -16777216;
  if (i4 & i3) {
   i13 = 375789572;
   return i13 | 0;
  }
  i2 = (i10 | 0) == -16777216;
  if (i5 & i2) {
   i13 = 372645892;
   return i13 | 0;
  }
  i1 = (i10 | 0) == 255;
  if (i7 & i1) {
   i13 = 373694468;
   return i13 | 0;
  }
  if (i6 & i2) {
   i13 = 376840196;
   return i13 | 0;
  }
  if (i4 & i1) {
   i13 = 377888772;
   return i13 | 0;
  }
  if ((i13 | 0) == 1072693248 & (i12 | 0) == 1047552 & (i11 | 0) == 1023 & (i10 | 0) == -1073741824) {
   i13 = 372711428;
   return i13 | 0;
  }
 }
 i13 = 0;
 return i13 | 0;
}

function ___udivmoddi4(i5, i6, i8, i11, i13) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i11 = i11 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i9 = 0, i10 = 0, i12 = 0, i14 = 0, i15 = 0;
 i9 = i5;
 i4 = i6;
 i7 = i4;
 i2 = i8;
 i12 = i11;
 i3 = i12;
 if (!i7) {
  i1 = (i13 | 0) != 0;
  if (!i3) {
   if (i1) {
    HEAP32[i13 >> 2] = (i9 >>> 0) % (i2 >>> 0);
    HEAP32[i13 + 4 >> 2] = 0;
   }
   i12 = 0;
   i13 = (i9 >>> 0) / (i2 >>> 0) >>> 0;
   return (tempRet0 = i12, i13) | 0;
  } else {
   if (!i1) {
    i12 = 0;
    i13 = 0;
    return (tempRet0 = i12, i13) | 0;
   }
   HEAP32[i13 >> 2] = i5 | 0;
   HEAP32[i13 + 4 >> 2] = i6 & 0;
   i12 = 0;
   i13 = 0;
   return (tempRet0 = i12, i13) | 0;
  }
 }
 i1 = (i3 | 0) == 0;
 do if (i2) {
  if (!i1) {
   i1 = (Math_clz32(i3 | 0) | 0) - (Math_clz32(i7 | 0) | 0) | 0;
   if (i1 >>> 0 <= 31) {
    i10 = i1 + 1 | 0;
    i3 = 31 - i1 | 0;
    i6 = i1 - 31 >> 31;
    i2 = i10;
    i5 = i9 >>> (i10 >>> 0) & i6 | i7 << i3;
    i6 = i7 >>> (i10 >>> 0) & i6;
    i1 = 0;
    i3 = i9 << i3;
    break;
   }
   if (!i13) {
    i12 = 0;
    i13 = 0;
    return (tempRet0 = i12, i13) | 0;
   }
   HEAP32[i13 >> 2] = i5 | 0;
   HEAP32[i13 + 4 >> 2] = i4 | i6 & 0;
   i12 = 0;
   i13 = 0;
   return (tempRet0 = i12, i13) | 0;
  }
  i1 = i2 - 1 | 0;
  if (i1 & i2) {
   i3 = (Math_clz32(i2 | 0) | 0) + 33 - (Math_clz32(i7 | 0) | 0) | 0;
   i15 = 64 - i3 | 0;
   i10 = 32 - i3 | 0;
   i4 = i10 >> 31;
   i14 = i3 - 32 | 0;
   i6 = i14 >> 31;
   i2 = i3;
   i5 = i10 - 1 >> 31 & i7 >>> (i14 >>> 0) | (i7 << i10 | i9 >>> (i3 >>> 0)) & i6;
   i6 = i6 & i7 >>> (i3 >>> 0);
   i1 = i9 << i15 & i4;
   i3 = (i7 << i15 | i9 >>> (i14 >>> 0)) & i4 | i9 << i10 & i3 - 33 >> 31;
   break;
  }
  if (i13) {
   HEAP32[i13 >> 2] = i1 & i9;
   HEAP32[i13 + 4 >> 2] = 0;
  }
  if ((i2 | 0) == 1) {
   i14 = i4 | i6 & 0;
   i15 = i5 | 0 | 0;
   return (tempRet0 = i14, i15) | 0;
  } else {
   i15 = _llvm_cttz_i32(i2 | 0) | 0;
   i14 = i7 >>> (i15 >>> 0) | 0;
   i15 = i7 << 32 - i15 | i9 >>> (i15 >>> 0) | 0;
   return (tempRet0 = i14, i15) | 0;
  }
 } else {
  if (i1) {
   if (i13) {
    HEAP32[i13 >> 2] = (i7 >>> 0) % (i2 >>> 0);
    HEAP32[i13 + 4 >> 2] = 0;
   }
   i14 = 0;
   i15 = (i7 >>> 0) / (i2 >>> 0) >>> 0;
   return (tempRet0 = i14, i15) | 0;
  }
  if (!i9) {
   if (i13) {
    HEAP32[i13 >> 2] = 0;
    HEAP32[i13 + 4 >> 2] = (i7 >>> 0) % (i3 >>> 0);
   }
   i14 = 0;
   i15 = (i7 >>> 0) / (i3 >>> 0) >>> 0;
   return (tempRet0 = i14, i15) | 0;
  }
  i1 = i3 - 1 | 0;
  if (!(i1 & i3)) {
   if (i13) {
    HEAP32[i13 >> 2] = i5 | 0;
    HEAP32[i13 + 4 >> 2] = i1 & i7 | i6 & 0;
   }
   i14 = 0;
   i15 = i7 >>> ((_llvm_cttz_i32(i3 | 0) | 0) >>> 0);
   return (tempRet0 = i14, i15) | 0;
  }
  i1 = (Math_clz32(i3 | 0) | 0) - (Math_clz32(i7 | 0) | 0) | 0;
  if (i1 >>> 0 <= 30) {
   i6 = i1 + 1 | 0;
   i3 = 31 - i1 | 0;
   i2 = i6;
   i5 = i7 << i3 | i9 >>> (i6 >>> 0);
   i6 = i7 >>> (i6 >>> 0);
   i1 = 0;
   i3 = i9 << i3;
   break;
  }
  if (!i13) {
   i14 = 0;
   i15 = 0;
   return (tempRet0 = i14, i15) | 0;
  }
  HEAP32[i13 >> 2] = i5 | 0;
  HEAP32[i13 + 4 >> 2] = i4 | i6 & 0;
  i14 = 0;
  i15 = 0;
  return (tempRet0 = i14, i15) | 0;
 } while (0);
 if (!i2) {
  i7 = i3;
  i4 = 0;
  i3 = 0;
 } else {
  i10 = i8 | 0 | 0;
  i9 = i12 | i11 & 0;
  i7 = _i64Add(i10 | 0, i9 | 0, -1, -1) | 0;
  i8 = tempRet0;
  i4 = i3;
  i3 = 0;
  do {
   i11 = i4;
   i4 = i1 >>> 31 | i4 << 1;
   i1 = i3 | i1 << 1;
   i11 = i5 << 1 | i11 >>> 31 | 0;
   i12 = i5 >>> 31 | i6 << 1 | 0;
   _i64Subtract(i7, i8, i11, i12) | 0;
   i15 = tempRet0;
   i14 = i15 >> 31 | ((i15 | 0) < 0 ? -1 : 0) << 1;
   i3 = i14 & 1;
   i5 = _i64Subtract(i11, i12, i14 & i10, (((i15 | 0) < 0 ? -1 : 0) >> 31 | ((i15 | 0) < 0 ? -1 : 0) << 1) & i9) | 0;
   i6 = tempRet0;
   i2 = i2 - 1 | 0;
  } while ((i2 | 0) != 0);
  i7 = i4;
  i4 = 0;
 }
 i2 = 0;
 if (i13) {
  HEAP32[i13 >> 2] = i5;
  HEAP32[i13 + 4 >> 2] = i6;
 }
 i14 = (i1 | 0) >>> 31 | (i7 | i2) << 1 | (i2 << 1 | i1 >>> 31) & 0 | i4;
 i15 = (i1 << 1 | 0 >>> 31) & -2 | i3;
 return (tempRet0 = i14, i15) | 0;
}

function _SDL_SendWindowEvent(i6, i7, i3, i4) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i5 = i8;
 if (!i6) {
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 L4 : do switch (i7 & 255 | 0) {
 case 1:
  {
   i1 = i6 + 48 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (!(i2 & 4)) {
    HEAP32[i1 >> 2] = i2 & -13 | 4;
    _SDL_OnWindowShown(i6);
    break L4;
   } else {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   }
  }
 case 2:
  {
   i1 = i6 + 48 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (!(i2 & 4)) {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   } else {
    HEAP32[i1 >> 2] = i2 & -13 | 8;
    _SDL_OnWindowHidden(i6);
    break L4;
   }
  }
 case 4:
  {
   if ((i3 & -65536 | 0) == 536805376 | (i4 & -65536 | 0) == 536805376) {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   }
   if (!(HEAP32[i6 + 48 >> 2] & 1)) {
    HEAP32[i6 + 56 >> 2] = i3;
    HEAP32[i6 + 60 >> 2] = i4;
   }
   i1 = i6 + 16 | 0;
   i2 = i6 + 20 | 0;
   if ((HEAP32[i1 >> 2] | 0) == (i3 | 0) ? (HEAP32[i2 >> 2] | 0) == (i4 | 0) : 0) {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   }
   HEAP32[i1 >> 2] = i3;
   HEAP32[i2 >> 2] = i4;
   break;
  }
 case 5:
  {
   if (!(HEAP32[i6 + 48 >> 2] & 1)) {
    HEAP32[i6 + 64 >> 2] = i3;
    HEAP32[i6 + 68 >> 2] = i4;
   }
   i1 = i6 + 24 | 0;
   i2 = i6 + 28 | 0;
   if ((HEAP32[i1 >> 2] | 0) == (i3 | 0) ? (HEAP32[i2 >> 2] | 0) == (i4 | 0) : 0) {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   }
   HEAP32[i1 >> 2] = i3;
   HEAP32[i2 >> 2] = i4;
   _SDL_OnWindowResized(i6);
   break;
  }
 case 7:
  {
   i1 = i6 + 48 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (!(i2 & 64)) {
    HEAP32[i1 >> 2] = i2 | 64;
    _SDL_OnWindowMinimized(i6);
    break L4;
   } else {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   }
  }
 case 8:
  {
   i1 = i6 + 48 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (!(i2 & 128)) {
    HEAP32[i1 >> 2] = i2 | 128;
    break L4;
   } else {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   }
  }
 case 9:
  {
   i1 = i6 + 48 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (!(i2 & 192)) {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   } else {
    HEAP32[i1 >> 2] = i2 & -193;
    _SDL_OnWindowRestored(i6);
    break L4;
   }
  }
 case 10:
  {
   i1 = i6 + 48 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (!(i2 & 1024)) {
    HEAP32[i1 >> 2] = i2 | 1024;
    _SDL_OnWindowEnter(i6);
    break L4;
   } else {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   }
  }
 case 11:
  {
   i1 = i6 + 48 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (!(i2 & 1024)) {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   } else {
    HEAP32[i1 >> 2] = i2 & -1025;
    break L4;
   }
  }
 case 12:
  {
   i1 = i6 + 48 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (!(i2 & 512)) {
    HEAP32[i1 >> 2] = i2 | 512;
    _SDL_OnWindowFocusGained(i6);
    break L4;
   } else {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   }
  }
 case 13:
  {
   i1 = i6 + 48 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (!(i2 & 512)) {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   } else {
    HEAP32[i1 >> 2] = i2 & -513;
    _SDL_OnWindowFocusLost(i6);
    break L4;
   }
  }
 default:
  {}
 } while (0);
 if ((_SDL_EventState(512, -1) | 0) << 24 >> 24 == 1) {
  HEAP32[i5 >> 2] = 512;
  HEAP8[i5 + 12 >> 0] = i7;
  HEAP32[i5 + 16 >> 2] = i3;
  HEAP32[i5 + 20 >> 2] = i4;
  HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 4 >> 2];
  switch (i7 << 24 >> 24) {
  case 5:
   {
    _SDL_FilterEvents(18, i5);
    break;
   }
  case 6:
   {
    _SDL_FilterEvents(19, i5);
    break;
   }
  case 4:
   {
    _SDL_FilterEvents(20, i5);
    break;
   }
  default:
   {}
  }
  i1 = (_SDL_PushEvent(i5) | 0) > 0 & 1;
 } else i1 = 0;
 if (i7 << 24 >> 24 != 14) {
  i7 = i1;
  STACKTOP = i8;
  return i7 | 0;
 }
 if (HEAP32[i6 + 140 >> 2] | 0) {
  i7 = i1;
  STACKTOP = i8;
  return i7 | 0;
 }
 if (HEAP32[i6 + 144 >> 2] | 0) {
  i7 = i1;
  STACKTOP = i8;
  return i7 | 0;
 }
 _SDL_SendQuit() | 0;
 i7 = i1;
 STACKTOP = i8;
 return i7 | 0;
}

function _GLES2_RenderCopy(i5, i7, i6, i4) {
 i5 = i5 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i12 = i13;
 i8 = i13 + 56 | 0;
 i11 = i13 + 24 | 0;
 i9 = i5 + 316 | 0;
 i10 = HEAP32[i9 >> 2] | 0;
 i2 = HEAP32[i10 >> 2] | 0;
 if ((HEAP32[3491] | 0) != (i2 | 0)) {
  HEAP32[i10 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i5 + 188 >> 2] | 0, i2) | 0) >= 0) {
   HEAP32[3491] = HEAP32[i10 >> 2];
   _GLES2_UpdateViewport(i5) | 0;
   i1 = HEAP32[i9 >> 2] | 0;
   i3 = 4;
  }
 } else {
  i1 = i10;
  i3 = 4;
 }
 if ((i3 | 0) == 4 ? (HEAP32[i1 + 4 >> 2] | 0) != 0 : 0) {
  i1 = i1 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 7]() | 0) != 0);
 }
 if ((_GLES2_SetupCopy(i5, i7) | 0) < 0) {
  i12 = -1;
  STACKTOP = i13;
  return i12 | 0;
 }
 i2 = HEAP32[i4 >> 2] | 0;
 HEAP32[i8 >> 2] = i2;
 i3 = HEAP32[i4 + 4 >> 2] | 0;
 HEAP32[i8 + 4 >> 2] = i3;
 d15 = (HEAP32[tempDoublePtr >> 2] = i2, +HEAPF32[tempDoublePtr >> 2]) + +HEAPF32[i4 + 8 >> 2];
 HEAPF32[i8 + 8 >> 2] = d15;
 HEAP32[i8 + 12 >> 2] = i3;
 HEAP32[i8 + 16 >> 2] = i2;
 d14 = (HEAP32[tempDoublePtr >> 2] = i3, +HEAPF32[tempDoublePtr >> 2]) + +HEAPF32[i4 + 12 >> 2];
 HEAPF32[i8 + 20 >> 2] = d14;
 HEAPF32[i8 + 24 >> 2] = d15;
 HEAPF32[i8 + 28 >> 2] = d14;
 i3 = HEAP32[i9 >> 2] | 0;
 i2 = i3 + 276 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  FUNCTION_TABLE_vii[HEAP32[i3 + 216 >> 2] & 127](1, i2);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[i3 + 220 >> 2] & 127](34962, i1);
 i1 = i3 + 292 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 < 32) {
  FUNCTION_TABLE_viiii[HEAP32[i3 + 224 >> 2] & 63](34962, 32, i8, 35040);
  HEAP32[i1 >> 2] = 32;
 } else FUNCTION_TABLE_viiii[HEAP32[i3 + 228 >> 2] & 63](34962, 0, 32, i8);
 FUNCTION_TABLE_viiiiii[HEAP32[i3 + 184 >> 2] & 15](0, 2, 5126, 0, 0, 0);
 i2 = HEAP32[i6 >> 2] | 0;
 d14 = +(HEAP32[i7 + 12 >> 2] | 0);
 d16 = +(i2 | 0) / d14;
 HEAPF32[i11 >> 2] = d16;
 i3 = HEAP32[i6 + 4 >> 2] | 0;
 d15 = +(HEAP32[i7 + 16 >> 2] | 0);
 d17 = +(i3 | 0) / d15;
 HEAPF32[i11 + 4 >> 2] = d17;
 d14 = +((HEAP32[i6 + 8 >> 2] | 0) + i2 | 0) / d14;
 HEAPF32[i11 + 8 >> 2] = d14;
 HEAPF32[i11 + 12 >> 2] = d17;
 HEAPF32[i11 + 16 >> 2] = d16;
 d15 = +((HEAP32[i6 + 12 >> 2] | 0) + i3 | 0) / d15;
 HEAPF32[i11 + 20 >> 2] = d15;
 HEAPF32[i11 + 24 >> 2] = d14;
 HEAPF32[i11 + 28 >> 2] = d15;
 i3 = HEAP32[i9 >> 2] | 0;
 i2 = i3 + 280 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  FUNCTION_TABLE_vii[HEAP32[i3 + 216 >> 2] & 127](1, i2);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[i3 + 220 >> 2] & 127](34962, i1);
 i1 = i3 + 296 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 < 32) {
  FUNCTION_TABLE_viiii[HEAP32[i3 + 224 >> 2] & 63](34962, 32, i11, 35040);
  HEAP32[i1 >> 2] = 32;
 } else FUNCTION_TABLE_viiii[HEAP32[i3 + 228 >> 2] & 63](34962, 0, 32, i11);
 FUNCTION_TABLE_viiiiii[HEAP32[i3 + 184 >> 2] & 15](1, 2, 5126, 0, 0, 0);
 FUNCTION_TABLE_viii[HEAP32[i10 + 76 >> 2] & 31](5, 0, 4);
 i1 = HEAP32[i9 >> 2] | 0;
 if (!(HEAP32[i1 + 4 >> 2] | 0)) {
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 i4 = i1 + 108 | 0;
 i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
 if (!i1) {
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 } else i2 = 62969;
 while (1) {
  if ((i2 | 0) != 0 ? (HEAP8[i2 >> 0] | 0) != 0 : 0) i3 = i2; else i3 = 46327;
  switch (i1 | 0) {
  case 1280:
   {
    i2 = 46398;
    break;
   }
  case 1281:
   {
    i2 = 46381;
    break;
   }
  case 1282:
   {
    i2 = 46360;
    break;
   }
  case 1285:
   {
    i2 = 46343;
    break;
   }
  default:
   i2 = 46335;
  }
  HEAP32[i12 >> 2] = i3;
  HEAP32[i12 + 4 >> 2] = 46440;
  HEAP32[i12 + 8 >> 2] = 1733;
  HEAP32[i12 + 12 >> 2] = 47158;
  HEAP32[i12 + 16 >> 2] = i2;
  HEAP32[i12 + 20 >> 2] = i1;
  _SDL_SetError(46414, i12) | 0;
  i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
  if (!i1) {
   i1 = -1;
   break;
  } else i2 = i3;
 }
 STACKTOP = i13;
 return i1 | 0;
}

function _SDL_UpperBlitScaled(i29, i4, i25, i26) {
 i29 = i29 | 0;
 i4 = i4 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, d6 = 0.0, i7 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, i17 = 0, d18 = 0.0, i19 = 0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, i24 = 0, i27 = 0, i28 = 0, i30 = 0;
 i30 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i1 = i30 + 8 | 0;
 i28 = i30 + 32 | 0;
 i27 = i30 + 16 | 0;
 if (!((i29 | 0) != 0 & (i25 | 0) != 0)) {
  i29 = _SDL_SetError(40935, i30) | 0;
  STACKTOP = i30;
  return i29 | 0;
 }
 if ((HEAP32[i29 + 28 >> 2] | 0) == 0 ? (HEAP32[i25 + 28 >> 2] | 0) == 0 : 0) {
  i3 = (i4 | 0) == 0;
  i7 = i29 + 8 | 0;
  i19 = i29 + 12 | 0;
  i17 = HEAP32[(i3 ? i19 : i4 + 12 | 0) >> 2] | 0;
  i5 = HEAP32[(i3 ? i7 : i4 + 8 | 0) >> 2] | 0;
  i24 = (i26 | 0) == 0;
  i2 = HEAP32[(i24 ? i25 + 12 | 0 : i26 + 12 | 0) >> 2] | 0;
  i1 = HEAP32[(i24 ? i25 + 8 | 0 : i26 + 8 | 0) >> 2] | 0;
  if ((i2 | 0) == (i17 | 0) & (i1 | 0) == (i5 | 0)) {
   i29 = _SDL_UpperBlit(i29, i4, i25, i26) | 0;
   STACKTOP = i30;
   return i29 | 0;
  }
  d6 = +(i1 | 0);
  d10 = +(i5 | 0);
  d22 = d6 / d10;
  d8 = +(i2 | 0);
  d12 = +(i17 | 0);
  d23 = d8 / d12;
  if (i24) {
   d14 = 0.0;
   d11 = +(i1 + -1 | 0);
   d9 = 0.0;
   d16 = +(i2 + -1 | 0);
  } else {
   d11 = +(HEAP32[i26 >> 2] | 0);
   d16 = +(HEAP32[i26 + 4 >> 2] | 0);
   d14 = d11;
   d11 = d6 + d11 + -1.0;
   d9 = d16;
   d16 = d8 + d16 + -1.0;
  }
  if (!i3) {
   i1 = HEAP32[i4 >> 2] | 0;
   d15 = +(i1 | 0);
   i2 = HEAP32[i4 + 4 >> 2] | 0;
   d13 = +(i2 | 0);
   d10 = d10 + d15 + -1.0;
   d6 = d12 + d13 + -1.0;
   i1 = (i1 | 0) < 0;
   d12 = i1 ? d14 - d22 * d15 : d14;
   d15 = i1 ? 0.0 : d15;
   i1 = HEAP32[i7 >> 2] | 0;
   d8 = +(i1 | 0);
   if (d10 >= d8) {
    d11 = d11 - d22 * (d10 - d8 + 1.0);
    d10 = +(i1 + -1 | 0);
   }
   i1 = (i2 | 0) < 0;
   d14 = i1 ? 0.0 : d13;
   d9 = i1 ? d9 - d23 * d13 : d9;
   i1 = HEAP32[i19 >> 2] | 0;
   d8 = +(i1 | 0);
   if (!(d6 >= d8)) {
    d8 = d16;
    d13 = d15;
   } else {
    d8 = d16 - d23 * (d6 - d8 + 1.0);
    d13 = d15;
    d6 = +(i1 + -1 | 0);
   }
  } else {
   d12 = d14;
   d8 = d16;
   d13 = 0.0;
   d10 = +(i5 + -1 | 0);
   d14 = 0.0;
   d6 = +(i17 + -1 | 0);
  }
  d20 = +(HEAP32[i25 + 36 >> 2] | 0);
  d18 = d12 - d20;
  d11 = d11 - d20;
  d21 = +(HEAP32[i25 + 40 >> 2] | 0);
  d16 = d9 - d21;
  d12 = d8 - d21;
  i3 = d18 < 0.0;
  d13 = i3 ? d13 - d18 / d22 : d13;
  i1 = HEAP32[i25 + 44 >> 2] | 0;
  d8 = +(i1 | 0);
  if (!(d11 >= d8)) d15 = d11; else {
   d15 = +(i1 + -1 | 0);
   d10 = d10 - (d11 - d8 + 1.0) / d22;
  }
  i2 = d16 < 0.0;
  d9 = i2 ? d14 - d16 / d23 : d14;
  i1 = HEAP32[i25 + 48 >> 2] | 0;
  d8 = +(i1 | 0);
  if (!(d12 >= d8)) d11 = d12; else {
   d11 = +(i1 + -1 | 0);
   d6 = d6 - (d12 - d8 + 1.0) / d23;
  }
  d22 = (i3 ? 0.0 : d18) + d20;
  d23 = (i2 ? 0.0 : d16) + d21;
  HEAP32[i28 >> 2] = ~~+_SDL_floor(d13 + .5);
  HEAP32[i28 + 4 >> 2] = ~~+_SDL_floor(d9 + .5);
  i7 = ~~+_SDL_floor(d10 - d13 + 1.5);
  HEAP32[i28 + 8 >> 2] = i7;
  i5 = ~~+_SDL_floor(d6 - d9 + 1.5);
  HEAP32[i28 + 12 >> 2] = i5;
  HEAP32[i27 >> 2] = ~~+_SDL_floor(d22 + .5);
  HEAP32[i27 + 4 >> 2] = ~~+_SDL_floor(d23 + .5);
  i2 = ~~+_SDL_floor(d15 + d20 - d22 + 1.5);
  i4 = i27 + 8 | 0;
  HEAP32[i4 >> 2] = i2;
  i1 = ~~+_SDL_floor(d11 + d21 - d23 + 1.5);
  i3 = i27 + 12 | 0;
  HEAP32[i3 >> 2] = i1;
  if ((i2 | 0) < 0) {
   HEAP32[i4 >> 2] = 0;
   i2 = 0;
  }
  if ((i1 | 0) < 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 0;
  }
  if (!i24) {
   HEAP32[i26 >> 2] = HEAP32[i27 >> 2];
   HEAP32[i26 + 4 >> 2] = HEAP32[i27 + 4 >> 2];
   HEAP32[i26 + 8 >> 2] = HEAP32[i27 + 8 >> 2];
   HEAP32[i26 + 12 >> 2] = HEAP32[i27 + 12 >> 2];
  }
  if ((i2 | 0) == 0 | (i1 | 0) == 0 | (i7 | 0) < 1 | (i5 | 0) < 1) {
   i29 = 0;
   STACKTOP = i30;
   return i29 | 0;
  }
  i29 = _SDL_LowerBlitScaled(i29, i28, i25, i27) | 0;
  STACKTOP = i30;
  return i29 | 0;
 }
 i29 = _SDL_SetError(40895, i1) | 0;
 STACKTOP = i30;
 return i29 | 0;
}

function _Blit1to3Key(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = HEAP32[i3 + 24 >> 2] | 0;
 i2 = HEAP32[i3 + 28 >> 2] | 0;
 i9 = HEAP32[i3 + 16 >> 2] | 0;
 i10 = HEAP32[i3 + 36 >> 2] | 0;
 i11 = HEAP32[i3 + 48 >> 2] | 0;
 i7 = HEAP32[i3 + 56 >> 2] | 0;
 if (!i2) return;
 i8 = (i1 + 7 | 0) / 8 | 0;
 i6 = i1 & 7;
 i1 = HEAP32[i3 + 20 >> 2] | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 L4 : while (1) {
  i2 = i2 + -1 | 0;
  switch (i6 | 0) {
  case 0:
   {
    i5 = i8;
    i3 = 4;
    break;
   }
  case 7:
   {
    i5 = i8;
    i3 = 7;
    break;
   }
  case 6:
   {
    i5 = i8;
    i3 = 10;
    break;
   }
  case 5:
   {
    i5 = i8;
    i3 = 13;
    break;
   }
  case 4:
   {
    i5 = i8;
    i3 = 16;
    break;
   }
  case 3:
   {
    i5 = i8;
    i3 = 19;
    break;
   }
  case 2:
   {
    i5 = i8;
    i3 = 22;
    break;
   }
  case 1:
   {
    i5 = i8;
    i3 = 25;
    break;
   }
  default:
   i3 = 28;
  }
  while (1) if ((i3 | 0) == 4) {
   i3 = HEAPU8[i4 >> 0] | 0;
   if ((i3 | 0) != (i7 | 0)) {
    i12 = i3 << 2;
    i3 = i12 | 1;
    HEAP8[i1 >> 0] = HEAP8[i11 + i12 >> 0] | 0;
    HEAP8[i1 + 1 >> 0] = HEAP8[i11 + i3 >> 0] | 0;
    HEAP8[i1 + 2 >> 0] = HEAP8[i11 + (i3 + 1) >> 0] | 0;
   }
   i1 = i1 + 3 | 0;
   i4 = i4 + 1 | 0;
   i3 = 7;
   continue;
  } else if ((i3 | 0) == 7) {
   i3 = HEAPU8[i4 >> 0] | 0;
   if ((i3 | 0) != (i7 | 0)) {
    i3 = i3 << 2;
    i12 = i3 | 1;
    HEAP8[i1 >> 0] = HEAP8[i11 + i3 >> 0] | 0;
    HEAP8[i1 + 1 >> 0] = HEAP8[i11 + i12 >> 0] | 0;
    HEAP8[i1 + 2 >> 0] = HEAP8[i11 + (i12 + 1) >> 0] | 0;
   }
   i1 = i1 + 3 | 0;
   i4 = i4 + 1 | 0;
   i3 = 10;
   continue;
  } else if ((i3 | 0) == 10) {
   i3 = HEAPU8[i4 >> 0] | 0;
   if ((i3 | 0) != (i7 | 0)) {
    i3 = i3 << 2;
    i12 = i3 | 1;
    HEAP8[i1 >> 0] = HEAP8[i11 + i3 >> 0] | 0;
    HEAP8[i1 + 1 >> 0] = HEAP8[i11 + i12 >> 0] | 0;
    HEAP8[i1 + 2 >> 0] = HEAP8[i11 + (i12 + 1) >> 0] | 0;
   }
   i1 = i1 + 3 | 0;
   i4 = i4 + 1 | 0;
   i3 = 13;
   continue;
  } else if ((i3 | 0) == 13) {
   i3 = HEAPU8[i4 >> 0] | 0;
   if ((i3 | 0) != (i7 | 0)) {
    i3 = i3 << 2;
    i12 = i3 | 1;
    HEAP8[i1 >> 0] = HEAP8[i11 + i3 >> 0] | 0;
    HEAP8[i1 + 1 >> 0] = HEAP8[i11 + i12 >> 0] | 0;
    HEAP8[i1 + 2 >> 0] = HEAP8[i11 + (i12 + 1) >> 0] | 0;
   }
   i1 = i1 + 3 | 0;
   i4 = i4 + 1 | 0;
   i3 = 16;
   continue;
  } else if ((i3 | 0) == 16) {
   i3 = HEAPU8[i4 >> 0] | 0;
   if ((i3 | 0) != (i7 | 0)) {
    i3 = i3 << 2;
    i12 = i3 | 1;
    HEAP8[i1 >> 0] = HEAP8[i11 + i3 >> 0] | 0;
    HEAP8[i1 + 1 >> 0] = HEAP8[i11 + i12 >> 0] | 0;
    HEAP8[i1 + 2 >> 0] = HEAP8[i11 + (i12 + 1) >> 0] | 0;
   }
   i1 = i1 + 3 | 0;
   i4 = i4 + 1 | 0;
   i3 = 19;
   continue;
  } else if ((i3 | 0) == 19) {
   i3 = HEAPU8[i4 >> 0] | 0;
   if ((i3 | 0) != (i7 | 0)) {
    i3 = i3 << 2;
    i12 = i3 | 1;
    HEAP8[i1 >> 0] = HEAP8[i11 + i3 >> 0] | 0;
    HEAP8[i1 + 1 >> 0] = HEAP8[i11 + i12 >> 0] | 0;
    HEAP8[i1 + 2 >> 0] = HEAP8[i11 + (i12 + 1) >> 0] | 0;
   }
   i1 = i1 + 3 | 0;
   i4 = i4 + 1 | 0;
   i3 = 22;
   continue;
  } else if ((i3 | 0) == 22) {
   i3 = HEAPU8[i4 >> 0] | 0;
   if ((i3 | 0) != (i7 | 0)) {
    i3 = i3 << 2;
    i12 = i3 | 1;
    HEAP8[i1 >> 0] = HEAP8[i11 + i3 >> 0] | 0;
    HEAP8[i1 + 1 >> 0] = HEAP8[i11 + i12 >> 0] | 0;
    HEAP8[i1 + 2 >> 0] = HEAP8[i11 + (i12 + 1) >> 0] | 0;
   }
   i1 = i1 + 3 | 0;
   i4 = i4 + 1 | 0;
   i3 = 25;
   continue;
  } else if ((i3 | 0) == 25) {
   i3 = HEAPU8[i4 >> 0] | 0;
   if ((i3 | 0) != (i7 | 0)) {
    i3 = i3 << 2;
    i12 = i3 | 1;
    HEAP8[i1 >> 0] = HEAP8[i11 + i3 >> 0] | 0;
    HEAP8[i1 + 1 >> 0] = HEAP8[i11 + i12 >> 0] | 0;
    HEAP8[i1 + 2 >> 0] = HEAP8[i11 + (i12 + 1) >> 0] | 0;
   }
   i4 = i4 + 1 | 0;
   i1 = i1 + 3 | 0;
   if ((i5 | 0) > 1) {
    i5 = i5 + -1 | 0;
    i3 = 4;
    continue;
   } else {
    i3 = 28;
    continue;
   }
  } else if ((i3 | 0) == 28) if (!i2) break L4; else {
   i1 = i1 + i10 | 0;
   i4 = i4 + i9 | 0;
   continue L4;
  }
 }
 return;
}

function _SW_RenderCopyEx(i10, i9, i16, i11, d17, i20, i18) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 i16 = i16 | 0;
 i11 = i11 | 0;
 d17 = +d17;
 i20 = i20 | 0;
 i18 = i18 | 0;
 var i1 = 0, d2 = 0.0, i3 = 0, i4 = 0, d5 = 0.0, i6 = 0, i7 = 0, i8 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, d26 = 0.0, d27 = 0.0, d28 = 0.0, d29 = 0.0, d30 = 0.0, d31 = 0.0, d32 = 0.0, d33 = 0.0, d34 = 0.0, d35 = 0.0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i24 = i25 + 32 | 0;
 i15 = i25 + 24 | 0;
 i22 = i25 + 20 | 0;
 i21 = i25 + 16 | 0;
 i19 = i25 + 8 | 0;
 i23 = i25;
 i6 = i10 + 316 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if (!i1) {
  i3 = i7 + 4 | 0;
  i14 = HEAP32[i3 >> 2] | 0;
  HEAP32[i7 >> 2] = i14;
  i1 = i14;
  if (!i14) {
   i1 = _SDL_GetWindowSurface(HEAP32[i10 + 188 >> 2] | 0) | 0;
   do if (((i1 | 0) != 0 ? (HEAP32[i3 >> 2] = i1, HEAP32[i7 >> 2] = i1, i8 = HEAP32[HEAP32[i6 >> 2] >> 2] | 0, (i8 | 0) != 0) : 0) ? (_SDL_SetClipRect(i8, i10 + 212 | 0) | 0, i4 = HEAP32[HEAP32[i6 >> 2] >> 2] | 0, (i4 | 0) != 0) : 0) if (!(HEAP32[i10 + 276 >> 2] | 0)) {
    _SDL_SetClipRect(i4, 0) | 0;
    break;
   } else {
    _SDL_SetClipRect(i4, i10 + 244 | 0) | 0;
    break;
   } while (0);
   i1 = HEAP32[i7 >> 2] | 0;
  }
  if (!i1) {
   i24 = -1;
   STACKTOP = i25;
   return i24 | 0;
  }
 }
 i6 = HEAP32[i9 + 68 >> 2] | 0;
 i3 = HEAP32[i10 + 212 >> 2] | 0;
 i4 = HEAP32[i10 + 216 >> 2] | 0;
 if (!(i3 | i4)) {
  d5 = +HEAPF32[i11 >> 2];
  d2 = +HEAPF32[i11 + 4 >> 2];
 } else {
  d5 = +(i3 | 0) + +HEAPF32[i11 >> 2];
  d2 = +(i4 | 0) + +HEAPF32[i11 + 4 >> 2];
 }
 i14 = ~~d2;
 i13 = ~~d5;
 i12 = ~~+HEAPF32[i11 + 8 >> 2];
 i10 = ~~+HEAPF32[i11 + 12 >> 2];
 i11 = HEAP32[i6 + 4 >> 2] | 0;
 i11 = _SDL_CreateRGBSurface(0, i12, i10, HEAPU8[i11 + 8 >> 0] | 0, HEAP32[i11 + 12 >> 2] | 0, HEAP32[i11 + 16 >> 2] | 0, HEAP32[i11 + 20 >> 2] | 0, HEAP32[i11 + 24 >> 2] | 0) | 0;
 if (!i11) {
  i24 = -1;
  STACKTOP = i25;
  return i24 | 0;
 }
 _SDL_GetColorKey(i6, i15) | 0;
 _SDL_SetColorKey(i11, 1, HEAP32[i15 >> 2] | 0) | 0;
 i7 = i24 + 4 | 0;
 i8 = i24 + 8 | 0;
 HEAP32[i8 >> 2] = i12;
 i9 = i24 + 12 | 0;
 HEAP32[i9 >> 2] = i10;
 HEAP32[i24 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 i3 = _SDL_UpperBlitScaled(i6, i16, i11, i24) | 0;
 if (i3) {
  i24 = i3;
  STACKTOP = i25;
  return i24 | 0;
 }
 d2 = -d17;
 _SDLgfx_rotozoomSurfaceSizeTrig(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0, d2, i22, i21, i19, i23);
 i4 = (HEAP32[i22 >> 2] | 0) / 2 | 0;
 i6 = (HEAP32[i21 >> 2] | 0) / 2 | 0;
 i3 = _SDL_GetHint(48391) | 0;
 if ((i3 | 0) != 0 ? (HEAP8[i3 >> 0] | 0) != 48 : 0) i3 = (_SDL_strcasecmp(i3, 48416) | 0) != 0 & 1; else i3 = 0;
 i3 = _SDLgfx_rotateSurface(i11, d2, i4, i6, i3, i18 & 1, i18 & 2, HEAP32[i22 >> 2] | 0, HEAP32[i21 >> 2] | 0, +HEAPF64[i19 >> 3], +HEAPF64[i23 >> 3]) | 0;
 if (!i3) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 i15 = ~~+HEAPF32[i20 >> 2];
 i18 = i15 + i13 | 0;
 i16 = ~~+HEAPF32[i20 + 4 >> 2];
 i20 = i16 + i14 | 0;
 d27 = -+HEAPF64[i23 >> 3];
 HEAPF64[i23 >> 3] = d27;
 d2 = +(0 - i15 | 0);
 d5 = +(0 - i16 | 0);
 d35 = +HEAPF64[i19 >> 3];
 d29 = d2 * d35;
 d28 = d5 * d27;
 d34 = +(i18 | 0);
 d30 = d34 + (d29 - d28);
 d2 = d2 * d27;
 d5 = d5 * d35;
 d32 = +(i20 | 0);
 d26 = d32 + (d2 + d5);
 d31 = +(i12 + i13 - i18 | 0);
 d33 = d35 * d31;
 d28 = d34 + (d33 - d28);
 d31 = d31 * d27;
 d5 = d32 + (d5 + d31);
 d17 = +(i10 + i14 - i20 | 0);
 d27 = d17 * d27;
 d29 = d34 + (d29 - d27);
 d17 = d35 * d17;
 d2 = d32 + (d2 + d17);
 d27 = d34 + (d33 - d27);
 d17 = d32 + (d31 + d17);
 d28 = d30 < d28 ? d30 : d28;
 d27 = d29 < d27 ? d29 : d27;
 HEAP32[i24 >> 2] = ~~(d28 < d27 ? d28 : d27);
 d5 = d26 < d5 ? d26 : d5;
 d17 = d2 < d17 ? d2 : d17;
 HEAP32[i7 >> 2] = ~~(d5 < d17 ? d5 : d17);
 HEAP32[i8 >> 2] = HEAP32[i22 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i21 >> 2];
 i24 = _SDL_UpperBlit(i3, 0, i1, i24) | 0;
 _SDL_FreeSurface(i11);
 _SDL_FreeSurface(i3);
 STACKTOP = i25;
 return i24 | 0;
}

function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe(i1, i21, i22, i2, i3, i23, i20) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i23 = i23 | 0;
 i20 = i20 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 576 | 0;
 i15 = i28 + 424 | 0;
 i18 = i28;
 i14 = i28 + 24 | 0;
 i27 = i28 + 16 | 0;
 i16 = i28 + 12 | 0;
 i24 = i28 + 8 | 0;
 i4 = i28 + 464 | 0;
 i12 = i28 + 4 | 0;
 i17 = i28 + 468 | 0;
 HEAP32[i27 >> 2] = i14;
 i26 = i27 + 4 | 0;
 HEAP32[i26 >> 2] = 347;
 HEAP32[i24 >> 2] = __ZNKSt3__18ios_base6getlocEv(i3) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i24, 30376) | 0;
 HEAP8[i4 >> 0] = 0;
 HEAP32[i12 >> 2] = HEAP32[i22 >> 2];
 i13 = HEAP32[i3 + 4 >> 2] | 0;
 HEAP32[i15 >> 2] = HEAP32[i12 >> 2];
 if (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_(i21, i15, i2, i24, i13, i23, i4, i1, i27, i16, i14 + 400 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 31](i1, 63041, 63051, i15) | 0;
  i2 = HEAP32[i16 >> 2] | 0;
  i3 = HEAP32[i27 >> 2] | 0;
  i1 = i2 - i3 | 0;
  if ((i1 | 0) > 392) {
   i1 = _malloc((i1 >> 2) + 2 | 0) | 0;
   if (!i1) __ZSt17__throw_bad_allocv(); else {
    i19 = i1;
    i5 = i1;
   }
  } else {
   i19 = 0;
   i5 = i17;
  }
  if (!(HEAP8[i4 >> 0] | 0)) i1 = i5; else {
   HEAP8[i5 >> 0] = 45;
   i1 = i5 + 1 | 0;
  }
  i13 = i15 + 40 | 0;
  i14 = i15;
  if (i3 >>> 0 < i2 >>> 0) {
   i4 = i15 + 4 | 0;
   i5 = i4 + 4 | 0;
   i6 = i5 + 4 | 0;
   i7 = i6 + 4 | 0;
   i8 = i7 + 4 | 0;
   i9 = i8 + 4 | 0;
   i10 = i9 + 4 | 0;
   i11 = i10 + 4 | 0;
   i12 = i11 + 4 | 0;
   do {
    i2 = HEAP32[i3 >> 2] | 0;
    if ((HEAP32[i15 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i4 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i5 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i6 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i7 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i8 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i9 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i10 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i11 >> 2] | 0) == (i2 | 0)) i2 = i11; else i2 = (HEAP32[i12 >> 2] | 0) == (i2 | 0) ? i12 : i13; else i2 = i10; else i2 = i9; else i2 = i8; else i2 = i7; else i2 = i6; else i2 = i5; else i2 = i4; else i2 = i15;
    HEAP8[i1 >> 0] = HEAP8[63041 + (i2 - i14 >> 2) >> 0] | 0;
    i3 = i3 + 4 | 0;
    i1 = i1 + 1 | 0;
   } while (i3 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0);
  }
  HEAP8[i1 >> 0] = 0;
  HEAP32[i18 >> 2] = i20;
  _sscanf(i17, 63037, i18) | 0;
  if (i19) _free(i19);
 }
 i1 = HEAP32[i21 >> 2] | 0;
 do if (i1) {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i21 >> 2] = 0;
   i3 = 1;
   break;
  } else {
   i3 = (HEAP32[i21 >> 2] | 0) == 0;
   break;
  }
 } else i3 = 1; while (0);
 i1 = HEAP32[i22 >> 2] | 0;
 do if (i1) {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) != -1) if (i3) break; else {
   i25 = 30;
   break;
  } else {
   HEAP32[i22 >> 2] = 0;
   i25 = 28;
   break;
  }
 } else i25 = 28; while (0);
 if ((i25 | 0) == 28 ? i3 : 0) i25 = 30;
 if ((i25 | 0) == 30) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i2 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i24 >> 2] | 0) | 0;
 i1 = HEAP32[i27 >> 2] | 0;
 HEAP32[i27 >> 2] = 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[i26 >> 2] & 511](i1);
 STACKTOP = i28;
 return i2 | 0;
}

function __ZN4Game4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i7 + 8 | 0;
 i5 = i7;
 _srand(_time(0) | 0);
 if (_SDL_Init(32) | 0) {
  i5 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(27316, 34868, 19) | 0;
  i6 = _SDL_GetError() | 0;
  i6 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i5, i6, _strlen(i6) | 0) | 0;
  HEAP32[i4 >> 2] = __ZNKSt3__18ios_base6getlocEv(i6 + (HEAP32[(HEAP32[i6 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
  i5 = __ZNKSt3__16locale9use_facetERNS0_2idE(i4, 30384) | 0;
  i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 63](i5, 10) | 0;
  __ZNSt3__16localeD2Ev(i4);
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i6, i5) | 0;
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i6) | 0;
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 if (!(HEAP8[i1 >> 0] & 1)) i1 = i1 + 1 | 0; else i1 = HEAP32[i1 + 8 >> 2] | 0;
 i2 = i6 + 4 | 0;
 i3 = i6 + 8 | 0;
 i1 = _SDL_CreateWindow(i1, 536805376, 536805376, HEAP32[i2 >> 2] | 0, HEAP32[i3 >> 2] | 0, 4) | 0;
 HEAP32[i6 >> 2] = i1;
 if (!i1) {
  i5 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(27316, 34888, 22) | 0;
  i6 = _SDL_GetError() | 0;
  i6 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i5, i6, _strlen(i6) | 0) | 0;
  HEAP32[i4 >> 2] = __ZNKSt3__18ios_base6getlocEv(i6 + (HEAP32[(HEAP32[i6 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
  i5 = __ZNKSt3__16locale9use_facetERNS0_2idE(i4, 30384) | 0;
  i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 63](i5, 10) | 0;
  __ZNSt3__16localeD2Ev(i4);
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i6, i5) | 0;
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i6) | 0;
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i1 = _SDL_CreateRenderer(i1, -1, 2) | 0;
 HEAP32[i6 + 12 >> 2] = i1;
 if (!i1) {
  i5 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(27316, 34911, 24) | 0;
  i6 = _SDL_GetError() | 0;
  i6 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i5, i6, _strlen(i6) | 0) | 0;
  HEAP32[i4 >> 2] = __ZNKSt3__18ios_base6getlocEv(i6 + (HEAP32[(HEAP32[i6 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
  i5 = __ZNKSt3__16locale9use_facetERNS0_2idE(i4, 30384) | 0;
  i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 63](i5, 10) | 0;
  __ZNSt3__16localeD2Ev(i4);
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i6, i5) | 0;
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i6) | 0;
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 } else {
  _SDL_SetRenderDrawColor(i1, 0, -1, -1, -1) | 0;
  HEAPF32[i5 >> 2] = 400.0;
  HEAPF32[i5 + 4 >> 2] = 300.0;
  i4 = i6 + 16 | 0;
  __ZN17GameObjectManager11spawnPlayerER5Vec2f(HEAP32[i4 >> 2] | 0, i5);
  __ZN17GameObjectManager14spawnObstaclesEiiiii(HEAP32[i4 >> 2] | 0, HEAP32[i2 >> 2] | 0, HEAP32[i3 >> 2] | 0, 20, 50, 3);
  i5 = i6 + 20 | 0;
  __ZN11KeyBindings4bindE6Actioni(HEAP32[i5 >> 2] | 0, 0, 26);
  __ZN11KeyBindings4bindE6Actioni(HEAP32[i5 >> 2] | 0, 1, 22);
  __ZN11KeyBindings4bindE6Actioni(HEAP32[i5 >> 2] | 0, 2, 4);
  __ZN11KeyBindings4bindE6Actioni(HEAP32[i5 >> 2] | 0, 3, 7);
  __ZN11KeyBindings4bindE6Actioni(HEAP32[i5 >> 2] | 0, 4, 82);
  __ZN11KeyBindings4bindE6Actioni(HEAP32[i5 >> 2] | 0, 5, 81);
  __ZN11KeyBindings4bindE6Actioni(HEAP32[i5 >> 2] | 0, 6, 80);
  __ZN11KeyBindings4bindE6Actioni(HEAP32[i5 >> 2] | 0, 7, 79);
  __ZN5Clock5startEv(i6 + 24 | 0);
  i6 = 1;
  STACKTOP = i7;
  return i6 | 0;
 }
 return 0;
}

function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe(i1, i23, i8, i19, i18, d5) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i8 = i8 | 0;
 i19 = i19 | 0;
 i18 = i18 | 0;
 d5 = +d5;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 992 | 0;
 i10 = i28 + 8 | 0;
 i3 = i28;
 i1 = i28 + 888 | 0;
 i4 = i28 + 880 | 0;
 i2 = i28 + 480 | 0;
 i20 = i28 + 76 | 0;
 i15 = i28 + 884 | 0;
 i12 = i28 + 72 | 0;
 i16 = i28 + 68 | 0;
 i25 = i28 + 56 | 0;
 i27 = i28 + 44 | 0;
 i26 = i28 + 32 | 0;
 i7 = i28 + 28 | 0;
 i9 = i28 + 80 | 0;
 i14 = i28 + 24 | 0;
 i13 = i28 + 20 | 0;
 i11 = i28 + 16 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAPF64[i10 >> 3] = d5;
 i1 = _snprintf(i1, 100, 63052, i10) | 0;
 if (i1 >>> 0 > 99) {
  i1 = __ZNSt3__16__clocEv() | 0;
  HEAPF64[i3 >> 3] = d5;
  i1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i4, i1, 63052, i3) | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  if (!i2) __ZSt17__throw_bad_allocv();
  i3 = _malloc(i1 << 2) | 0;
  if (!i3) __ZSt17__throw_bad_allocv(); else {
   i29 = i3;
   i30 = i2;
   i17 = i3;
   i22 = i1;
  }
 } else {
  i29 = 0;
  i30 = 0;
  i17 = i2;
  i22 = i1;
 }
 i1 = __ZNKSt3__18ios_base6getlocEv(i19) | 0;
 HEAP32[i20 >> 2] = i1;
 i6 = __ZNKSt3__16locale9use_facetERNS0_2idE(i20, 30376) | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 48 >> 2] & 31](i6, i3, i3 + i22 | 0, i17) | 0;
 if (!i22) i4 = 0; else i4 = (HEAP8[HEAP32[i4 >> 2] >> 0] | 0) == 45;
 HEAP32[i25 >> 2] = 0;
 HEAP32[i25 + 4 >> 2] = 0;
 HEAP32[i25 + 8 >> 2] = 0;
 HEAP32[i27 >> 2] = 0;
 HEAP32[i27 + 4 >> 2] = 0;
 HEAP32[i27 + 8 >> 2] = 0;
 HEAP32[i26 >> 2] = 0;
 HEAP32[i26 + 4 >> 2] = 0;
 HEAP32[i26 + 8 >> 2] = 0;
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri(i8, i4, i20, i15, i12, i16, i25, i27, i26, i7);
 i3 = HEAP32[i7 >> 2] | 0;
 if ((i22 | 0) > (i3 | 0)) {
  i8 = HEAP8[i26 >> 0] | 0;
  i2 = HEAP8[i27 >> 0] | 0;
  i2 = (i22 - i3 << 1 | 1) + i3 + ((i8 & 1) == 0 ? (i8 & 255) >>> 1 : HEAP32[i26 + 4 >> 2] | 0) + ((i2 & 1) == 0 ? (i2 & 255) >>> 1 : HEAP32[i27 + 4 >> 2] | 0) | 0;
 } else {
  i8 = HEAP8[i26 >> 0] | 0;
  i2 = HEAP8[i27 >> 0] | 0;
  i2 = i3 + 2 + ((i8 & 1) == 0 ? (i8 & 255) >>> 1 : HEAP32[i26 + 4 >> 2] | 0) + ((i2 & 1) == 0 ? (i2 & 255) >>> 1 : HEAP32[i27 + 4 >> 2] | 0) | 0;
 }
 if (i2 >>> 0 > 100) {
  i2 = _malloc(i2 << 2) | 0;
  if (!i2) __ZSt17__throw_bad_allocv(); else {
   i24 = i2;
   i21 = i2;
  }
 } else {
  i24 = 0;
  i21 = i9;
 }
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i(i21, i14, i13, HEAP32[i19 + 4 >> 2] | 0, i17, i17 + (i22 << 2) | 0, i6, i4, i15, HEAP32[i12 >> 2] | 0, HEAP32[i16 >> 2] | 0, i25, i27, i26, i3);
 HEAP32[i11 >> 2] = HEAP32[i23 >> 2];
 i23 = HEAP32[i14 >> 2] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
 i2 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i21, i23, i2, i19, i18) | 0;
 if (i24) {
  _free(i24);
  i1 = HEAP32[i20 >> 2] | 0;
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i26);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i27);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i25);
 __ZNSt3__114__shared_count16__release_sharedEv(i1) | 0;
 if (i29) _free(i29);
 if (i30) _free(i30);
 STACKTOP = i28;
 return i2 | 0;
}

function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe(i1, i21, i22, i2, i3, i23, i20) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i23 = i23 | 0;
 i20 = i20 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i17 = i28 + 24 | 0;
 i18 = i28;
 i14 = i28 + 136 | 0;
 i27 = i28 + 16 | 0;
 i16 = i28 + 12 | 0;
 i24 = i28 + 8 | 0;
 i4 = i28 + 134 | 0;
 i12 = i28 + 4 | 0;
 i15 = i28 + 124 | 0;
 HEAP32[i27 >> 2] = i14;
 i26 = i27 + 4 | 0;
 HEAP32[i26 >> 2] = 347;
 HEAP32[i24 >> 2] = __ZNKSt3__18ios_base6getlocEv(i3) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i24, 30384) | 0;
 HEAP8[i4 >> 0] = 0;
 HEAP32[i12 >> 2] = HEAP32[i22 >> 2];
 i13 = HEAP32[i3 + 4 >> 2] | 0;
 HEAP32[i17 >> 2] = HEAP32[i12 >> 2];
 if (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_(i21, i17, i2, i24, i13, i23, i4, i1, i27, i16, i14 + 100 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 31](i1, 63026, 63036, i15) | 0;
  i2 = HEAP32[i16 >> 2] | 0;
  i3 = HEAP32[i27 >> 2] | 0;
  i1 = i2 - i3 | 0;
  if ((i1 | 0) > 98) {
   i1 = _malloc(i1 + 2 | 0) | 0;
   if (!i1) __ZSt17__throw_bad_allocv(); else {
    i19 = i1;
    i5 = i1;
   }
  } else {
   i19 = 0;
   i5 = i17;
  }
  if (!(HEAP8[i4 >> 0] | 0)) i1 = i5; else {
   HEAP8[i5 >> 0] = 45;
   i1 = i5 + 1 | 0;
  }
  i13 = i15 + 10 | 0;
  i14 = i15;
  if (i3 >>> 0 < i2 >>> 0) {
   i4 = i15 + 1 | 0;
   i5 = i4 + 1 | 0;
   i6 = i5 + 1 | 0;
   i7 = i6 + 1 | 0;
   i8 = i7 + 1 | 0;
   i9 = i8 + 1 | 0;
   i10 = i9 + 1 | 0;
   i11 = i10 + 1 | 0;
   i12 = i11 + 1 | 0;
   do {
    i2 = HEAP8[i3 >> 0] | 0;
    if ((HEAP8[i15 >> 0] | 0) != i2 << 24 >> 24) if ((HEAP8[i4 >> 0] | 0) != i2 << 24 >> 24) if ((HEAP8[i5 >> 0] | 0) != i2 << 24 >> 24) if ((HEAP8[i6 >> 0] | 0) != i2 << 24 >> 24) if ((HEAP8[i7 >> 0] | 0) != i2 << 24 >> 24) if ((HEAP8[i8 >> 0] | 0) != i2 << 24 >> 24) if ((HEAP8[i9 >> 0] | 0) != i2 << 24 >> 24) if ((HEAP8[i10 >> 0] | 0) != i2 << 24 >> 24) if ((HEAP8[i11 >> 0] | 0) == i2 << 24 >> 24) i2 = i11; else i2 = (HEAP8[i12 >> 0] | 0) == i2 << 24 >> 24 ? i12 : i13; else i2 = i10; else i2 = i9; else i2 = i8; else i2 = i7; else i2 = i6; else i2 = i5; else i2 = i4; else i2 = i15;
    HEAP8[i1 >> 0] = HEAP8[63026 + (i2 - i14) >> 0] | 0;
    i3 = i3 + 1 | 0;
    i1 = i1 + 1 | 0;
   } while (i3 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0);
  }
  HEAP8[i1 >> 0] = 0;
  HEAP32[i18 >> 2] = i20;
  _sscanf(i17, 63037, i18) | 0;
  if (i19) _free(i19);
 }
 i1 = HEAP32[i21 >> 2] | 0;
 do if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
   HEAP32[i21 >> 2] = 0;
   i1 = 0;
   break;
  } else {
   i1 = HEAP32[i21 >> 2] | 0;
   break;
  }
 } else i1 = 0; while (0);
 i1 = (i1 | 0) == 0;
 i2 = HEAP32[i22 >> 2] | 0;
 do if (i2) {
  if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1 : 0) {
   HEAP32[i22 >> 2] = 0;
   i25 = 25;
   break;
  }
  if (!i1) i25 = 26;
 } else i25 = 25; while (0);
 if ((i25 | 0) == 25 ? i1 : 0) i25 = 26;
 if ((i25 | 0) == 26) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i2 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i24 >> 2] | 0) | 0;
 i1 = HEAP32[i27 >> 2] | 0;
 HEAP32[i27 >> 2] = 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[i26 >> 2] & 511](i1);
 STACKTOP = i28;
 return i2 | 0;
}

function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce(i1, i23, i8, i19, i18, d5) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i8 = i8 | 0;
 i19 = i19 | 0;
 i18 = i18 | 0;
 d5 = +d5;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 384 | 0;
 i10 = i28 + 8 | 0;
 i3 = i28;
 i1 = i28 + 284 | 0;
 i4 = i28 + 72 | 0;
 i2 = i28 + 184 | 0;
 i20 = i28 + 68 | 0;
 i15 = i28 + 80 | 0;
 i12 = i28 + 77 | 0;
 i16 = i28 + 76 | 0;
 i25 = i28 + 56 | 0;
 i27 = i28 + 44 | 0;
 i26 = i28 + 32 | 0;
 i7 = i28 + 28 | 0;
 i9 = i28 + 84 | 0;
 i14 = i28 + 24 | 0;
 i13 = i28 + 20 | 0;
 i11 = i28 + 16 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAPF64[i10 >> 3] = d5;
 i1 = _snprintf(i1, 100, 63052, i10) | 0;
 if (i1 >>> 0 > 99) {
  i1 = __ZNSt3__16__clocEv() | 0;
  HEAPF64[i3 >> 3] = d5;
  i1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i4, i1, 63052, i3) | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  if (!i2) __ZSt17__throw_bad_allocv();
  i3 = _malloc(i1) | 0;
  if (!i3) __ZSt17__throw_bad_allocv(); else {
   i29 = i3;
   i30 = i2;
   i17 = i3;
   i22 = i1;
  }
 } else {
  i29 = 0;
  i30 = 0;
  i17 = i2;
  i22 = i1;
 }
 i1 = __ZNKSt3__18ios_base6getlocEv(i19) | 0;
 HEAP32[i20 >> 2] = i1;
 i6 = __ZNKSt3__16locale9use_facetERNS0_2idE(i20, 30384) | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 32 >> 2] & 31](i6, i3, i3 + i22 | 0, i17) | 0;
 if (!i22) i4 = 0; else i4 = (HEAP8[HEAP32[i4 >> 2] >> 0] | 0) == 45;
 HEAP32[i25 >> 2] = 0;
 HEAP32[i25 + 4 >> 2] = 0;
 HEAP32[i25 + 8 >> 2] = 0;
 HEAP32[i27 >> 2] = 0;
 HEAP32[i27 + 4 >> 2] = 0;
 HEAP32[i27 + 8 >> 2] = 0;
 HEAP32[i26 >> 2] = 0;
 HEAP32[i26 + 4 >> 2] = 0;
 HEAP32[i26 + 8 >> 2] = 0;
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri(i8, i4, i20, i15, i12, i16, i25, i27, i26, i7);
 i3 = HEAP32[i7 >> 2] | 0;
 if ((i22 | 0) > (i3 | 0)) {
  i8 = HEAP8[i26 >> 0] | 0;
  i2 = HEAP8[i27 >> 0] | 0;
  i2 = (i22 - i3 << 1 | 1) + i3 + ((i8 & 1) == 0 ? (i8 & 255) >>> 1 : HEAP32[i26 + 4 >> 2] | 0) + ((i2 & 1) == 0 ? (i2 & 255) >>> 1 : HEAP32[i27 + 4 >> 2] | 0) | 0;
 } else {
  i8 = HEAP8[i26 >> 0] | 0;
  i2 = HEAP8[i27 >> 0] | 0;
  i2 = i3 + 2 + ((i8 & 1) == 0 ? (i8 & 255) >>> 1 : HEAP32[i26 + 4 >> 2] | 0) + ((i2 & 1) == 0 ? (i2 & 255) >>> 1 : HEAP32[i27 + 4 >> 2] | 0) | 0;
 }
 if (i2 >>> 0 > 100) {
  i2 = _malloc(i2) | 0;
  if (!i2) __ZSt17__throw_bad_allocv(); else {
   i24 = i2;
   i21 = i2;
  }
 } else {
  i24 = 0;
  i21 = i9;
 }
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i(i21, i14, i13, HEAP32[i19 + 4 >> 2] | 0, i17, i17 + i22 | 0, i6, i4, i15, HEAP8[i12 >> 0] | 0, HEAP8[i16 >> 0] | 0, i25, i27, i26, i3);
 HEAP32[i11 >> 2] = HEAP32[i23 >> 2];
 i23 = HEAP32[i14 >> 2] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
 i2 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i21, i23, i2, i19, i18) | 0;
 if (i24) {
  _free(i24);
  i1 = HEAP32[i20 >> 2] | 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i26);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i27);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i25);
 __ZNSt3__114__shared_count16__release_sharedEv(i1) | 0;
 if (i29) _free(i29);
 if (i30) _free(i30);
 STACKTOP = i28;
 return i2 | 0;
}

function _SDL_GameControllerAddMapping(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i18 = i20 + 120 | 0;
 i12 = i20 + 80 | 0;
 i9 = i20 + 72 | 0;
 i2 = i20 + 64 | 0;
 i1 = i20 + 56 | 0;
 i19 = i20;
 i15 = i20 + 104 | 0;
 i3 = i20 + 88 | 0;
 if (!i11) {
  HEAP32[i1 >> 2] = 37155;
  i19 = _SDL_SetError(41366, i1) | 0;
  STACKTOP = i20;
  return i19 | 0;
 }
 i1 = _SDL_strchr(i11, 44) | 0;
 do if (i1) {
  i1 = i1 - i11 | 0;
  i4 = _SDL_malloc(i1 + 1 | 0) | 0;
  if (!i4) {
   _SDL_Error(0) | 0;
   break;
  }
  _SDL_memcpy(i4, i11, i1) | 0;
  HEAP8[i4 + i1 >> 0] = 0;
  i6 = (_SDL_strcasecmp(i4, 37197) | 0) == 0;
  i7 = (_SDL_strcasecmp(i4, 44402) | 0) == 0;
  _SDL_JoystickGetGUIDFromString(i3, i4);
  i16 = i15;
  i13 = i3;
  i14 = i16 + 16 | 0;
  do {
   HEAP8[i16 >> 0] = HEAP8[i13 >> 0] | 0;
   i16 = i16 + 1 | 0;
   i13 = i13 + 1 | 0;
  } while ((i16 | 0) < (i14 | 0));
  _SDL_free(i4);
  i1 = _SDL_strchr(i11, 44) | 0;
  do if ((i1 | 0) != 0 ? (i8 = i1 + 1 | 0, i5 = _SDL_strchr(i8, 44) | 0, (i5 | 0) != 0) : 0) {
   i1 = i5 - i1 | 0;
   i2 = _SDL_malloc(i1) | 0;
   if (!i2) {
    _SDL_Error(0) | 0;
    break;
   }
   _SDL_memcpy(i2, i8, i1) | 0;
   HEAP8[i2 + (i1 + -1) >> 0] = 0;
   i1 = _SDL_strchr(i11, 44) | 0;
   if (((i1 | 0) != 0 ? (i10 = _SDL_strchr(i1 + 1 | 0, 44) | 0, (i10 | 0) != 0) : 0) ? (i17 = _SDL_strdup(i10 + 1 | 0) | 0, (i17 | 0) != 0) : 0) {
    i1 = HEAP32[3038] | 0;
    L20 : do if (i1) {
     while (1) {
      if (!(_SDL_memcmp(i15, i1, 16) | 0)) {
       i9 = i1;
       i8 = i1;
       break;
      }
      i1 = HEAP32[i1 + 24 >> 2] | 0;
      if (!i1) break L20;
     }
     i7 = i8 + 16 | 0;
     _SDL_free(HEAP32[i7 >> 2] | 0);
     HEAP32[i7 >> 2] = i2;
     i6 = i8 + 20 | 0;
     _SDL_free(HEAP32[i6 >> 2] | 0);
     HEAP32[i6 >> 2] = i17;
     i1 = HEAP32[3036] | 0;
     if (!i1) {
      i19 = 0;
      STACKTOP = i20;
      return i19 | 0;
     }
     i5 = i19 + 8 | 0;
     do {
      i2 = i1 + 12 | 0;
      if (!(_SDL_memcmp(i2, i9, 16) | 0)) {
       HEAP32[i19 >> 2] = 1621;
       HEAP32[i5 >> 2] = HEAP32[HEAP32[i1 >> 2] >> 2];
       _SDL_PushEvent(i19) | 0;
       i3 = HEAP32[i7 >> 2] | 0;
       i4 = HEAP32[i6 >> 2] | 0;
       i16 = i18;
       i13 = i8;
       i14 = i16 + 16 | 0;
       do {
        HEAP8[i16 >> 0] = HEAP8[i13 >> 0] | 0;
        i16 = i16 + 1 | 0;
        i13 = i13 + 1 | 0;
       } while ((i16 | 0) < (i14 | 0));
       _SDL_PrivateLoadButtonMapping(i2, i18, i3, i4);
      }
      i1 = HEAP32[i1 + 896 >> 2] | 0;
     } while ((i1 | 0) != 0);
     i1 = 0;
     STACKTOP = i20;
     return i1 | 0;
    } while (0);
    i1 = _SDL_malloc(28) | 0;
    if (!i1) {
     _SDL_free(i2);
     _SDL_free(i17);
     i19 = _SDL_Error(0) | 0;
     STACKTOP = i20;
     return i19 | 0;
    }
    if (i6) HEAP32[3039] = i1;
    if (i7) HEAP32[3037] = i1;
    i16 = i1;
    i13 = i15;
    i14 = i16 + 16 | 0;
    do {
     HEAP8[i16 >> 0] = HEAP8[i13 >> 0] | 0;
     i16 = i16 + 1 | 0;
     i13 = i13 + 1 | 0;
    } while ((i16 | 0) < (i14 | 0));
    HEAP32[i1 + 16 >> 2] = i2;
    HEAP32[i1 + 20 >> 2] = i17;
    HEAP32[i1 + 24 >> 2] = HEAP32[3038];
    HEAP32[3038] = i1;
    i19 = 1;
    STACKTOP = i20;
    return i19 | 0;
   }
   _SDL_free(i2);
   HEAP32[i12 >> 2] = i11;
   i19 = _SDL_SetError(37232, i12) | 0;
   STACKTOP = i20;
   return i19 | 0;
  } while (0);
  HEAP32[i9 >> 2] = i11;
  i19 = _SDL_SetError(37204, i9) | 0;
  STACKTOP = i20;
  return i19 | 0;
 } while (0);
 HEAP32[i2 >> 2] = i11;
 i19 = _SDL_SetError(37169, i2) | 0;
 STACKTOP = i20;
 return i19 | 0;
}

function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE(i12, i10, i11, i9, i1) {
 i12 = i12 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = i10;
 if ((((i1 & 4 | 0) != 0 ? (i8 - i12 | 0) > 2 : 0) ? (HEAP8[i12 >> 0] | 0) == -17 : 0) ? (HEAP8[i12 + 1 >> 0] | 0) == -69 : 0) i1 = (HEAP8[i12 + 2 >> 0] | 0) == -65 ? i12 + 3 | 0 : i12; else i1 = i12;
 L7 : do if ((i11 | 0) != 0 & i1 >>> 0 < i10 >>> 0) {
  i7 = i1;
  i2 = 0;
  L8 : while (1) {
   i1 = HEAP8[i7 >> 0] | 0;
   i6 = i1 & 255;
   if (i6 >>> 0 > i9 >>> 0) {
    i1 = i7;
    i2 = 42;
    break L7;
   }
   do if (i1 << 24 >> 24 > -1) i1 = i7 + 1 | 0; else {
    if ((i1 & 255) < 194) {
     i1 = i7;
     i2 = 42;
     break L7;
    }
    if ((i1 & 255) < 224) {
     if ((i8 - i7 | 0) < 2) {
      i1 = i7;
      i2 = 42;
      break L7;
     }
     i1 = HEAPU8[i7 + 1 >> 0] | 0;
     if ((i1 & 192 | 0) != 128) {
      i1 = i7;
      i2 = 42;
      break L7;
     }
     if ((i1 & 63 | i6 << 6 & 1984) >>> 0 > i9 >>> 0) {
      i1 = i7;
      i2 = 42;
      break L7;
     }
     i1 = i7 + 2 | 0;
     break;
    }
    if ((i1 & 255) < 240) {
     i1 = i7;
     if ((i8 - i1 | 0) < 3) {
      i1 = i7;
      i2 = 42;
      break L7;
     }
     i4 = HEAP8[i7 + 1 >> 0] | 0;
     i3 = HEAP8[i7 + 2 >> 0] | 0;
     switch (i6 | 0) {
     case 224:
      {
       if ((i4 & -32) << 24 >> 24 != -96) {
        i2 = 20;
        break L8;
       }
       break;
      }
     case 237:
      {
       if ((i4 & -32) << 24 >> 24 != -128) {
        i2 = 22;
        break L8;
       }
       break;
      }
     default:
      if ((i4 & -64) << 24 >> 24 != -128) {
       i2 = 24;
       break L8;
      }
     }
     i1 = i3 & 255;
     if ((i1 & 192 | 0) != 128) {
      i1 = i7;
      i2 = 42;
      break L7;
     }
     if (((i4 & 255) << 6 & 4032 | i6 << 12 & 61440 | i1 & 63) >>> 0 > i9 >>> 0) {
      i1 = i7;
      i2 = 42;
      break L7;
     }
     i1 = i7 + 3 | 0;
     break;
    }
    if ((i1 & 255) >= 245) {
     i1 = i7;
     i2 = 42;
     break L7;
    }
    i1 = i7;
    if ((i11 - i2 | 0) >>> 0 < 2 | (i8 - i1 | 0) < 4) {
     i1 = i7;
     i2 = 42;
     break L7;
    }
    i5 = HEAP8[i7 + 1 >> 0] | 0;
    i3 = HEAP8[i7 + 2 >> 0] | 0;
    i4 = HEAP8[i7 + 3 >> 0] | 0;
    switch (i6 | 0) {
    case 240:
     {
      if ((i5 + 112 & 255) >= 48) {
       i2 = 32;
       break L8;
      }
      break;
     }
    case 244:
     {
      if ((i5 & -16) << 24 >> 24 != -128) {
       i2 = 34;
       break L8;
      }
      break;
     }
    default:
     if ((i5 & -64) << 24 >> 24 != -128) {
      i2 = 36;
      break L8;
     }
    }
    i3 = i3 & 255;
    if ((i3 & 192 | 0) != 128) {
     i1 = i7;
     i2 = 42;
     break L7;
    }
    i1 = i4 & 255;
    if ((i1 & 192 | 0) != 128) {
     i1 = i7;
     i2 = 42;
     break L7;
    }
    if (((i5 & 255) << 12 & 258048 | i6 << 18 & 1835008 | i3 << 6 & 4032 | i1 & 63) >>> 0 > i9 >>> 0) {
     i1 = i7;
     i2 = 42;
     break L7;
    }
    i1 = i7 + 4 | 0;
    i2 = i2 + 1 | 0;
   } while (0);
   i2 = i2 + 1 | 0;
   if (!(i2 >>> 0 < i11 >>> 0 & i1 >>> 0 < i10 >>> 0)) {
    i2 = 42;
    break L7;
   } else i7 = i1;
  }
  if ((i2 | 0) == 20) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 22) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 24) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 32) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 34) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 36) {
   i1 = i1 - i12 | 0;
   break;
  }
 } else i2 = 42; while (0);
 if ((i2 | 0) == 42) i1 = i1 - i12 | 0;
 return i1 | 0;
}

function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE(i1, i10, i11, i3, i12, i13, i9, i2) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i3 = i3 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i14 = 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i13 >> 2] = i3;
 if (i2 & 4) {
  i1 = HEAP32[i11 >> 2] | 0;
  i2 = i10;
  if ((((i2 - i1 | 0) > 2 ? (HEAP8[i1 >> 0] | 0) == -17 : 0) ? (HEAP8[i1 + 1 >> 0] | 0) == -69 : 0) ? (HEAP8[i1 + 2 >> 0] | 0) == -65 : 0) {
   HEAP32[i11 >> 2] = i1 + 3;
   i4 = HEAP32[i13 >> 2] | 0;
  } else i4 = i3;
 } else {
  i4 = i3;
  i2 = i10;
 }
 i8 = i12;
 i3 = HEAP32[i11 >> 2] | 0;
 i1 = i3 >>> 0 < i10 >>> 0;
 L9 : do if (i1 & i4 >>> 0 < i12 >>> 0) while (1) {
  i1 = HEAP8[i3 >> 0] | 0;
  i6 = i1 & 255;
  if (i6 >>> 0 > i9 >>> 0) {
   i1 = 2;
   break L9;
  }
  do if (i1 << 24 >> 24 > -1) {
   HEAP16[i4 >> 1] = i1 & 255;
   HEAP32[i11 >> 2] = i3 + 1;
  } else {
   if ((i1 & 255) < 194) {
    i1 = 2;
    break L9;
   }
   if ((i1 & 255) < 224) {
    if ((i2 - i3 | 0) < 2) {
     i1 = 1;
     break L9;
    }
    i1 = HEAPU8[i3 + 1 >> 0] | 0;
    if ((i1 & 192 | 0) != 128) {
     i1 = 2;
     break L9;
    }
    i1 = i1 & 63 | i6 << 6 & 1984;
    if (i1 >>> 0 > i9 >>> 0) {
     i1 = 2;
     break L9;
    }
    HEAP16[i4 >> 1] = i1;
    HEAP32[i11 >> 2] = i3 + 2;
    break;
   }
   if ((i1 & 255) < 240) {
    if ((i2 - i3 | 0) < 3) {
     i1 = 1;
     break L9;
    }
    i5 = HEAP8[i3 + 1 >> 0] | 0;
    i1 = HEAP8[i3 + 2 >> 0] | 0;
    switch (i6 | 0) {
    case 224:
     {
      if ((i5 & -32) << 24 >> 24 != -96) {
       i1 = 2;
       break L9;
      }
      break;
     }
    case 237:
     {
      if ((i5 & -32) << 24 >> 24 != -128) {
       i1 = 2;
       break L9;
      }
      break;
     }
    default:
     if ((i5 & -64) << 24 >> 24 != -128) {
      i1 = 2;
      break L9;
     }
    }
    i1 = i1 & 255;
    if ((i1 & 192 | 0) != 128) {
     i1 = 2;
     break L9;
    }
    i1 = (i5 & 255) << 6 & 4032 | i6 << 12 | i1 & 63;
    if ((i1 & 65535) >>> 0 > i9 >>> 0) {
     i1 = 2;
     break L9;
    }
    HEAP16[i4 >> 1] = i1;
    HEAP32[i11 >> 2] = i3 + 3;
    break;
   }
   if ((i1 & 255) >= 245) {
    i1 = 2;
    break L9;
   }
   if ((i2 - i3 | 0) < 4) {
    i1 = 1;
    break L9;
   }
   i5 = HEAP8[i3 + 1 >> 0] | 0;
   i1 = HEAP8[i3 + 2 >> 0] | 0;
   i3 = HEAP8[i3 + 3 >> 0] | 0;
   switch (i6 | 0) {
   case 240:
    {
     if ((i5 + 112 & 255) >= 48) {
      i1 = 2;
      break L9;
     }
     break;
    }
   case 244:
    {
     if ((i5 & -16) << 24 >> 24 != -128) {
      i1 = 2;
      break L9;
     }
     break;
    }
   default:
    if ((i5 & -64) << 24 >> 24 != -128) {
     i1 = 2;
     break L9;
    }
   }
   i7 = i1 & 255;
   if ((i7 & 192 | 0) != 128) {
    i1 = 2;
    break L9;
   }
   i1 = i3 & 255;
   if ((i1 & 192 | 0) != 128) {
    i1 = 2;
    break L9;
   }
   if ((i8 - i4 | 0) < 4) {
    i1 = 1;
    break L9;
   }
   i6 = i6 & 7;
   i3 = i5 & 255;
   i5 = i7 << 6;
   i1 = i1 & 63;
   if ((i3 << 12 & 258048 | i6 << 18 | i5 & 4032 | i1) >>> 0 > i9 >>> 0) {
    i1 = 2;
    break L9;
   }
   HEAP16[i4 >> 1] = i3 << 2 & 60 | i7 >>> 4 & 3 | ((i3 >>> 4 & 3 | i6 << 2) << 6) + 16320 | 55296;
   i7 = i4 + 2 | 0;
   HEAP32[i13 >> 2] = i7;
   HEAP16[i7 >> 1] = i1 | i5 & 960 | 56320;
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 4;
  } while (0);
  i4 = (HEAP32[i13 >> 2] | 0) + 2 | 0;
  HEAP32[i13 >> 2] = i4;
  i3 = HEAP32[i11 >> 2] | 0;
  i1 = i3 >>> 0 < i10 >>> 0;
  if (!(i1 & i4 >>> 0 < i12 >>> 0)) {
   i14 = 39;
   break;
  }
 } else i14 = 39; while (0);
 if ((i14 | 0) == 39) i1 = i1 & 1;
 return i1 | 0;
}

function _SDL_SW_CreateYUVTexture(i9, i11, i10) {
 i9 = i9 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i12 = 0, d13 = 0.0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i12;
 L1 : do if ((i9 | 0) < 1431918169) if ((i9 | 0) < 844715353) switch (i9 | 0) {
 case 842094169:
  break L1;
 default:
  {
   i2 = 2;
   break L1;
  }
 } else switch (i9 | 0) {
 case 844715353:
  break L1;
 default:
  {
   i2 = 2;
   break L1;
  }
 } else {
  if ((i9 | 0) < 1448433993) switch (i9 | 0) {
  case 1431918169:
   break L1;
  default:
   {
    i2 = 2;
    break L1;
   }
  }
  if ((i9 | 0) < 1498831189) switch (i9 | 0) {
  case 1448433993:
   break L1;
  default:
   {
    i2 = 2;
    break L1;
   }
  } else switch (i9 | 0) {
  case 1498831189:
   break L1;
  default:
   {
    i2 = 2;
    break L1;
   }
  }
 } while (0);
 if ((i2 | 0) == 2) {
  _SDL_SetError(38217, i1) | 0;
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i1 = _SDL_calloc(1, 64) | 0;
 if (!i1) {
  _SDL_Error(0) | 0;
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 HEAP32[i1 >> 2] = i9;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = i11;
 HEAP32[i1 + 12 >> 2] = i10;
 i7 = i11 << 1;
 i5 = i1 + 16 | 0;
 HEAP32[i5 >> 2] = _SDL_malloc(Math_imul(i7, i10) | 0) | 0;
 i3 = i1 + 20 | 0;
 HEAP32[i3 >> 2] = _SDL_malloc(4096) | 0;
 i2 = _SDL_malloc(9216) | 0;
 i4 = i1 + 24 | 0;
 HEAP32[i4 >> 2] = i2;
 i5 = HEAP32[i5 >> 2] | 0;
 i6 = i5;
 if ((i5 | 0) != 0 ? (i8 = HEAP32[i3 >> 2] | 0, !((i2 | 0) == 0 | (i8 | 0) == 0)) : 0) {
  i2 = 0;
  do {
   d13 = +(i2 + -128 | 0);
   HEAP32[i8 + (i2 << 2) >> 2] = ~~(d13 * 1.4013377926421404);
   HEAP32[i8 + (i2 + 256 << 2) >> 2] = ~~(d13 * -.7136038186157518);
   HEAP32[i8 + (i2 + 512 << 2) >> 2] = ~~(d13 * -.34441087613293053);
   HEAP32[i8 + (i2 + 768 << 2) >> 2] = ~~(d13 * 1.7734138972809665);
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != 256);
  L26 : do if ((i9 | 0) < 1431918169) if ((i9 | 0) < 844715353) {
   switch (i9 | 0) {
   case 842094169:
    {
     i2 = 10;
     break L26;
    }
   default:
    {}
   }
   STACKTOP = i12;
   return i1 | 0;
  } else {
   switch (i9 | 0) {
   case 844715353:
    {
     i2 = 11;
     break L26;
    }
   default:
    {}
   }
   STACKTOP = i12;
   return i1 | 0;
  } else {
   if ((i9 | 0) < 1448433993) {
    switch (i9 | 0) {
    case 1431918169:
     {
      i2 = 11;
      break L26;
     }
    default:
     {}
    }
    STACKTOP = i12;
    return i1 | 0;
   }
   if ((i9 | 0) < 1498831189) {
    switch (i9 | 0) {
    case 1448433993:
     {
      i2 = 10;
      break L26;
     }
    default:
     {}
    }
    STACKTOP = i12;
    return i1 | 0;
   } else {
    switch (i9 | 0) {
    case 1498831189:
     {
      i2 = 11;
      break L26;
     }
    default:
     {}
    }
    STACKTOP = i12;
    return i1 | 0;
   }
  } while (0);
  if ((i2 | 0) == 10) {
   i8 = i11 & 65535;
   HEAP16[i1 + 36 >> 1] = i8;
   i9 = i11 >>> 1 & 32767;
   HEAP16[i1 + 38 >> 1] = i9;
   HEAP16[i1 + 40 >> 1] = (i8 & 65535) >>> 1;
   HEAP32[i1 + 44 >> 2] = i5;
   i11 = Math_imul(i11 & 65535, i10) | 0;
   HEAP32[i1 + 48 >> 2] = i5 + i11;
   HEAP32[i1 + 52 >> 2] = i5 + (i11 + ((Math_imul(i9, i10) | 0) / 2 | 0));
   i11 = i1;
   STACKTOP = i12;
   return i11 | 0;
  } else if ((i2 | 0) == 11) {
   HEAP16[i1 + 36 >> 1] = i7;
   HEAP32[i1 + 44 >> 2] = i6;
   i11 = i1;
   STACKTOP = i12;
   return i11 | 0;
  }
 }
 _SDL_free(i5);
 _SDL_free(HEAP32[i3 >> 2] | 0);
 _SDL_free(HEAP32[i4 >> 2] | 0);
 _SDL_FreeSurface(HEAP32[i1 + 56 >> 2] | 0);
 _SDL_FreeSurface(HEAP32[i1 + 60 >> 2] | 0);
 _SDL_free(i1);
 _SDL_Error(0) | 0;
 i11 = 0;
 STACKTOP = i12;
 return i11 | 0;
}

function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE(i12, i10, i11, i9, i1) {
 i12 = i12 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = i10;
 if ((((i1 & 4 | 0) != 0 ? (i8 - i12 | 0) > 2 : 0) ? (HEAP8[i12 >> 0] | 0) == -17 : 0) ? (HEAP8[i12 + 1 >> 0] | 0) == -69 : 0) i1 = (HEAP8[i12 + 2 >> 0] | 0) == -65 ? i12 + 3 | 0 : i12; else i1 = i12;
 L7 : do if ((i11 | 0) != 0 & i1 >>> 0 < i10 >>> 0) {
  i6 = i1;
  i7 = 0;
  L8 : while (1) {
   i1 = HEAP8[i6 >> 0] | 0;
   i5 = i1 & 255;
   do if (i1 << 24 >> 24 > -1) {
    if (i5 >>> 0 > i9 >>> 0) {
     i1 = i6;
     i2 = 42;
     break L7;
    }
    i1 = i6 + 1 | 0;
   } else {
    if ((i1 & 255) < 194) {
     i1 = i6;
     i2 = 42;
     break L7;
    }
    if ((i1 & 255) < 224) {
     if ((i8 - i6 | 0) < 2) {
      i1 = i6;
      i2 = 42;
      break L7;
     }
     i1 = HEAPU8[i6 + 1 >> 0] | 0;
     if ((i1 & 192 | 0) != 128) {
      i1 = i6;
      i2 = 42;
      break L7;
     }
     if ((i1 & 63 | i5 << 6 & 1984) >>> 0 > i9 >>> 0) {
      i1 = i6;
      i2 = 42;
      break L7;
     }
     i1 = i6 + 2 | 0;
     break;
    }
    if ((i1 & 255) < 240) {
     i1 = i6;
     if ((i8 - i1 | 0) < 3) {
      i1 = i6;
      i2 = 42;
      break L7;
     }
     i3 = HEAP8[i6 + 1 >> 0] | 0;
     i2 = HEAP8[i6 + 2 >> 0] | 0;
     switch (i5 | 0) {
     case 224:
      {
       if ((i3 & -32) << 24 >> 24 != -96) {
        i2 = 20;
        break L8;
       }
       break;
      }
     case 237:
      {
       if ((i3 & -32) << 24 >> 24 != -128) {
        i2 = 22;
        break L8;
       }
       break;
      }
     default:
      if ((i3 & -64) << 24 >> 24 != -128) {
       i2 = 24;
       break L8;
      }
     }
     i1 = i2 & 255;
     if ((i1 & 192 | 0) != 128) {
      i1 = i6;
      i2 = 42;
      break L7;
     }
     if (((i3 & 255) << 6 & 4032 | i5 << 12 & 61440 | i1 & 63) >>> 0 > i9 >>> 0) {
      i1 = i6;
      i2 = 42;
      break L7;
     }
     i1 = i6 + 3 | 0;
     break;
    }
    if ((i1 & 255) >= 245) {
     i1 = i6;
     i2 = 42;
     break L7;
    }
    i1 = i6;
    if ((i8 - i1 | 0) < 4) {
     i1 = i6;
     i2 = 42;
     break L7;
    }
    i4 = HEAP8[i6 + 1 >> 0] | 0;
    i2 = HEAP8[i6 + 2 >> 0] | 0;
    i3 = HEAP8[i6 + 3 >> 0] | 0;
    switch (i5 | 0) {
    case 240:
     {
      if ((i4 + 112 & 255) >= 48) {
       i2 = 32;
       break L8;
      }
      break;
     }
    case 244:
     {
      if ((i4 & -16) << 24 >> 24 != -128) {
       i2 = 34;
       break L8;
      }
      break;
     }
    default:
     if ((i4 & -64) << 24 >> 24 != -128) {
      i2 = 36;
      break L8;
     }
    }
    i2 = i2 & 255;
    if ((i2 & 192 | 0) != 128) {
     i1 = i6;
     i2 = 42;
     break L7;
    }
    i1 = i3 & 255;
    if ((i1 & 192 | 0) != 128) {
     i1 = i6;
     i2 = 42;
     break L7;
    }
    if (((i4 & 255) << 12 & 258048 | i5 << 18 & 1835008 | i2 << 6 & 4032 | i1 & 63) >>> 0 > i9 >>> 0) {
     i1 = i6;
     i2 = 42;
     break L7;
    }
    i1 = i6 + 4 | 0;
   } while (0);
   i7 = i7 + 1 | 0;
   if (!(i7 >>> 0 < i11 >>> 0 & i1 >>> 0 < i10 >>> 0)) {
    i2 = 42;
    break L7;
   } else i6 = i1;
  }
  if ((i2 | 0) == 20) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 22) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 24) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 32) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 34) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 36) {
   i1 = i1 - i12 | 0;
   break;
  }
 } else i2 = 42; while (0);
 if ((i2 | 0) == 42) i1 = i1 - i12 | 0;
 return i1 | 0;
}

function _SDLgfx_rotozoomSurfaceSizeTrig(i4, i3, d1, i14, i13, i2, i5) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 d1 = +d1;
 i14 = i14 | 0;
 i13 = i13 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0;
 d12 = d1 * .017453292519943295;
 HEAPF64[i5 >> 3] = +_SDL_sin(d12);
 d12 = +_SDL_cos(d12);
 HEAPF64[i2 >> 3] = d12;
 d11 = +((i4 | 0) / 2 | 0 | 0);
 d1 = +((i3 | 0) / 2 | 0 | 0);
 d10 = d12 * d11;
 d12 = d12 * d1;
 d8 = +HEAPF64[i5 >> 3];
 d11 = d11 * d8;
 d1 = d8 * d1;
 d8 = d10 + d1;
 d7 = +_SDL_fabs(d8);
 d9 = d10 - d1;
 i5 = d7 > +_SDL_fabs(d9);
 d7 = +_SDL_fabs(i5 ? d8 : d9);
 d6 = -d10;
 d10 = d1 - d10;
 do if (d7 > +_SDL_fabs(d10)) {
  d7 = +_SDL_fabs(d8);
  if (d7 > +_SDL_fabs(d9)) {
   d7 = +_SDL_fabs(d8);
   break;
  } else {
   d7 = +_SDL_fabs(d9);
   break;
  }
 } else d7 = +_SDL_fabs(d10); while (0);
 d6 = d6 - d1;
 do if (d7 > +_SDL_fabs(d6)) {
  d7 = +_SDL_fabs(d8);
  i5 = d7 > +_SDL_fabs(d9);
  d7 = +_SDL_fabs(i5 ? d8 : d9);
  if (!(d7 > +_SDL_fabs(d10))) {
   d1 = +_SDL_fabs(d10);
   break;
  }
  d7 = +_SDL_fabs(d8);
  if (d7 > +_SDL_fabs(d9)) {
   d1 = +_SDL_fabs(d8);
   break;
  } else {
   d1 = +_SDL_fabs(d9);
   break;
  }
 } else d1 = +_SDL_fabs(d6); while (0);
 if ((~~+_SDL_ceil(d1) | 0) > 1) {
  d7 = +_SDL_fabs(d8);
  i5 = d7 > +_SDL_fabs(d9);
  d7 = +_SDL_fabs(i5 ? d8 : d9);
  do if (d7 > +_SDL_fabs(d10)) {
   d7 = +_SDL_fabs(d8);
   if (d7 > +_SDL_fabs(d9)) {
    d1 = +_SDL_fabs(d8);
    break;
   } else {
    d1 = +_SDL_fabs(d9);
    break;
   }
  } else d1 = +_SDL_fabs(d10); while (0);
  do if (d1 > +_SDL_fabs(d6)) {
   d7 = +_SDL_fabs(d8);
   i5 = d7 > +_SDL_fabs(d9);
   d7 = +_SDL_fabs(i5 ? d8 : d9);
   if (!(d7 > +_SDL_fabs(d10))) {
    d1 = +_SDL_fabs(d10);
    break;
   }
   d10 = +_SDL_fabs(d8);
   if (d10 > +_SDL_fabs(d9)) {
    d1 = +_SDL_fabs(d8);
    break;
   } else {
    d1 = +_SDL_fabs(d9);
    break;
   }
  } else d1 = +_SDL_fabs(d6); while (0);
  i2 = ~~+_SDL_ceil(d1) << 1;
 } else i2 = 2;
 d9 = d11 + d12;
 d7 = +_SDL_fabs(d9);
 d10 = d11 - d12;
 i5 = d7 > +_SDL_fabs(d10);
 d7 = +_SDL_fabs(i5 ? d9 : d10);
 d1 = -d11;
 d8 = d12 - d11;
 do if (d7 > +_SDL_fabs(d8)) {
  d11 = +_SDL_fabs(d9);
  if (d11 > +_SDL_fabs(d10)) {
   d7 = +_SDL_fabs(d9);
   break;
  } else {
   d7 = +_SDL_fabs(d10);
   break;
  }
 } else d7 = +_SDL_fabs(d8); while (0);
 d6 = d1 - d12;
 do if (d7 > +_SDL_fabs(d6)) {
  d12 = +_SDL_fabs(d9);
  i5 = d12 > +_SDL_fabs(d10);
  d12 = +_SDL_fabs(i5 ? d9 : d10);
  if (!(d12 > +_SDL_fabs(d8))) {
   d1 = +_SDL_fabs(d8);
   break;
  }
  d12 = +_SDL_fabs(d9);
  if (d12 > +_SDL_fabs(d10)) {
   d1 = +_SDL_fabs(d9);
   break;
  } else {
   d1 = +_SDL_fabs(d10);
   break;
  }
 } else d1 = +_SDL_fabs(d6); while (0);
 if ((~~+_SDL_ceil(d1) | 0) <= 1) {
  i5 = 2;
  HEAP32[i14 >> 2] = i2;
  HEAP32[i13 >> 2] = i5;
  return;
 }
 d12 = +_SDL_fabs(d9);
 i5 = d12 > +_SDL_fabs(d10);
 d12 = +_SDL_fabs(i5 ? d9 : d10);
 do if (d12 > +_SDL_fabs(d8)) {
  d12 = +_SDL_fabs(d9);
  if (d12 > +_SDL_fabs(d10)) {
   d1 = +_SDL_fabs(d9);
   break;
  } else {
   d1 = +_SDL_fabs(d10);
   break;
  }
 } else d1 = +_SDL_fabs(d8); while (0);
 do if (d1 > +_SDL_fabs(d6)) {
  d12 = +_SDL_fabs(d9);
  i5 = d12 > +_SDL_fabs(d10);
  d12 = +_SDL_fabs(i5 ? d9 : d10);
  if (!(d12 > +_SDL_fabs(d8))) {
   d1 = +_SDL_fabs(d8);
   break;
  }
  d12 = +_SDL_fabs(d9);
  if (d12 > +_SDL_fabs(d10)) {
   d1 = +_SDL_fabs(d9);
   break;
  } else {
   d1 = +_SDL_fabs(d10);
   break;
  }
 } else d1 = +_SDL_fabs(d6); while (0);
 i5 = ~~+_SDL_ceil(d1) << 1;
 HEAP32[i14 >> 2] = i2;
 HEAP32[i13 >> 2] = i5;
 return;
}

function _Blit1to3(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = HEAP32[i3 + 24 >> 2] | 0;
 i2 = HEAP32[i3 + 28 >> 2] | 0;
 i8 = HEAP32[i3 + 16 >> 2] | 0;
 i9 = HEAP32[i3 + 36 >> 2] | 0;
 i10 = HEAP32[i3 + 48 >> 2] | 0;
 if (!i2) return;
 i7 = (i1 + 7 | 0) / 8 | 0;
 i6 = i1 & 7;
 i1 = HEAP32[i3 + 20 >> 2] | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 L4 : while (1) {
  i2 = i2 + -1 | 0;
  switch (i6 | 0) {
  case 0:
   {
    i4 = i7;
    i5 = 4;
    break;
   }
  case 7:
   {
    i4 = i7;
    i5 = 5;
    break;
   }
  case 6:
   {
    i4 = i7;
    i5 = 6;
    break;
   }
  case 5:
   {
    i4 = i7;
    i5 = 7;
    break;
   }
  case 4:
   {
    i4 = i7;
    i5 = 8;
    break;
   }
  case 3:
   {
    i4 = i7;
    i5 = 9;
    break;
   }
  case 2:
   {
    i4 = i7;
    i5 = 10;
    break;
   }
  case 1:
   {
    i4 = i7;
    i5 = 11;
    break;
   }
  default:
   i5 = 12;
  }
  while (1) if ((i5 | 0) == 4) {
   i12 = (HEAPU8[i3 >> 0] | 0) << 2;
   i11 = i12 | 1;
   HEAP8[i1 >> 0] = HEAP8[i10 + i12 >> 0] | 0;
   HEAP8[i1 + 1 >> 0] = HEAP8[i10 + i11 >> 0] | 0;
   HEAP8[i1 + 2 >> 0] = HEAP8[i10 + (i11 + 1) >> 0] | 0;
   i1 = i1 + 3 | 0;
   i3 = i3 + 1 | 0;
   i5 = 5;
   continue;
  } else if ((i5 | 0) == 5) {
   i11 = (HEAPU8[i3 >> 0] | 0) << 2;
   i12 = i11 | 1;
   HEAP8[i1 >> 0] = HEAP8[i10 + i11 >> 0] | 0;
   HEAP8[i1 + 1 >> 0] = HEAP8[i10 + i12 >> 0] | 0;
   HEAP8[i1 + 2 >> 0] = HEAP8[i10 + (i12 + 1) >> 0] | 0;
   i1 = i1 + 3 | 0;
   i3 = i3 + 1 | 0;
   i5 = 6;
   continue;
  } else if ((i5 | 0) == 6) {
   i11 = (HEAPU8[i3 >> 0] | 0) << 2;
   i12 = i11 | 1;
   HEAP8[i1 >> 0] = HEAP8[i10 + i11 >> 0] | 0;
   HEAP8[i1 + 1 >> 0] = HEAP8[i10 + i12 >> 0] | 0;
   HEAP8[i1 + 2 >> 0] = HEAP8[i10 + (i12 + 1) >> 0] | 0;
   i1 = i1 + 3 | 0;
   i3 = i3 + 1 | 0;
   i5 = 7;
   continue;
  } else if ((i5 | 0) == 7) {
   i11 = (HEAPU8[i3 >> 0] | 0) << 2;
   i12 = i11 | 1;
   HEAP8[i1 >> 0] = HEAP8[i10 + i11 >> 0] | 0;
   HEAP8[i1 + 1 >> 0] = HEAP8[i10 + i12 >> 0] | 0;
   HEAP8[i1 + 2 >> 0] = HEAP8[i10 + (i12 + 1) >> 0] | 0;
   i1 = i1 + 3 | 0;
   i3 = i3 + 1 | 0;
   i5 = 8;
   continue;
  } else if ((i5 | 0) == 8) {
   i11 = (HEAPU8[i3 >> 0] | 0) << 2;
   i12 = i11 | 1;
   HEAP8[i1 >> 0] = HEAP8[i10 + i11 >> 0] | 0;
   HEAP8[i1 + 1 >> 0] = HEAP8[i10 + i12 >> 0] | 0;
   HEAP8[i1 + 2 >> 0] = HEAP8[i10 + (i12 + 1) >> 0] | 0;
   i1 = i1 + 3 | 0;
   i3 = i3 + 1 | 0;
   i5 = 9;
   continue;
  } else if ((i5 | 0) == 9) {
   i11 = (HEAPU8[i3 >> 0] | 0) << 2;
   i12 = i11 | 1;
   HEAP8[i1 >> 0] = HEAP8[i10 + i11 >> 0] | 0;
   HEAP8[i1 + 1 >> 0] = HEAP8[i10 + i12 >> 0] | 0;
   HEAP8[i1 + 2 >> 0] = HEAP8[i10 + (i12 + 1) >> 0] | 0;
   i1 = i1 + 3 | 0;
   i3 = i3 + 1 | 0;
   i5 = 10;
   continue;
  } else if ((i5 | 0) == 10) {
   i11 = (HEAPU8[i3 >> 0] | 0) << 2;
   i12 = i11 | 1;
   HEAP8[i1 >> 0] = HEAP8[i10 + i11 >> 0] | 0;
   HEAP8[i1 + 1 >> 0] = HEAP8[i10 + i12 >> 0] | 0;
   HEAP8[i1 + 2 >> 0] = HEAP8[i10 + (i12 + 1) >> 0] | 0;
   i1 = i1 + 3 | 0;
   i3 = i3 + 1 | 0;
   i5 = 11;
   continue;
  } else if ((i5 | 0) == 11) {
   i11 = (HEAPU8[i3 >> 0] | 0) << 2;
   i12 = i11 | 1;
   HEAP8[i1 >> 0] = HEAP8[i10 + i11 >> 0] | 0;
   HEAP8[i1 + 1 >> 0] = HEAP8[i10 + i12 >> 0] | 0;
   HEAP8[i1 + 2 >> 0] = HEAP8[i10 + (i12 + 1) >> 0] | 0;
   i3 = i3 + 1 | 0;
   i1 = i1 + 3 | 0;
   if ((i4 | 0) > 1) {
    i4 = i4 + -1 | 0;
    i5 = 4;
    continue;
   } else {
    i5 = 12;
    continue;
   }
  } else if ((i5 | 0) == 12) if (!i2) break L4; else {
   i1 = i1 + i9 | 0;
   i3 = i3 + i8 | 0;
   continue L4;
  }
 }
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i3, i15, i14, i6, i13) {
 i3 = i3 | 0;
 i15 = i15 | 0;
 i14 = i14 | 0;
 i6 = i6 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 L1 : do if ((i3 | 0) == (HEAP32[i15 + 8 >> 2] | 0)) {
  if ((HEAP32[i15 + 4 >> 2] | 0) == (i14 | 0) ? (i1 = i15 + 28 | 0, (HEAP32[i1 >> 2] | 0) != 1) : 0) HEAP32[i1 >> 2] = i6;
 } else {
  if ((i3 | 0) != (HEAP32[i15 >> 2] | 0)) {
   i12 = HEAP32[i3 + 12 >> 2] | 0;
   i4 = i3 + 16 + (i12 << 3) | 0;
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i3 + 16 | 0, i15, i14, i6, i13);
   i1 = i3 + 24 | 0;
   if ((i12 | 0) <= 1) break;
   i2 = HEAP32[i3 + 8 >> 2] | 0;
   if ((i2 & 2 | 0) == 0 ? (i5 = i15 + 36 | 0, (HEAP32[i5 >> 2] | 0) != 1) : 0) {
    if (!(i2 & 1)) {
     i2 = i15 + 54 | 0;
     while (1) {
      if (HEAP8[i2 >> 0] | 0) break L1;
      if ((HEAP32[i5 >> 2] | 0) == 1) break L1;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i15, i14, i6, i13);
      i1 = i1 + 8 | 0;
      if (i1 >>> 0 >= i4 >>> 0) break L1;
     }
    }
    i2 = i15 + 24 | 0;
    i3 = i15 + 54 | 0;
    while (1) {
     if (HEAP8[i3 >> 0] | 0) break L1;
     if ((HEAP32[i5 >> 2] | 0) == 1 ? (HEAP32[i2 >> 2] | 0) == 1 : 0) break L1;
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i15, i14, i6, i13);
     i1 = i1 + 8 | 0;
     if (i1 >>> 0 >= i4 >>> 0) break L1;
    }
   }
   i2 = i15 + 54 | 0;
   while (1) {
    if (HEAP8[i2 >> 0] | 0) break L1;
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i15, i14, i6, i13);
    i1 = i1 + 8 | 0;
    if (i1 >>> 0 >= i4 >>> 0) break L1;
   }
  }
  if ((HEAP32[i15 + 16 >> 2] | 0) != (i14 | 0) ? (i11 = i15 + 20 | 0, (HEAP32[i11 >> 2] | 0) != (i14 | 0)) : 0) {
   HEAP32[i15 + 32 >> 2] = i6;
   i8 = i15 + 44 | 0;
   if ((HEAP32[i8 >> 2] | 0) == 4) break;
   i2 = HEAP32[i3 + 12 >> 2] | 0;
   i4 = i3 + 16 + (i2 << 3) | 0;
   i5 = i15 + 52 | 0;
   i6 = i15 + 53 | 0;
   i9 = i15 + 54 | 0;
   i7 = i3 + 8 | 0;
   i10 = i15 + 24 | 0;
   L34 : do if ((i2 | 0) > 0) {
    i2 = 0;
    i1 = 0;
    i3 = i3 + 16 | 0;
    while (1) {
     HEAP8[i5 >> 0] = 0;
     HEAP8[i6 >> 0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i3, i15, i14, i14, 1, i13);
     if (HEAP8[i9 >> 0] | 0) {
      i12 = 20;
      break L34;
     }
     do if (HEAP8[i6 >> 0] | 0) {
      if (!(HEAP8[i5 >> 0] | 0)) if (!(HEAP32[i7 >> 2] & 1)) {
       i1 = 1;
       i12 = 20;
       break L34;
      } else {
       i1 = 1;
       break;
      }
      if ((HEAP32[i10 >> 2] | 0) == 1) break L34;
      if (!(HEAP32[i7 >> 2] & 2)) break L34; else {
       i2 = 1;
       i1 = 1;
      }
     } while (0);
     i3 = i3 + 8 | 0;
     if (i3 >>> 0 >= i4 >>> 0) {
      i12 = 20;
      break;
     }
    }
   } else {
    i2 = 0;
    i1 = 0;
    i12 = 20;
   } while (0);
   do if ((i12 | 0) == 20) {
    if ((!i2 ? (HEAP32[i11 >> 2] = i14, i14 = i15 + 40 | 0, HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1, (HEAP32[i15 + 36 >> 2] | 0) == 1) : 0) ? (HEAP32[i10 >> 2] | 0) == 2 : 0) {
     HEAP8[i9 >> 0] = 1;
     if (i1) break;
    } else i12 = 24;
    if ((i12 | 0) == 24 ? i1 : 0) break;
    HEAP32[i8 >> 2] = 4;
    break L1;
   } while (0);
   HEAP32[i8 >> 2] = 3;
   break;
  }
  if ((i6 | 0) == 1) HEAP32[i15 + 32 >> 2] = 1;
 } while (0);
 return;
}

function _SDL_SW_UpdateYUVTexture(i8, i15, i1, i16) {
 i8 = i8 | 0;
 i15 = i15 | 0;
 i1 = i1 | 0;
 i16 = i16 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i2 = HEAP32[i8 >> 2] | 0;
 L1 : do if ((i2 | 0) < 1431918169) if ((i2 | 0) < 844715353) {
  switch (i2 | 0) {
  case 842094169:
   break L1;
  default:
   {}
  }
  return 0;
 } else {
  switch (i2 | 0) {
  case 844715353:
   {
    i3 = 16;
    break L1;
   }
  default:
   {}
  }
  return 0;
 } else {
  if ((i2 | 0) < 1448433993) {
   switch (i2 | 0) {
   case 1431918169:
    {
     i3 = 16;
     break L1;
    }
   default:
    {}
   }
   return 0;
  }
  if ((i2 | 0) < 1498831189) {
   switch (i2 | 0) {
   case 1448433993:
    break L1;
   default:
    {}
   }
   return 0;
  } else {
   switch (i2 | 0) {
   case 1498831189:
    {
     i3 = 16;
     break L1;
    }
   default:
    {}
   }
   return 0;
  }
 } while (0);
 if ((i3 | 0) == 16) {
  i4 = i8 + 36 | 0;
  i5 = HEAP32[i15 + 8 >> 2] << 1;
  i6 = i15 + 12 | 0;
  if ((HEAP32[i6 >> 2] | 0) <= 0) return 0;
  i2 = Math_imul(HEAPU16[i4 >> 1] | 0, HEAP32[i15 + 4 >> 2] | 0) | 0;
  i2 = (HEAP32[i8 + 44 >> 2] | 0) + (i2 + (HEAP32[i15 >> 2] << 1)) | 0;
  i3 = 0;
  while (1) {
   _SDL_memcpy(i2, i1, i5) | 0;
   i3 = i3 + 1 | 0;
   if ((i3 | 0) >= (HEAP32[i6 >> 2] | 0)) break; else {
    i2 = i2 + (HEAPU16[i4 >> 1] | 0) | 0;
    i1 = i1 + i16 | 0;
   }
  }
  return 0;
 }
 i2 = HEAP32[i15 >> 2] | 0;
 i12 = i15 + 4 | 0;
 if ((((i2 | 0) == 0 ? (HEAP32[i12 >> 2] | 0) == 0 : 0) ? (i5 = HEAP32[i15 + 8 >> 2] | 0, (i5 | 0) == (HEAP32[i8 + 8 >> 2] | 0)) : 0) ? (i4 = HEAP32[i15 + 12 >> 2] | 0, (i4 | 0) == (HEAP32[i8 + 12 >> 2] | 0)) : 0) {
  i16 = Math_imul(i4, i5) | 0;
  _SDL_memcpy(HEAP32[i8 + 16 >> 2] | 0, i1, ((i16 | 0) / 2 | 0) + i16 | 0) | 0;
  return 0;
 }
 i11 = i8 + 16 | 0;
 i13 = i8 + 8 | 0;
 i10 = i15 + 8 | 0;
 i6 = HEAP32[i10 >> 2] | 0;
 i14 = i15 + 12 | 0;
 if ((HEAP32[i14 >> 2] | 0) <= 0) return 0;
 i3 = (HEAP32[i11 >> 2] | 0) + ((Math_imul(HEAP32[i13 >> 2] | 0, HEAP32[i12 >> 2] | 0) | 0) + i2) | 0;
 i4 = 0;
 i5 = i1;
 while (1) {
  _SDL_memcpy(i3, i5, i6) | 0;
  i2 = HEAP32[i13 >> 2] | 0;
  i4 = i4 + 1 | 0;
  i7 = HEAP32[i14 >> 2] | 0;
  if ((i4 | 0) >= (i7 | 0)) {
   i3 = i7;
   break;
  } else {
   i3 = i3 + i2 | 0;
   i5 = i5 + i16 | 0;
  }
 }
 i9 = i8 + 12 | 0;
 i8 = (HEAP32[i10 >> 2] | 0) / 2 | 0;
 if ((i3 | 0) <= 1) return 0;
 i6 = (Math_imul((HEAP32[i12 >> 2] | 0) / 2 | 0, i2) | 0) / 2 | 0;
 i6 = i6 + (Math_imul(i2, HEAP32[i9 >> 2] | 0) | 0) | 0;
 i5 = (i16 | 0) / 2 | 0;
 i6 = (HEAP32[i11 >> 2] | 0) + (i6 + ((HEAP32[i15 >> 2] | 0) / 2 | 0)) | 0;
 i7 = 0;
 i2 = i1 + (Math_imul(i3, i16) | 0) | 0;
 while (1) {
  _SDL_memcpy(i6, i2, i8) | 0;
  i4 = HEAP32[i13 >> 2] | 0;
  i7 = i7 + 1 | 0;
  i3 = HEAP32[i14 >> 2] | 0;
  if ((i7 | 0) >= ((i3 | 0) / 2 | 0 | 0)) break; else {
   i6 = i6 + ((i4 | 0) / 2 | 0) | 0;
   i2 = i2 + i5 | 0;
  }
 }
 i6 = Math_imul(i3, i16) | 0;
 i2 = Math_imul(i4, HEAP32[i9 >> 2] | 0) | 0;
 i5 = (HEAP32[i10 >> 2] | 0) / 2 | 0;
 if ((i3 | 0) <= 1) return 0;
 i2 = i2 + ((i2 | 0) / 4 | 0) + ((Math_imul((HEAP32[i12 >> 2] | 0) / 2 | 0, i4) | 0) / 2 | 0) | 0;
 i4 = (i16 | 0) / 2 | 0;
 i2 = (HEAP32[i11 >> 2] | 0) + (i2 + ((HEAP32[i15 >> 2] | 0) / 2 | 0)) | 0;
 i3 = 0;
 i1 = i1 + (((i6 | 0) / 4 | 0) + i6) | 0;
 while (1) {
  _SDL_memcpy(i2, i1, i5) | 0;
  i3 = i3 + 1 | 0;
  if ((i3 | 0) >= ((HEAP32[i14 >> 2] | 0) / 2 | 0 | 0)) break; else {
   i2 = i2 + ((HEAP32[i13 >> 2] | 0) / 2 | 0) | 0;
   i1 = i1 + i4 | 0;
  }
 }
 return 0;
}

function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i2, i14, i13, i15, i16, i11, i1) {
 i2 = i2 | 0;
 i14 = i14 | 0;
 i13 = i13 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i17 = 0, i18 = 0, i19 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i12 = i17;
 i10 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 30376) | 0;
 i5 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 30532) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] & 127](i12, i5);
 i8 = HEAP8[i12 >> 0] | 0;
 i9 = i12 + 4 | 0;
 if (((i8 & 1) == 0 ? (i8 & 255) >>> 1 : HEAP32[i9 >> 2] | 0) | 0) {
  HEAP32[i11 >> 2] = i15;
  i1 = HEAP8[i2 >> 0] | 0;
  switch (i1 << 24 >> 24) {
  case 43:
  case 45:
   {
    i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 44 >> 2] & 63](i10, i1) | 0;
    i3 = HEAP32[i11 >> 2] | 0;
    HEAP32[i11 >> 2] = i3 + 4;
    HEAP32[i3 >> 2] = i8;
    i3 = i2 + 1 | 0;
    break;
   }
  default:
   i3 = i2;
  }
  L7 : do if ((i13 - i3 | 0) > 1 ? (HEAP8[i3 >> 0] | 0) == 48 : 0) {
   i1 = i3 + 1 | 0;
   switch (HEAP8[i1 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    break L7;
   }
   i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 44 >> 2] & 63](i10, 48) | 0;
   i7 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i7 + 4;
   HEAP32[i7 >> 2] = i8;
   i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 44 >> 2] & 63](i10, HEAP8[i1 >> 0] | 0) | 0;
   i8 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i8 + 4;
   HEAP32[i8 >> 2] = i7;
   i3 = i3 + 2 | 0;
  } while (0);
  if ((i3 | 0) != (i13 | 0) ? (i6 = i13 + -1 | 0, i3 >>> 0 < i6 >>> 0) : 0) {
   i4 = i3;
   i1 = i6;
   do {
    i8 = HEAP8[i4 >> 0] | 0;
    HEAP8[i4 >> 0] = HEAP8[i1 >> 0] | 0;
    HEAP8[i1 >> 0] = i8;
    i4 = i4 + 1 | 0;
    i1 = i1 + -1 | 0;
   } while (i4 >>> 0 < i1 >>> 0);
  }
  i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] & 127](i5) | 0;
  i6 = i12 + 8 | 0;
  i7 = i12 + 1 | 0;
  if (i3 >>> 0 < i13 >>> 0) {
   i1 = 0;
   i4 = 0;
   i8 = i3;
   while (1) {
    i18 = HEAP8[((HEAP8[i12 >> 0] & 1) == 0 ? i7 : HEAP32[i6 >> 2] | 0) + i4 >> 0] | 0;
    if (i18 << 24 >> 24 != 0 & (i1 | 0) == (i18 << 24 >> 24 | 0)) {
     i18 = HEAP32[i11 >> 2] | 0;
     HEAP32[i11 >> 2] = i18 + 4;
     HEAP32[i18 >> 2] = i5;
     i18 = HEAP8[i12 >> 0] | 0;
     i1 = 0;
     i4 = (i4 >>> 0 < (((i18 & 1) == 0 ? (i18 & 255) >>> 1 : HEAP32[i9 >> 2] | 0) + -1 | 0) >>> 0 & 1) + i4 | 0;
    }
    i19 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 44 >> 2] & 63](i10, HEAP8[i8 >> 0] | 0) | 0;
    i18 = HEAP32[i11 >> 2] | 0;
    HEAP32[i11 >> 2] = i18 + 4;
    HEAP32[i18 >> 2] = i19;
    i8 = i8 + 1 | 0;
    if (i8 >>> 0 >= i13 >>> 0) break; else i1 = i1 + 1 | 0;
   }
  }
  i1 = i15 + (i3 - i2 << 2) | 0;
  i4 = HEAP32[i11 >> 2] | 0;
  if ((i1 | 0) != (i4 | 0)) {
   i3 = i4 + -4 | 0;
   if (i1 >>> 0 < i3 >>> 0) {
    do {
     i19 = HEAP32[i1 >> 2] | 0;
     HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
     HEAP32[i3 >> 2] = i19;
     i1 = i1 + 4 | 0;
     i3 = i3 + -4 | 0;
    } while (i1 >>> 0 < i3 >>> 0);
    i1 = i4;
   } else i1 = i4;
  }
 } else {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 48 >> 2] & 31](i10, i2, i13, i15) | 0;
  i1 = i15 + (i13 - i2 << 2) | 0;
  HEAP32[i11 >> 2] = i1;
 }
 HEAP32[i16 >> 2] = (i14 | 0) == (i13 | 0) ? i1 : i15 + (i14 - i2 << 2) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
 STACKTOP = i17;
 return;
}

function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE(i1, i23, i3, i20, i19, i18) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i3 = i3 | 0;
 i20 = i20 | 0;
 i19 = i19 | 0;
 i18 = i18 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 i9 = i28 + 468 | 0;
 i21 = i28 + 464 | 0;
 i16 = i28 + 472 | 0;
 i13 = i28 + 56 | 0;
 i17 = i28 + 52 | 0;
 i25 = i28 + 40 | 0;
 i27 = i28 + 28 | 0;
 i26 = i28 + 16 | 0;
 i4 = i28 + 12 | 0;
 i8 = i28 + 64 | 0;
 i15 = i28 + 8 | 0;
 i14 = i28 + 4 | 0;
 i10 = i28;
 i1 = __ZNKSt3__18ios_base6getlocEv(i20) | 0;
 HEAP32[i21 >> 2] = i1;
 i11 = __ZNKSt3__16locale9use_facetERNS0_2idE(i21, 30376) | 0;
 i7 = HEAP8[i18 >> 0] | 0;
 i2 = (i7 & 1) == 0;
 i12 = i18 + 4 | 0;
 if (!((i2 ? (i7 & 255) >>> 1 : HEAP32[i12 >> 2] | 0) | 0)) i7 = 0; else {
  i7 = HEAP32[(i2 ? i12 : HEAP32[i18 + 8 >> 2] | 0) >> 2] | 0;
  i7 = (i7 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 44 >> 2] & 63](i11, 45) | 0);
 }
 HEAP32[i25 >> 2] = 0;
 HEAP32[i25 + 4 >> 2] = 0;
 HEAP32[i25 + 8 >> 2] = 0;
 HEAP32[i27 >> 2] = 0;
 HEAP32[i27 + 4 >> 2] = 0;
 HEAP32[i27 + 8 >> 2] = 0;
 HEAP32[i26 >> 2] = 0;
 HEAP32[i26 + 4 >> 2] = 0;
 HEAP32[i26 + 8 >> 2] = 0;
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri(i3, i7, i21, i16, i13, i17, i25, i27, i26, i4);
 i5 = HEAP8[i18 >> 0] | 0;
 i6 = HEAP32[i12 >> 2] | 0;
 i2 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : i6;
 i3 = HEAP32[i4 >> 2] | 0;
 if ((i2 | 0) > (i3 | 0)) {
  i29 = HEAP8[i26 >> 0] | 0;
  i4 = HEAP8[i27 >> 0] | 0;
  i2 = (i2 - i3 << 1 | 1) + i3 + ((i29 & 1) == 0 ? (i29 & 255) >>> 1 : HEAP32[i26 + 4 >> 2] | 0) + ((i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i27 + 4 >> 2] | 0) | 0;
 } else {
  i29 = HEAP8[i26 >> 0] | 0;
  i2 = HEAP8[i27 >> 0] | 0;
  i2 = i3 + 2 + ((i29 & 1) == 0 ? (i29 & 255) >>> 1 : HEAP32[i26 + 4 >> 2] | 0) + ((i2 & 1) == 0 ? (i2 & 255) >>> 1 : HEAP32[i27 + 4 >> 2] | 0) | 0;
 }
 if (i2 >>> 0 > 100) {
  i2 = _malloc(i2 << 2) | 0;
  if (!i2) __ZSt17__throw_bad_allocv(); else {
   i24 = i2;
   i22 = i2;
  }
 } else {
  i24 = 0;
  i22 = i8;
 }
 i29 = (i5 & 1) == 0;
 i2 = i29 ? i12 : HEAP32[i18 + 8 >> 2] | 0;
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i(i22, i15, i14, HEAP32[i20 + 4 >> 2] | 0, i2, i2 + ((i29 ? (i5 & 255) >>> 1 : i6) << 2) | 0, i11, i7, i16, HEAP32[i13 >> 2] | 0, HEAP32[i17 >> 2] | 0, i25, i27, i26, i3);
 HEAP32[i10 >> 2] = HEAP32[i23 >> 2];
 i29 = HEAP32[i15 >> 2] | 0;
 i2 = HEAP32[i14 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 i2 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i9, i22, i29, i2, i20, i19) | 0;
 if (i24) {
  _free(i24);
  i1 = HEAP32[i21 >> 2] | 0;
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i26);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i27);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i25);
 __ZNSt3__114__shared_count16__release_sharedEv(i1) | 0;
 STACKTOP = i28;
 return i2 | 0;
}

function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i2, i14, i13, i15, i16, i11, i1) {
 i2 = i2 | 0;
 i14 = i14 | 0;
 i13 = i13 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i17 = 0, i18 = 0, i19 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i12 = i17;
 i10 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 30384) | 0;
 i5 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 30524) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] & 127](i12, i5);
 i8 = HEAP8[i12 >> 0] | 0;
 i9 = i12 + 4 | 0;
 if (((i8 & 1) == 0 ? (i8 & 255) >>> 1 : HEAP32[i9 >> 2] | 0) | 0) {
  HEAP32[i11 >> 2] = i15;
  i1 = HEAP8[i2 >> 0] | 0;
  switch (i1 << 24 >> 24) {
  case 43:
  case 45:
   {
    i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] & 63](i10, i1) | 0;
    i3 = HEAP32[i11 >> 2] | 0;
    HEAP32[i11 >> 2] = i3 + 1;
    HEAP8[i3 >> 0] = i8;
    i3 = i2 + 1 | 0;
    break;
   }
  default:
   i3 = i2;
  }
  L7 : do if ((i13 - i3 | 0) > 1 ? (HEAP8[i3 >> 0] | 0) == 48 : 0) {
   i1 = i3 + 1 | 0;
   switch (HEAP8[i1 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    break L7;
   }
   i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] & 63](i10, 48) | 0;
   i7 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i7 + 1;
   HEAP8[i7 >> 0] = i8;
   i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] & 63](i10, HEAP8[i1 >> 0] | 0) | 0;
   i8 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i8 + 1;
   HEAP8[i8 >> 0] = i7;
   i3 = i3 + 2 | 0;
  } while (0);
  if ((i3 | 0) != (i13 | 0) ? (i6 = i13 + -1 | 0, i3 >>> 0 < i6 >>> 0) : 0) {
   i4 = i3;
   i1 = i6;
   do {
    i8 = HEAP8[i4 >> 0] | 0;
    HEAP8[i4 >> 0] = HEAP8[i1 >> 0] | 0;
    HEAP8[i1 >> 0] = i8;
    i4 = i4 + 1 | 0;
    i1 = i1 + -1 | 0;
   } while (i4 >>> 0 < i1 >>> 0);
  }
  i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] & 127](i5) | 0;
  i6 = i12 + 8 | 0;
  i7 = i12 + 1 | 0;
  if (i3 >>> 0 < i13 >>> 0) {
   i1 = 0;
   i4 = 0;
   i8 = i3;
   while (1) {
    i18 = HEAP8[((HEAP8[i12 >> 0] & 1) == 0 ? i7 : HEAP32[i6 >> 2] | 0) + i4 >> 0] | 0;
    if (i18 << 24 >> 24 != 0 & (i1 | 0) == (i18 << 24 >> 24 | 0)) {
     i18 = HEAP32[i11 >> 2] | 0;
     HEAP32[i11 >> 2] = i18 + 1;
     HEAP8[i18 >> 0] = i5;
     i18 = HEAP8[i12 >> 0] | 0;
     i1 = 0;
     i4 = (i4 >>> 0 < (((i18 & 1) == 0 ? (i18 & 255) >>> 1 : HEAP32[i9 >> 2] | 0) + -1 | 0) >>> 0 & 1) + i4 | 0;
    }
    i19 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] & 63](i10, HEAP8[i8 >> 0] | 0) | 0;
    i18 = HEAP32[i11 >> 2] | 0;
    HEAP32[i11 >> 2] = i18 + 1;
    HEAP8[i18 >> 0] = i19;
    i8 = i8 + 1 | 0;
    if (i8 >>> 0 >= i13 >>> 0) break; else i1 = i1 + 1 | 0;
   }
  }
  i1 = i15 + (i3 - i2) | 0;
  i3 = HEAP32[i11 >> 2] | 0;
  if ((i1 | 0) != (i3 | 0)) {
   i3 = i3 + -1 | 0;
   if (i1 >>> 0 < i3 >>> 0) do {
    i19 = HEAP8[i1 >> 0] | 0;
    HEAP8[i1 >> 0] = HEAP8[i3 >> 0] | 0;
    HEAP8[i3 >> 0] = i19;
    i1 = i1 + 1 | 0;
    i3 = i3 + -1 | 0;
   } while (i1 >>> 0 < i3 >>> 0);
   i1 = HEAP32[i11 >> 2] | 0;
  }
 } else {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 32 >> 2] & 31](i10, i2, i13, i15) | 0;
  i1 = i15 + (i13 - i2) | 0;
  HEAP32[i11 >> 2] = i1;
 }
 HEAP32[i16 >> 2] = (i14 | 0) == (i13 | 0) ? i1 : i15 + (i14 - i2) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
 STACKTOP = i17;
 return;
}

function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE(i1, i22, i4, i19, i18, i17) {
 i1 = i1 | 0;
 i22 = i22 | 0;
 i4 = i4 | 0;
 i19 = i19 | 0;
 i18 = i18 | 0;
 i17 = i17 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i20 = 0, i21 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i27 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i9 = i27 + 56 | 0;
 i20 = i27 + 52 | 0;
 i15 = i27 + 64 | 0;
 i12 = i27 + 61 | 0;
 i16 = i27 + 60 | 0;
 i24 = i27 + 40 | 0;
 i26 = i27 + 28 | 0;
 i25 = i27 + 16 | 0;
 i5 = i27 + 12 | 0;
 i8 = i27 + 68 | 0;
 i14 = i27 + 8 | 0;
 i13 = i27 + 4 | 0;
 i10 = i27;
 i1 = __ZNKSt3__18ios_base6getlocEv(i19) | 0;
 HEAP32[i20 >> 2] = i1;
 i11 = __ZNKSt3__16locale9use_facetERNS0_2idE(i20, 30384) | 0;
 i7 = HEAP8[i17 >> 0] | 0;
 i2 = (i7 & 1) == 0;
 i3 = i17 + 4 | 0;
 if (!((i2 ? (i7 & 255) >>> 1 : HEAP32[i3 >> 2] | 0) | 0)) i7 = 0; else {
  i7 = HEAP8[(i2 ? i17 + 1 | 0 : HEAP32[i17 + 8 >> 2] | 0) >> 0] | 0;
  i7 = i7 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 28 >> 2] & 63](i11, 45) | 0) << 24 >> 24;
 }
 HEAP32[i24 >> 2] = 0;
 HEAP32[i24 + 4 >> 2] = 0;
 HEAP32[i24 + 8 >> 2] = 0;
 HEAP32[i26 >> 2] = 0;
 HEAP32[i26 + 4 >> 2] = 0;
 HEAP32[i26 + 8 >> 2] = 0;
 HEAP32[i25 >> 2] = 0;
 HEAP32[i25 + 4 >> 2] = 0;
 HEAP32[i25 + 8 >> 2] = 0;
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri(i4, i7, i20, i15, i12, i16, i24, i26, i25, i5);
 i6 = HEAP8[i17 >> 0] | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i2 = (i6 & 1) == 0 ? (i6 & 255) >>> 1 : i4;
 i3 = HEAP32[i5 >> 2] | 0;
 if ((i2 | 0) > (i3 | 0)) {
  i28 = HEAP8[i25 >> 0] | 0;
  i5 = HEAP8[i26 >> 0] | 0;
  i2 = (i2 - i3 << 1 | 1) + i3 + ((i28 & 1) == 0 ? (i28 & 255) >>> 1 : HEAP32[i25 + 4 >> 2] | 0) + ((i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i26 + 4 >> 2] | 0) | 0;
 } else {
  i28 = HEAP8[i25 >> 0] | 0;
  i2 = HEAP8[i26 >> 0] | 0;
  i2 = i3 + 2 + ((i28 & 1) == 0 ? (i28 & 255) >>> 1 : HEAP32[i25 + 4 >> 2] | 0) + ((i2 & 1) == 0 ? (i2 & 255) >>> 1 : HEAP32[i26 + 4 >> 2] | 0) | 0;
 }
 if (i2 >>> 0 > 100) {
  i2 = _malloc(i2) | 0;
  if (!i2) __ZSt17__throw_bad_allocv(); else {
   i23 = i2;
   i21 = i2;
  }
 } else {
  i23 = 0;
  i21 = i8;
 }
 i28 = (i6 & 1) == 0;
 i2 = i28 ? i17 + 1 | 0 : HEAP32[i17 + 8 >> 2] | 0;
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i(i21, i14, i13, HEAP32[i19 + 4 >> 2] | 0, i2, i2 + (i28 ? (i6 & 255) >>> 1 : i4) | 0, i11, i7, i15, HEAP8[i12 >> 0] | 0, HEAP8[i16 >> 0] | 0, i24, i26, i25, i3);
 HEAP32[i10 >> 2] = HEAP32[i22 >> 2];
 i28 = HEAP32[i14 >> 2] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 i2 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i9, i21, i28, i2, i19, i18) | 0;
 if (i23) {
  _free(i23);
  i1 = HEAP32[i20 >> 2] | 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i25);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i26);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i24);
 __ZNSt3__114__shared_count16__release_sharedEv(i1) | 0;
 STACKTOP = i27;
 return i2 | 0;
}

function _SDL_Blit_RGBA8888_ARGB8888_Modulate_Blend_Scale(i31) {
 i31 = i31 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i32 = 0, i33 = 0;
 i1 = HEAP32[i31 + 52 >> 2] | 0;
 i29 = HEAPU8[i31 + 60 >> 0] | 0;
 i30 = HEAPU8[i31 + 61 >> 0] | 0;
 i19 = HEAPU8[i31 + 62 >> 0] | 0;
 i20 = HEAPU8[i31 + 63 >> 0] | 0;
 i21 = i31 + 28 | 0;
 i32 = HEAP32[i21 >> 2] | 0;
 i22 = (HEAP32[i31 + 8 >> 2] << 16 | 0) / (i32 | 0) | 0;
 i23 = i31 + 24 | 0;
 i3 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i31 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i32 + -1 | 0;
 HEAP32[i21 >> 2] = i2;
 if (!i32) return;
 i32 = i31 + 20 | 0;
 i25 = i31 + 32 | 0;
 i26 = (i1 & 1 | 0) == 0;
 i27 = (i1 & 2 | 0) == 0;
 i28 = (i1 & 48 | 0) != 0;
 i17 = i1 & 112;
 i18 = i31 + 12 | 0;
 i5 = HEAP32[i32 >> 2] | 0;
 i16 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i15 = i1 + -65536 | 0;
   i14 = i15 >>> 16;
   i15 = i15 - (i14 << 16) | 0;
   i4 = i4 + 1 + i14 | 0;
  } else i15 = i1;
  if (!i3) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i6 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i31 >> 2] | 0) + ((Math_imul(HEAP32[i18 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i13 = HEAP32[i2 >> 2] | 0;
    i11 = i13 >>> 24;
    i10 = i13 >>> 16 & 255;
    i9 = i13 >>> 8 & 255;
    i13 = i13 & 255;
    i12 = HEAP32[i5 >> 2] | 0;
    i7 = i12 >>> 16 & 255;
    i8 = i12 >>> 8 & 255;
    i14 = i12 & 255;
    i12 = i12 >>> 24;
    if (!i26) {
     i9 = ((Math_imul(i9, i19) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i30) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i29) | 0) >>> 0) / 255 | 0;
    }
    i33 = ((Math_imul(i13, i20) | 0) >>> 0) / 255 | 0;
    i13 = i27 ? i13 : i33;
    if (i28 & i13 >>> 0 < 255) {
     i9 = ((Math_imul(i13, i9) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i13, i10) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i13, i11) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 | 0) {
    case 16:
     {
      i33 = 255 - i13 | 0;
      i12 = (((Math_imul(i33, i12) | 0) >>> 0) / 255 | 0) + i13 | 0;
      i9 = (((Math_imul(i33, i14) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i8 = (((Math_imul(i33, i8) | 0) >>> 0) / 255 | 0) + i10 | 0;
      i7 = (((Math_imul(i33, i7) | 0) >>> 0) / 255 | 0) + i11 | 0;
      break;
     }
    case 32:
     {
      i7 = i11 + i7 | 0;
      i8 = i10 + i8 | 0;
      i9 = i9 + i14 | 0;
      i9 = i9 >>> 0 > 255 ? 255 : i9;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      break;
     }
    case 64:
     {
      i9 = ((Math_imul(i9, i14) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i10, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i9 = i14;
    }
    HEAP32[i5 >> 2] = i8 << 8 | i7 << 16 | i9 | i12 << 24;
    if (!i3) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i24 | 0;
    }
   }
   i3 = HEAP32[i21 >> 2] | 0;
  }
  i1 = i16 + (HEAP32[i25 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i21 >> 2] = i2;
  if (!i3) break;
  i16 = i1;
  i5 = i1;
  i3 = HEAP32[i23 >> 2] | 0;
  i1 = i15 + i22 | 0;
 }
 HEAP32[i32 >> 2] = i1;
 return;
}

function _SDL_Blit_BGRA8888_ARGB8888_Modulate_Blend_Scale(i31) {
 i31 = i31 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i32 = 0, i33 = 0;
 i1 = HEAP32[i31 + 52 >> 2] | 0;
 i29 = HEAPU8[i31 + 60 >> 0] | 0;
 i30 = HEAPU8[i31 + 61 >> 0] | 0;
 i19 = HEAPU8[i31 + 62 >> 0] | 0;
 i20 = HEAPU8[i31 + 63 >> 0] | 0;
 i21 = i31 + 28 | 0;
 i32 = HEAP32[i21 >> 2] | 0;
 i22 = (HEAP32[i31 + 8 >> 2] << 16 | 0) / (i32 | 0) | 0;
 i23 = i31 + 24 | 0;
 i3 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i31 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i32 + -1 | 0;
 HEAP32[i21 >> 2] = i2;
 if (!i32) return;
 i32 = i31 + 20 | 0;
 i25 = i31 + 32 | 0;
 i26 = (i1 & 1 | 0) == 0;
 i27 = (i1 & 2 | 0) == 0;
 i28 = (i1 & 48 | 0) != 0;
 i17 = i1 & 112;
 i18 = i31 + 12 | 0;
 i5 = HEAP32[i32 >> 2] | 0;
 i16 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i15 = i1 + -65536 | 0;
   i14 = i15 >>> 16;
   i15 = i15 - (i14 << 16) | 0;
   i4 = i4 + 1 + i14 | 0;
  } else i15 = i1;
  if (!i3) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i6 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i31 >> 2] | 0) + ((Math_imul(HEAP32[i18 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i13 = HEAP32[i2 >> 2] | 0;
    i9 = i13 >>> 24;
    i10 = i13 >>> 16 & 255;
    i11 = i13 >>> 8 & 255;
    i13 = i13 & 255;
    i12 = HEAP32[i5 >> 2] | 0;
    i7 = i12 >>> 16 & 255;
    i8 = i12 >>> 8 & 255;
    i14 = i12 & 255;
    i12 = i12 >>> 24;
    if (!i26) {
     i9 = ((Math_imul(i9, i19) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i30) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i29) | 0) >>> 0) / 255 | 0;
    }
    i33 = ((Math_imul(i13, i20) | 0) >>> 0) / 255 | 0;
    i13 = i27 ? i13 : i33;
    if (i28 & i13 >>> 0 < 255) {
     i9 = ((Math_imul(i13, i9) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i13, i10) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i13, i11) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 | 0) {
    case 16:
     {
      i33 = 255 - i13 | 0;
      i12 = (((Math_imul(i33, i12) | 0) >>> 0) / 255 | 0) + i13 | 0;
      i9 = (((Math_imul(i33, i14) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i8 = (((Math_imul(i33, i8) | 0) >>> 0) / 255 | 0) + i10 | 0;
      i7 = (((Math_imul(i33, i7) | 0) >>> 0) / 255 | 0) + i11 | 0;
      break;
     }
    case 32:
     {
      i7 = i11 + i7 | 0;
      i8 = i10 + i8 | 0;
      i9 = i9 + i14 | 0;
      i9 = i9 >>> 0 > 255 ? 255 : i9;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      break;
     }
    case 64:
     {
      i9 = ((Math_imul(i9, i14) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i10, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i9 = i14;
    }
    HEAP32[i5 >> 2] = i8 << 8 | i7 << 16 | i9 | i12 << 24;
    if (!i3) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i24 | 0;
    }
   }
   i3 = HEAP32[i21 >> 2] | 0;
  }
  i1 = i16 + (HEAP32[i25 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i21 >> 2] = i2;
  if (!i3) break;
  i16 = i1;
  i5 = i1;
  i3 = HEAP32[i23 >> 2] | 0;
  i1 = i15 + i22 | 0;
 }
 HEAP32[i32 >> 2] = i1;
 return;
}

function _SDL_Blit_ARGB8888_ARGB8888_Modulate_Blend_Scale(i31) {
 i31 = i31 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i32 = 0, i33 = 0;
 i1 = HEAP32[i31 + 52 >> 2] | 0;
 i29 = HEAPU8[i31 + 60 >> 0] | 0;
 i30 = HEAPU8[i31 + 61 >> 0] | 0;
 i19 = HEAPU8[i31 + 62 >> 0] | 0;
 i20 = HEAPU8[i31 + 63 >> 0] | 0;
 i21 = i31 + 28 | 0;
 i32 = HEAP32[i21 >> 2] | 0;
 i22 = (HEAP32[i31 + 8 >> 2] << 16 | 0) / (i32 | 0) | 0;
 i23 = i31 + 24 | 0;
 i3 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i31 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i32 + -1 | 0;
 HEAP32[i21 >> 2] = i2;
 if (!i32) return;
 i32 = i31 + 20 | 0;
 i25 = i31 + 32 | 0;
 i26 = (i1 & 1 | 0) == 0;
 i27 = (i1 & 2 | 0) == 0;
 i28 = (i1 & 48 | 0) != 0;
 i17 = i1 & 112;
 i18 = i31 + 12 | 0;
 i5 = HEAP32[i32 >> 2] | 0;
 i16 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i15 = i1 + -65536 | 0;
   i14 = i15 >>> 16;
   i15 = i15 - (i14 << 16) | 0;
   i4 = i4 + 1 + i14 | 0;
  } else i15 = i1;
  if (!i3) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i6 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i31 >> 2] | 0) + ((Math_imul(HEAP32[i18 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i13 = HEAP32[i2 >> 2] | 0;
    i11 = i13 >>> 16 & 255;
    i10 = i13 >>> 8 & 255;
    i9 = i13 & 255;
    i13 = i13 >>> 24;
    i12 = HEAP32[i5 >> 2] | 0;
    i7 = i12 >>> 16 & 255;
    i8 = i12 >>> 8 & 255;
    i14 = i12 & 255;
    i12 = i12 >>> 24;
    if (!i26) {
     i9 = ((Math_imul(i9, i19) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i30) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i29) | 0) >>> 0) / 255 | 0;
    }
    i33 = ((Math_imul(i13, i20) | 0) >>> 0) / 255 | 0;
    i13 = i27 ? i13 : i33;
    if (i28 & i13 >>> 0 < 255) {
     i9 = ((Math_imul(i13, i9) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i13, i10) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i13, i11) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 | 0) {
    case 16:
     {
      i33 = 255 - i13 | 0;
      i12 = (((Math_imul(i33, i12) | 0) >>> 0) / 255 | 0) + i13 | 0;
      i9 = (((Math_imul(i33, i14) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i8 = (((Math_imul(i33, i8) | 0) >>> 0) / 255 | 0) + i10 | 0;
      i7 = (((Math_imul(i33, i7) | 0) >>> 0) / 255 | 0) + i11 | 0;
      break;
     }
    case 32:
     {
      i7 = i11 + i7 | 0;
      i8 = i10 + i8 | 0;
      i9 = i9 + i14 | 0;
      i9 = i9 >>> 0 > 255 ? 255 : i9;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      break;
     }
    case 64:
     {
      i9 = ((Math_imul(i9, i14) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i10, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i9 = i14;
    }
    HEAP32[i5 >> 2] = i8 << 8 | i7 << 16 | i9 | i12 << 24;
    if (!i3) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i24 | 0;
    }
   }
   i3 = HEAP32[i21 >> 2] | 0;
  }
  i1 = i16 + (HEAP32[i25 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i21 >> 2] = i2;
  if (!i3) break;
  i16 = i1;
  i5 = i1;
  i3 = HEAP32[i23 >> 2] | 0;
  i1 = i15 + i22 | 0;
 }
 HEAP32[i32 >> 2] = i1;
 return;
}
function _SDL_Blit_ABGR8888_ARGB8888_Modulate_Blend_Scale(i31) {
 i31 = i31 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i32 = 0, i33 = 0;
 i1 = HEAP32[i31 + 52 >> 2] | 0;
 i29 = HEAPU8[i31 + 60 >> 0] | 0;
 i30 = HEAPU8[i31 + 61 >> 0] | 0;
 i19 = HEAPU8[i31 + 62 >> 0] | 0;
 i20 = HEAPU8[i31 + 63 >> 0] | 0;
 i21 = i31 + 28 | 0;
 i32 = HEAP32[i21 >> 2] | 0;
 i22 = (HEAP32[i31 + 8 >> 2] << 16 | 0) / (i32 | 0) | 0;
 i23 = i31 + 24 | 0;
 i3 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i31 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i32 + -1 | 0;
 HEAP32[i21 >> 2] = i2;
 if (!i32) return;
 i32 = i31 + 20 | 0;
 i25 = i31 + 32 | 0;
 i26 = (i1 & 1 | 0) == 0;
 i27 = (i1 & 2 | 0) == 0;
 i28 = (i1 & 48 | 0) != 0;
 i17 = i1 & 112;
 i18 = i31 + 12 | 0;
 i5 = HEAP32[i32 >> 2] | 0;
 i16 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i15 = i1 + -65536 | 0;
   i14 = i15 >>> 16;
   i15 = i15 - (i14 << 16) | 0;
   i4 = i4 + 1 + i14 | 0;
  } else i15 = i1;
  if (!i3) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i6 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i31 >> 2] | 0) + ((Math_imul(HEAP32[i18 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i13 = HEAP32[i2 >> 2] | 0;
    i9 = i13 >>> 16 & 255;
    i10 = i13 >>> 8 & 255;
    i11 = i13 & 255;
    i13 = i13 >>> 24;
    i12 = HEAP32[i5 >> 2] | 0;
    i7 = i12 >>> 16 & 255;
    i8 = i12 >>> 8 & 255;
    i14 = i12 & 255;
    i12 = i12 >>> 24;
    if (!i26) {
     i9 = ((Math_imul(i9, i19) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i30) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i29) | 0) >>> 0) / 255 | 0;
    }
    i33 = ((Math_imul(i13, i20) | 0) >>> 0) / 255 | 0;
    i13 = i27 ? i13 : i33;
    if (i28 & i13 >>> 0 < 255) {
     i9 = ((Math_imul(i13, i9) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i13, i10) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i13, i11) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 | 0) {
    case 16:
     {
      i33 = 255 - i13 | 0;
      i12 = (((Math_imul(i33, i12) | 0) >>> 0) / 255 | 0) + i13 | 0;
      i9 = (((Math_imul(i33, i14) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i8 = (((Math_imul(i33, i8) | 0) >>> 0) / 255 | 0) + i10 | 0;
      i7 = (((Math_imul(i33, i7) | 0) >>> 0) / 255 | 0) + i11 | 0;
      break;
     }
    case 32:
     {
      i7 = i11 + i7 | 0;
      i8 = i10 + i8 | 0;
      i9 = i9 + i14 | 0;
      i9 = i9 >>> 0 > 255 ? 255 : i9;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      break;
     }
    case 64:
     {
      i9 = ((Math_imul(i9, i14) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i10, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i9 = i14;
    }
    HEAP32[i5 >> 2] = i8 << 8 | i7 << 16 | i9 | i12 << 24;
    if (!i3) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i24 | 0;
    }
   }
   i3 = HEAP32[i21 >> 2] | 0;
  }
  i1 = i16 + (HEAP32[i25 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i21 >> 2] = i2;
  if (!i3) break;
  i16 = i1;
  i5 = i1;
  i3 = HEAP32[i23 >> 2] | 0;
  i1 = i15 + i22 | 0;
 }
 HEAP32[i32 >> 2] = i1;
 return;
}

function _SDL_Blit_BGR888_ARGB8888_Modulate_Blend_Scale(i30) {
 i30 = i30 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i31 = 0;
 i2 = HEAP32[i30 + 52 >> 2] | 0;
 i28 = HEAPU8[i30 + 60 >> 0] | 0;
 i29 = HEAPU8[i30 + 61 >> 0] | 0;
 i21 = HEAPU8[i30 + 62 >> 0] | 0;
 i1 = HEAP8[i30 + 63 >> 0] | 0;
 i22 = i30 + 28 | 0;
 i31 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i30 + 8 >> 2] << 16 | 0) / (i31 | 0) | 0;
 i24 = i30 + 24 | 0;
 i4 = HEAP32[i24 >> 2] | 0;
 i25 = (HEAP32[i30 + 4 >> 2] << 16 | 0) / (i4 | 0) | 0;
 i3 = i31 + -1 | 0;
 HEAP32[i22 >> 2] = i3;
 if (!i31) return;
 i31 = i30 + 20 | 0;
 i26 = i30 + 32 | 0;
 i27 = (i2 & 1 | 0) == 0;
 i19 = (i2 & 2 | 0) == 0 ? 255 : i1 & 255;
 i20 = (i2 & 48 | 0) != 0 & (i19 | 0) != 255;
 i16 = i2 & 112;
 i17 = i19 ^ 255;
 i18 = i30 + 12 | 0;
 i5 = HEAP32[i31 >> 2] | 0;
 i15 = i5;
 i1 = 0;
 i2 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i13 = i1 + -65536 | 0;
   i14 = i13 >>> 16;
   i13 = i13 - (i14 << 16) | 0;
   i14 = i2 + 1 + i14 | 0;
  } else {
   i13 = i1;
   i14 = i2;
  }
  if (!i4) i2 = i3; else {
   i1 = 65536;
   i2 = 0;
   i3 = -1;
   while (1) {
    i4 = i4 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i3 = i3 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i30 >> 2] | 0) + ((Math_imul(HEAP32[i18 >> 2] | 0, i14) | 0) + (i3 << 2)) | 0;
    }
    i10 = HEAP32[i2 >> 2] | 0;
    i8 = i10 >>> 16 & 255;
    i9 = i10 >>> 8 & 255;
    i10 = i10 & 255;
    i11 = HEAP32[i5 >> 2] | 0;
    i6 = i11 >>> 16 & 255;
    i7 = i11 >>> 8 & 255;
    i12 = i11 & 255;
    i11 = i11 >>> 24;
    if (!i27) {
     i8 = ((Math_imul(i8, i21) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i29) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i28) | 0) >>> 0) / 255 | 0;
    }
    if (i20) {
     i8 = ((Math_imul(i8, i19) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i19) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i19) | 0) >>> 0) / 255 | 0;
    }
    switch (i16 | 0) {
    case 16:
     {
      i11 = (((Math_imul(i11, i17) | 0) >>> 0) / 255 | 0) + i19 | 0;
      i8 = (((Math_imul(i12, i17) | 0) >>> 0) / 255 | 0) + i8 | 0;
      i7 = (((Math_imul(i7, i17) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i6 = (((Math_imul(i6, i17) | 0) >>> 0) / 255 | 0) + i10 | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i9 + i7 | 0;
      i8 = i8 + i12 | 0;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      i6 = i6 >>> 0 > 255 ? 255 : i6;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i8, i12) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i9, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i8 = i12;
    }
    HEAP32[i5 >> 2] = i7 << 8 | i6 << 16 | i8 | i11 << 24;
    if (!i4) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i25 | 0;
    }
   }
   i2 = HEAP32[i22 >> 2] | 0;
  }
  i1 = i15 + (HEAP32[i26 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i22 >> 2] = i3;
  if (!i2) break;
  i15 = i1;
  i5 = i1;
  i4 = HEAP32[i24 >> 2] | 0;
  i1 = i13 + i23 | 0;
  i2 = i14;
 }
 HEAP32[i31 >> 2] = i1;
 return;
}

function _SDL_UpperBlit(i13, i5, i11, i1) {
 i13 = i13 | 0;
 i5 = i5 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i3 = i15 + 8 | 0;
 i2 = i15 + 32 | 0;
 i12 = i15 + 16 | 0;
 if (!((i13 | 0) != 0 & (i11 | 0) != 0)) {
  i14 = _SDL_SetError(40858, i15) | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 if ((HEAP32[i13 + 28 >> 2] | 0) == 0 ? (HEAP32[i11 + 28 >> 2] | 0) == 0 : 0) {
  if (!i1) {
   HEAP32[i2 + 4 >> 2] = 0;
   HEAP32[i2 >> 2] = 0;
   HEAP32[i2 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   HEAP32[i2 + 12 >> 2] = HEAP32[i11 + 12 >> 2];
  } else i2 = i1;
  if (!i5) {
   i10 = HEAP32[i13 + 12 >> 2] | 0;
   i8 = 0;
   i4 = 0;
   i1 = HEAP32[i13 + 8 >> 2] | 0;
  } else {
   i1 = HEAP32[i5 >> 2] | 0;
   i3 = HEAP32[i5 + 8 >> 2] | 0;
   if ((i1 | 0) < 0) {
    HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) - i1;
    i7 = 0;
    i3 = i3 + i1 | 0;
   } else i7 = i1;
   i6 = (HEAP32[i13 + 8 >> 2] | 0) - i7 | 0;
   i4 = HEAP32[i5 + 4 >> 2] | 0;
   i1 = HEAP32[i5 + 12 >> 2] | 0;
   if ((i4 | 0) < 0) {
    i10 = i2 + 4 | 0;
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) - i4;
    i1 = i1 + i4 | 0;
    i4 = 0;
   }
   i10 = (HEAP32[i13 + 12 >> 2] | 0) - i4 | 0;
   i10 = (i10 | 0) < (i1 | 0) ? i10 : i1;
   i8 = i7;
   i1 = (i6 | 0) < (i3 | 0) ? i6 : i3;
  }
  i5 = i11 + 36 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  i7 = i6 - i3 | 0;
  if ((i7 | 0) > 0) {
   HEAP32[i2 >> 2] = i6;
   i3 = i6;
   i6 = HEAP32[i5 >> 2] | 0;
   i8 = i7 + i8 | 0;
   i1 = i1 - i7 | 0;
  }
  i9 = i3 + i1 - i6 - (HEAP32[i11 + 44 >> 2] | 0) | 0;
  i9 = i1 - ((i9 | 0) > 0 ? i9 : 0) | 0;
  i6 = i11 + 40 | 0;
  i5 = HEAP32[i6 >> 2] | 0;
  i1 = i2 + 4 | 0;
  i3 = HEAP32[i1 >> 2] | 0;
  i7 = i5 - i3 | 0;
  if ((i7 | 0) > 0) {
   HEAP32[i1 >> 2] = i5;
   i3 = i5;
   i5 = HEAP32[i6 >> 2] | 0;
   i1 = i10 - i7 | 0;
   i4 = i7 + i4 | 0;
  } else i1 = i10;
  i7 = i3 + i1 - i5 - (HEAP32[i11 + 48 >> 2] | 0) | 0;
  i1 = i1 - ((i7 | 0) > 0 ? i7 : 0) | 0;
  i7 = i13 + 52 | 0;
  i3 = HEAP32[i7 >> 2] | 0;
  i5 = i3 + 68 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  if (i6 & 512) {
   HEAP32[i5 >> 2] = i6 & -513;
   _SDL_InvalidateMap(i3);
  }
  if (!((i9 | 0) > 0 & (i1 | 0) > 0)) {
   HEAP32[i2 + 12 >> 2] = 0;
   HEAP32[i2 + 8 >> 2] = 0;
   i14 = 0;
   STACKTOP = i15;
   return i14 | 0;
  }
  HEAP32[i12 >> 2] = i8;
  HEAP32[i12 + 4 >> 2] = i4;
  HEAP32[i2 + 8 >> 2] = i9;
  HEAP32[i12 + 8 >> 2] = i9;
  HEAP32[i2 + 12 >> 2] = i1;
  HEAP32[i12 + 12 >> 2] = i1;
  i1 = HEAP32[i7 >> 2] | 0;
  do if ((HEAP32[i1 >> 2] | 0) == (i11 | 0)) {
   i10 = HEAP32[(HEAP32[i11 + 4 >> 2] | 0) + 4 >> 2] | 0;
   if ((i10 | 0) != 0 ? (HEAP32[i1 + 80 >> 2] | 0) != (HEAP32[i10 + 8 >> 2] | 0) : 0) {
    i14 = 27;
    break;
   }
   i10 = HEAP32[(HEAP32[i13 + 4 >> 2] | 0) + 4 >> 2] | 0;
   if ((i10 | 0) != 0 ? (HEAP32[i1 + 84 >> 2] | 0) != (HEAP32[i10 + 8 >> 2] | 0) : 0) i14 = 27;
  } else i14 = 27; while (0);
  do if ((i14 | 0) == 27) if ((_SDL_MapSurface(i13, i11) | 0) < 0) {
   i14 = -1;
   STACKTOP = i15;
   return i14 | 0;
  } else {
   i1 = HEAP32[i7 >> 2] | 0;
   break;
  } while (0);
  i14 = FUNCTION_TABLE_iiiii[HEAP32[i1 + 8 >> 2] & 31](i13, i12, i11, i2) | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 i14 = _SDL_SetError(40895, i3) | 0;
 STACKTOP = i15;
 return i14 | 0;
}

function _SDL_Blit_RGB888_ARGB8888_Modulate_Blend_Scale(i30) {
 i30 = i30 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i31 = 0;
 i2 = HEAP32[i30 + 52 >> 2] | 0;
 i28 = HEAPU8[i30 + 60 >> 0] | 0;
 i29 = HEAPU8[i30 + 61 >> 0] | 0;
 i21 = HEAPU8[i30 + 62 >> 0] | 0;
 i1 = HEAP8[i30 + 63 >> 0] | 0;
 i22 = i30 + 28 | 0;
 i31 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i30 + 8 >> 2] << 16 | 0) / (i31 | 0) | 0;
 i24 = i30 + 24 | 0;
 i4 = HEAP32[i24 >> 2] | 0;
 i25 = (HEAP32[i30 + 4 >> 2] << 16 | 0) / (i4 | 0) | 0;
 i3 = i31 + -1 | 0;
 HEAP32[i22 >> 2] = i3;
 if (!i31) return;
 i31 = i30 + 20 | 0;
 i26 = i30 + 32 | 0;
 i27 = (i2 & 1 | 0) == 0;
 i19 = (i2 & 2 | 0) == 0 ? 255 : i1 & 255;
 i20 = (i2 & 48 | 0) != 0 & (i19 | 0) != 255;
 i16 = i2 & 112;
 i17 = i19 ^ 255;
 i18 = i30 + 12 | 0;
 i5 = HEAP32[i31 >> 2] | 0;
 i15 = i5;
 i1 = 0;
 i2 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i13 = i1 + -65536 | 0;
   i14 = i13 >>> 16;
   i13 = i13 - (i14 << 16) | 0;
   i14 = i2 + 1 + i14 | 0;
  } else {
   i13 = i1;
   i14 = i2;
  }
  if (!i4) i2 = i3; else {
   i1 = 65536;
   i2 = 0;
   i3 = -1;
   while (1) {
    i4 = i4 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i3 = i3 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i30 >> 2] | 0) + ((Math_imul(HEAP32[i18 >> 2] | 0, i14) | 0) + (i3 << 2)) | 0;
    }
    i8 = HEAP32[i2 >> 2] | 0;
    i10 = i8 >>> 16 & 255;
    i9 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    i11 = HEAP32[i5 >> 2] | 0;
    i6 = i11 >>> 16 & 255;
    i7 = i11 >>> 8 & 255;
    i12 = i11 & 255;
    i11 = i11 >>> 24;
    if (!i27) {
     i8 = ((Math_imul(i8, i21) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i29) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i28) | 0) >>> 0) / 255 | 0;
    }
    if (i20) {
     i8 = ((Math_imul(i8, i19) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i19) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i19) | 0) >>> 0) / 255 | 0;
    }
    switch (i16 | 0) {
    case 16:
     {
      i11 = (((Math_imul(i11, i17) | 0) >>> 0) / 255 | 0) + i19 | 0;
      i8 = (((Math_imul(i12, i17) | 0) >>> 0) / 255 | 0) + i8 | 0;
      i7 = (((Math_imul(i7, i17) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i6 = (((Math_imul(i6, i17) | 0) >>> 0) / 255 | 0) + i10 | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i9 + i7 | 0;
      i8 = i8 + i12 | 0;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      i6 = i6 >>> 0 > 255 ? 255 : i6;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i8, i12) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i9, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i8 = i12;
    }
    HEAP32[i5 >> 2] = i7 << 8 | i6 << 16 | i8 | i11 << 24;
    if (!i4) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i25 | 0;
    }
   }
   i2 = HEAP32[i22 >> 2] | 0;
  }
  i1 = i15 + (HEAP32[i26 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i22 >> 2] = i3;
  if (!i2) break;
  i15 = i1;
  i5 = i1;
  i4 = HEAP32[i24 >> 2] | 0;
  i1 = i13 + i23 | 0;
  i2 = i14;
 }
 HEAP32[i31 >> 2] = i1;
 return;
}

function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE(i1, i10, i11, i3, i12, i13, i9, i2) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i3 = i3 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i14 = 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i13 >> 2] = i3;
 if (i2 & 4) {
  i1 = HEAP32[i11 >> 2] | 0;
  i2 = i10;
  if ((((i2 - i1 | 0) > 2 ? (HEAP8[i1 >> 0] | 0) == -17 : 0) ? (HEAP8[i1 + 1 >> 0] | 0) == -69 : 0) ? (HEAP8[i1 + 2 >> 0] | 0) == -65 : 0) {
   HEAP32[i11 >> 2] = i1 + 3;
   i3 = HEAP32[i13 >> 2] | 0;
   i8 = i2;
  } else i8 = i2;
 } else i8 = i10;
 i2 = HEAP32[i11 >> 2] | 0;
 i1 = i2 >>> 0 < i10 >>> 0;
 L9 : do if (i1 & i3 >>> 0 < i12 >>> 0) while (1) {
  i1 = HEAP8[i2 >> 0] | 0;
  i7 = i1 & 255;
  do if (i1 << 24 >> 24 > -1) {
   if (i7 >>> 0 > i9 >>> 0) {
    i1 = 2;
    break L9;
   }
   HEAP32[i3 >> 2] = i7;
   HEAP32[i11 >> 2] = i2 + 1;
  } else {
   if ((i1 & 255) < 194) {
    i1 = 2;
    break L9;
   }
   if ((i1 & 255) < 224) {
    if ((i8 - i2 | 0) < 2) {
     i1 = 1;
     break L9;
    }
    i1 = HEAPU8[i2 + 1 >> 0] | 0;
    if ((i1 & 192 | 0) != 128) {
     i1 = 2;
     break L9;
    }
    i1 = i1 & 63 | i7 << 6 & 1984;
    if (i1 >>> 0 > i9 >>> 0) {
     i1 = 2;
     break L9;
    }
    HEAP32[i3 >> 2] = i1;
    HEAP32[i11 >> 2] = i2 + 2;
    break;
   }
   if ((i1 & 255) < 240) {
    if ((i8 - i2 | 0) < 3) {
     i1 = 1;
     break L9;
    }
    i4 = HEAP8[i2 + 1 >> 0] | 0;
    i1 = HEAP8[i2 + 2 >> 0] | 0;
    switch (i7 | 0) {
    case 224:
     {
      if ((i4 & -32) << 24 >> 24 != -96) {
       i1 = 2;
       break L9;
      }
      break;
     }
    case 237:
     {
      if ((i4 & -32) << 24 >> 24 != -128) {
       i1 = 2;
       break L9;
      }
      break;
     }
    default:
     if ((i4 & -64) << 24 >> 24 != -128) {
      i1 = 2;
      break L9;
     }
    }
    i1 = i1 & 255;
    if ((i1 & 192 | 0) != 128) {
     i1 = 2;
     break L9;
    }
    i1 = (i4 & 255) << 6 & 4032 | i7 << 12 & 61440 | i1 & 63;
    if (i1 >>> 0 > i9 >>> 0) {
     i1 = 2;
     break L9;
    }
    HEAP32[i3 >> 2] = i1;
    HEAP32[i11 >> 2] = i2 + 3;
    break;
   }
   if ((i1 & 255) >= 245) {
    i1 = 2;
    break L9;
   }
   if ((i8 - i2 | 0) < 4) {
    i1 = 1;
    break L9;
   }
   i6 = HEAP8[i2 + 1 >> 0] | 0;
   i1 = HEAP8[i2 + 2 >> 0] | 0;
   i4 = HEAP8[i2 + 3 >> 0] | 0;
   switch (i7 | 0) {
   case 240:
    {
     if ((i6 + 112 & 255) >= 48) {
      i1 = 2;
      break L9;
     }
     break;
    }
   case 244:
    {
     if ((i6 & -16) << 24 >> 24 != -128) {
      i1 = 2;
      break L9;
     }
     break;
    }
   default:
    if ((i6 & -64) << 24 >> 24 != -128) {
     i1 = 2;
     break L9;
    }
   }
   i5 = i1 & 255;
   if ((i5 & 192 | 0) != 128) {
    i1 = 2;
    break L9;
   }
   i1 = i4 & 255;
   if ((i1 & 192 | 0) != 128) {
    i1 = 2;
    break L9;
   }
   i1 = (i6 & 255) << 12 & 258048 | i7 << 18 & 1835008 | i5 << 6 & 4032 | i1 & 63;
   if (i1 >>> 0 > i9 >>> 0) {
    i1 = 2;
    break L9;
   }
   HEAP32[i3 >> 2] = i1;
   HEAP32[i11 >> 2] = i2 + 4;
  } while (0);
  i3 = (HEAP32[i13 >> 2] | 0) + 4 | 0;
  HEAP32[i13 >> 2] = i3;
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2 >>> 0 < i10 >>> 0;
  if (!(i1 & i3 >>> 0 < i12 >>> 0)) {
   i14 = 38;
   break;
  }
 } else i14 = 38; while (0);
 if ((i14 | 0) == 38) i1 = i1 & 1;
 return i1 | 0;
}

function _fmod(d12, d1) {
 d12 = +d12;
 d1 = +d1;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0;
 HEAPF64[tempDoublePtr >> 3] = d12;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 i9 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i10 = HEAP32[tempDoublePtr >> 2] | 0;
 i11 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i3 = _bitshift64Lshr(i2 | 0, i9 | 0, 52) | 0;
 i3 = i3 & 2047;
 i7 = _bitshift64Lshr(i10 | 0, i11 | 0, 52) | 0;
 i7 = i7 & 2047;
 i13 = i9 & -2147483648;
 i6 = _bitshift64Shl(i10 | 0, i11 | 0, 1) | 0;
 i8 = tempRet0;
 L1 : do if (!((i6 | 0) == 0 & (i8 | 0) == 0) ? (i5 = i11 & 2147483647, !(i5 >>> 0 > 2146435072 | (i5 | 0) == 2146435072 & i10 >>> 0 > 0 | (i3 | 0) == 2047)) : 0) {
  i4 = _bitshift64Shl(i2 | 0, i9 | 0, 1) | 0;
  i5 = tempRet0;
  if (!(i5 >>> 0 > i8 >>> 0 | (i5 | 0) == (i8 | 0) & i4 >>> 0 > i6 >>> 0)) return +((i4 | 0) == (i6 | 0) & (i5 | 0) == (i8 | 0) ? d12 * 0.0 : d12);
  if (!i3) {
   i3 = _bitshift64Shl(i2 | 0, i9 | 0, 12) | 0;
   i4 = tempRet0;
   if ((i4 | 0) > -1 | (i4 | 0) == -1 & i3 >>> 0 > 4294967295) {
    i5 = i3;
    i3 = 0;
    do {
     i3 = i3 + -1 | 0;
     i5 = _bitshift64Shl(i5 | 0, i4 | 0, 1) | 0;
     i4 = tempRet0;
    } while ((i4 | 0) > -1 | (i4 | 0) == -1 & i5 >>> 0 > 4294967295);
   } else i3 = 0;
   i2 = _bitshift64Shl(i2 | 0, i9 | 0, 1 - i3 | 0) | 0;
   i4 = tempRet0;
  } else i4 = i9 & 1048575 | 1048576;
  if (!i7) {
   i5 = _bitshift64Shl(i10 | 0, i11 | 0, 12) | 0;
   i6 = tempRet0;
   if ((i6 | 0) > -1 | (i6 | 0) == -1 & i5 >>> 0 > 4294967295) {
    i7 = 0;
    do {
     i7 = i7 + -1 | 0;
     i5 = _bitshift64Shl(i5 | 0, i6 | 0, 1) | 0;
     i6 = tempRet0;
    } while ((i6 | 0) > -1 | (i6 | 0) == -1 & i5 >>> 0 > 4294967295);
   } else i7 = 0;
   i10 = _bitshift64Shl(i10 | 0, i11 | 0, 1 - i7 | 0) | 0;
   i9 = tempRet0;
  } else i9 = i11 & 1048575 | 1048576;
  i8 = _i64Subtract(i2 | 0, i4 | 0, i10 | 0, i9 | 0) | 0;
  i6 = tempRet0;
  i5 = (i6 | 0) > -1 | (i6 | 0) == -1 & i8 >>> 0 > 4294967295;
  L23 : do if ((i3 | 0) > (i7 | 0)) {
   while (1) {
    if (i5) if ((i2 | 0) == (i10 | 0) & (i4 | 0) == (i9 | 0)) break; else {
     i2 = i8;
     i4 = i6;
    }
    i2 = _bitshift64Shl(i2 | 0, i4 | 0, 1) | 0;
    i4 = tempRet0;
    i3 = i3 + -1 | 0;
    i8 = _i64Subtract(i2 | 0, i4 | 0, i10 | 0, i9 | 0) | 0;
    i6 = tempRet0;
    i5 = (i6 | 0) > -1 | (i6 | 0) == -1 & i8 >>> 0 > 4294967295;
    if ((i3 | 0) <= (i7 | 0)) break L23;
   }
   d1 = d12 * 0.0;
   break L1;
  } while (0);
  if (i5) if ((i2 | 0) == (i10 | 0) & (i4 | 0) == (i9 | 0)) {
   d1 = d12 * 0.0;
   break;
  } else {
   i4 = i6;
   i2 = i8;
  }
  if (i4 >>> 0 < 1048576 | (i4 | 0) == 1048576 & i2 >>> 0 < 0) do {
   i2 = _bitshift64Shl(i2 | 0, i4 | 0, 1) | 0;
   i4 = tempRet0;
   i3 = i3 + -1 | 0;
  } while (i4 >>> 0 < 1048576 | (i4 | 0) == 1048576 & i2 >>> 0 < 0);
  if ((i3 | 0) > 0) {
   i11 = _i64Add(i2 | 0, i4 | 0, 0, -1048576) | 0;
   i2 = tempRet0;
   i3 = _bitshift64Shl(i3 | 0, 0, 52) | 0;
   i2 = i2 | tempRet0;
   i3 = i11 | i3;
  } else {
   i3 = _bitshift64Lshr(i2 | 0, i4 | 0, 1 - i3 | 0) | 0;
   i2 = tempRet0;
  }
  HEAP32[tempDoublePtr >> 2] = i3;
  HEAP32[tempDoublePtr + 4 >> 2] = i2 | i13;
  d1 = +HEAPF64[tempDoublePtr >> 3];
 } else i14 = 3; while (0);
 if ((i14 | 0) == 3) {
  d1 = d12 * d1;
  d1 = d1 / d1;
 }
 return +d1;
}

function _BlitRGBtoRGBPixelAlpha(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i1 = HEAP32[i3 + 24 >> 2] | 0;
 i2 = HEAP32[i3 + 28 >> 2] | 0;
 i9 = HEAP32[i3 + 16 >> 2] >> 2;
 i10 = HEAP32[i3 + 36 >> 2] >> 2;
 if (!i2) return;
 i8 = (i1 + 3 | 0) / 4 | 0;
 i7 = i1 & 3;
 i1 = HEAP32[i3 + 20 >> 2] | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 L4 : while (1) {
  i2 = i2 + -1 | 0;
  switch (i7 | 0) {
  case 0:
   {
    i6 = i8;
    i5 = i3;
    i4 = 4;
    break;
   }
  case 3:
   {
    i6 = i8;
    i5 = i3;
    i4 = 8;
    break;
   }
  case 2:
   {
    i6 = i8;
    i5 = i3;
    i4 = 12;
    break;
   }
  case 1:
   {
    i6 = i8;
    i5 = i3;
    i4 = 16;
    break;
   }
  default:
   i4 = 20;
  }
  while (1) if ((i4 | 0) == 4) {
   i3 = HEAP32[i5 >> 2] | 0;
   i4 = i3 >>> 24;
   switch (i4 | 0) {
   case 0:
    break;
   case 255:
    {
     HEAP32[i1 >> 2] = i3;
     break;
    }
   default:
    {
     i12 = HEAP32[i1 >> 2] | 0;
     i11 = i12 & 16711935;
     i13 = i12 & 65280;
     HEAP32[i1 >> 2] = ((Math_imul((i3 & 65280) - i13 | 0, i4) | 0) >>> 8) + i13 & 65280 | ((Math_imul(i12 >>> 24, i4 ^ 255) | 0) >>> 8) + i4 << 24 | ((Math_imul((i3 & 16711935) - i11 | 0, i4) | 0) >>> 8) + i11 & 16711935;
    }
   }
   i1 = i1 + 4 | 0;
   i5 = i5 + 4 | 0;
   i4 = 8;
   continue;
  } else if ((i4 | 0) == 8) {
   i3 = HEAP32[i5 >> 2] | 0;
   i4 = i3 >>> 24;
   switch (i4 | 0) {
   case 0:
    break;
   case 255:
    {
     HEAP32[i1 >> 2] = i3;
     break;
    }
   default:
    {
     i12 = HEAP32[i1 >> 2] | 0;
     i13 = i12 & 16711935;
     i11 = i12 & 65280;
     HEAP32[i1 >> 2] = ((Math_imul((i3 & 65280) - i11 | 0, i4) | 0) >>> 8) + i11 & 65280 | ((Math_imul(i12 >>> 24, i4 ^ 255) | 0) >>> 8) + i4 << 24 | ((Math_imul((i3 & 16711935) - i13 | 0, i4) | 0) >>> 8) + i13 & 16711935;
    }
   }
   i1 = i1 + 4 | 0;
   i5 = i5 + 4 | 0;
   i4 = 12;
   continue;
  } else if ((i4 | 0) == 12) {
   i3 = HEAP32[i5 >> 2] | 0;
   i4 = i3 >>> 24;
   switch (i4 | 0) {
   case 0:
    break;
   case 255:
    {
     HEAP32[i1 >> 2] = i3;
     break;
    }
   default:
    {
     i12 = HEAP32[i1 >> 2] | 0;
     i13 = i12 & 16711935;
     i11 = i12 & 65280;
     HEAP32[i1 >> 2] = ((Math_imul((i3 & 65280) - i11 | 0, i4) | 0) >>> 8) + i11 & 65280 | ((Math_imul(i12 >>> 24, i4 ^ 255) | 0) >>> 8) + i4 << 24 | ((Math_imul((i3 & 16711935) - i13 | 0, i4) | 0) >>> 8) + i13 & 16711935;
    }
   }
   i1 = i1 + 4 | 0;
   i5 = i5 + 4 | 0;
   i4 = 16;
   continue;
  } else if ((i4 | 0) == 16) {
   i4 = HEAP32[i5 >> 2] | 0;
   i3 = i4 >>> 24;
   switch (i3 | 0) {
   case 0:
    break;
   case 255:
    {
     HEAP32[i1 >> 2] = i4;
     break;
    }
   default:
    {
     i12 = HEAP32[i1 >> 2] | 0;
     i13 = i12 & 16711935;
     i11 = i12 & 65280;
     HEAP32[i1 >> 2] = ((Math_imul((i4 & 65280) - i11 | 0, i3) | 0) >>> 8) + i11 & 65280 | ((Math_imul(i12 >>> 24, i3 ^ 255) | 0) >>> 8) + i3 << 24 | ((Math_imul((i4 & 16711935) - i13 | 0, i3) | 0) >>> 8) + i13 & 16711935;
    }
   }
   i3 = i5 + 4 | 0;
   i1 = i1 + 4 | 0;
   if ((i6 | 0) > 1) {
    i6 = i6 + -1 | 0;
    i5 = i3;
    i4 = 4;
    continue;
   } else {
    i4 = 20;
    continue;
   }
  } else if ((i4 | 0) == 20) if (!i2) break L4; else {
   i1 = i1 + (i10 << 2) | 0;
   i3 = i3 + (i9 << 2) | 0;
   continue L4;
  }
 }
 return;
}

function _SDL_Blit_RGBA8888_RGB888_Modulate_Blend_Scale(i30) {
 i30 = i30 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i31 = 0, i32 = 0;
 i1 = HEAP32[i30 + 52 >> 2] | 0;
 i28 = HEAPU8[i30 + 60 >> 0] | 0;
 i29 = HEAPU8[i30 + 61 >> 0] | 0;
 i18 = HEAPU8[i30 + 62 >> 0] | 0;
 i19 = HEAPU8[i30 + 63 >> 0] | 0;
 i20 = i30 + 28 | 0;
 i31 = HEAP32[i20 >> 2] | 0;
 i21 = (HEAP32[i30 + 8 >> 2] << 16 | 0) / (i31 | 0) | 0;
 i22 = i30 + 24 | 0;
 i3 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i30 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i31 + -1 | 0;
 HEAP32[i20 >> 2] = i2;
 if (!i31) return;
 i31 = i30 + 20 | 0;
 i24 = i30 + 32 | 0;
 i25 = (i1 & 1 | 0) == 0;
 i26 = (i1 & 2 | 0) == 0;
 i27 = (i1 & 48 | 0) != 0;
 i16 = i1 & 112;
 i17 = i30 + 12 | 0;
 i5 = HEAP32[i31 >> 2] | 0;
 i15 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i14 = i1 + -65536 | 0;
   i13 = i14 >>> 16;
   i14 = i14 - (i13 << 16) | 0;
   i4 = i4 + 1 + i13 | 0;
  } else i14 = i1;
  if (!i3) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i6 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i30 >> 2] | 0) + ((Math_imul(HEAP32[i17 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i12 = HEAP32[i2 >> 2] | 0;
    i11 = i12 >>> 24;
    i10 = i12 >>> 16 & 255;
    i9 = i12 >>> 8 & 255;
    i12 = i12 & 255;
    i13 = HEAP32[i5 >> 2] | 0;
    i7 = i13 >>> 16 & 255;
    i8 = i13 >>> 8 & 255;
    i13 = i13 & 255;
    if (!i25) {
     i9 = ((Math_imul(i9, i18) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i29) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i28) | 0) >>> 0) / 255 | 0;
    }
    i32 = ((Math_imul(i12, i19) | 0) >>> 0) / 255 | 0;
    i12 = i26 ? i12 : i32;
    if (i27 & i12 >>> 0 < 255) {
     i9 = ((Math_imul(i12, i9) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i12, i10) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i12, i11) | 0) >>> 0) / 255 | 0;
    }
    switch (i16 | 0) {
    case 16:
     {
      i32 = 255 - i12 | 0;
      i9 = (((Math_imul(i32, i13) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i8 = (((Math_imul(i32, i8) | 0) >>> 0) / 255 | 0) + i10 | 0;
      i7 = (((Math_imul(i32, i7) | 0) >>> 0) / 255 | 0) + i11 | 0;
      break;
     }
    case 32:
     {
      i7 = i11 + i7 | 0;
      i8 = i10 + i8 | 0;
      i9 = i9 + i13 | 0;
      i9 = i9 >>> 0 > 255 ? 255 : i9;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      break;
     }
    case 64:
     {
      i9 = ((Math_imul(i9, i13) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i10, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i9 = i13;
    }
    HEAP32[i5 >> 2] = i8 << 8 | i7 << 16 | i9;
    if (!i3) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i23 | 0;
    }
   }
   i3 = HEAP32[i20 >> 2] | 0;
  }
  i1 = i15 + (HEAP32[i24 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i20 >> 2] = i2;
  if (!i3) break;
  i15 = i1;
  i5 = i1;
  i3 = HEAP32[i22 >> 2] | 0;
  i1 = i14 + i21 | 0;
 }
 HEAP32[i31 >> 2] = i1;
 return;
}

function _SDL_Blit_BGRA8888_RGB888_Modulate_Blend_Scale(i30) {
 i30 = i30 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i31 = 0, i32 = 0;
 i1 = HEAP32[i30 + 52 >> 2] | 0;
 i28 = HEAPU8[i30 + 60 >> 0] | 0;
 i29 = HEAPU8[i30 + 61 >> 0] | 0;
 i18 = HEAPU8[i30 + 62 >> 0] | 0;
 i19 = HEAPU8[i30 + 63 >> 0] | 0;
 i20 = i30 + 28 | 0;
 i31 = HEAP32[i20 >> 2] | 0;
 i21 = (HEAP32[i30 + 8 >> 2] << 16 | 0) / (i31 | 0) | 0;
 i22 = i30 + 24 | 0;
 i3 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i30 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i31 + -1 | 0;
 HEAP32[i20 >> 2] = i2;
 if (!i31) return;
 i31 = i30 + 20 | 0;
 i24 = i30 + 32 | 0;
 i25 = (i1 & 1 | 0) == 0;
 i26 = (i1 & 2 | 0) == 0;
 i27 = (i1 & 48 | 0) != 0;
 i16 = i1 & 112;
 i17 = i30 + 12 | 0;
 i5 = HEAP32[i31 >> 2] | 0;
 i15 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i14 = i1 + -65536 | 0;
   i13 = i14 >>> 16;
   i14 = i14 - (i13 << 16) | 0;
   i4 = i4 + 1 + i13 | 0;
  } else i14 = i1;
  if (!i3) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i6 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i30 >> 2] | 0) + ((Math_imul(HEAP32[i17 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i12 = HEAP32[i2 >> 2] | 0;
    i9 = i12 >>> 24;
    i10 = i12 >>> 16 & 255;
    i11 = i12 >>> 8 & 255;
    i12 = i12 & 255;
    i13 = HEAP32[i5 >> 2] | 0;
    i7 = i13 >>> 16 & 255;
    i8 = i13 >>> 8 & 255;
    i13 = i13 & 255;
    if (!i25) {
     i9 = ((Math_imul(i9, i18) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i29) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i28) | 0) >>> 0) / 255 | 0;
    }
    i32 = ((Math_imul(i12, i19) | 0) >>> 0) / 255 | 0;
    i12 = i26 ? i12 : i32;
    if (i27 & i12 >>> 0 < 255) {
     i9 = ((Math_imul(i12, i9) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i12, i10) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i12, i11) | 0) >>> 0) / 255 | 0;
    }
    switch (i16 | 0) {
    case 16:
     {
      i32 = 255 - i12 | 0;
      i9 = (((Math_imul(i32, i13) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i8 = (((Math_imul(i32, i8) | 0) >>> 0) / 255 | 0) + i10 | 0;
      i7 = (((Math_imul(i32, i7) | 0) >>> 0) / 255 | 0) + i11 | 0;
      break;
     }
    case 32:
     {
      i7 = i11 + i7 | 0;
      i8 = i10 + i8 | 0;
      i9 = i9 + i13 | 0;
      i9 = i9 >>> 0 > 255 ? 255 : i9;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      break;
     }
    case 64:
     {
      i9 = ((Math_imul(i9, i13) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i10, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i9 = i13;
    }
    HEAP32[i5 >> 2] = i8 << 8 | i7 << 16 | i9;
    if (!i3) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i23 | 0;
    }
   }
   i3 = HEAP32[i20 >> 2] | 0;
  }
  i1 = i15 + (HEAP32[i24 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i20 >> 2] = i2;
  if (!i3) break;
  i15 = i1;
  i5 = i1;
  i3 = HEAP32[i22 >> 2] | 0;
  i1 = i14 + i21 | 0;
 }
 HEAP32[i31 >> 2] = i1;
 return;
}

function _SDL_Blit_ARGB8888_RGB888_Modulate_Blend_Scale(i30) {
 i30 = i30 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i31 = 0, i32 = 0;
 i1 = HEAP32[i30 + 52 >> 2] | 0;
 i28 = HEAPU8[i30 + 60 >> 0] | 0;
 i29 = HEAPU8[i30 + 61 >> 0] | 0;
 i18 = HEAPU8[i30 + 62 >> 0] | 0;
 i19 = HEAPU8[i30 + 63 >> 0] | 0;
 i20 = i30 + 28 | 0;
 i31 = HEAP32[i20 >> 2] | 0;
 i21 = (HEAP32[i30 + 8 >> 2] << 16 | 0) / (i31 | 0) | 0;
 i22 = i30 + 24 | 0;
 i3 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i30 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i31 + -1 | 0;
 HEAP32[i20 >> 2] = i2;
 if (!i31) return;
 i31 = i30 + 20 | 0;
 i24 = i30 + 32 | 0;
 i25 = (i1 & 1 | 0) == 0;
 i26 = (i1 & 2 | 0) == 0;
 i27 = (i1 & 48 | 0) != 0;
 i16 = i1 & 112;
 i17 = i30 + 12 | 0;
 i5 = HEAP32[i31 >> 2] | 0;
 i15 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i14 = i1 + -65536 | 0;
   i13 = i14 >>> 16;
   i14 = i14 - (i13 << 16) | 0;
   i4 = i4 + 1 + i13 | 0;
  } else i14 = i1;
  if (!i3) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i6 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i30 >> 2] | 0) + ((Math_imul(HEAP32[i17 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i12 = HEAP32[i2 >> 2] | 0;
    i11 = i12 >>> 16 & 255;
    i10 = i12 >>> 8 & 255;
    i9 = i12 & 255;
    i12 = i12 >>> 24;
    i13 = HEAP32[i5 >> 2] | 0;
    i7 = i13 >>> 16 & 255;
    i8 = i13 >>> 8 & 255;
    i13 = i13 & 255;
    if (!i25) {
     i9 = ((Math_imul(i9, i18) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i29) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i28) | 0) >>> 0) / 255 | 0;
    }
    i32 = ((Math_imul(i12, i19) | 0) >>> 0) / 255 | 0;
    i12 = i26 ? i12 : i32;
    if (i27 & i12 >>> 0 < 255) {
     i9 = ((Math_imul(i12, i9) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i12, i10) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i12, i11) | 0) >>> 0) / 255 | 0;
    }
    switch (i16 | 0) {
    case 16:
     {
      i32 = 255 - i12 | 0;
      i9 = (((Math_imul(i32, i13) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i8 = (((Math_imul(i32, i8) | 0) >>> 0) / 255 | 0) + i10 | 0;
      i7 = (((Math_imul(i32, i7) | 0) >>> 0) / 255 | 0) + i11 | 0;
      break;
     }
    case 32:
     {
      i7 = i11 + i7 | 0;
      i8 = i10 + i8 | 0;
      i9 = i9 + i13 | 0;
      i9 = i9 >>> 0 > 255 ? 255 : i9;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      break;
     }
    case 64:
     {
      i9 = ((Math_imul(i9, i13) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i10, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i9 = i13;
    }
    HEAP32[i5 >> 2] = i8 << 8 | i7 << 16 | i9;
    if (!i3) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i23 | 0;
    }
   }
   i3 = HEAP32[i20 >> 2] | 0;
  }
  i1 = i15 + (HEAP32[i24 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i20 >> 2] = i2;
  if (!i3) break;
  i15 = i1;
  i5 = i1;
  i3 = HEAP32[i22 >> 2] | 0;
  i1 = i14 + i21 | 0;
 }
 HEAP32[i31 >> 2] = i1;
 return;
}

function _SDL_Blit_ABGR8888_RGB888_Modulate_Blend_Scale(i30) {
 i30 = i30 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i31 = 0, i32 = 0;
 i1 = HEAP32[i30 + 52 >> 2] | 0;
 i28 = HEAPU8[i30 + 60 >> 0] | 0;
 i29 = HEAPU8[i30 + 61 >> 0] | 0;
 i18 = HEAPU8[i30 + 62 >> 0] | 0;
 i19 = HEAPU8[i30 + 63 >> 0] | 0;
 i20 = i30 + 28 | 0;
 i31 = HEAP32[i20 >> 2] | 0;
 i21 = (HEAP32[i30 + 8 >> 2] << 16 | 0) / (i31 | 0) | 0;
 i22 = i30 + 24 | 0;
 i3 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i30 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i31 + -1 | 0;
 HEAP32[i20 >> 2] = i2;
 if (!i31) return;
 i31 = i30 + 20 | 0;
 i24 = i30 + 32 | 0;
 i25 = (i1 & 1 | 0) == 0;
 i26 = (i1 & 2 | 0) == 0;
 i27 = (i1 & 48 | 0) != 0;
 i16 = i1 & 112;
 i17 = i30 + 12 | 0;
 i5 = HEAP32[i31 >> 2] | 0;
 i15 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i14 = i1 + -65536 | 0;
   i13 = i14 >>> 16;
   i14 = i14 - (i13 << 16) | 0;
   i4 = i4 + 1 + i13 | 0;
  } else i14 = i1;
  if (!i3) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i6 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i30 >> 2] | 0) + ((Math_imul(HEAP32[i17 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i12 = HEAP32[i2 >> 2] | 0;
    i9 = i12 >>> 16 & 255;
    i10 = i12 >>> 8 & 255;
    i11 = i12 & 255;
    i12 = i12 >>> 24;
    i13 = HEAP32[i5 >> 2] | 0;
    i7 = i13 >>> 16 & 255;
    i8 = i13 >>> 8 & 255;
    i13 = i13 & 255;
    if (!i25) {
     i9 = ((Math_imul(i9, i18) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i29) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i28) | 0) >>> 0) / 255 | 0;
    }
    i32 = ((Math_imul(i12, i19) | 0) >>> 0) / 255 | 0;
    i12 = i26 ? i12 : i32;
    if (i27 & i12 >>> 0 < 255) {
     i9 = ((Math_imul(i12, i9) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i12, i10) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i12, i11) | 0) >>> 0) / 255 | 0;
    }
    switch (i16 | 0) {
    case 16:
     {
      i32 = 255 - i12 | 0;
      i9 = (((Math_imul(i32, i13) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i8 = (((Math_imul(i32, i8) | 0) >>> 0) / 255 | 0) + i10 | 0;
      i7 = (((Math_imul(i32, i7) | 0) >>> 0) / 255 | 0) + i11 | 0;
      break;
     }
    case 32:
     {
      i7 = i11 + i7 | 0;
      i8 = i10 + i8 | 0;
      i9 = i9 + i13 | 0;
      i9 = i9 >>> 0 > 255 ? 255 : i9;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      break;
     }
    case 64:
     {
      i9 = ((Math_imul(i9, i13) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i10, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i9 = i13;
    }
    HEAP32[i5 >> 2] = i8 << 8 | i7 << 16 | i9;
    if (!i3) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i23 | 0;
    }
   }
   i3 = HEAP32[i20 >> 2] | 0;
  }
  i1 = i15 + (HEAP32[i24 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i20 >> 2] = i2;
  if (!i3) break;
  i15 = i1;
  i5 = i1;
  i3 = HEAP32[i22 >> 2] | 0;
  i1 = i14 + i21 | 0;
 }
 HEAP32[i31 >> 2] = i1;
 return;
}

function _SDL_Blit_RGBA8888_BGR888_Modulate_Blend_Scale(i30) {
 i30 = i30 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i31 = 0, i32 = 0;
 i1 = HEAP32[i30 + 52 >> 2] | 0;
 i28 = HEAPU8[i30 + 60 >> 0] | 0;
 i29 = HEAPU8[i30 + 61 >> 0] | 0;
 i18 = HEAPU8[i30 + 62 >> 0] | 0;
 i19 = HEAPU8[i30 + 63 >> 0] | 0;
 i20 = i30 + 28 | 0;
 i31 = HEAP32[i20 >> 2] | 0;
 i21 = (HEAP32[i30 + 8 >> 2] << 16 | 0) / (i31 | 0) | 0;
 i22 = i30 + 24 | 0;
 i3 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i30 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i31 + -1 | 0;
 HEAP32[i20 >> 2] = i2;
 if (!i31) return;
 i31 = i30 + 20 | 0;
 i24 = i30 + 32 | 0;
 i25 = (i1 & 1 | 0) == 0;
 i26 = (i1 & 2 | 0) == 0;
 i27 = (i1 & 48 | 0) != 0;
 i16 = i1 & 112;
 i17 = i30 + 12 | 0;
 i5 = HEAP32[i31 >> 2] | 0;
 i15 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i14 = i1 + -65536 | 0;
   i13 = i14 >>> 16;
   i14 = i14 - (i13 << 16) | 0;
   i4 = i4 + 1 + i13 | 0;
  } else i14 = i1;
  if (!i3) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i6 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i30 >> 2] | 0) + ((Math_imul(HEAP32[i17 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i12 = HEAP32[i2 >> 2] | 0;
    i11 = i12 >>> 24;
    i10 = i12 >>> 16 & 255;
    i9 = i12 >>> 8 & 255;
    i12 = i12 & 255;
    i7 = HEAP32[i5 >> 2] | 0;
    i13 = i7 >>> 16 & 255;
    i8 = i7 >>> 8 & 255;
    i7 = i7 & 255;
    if (!i25) {
     i9 = ((Math_imul(i9, i18) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i29) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i28) | 0) >>> 0) / 255 | 0;
    }
    i32 = ((Math_imul(i12, i19) | 0) >>> 0) / 255 | 0;
    i12 = i26 ? i12 : i32;
    if (i27 & i12 >>> 0 < 255) {
     i9 = ((Math_imul(i12, i9) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i12, i10) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i12, i11) | 0) >>> 0) / 255 | 0;
    }
    switch (i16 | 0) {
    case 16:
     {
      i32 = 255 - i12 | 0;
      i9 = (((Math_imul(i32, i13) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i8 = (((Math_imul(i32, i8) | 0) >>> 0) / 255 | 0) + i10 | 0;
      i7 = (((Math_imul(i32, i7) | 0) >>> 0) / 255 | 0) + i11 | 0;
      break;
     }
    case 32:
     {
      i7 = i11 + i7 | 0;
      i8 = i10 + i8 | 0;
      i9 = i9 + i13 | 0;
      i9 = i9 >>> 0 > 255 ? 255 : i9;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      break;
     }
    case 64:
     {
      i9 = ((Math_imul(i9, i13) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i10, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i9 = i13;
    }
    HEAP32[i5 >> 2] = i8 << 8 | i7 | i9 << 16;
    if (!i3) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i23 | 0;
    }
   }
   i3 = HEAP32[i20 >> 2] | 0;
  }
  i1 = i15 + (HEAP32[i24 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i20 >> 2] = i2;
  if (!i3) break;
  i15 = i1;
  i5 = i1;
  i3 = HEAP32[i22 >> 2] | 0;
  i1 = i14 + i21 | 0;
 }
 HEAP32[i31 >> 2] = i1;
 return;
}

function _SDL_Blit_BGRA8888_BGR888_Modulate_Blend_Scale(i30) {
 i30 = i30 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i31 = 0, i32 = 0;
 i1 = HEAP32[i30 + 52 >> 2] | 0;
 i28 = HEAPU8[i30 + 60 >> 0] | 0;
 i29 = HEAPU8[i30 + 61 >> 0] | 0;
 i18 = HEAPU8[i30 + 62 >> 0] | 0;
 i19 = HEAPU8[i30 + 63 >> 0] | 0;
 i20 = i30 + 28 | 0;
 i31 = HEAP32[i20 >> 2] | 0;
 i21 = (HEAP32[i30 + 8 >> 2] << 16 | 0) / (i31 | 0) | 0;
 i22 = i30 + 24 | 0;
 i3 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i30 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i31 + -1 | 0;
 HEAP32[i20 >> 2] = i2;
 if (!i31) return;
 i31 = i30 + 20 | 0;
 i24 = i30 + 32 | 0;
 i25 = (i1 & 1 | 0) == 0;
 i26 = (i1 & 2 | 0) == 0;
 i27 = (i1 & 48 | 0) != 0;
 i16 = i1 & 112;
 i17 = i30 + 12 | 0;
 i5 = HEAP32[i31 >> 2] | 0;
 i15 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i14 = i1 + -65536 | 0;
   i13 = i14 >>> 16;
   i14 = i14 - (i13 << 16) | 0;
   i4 = i4 + 1 + i13 | 0;
  } else i14 = i1;
  if (!i3) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i6 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i30 >> 2] | 0) + ((Math_imul(HEAP32[i17 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i12 = HEAP32[i2 >> 2] | 0;
    i9 = i12 >>> 24;
    i10 = i12 >>> 16 & 255;
    i11 = i12 >>> 8 & 255;
    i12 = i12 & 255;
    i7 = HEAP32[i5 >> 2] | 0;
    i13 = i7 >>> 16 & 255;
    i8 = i7 >>> 8 & 255;
    i7 = i7 & 255;
    if (!i25) {
     i9 = ((Math_imul(i9, i18) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i29) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i28) | 0) >>> 0) / 255 | 0;
    }
    i32 = ((Math_imul(i12, i19) | 0) >>> 0) / 255 | 0;
    i12 = i26 ? i12 : i32;
    if (i27 & i12 >>> 0 < 255) {
     i9 = ((Math_imul(i12, i9) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i12, i10) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i12, i11) | 0) >>> 0) / 255 | 0;
    }
    switch (i16 | 0) {
    case 16:
     {
      i32 = 255 - i12 | 0;
      i9 = (((Math_imul(i32, i13) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i8 = (((Math_imul(i32, i8) | 0) >>> 0) / 255 | 0) + i10 | 0;
      i7 = (((Math_imul(i32, i7) | 0) >>> 0) / 255 | 0) + i11 | 0;
      break;
     }
    case 32:
     {
      i7 = i11 + i7 | 0;
      i8 = i10 + i8 | 0;
      i9 = i9 + i13 | 0;
      i9 = i9 >>> 0 > 255 ? 255 : i9;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      break;
     }
    case 64:
     {
      i9 = ((Math_imul(i9, i13) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i10, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i9 = i13;
    }
    HEAP32[i5 >> 2] = i8 << 8 | i7 | i9 << 16;
    if (!i3) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i23 | 0;
    }
   }
   i3 = HEAP32[i20 >> 2] | 0;
  }
  i1 = i15 + (HEAP32[i24 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i20 >> 2] = i2;
  if (!i3) break;
  i15 = i1;
  i5 = i1;
  i3 = HEAP32[i22 >> 2] | 0;
  i1 = i14 + i21 | 0;
 }
 HEAP32[i31 >> 2] = i1;
 return;
}

function _SDL_Blit_ARGB8888_BGR888_Modulate_Blend_Scale(i30) {
 i30 = i30 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i31 = 0, i32 = 0;
 i1 = HEAP32[i30 + 52 >> 2] | 0;
 i28 = HEAPU8[i30 + 60 >> 0] | 0;
 i29 = HEAPU8[i30 + 61 >> 0] | 0;
 i18 = HEAPU8[i30 + 62 >> 0] | 0;
 i19 = HEAPU8[i30 + 63 >> 0] | 0;
 i20 = i30 + 28 | 0;
 i31 = HEAP32[i20 >> 2] | 0;
 i21 = (HEAP32[i30 + 8 >> 2] << 16 | 0) / (i31 | 0) | 0;
 i22 = i30 + 24 | 0;
 i3 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i30 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i31 + -1 | 0;
 HEAP32[i20 >> 2] = i2;
 if (!i31) return;
 i31 = i30 + 20 | 0;
 i24 = i30 + 32 | 0;
 i25 = (i1 & 1 | 0) == 0;
 i26 = (i1 & 2 | 0) == 0;
 i27 = (i1 & 48 | 0) != 0;
 i16 = i1 & 112;
 i17 = i30 + 12 | 0;
 i5 = HEAP32[i31 >> 2] | 0;
 i15 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i14 = i1 + -65536 | 0;
   i13 = i14 >>> 16;
   i14 = i14 - (i13 << 16) | 0;
   i4 = i4 + 1 + i13 | 0;
  } else i14 = i1;
  if (!i3) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i6 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i30 >> 2] | 0) + ((Math_imul(HEAP32[i17 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i12 = HEAP32[i2 >> 2] | 0;
    i11 = i12 >>> 16 & 255;
    i10 = i12 >>> 8 & 255;
    i9 = i12 & 255;
    i12 = i12 >>> 24;
    i7 = HEAP32[i5 >> 2] | 0;
    i13 = i7 >>> 16 & 255;
    i8 = i7 >>> 8 & 255;
    i7 = i7 & 255;
    if (!i25) {
     i9 = ((Math_imul(i9, i18) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i29) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i28) | 0) >>> 0) / 255 | 0;
    }
    i32 = ((Math_imul(i12, i19) | 0) >>> 0) / 255 | 0;
    i12 = i26 ? i12 : i32;
    if (i27 & i12 >>> 0 < 255) {
     i9 = ((Math_imul(i12, i9) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i12, i10) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i12, i11) | 0) >>> 0) / 255 | 0;
    }
    switch (i16 | 0) {
    case 16:
     {
      i32 = 255 - i12 | 0;
      i9 = (((Math_imul(i32, i13) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i8 = (((Math_imul(i32, i8) | 0) >>> 0) / 255 | 0) + i10 | 0;
      i7 = (((Math_imul(i32, i7) | 0) >>> 0) / 255 | 0) + i11 | 0;
      break;
     }
    case 32:
     {
      i7 = i11 + i7 | 0;
      i8 = i10 + i8 | 0;
      i9 = i9 + i13 | 0;
      i9 = i9 >>> 0 > 255 ? 255 : i9;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      break;
     }
    case 64:
     {
      i9 = ((Math_imul(i9, i13) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i10, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i9 = i13;
    }
    HEAP32[i5 >> 2] = i8 << 8 | i7 | i9 << 16;
    if (!i3) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i23 | 0;
    }
   }
   i3 = HEAP32[i20 >> 2] | 0;
  }
  i1 = i15 + (HEAP32[i24 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i20 >> 2] = i2;
  if (!i3) break;
  i15 = i1;
  i5 = i1;
  i3 = HEAP32[i22 >> 2] | 0;
  i1 = i14 + i21 | 0;
 }
 HEAP32[i31 >> 2] = i1;
 return;
}

function _SDL_Blit_ABGR8888_BGR888_Modulate_Blend_Scale(i30) {
 i30 = i30 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i31 = 0, i32 = 0;
 i1 = HEAP32[i30 + 52 >> 2] | 0;
 i28 = HEAPU8[i30 + 60 >> 0] | 0;
 i29 = HEAPU8[i30 + 61 >> 0] | 0;
 i18 = HEAPU8[i30 + 62 >> 0] | 0;
 i19 = HEAPU8[i30 + 63 >> 0] | 0;
 i20 = i30 + 28 | 0;
 i31 = HEAP32[i20 >> 2] | 0;
 i21 = (HEAP32[i30 + 8 >> 2] << 16 | 0) / (i31 | 0) | 0;
 i22 = i30 + 24 | 0;
 i3 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i30 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i31 + -1 | 0;
 HEAP32[i20 >> 2] = i2;
 if (!i31) return;
 i31 = i30 + 20 | 0;
 i24 = i30 + 32 | 0;
 i25 = (i1 & 1 | 0) == 0;
 i26 = (i1 & 2 | 0) == 0;
 i27 = (i1 & 48 | 0) != 0;
 i16 = i1 & 112;
 i17 = i30 + 12 | 0;
 i5 = HEAP32[i31 >> 2] | 0;
 i15 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i14 = i1 + -65536 | 0;
   i13 = i14 >>> 16;
   i14 = i14 - (i13 << 16) | 0;
   i4 = i4 + 1 + i13 | 0;
  } else i14 = i1;
  if (!i3) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i6 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i30 >> 2] | 0) + ((Math_imul(HEAP32[i17 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i12 = HEAP32[i2 >> 2] | 0;
    i9 = i12 >>> 16 & 255;
    i10 = i12 >>> 8 & 255;
    i11 = i12 & 255;
    i12 = i12 >>> 24;
    i7 = HEAP32[i5 >> 2] | 0;
    i13 = i7 >>> 16 & 255;
    i8 = i7 >>> 8 & 255;
    i7 = i7 & 255;
    if (!i25) {
     i9 = ((Math_imul(i9, i18) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i29) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i28) | 0) >>> 0) / 255 | 0;
    }
    i32 = ((Math_imul(i12, i19) | 0) >>> 0) / 255 | 0;
    i12 = i26 ? i12 : i32;
    if (i27 & i12 >>> 0 < 255) {
     i9 = ((Math_imul(i12, i9) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i12, i10) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i12, i11) | 0) >>> 0) / 255 | 0;
    }
    switch (i16 | 0) {
    case 16:
     {
      i32 = 255 - i12 | 0;
      i9 = (((Math_imul(i32, i13) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i8 = (((Math_imul(i32, i8) | 0) >>> 0) / 255 | 0) + i10 | 0;
      i7 = (((Math_imul(i32, i7) | 0) >>> 0) / 255 | 0) + i11 | 0;
      break;
     }
    case 32:
     {
      i7 = i11 + i7 | 0;
      i8 = i10 + i8 | 0;
      i9 = i9 + i13 | 0;
      i9 = i9 >>> 0 > 255 ? 255 : i9;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      break;
     }
    case 64:
     {
      i9 = ((Math_imul(i9, i13) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i10, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i9 = i13;
    }
    HEAP32[i5 >> 2] = i8 << 8 | i7 | i9 << 16;
    if (!i3) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i23 | 0;
    }
   }
   i3 = HEAP32[i20 >> 2] | 0;
  }
  i1 = i15 + (HEAP32[i24 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i20 >> 2] = i2;
  if (!i3) break;
  i15 = i1;
  i5 = i1;
  i3 = HEAP32[i22 >> 2] | 0;
  i1 = i14 + i21 | 0;
 }
 HEAP32[i31 >> 2] = i1;
 return;
}

function _SDL_PixelFormatEnumToMasks(i9, i1, i8, i7, i6, i5) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i10 = i11 + 16 | 0;
 i2 = i11 + 8 | 0;
 if (!((i9 | 0) == 0 | (i9 & -268435456 | 0) == 268435456)) {
  _SDL_SetError(40400, i11) | 0;
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 HEAP32[i1 >> 2] = (i9 & 255) >>> 0 < 3 ? i9 >>> 8 & 255 : i9 << 3 & 2040;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i8 >> 2] = 0;
 L5 : do if ((i9 | 0) < 390076419) {
  switch (i9 | 0) {
  case 386930691:
   break;
  default:
   break L5;
  }
  HEAP32[i8 >> 2] = 255;
  HEAP32[i7 >> 2] = 65280;
  HEAP32[i6 >> 2] = 16711680;
  i10 = 1;
  STACKTOP = i11;
  return i10 | 0;
 } else {
  switch (i9 | 0) {
  case 390076419:
   break;
  default:
   break L5;
  }
  HEAP32[i8 >> 2] = 16711680;
  HEAP32[i7 >> 2] = 65280;
  HEAP32[i6 >> 2] = 255;
  i10 = 1;
  STACKTOP = i11;
  return i10 | 0;
 } while (0);
 if (((i9 >>> 24 & 15) + -4 | 0) >>> 0 >= 3) {
  i10 = 1;
  STACKTOP = i11;
  return i10 | 0;
 }
 switch (i9 >>> 16 & 15 | 0) {
 case 1:
  {
   i1 = 0;
   i2 = 224;
   i3 = 28;
   i4 = 3;
   break;
  }
 case 2:
  {
   i1 = 61440;
   i2 = 3840;
   i3 = 240;
   i4 = 15;
   break;
  }
 case 3:
  {
   i1 = 32768;
   i2 = 31744;
   i3 = 992;
   i4 = 31;
   break;
  }
 case 4:
  {
   i1 = 63488;
   i2 = 1984;
   i3 = 62;
   i4 = 1;
   break;
  }
 case 5:
  {
   i1 = 0;
   i2 = 63488;
   i3 = 2016;
   i4 = 31;
   break;
  }
 case 6:
  {
   i1 = -16777216;
   i2 = 16711680;
   i3 = 65280;
   i4 = 255;
   break;
  }
 case 7:
  {
   i1 = -1073741824;
   i2 = 1072693248;
   i3 = 1047552;
   i4 = 1023;
   break;
  }
 case 8:
  {
   i1 = -4194304;
   i2 = 4190208;
   i3 = 4092;
   i4 = 3;
   break;
  }
 default:
  {
   _SDL_SetError(40825, i2) | 0;
   i10 = 0;
   STACKTOP = i11;
   return i10 | 0;
  }
 }
 switch (i9 >>> 20 & 15 | 0) {
 case 1:
  {
   HEAP32[i8 >> 2] = i2;
   HEAP32[i7 >> 2] = i3;
   HEAP32[i6 >> 2] = i4;
   i10 = 1;
   STACKTOP = i11;
   return i10 | 0;
  }
 case 2:
  {
   HEAP32[i8 >> 2] = i1;
   HEAP32[i7 >> 2] = i2;
   HEAP32[i6 >> 2] = i3;
   i10 = 1;
   STACKTOP = i11;
   return i10 | 0;
  }
 case 3:
  {
   HEAP32[i5 >> 2] = i1;
   HEAP32[i8 >> 2] = i2;
   HEAP32[i7 >> 2] = i3;
   HEAP32[i6 >> 2] = i4;
   i10 = 1;
   STACKTOP = i11;
   return i10 | 0;
  }
 case 4:
  {
   HEAP32[i8 >> 2] = i1;
   HEAP32[i7 >> 2] = i2;
   HEAP32[i6 >> 2] = i3;
   HEAP32[i5 >> 2] = i4;
   i10 = 1;
   STACKTOP = i11;
   return i10 | 0;
  }
 case 5:
  {
   HEAP32[i6 >> 2] = i2;
   HEAP32[i7 >> 2] = i3;
   HEAP32[i8 >> 2] = i4;
   i10 = 1;
   STACKTOP = i11;
   return i10 | 0;
  }
 case 6:
  {
   HEAP32[i6 >> 2] = i1;
   HEAP32[i7 >> 2] = i2;
   HEAP32[i8 >> 2] = i3;
   i10 = 1;
   STACKTOP = i11;
   return i10 | 0;
  }
 case 8:
  {
   HEAP32[i6 >> 2] = i1;
   HEAP32[i7 >> 2] = i2;
   HEAP32[i8 >> 2] = i3;
   HEAP32[i5 >> 2] = i4;
   i10 = 1;
   STACKTOP = i11;
   return i10 | 0;
  }
 case 7:
  {
   HEAP32[i5 >> 2] = i1;
   HEAP32[i6 >> 2] = i2;
   HEAP32[i7 >> 2] = i3;
   HEAP32[i8 >> 2] = i4;
   i10 = 1;
   STACKTOP = i11;
   return i10 | 0;
  }
 default:
  {
   _SDL_SetError(40825, i10) | 0;
   i10 = 0;
   STACKTOP = i11;
   return i10 | 0;
  }
 }
 return 0;
}

function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i1, i8, i9, i4, i2, i10, i7, i3) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i10 = i10 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i4;
 if (i3 & 2) if ((i2 - i4 | 0) < 3) i1 = 1; else {
  HEAP32[i10 >> 2] = i4 + 1;
  HEAP8[i4 >> 0] = -17;
  i5 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i5 + 1;
  HEAP8[i5 >> 0] = -69;
  i5 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i5 + 1;
  HEAP8[i5 >> 0] = -65;
  i5 = 4;
 } else i5 = 4;
 L4 : do if ((i5 | 0) == 4) {
  i6 = i8;
  i1 = HEAP32[i9 >> 2] | 0;
  if (i1 >>> 0 < i8 >>> 0) while (1) {
   i3 = HEAP16[i1 >> 1] | 0;
   i5 = i3 & 65535;
   if (i5 >>> 0 > i7 >>> 0) {
    i1 = 2;
    break L4;
   }
   do if ((i3 & 65535) < 128) {
    i1 = HEAP32[i10 >> 2] | 0;
    if ((i2 - i1 | 0) < 1) {
     i1 = 1;
     break L4;
    }
    HEAP32[i10 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = i3;
   } else {
    if ((i3 & 65535) < 2048) {
     i1 = HEAP32[i10 >> 2] | 0;
     if ((i2 - i1 | 0) < 2) {
      i1 = 1;
      break L4;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i5 >>> 6 | 192;
     i4 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 & 63 | 128;
     break;
    }
    if ((i3 & 65535) < 55296) {
     i1 = HEAP32[i10 >> 2] | 0;
     if ((i2 - i1 | 0) < 3) {
      i1 = 1;
      break L4;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i5 >>> 12 | 224;
     i4 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 >>> 6 & 63 | 128;
     i4 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 & 63 | 128;
     break;
    }
    if ((i3 & 65535) >= 56320) {
     if ((i3 & 65535) < 57344) {
      i1 = 2;
      break L4;
     }
     i1 = HEAP32[i10 >> 2] | 0;
     if ((i2 - i1 | 0) < 3) {
      i1 = 1;
      break L4;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i5 >>> 12 | 224;
     i4 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 >>> 6 & 63 | 128;
     i4 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 & 63 | 128;
     break;
    }
    if ((i6 - i1 | 0) < 4) {
     i1 = 1;
     break L4;
    }
    i1 = i1 + 2 | 0;
    i3 = HEAPU16[i1 >> 1] | 0;
    if ((i3 & 64512 | 0) != 56320) {
     i1 = 2;
     break L4;
    }
    if ((i2 - (HEAP32[i10 >> 2] | 0) | 0) < 4) {
     i1 = 1;
     break L4;
    }
    i4 = i5 & 960;
    if (((i4 << 10) + 65536 | i5 << 10 & 64512 | i3 & 1023) >>> 0 > i7 >>> 0) {
     i1 = 2;
     break L4;
    }
    HEAP32[i9 >> 2] = i1;
    i1 = (i4 >>> 6) + 1 | 0;
    i4 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i1 >>> 2 | 240;
    i4 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i5 >>> 2 & 15 | i1 << 4 & 48 | 128;
    i4 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i5 << 4 & 48 | i3 >>> 6 & 15 | 128;
    i5 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = i5 + 1;
    HEAP8[i5 >> 0] = i3 & 63 | 128;
   } while (0);
   i1 = (HEAP32[i9 >> 2] | 0) + 2 | 0;
   HEAP32[i9 >> 2] = i1;
   if (i1 >>> 0 >= i8 >>> 0) {
    i1 = 0;
    break;
   }
  } else i1 = 0;
 } while (0);
 return i1 | 0;
}

function _SDL_SetRenderTarget(i8, i1) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i9 + 16 | 0;
 i3 = i9 + 8 | 0;
 i2 = i9;
 if (((i8 | 0) != 0 ? (i6 = HEAP32[i8 + 44 >> 2] | 0, (i6 | 0) != 0) : 0) ? (HEAP32[i8 + 108 >> 2] & 8 | 0) != 0 : 0) {
  i7 = i8 + 304 | 0;
  i5 = HEAP32[i7 >> 2] | 0;
  if ((i5 | 0) == (i1 | 0)) {
   i8 = 0;
   STACKTOP = i9;
   return i8 | 0;
  }
  do if (i1) {
   if ((HEAP32[i1 >> 2] | 0) != 37830) {
    _SDL_SetError(37831, i2) | 0;
    i8 = -1;
    STACKTOP = i9;
    return i8 | 0;
   }
   if ((HEAP32[i1 + 32 >> 2] | 0) != (i8 | 0)) {
    i8 = _SDL_SetError(38082, i3) | 0;
    STACKTOP = i9;
    return i8 | 0;
   }
   if ((HEAP32[i1 + 8 >> 2] | 0) == 2) {
    i2 = HEAP32[i1 + 36 >> 2] | 0;
    i1 = (i2 | 0) == 0 ? i1 : i2;
    i2 = (i1 | 0) != 0;
    if (i5) {
     i3 = i1;
     break;
    }
    i4 = i8 + 228 | 0;
    i5 = i8 + 212 | 0;
    HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
    HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
    HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
    HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
    i4 = i8 + 260 | 0;
    i5 = i8 + 244 | 0;
    HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
    HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
    HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
    HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
    HEAP32[i8 + 280 >> 2] = HEAP32[i8 + 276 >> 2];
    i4 = i8 + 284 | 0;
    i5 = HEAP32[i4 + 4 >> 2] | 0;
    i3 = i8 + 292 | 0;
    HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i3 + 4 >> 2] = i5;
    HEAP32[i8 + 204 >> 2] = HEAP32[i8 + 196 >> 2];
    HEAP32[i8 + 208 >> 2] = HEAP32[i8 + 200 >> 2];
    i3 = i1;
    break;
   } else {
    i8 = _SDL_SetError(38125, i4) | 0;
    STACKTOP = i9;
    return i8 | 0;
   }
  } else {
   i3 = 0;
   i2 = 0;
  } while (0);
  HEAP32[i7 >> 2] = i3;
  if ((FUNCTION_TABLE_iii[i6 & 63](i8, i3) | 0) < 0) {
   i8 = -1;
   STACKTOP = i9;
   return i8 | 0;
  }
  i1 = i8 + 212 | 0;
  if (i2) {
   HEAP32[i1 >> 2] = 0;
   HEAP32[i8 + 216 >> 2] = 0;
   i2 = HEAP32[i3 + 12 >> 2] | 0;
   HEAP32[i8 + 220 >> 2] = i2;
   i1 = HEAP32[i3 + 16 >> 2] | 0;
   HEAP32[i8 + 224 >> 2] = i1;
   HEAPF32[i8 + 284 >> 2] = 1.0;
   HEAPF32[i8 + 288 >> 2] = 1.0;
  } else {
   i7 = i8 + 228 | 0;
   HEAP32[i1 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i1 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   i7 = i8 + 244 | 0;
   i2 = i8 + 260 | 0;
   HEAP32[i7 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i7 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
   HEAP32[i7 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
   HEAP32[i7 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
   HEAP32[i8 + 276 >> 2] = HEAP32[i8 + 280 >> 2];
   i7 = i8 + 292 | 0;
   i2 = HEAP32[i7 + 4 >> 2] | 0;
   i1 = i8 + 284 | 0;
   HEAP32[i1 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i1 + 4 >> 2] = i2;
   i1 = HEAP32[i8 + 208 >> 2] | 0;
   i2 = HEAP32[i8 + 204 >> 2] | 0;
  }
  HEAP32[i8 + 196 >> 2] = i2;
  HEAP32[i8 + 200 >> 2] = i1;
  if ((FUNCTION_TABLE_ii[HEAP32[i8 + 48 >> 2] & 127](i8) | 0) < 0) {
   i8 = -1;
   STACKTOP = i9;
   return i8 | 0;
  }
  i8 = (FUNCTION_TABLE_ii[HEAP32[i8 + 52 >> 2] & 127](i8) | 0) >> 31;
  STACKTOP = i9;
  return i8 | 0;
 }
 i8 = _SDL_Error(4) | 0;
 STACKTOP = i9;
 return i8 | 0;
}

function _SDL_Blit_BGR888_RGB888_Modulate_Blend_Scale(i29) {
 i29 = i29 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i30 = 0;
 i2 = HEAP32[i29 + 52 >> 2] | 0;
 i27 = HEAPU8[i29 + 60 >> 0] | 0;
 i28 = HEAPU8[i29 + 61 >> 0] | 0;
 i20 = HEAPU8[i29 + 62 >> 0] | 0;
 i1 = HEAP8[i29 + 63 >> 0] | 0;
 i21 = i29 + 28 | 0;
 i30 = HEAP32[i21 >> 2] | 0;
 i22 = (HEAP32[i29 + 8 >> 2] << 16 | 0) / (i30 | 0) | 0;
 i23 = i29 + 24 | 0;
 i4 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i29 + 4 >> 2] << 16 | 0) / (i4 | 0) | 0;
 i3 = i30 + -1 | 0;
 HEAP32[i21 >> 2] = i3;
 if (!i30) return;
 i30 = i29 + 20 | 0;
 i25 = i29 + 32 | 0;
 i26 = (i2 & 1 | 0) == 0;
 i18 = (i2 & 2 | 0) == 0 ? 255 : i1 & 255;
 i19 = (i2 & 48 | 0) != 0 & (i18 | 0) != 255;
 i15 = i2 & 112;
 i16 = i18 ^ 255;
 i17 = i29 + 12 | 0;
 i5 = HEAP32[i30 >> 2] | 0;
 i14 = i5;
 i1 = 0;
 i2 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i12 = i1 + -65536 | 0;
   i13 = i12 >>> 16;
   i12 = i12 - (i13 << 16) | 0;
   i13 = i2 + 1 + i13 | 0;
  } else {
   i12 = i1;
   i13 = i2;
  }
  if (!i4) i2 = i3; else {
   i1 = 65536;
   i2 = 0;
   i3 = -1;
   while (1) {
    i4 = i4 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i3 = i3 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i29 >> 2] | 0) + ((Math_imul(HEAP32[i17 >> 2] | 0, i13) | 0) + (i3 << 2)) | 0;
    }
    i10 = HEAP32[i2 >> 2] | 0;
    i8 = i10 >>> 16 & 255;
    i9 = i10 >>> 8 & 255;
    i10 = i10 & 255;
    i11 = HEAP32[i5 >> 2] | 0;
    i6 = i11 >>> 16 & 255;
    i7 = i11 >>> 8 & 255;
    i11 = i11 & 255;
    if (!i26) {
     i8 = ((Math_imul(i8, i20) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i28) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i27) | 0) >>> 0) / 255 | 0;
    }
    if (i19) {
     i8 = ((Math_imul(i8, i18) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i18) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i18) | 0) >>> 0) / 255 | 0;
    }
    switch (i15 | 0) {
    case 16:
     {
      i8 = (((Math_imul(i11, i16) | 0) >>> 0) / 255 | 0) + i8 | 0;
      i7 = (((Math_imul(i7, i16) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i6 = (((Math_imul(i6, i16) | 0) >>> 0) / 255 | 0) + i10 | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i9 + i7 | 0;
      i8 = i8 + i11 | 0;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      i6 = i6 >>> 0 > 255 ? 255 : i6;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i8, i11) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i9, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i8 = i11;
    }
    HEAP32[i5 >> 2] = i7 << 8 | i6 << 16 | i8;
    if (!i4) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i24 | 0;
    }
   }
   i2 = HEAP32[i21 >> 2] | 0;
  }
  i1 = i14 + (HEAP32[i25 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i21 >> 2] = i3;
  if (!i2) break;
  i14 = i1;
  i5 = i1;
  i4 = HEAP32[i23 >> 2] | 0;
  i1 = i12 + i22 | 0;
  i2 = i13;
 }
 HEAP32[i30 >> 2] = i1;
 return;
}

function _SDL_Blit_RGB888_RGB888_Modulate_Blend_Scale(i29) {
 i29 = i29 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i30 = 0;
 i2 = HEAP32[i29 + 52 >> 2] | 0;
 i27 = HEAPU8[i29 + 60 >> 0] | 0;
 i28 = HEAPU8[i29 + 61 >> 0] | 0;
 i20 = HEAPU8[i29 + 62 >> 0] | 0;
 i1 = HEAP8[i29 + 63 >> 0] | 0;
 i21 = i29 + 28 | 0;
 i30 = HEAP32[i21 >> 2] | 0;
 i22 = (HEAP32[i29 + 8 >> 2] << 16 | 0) / (i30 | 0) | 0;
 i23 = i29 + 24 | 0;
 i4 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i29 + 4 >> 2] << 16 | 0) / (i4 | 0) | 0;
 i3 = i30 + -1 | 0;
 HEAP32[i21 >> 2] = i3;
 if (!i30) return;
 i30 = i29 + 20 | 0;
 i25 = i29 + 32 | 0;
 i26 = (i2 & 1 | 0) == 0;
 i18 = (i2 & 2 | 0) == 0 ? 255 : i1 & 255;
 i19 = (i2 & 48 | 0) != 0 & (i18 | 0) != 255;
 i15 = i2 & 112;
 i16 = i18 ^ 255;
 i17 = i29 + 12 | 0;
 i5 = HEAP32[i30 >> 2] | 0;
 i14 = i5;
 i1 = 0;
 i2 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i12 = i1 + -65536 | 0;
   i13 = i12 >>> 16;
   i12 = i12 - (i13 << 16) | 0;
   i13 = i2 + 1 + i13 | 0;
  } else {
   i12 = i1;
   i13 = i2;
  }
  if (!i4) i2 = i3; else {
   i1 = 65536;
   i2 = 0;
   i3 = -1;
   while (1) {
    i4 = i4 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i3 = i3 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i29 >> 2] | 0) + ((Math_imul(HEAP32[i17 >> 2] | 0, i13) | 0) + (i3 << 2)) | 0;
    }
    i8 = HEAP32[i2 >> 2] | 0;
    i10 = i8 >>> 16 & 255;
    i9 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    i11 = HEAP32[i5 >> 2] | 0;
    i6 = i11 >>> 16 & 255;
    i7 = i11 >>> 8 & 255;
    i11 = i11 & 255;
    if (!i26) {
     i8 = ((Math_imul(i8, i20) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i28) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i27) | 0) >>> 0) / 255 | 0;
    }
    if (i19) {
     i8 = ((Math_imul(i8, i18) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i18) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i18) | 0) >>> 0) / 255 | 0;
    }
    switch (i15 | 0) {
    case 16:
     {
      i8 = (((Math_imul(i11, i16) | 0) >>> 0) / 255 | 0) + i8 | 0;
      i7 = (((Math_imul(i7, i16) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i6 = (((Math_imul(i6, i16) | 0) >>> 0) / 255 | 0) + i10 | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i9 + i7 | 0;
      i8 = i8 + i11 | 0;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      i6 = i6 >>> 0 > 255 ? 255 : i6;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i8, i11) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i9, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i8 = i11;
    }
    HEAP32[i5 >> 2] = i7 << 8 | i6 << 16 | i8;
    if (!i4) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i24 | 0;
    }
   }
   i2 = HEAP32[i21 >> 2] | 0;
  }
  i1 = i14 + (HEAP32[i25 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i21 >> 2] = i3;
  if (!i2) break;
  i14 = i1;
  i5 = i1;
  i4 = HEAP32[i23 >> 2] | 0;
  i1 = i12 + i22 | 0;
  i2 = i13;
 }
 HEAP32[i30 >> 2] = i1;
 return;
}

function _SDL_Blit_BGR888_BGR888_Modulate_Blend_Scale(i29) {
 i29 = i29 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i30 = 0;
 i2 = HEAP32[i29 + 52 >> 2] | 0;
 i27 = HEAPU8[i29 + 60 >> 0] | 0;
 i28 = HEAPU8[i29 + 61 >> 0] | 0;
 i20 = HEAPU8[i29 + 62 >> 0] | 0;
 i1 = HEAP8[i29 + 63 >> 0] | 0;
 i21 = i29 + 28 | 0;
 i30 = HEAP32[i21 >> 2] | 0;
 i22 = (HEAP32[i29 + 8 >> 2] << 16 | 0) / (i30 | 0) | 0;
 i23 = i29 + 24 | 0;
 i4 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i29 + 4 >> 2] << 16 | 0) / (i4 | 0) | 0;
 i3 = i30 + -1 | 0;
 HEAP32[i21 >> 2] = i3;
 if (!i30) return;
 i30 = i29 + 20 | 0;
 i25 = i29 + 32 | 0;
 i26 = (i2 & 1 | 0) == 0;
 i18 = (i2 & 2 | 0) == 0 ? 255 : i1 & 255;
 i19 = (i2 & 48 | 0) != 0 & (i18 | 0) != 255;
 i15 = i2 & 112;
 i16 = i18 ^ 255;
 i17 = i29 + 12 | 0;
 i5 = HEAP32[i30 >> 2] | 0;
 i14 = i5;
 i1 = 0;
 i2 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i12 = i1 + -65536 | 0;
   i13 = i12 >>> 16;
   i12 = i12 - (i13 << 16) | 0;
   i13 = i2 + 1 + i13 | 0;
  } else {
   i12 = i1;
   i13 = i2;
  }
  if (!i4) i2 = i3; else {
   i1 = 65536;
   i2 = 0;
   i3 = -1;
   while (1) {
    i4 = i4 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i3 = i3 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i29 >> 2] | 0) + ((Math_imul(HEAP32[i17 >> 2] | 0, i13) | 0) + (i3 << 2)) | 0;
    }
    i10 = HEAP32[i2 >> 2] | 0;
    i8 = i10 >>> 16 & 255;
    i9 = i10 >>> 8 & 255;
    i10 = i10 & 255;
    i6 = HEAP32[i5 >> 2] | 0;
    i11 = i6 >>> 16 & 255;
    i7 = i6 >>> 8 & 255;
    i6 = i6 & 255;
    if (!i26) {
     i8 = ((Math_imul(i8, i20) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i28) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i27) | 0) >>> 0) / 255 | 0;
    }
    if (i19) {
     i8 = ((Math_imul(i8, i18) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i18) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i18) | 0) >>> 0) / 255 | 0;
    }
    switch (i15 | 0) {
    case 16:
     {
      i8 = (((Math_imul(i11, i16) | 0) >>> 0) / 255 | 0) + i8 | 0;
      i7 = (((Math_imul(i7, i16) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i6 = (((Math_imul(i6, i16) | 0) >>> 0) / 255 | 0) + i10 | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i9 + i7 | 0;
      i8 = i8 + i11 | 0;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      i6 = i6 >>> 0 > 255 ? 255 : i6;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i8, i11) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i9, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i8 = i11;
    }
    HEAP32[i5 >> 2] = i7 << 8 | i6 | i8 << 16;
    if (!i4) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i24 | 0;
    }
   }
   i2 = HEAP32[i21 >> 2] | 0;
  }
  i1 = i14 + (HEAP32[i25 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i21 >> 2] = i3;
  if (!i2) break;
  i14 = i1;
  i5 = i1;
  i4 = HEAP32[i23 >> 2] | 0;
  i1 = i12 + i22 | 0;
  i2 = i13;
 }
 HEAP32[i30 >> 2] = i1;
 return;
}

function _dollarNormalize(i17, i19) {
 i17 = i17 | 0;
 i19 = i19 | 0;
 var i1 = 0, d2 = 0.0, d3 = 0.0, i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i20 = 0, d21 = 0.0, d22 = 0.0, d23 = 0.0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i18 = i20;
 d2 = +HEAPF32[i17 >> 2];
 i16 = i17 + 4 | 0;
 i1 = HEAP32[i16 >> 2] | 0;
 if (d2 <= 0.0) if ((i1 | 0) > 1) {
  i4 = 1;
  do {
   i1 = i4 + -1 | 0;
   d10 = +HEAPF32[i17 + 8 + (i4 << 3) >> 2] - +HEAPF32[i17 + 8 + (i1 << 3) >> 2];
   d11 = +HEAPF32[i17 + 8 + (i4 << 3) + 4 >> 2] - +HEAPF32[i17 + 8 + (i1 << 3) + 4 >> 2];
   d2 = d2 + +_SDL_sqrt(d10 * d10 + d11 * d11);
   i4 = i4 + 1 | 0;
   i1 = HEAP32[i16 >> 2] | 0;
  } while ((i4 | 0) < (i1 | 0));
  i4 = 4;
 } else i1 = 0; else i4 = 4;
 if ((i4 | 0) == 4) {
  d8 = d2 / 63.0;
  if ((i1 | 0) > 1) {
   d2 = 0.0;
   d3 = 0.0;
   d6 = d8;
   i15 = 1;
   i1 = 0;
   while (1) {
    i13 = i15 + -1 | 0;
    i4 = i17 + 8 + (i13 << 3) | 0;
    i12 = i17 + 8 + (i15 << 3) | 0;
    d5 = +HEAPF32[i4 >> 2] - +HEAPF32[i12 >> 2];
    i13 = i17 + 8 + (i13 << 3) + 4 | 0;
    i14 = i17 + 8 + (i15 << 3) + 4 | 0;
    d7 = +HEAPF32[i13 >> 2] - +HEAPF32[i14 >> 2];
    d7 = +_SDL_sqrt(d5 * d5 + d7 * d7);
    d5 = d7 + d6;
    if (d5 > d8) do {
     d11 = +HEAPF32[i4 >> 2];
     d10 = (d8 - d6) / d7;
     d11 = d11 + d10 * (+HEAPF32[i12 >> 2] - d11);
     HEAPF32[i19 + (i1 << 3) >> 2] = d11;
     d5 = +HEAPF32[i13 >> 2];
     d5 = d5 + d10 * (+HEAPF32[i14 >> 2] - d5);
     HEAPF32[i19 + (i1 << 3) + 4 >> 2] = d5;
     d2 = d2 + d11;
     d3 = d3 + d5;
     i1 = i1 + 1 | 0;
     d6 = d6 - d8;
     d5 = d7 + d6;
    } while (d5 > d8);
    i15 = i15 + 1 | 0;
    i4 = HEAP32[i16 >> 2] | 0;
    if ((i15 | 0) >= (i4 | 0)) break; else d6 = d5;
   }
   if ((i1 | 0) >= 63) {
    i17 = i17 + 8 + (i4 + -1 << 3) | 0;
    i18 = HEAP32[i17 + 4 >> 2] | 0;
    i1 = i19 + 504 | 0;
    HEAP32[i1 >> 2] = HEAP32[i17 >> 2];
    HEAP32[i1 + 4 >> 2] = i18;
    d11 = d2 * .015625;
    d10 = d3 * .015625;
    d7 = +_SDL_atan2(d10 - +HEAPF32[i19 + 4 >> 2], d11 - +HEAPF32[i19 >> 2]);
    d8 = d11;
    d9 = d10;
    i1 = 0;
    d6 = d11;
    d3 = d11;
    d5 = d10;
    d2 = d10;
    do {
     i18 = i19 + (i1 << 3) | 0;
     i17 = i19 + (i1 << 3) + 4 | 0;
     d21 = +HEAPF32[i17 >> 2];
     d22 = +HEAPF32[i18 >> 2] - d11;
     d23 = d22 * +_SDL_cos(d7);
     d21 = d21 - d10;
     HEAPF32[i18 >> 2] = d8 + (d23 - d21 * +_SDL_sin(d7));
     d22 = d22 * +_SDL_sin(d7);
     d21 = d9 + (d22 + d21 * +_SDL_cos(d7));
     HEAPF32[i17 >> 2] = d21;
     d22 = +HEAPF32[i18 >> 2];
     d3 = d22 < d3 ? d22 : d3;
     d6 = d22 > d6 ? d22 : d6;
     d2 = d21 < d2 ? d21 : d2;
     d5 = d21 > d5 ? d21 : d5;
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) != 64);
    d3 = d6 - d3;
    d2 = d5 - d2;
    i1 = 0;
    do {
     i18 = i19 + (i1 << 3) | 0;
     HEAPF32[i18 >> 2] = (+HEAPF32[i18 >> 2] - d11) * 256.0 / d3;
     i18 = i19 + (i1 << 3) + 4 | 0;
     HEAPF32[i18 >> 2] = (+HEAPF32[i18 >> 2] - d10) * 256.0 / d2;
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) != 64);
    STACKTOP = i20;
    return;
   }
  } else i1 = 0;
 }
 HEAP32[i18 >> 2] = i1;
 _SDL_SetError(52257, i18) | 0;
 STACKTOP = i20;
 return;
}

function _SDL_Blit_RGB888_BGR888_Modulate_Blend_Scale(i29) {
 i29 = i29 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i30 = 0;
 i2 = HEAP32[i29 + 52 >> 2] | 0;
 i27 = HEAPU8[i29 + 60 >> 0] | 0;
 i28 = HEAPU8[i29 + 61 >> 0] | 0;
 i20 = HEAPU8[i29 + 62 >> 0] | 0;
 i1 = HEAP8[i29 + 63 >> 0] | 0;
 i21 = i29 + 28 | 0;
 i30 = HEAP32[i21 >> 2] | 0;
 i22 = (HEAP32[i29 + 8 >> 2] << 16 | 0) / (i30 | 0) | 0;
 i23 = i29 + 24 | 0;
 i4 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i29 + 4 >> 2] << 16 | 0) / (i4 | 0) | 0;
 i3 = i30 + -1 | 0;
 HEAP32[i21 >> 2] = i3;
 if (!i30) return;
 i30 = i29 + 20 | 0;
 i25 = i29 + 32 | 0;
 i26 = (i2 & 1 | 0) == 0;
 i18 = (i2 & 2 | 0) == 0 ? 255 : i1 & 255;
 i19 = (i2 & 48 | 0) != 0 & (i18 | 0) != 255;
 i15 = i2 & 112;
 i16 = i18 ^ 255;
 i17 = i29 + 12 | 0;
 i5 = HEAP32[i30 >> 2] | 0;
 i14 = i5;
 i1 = 0;
 i2 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i12 = i1 + -65536 | 0;
   i13 = i12 >>> 16;
   i12 = i12 - (i13 << 16) | 0;
   i13 = i2 + 1 + i13 | 0;
  } else {
   i12 = i1;
   i13 = i2;
  }
  if (!i4) i2 = i3; else {
   i1 = 65536;
   i2 = 0;
   i3 = -1;
   while (1) {
    i4 = i4 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i3 = i3 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i29 >> 2] | 0) + ((Math_imul(HEAP32[i17 >> 2] | 0, i13) | 0) + (i3 << 2)) | 0;
    }
    i8 = HEAP32[i2 >> 2] | 0;
    i10 = i8 >>> 16 & 255;
    i9 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    i6 = HEAP32[i5 >> 2] | 0;
    i11 = i6 >>> 16 & 255;
    i7 = i6 >>> 8 & 255;
    i6 = i6 & 255;
    if (!i26) {
     i8 = ((Math_imul(i8, i20) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i28) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i27) | 0) >>> 0) / 255 | 0;
    }
    if (i19) {
     i8 = ((Math_imul(i8, i18) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i18) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i18) | 0) >>> 0) / 255 | 0;
    }
    switch (i15 | 0) {
    case 16:
     {
      i8 = (((Math_imul(i11, i16) | 0) >>> 0) / 255 | 0) + i8 | 0;
      i7 = (((Math_imul(i7, i16) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i6 = (((Math_imul(i6, i16) | 0) >>> 0) / 255 | 0) + i10 | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i9 + i7 | 0;
      i8 = i8 + i11 | 0;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      i6 = i6 >>> 0 > 255 ? 255 : i6;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i8, i11) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i9, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i8 = i11;
    }
    HEAP32[i5 >> 2] = i7 << 8 | i6 | i8 << 16;
    if (!i4) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i24 | 0;
    }
   }
   i2 = HEAP32[i21 >> 2] | 0;
  }
  i1 = i14 + (HEAP32[i25 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i21 >> 2] = i3;
  if (!i2) break;
  i14 = i1;
  i5 = i1;
  i4 = HEAP32[i23 >> 2] | 0;
  i1 = i12 + i22 | 0;
  i2 = i13;
 }
 HEAP32[i30 >> 2] = i1;
 return;
}

function _BlitARGBto555PixelAlpha(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i1 = HEAP32[i3 + 24 >> 2] | 0;
 i2 = HEAP32[i3 + 28 >> 2] | 0;
 i9 = HEAP32[i3 + 16 >> 2] >> 2;
 i10 = HEAP32[i3 + 36 >> 2] >> 1;
 if (!i2) return;
 i8 = (i1 + 3 | 0) / 4 | 0;
 i7 = i1 & 3;
 i1 = HEAP32[i3 + 20 >> 2] | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 L4 : while (1) {
  i2 = i2 + -1 | 0;
  switch (i7 | 0) {
  case 0:
   {
    i6 = i8;
    i5 = i3;
    i4 = 4;
    break;
   }
  case 3:
   {
    i6 = i8;
    i5 = i3;
    i4 = 8;
    break;
   }
  case 2:
   {
    i6 = i8;
    i5 = i3;
    i4 = 12;
    break;
   }
  case 1:
   {
    i6 = i8;
    i5 = i3;
    i4 = 16;
    break;
   }
  default:
   i4 = 20;
  }
  while (1) if ((i4 | 0) == 4) {
   i3 = HEAP32[i5 >> 2] | 0;
   i4 = i3 >>> 27;
   switch (i4 | 0) {
   case 0:
    break;
   case 31:
    {
     HEAP16[i1 >> 1] = i3 >>> 9 & 31744 | i3 >>> 6 & 992 | i3 >>> 3 & 31;
     break;
    }
   default:
    {
     i11 = HEAPU16[i1 >> 1] | 0;
     i11 = (i11 << 16 | i11) & 65043487;
     i4 = ((Math_imul((i3 << 10 & 65011712 | i3 >>> 9 & 31744 | i3 >>> 3 & 31) - i11 | 0, i4) | 0) >>> 5) + i11 & 65043487;
     HEAP16[i1 >> 1] = i4 >>> 16 | i4;
    }
   }
   i1 = i1 + 2 | 0;
   i5 = i5 + 4 | 0;
   i4 = 8;
   continue;
  } else if ((i4 | 0) == 8) {
   i3 = HEAP32[i5 >> 2] | 0;
   i4 = i3 >>> 27;
   switch (i4 | 0) {
   case 0:
    break;
   case 31:
    {
     HEAP16[i1 >> 1] = i3 >>> 9 & 31744 | i3 >>> 6 & 992 | i3 >>> 3 & 31;
     break;
    }
   default:
    {
     i11 = HEAPU16[i1 >> 1] | 0;
     i11 = (i11 << 16 | i11) & 65043487;
     i11 = ((Math_imul((i3 << 10 & 65011712 | i3 >>> 9 & 31744 | i3 >>> 3 & 31) - i11 | 0, i4) | 0) >>> 5) + i11 & 65043487;
     HEAP16[i1 >> 1] = i11 >>> 16 | i11;
    }
   }
   i1 = i1 + 2 | 0;
   i5 = i5 + 4 | 0;
   i4 = 12;
   continue;
  } else if ((i4 | 0) == 12) {
   i3 = HEAP32[i5 >> 2] | 0;
   i4 = i3 >>> 27;
   switch (i4 | 0) {
   case 0:
    break;
   case 31:
    {
     HEAP16[i1 >> 1] = i3 >>> 9 & 31744 | i3 >>> 6 & 992 | i3 >>> 3 & 31;
     break;
    }
   default:
    {
     i11 = HEAPU16[i1 >> 1] | 0;
     i11 = (i11 << 16 | i11) & 65043487;
     i11 = ((Math_imul((i3 << 10 & 65011712 | i3 >>> 9 & 31744 | i3 >>> 3 & 31) - i11 | 0, i4) | 0) >>> 5) + i11 & 65043487;
     HEAP16[i1 >> 1] = i11 >>> 16 | i11;
    }
   }
   i1 = i1 + 2 | 0;
   i5 = i5 + 4 | 0;
   i4 = 16;
   continue;
  } else if ((i4 | 0) == 16) {
   i3 = HEAP32[i5 >> 2] | 0;
   i4 = i3 >>> 27;
   switch (i4 | 0) {
   case 0:
    break;
   case 31:
    {
     HEAP16[i1 >> 1] = i3 >>> 9 & 31744 | i3 >>> 6 & 992 | i3 >>> 3 & 31;
     break;
    }
   default:
    {
     i11 = HEAPU16[i1 >> 1] | 0;
     i11 = (i11 << 16 | i11) & 65043487;
     i11 = ((Math_imul((i3 << 10 & 65011712 | i3 >>> 9 & 31744 | i3 >>> 3 & 31) - i11 | 0, i4) | 0) >>> 5) + i11 & 65043487;
     HEAP16[i1 >> 1] = i11 >>> 16 | i11;
    }
   }
   i3 = i5 + 4 | 0;
   i1 = i1 + 2 | 0;
   if ((i6 | 0) > 1) {
    i6 = i6 + -1 | 0;
    i5 = i3;
    i4 = 4;
    continue;
   } else {
    i4 = 20;
    continue;
   }
  } else if ((i4 | 0) == 20) if (!i2) break L4; else {
   i1 = i1 + (i10 << 1) | 0;
   i3 = i3 + (i9 << 2) | 0;
   continue L4;
  }
 }
 return;
}

function _SDL_CalculateBlit(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i11 = i13 + 8 | 0;
 i8 = i13;
 i12 = HEAP32[i4 + 52 >> 2] | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 if (HEAP32[i4 >> 2] & 2) _SDL_UnRLESurface(i4, 1);
 HEAP32[i12 + 8 >> 2] = 13;
 i10 = i4 + 4 | 0;
 HEAP32[i12 + 56 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i12 + 28 >> 2] = HEAP32[i4 + 16 >> 2];
 i9 = i1 + 4 | 0;
 HEAP32[i12 + 60 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i12 + 48 >> 2] = HEAP32[i1 + 16 >> 2];
 i5 = i12 + 68 | 0;
 if ((HEAP32[i5 >> 2] & 4096 | 0) != 0 ? (_SDL_RLESurface(i4) | 0) == 0 : 0) {
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 if ((HEAP32[i12 + 4 >> 2] | 0) != 0 ? (HEAP32[i5 >> 2] & -4097 | 0) == 0 : 0) i1 = 273; else i6 = 7;
 L10 : do if ((i6 | 0) == 7) {
  i1 = HEAP32[i10 >> 2] | 0;
  if (((HEAPU8[i1 + 8 >> 0] | 0) < 8 ? (i2 = HEAP32[i1 >> 2] | 0, (i2 | 0) == 0 | (i2 & -268435456 | 0) == 268435456) : 0) ? ((i2 >>> 24 & 15) + -1 | 0) >>> 0 < 3 : 0) i1 = _SDL_CalculateBlit0(i4) | 0; else i6 = 11;
  do if ((i6 | 0) == 11) {
   if (((HEAP8[i1 + 9 >> 0] | 0) == 1 ? (i3 = HEAP32[i1 >> 2] | 0, (i3 | 0) == 0 | (i3 & -268435456 | 0) == 268435456) : 0) ? ((i3 >>> 24 & 15) + -1 | 0) >>> 0 < 3 : 0) {
    i1 = _SDL_CalculateBlit1(i4) | 0;
    break;
   }
   if (!(HEAP32[i5 >> 2] & 16)) {
    i1 = _SDL_CalculateBlitN(i4) | 0;
    break;
   } else {
    i1 = _SDL_CalculateBlitA(i4) | 0;
    break;
   }
  } while (0);
  if (!i1) {
   i6 = HEAP32[HEAP32[i10 >> 2] >> 2] | 0;
   i7 = HEAP32[HEAP32[i9 >> 2] >> 2] | 0;
   i2 = HEAP32[i5 >> 2] | 0;
   do if ((HEAP32[3220] | 0) == -1) {
    i1 = _SDL_getenv(38893) | 0;
    HEAP32[3220] = 0;
    if (i1) {
     HEAP32[i8 >> 2] = 12880;
     _SDL_sscanf(i1, 38915, i8) | 0;
     break;
    }
    if (_SDL_HasMMX() | 0) HEAP32[3220] = HEAP32[3220] | 1;
    if (_SDL_Has3DNow() | 0) HEAP32[3220] = HEAP32[3220] | 2;
    if (_SDL_HasSSE() | 0) HEAP32[3220] = HEAP32[3220] | 4;
    if (_SDL_HasSSE2() | 0) HEAP32[3220] = HEAP32[3220] | 8;
    if (_SDL_HasAltiVec() | 0) HEAP32[3220] = HEAP32[3220] | 16;
   } while (0);
   i1 = HEAP32[867] | 0;
   if (i1) {
    i4 = HEAP32[3220] | 0;
    i3 = i2 & 883;
    i2 = 0;
    do {
     if ((((HEAP32[3452 + (i2 * 20 | 0) >> 2] | 0) == (i6 | 0) ? (HEAP32[3452 + (i2 * 20 | 0) + 4 >> 2] | 0) == (i7 | 0) : 0) ? (HEAP32[3452 + (i2 * 20 | 0) + 8 >> 2] & i3 | 0) == (i3 | 0) : 0) ? (i8 = HEAP32[3452 + (i2 * 20 | 0) + 12 >> 2] | 0, (i8 & i4 | 0) == (i8 | 0)) : 0) break L10;
     i2 = i2 + 1 | 0;
     i1 = HEAP32[3452 + (i2 * 20 | 0) + 16 >> 2] | 0;
    } while ((i1 | 0) != 0);
   }
   i8 = HEAP32[HEAP32[i10 >> 2] >> 2] | 0;
   i10 = HEAP32[HEAP32[i9 >> 2] >> 2] | 0;
   if ((((i8 | 0) == 0 | (i8 & -268435456 | 0) == 268435456 ? ((i8 >>> 24 & 15) + -1 | 0) >>> 0 >= 3 : 0) ? (i10 | 0) == 0 | (i10 & -268435456 | 0) == 268435456 : 0) ? ((i10 >>> 24 & 15) + -1 | 0) >>> 0 >= 3 : 0) {
    i1 = 274;
    break;
   }
   HEAP32[i12 + 12 >> 2] = 0;
   _SDL_InvalidateMap(i12);
   i12 = _SDL_SetError(38918, i11) | 0;
   STACKTOP = i13;
   return i12 | 0;
  }
 } while (0);
 HEAP32[i12 + 12 >> 2] = i1;
 i12 = 0;
 STACKTOP = i13;
 return i12 | 0;
}

function _SDL_TimerThread(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i12 = i1 + 160 | 0;
 i13 = i1 + 144 | 0;
 i14 = i1 + 152 | 0;
 i15 = i1 + 164 | 0;
 i16 = i1 + 148 | 0;
 i11 = i1 + 156 | 0;
 i3 = 0;
 i2 = 0;
 while (1) {
  _SDL_AtomicLock(i13);
  i1 = HEAP32[i14 >> 2] | 0;
  HEAP32[i14 >> 2] = 0;
  if (i3) {
   HEAP32[i2 + 24 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i11 >> 2] = i3;
  }
  _SDL_AtomicUnlock(i13);
  if (i1) do {
   i7 = i1 + 24 | 0;
   i6 = i1;
   i1 = HEAP32[i7 >> 2] | 0;
   i2 = HEAP32[i15 >> 2] | 0;
   do if (!i2) {
    i2 = 0;
    i17 = 11;
   } else {
    i5 = HEAP32[i6 + 16 >> 2] | 0;
    i3 = i2;
    i4 = 0;
    while (1) {
     if ((i5 - (HEAP32[i3 + 16 >> 2] | 0) | 0) < 0) {
      i2 = i3;
      i3 = i4;
      i17 = 9;
      break;
     }
     i2 = HEAP32[i3 + 24 >> 2] | 0;
     if (!i2) {
      i2 = 0;
      break;
     } else {
      i4 = i3;
      i3 = i2;
     }
    }
    if ((i17 | 0) == 9) {
     i17 = 0;
     if (!i3) {
      i17 = 11;
      break;
     }
    }
    HEAP32[i3 + 24 >> 2] = i6;
   } while (0);
   if ((i17 | 0) == 11) {
    i17 = 0;
    HEAP32[i15 >> 2] = i6;
   }
   HEAP32[i7 >> 2] = i2;
  } while ((i1 | 0) != 0);
  if (!(HEAP32[i12 >> 2] | 0)) break;
  i10 = _SDL_GetTicks() | 0;
  i1 = HEAP32[i15 >> 2] | 0;
  L22 : do if (!i1) {
   i1 = -1;
   i3 = 0;
   i2 = 0;
  } else {
   i3 = 0;
   i9 = 0;
   L23 : while (1) {
    while (1) {
     i5 = i1 + 16 | 0;
     i2 = HEAP32[i5 >> 2] | 0;
     if ((i10 - i2 | 0) < 0) {
      i1 = i2;
      i2 = i9;
      break L23;
     }
     i8 = i1 + 24 | 0;
     HEAP32[i15 >> 2] = HEAP32[i8 >> 2];
     i4 = i1 + 20 | 0;
     if (HEAP32[i4 >> 2] | 0) {
      i2 = i1;
      break;
     }
     i2 = FUNCTION_TABLE_iii[HEAP32[i1 + 4 >> 2] & 63](HEAP32[i1 + 12 >> 2] | 0, HEAP32[i1 + 8 >> 2] | 0) | 0;
     if (!i2) {
      i2 = i1;
      break;
     }
     i6 = i2 + i10 | 0;
     HEAP32[i5 >> 2] = i6;
     i7 = HEAP32[i15 >> 2] | 0;
     do if (!i7) {
      i2 = 0;
      i17 = 25;
     } else {
      i4 = i7;
      i5 = 0;
      while (1) {
       if ((i6 - (HEAP32[i4 + 16 >> 2] | 0) | 0) < 0) {
        i2 = i4;
        i4 = i5;
        i17 = 23;
        break;
       }
       i2 = HEAP32[i4 + 24 >> 2] | 0;
       if (!i2) {
        i2 = 0;
        break;
       } else {
        i5 = i4;
        i4 = i2;
       }
      }
      if ((i17 | 0) == 23) {
       i17 = 0;
       if (!i4) {
        i17 = 25;
        break;
       }
      }
      HEAP32[i4 + 24 >> 2] = i1;
      i1 = i7;
     } while (0);
     if ((i17 | 0) == 25) {
      i17 = 0;
      HEAP32[i15 >> 2] = i1;
     }
     HEAP32[i8 >> 2] = i2;
     if (!i1) {
      i1 = -1;
      i2 = i9;
      break L22;
     }
    }
    i3 = (i3 | 0) == 0 ? i2 : i3;
    if (i9) HEAP32[i9 + 24 >> 2] = i2;
    HEAP32[i4 >> 2] = 1;
    i1 = HEAP32[i15 >> 2] | 0;
    if (!i1) {
     i1 = -1;
     break L22;
    } else i9 = i2;
   }
   i1 = i1 - i10 | 0;
  } while (0);
  i10 = (_SDL_GetTicks() | 0) - i10 | 0;
  _SDL_SemWaitTimeout(HEAP32[i16 >> 2] | 0, i1 >>> 0 < i10 >>> 0 ? 0 : i1 - i10 | 0) | 0;
 }
 return 0;
}

function _SDL_UnRLESurface(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i15;
 i1 = HEAP32[i4 >> 2] | 0;
 if (!(i1 & 2)) {
  STACKTOP = i15;
  return;
 }
 HEAP32[i4 >> 2] = i1 & -3;
 i14 = i4 + 52 | 0;
 L4 : do if ((i2 | 0) != 0 & (i1 & 1 | 0) == 0) {
  i1 = HEAP32[i14 >> 2] | 0;
  if (HEAP32[i1 + 68 >> 2] & 8192) {
   i1 = i4 + 12 | 0;
   i13 = _SDL_malloc(Math_imul(HEAP32[i4 + 16 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0) | 0;
   HEAP32[i4 + 20 >> 2] = i13;
   if (i13) {
    _SDL_FillRect(i4, 0, HEAP32[(HEAP32[i14 >> 2] | 0) + 72 >> 2] | 0) | 0;
    HEAP32[i3 + 4 >> 2] = 0;
    HEAP32[i3 >> 2] = 0;
    HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
    HEAP32[i3 + 12 >> 2] = HEAP32[i1 >> 2];
    _SDL_RLEBlit(i4, i3, i4, i3) | 0;
    break;
   }
   HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 2;
   STACKTOP = i15;
   return;
  }
  i13 = HEAP32[i4 + 4 >> 2] | 0;
  i7 = HEAP32[i1 + 12 >> 2] | 0;
  i8 = HEAP32[i4 + 8 >> 2] | 0;
  i9 = (HEAP8[i7 >> 0] | 0) == 2;
  i11 = i9 ? 28 : 29;
  i12 = i9 ? 30 : 29;
  i1 = i4 + 12 | 0;
  i10 = i4 + 16 | 0;
  i2 = _SDL_malloc(Math_imul(HEAP32[i10 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0) | 0;
  i3 = i4 + 20 | 0;
  HEAP32[i3 >> 2] = i2;
  if (!i2) {
   HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 2;
   STACKTOP = i15;
   return;
  }
  _SDL_memset(i2, 0, Math_imul(HEAP32[i10 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0) | 0;
  i6 = HEAP32[i3 >> 2] | 0;
  i1 = i7 + 28 | 0;
  while (1) {
   if (i9) {
    i2 = 0;
    i5 = i1;
    while (1) {
     i4 = HEAP8[i5 + 1 >> 0] | 0;
     i3 = i4 & 255;
     i1 = i5 + 2 | 0;
     i2 = (HEAPU8[i5 >> 0] | 0) + i2 | 0;
     if (!(i4 << 24 >> 24)) if (!i2) break L4; else i4 = i2; else {
      i4 = i2 + i3 | 0;
      i1 = i5 + ((FUNCTION_TABLE_iiiiii[i11 & 63](i6 + (i2 << 2) | 0, i1, i3, i7, i13) | 0) + 2) | 0;
     }
     if ((i4 | 0) < (i8 | 0)) {
      i2 = i4;
      i5 = i1;
     } else break;
    }
   } else {
    i2 = 0;
    while (1) {
     i5 = HEAP16[i1 + 2 >> 1] | 0;
     i3 = i5 & 65535;
     i4 = i1 + 4 | 0;
     i2 = (HEAPU16[i1 >> 1] | 0) + i2 | 0;
     if (!(i5 << 16 >> 16)) if (!i2) break L4; else {
      i5 = i2;
      i1 = i4;
     } else {
      i5 = i2 + i3 | 0;
      i1 = i1 + ((FUNCTION_TABLE_iiiiii[i11 & 63](i6 + (i2 << 2) | 0, i4, i3, i7, i13) | 0) + 4) | 0;
     }
     if ((i5 | 0) < (i8 | 0)) i2 = i5; else break;
    }
   }
   i2 = 0;
   i5 = i9 ? i1 + (i1 & 2) | 0 : i1;
   while (1) {
    i3 = (HEAPU16[i5 >> 1] | 0) + i2 | 0;
    i2 = HEAP16[i5 + 2 >> 1] | 0;
    i4 = i2 & 65535;
    i1 = i5 + 4 | 0;
    if (!(i2 << 16 >> 16)) i2 = i3; else {
     i2 = i3 + i4 | 0;
     i1 = i5 + ((FUNCTION_TABLE_iiiiii[i12 & 63](i6 + (i3 << 2) | 0, i1, i4, i7, i13) | 0) + 4) | 0;
    }
    if ((i2 | 0) < (i8 | 0)) i5 = i1; else break;
   }
   i6 = i6 + (HEAP32[i10 >> 2] >> 2 << 2) | 0;
  }
 } while (0);
 i13 = HEAP32[i14 >> 2] | 0;
 i12 = i13 + 68 | 0;
 HEAP32[i12 >> 2] = HEAP32[i12 >> 2] & -24577;
 _SDL_free(HEAP32[i13 + 12 >> 2] | 0);
 HEAP32[(HEAP32[i14 >> 2] | 0) + 12 >> 2] = 0;
 STACKTOP = i15;
 return;
}

function _Blit_RGB565_32(i3, i11) {
 i3 = i3 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = HEAP32[i3 + 24 >> 2] | 0;
 i2 = HEAP32[i3 + 28 >> 2] | 0;
 i9 = HEAP32[i3 + 16 >> 2] | 0;
 i10 = (HEAP32[i3 + 36 >> 2] | 0) / 4 | 0;
 if (!i2) return;
 i8 = (i1 + 7 | 0) / 8 | 0;
 i7 = i1 & 7;
 i1 = HEAP32[i3 + 20 >> 2] | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 L4 : while (1) {
  i2 = i2 + -1 | 0;
  switch (i7 | 0) {
  case 0:
   {
    i4 = i8;
    i6 = 4;
    break;
   }
  case 7:
   {
    i4 = i8;
    i6 = 5;
    break;
   }
  case 6:
   {
    i4 = i8;
    i6 = 6;
    break;
   }
  case 5:
   {
    i4 = i8;
    i6 = 7;
    break;
   }
  case 4:
   {
    i4 = i8;
    i6 = 8;
    break;
   }
  case 3:
   {
    i4 = i8;
    i6 = 9;
    break;
   }
  case 2:
   {
    i4 = i8;
    i6 = 10;
    break;
   }
  case 1:
   {
    i5 = i1;
    i4 = i8;
    i6 = 11;
    break;
   }
  default:
   i6 = 12;
  }
  while (1) if ((i6 | 0) == 4) {
   HEAP32[i1 >> 2] = (HEAP32[i11 + (((HEAPU8[i3 + 1 >> 0] | 0) << 1 | 1) << 2) >> 2] | 0) + (HEAP32[i11 + ((HEAPU8[i3 >> 0] | 0) << 1 << 2) >> 2] | 0);
   i1 = i1 + 4 | 0;
   i3 = i3 + 2 | 0;
   i6 = 5;
   continue;
  } else if ((i6 | 0) == 5) {
   HEAP32[i1 >> 2] = (HEAP32[i11 + (((HEAPU8[i3 + 1 >> 0] | 0) << 1 | 1) << 2) >> 2] | 0) + (HEAP32[i11 + ((HEAPU8[i3 >> 0] | 0) << 1 << 2) >> 2] | 0);
   i1 = i1 + 4 | 0;
   i3 = i3 + 2 | 0;
   i6 = 6;
   continue;
  } else if ((i6 | 0) == 6) {
   HEAP32[i1 >> 2] = (HEAP32[i11 + (((HEAPU8[i3 + 1 >> 0] | 0) << 1 | 1) << 2) >> 2] | 0) + (HEAP32[i11 + ((HEAPU8[i3 >> 0] | 0) << 1 << 2) >> 2] | 0);
   i1 = i1 + 4 | 0;
   i3 = i3 + 2 | 0;
   i6 = 7;
   continue;
  } else if ((i6 | 0) == 7) {
   HEAP32[i1 >> 2] = (HEAP32[i11 + (((HEAPU8[i3 + 1 >> 0] | 0) << 1 | 1) << 2) >> 2] | 0) + (HEAP32[i11 + ((HEAPU8[i3 >> 0] | 0) << 1 << 2) >> 2] | 0);
   i1 = i1 + 4 | 0;
   i3 = i3 + 2 | 0;
   i6 = 8;
   continue;
  } else if ((i6 | 0) == 8) {
   HEAP32[i1 >> 2] = (HEAP32[i11 + (((HEAPU8[i3 + 1 >> 0] | 0) << 1 | 1) << 2) >> 2] | 0) + (HEAP32[i11 + ((HEAPU8[i3 >> 0] | 0) << 1 << 2) >> 2] | 0);
   i1 = i1 + 4 | 0;
   i3 = i3 + 2 | 0;
   i6 = 9;
   continue;
  } else if ((i6 | 0) == 9) {
   HEAP32[i1 >> 2] = (HEAP32[i11 + (((HEAPU8[i3 + 1 >> 0] | 0) << 1 | 1) << 2) >> 2] | 0) + (HEAP32[i11 + ((HEAPU8[i3 >> 0] | 0) << 1 << 2) >> 2] | 0);
   i1 = i1 + 4 | 0;
   i3 = i3 + 2 | 0;
   i6 = 10;
   continue;
  } else if ((i6 | 0) == 10) {
   HEAP32[i1 >> 2] = (HEAP32[i11 + (((HEAPU8[i3 + 1 >> 0] | 0) << 1 | 1) << 2) >> 2] | 0) + (HEAP32[i11 + ((HEAPU8[i3 >> 0] | 0) << 1 << 2) >> 2] | 0);
   i5 = i1 + 4 | 0;
   i3 = i3 + 2 | 0;
   i6 = 11;
   continue;
  } else if ((i6 | 0) == 11) {
   i1 = i5 + 4 | 0;
   HEAP32[i5 >> 2] = (HEAP32[i11 + (((HEAPU8[i3 + 1 >> 0] | 0) << 1 | 1) << 2) >> 2] | 0) + (HEAP32[i11 + ((HEAPU8[i3 >> 0] | 0) << 1 << 2) >> 2] | 0);
   i3 = i3 + 2 | 0;
   if ((i4 | 0) > 1) {
    i4 = i4 + -1 | 0;
    i6 = 4;
    continue;
   } else {
    i6 = 12;
    continue;
   }
  } else if ((i6 | 0) == 12) if (!i2) break L4; else {
   i1 = i1 + (i10 << 2) | 0;
   i3 = i3 + i9 | 0;
   continue L4;
  }
 }
 return;
}

function _GLES2_CacheShader(i1, i12, i2) {
 i1 = i1 | 0;
 i12 = i12 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i17 = i18 + 24 | 0;
 i16 = i18 + 16 | 0;
 i11 = i18 + 8 | 0;
 i13 = i18 + 32 | 0;
 i15 = i18 + 28 | 0;
 i14 = HEAP32[i1 + 316 >> 2] | 0;
 HEAP32[i13 >> 2] = 0;
 i6 = _GLES2_GetShader(i12, i2) | 0;
 if (!i6) {
  _SDL_SetError(46981, i18) | 0;
  i17 = 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 i7 = HEAP32[i6 >> 2] | 0;
 if ((i7 | 0) > 0 ? (i9 = HEAP32[i14 + 240 >> 2] | 0, i10 = i14 + 244 | 0, (i9 | 0) > 0) : 0) {
  i8 = 0;
  do {
   i4 = HEAP32[i6 + 4 + (i8 << 2) >> 2] | 0;
   if (!i4) i5 = 0; else {
    i3 = HEAP32[i4 + 4 >> 2] | 0;
    i2 = HEAP32[i10 >> 2] | 0;
    i5 = 0;
    do {
     i1 = (i3 | 0) == (HEAP32[i2 + (i5 << 2) >> 2] | 0) ? i4 : 0;
     i5 = i5 + 1 | 0;
    } while ((i1 | 0) == 0 & (i5 | 0) < (i9 | 0));
    i5 = i1;
   }
   i8 = i8 + 1 | 0;
   i1 = (i5 | 0) == 0;
  } while (i1 & (i8 | 0) < (i7 | 0));
  if (!i1) {
   i4 = i14 + 252 | 0;
   i1 = HEAP32[i4 >> 2] | 0;
   L16 : do if (i1) {
    while (1) {
     if ((HEAP32[i1 + 8 >> 2] | 0) == (i5 | 0)) break;
     i1 = HEAP32[i1 + 24 >> 2] | 0;
     if (!i1) break L16;
    }
    STACKTOP = i18;
    return i1 | 0;
   } while (0);
   i3 = _SDL_calloc(1, 28) | 0;
   if (!i3) {
    _SDL_Error(0) | 0;
    i17 = 0;
    STACKTOP = i18;
    return i17 | 0;
   }
   HEAP32[i3 + 4 >> 2] = i12;
   HEAP32[i3 + 8 >> 2] = i5;
   i1 = FUNCTION_TABLE_ii[HEAP32[i14 + 52 >> 2] & 127](HEAP32[i5 >> 2] | 0) | 0;
   HEAP32[i3 >> 2] = i1;
   i2 = HEAP32[i5 + 4 >> 2] | 0;
   if ((i2 | 0) == -1) {
    FUNCTION_TABLE_viiii[HEAP32[i14 + 152 >> 2] & 63](i1, 1, i5 + 12 | 0, 0);
    FUNCTION_TABLE_vi[HEAP32[i14 + 44 >> 2] & 511](HEAP32[i3 >> 2] | 0);
    i1 = i14 + 124 | 0;
    FUNCTION_TABLE_viii[HEAP32[i1 >> 2] & 31](HEAP32[i3 >> 2] | 0, 35713, i13);
    if (!(HEAP32[i13 >> 2] | 0)) {
     HEAP32[i15 >> 2] = 0;
     FUNCTION_TABLE_viii[HEAP32[i1 >> 2] & 31](HEAP32[i3 >> 2] | 0, 35716, i15);
     i1 = HEAP32[i15 >> 2] | 0;
     if ((i1 | 0) > 0) {
      i17 = STACKTOP;
      STACKTOP = STACKTOP + ((1 * i1 | 0) + 15 & -16) | 0;
      FUNCTION_TABLE_viiii[HEAP32[i14 + 120 >> 2] & 63](HEAP32[i3 >> 2] | 0, i1, i15, i17);
      HEAP32[i16 >> 2] = i17;
      _SDL_SetError(47102, i16) | 0;
     } else _SDL_SetError(47132, i17) | 0;
     FUNCTION_TABLE_vi[HEAP32[i14 + 60 >> 2] & 511](HEAP32[i3 >> 2] | 0);
     _SDL_free(i3);
     i17 = 0;
     STACKTOP = i18;
     return i17 | 0;
    }
   } else {
    FUNCTION_TABLE_viiiii[HEAP32[i14 + 148 >> 2] & 7](1, i3, i2, HEAP32[i5 + 12 >> 2] | 0, HEAP32[i5 + 8 >> 2] | 0);
    HEAP32[i13 >> 2] = 1;
   }
   i1 = HEAP32[i4 >> 2] | 0;
   if (i1) {
    HEAP32[i3 + 24 >> 2] = i1;
    HEAP32[i1 + 20 >> 2] = i3;
   }
   HEAP32[i4 >> 2] = i3;
   i17 = i14 + 248 | 0;
   HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
   i17 = i3;
   STACKTOP = i18;
   return i17 | 0;
  }
 }
 _SDL_SetError(47040, i11) | 0;
 i17 = 0;
 STACKTOP = i18;
 return i17 | 0;
}

function _SDL_GetError() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i15 = i17 + 24 | 0;
 i14 = i17 + 16 | 0;
 i13 = i17 + 8 | 0;
 i12 = i17;
 i11 = i17 + 32 | 0;
 HEAP8[35347] = 0;
 if (!(HEAP32[32] | 0)) {
  STACKTOP = i17;
  return 35347;
 }
 i8 = i11 + 1 | 0;
 i9 = i11 + 30 | 0;
 i2 = 1023;
 i10 = 0;
 i3 = 132;
 i1 = 35347;
 L4 : while (1) {
  i7 = i2;
  L6 : while (1) {
   L8 : while (1) {
    i2 = HEAP8[i3 >> 0] | 0;
    switch (i2 << 24 >> 24) {
    case 0:
     break L4;
    case 37:
     break;
    default:
     {
      i16 = 20;
      break L8;
     }
    }
    HEAP8[i11 >> 0] = 37;
    i2 = i3;
    i5 = i3 + 1 | 0;
    i4 = i8;
    while (1) {
     i6 = HEAP8[i5 >> 0] | 0;
     if (i6 << 24 >> 24 != 46) {
      if (i6 << 24 >> 24 <= 47) {
       i3 = i2;
       i2 = i6;
       i16 = 9;
       break;
      }
      if (i6 << 24 >> 24 >= 58) {
       i3 = i2;
       i2 = i6;
       i16 = 11;
       break;
      }
     }
     i3 = i5 + 1 | 0;
     i2 = i4 + 1 | 0;
     HEAP8[i4 >> 0] = i6;
     if (i4 >>> 0 < i9 >>> 0) {
      i6 = i5;
      i5 = i3;
      i4 = i2;
      i2 = i6;
     } else {
      i5 = i4;
      break;
     }
    }
    if ((i16 | 0) == 9) {
     i16 = 0;
     HEAP8[i4 >> 0] = i2;
     i3 = i3 + 2 | 0;
     i5 = i4;
     i2 = i4 + 1 | 0;
    } else if ((i16 | 0) == 11) {
     i16 = 0;
     HEAP8[i4 >> 0] = i2;
     i3 = i3 + 2 | 0;
     i5 = i4;
     i2 = i4 + 1 | 0;
    }
    HEAP8[i2 >> 0] = 0;
    switch (HEAP8[i5 >> 0] | 0) {
    case 88:
    case 120:
    case 111:
    case 117:
    case 100:
    case 105:
    case 99:
     {
      i2 = i7;
      i16 = 15;
      break L6;
     }
    case 102:
     {
      i2 = i7;
      i16 = 17;
      break L6;
     }
    case 112:
     {
      i2 = i7;
      i16 = 18;
      break L6;
     }
    case 115:
     {
      i2 = i7;
      i16 = 19;
      break L6;
     }
    case 37:
     {
      i2 = 37;
      break L8;
     }
    default:
     {}
    }
   }
   if ((i16 | 0) == 20) {
    i16 = 0;
    i3 = i3 + 1 | 0;
   }
   HEAP8[i1 >> 0] = i2;
   i1 = i1 + 1 | 0;
   i7 = i7 + -1 | 0;
   if (!i7) break L4;
  }
  if ((i16 | 0) == 15) {
   i16 = 0;
   HEAP32[i12 >> 2] = HEAP32[264 + (i10 << 7) >> 2];
   i7 = _SDL_snprintf(i1, i2, i11, i12) | 0;
   i4 = i7;
   i1 = i1 + i7 | 0;
  } else if ((i16 | 0) == 17) {
   i16 = 0;
   HEAPF64[i13 >> 3] = +HEAPF64[264 + (i10 << 7) >> 3];
   i7 = _SDL_snprintf(i1, i2, i11, i13) | 0;
   i4 = i7;
   i1 = i1 + i7 | 0;
  } else if ((i16 | 0) == 18) {
   i16 = 0;
   HEAP32[i14 >> 2] = HEAP32[264 + (i10 << 7) >> 2];
   i7 = _SDL_snprintf(i1, i2, i11, i14) | 0;
   i4 = i7;
   i1 = i1 + i7 | 0;
  } else if ((i16 | 0) == 19) {
   i16 = 0;
   HEAP32[i15 >> 2] = 264 + (i10 << 7);
   i7 = _SDL_snprintf(i1, i2, i11, i15) | 0;
   i4 = i7;
   i1 = i1 + i7 | 0;
  }
  if ((i2 | 0) == (i4 | 0)) break; else {
   i2 = i2 - i4 | 0;
   i10 = i10 + 1 | 0;
  }
 }
 HEAP8[i1 >> 0] = 0;
 STACKTOP = i17;
 return 35347;
}

function _SDL_DrawLine1(i19, i18, i16, i6, i7, i17, i8) {
 i19 = i19 | 0;
 i18 = i18 | 0;
 i16 = i16 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i17 = i17 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 if ((i7 | 0) == (i16 | 0)) {
  i1 = Math_imul((HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i7) | 0;
  if ((i18 | 0) > (i6 | 0)) {
   i16 = (i8 | 0) != 0 & 1;
   i2 = (i16 ^ 1) + i6 + i1 | 0;
   i1 = i18 - i6 + i16 | 0;
  } else {
   i2 = i1 + i18 | 0;
   i1 = i6 - i18 + ((i8 | 0) != 0 & 1) | 0;
  }
  _SDL_memset((HEAP32[i19 + 20 >> 2] | 0) + i2 | 0, i17, i1) | 0;
  return;
 }
 if ((i18 | 0) == (i6 | 0)) {
  i5 = (HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
  if ((i7 | 0) < (i16 | 0)) {
   i4 = (Math_imul(i5, i7) | 0) + i18 | 0;
   i1 = (i8 | 0) != 0;
   i4 = i4 + (i1 ? 0 : i5) | 0;
   i1 = i16 - i7 + (i1 & 1) | 0;
  } else {
   i4 = (Math_imul(i5, i16) | 0) + i18 | 0;
   i1 = i7 - i16 + ((i8 | 0) != 0 & 1) | 0;
  }
  if (!i1) return;
  i3 = i17 & 255;
  i2 = i1;
  i1 = (HEAP32[i19 + 20 >> 2] | 0) + i4 | 0;
  while (1) {
   i2 = i2 + -1 | 0;
   HEAP8[i1 >> 0] = i3;
   if (!i2) break; else i1 = i1 + i5 | 0;
  }
  return;
 }
 i15 = i18 - i6 | 0;
 i1 = i16 - i7 | 0;
 if ((((i15 | 0) < 0 ? 0 - i15 | 0 : i15) | 0) == (((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0)) {
  i2 = (HEAP32[i19 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i19 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
  if ((i7 | 0) < (i16 | 0)) {
   i5 = (Math_imul(i2, i7) | 0) + i6 | 0;
   i4 = i2 + ((i6 | 0) > (i18 | 0) ? -1 : 1) | 0;
   i5 = i5 + ((i8 | 0) == 0 ? i4 : 0) | 0;
  } else {
   i5 = (Math_imul(i2, i16) | 0) + i18 | 0;
   i1 = i7 - i16 | 0;
   i4 = i2 + ((i18 | 0) > (i6 | 0) ? -1 : 1) | 0;
  }
  i1 = i1 + ((i8 | 0) != 0 & 1) | 0;
  if (!i1) return;
  i3 = i17 & 255;
  i2 = i1;
  i1 = (HEAP32[i19 + 20 >> 2] | 0) + i5 | 0;
  while (1) {
   i2 = i2 + -1 | 0;
   HEAP8[i1 >> 0] = i3;
   if (!i2) break; else i1 = i1 + i4 | 0;
  }
  return;
 } else {
  i1 = i6 - i18 | 0;
  i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
  i2 = i7 - i16 | 0;
  i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
  if ((i1 | 0) < (i2 | 0)) {
   i15 = i1 << 1;
   i5 = i15 - i2 | 0;
   i3 = i1 - i2 | 0;
   i1 = i2;
   i2 = 0;
   i4 = 1;
  } else {
   i15 = i2 << 1;
   i5 = i15 - i1 | 0;
   i3 = i2 - i1 | 0;
   i2 = 1;
   i4 = 0;
  }
  i14 = i3 << 1;
  i12 = (i18 | 0) > (i6 | 0);
  i13 = i12 ? 0 - i2 | 0 : i2;
  i12 = i12 ? -1 : 1;
  i11 = (i7 | 0) < (i16 | 0);
  i10 = i11 ? 0 - i4 | 0 : i4;
  i11 = i11 ? -1 : 1;
  i9 = i1 + ((i8 | 0) != 0 & 1) | 0;
  if ((i9 | 0) <= 0) return;
  i7 = i17 & 255;
  i8 = i19 + 20 | 0;
  i6 = i19 + 16 | 0;
  i4 = i5;
  i5 = 0;
  i3 = i18;
  i2 = i16;
  while (1) {
   HEAP8[(HEAP32[i8 >> 2] | 0) + ((Math_imul(HEAP32[i6 >> 2] | 0, i2) | 0) + i3) >> 0] = i7;
   i1 = (i4 | 0) < 0;
   i5 = i5 + 1 | 0;
   if ((i5 | 0) == (i9 | 0)) break; else {
    i4 = (i1 ? i15 : i14) + i4 | 0;
    i3 = (i1 ? i13 : i12) + i3 | 0;
    i2 = i2 + (i1 ? i10 : i11) | 0;
   }
  }
  return;
 }
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_(i4, i8, i1, i13, i14, i2, i9, i12) {
 i4 = i4 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i12 = i12 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i11 = i16;
 L1 : do if ((i1 | 0) == (i13 | 0)) i3 = i13; else {
  i3 = i1;
  while (1) {
   if (!(HEAP8[i3 >> 0] | 0)) break L1;
   i3 = i3 + 1 | 0;
   if ((i3 | 0) == (i13 | 0)) {
    i3 = i13;
    break;
   }
  }
 } while (0);
 HEAP32[i12 >> 2] = i2;
 HEAP32[i14 >> 2] = i1;
 i7 = i9;
 i10 = i4 + 8 | 0;
 L6 : do if ((i2 | 0) == (i9 | 0) | (i1 | 0) == (i13 | 0)) i15 = 29; else {
  L7 : while (1) {
   i6 = i8;
   i5 = HEAP32[i6 + 4 >> 2] | 0;
   i4 = i11;
   HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i4 + 4 >> 2] = i5;
   i4 = i3;
   i5 = _uselocale(HEAP32[i10 >> 2] | 0) | 0;
   i6 = _mbsnrtowcs(i2, i14, i4 - i1 | 0, i7 - i2 >> 2, i8) | 0;
   if (i5) _uselocale(i5) | 0;
   switch (i6 | 0) {
   case 0:
    {
     i1 = 2;
     break L6;
    }
   case -1:
    break L7;
   default:
    {}
   }
   i2 = (HEAP32[i12 >> 2] | 0) + (i6 << 2) | 0;
   HEAP32[i12 >> 2] = i2;
   if ((i2 | 0) == (i9 | 0)) {
    i15 = 19;
    break;
   }
   i1 = HEAP32[i14 >> 2] | 0;
   if ((i3 | 0) == (i13 | 0)) i3 = i13; else {
    i3 = _uselocale(HEAP32[i10 >> 2] | 0) | 0;
    i1 = _mbrtowc(i2, i1, 1, i8) | 0;
    if (i3) _uselocale(i3) | 0;
    if (i1) {
     i1 = 2;
     break L6;
    }
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 4;
    i1 = (HEAP32[i14 >> 2] | 0) + 1 | 0;
    HEAP32[i14 >> 2] = i1;
    L20 : do if ((i1 | 0) == (i13 | 0)) i3 = i13; else {
     i3 = i1;
     while (1) {
      if (!(HEAP8[i3 >> 0] | 0)) break L20;
      i3 = i3 + 1 | 0;
      if ((i3 | 0) == (i13 | 0)) {
       i3 = i13;
       break;
      }
     }
    } while (0);
    i2 = HEAP32[i12 >> 2] | 0;
   }
   if ((i2 | 0) == (i9 | 0) | (i1 | 0) == (i13 | 0)) {
    i15 = 29;
    break L6;
   }
  }
  if ((i15 | 0) == 19) {
   i1 = HEAP32[i14 >> 2] | 0;
   i15 = 29;
   break;
  }
  HEAP32[i12 >> 2] = i2;
  L29 : do if ((i1 | 0) != (HEAP32[i14 >> 2] | 0)) {
   L30 : while (1) {
    i3 = _uselocale(HEAP32[i10 >> 2] | 0) | 0;
    i2 = _mbrtowc(i2, i1, i4 - i1 | 0, i11) | 0;
    if (i3) _uselocale(i3) | 0;
    switch (i2 | 0) {
    case -1:
     {
      i15 = 13;
      break L30;
     }
    case -2:
     {
      i15 = 14;
      break L30;
     }
    case 0:
     {
      i1 = i1 + 1 | 0;
      break;
     }
    default:
     i1 = i1 + i2 | 0;
    }
    i2 = (HEAP32[i12 >> 2] | 0) + 4 | 0;
    HEAP32[i12 >> 2] = i2;
    if ((i1 | 0) == (HEAP32[i14 >> 2] | 0)) break L29;
   }
   if ((i15 | 0) == 13) {
    HEAP32[i14 >> 2] = i1;
    i1 = 2;
    break L6;
   } else if ((i15 | 0) == 14) {
    HEAP32[i14 >> 2] = i1;
    i1 = 1;
    break L6;
   }
  } while (0);
  HEAP32[i14 >> 2] = i1;
  i1 = (i1 | 0) != (i13 | 0) & 1;
 } while (0);
 if ((i15 | 0) == 29) i1 = (i1 | 0) != (i13 | 0) & 1;
 STACKTOP = i16;
 return i1 | 0;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE(i1, i10, i11, i4, i2, i12, i6) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i12 = i12 | 0;
 i6 = i6 | 0;
 var i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 i19 = i16 + 424 | 0;
 i17 = i16 + 24 | 0;
 i15 = i16 + 16 | 0;
 i5 = i16 + 8 | 0;
 i18 = i16 + 4 | 0;
 i3 = i16 + 428 | 0;
 i7 = i16;
 HEAP32[i15 >> 2] = i17;
 i14 = i15 + 4 | 0;
 HEAP32[i14 >> 2] = 347;
 i9 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i18 >> 2] = i9;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i18, 30376) | 0;
 HEAP8[i3 >> 0] = 0;
 i8 = HEAP32[i11 >> 2] | 0;
 HEAP32[i7 >> 2] = i8;
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 HEAP32[i19 >> 2] = HEAP32[i7 >> 2];
 i7 = i8;
 if (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_(i10, i19, i4, i18, i2, i12, i3, i1, i15, i5, i17 + 400 | 0) | 0) {
  if (!(HEAP8[i6 >> 0] & 1)) HEAP8[i6 >> 0] = 0; else HEAP32[HEAP32[i6 + 8 >> 2] >> 2] = 0;
  HEAP32[i6 + 4 >> 2] = 0;
  if (HEAP8[i3 >> 0] | 0) __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i6, FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i1, 45) | 0);
  i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i1, 48) | 0;
  i1 = HEAP32[i15 >> 2] | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  i2 = i4 + -4 | 0;
  L10 : do if (i1 >>> 0 < i2 >>> 0) do {
   if ((HEAP32[i1 >> 2] | 0) != (i3 | 0)) break L10;
   i1 = i1 + 4 | 0;
  } while (i1 >>> 0 < i2 >>> 0); while (0);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_(i6, i1, i4) | 0;
 }
 i1 = HEAP32[i10 >> 2] | 0;
 do if (i1) {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i10 >> 2] = 0;
   i2 = 1;
   break;
  } else {
   i2 = (HEAP32[i10 >> 2] | 0) == 0;
   break;
  }
 } else i2 = 1; while (0);
 do if (i8) {
  i1 = HEAP32[i7 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i7 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 127](i7) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i13 = 26;
   break;
  } else {
   HEAP32[i11 >> 2] = 0;
   i13 = 24;
   break;
  }
 } else i13 = 24; while (0);
 if ((i13 | 0) == 24 ? i2 : 0) i13 = 26;
 if ((i13 | 0) == 26) HEAP32[i12 >> 2] = HEAP32[i12 >> 2] | 2;
 i2 = HEAP32[i10 >> 2] | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i9) | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 HEAP32[i15 >> 2] = 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[i14 >> 2] & 511](i1);
 STACKTOP = i16;
 return i2 | 0;
}

function _SDL_SendKeyboardKey(i6, i5) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i7 = i8;
 if (!i5) {
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 i2 = i6 & 255;
 L4 : do if (i6 << 24 >> 24 == 1) {
  i1 = HEAP16[3704] | 0;
  do switch (i5 | 0) {
  case 83:
   {
    HEAP16[3704] = i1 & 65535 ^ 4096;
    break L4;
   }
  case 57:
   {
    HEAP16[3704] = i1 & 65535 ^ 8192;
    break L4;
   }
  case 224:
   {
    HEAP16[3704] = i1 & 65535 | 64;
    break L4;
   }
  case 228:
   {
    HEAP16[3704] = i1 & 65535 | 128;
    break L4;
   }
  case 225:
   {
    HEAP16[3704] = i1 & 65535 | 1;
    break L4;
   }
  case 229:
   {
    HEAP16[3704] = i1 & 65535 | 2;
    break L4;
   }
  case 226:
   {
    HEAP16[3704] = i1 & 65535 | 256;
    break L4;
   }
  case 230:
   {
    HEAP16[3704] = i1 & 65535 | 512;
    break L4;
   }
  case 227:
   {
    HEAP16[3704] = i1 & 65535 | 1024;
    break L4;
   }
  case 231:
   {
    HEAP16[3704] = i1 & 65535 | 2048;
    break L4;
   }
  case 257:
   {
    HEAP16[3704] = i1 & 65535 | 16384;
    break L4;
   }
  default:
   break L4;
  } while (0);
 } else do switch (i5 | 0) {
 case 257:
  {
   i1 = (HEAPU16[3704] | 0) & 49151;
   HEAP16[3704] = i1;
   break L4;
  }
 case 231:
  {
   i1 = (HEAPU16[3704] | 0) & 63487;
   HEAP16[3704] = i1;
   break L4;
  }
 case 224:
  {
   i1 = (HEAPU16[3704] | 0) & 65471;
   HEAP16[3704] = i1;
   break L4;
  }
 case 228:
  {
   i1 = (HEAPU16[3704] | 0) & 65407;
   HEAP16[3704] = i1;
   break L4;
  }
 case 225:
  {
   i1 = (HEAPU16[3704] | 0) & 65534;
   HEAP16[3704] = i1;
   break L4;
  }
 case 229:
  {
   i1 = (HEAPU16[3704] | 0) & 65533;
   HEAP16[3704] = i1;
   break L4;
  }
 case 226:
  {
   i1 = (HEAPU16[3704] | 0) & 65279;
   HEAP16[3704] = i1;
   break L4;
  }
 case 230:
  {
   i1 = (HEAPU16[3704] | 0) & 65023;
   HEAP16[3704] = i1;
   break L4;
  }
 case 227:
  {
   i1 = (HEAPU16[3704] | 0) & 64511;
   HEAP16[3704] = i1;
   break L4;
  }
 default:
  {
   i1 = HEAP16[3704] | 0;
   break L4;
  }
 } while (0); while (0);
 switch (i2 | 0) {
 case 1:
  {
   i4 = 768;
   break;
  }
 case 0:
  {
   i4 = 769;
   break;
  }
 default:
  {
   i7 = 0;
   STACKTOP = i8;
   return i7 | 0;
  }
 }
 i2 = 7410 + i5 | 0;
 i9 = HEAP8[i2 >> 0] | 0;
 i3 = i6 << 24 >> 24 == 0 ? 0 : i9 << 24 >> 24 != 0 & 1;
 if (!(i3 << 24 >> 24 != 0 ? 1 : i9 << 24 >> 24 != i6 << 24 >> 24)) {
  i9 = 0;
  STACKTOP = i8;
  return i9 | 0;
 }
 HEAP8[i2 >> 0] = i6;
 if ((_SDL_EventState(i4, -1) | 0) << 24 >> 24 != 1) {
  i9 = 0;
  STACKTOP = i8;
  return i9 | 0;
 }
 HEAP32[i7 >> 2] = i4;
 HEAP8[i7 + 12 >> 0] = i6;
 HEAP8[i7 + 13 >> 0] = i3;
 i9 = i7 + 16 | 0;
 HEAP32[i9 >> 2] = i5;
 HEAP32[i9 + 4 >> 2] = HEAP32[7924 + (i5 << 2) >> 2];
 HEAP16[i9 + 8 >> 1] = i1;
 i1 = HEAP32[1851] | 0;
 if (!i1) i1 = 0; else i1 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[i7 + 8 >> 2] = i1;
 i9 = (_SDL_PushEvent(i7) | 0) > 0 & 1;
 STACKTOP = i8;
 return i9 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_(i4, i7, i1, i10, i14, i2, i9, i13) {
 i4 = i4 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i10 = i10 | 0;
 i14 = i14 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i13 = i13 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i8 = 0, i11 = 0, i12 = 0, i15 = 0, i16 = 0, i17 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i12 = i16;
 i8 = i16 + 8 | 0;
 L1 : do if ((i1 | 0) == (i10 | 0)) i3 = i10; else {
  i3 = i1;
  while (1) {
   if (!(HEAP32[i3 >> 2] | 0)) break L1;
   i3 = i3 + 4 | 0;
   if ((i3 | 0) == (i10 | 0)) {
    i3 = i10;
    break;
   }
  }
 } while (0);
 HEAP32[i13 >> 2] = i2;
 HEAP32[i14 >> 2] = i1;
 i6 = i9;
 i11 = i4 + 8 | 0;
 L6 : do if ((i2 | 0) == (i9 | 0) | (i1 | 0) == (i10 | 0)) i15 = 29; else {
  L7 : while (1) {
   i17 = i7;
   i5 = HEAP32[i17 + 4 >> 2] | 0;
   i4 = i12;
   HEAP32[i4 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i4 + 4 >> 2] = i5;
   i4 = _uselocale(HEAP32[i11 >> 2] | 0) | 0;
   i5 = _wcsnrtombs(i2, i14, i3 - i1 >> 2, i6 - i2 | 0, i7) | 0;
   if (i4) _uselocale(i4) | 0;
   switch (i5 | 0) {
   case 0:
    {
     i1 = 1;
     break L6;
    }
   case -1:
    break L7;
   default:
    {}
   }
   i2 = (HEAP32[i13 >> 2] | 0) + i5 | 0;
   HEAP32[i13 >> 2] = i2;
   if ((i2 | 0) == (i9 | 0)) {
    i15 = 15;
    break;
   }
   if ((i3 | 0) == (i10 | 0)) {
    i1 = HEAP32[i14 >> 2] | 0;
    i3 = i10;
   } else {
    i1 = _uselocale(HEAP32[i11 >> 2] | 0) | 0;
    i2 = _wcrtomb(i8, 0, i7) | 0;
    if (i1) _uselocale(i1) | 0;
    if ((i2 | 0) == -1) {
     i1 = 2;
     break L6;
    }
    if (i2 >>> 0 > (i6 - (HEAP32[i13 >> 2] | 0) | 0) >>> 0) {
     i1 = 1;
     break L6;
    }
    if (i2) {
     i1 = i8;
     while (1) {
      i5 = HEAP8[i1 >> 0] | 0;
      i17 = HEAP32[i13 >> 2] | 0;
      HEAP32[i13 >> 2] = i17 + 1;
      HEAP8[i17 >> 0] = i5;
      i2 = i2 + -1 | 0;
      if (!i2) break; else i1 = i1 + 1 | 0;
     }
    }
    i1 = (HEAP32[i14 >> 2] | 0) + 4 | 0;
    HEAP32[i14 >> 2] = i1;
    L26 : do if ((i1 | 0) == (i10 | 0)) i3 = i10; else {
     i3 = i1;
     while (1) {
      if (!(HEAP32[i3 >> 2] | 0)) break L26;
      i3 = i3 + 4 | 0;
      if ((i3 | 0) == (i10 | 0)) {
       i3 = i10;
       break;
      }
     }
    } while (0);
    i2 = HEAP32[i13 >> 2] | 0;
   }
   if ((i2 | 0) == (i9 | 0) | (i1 | 0) == (i10 | 0)) {
    i15 = 29;
    break L6;
   }
  }
  if ((i15 | 0) == 15) {
   i1 = HEAP32[i14 >> 2] | 0;
   i15 = 29;
   break;
  }
  HEAP32[i13 >> 2] = i2;
  L35 : do if ((i1 | 0) != (HEAP32[i14 >> 2] | 0)) do {
   i17 = HEAP32[i1 >> 2] | 0;
   i3 = _uselocale(HEAP32[i11 >> 2] | 0) | 0;
   i2 = _wcrtomb(i2, i17, i12) | 0;
   if (i3) _uselocale(i3) | 0;
   if ((i2 | 0) == -1) break L35;
   i2 = (HEAP32[i13 >> 2] | 0) + i2 | 0;
   HEAP32[i13 >> 2] = i2;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) != (HEAP32[i14 >> 2] | 0)); while (0);
  HEAP32[i14 >> 2] = i1;
  i1 = 2;
 } while (0);
 if ((i15 | 0) == 29) i1 = (i1 | 0) != (i10 | 0) & 1;
 STACKTOP = i16;
 return i1 | 0;
}

function _SDL_EGL_ChooseConfig(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 784 | 0;
 i9 = i13 + 528 | 0;
 i11 = i13 + 8 | 0;
 i12 = i13 + 4 | 0;
 i10 = i13 + 16 | 0;
 HEAP32[i11 >> 2] = 0;
 i8 = i5 + 644 | 0;
 i4 = HEAP32[i8 >> 2] | 0;
 if (!i4) {
  i12 = -1;
  STACKTOP = i13;
  return i12 | 0;
 }
 HEAP32[i9 >> 2] = 12324;
 HEAP32[i9 + 4 >> 2] = HEAP32[i5 + 260 >> 2];
 HEAP32[i9 + 8 >> 2] = 12323;
 HEAP32[i9 + 12 >> 2] = HEAP32[i5 + 264 >> 2];
 HEAP32[i9 + 16 >> 2] = 12322;
 HEAP32[i9 + 20 >> 2] = HEAP32[i5 + 268 >> 2];
 i1 = HEAP32[i5 + 272 >> 2] | 0;
 if (!i1) i2 = 6; else {
  HEAP32[i9 + 24 >> 2] = 12321;
  HEAP32[i9 + 28 >> 2] = i1;
  i2 = 8;
 }
 i1 = HEAP32[i5 + 280 >> 2] | 0;
 if (i1) {
  i7 = i2 | 1;
  HEAP32[i9 + (i2 << 2) >> 2] = 12320;
  HEAP32[i9 + (i7 << 2) >> 2] = i1;
  i2 = i7 + 1 | 0;
 }
 HEAP32[i9 + (i2 << 2) >> 2] = 12325;
 i1 = i2 + 2 | 0;
 HEAP32[i9 + (i2 + 1 << 2) >> 2] = HEAP32[i5 + 276 >> 2];
 i3 = HEAP32[i5 + 284 >> 2] | 0;
 if (!i3) i2 = i1; else {
  HEAP32[i9 + (i1 << 2) >> 2] = 12326;
  HEAP32[i9 + (i2 + 3 << 2) >> 2] = i3;
  i2 = i2 + 4 | 0;
 }
 i1 = HEAP32[i5 + 312 >> 2] | 0;
 if (i1) {
  HEAP32[i9 + (i2 << 2) >> 2] = 12338;
  HEAP32[i9 + (i2 + 1 << 2) >> 2] = i1;
  i2 = i2 + 2 | 0;
 }
 i1 = HEAP32[i5 + 316 >> 2] | 0;
 if (i1) {
  HEAP32[i9 + (i2 << 2) >> 2] = 12337;
  HEAP32[i9 + (i2 + 1 << 2) >> 2] = i1;
  i2 = i2 + 2 | 0;
 }
 HEAP32[i9 + (i2 << 2) >> 2] = 12352;
 if ((HEAP32[i5 + 336 >> 2] | 0) == 4) {
  i1 = (HEAP32[i5 + 324 >> 2] | 0) == 2 ? 4 : 1;
  FUNCTION_TABLE_ii[HEAP32[i4 + 84 >> 2] & 127](12448) | 0;
 } else {
  FUNCTION_TABLE_ii[HEAP32[i4 + 84 >> 2] & 127](12450) | 0;
  i1 = 8;
 }
 HEAP32[i9 + (i2 + 1 << 2) >> 2] = i1;
 HEAP32[i9 + (i2 + 2 << 2) >> 2] = 12344;
 i7 = HEAP32[i8 >> 2] | 0;
 i7 = (FUNCTION_TABLE_iiiiii[HEAP32[i7 + 36 >> 2] & 63](HEAP32[i7 + 8 >> 2] | 0, i9, i10, 128, i11) | 0) == 0;
 i1 = HEAP32[i11 >> 2] | 0;
 if (i7 | (i1 | 0) == 0) {
  i12 = _SDL_SetError(40037, i13) | 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 if ((i1 | 0) > 0) {
  i1 = -1;
  i7 = 0;
 } else {
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 do {
  i6 = i10 + (i7 << 2) | 0;
  i2 = 0;
  i5 = 0;
  do {
   i3 = HEAP32[i9 + (i5 << 2) >> 2] | 0;
   if ((i3 | 0) == 12344) break;
   i4 = i9 + ((i5 | 1) << 2) | 0;
   if ((i3 + -12321 | 0) >>> 0 < 6 & (HEAP32[i4 >> 2] | 0) != -1) {
    i14 = HEAP32[i8 >> 2] | 0;
    FUNCTION_TABLE_iiiii[HEAP32[i14 + 72 >> 2] & 31](HEAP32[i14 + 8 >> 2] | 0, HEAP32[i6 >> 2] | 0, i3, i12) | 0;
    i2 = (HEAP32[i12 >> 2] | 0) + i2 - (HEAP32[i4 >> 2] | 0) | 0;
   }
   i5 = i5 + 2 | 0;
  } while (i5 >>> 0 < 63);
  if ((i1 | 0) == -1 | (i2 | 0) < (i1 | 0)) {
   HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] = HEAP32[i6 >> 2];
   i1 = i2;
  }
  i7 = i7 + 1 | 0;
 } while ((i2 | 0) != 0 ? (i7 | 0) < (HEAP32[i11 >> 2] | 0) : 0);
 i1 = 0;
 STACKTOP = i13;
 return i1 | 0;
}

function _SDL_JoystickUpdate() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i19 = i20;
 i1 = HEAP32[3040] | 0;
 if (!i1) {
  STACKTOP = i20;
  return;
 }
 i11 = i19 + 8 | 0;
 i12 = i19 + 12 | 0;
 i13 = i19 + 13 | 0;
 i14 = i19 + 8 | 0;
 i15 = i19 + 12 | 0;
 i16 = i19 + 13 | 0;
 i17 = i19 + 8 | 0;
 i18 = i19 + 12 | 0;
 i9 = i19 + 16 | 0;
 do {
  i8 = i1;
  i1 = HEAP32[i1 + 56 >> 2] | 0;
  HEAP32[3041] = i8;
  _SDL_SYS_JoystickUpdate(i8);
  if ((HEAP32[i8 + 48 >> 2] | 0) != 0 ? (i10 = i8 + 52 | 0, (HEAP32[i10 >> 2] | 0) != 0) : 0) {
   i6 = i8 + 8 | 0;
   i2 = HEAP32[i6 >> 2] | 0;
   if ((i2 | 0) > 0) {
    i7 = i8 + 12 | 0;
    i5 = 0;
    do {
     i3 = i5 & 255;
     i4 = i5 & 255;
     if ((i4 | 0) < (i2 | 0) ? (HEAP16[(HEAP32[i7 >> 2] | 0) + (i4 << 1) >> 1] | 0) != 0 : 0) {
      (HEAP32[3042] | 0) == 0 ? (_SDL_WasInit(32) | 0) != 0 : 0;
      HEAP16[(HEAP32[i7 >> 2] | 0) + (i4 << 1) >> 1] = 0;
      if ((_SDL_EventState(1536, -1) | 0) << 24 >> 24 == 1) {
       HEAP32[i19 >> 2] = 1536;
       HEAP32[i17 >> 2] = HEAP32[i8 >> 2];
       HEAP8[i18 >> 0] = i3;
       HEAP16[i9 >> 1] = 0;
       _SDL_PushEvent(i19) | 0;
      }
     }
     i5 = i5 + 1 | 0;
     i2 = HEAP32[i6 >> 2] | 0;
    } while ((i5 | 0) < (i2 | 0));
   }
   i2 = i8 + 32 | 0;
   if ((HEAP32[i2 >> 2] | 0) > 0) {
    i3 = i8 + 36 | 0;
    i6 = 0;
    do {
     i4 = i6 & 255;
     HEAP32[i19 >> 2] = 1540;
     i5 = i6 & 255;
     if ((i5 | 0) < (HEAP32[i2 >> 2] | 0) ? (HEAP8[(HEAP32[i3 >> 2] | 0) + i5 >> 0] | 0) != 0 : 0) {
      (HEAP32[3042] | 0) == 0 ? (_SDL_WasInit(32) | 0) != 0 : 0;
      HEAP8[(HEAP32[i3 >> 2] | 0) + i5 >> 0] = 0;
      if ((_SDL_EventState(HEAP32[i19 >> 2] | 0, -1) | 0) << 24 >> 24 == 1) {
       HEAP32[i14 >> 2] = HEAP32[i8 >> 2];
       HEAP8[i15 >> 0] = i4;
       HEAP8[i16 >> 0] = 0;
       _SDL_PushEvent(i19) | 0;
      }
     }
     i6 = i6 + 1 | 0;
    } while ((i6 | 0) < (HEAP32[i2 >> 2] | 0));
   }
   i6 = i8 + 16 | 0;
   i2 = HEAP32[i6 >> 2] | 0;
   if ((i2 | 0) > 0) {
    i7 = i8 + 20 | 0;
    i5 = 0;
    do {
     i3 = i5 & 255;
     i4 = i5 & 255;
     if ((i4 | 0) < (i2 | 0) ? (HEAP8[(HEAP32[i7 >> 2] | 0) + i4 >> 0] | 0) != 0 : 0) {
      (HEAP32[3042] | 0) == 0 ? (_SDL_WasInit(32) | 0) != 0 : 0;
      HEAP8[(HEAP32[i7 >> 2] | 0) + i4 >> 0] = 0;
      if ((_SDL_EventState(1538, -1) | 0) << 24 >> 24 == 1) {
       HEAP32[i19 >> 2] = 1538;
       HEAP32[i11 >> 2] = HEAP32[i8 >> 2];
       HEAP8[i12 >> 0] = i3;
       HEAP8[i13 >> 0] = 0;
       _SDL_PushEvent(i19) | 0;
      }
     }
     i5 = i5 + 1 | 0;
     i2 = HEAP32[i6 >> 2] | 0;
    } while ((i5 | 0) < (i2 | 0));
   }
   HEAP32[i10 >> 2] = 0;
  }
  HEAP32[3041] = 0;
  if ((HEAP32[i8 + 44 >> 2] | 0) < 1) _SDL_JoystickClose(i8);
 } while ((i1 | 0) != 0);
 STACKTOP = i20;
 return;
}

function _SDL_EnclosePoints(i14, i13, i3, i15) {
 i14 = i14 | 0;
 i13 = i13 | 0;
 i3 = i3 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i16 = 0, i17 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i16 + 8 | 0;
 i1 = i16;
 if (!i14) {
  HEAP32[i1 >> 2] = 40595;
  _SDL_SetError(41366, i1) | 0;
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 if ((i13 | 0) < 1) {
  HEAP32[i2 >> 2] = 40602;
  _SDL_SetError(41366, i2) | 0;
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 if (!i3) {
  if (!i15) {
   i15 = 1;
   STACKTOP = i16;
   return i15 | 0;
  }
  i1 = HEAP32[i14 >> 2] | 0;
  i5 = HEAP32[i14 + 4 >> 2] | 0;
  if ((i13 | 0) > 1) {
   i6 = 1;
   i3 = i1;
   i4 = i5;
   i2 = i1;
   i1 = i5;
   do {
    i11 = HEAP32[i14 + (i6 << 3) >> 2] | 0;
    i12 = HEAP32[i14 + (i6 << 3) + 4 >> 2] | 0;
    i10 = (i11 | 0) < (i2 | 0);
    i3 = i10 ? i3 : (i11 | 0) > (i3 | 0) ? i11 : i3;
    i2 = i10 ? i11 : i2;
    i11 = (i12 | 0) < (i1 | 0);
    i4 = i11 ? i4 : (i12 | 0) > (i4 | 0) ? i12 : i4;
    i1 = i11 ? i12 : i1;
    i6 = i6 + 1 | 0;
   } while ((i6 | 0) != (i13 | 0));
   i6 = 19;
  } else {
   i3 = i1;
   i4 = i5;
   i2 = i1;
   i1 = i5;
  }
 } else {
  i10 = HEAP32[i3 >> 2] | 0;
  i11 = HEAP32[i3 + 4 >> 2] | 0;
  i7 = HEAP32[i3 + 8 >> 2] | 0;
  i12 = i10 + -1 + i7 | 0;
  i8 = HEAP32[i3 + 12 >> 2] | 0;
  i9 = i11 + -1 + i8 | 0;
  if ((i7 | 0) < 1 | (i8 | 0) < 1) {
   i15 = 0;
   STACKTOP = i16;
   return i15 | 0;
  }
  if (!i15) {
   i1 = 0;
   while (1) {
    i8 = HEAP32[i14 + (i1 << 3) >> 2] | 0;
    i15 = HEAP32[i14 + (i1 << 3) + 4 >> 2] | 0;
    if (!((i15 | 0) > (i9 | 0) | ((i8 | 0) < (i10 | 0) | (i8 | 0) > (i12 | 0) | (i15 | 0) < (i11 | 0)))) {
     i1 = 1;
     i6 = 21;
     break;
    }
    i1 = i1 + 1 | 0;
    if ((i1 | 0) >= (i13 | 0)) {
     i1 = 0;
     i6 = 21;
     break;
    }
   }
   if ((i6 | 0) == 21) {
    STACKTOP = i16;
    return i1 | 0;
   }
  } else {
   i5 = 0;
   i8 = 0;
   i3 = 0;
   i4 = 0;
   i2 = 0;
   i7 = 0;
  }
  while (1) {
   i6 = HEAP32[i14 + (i8 << 3) >> 2] | 0;
   i1 = HEAP32[i14 + (i8 << 3) + 4 >> 2] | 0;
   if (!((i1 | 0) > (i9 | 0) | ((i6 | 0) < (i10 | 0) | (i6 | 0) > (i12 | 0) | (i1 | 0) < (i11 | 0)))) if (i5) {
    i17 = (i6 | 0) < (i2 | 0);
    i3 = i17 ? i3 : (i6 | 0) > (i3 | 0) ? i6 : i3;
    i2 = i17 ? i6 : i2;
    if ((i1 | 0) >= (i7 | 0)) {
     i4 = (i1 | 0) > (i4 | 0) ? i1 : i4;
     i1 = i7;
    }
   } else {
    i5 = 1;
    i3 = i6;
    i4 = i1;
    i2 = i6;
   } else i1 = i7;
   i8 = i8 + 1 | 0;
   if ((i8 | 0) >= (i13 | 0)) break; else i7 = i1;
  }
  if (!i5) {
   i17 = 0;
   STACKTOP = i16;
   return i17 | 0;
  } else i6 = 19;
 }
 if ((i6 | 0) == 19) if (!i15) {
  i17 = 1;
  STACKTOP = i16;
  return i17 | 0;
 }
 HEAP32[i15 >> 2] = i2;
 HEAP32[i15 + 4 >> 2] = i1;
 HEAP32[i15 + 8 >> 2] = i3 + 1 - i2;
 HEAP32[i15 + 12 >> 2] = i4 + 1 - i1;
 i17 = 1;
 STACKTOP = i16;
 return i17 | 0;
}

function _SDL_Blit_RGBA8888_ARGB8888_Blend_Scale(i25) {
 i25 = i25 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i26 = 0, i27 = 0;
 i1 = HEAP32[i25 + 52 >> 2] | 0;
 i23 = i25 + 28 | 0;
 i26 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i25 + 8 >> 2] << 16 | 0) / (i26 | 0) | 0;
 i19 = i25 + 24 | 0;
 i3 = HEAP32[i19 >> 2] | 0;
 i20 = (HEAP32[i25 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i26 + -1 | 0;
 HEAP32[i23 >> 2] = i2;
 if (!i26) return;
 i26 = i25 + 20 | 0;
 i21 = i25 + 32 | 0;
 i22 = (i1 & 48 | 0) != 0;
 i17 = i1 & 112;
 i18 = i25 + 12 | 0;
 i5 = HEAP32[i26 >> 2] | 0;
 i16 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i15 = i1 + -65536 | 0;
   i14 = i15 >>> 16;
   i15 = i15 - (i14 << 16) | 0;
   i4 = i4 + 1 + i14 | 0;
  } else i15 = i1;
  if (!i3) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i6 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i25 >> 2] | 0) + ((Math_imul(HEAP32[i18 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i13 = HEAP32[i2 >> 2] | 0;
    i11 = i13 >>> 24;
    i10 = i13 >>> 16 & 255;
    i9 = i13 >>> 8 & 255;
    i13 = i13 & 255;
    i12 = HEAP32[i5 >> 2] | 0;
    i7 = i12 >>> 16 & 255;
    i8 = i12 >>> 8 & 255;
    i14 = i12 & 255;
    i12 = i12 >>> 24;
    if (i22 & (i13 | 0) != 255) {
     i9 = ((Math_imul(i9, i13) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i13) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i13) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 | 0) {
    case 16:
     {
      i27 = i13 ^ 255;
      i12 = (((Math_imul(i27, i12) | 0) >>> 0) / 255 | 0) + i13 | 0;
      i9 = (((Math_imul(i27, i14) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i8 = (((Math_imul(i8, i27) | 0) >>> 0) / 255 | 0) + i10 | 0;
      i7 = (((Math_imul(i7, i27) | 0) >>> 0) / 255 | 0) + i11 | 0;
      break;
     }
    case 32:
     {
      i7 = i11 + i7 | 0;
      i8 = i10 + i8 | 0;
      i9 = i9 + i14 | 0;
      i9 = i9 >>> 0 > 255 ? 255 : i9;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      break;
     }
    case 64:
     {
      i9 = ((Math_imul(i9, i14) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i10, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i9 = i14;
    }
    HEAP32[i5 >> 2] = i8 << 8 | i7 << 16 | i9 | i12 << 24;
    if (!i3) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i20 | 0;
    }
   }
   i3 = HEAP32[i23 >> 2] | 0;
  }
  i1 = i16 + (HEAP32[i21 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i23 >> 2] = i2;
  if (!i3) break;
  i16 = i1;
  i5 = i1;
  i3 = HEAP32[i19 >> 2] | 0;
  i1 = i15 + i24 | 0;
 }
 HEAP32[i26 >> 2] = i1;
 return;
}

function _SDL_Blit_BGRA8888_ARGB8888_Blend_Scale(i25) {
 i25 = i25 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i26 = 0, i27 = 0;
 i1 = HEAP32[i25 + 52 >> 2] | 0;
 i23 = i25 + 28 | 0;
 i26 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i25 + 8 >> 2] << 16 | 0) / (i26 | 0) | 0;
 i19 = i25 + 24 | 0;
 i3 = HEAP32[i19 >> 2] | 0;
 i20 = (HEAP32[i25 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i26 + -1 | 0;
 HEAP32[i23 >> 2] = i2;
 if (!i26) return;
 i26 = i25 + 20 | 0;
 i21 = i25 + 32 | 0;
 i22 = (i1 & 48 | 0) != 0;
 i17 = i1 & 112;
 i18 = i25 + 12 | 0;
 i5 = HEAP32[i26 >> 2] | 0;
 i16 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i15 = i1 + -65536 | 0;
   i14 = i15 >>> 16;
   i15 = i15 - (i14 << 16) | 0;
   i4 = i4 + 1 + i14 | 0;
  } else i15 = i1;
  if (!i3) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i6 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i25 >> 2] | 0) + ((Math_imul(HEAP32[i18 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i13 = HEAP32[i2 >> 2] | 0;
    i9 = i13 >>> 24;
    i10 = i13 >>> 16 & 255;
    i11 = i13 >>> 8 & 255;
    i13 = i13 & 255;
    i12 = HEAP32[i5 >> 2] | 0;
    i7 = i12 >>> 16 & 255;
    i8 = i12 >>> 8 & 255;
    i14 = i12 & 255;
    i12 = i12 >>> 24;
    if (i22 & (i13 | 0) != 255) {
     i9 = ((Math_imul(i9, i13) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i13) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i13) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 | 0) {
    case 16:
     {
      i27 = i13 ^ 255;
      i12 = (((Math_imul(i27, i12) | 0) >>> 0) / 255 | 0) + i13 | 0;
      i9 = (((Math_imul(i27, i14) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i8 = (((Math_imul(i8, i27) | 0) >>> 0) / 255 | 0) + i10 | 0;
      i7 = (((Math_imul(i7, i27) | 0) >>> 0) / 255 | 0) + i11 | 0;
      break;
     }
    case 32:
     {
      i7 = i11 + i7 | 0;
      i8 = i10 + i8 | 0;
      i9 = i9 + i14 | 0;
      i9 = i9 >>> 0 > 255 ? 255 : i9;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      break;
     }
    case 64:
     {
      i9 = ((Math_imul(i9, i14) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i10, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i9 = i14;
    }
    HEAP32[i5 >> 2] = i8 << 8 | i7 << 16 | i9 | i12 << 24;
    if (!i3) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i20 | 0;
    }
   }
   i3 = HEAP32[i23 >> 2] | 0;
  }
  i1 = i16 + (HEAP32[i21 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i23 >> 2] = i2;
  if (!i3) break;
  i16 = i1;
  i5 = i1;
  i3 = HEAP32[i19 >> 2] | 0;
  i1 = i15 + i24 | 0;
 }
 HEAP32[i26 >> 2] = i1;
 return;
}

function _SDL_Blit_ARGB8888_ARGB8888_Blend_Scale(i25) {
 i25 = i25 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i26 = 0, i27 = 0;
 i1 = HEAP32[i25 + 52 >> 2] | 0;
 i23 = i25 + 28 | 0;
 i26 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i25 + 8 >> 2] << 16 | 0) / (i26 | 0) | 0;
 i19 = i25 + 24 | 0;
 i3 = HEAP32[i19 >> 2] | 0;
 i20 = (HEAP32[i25 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i26 + -1 | 0;
 HEAP32[i23 >> 2] = i2;
 if (!i26) return;
 i26 = i25 + 20 | 0;
 i21 = i25 + 32 | 0;
 i22 = (i1 & 48 | 0) != 0;
 i17 = i1 & 112;
 i18 = i25 + 12 | 0;
 i5 = HEAP32[i26 >> 2] | 0;
 i16 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i15 = i1 + -65536 | 0;
   i14 = i15 >>> 16;
   i15 = i15 - (i14 << 16) | 0;
   i4 = i4 + 1 + i14 | 0;
  } else i15 = i1;
  if (!i3) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i6 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i25 >> 2] | 0) + ((Math_imul(HEAP32[i18 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i13 = HEAP32[i2 >> 2] | 0;
    i11 = i13 >>> 16 & 255;
    i10 = i13 >>> 8 & 255;
    i9 = i13 & 255;
    i13 = i13 >>> 24;
    i12 = HEAP32[i5 >> 2] | 0;
    i7 = i12 >>> 16 & 255;
    i8 = i12 >>> 8 & 255;
    i14 = i12 & 255;
    i12 = i12 >>> 24;
    if (i22 & (i13 | 0) != 255) {
     i9 = ((Math_imul(i9, i13) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i13) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i13) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 | 0) {
    case 16:
     {
      i27 = i13 ^ 255;
      i12 = (((Math_imul(i27, i12) | 0) >>> 0) / 255 | 0) + i13 | 0;
      i9 = (((Math_imul(i27, i14) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i8 = (((Math_imul(i8, i27) | 0) >>> 0) / 255 | 0) + i10 | 0;
      i7 = (((Math_imul(i7, i27) | 0) >>> 0) / 255 | 0) + i11 | 0;
      break;
     }
    case 32:
     {
      i7 = i11 + i7 | 0;
      i8 = i10 + i8 | 0;
      i9 = i9 + i14 | 0;
      i9 = i9 >>> 0 > 255 ? 255 : i9;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      break;
     }
    case 64:
     {
      i9 = ((Math_imul(i9, i14) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i10, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i9 = i14;
    }
    HEAP32[i5 >> 2] = i8 << 8 | i7 << 16 | i9 | i12 << 24;
    if (!i3) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i20 | 0;
    }
   }
   i3 = HEAP32[i23 >> 2] | 0;
  }
  i1 = i16 + (HEAP32[i21 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i23 >> 2] = i2;
  if (!i3) break;
  i16 = i1;
  i5 = i1;
  i3 = HEAP32[i19 >> 2] | 0;
  i1 = i15 + i24 | 0;
 }
 HEAP32[i26 >> 2] = i1;
 return;
}

function _SDL_Blit_ABGR8888_ARGB8888_Blend_Scale(i25) {
 i25 = i25 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i26 = 0, i27 = 0;
 i1 = HEAP32[i25 + 52 >> 2] | 0;
 i23 = i25 + 28 | 0;
 i26 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i25 + 8 >> 2] << 16 | 0) / (i26 | 0) | 0;
 i19 = i25 + 24 | 0;
 i3 = HEAP32[i19 >> 2] | 0;
 i20 = (HEAP32[i25 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i26 + -1 | 0;
 HEAP32[i23 >> 2] = i2;
 if (!i26) return;
 i26 = i25 + 20 | 0;
 i21 = i25 + 32 | 0;
 i22 = (i1 & 48 | 0) != 0;
 i17 = i1 & 112;
 i18 = i25 + 12 | 0;
 i5 = HEAP32[i26 >> 2] | 0;
 i16 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i15 = i1 + -65536 | 0;
   i14 = i15 >>> 16;
   i15 = i15 - (i14 << 16) | 0;
   i4 = i4 + 1 + i14 | 0;
  } else i15 = i1;
  if (!i3) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i6 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i25 >> 2] | 0) + ((Math_imul(HEAP32[i18 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i13 = HEAP32[i2 >> 2] | 0;
    i9 = i13 >>> 16 & 255;
    i10 = i13 >>> 8 & 255;
    i11 = i13 & 255;
    i13 = i13 >>> 24;
    i12 = HEAP32[i5 >> 2] | 0;
    i7 = i12 >>> 16 & 255;
    i8 = i12 >>> 8 & 255;
    i14 = i12 & 255;
    i12 = i12 >>> 24;
    if (i22 & (i13 | 0) != 255) {
     i9 = ((Math_imul(i9, i13) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i13) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i13) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 | 0) {
    case 16:
     {
      i27 = i13 ^ 255;
      i12 = (((Math_imul(i27, i12) | 0) >>> 0) / 255 | 0) + i13 | 0;
      i9 = (((Math_imul(i27, i14) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i8 = (((Math_imul(i8, i27) | 0) >>> 0) / 255 | 0) + i10 | 0;
      i7 = (((Math_imul(i7, i27) | 0) >>> 0) / 255 | 0) + i11 | 0;
      break;
     }
    case 32:
     {
      i7 = i11 + i7 | 0;
      i8 = i10 + i8 | 0;
      i9 = i9 + i14 | 0;
      i9 = i9 >>> 0 > 255 ? 255 : i9;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      break;
     }
    case 64:
     {
      i9 = ((Math_imul(i9, i14) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i10, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i9 = i14;
    }
    HEAP32[i5 >> 2] = i8 << 8 | i7 << 16 | i9 | i12 << 24;
    if (!i3) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i20 | 0;
    }
   }
   i3 = HEAP32[i23 >> 2] | 0;
  }
  i1 = i16 + (HEAP32[i21 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i23 >> 2] = i2;
  if (!i3) break;
  i16 = i1;
  i5 = i1;
  i3 = HEAP32[i19 >> 2] | 0;
  i1 = i15 + i24 | 0;
 }
 HEAP32[i26 >> 2] = i1;
 return;
}

function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE(i1, i10, i11, i4, i2, i12, i6) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i12 = i12 | 0;
 i6 = i6 | 0;
 var i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i19 = i16 + 24 | 0;
 i17 = i16 + 32 | 0;
 i15 = i16 + 16 | 0;
 i5 = i16 + 8 | 0;
 i18 = i16 + 4 | 0;
 i3 = i16 + 28 | 0;
 i7 = i16;
 HEAP32[i15 >> 2] = i17;
 i14 = i15 + 4 | 0;
 HEAP32[i14 >> 2] = 347;
 i9 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i18 >> 2] = i9;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i18, 30384) | 0;
 HEAP8[i3 >> 0] = 0;
 i8 = HEAP32[i11 >> 2] | 0;
 HEAP32[i7 >> 2] = i8;
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 HEAP32[i19 >> 2] = HEAP32[i7 >> 2];
 i7 = i8;
 if (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_(i10, i19, i4, i18, i2, i12, i3, i1, i15, i5, i17 + 100 | 0) | 0) {
  if (!(HEAP8[i6 >> 0] & 1)) {
   HEAP8[i6 + 1 >> 0] = 0;
   HEAP8[i6 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i6 + 8 >> 2] >> 0] = 0;
   HEAP32[i6 + 4 >> 2] = 0;
  }
  if (HEAP8[i3 >> 0] | 0) __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i6, FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i1, 45) | 0);
  i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i1, 48) | 0;
  i1 = HEAP32[i15 >> 2] | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  i2 = i4 + -1 | 0;
  L10 : do if (i1 >>> 0 < i2 >>> 0) do {
   if ((HEAP8[i1 >> 0] | 0) != i3 << 24 >> 24) break L10;
   i1 = i1 + 1 | 0;
  } while (i1 >>> 0 < i2 >>> 0); while (0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_(i6, i1, i4) | 0;
 }
 i1 = HEAP32[i10 >> 2] | 0;
 do if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
   HEAP32[i10 >> 2] = 0;
   i1 = 0;
   break;
  } else {
   i1 = HEAP32[i10 >> 2] | 0;
   break;
  }
 } else i1 = 0; while (0);
 i1 = (i1 | 0) == 0;
 do if (i8) {
  if ((HEAP32[i7 + 12 >> 2] | 0) == (HEAP32[i7 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 127](i7) | 0) == -1 : 0) {
   HEAP32[i11 >> 2] = 0;
   i13 = 21;
   break;
  }
  if (!i1) i13 = 22;
 } else i13 = 21; while (0);
 if ((i13 | 0) == 21 ? i1 : 0) i13 = 22;
 if ((i13 | 0) == 22) HEAP32[i12 >> 2] = HEAP32[i12 >> 2] | 2;
 i2 = HEAP32[i10 >> 2] | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i9) | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 HEAP32[i15 >> 2] = 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[i14 >> 2] & 511](i1);
 STACKTOP = i16;
 return i2 | 0;
}

function _SDL_Blit_RGBA8888_ARGB8888_Modulate_Blend(i27) {
 i27 = i27 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i28 = 0;
 i1 = HEAP32[i27 + 52 >> 2] | 0;
 i25 = HEAPU8[i27 + 60 >> 0] | 0;
 i26 = HEAPU8[i27 + 61 >> 0] | 0;
 i15 = HEAPU8[i27 + 62 >> 0] | 0;
 i16 = HEAPU8[i27 + 63 >> 0] | 0;
 i17 = i27 + 28 | 0;
 i24 = HEAP32[i17 >> 2] | 0;
 i2 = i24 + -1 | 0;
 HEAP32[i17 >> 2] = i2;
 if (!i24) return;
 i18 = i27 + 20 | 0;
 i19 = i27 + 24 | 0;
 i20 = i27 + 12 | 0;
 i21 = i27 + 32 | 0;
 i22 = (i1 & 1 | 0) == 0;
 i23 = (i1 & 2 | 0) == 0;
 i24 = (i1 & 48 | 0) != 0;
 i14 = i1 & 112;
 do {
  i3 = HEAP32[i19 >> 2] | 0;
  if (!i3) {
   i3 = HEAP32[i18 >> 2] | 0;
   i4 = i2;
   i1 = HEAP32[i27 >> 2] | 0;
  } else {
   i13 = HEAP32[i18 >> 2] | 0;
   i1 = HEAP32[i27 >> 2] | 0;
   i11 = i13;
   i12 = i1;
   while (1) {
    i3 = i3 + -1 | 0;
    i9 = HEAP32[i12 >> 2] | 0;
    i7 = i9 >>> 24;
    i6 = i9 >>> 16 & 255;
    i5 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    i8 = HEAP32[i11 >> 2] | 0;
    i2 = i8 >>> 16 & 255;
    i4 = i8 >>> 8 & 255;
    i10 = i8 & 255;
    i8 = i8 >>> 24;
    if (!i22) {
     i5 = ((Math_imul(i5, i15) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i26) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i25) | 0) >>> 0) / 255 | 0;
    }
    i28 = ((Math_imul(i9, i16) | 0) >>> 0) / 255 | 0;
    i9 = i23 ? i9 : i28;
    if (i24 & i9 >>> 0 < 255) {
     i5 = ((Math_imul(i9, i5) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i9, i6) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i9, i7) | 0) >>> 0) / 255 | 0;
    }
    switch (i14 | 0) {
    case 16:
     {
      i28 = 255 - i9 | 0;
      i8 = (((Math_imul(i28, i8) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i5 = (((Math_imul(i28, i10) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i4 = (((Math_imul(i28, i4) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i28, i2) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i4 = i6 + i4 | 0;
      i5 = i5 + i10 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i4 = i4 >>> 0 > 255 ? 255 : i4;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i10) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i6, i4) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i10;
    }
    HEAP32[i11 >> 2] = i4 << 8 | i2 << 16 | i5 | i8 << 24;
    if (!i3) break; else {
     i11 = i11 + 4 | 0;
     i12 = i12 + 4 | 0;
    }
   }
   i3 = i13;
   i4 = HEAP32[i17 >> 2] | 0;
  }
  HEAP32[i27 >> 2] = i1 + (HEAP32[i20 >> 2] | 0);
  HEAP32[i18 >> 2] = i3 + (HEAP32[i21 >> 2] | 0);
  i2 = i4 + -1 | 0;
  HEAP32[i17 >> 2] = i2;
 } while ((i4 | 0) != 0);
 return;
}

function _SDL_Blit_BGRA8888_ARGB8888_Modulate_Blend(i27) {
 i27 = i27 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i28 = 0;
 i1 = HEAP32[i27 + 52 >> 2] | 0;
 i25 = HEAPU8[i27 + 60 >> 0] | 0;
 i26 = HEAPU8[i27 + 61 >> 0] | 0;
 i15 = HEAPU8[i27 + 62 >> 0] | 0;
 i16 = HEAPU8[i27 + 63 >> 0] | 0;
 i17 = i27 + 28 | 0;
 i24 = HEAP32[i17 >> 2] | 0;
 i2 = i24 + -1 | 0;
 HEAP32[i17 >> 2] = i2;
 if (!i24) return;
 i18 = i27 + 20 | 0;
 i19 = i27 + 24 | 0;
 i20 = i27 + 12 | 0;
 i21 = i27 + 32 | 0;
 i22 = (i1 & 1 | 0) == 0;
 i23 = (i1 & 2 | 0) == 0;
 i24 = (i1 & 48 | 0) != 0;
 i14 = i1 & 112;
 do {
  i3 = HEAP32[i19 >> 2] | 0;
  if (!i3) {
   i3 = HEAP32[i18 >> 2] | 0;
   i4 = i2;
   i1 = HEAP32[i27 >> 2] | 0;
  } else {
   i13 = HEAP32[i18 >> 2] | 0;
   i1 = HEAP32[i27 >> 2] | 0;
   i11 = i13;
   i12 = i1;
   while (1) {
    i3 = i3 + -1 | 0;
    i9 = HEAP32[i12 >> 2] | 0;
    i5 = i9 >>> 24;
    i6 = i9 >>> 16 & 255;
    i7 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    i8 = HEAP32[i11 >> 2] | 0;
    i2 = i8 >>> 16 & 255;
    i4 = i8 >>> 8 & 255;
    i10 = i8 & 255;
    i8 = i8 >>> 24;
    if (!i22) {
     i5 = ((Math_imul(i5, i15) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i26) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i25) | 0) >>> 0) / 255 | 0;
    }
    i28 = ((Math_imul(i9, i16) | 0) >>> 0) / 255 | 0;
    i9 = i23 ? i9 : i28;
    if (i24 & i9 >>> 0 < 255) {
     i5 = ((Math_imul(i9, i5) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i9, i6) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i9, i7) | 0) >>> 0) / 255 | 0;
    }
    switch (i14 | 0) {
    case 16:
     {
      i28 = 255 - i9 | 0;
      i8 = (((Math_imul(i28, i8) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i5 = (((Math_imul(i28, i10) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i4 = (((Math_imul(i28, i4) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i28, i2) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i4 = i6 + i4 | 0;
      i5 = i5 + i10 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i4 = i4 >>> 0 > 255 ? 255 : i4;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i10) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i6, i4) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i10;
    }
    HEAP32[i11 >> 2] = i4 << 8 | i2 << 16 | i5 | i8 << 24;
    if (!i3) break; else {
     i11 = i11 + 4 | 0;
     i12 = i12 + 4 | 0;
    }
   }
   i3 = i13;
   i4 = HEAP32[i17 >> 2] | 0;
  }
  HEAP32[i27 >> 2] = i1 + (HEAP32[i20 >> 2] | 0);
  HEAP32[i18 >> 2] = i3 + (HEAP32[i21 >> 2] | 0);
  i2 = i4 + -1 | 0;
  HEAP32[i17 >> 2] = i2;
 } while ((i4 | 0) != 0);
 return;
}

function _SDL_Blit_ARGB8888_ARGB8888_Modulate_Blend(i27) {
 i27 = i27 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i28 = 0;
 i1 = HEAP32[i27 + 52 >> 2] | 0;
 i25 = HEAPU8[i27 + 60 >> 0] | 0;
 i26 = HEAPU8[i27 + 61 >> 0] | 0;
 i15 = HEAPU8[i27 + 62 >> 0] | 0;
 i16 = HEAPU8[i27 + 63 >> 0] | 0;
 i17 = i27 + 28 | 0;
 i24 = HEAP32[i17 >> 2] | 0;
 i2 = i24 + -1 | 0;
 HEAP32[i17 >> 2] = i2;
 if (!i24) return;
 i18 = i27 + 20 | 0;
 i19 = i27 + 24 | 0;
 i20 = i27 + 12 | 0;
 i21 = i27 + 32 | 0;
 i22 = (i1 & 1 | 0) == 0;
 i23 = (i1 & 2 | 0) == 0;
 i24 = (i1 & 48 | 0) != 0;
 i14 = i1 & 112;
 do {
  i3 = HEAP32[i19 >> 2] | 0;
  if (!i3) {
   i3 = HEAP32[i18 >> 2] | 0;
   i4 = i2;
   i1 = HEAP32[i27 >> 2] | 0;
  } else {
   i13 = HEAP32[i18 >> 2] | 0;
   i1 = HEAP32[i27 >> 2] | 0;
   i11 = i13;
   i12 = i1;
   while (1) {
    i3 = i3 + -1 | 0;
    i9 = HEAP32[i12 >> 2] | 0;
    i7 = i9 >>> 16 & 255;
    i6 = i9 >>> 8 & 255;
    i5 = i9 & 255;
    i9 = i9 >>> 24;
    i8 = HEAP32[i11 >> 2] | 0;
    i2 = i8 >>> 16 & 255;
    i4 = i8 >>> 8 & 255;
    i10 = i8 & 255;
    i8 = i8 >>> 24;
    if (!i22) {
     i5 = ((Math_imul(i5, i15) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i26) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i25) | 0) >>> 0) / 255 | 0;
    }
    i28 = ((Math_imul(i9, i16) | 0) >>> 0) / 255 | 0;
    i9 = i23 ? i9 : i28;
    if (i24 & i9 >>> 0 < 255) {
     i5 = ((Math_imul(i9, i5) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i9, i6) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i9, i7) | 0) >>> 0) / 255 | 0;
    }
    switch (i14 | 0) {
    case 16:
     {
      i28 = 255 - i9 | 0;
      i8 = (((Math_imul(i28, i8) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i5 = (((Math_imul(i28, i10) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i4 = (((Math_imul(i28, i4) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i28, i2) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i4 = i6 + i4 | 0;
      i5 = i5 + i10 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i4 = i4 >>> 0 > 255 ? 255 : i4;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i10) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i6, i4) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i10;
    }
    HEAP32[i11 >> 2] = i4 << 8 | i2 << 16 | i5 | i8 << 24;
    if (!i3) break; else {
     i11 = i11 + 4 | 0;
     i12 = i12 + 4 | 0;
    }
   }
   i3 = i13;
   i4 = HEAP32[i17 >> 2] | 0;
  }
  HEAP32[i27 >> 2] = i1 + (HEAP32[i20 >> 2] | 0);
  HEAP32[i18 >> 2] = i3 + (HEAP32[i21 >> 2] | 0);
  i2 = i4 + -1 | 0;
  HEAP32[i17 >> 2] = i2;
 } while ((i4 | 0) != 0);
 return;
}

function _SDL_Blit_ABGR8888_ARGB8888_Modulate_Blend(i27) {
 i27 = i27 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i28 = 0;
 i1 = HEAP32[i27 + 52 >> 2] | 0;
 i25 = HEAPU8[i27 + 60 >> 0] | 0;
 i26 = HEAPU8[i27 + 61 >> 0] | 0;
 i15 = HEAPU8[i27 + 62 >> 0] | 0;
 i16 = HEAPU8[i27 + 63 >> 0] | 0;
 i17 = i27 + 28 | 0;
 i24 = HEAP32[i17 >> 2] | 0;
 i2 = i24 + -1 | 0;
 HEAP32[i17 >> 2] = i2;
 if (!i24) return;
 i18 = i27 + 20 | 0;
 i19 = i27 + 24 | 0;
 i20 = i27 + 12 | 0;
 i21 = i27 + 32 | 0;
 i22 = (i1 & 1 | 0) == 0;
 i23 = (i1 & 2 | 0) == 0;
 i24 = (i1 & 48 | 0) != 0;
 i14 = i1 & 112;
 do {
  i3 = HEAP32[i19 >> 2] | 0;
  if (!i3) {
   i3 = HEAP32[i18 >> 2] | 0;
   i4 = i2;
   i1 = HEAP32[i27 >> 2] | 0;
  } else {
   i13 = HEAP32[i18 >> 2] | 0;
   i1 = HEAP32[i27 >> 2] | 0;
   i11 = i13;
   i12 = i1;
   while (1) {
    i3 = i3 + -1 | 0;
    i9 = HEAP32[i12 >> 2] | 0;
    i5 = i9 >>> 16 & 255;
    i6 = i9 >>> 8 & 255;
    i7 = i9 & 255;
    i9 = i9 >>> 24;
    i8 = HEAP32[i11 >> 2] | 0;
    i2 = i8 >>> 16 & 255;
    i4 = i8 >>> 8 & 255;
    i10 = i8 & 255;
    i8 = i8 >>> 24;
    if (!i22) {
     i5 = ((Math_imul(i5, i15) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i26) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i25) | 0) >>> 0) / 255 | 0;
    }
    i28 = ((Math_imul(i9, i16) | 0) >>> 0) / 255 | 0;
    i9 = i23 ? i9 : i28;
    if (i24 & i9 >>> 0 < 255) {
     i5 = ((Math_imul(i9, i5) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i9, i6) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i9, i7) | 0) >>> 0) / 255 | 0;
    }
    switch (i14 | 0) {
    case 16:
     {
      i28 = 255 - i9 | 0;
      i8 = (((Math_imul(i28, i8) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i5 = (((Math_imul(i28, i10) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i4 = (((Math_imul(i28, i4) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i28, i2) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i4 = i6 + i4 | 0;
      i5 = i5 + i10 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i4 = i4 >>> 0 > 255 ? 255 : i4;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i10) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i6, i4) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i10;
    }
    HEAP32[i11 >> 2] = i4 << 8 | i2 << 16 | i5 | i8 << 24;
    if (!i3) break; else {
     i11 = i11 + 4 | 0;
     i12 = i12 + 4 | 0;
    }
   }
   i3 = i13;
   i4 = HEAP32[i17 >> 2] | 0;
  }
  HEAP32[i27 >> 2] = i1 + (HEAP32[i20 >> 2] | 0);
  HEAP32[i18 >> 2] = i3 + (HEAP32[i21 >> 2] | 0);
  i2 = i4 + -1 | 0;
  HEAP32[i17 >> 2] = i2;
 } while ((i4 | 0) != 0);
 return;
}

function _UpdateLogicalSize(i11) {
 i11 = i11 | 0;
 var d1 = 0.0, i2 = 0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i12 = i13 + 40 | 0;
 i10 = i13 + 32 | 0;
 i7 = i13 + 24 | 0;
 i5 = i13 + 16 | 0;
 i3 = i13 + 8 | 0;
 i2 = i13;
 i9 = i13 + 68 | 0;
 i6 = i13 + 64 | 0;
 i8 = i13 + 48 | 0;
 HEAP32[i9 >> 2] = 1;
 HEAP32[i6 >> 2] = 1;
 if ((i11 | 0) != 0 ? (HEAP32[i11 >> 2] | 0) == 37791 : 0) {
  i2 = HEAP32[i11 + 304 >> 2] | 0;
  L4 : do if (!i2) {
   i2 = HEAP32[i11 + 8 >> 2] | 0;
   do if (!i2) {
    i2 = HEAP32[i11 + 188 >> 2] | 0;
    if (!i2) {
     i2 = _SDL_SetError(37847, i5) | 0;
     break;
    } else {
     _SDL_GetWindowSize(i2, i9, i6);
     break L4;
    }
   } else i2 = FUNCTION_TABLE_iiii[i2 & 63](i11, i9, i6) | 0; while (0);
   if ((i2 | 0) < 0) {
    i12 = -1;
    STACKTOP = i13;
    return i12 | 0;
   }
  } else {
   if ((HEAP32[i2 >> 2] | 0) == 37830) {
    HEAP32[i9 >> 2] = HEAP32[i2 + 12 >> 2];
    HEAP32[i6 >> 2] = HEAP32[i2 + 16 >> 2];
    break;
   }
   _SDL_SetError(37831, i3) | 0;
   i12 = -1;
   STACKTOP = i13;
   return i12 | 0;
  } while (0);
  i2 = i11 + 196 | 0;
  i3 = i11 + 200 | 0;
  d1 = +(HEAP32[i2 >> 2] | 0) / +(HEAP32[i3 >> 2] | 0);
  d4 = +(HEAP32[i9 >> 2] | 0) / +(HEAP32[i6 >> 2] | 0);
  if ((HEAP32[i11 >> 2] | 0) == 37791) {
   HEAPF32[i11 + 284 >> 2] = 1.0;
   HEAPF32[i11 + 288 >> 2] = 1.0;
  } else _SDL_SetError(37792, i7) | 0;
  do if (+_SDL_fabs(d1 - d4) < .0001) {
   d1 = +(HEAP32[i9 >> 2] | 0) / +(HEAP32[i2 >> 2] | 0);
   if ((HEAP32[i11 >> 2] | 0) != 37791) {
    _SDL_SetError(37792, i10) | 0;
    break;
   }
   HEAP32[i11 + 212 >> 2] = 0;
   HEAP32[i11 + 216 >> 2] = 0;
   if ((_SDL_GetRendererOutputSize(i11, i11 + 220 | 0, i11 + 224 | 0) | 0) >= 0) FUNCTION_TABLE_ii[HEAP32[i11 + 48 >> 2] & 127](i11) | 0;
  } else if (d1 > d4) {
   i10 = HEAP32[i9 >> 2] | 0;
   d1 = +(i10 | 0) / +(HEAP32[i2 >> 2] | 0);
   HEAP32[i8 >> 2] = 0;
   HEAP32[i8 + 8 >> 2] = i10;
   i10 = ~~+_SDL_ceil(d1 * +(HEAP32[i3 >> 2] | 0));
   HEAP32[i8 + 12 >> 2] = i10;
   HEAP32[i8 + 4 >> 2] = ((HEAP32[i6 >> 2] | 0) - i10 | 0) / 2 | 0;
   _SDL_RenderSetViewport(i11, i8) | 0;
   break;
  } else {
   i10 = HEAP32[i6 >> 2] | 0;
   d1 = +(i10 | 0) / +(HEAP32[i3 >> 2] | 0);
   HEAP32[i8 + 4 >> 2] = 0;
   HEAP32[i8 + 12 >> 2] = i10;
   i10 = ~~+_SDL_ceil(d1 * +(HEAP32[i2 >> 2] | 0));
   HEAP32[i8 + 8 >> 2] = i10;
   HEAP32[i8 >> 2] = ((HEAP32[i9 >> 2] | 0) - i10 | 0) / 2 | 0;
   _SDL_RenderSetViewport(i11, i8) | 0;
   break;
  } while (0);
  if ((HEAP32[i11 >> 2] | 0) == 37791) {
   HEAPF32[i11 + 284 >> 2] = d1;
   HEAPF32[i11 + 288 >> 2] = d1;
   i12 = 0;
   STACKTOP = i13;
   return i12 | 0;
  } else {
   _SDL_SetError(37792, i12) | 0;
   i12 = 0;
   STACKTOP = i13;
   return i12 | 0;
  }
 }
 _SDL_SetError(37792, i2) | 0;
 i12 = -1;
 STACKTOP = i13;
 return i12 | 0;
}

function _Blit2to2Key(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = HEAP32[i3 + 24 >> 2] | 0;
 i2 = HEAP32[i3 + 28 >> 2] | 0;
 i8 = ~HEAP32[(HEAP32[i3 + 40 >> 2] | 0) + 24 >> 2];
 i9 = (HEAP32[i3 + 16 >> 2] | 0) / 2 | 0;
 i10 = (HEAP32[i3 + 36 >> 2] | 0) / 2 | 0;
 i11 = HEAP32[i3 + 56 >> 2] & i8;
 if (!i2) return;
 i12 = (i1 + 7 | 0) / 8 | 0;
 i7 = i1 & 7;
 i1 = HEAP32[i3 + 20 >> 2] | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 L4 : while (1) {
  i2 = i2 + -1 | 0;
  switch (i7 | 0) {
  case 0:
   {
    i4 = i1;
    i5 = i12;
    i6 = 4;
    break;
   }
  case 7:
   {
    i4 = i1;
    i5 = i12;
    i6 = 7;
    break;
   }
  case 6:
   {
    i4 = i1;
    i5 = i12;
    i6 = 10;
    break;
   }
  case 5:
   {
    i4 = i1;
    i5 = i12;
    i6 = 13;
    break;
   }
  case 4:
   {
    i4 = i1;
    i5 = i12;
    i6 = 16;
    break;
   }
  case 3:
   {
    i4 = i1;
    i5 = i12;
    i6 = 19;
    break;
   }
  case 2:
   {
    i4 = i1;
    i5 = i12;
    i6 = 22;
    break;
   }
  case 1:
   {
    i4 = i1;
    i5 = i12;
    i6 = 25;
    break;
   }
  default:
   i6 = 28;
  }
  while (1) if ((i6 | 0) == 4) {
   i1 = HEAP16[i3 >> 1] | 0;
   if ((i1 & 65535 & i8 | 0) != (i11 | 0)) HEAP16[i4 >> 1] = i1;
   i4 = i4 + 2 | 0;
   i3 = i3 + 2 | 0;
   i6 = 7;
   continue;
  } else if ((i6 | 0) == 7) {
   i1 = HEAP16[i3 >> 1] | 0;
   if ((i1 & 65535 & i8 | 0) != (i11 | 0)) HEAP16[i4 >> 1] = i1;
   i4 = i4 + 2 | 0;
   i3 = i3 + 2 | 0;
   i6 = 10;
   continue;
  } else if ((i6 | 0) == 10) {
   i1 = HEAP16[i3 >> 1] | 0;
   if ((i1 & 65535 & i8 | 0) != (i11 | 0)) HEAP16[i4 >> 1] = i1;
   i4 = i4 + 2 | 0;
   i3 = i3 + 2 | 0;
   i6 = 13;
   continue;
  } else if ((i6 | 0) == 13) {
   i1 = HEAP16[i3 >> 1] | 0;
   if ((i1 & 65535 & i8 | 0) != (i11 | 0)) HEAP16[i4 >> 1] = i1;
   i4 = i4 + 2 | 0;
   i3 = i3 + 2 | 0;
   i6 = 16;
   continue;
  } else if ((i6 | 0) == 16) {
   i1 = HEAP16[i3 >> 1] | 0;
   if ((i1 & 65535 & i8 | 0) != (i11 | 0)) HEAP16[i4 >> 1] = i1;
   i4 = i4 + 2 | 0;
   i3 = i3 + 2 | 0;
   i6 = 19;
   continue;
  } else if ((i6 | 0) == 19) {
   i1 = HEAP16[i3 >> 1] | 0;
   if ((i1 & 65535 & i8 | 0) != (i11 | 0)) HEAP16[i4 >> 1] = i1;
   i4 = i4 + 2 | 0;
   i3 = i3 + 2 | 0;
   i6 = 22;
   continue;
  } else if ((i6 | 0) == 22) {
   i1 = HEAP16[i3 >> 1] | 0;
   if ((i1 & 65535 & i8 | 0) != (i11 | 0)) HEAP16[i4 >> 1] = i1;
   i4 = i4 + 2 | 0;
   i3 = i3 + 2 | 0;
   i6 = 25;
   continue;
  } else if ((i6 | 0) == 25) {
   i1 = HEAP16[i3 >> 1] | 0;
   if ((i1 & 65535 & i8 | 0) != (i11 | 0)) HEAP16[i4 >> 1] = i1;
   i1 = i4 + 2 | 0;
   i3 = i3 + 2 | 0;
   if ((i5 | 0) > 1) {
    i4 = i1;
    i5 = i5 + -1 | 0;
    i6 = 4;
    continue;
   } else {
    i6 = 28;
    continue;
   }
  } else if ((i6 | 0) == 28) if (!i2) break L4; else {
   i1 = i1 + (i10 << 1) | 0;
   i3 = i3 + (i9 << 1) | 0;
   continue L4;
  }
 }
 return;
}

function _Color32DitherYV12Mod2X(i25, i27, i5, i2, i3, i6, i4, i26, i1) {
 i25 = i25 | 0;
 i27 = i27 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i26 = i26 | 0;
 i1 = i1 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i23 = (i26 << 1) + i1 | 0;
 i24 = (i26 | 0) / 2 | 0;
 i21 = (i23 * 3 | 0) + i1 | 0;
 if ((i4 + 1 | 0) >>> 0 < 3) return;
 i22 = (i26 + 1 | 0) >>> 0 < 3;
 i17 = i23 + 1 | 0;
 i15 = i23 + 3 | 0;
 i16 = i23 + 2 | 0;
 i18 = i24 << 2;
 i19 = i24 << 1;
 i20 = i19 + i26 | 0;
 i13 = i5;
 i14 = (i4 | 0) / 2 | 0;
 i4 = i6;
 i1 = i6 + (i23 << 1 << 2) | 0;
 while (1) {
  i14 = i14 + -1 | 0;
  i7 = i5 + i26 | 0;
  if (i22) {
   i6 = i13;
   i5 = i7;
  } else {
   i12 = i1 + (i18 << 2) | 0;
   i11 = i4 + (i18 << 2) | 0;
   i10 = i3 + i24 | 0;
   i8 = i13;
   i9 = i2;
   i6 = i24;
   while (1) {
    i6 = i6 + -1 | 0;
    i31 = HEAPU8[i9 >> 0] | 0;
    i30 = (HEAP32[i25 + (i31 << 2) >> 2] | 0) + 256 | 0;
    i28 = HEAPU8[i3 >> 0] | 0;
    i31 = (HEAP32[i25 + ((i31 | 256) << 2) >> 2] | 0) + 1024 + (HEAP32[i25 + ((i28 | 512) << 2) >> 2] | 0) | 0;
    i28 = (HEAP32[i25 + ((i28 | 768) << 2) >> 2] | 0) + 1792 | 0;
    i29 = HEAPU8[i8 >> 0] | 0;
    i29 = HEAP32[i27 + (i29 + i31 << 2) >> 2] | HEAP32[i27 + (i29 + i30 << 2) >> 2] | HEAP32[i27 + (i29 + i28 << 2) >> 2];
    HEAP32[i4 + (i17 << 2) >> 2] = i29;
    HEAP32[i4 + (i23 << 2) >> 2] = i29;
    HEAP32[i4 + 4 >> 2] = i29;
    HEAP32[i4 >> 2] = i29;
    i29 = HEAPU8[i8 + 1 >> 0] | 0;
    i29 = HEAP32[i27 + (i29 + i31 << 2) >> 2] | HEAP32[i27 + (i29 + i30 << 2) >> 2] | HEAP32[i27 + (i29 + i28 << 2) >> 2];
    HEAP32[i4 + (i15 << 2) >> 2] = i29;
    HEAP32[i4 + (i16 << 2) >> 2] = i29;
    HEAP32[i4 + 12 >> 2] = i29;
    HEAP32[i4 + 8 >> 2] = i29;
    i29 = HEAPU8[i7 >> 0] | 0;
    i29 = HEAP32[i27 + (i29 + i31 << 2) >> 2] | HEAP32[i27 + (i29 + i30 << 2) >> 2] | HEAP32[i27 + (i29 + i28 << 2) >> 2];
    HEAP32[i1 + (i17 << 2) >> 2] = i29;
    HEAP32[i1 + (i23 << 2) >> 2] = i29;
    HEAP32[i1 + 4 >> 2] = i29;
    HEAP32[i1 >> 2] = i29;
    i29 = HEAPU8[i7 + 1 >> 0] | 0;
    i28 = HEAP32[i27 + (i29 + i31 << 2) >> 2] | HEAP32[i27 + (i29 + i30 << 2) >> 2] | HEAP32[i27 + (i29 + i28 << 2) >> 2];
    HEAP32[i1 + (i15 << 2) >> 2] = i28;
    HEAP32[i1 + (i16 << 2) >> 2] = i28;
    HEAP32[i1 + 12 >> 2] = i28;
    HEAP32[i1 + 8 >> 2] = i28;
    if (!i6) break; else {
     i8 = i8 + 2 | 0;
     i9 = i9 + 1 | 0;
     i3 = i3 + 1 | 0;
     i7 = i7 + 2 | 0;
     i4 = i4 + 16 | 0;
     i1 = i1 + 16 | 0;
    }
   }
   i6 = i13 + i19 | 0;
   i2 = i2 + i24 | 0;
   i3 = i10;
   i5 = i5 + i20 | 0;
   i4 = i11;
   i1 = i12;
  }
  if (!i14) break; else {
   i13 = i6 + i26 | 0;
   i4 = i4 + (i21 << 2) | 0;
   i1 = i1 + (i21 << 2) | 0;
  }
 }
 return;
}

function _SDL_FinishWindowCreation(i16, i13) {
 i16 = i16 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i17 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i15 = i17 + 72 | 0;
 i14 = i17 + 64 | 0;
 i12 = i17 + 56 | 0;
 i11 = i17 + 48 | 0;
 i10 = i17 + 40 | 0;
 i9 = i17 + 32 | 0;
 i8 = i17 + 24 | 0;
 i7 = i17 + 16 | 0;
 i4 = i17 + 8 | 0;
 i3 = i17;
 HEAP32[i16 + 56 >> 2] = HEAP32[i16 + 16 >> 2];
 HEAP32[i16 + 60 >> 2] = HEAP32[i16 + 20 >> 2];
 HEAP32[i16 + 64 >> 2] = HEAP32[i16 + 24 >> 2];
 HEAP32[i16 + 68 >> 2] = HEAP32[i16 + 28 >> 2];
 do if (i13 & 128) {
  i1 = HEAP32[3256] | 0;
  if (!i1) {
   _SDL_SetError(41242, i3) | 0;
   break;
  }
  if ((HEAP32[i16 >> 2] | 0) != (i1 + 248 | 0)) {
   _SDL_SetError(41324, i4) | 0;
   break;
  }
  if ((HEAP32[i16 + 48 >> 2] & 128 | 0) == 0 ? (i2 = HEAP32[i1 + 68 >> 2] | 0, (i2 | 0) != 0) : 0) FUNCTION_TABLE_vii[i2 & 127](i1, i16);
 } while (0);
 do if (i13 & 64) {
  i1 = HEAP32[3256] | 0;
  if (!i1) {
   _SDL_SetError(41242, i7) | 0;
   break;
  }
  if ((HEAP32[i16 >> 2] | 0) != (i1 + 248 | 0)) {
   _SDL_SetError(41324, i8) | 0;
   break;
  }
  if ((HEAP32[i16 + 48 >> 2] & 64 | 0) == 0 ? (_SDL_UpdateFullscreenMode(i16, 0), i5 = HEAP32[3256] | 0, i6 = HEAP32[i5 + 72 >> 2] | 0, (i6 | 0) != 0) : 0) FUNCTION_TABLE_vii[i6 & 127](i5, i16);
 } while (0);
 do if (i13 & 1) {
  i1 = HEAP32[3256] | 0;
  if (!i1) {
   _SDL_SetError(41242, i9) | 0;
   break;
  }
  if ((HEAP32[i16 >> 2] | 0) != (i1 + 248 | 0)) {
   _SDL_SetError(41324, i10) | 0;
   break;
  }
  i1 = i13 & 4097;
  i2 = i16 + 48 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) != (i3 & 4097 | 0)) {
   HEAP32[i2 >> 2] = i3 & -4098 | i1;
   _SDL_UpdateFullscreenMode(i16, (i3 & 68 | 0) == 4 & 1);
  }
 } while (0);
 do if (i13 & 256) {
  i3 = HEAP32[3256] | 0;
  if (!i3) {
   _SDL_SetError(41242, i11) | 0;
   break;
  }
  if ((HEAP32[i16 >> 2] | 0) != (i3 + 248 | 0)) {
   _SDL_SetError(41324, i12) | 0;
   break;
  }
  i1 = i16 + 48 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if ((i2 & 256 | 0) == 0 ? (HEAP32[i1 >> 2] = i2 | 256, (HEAP32[i3 + 96 >> 2] | 0) != 0) : 0) {
   i11 = HEAP32[(_SDL_GetMouse() | 0) + 76 >> 2] | 0;
   i12 = HEAP32[i1 >> 2] | 0;
   i10 = HEAP32[3256] | 0;
   FUNCTION_TABLE_viii[HEAP32[i10 + 96 >> 2] & 31](i10, i16, ((i12 & 256 | i11 | 0) == 0 | i12 >>> 9 & 1 ^ 1) ^ 1);
  }
 } while (0);
 if (i13 & 8) {
  STACKTOP = i17;
  return;
 }
 i2 = HEAP32[3256] | 0;
 if (!i2) {
  _SDL_SetError(41242, i14) | 0;
  STACKTOP = i17;
  return;
 }
 if ((HEAP32[i16 >> 2] | 0) != (i2 + 248 | 0)) {
  _SDL_SetError(41324, i15) | 0;
  STACKTOP = i17;
  return;
 }
 if (HEAP32[i16 + 48 >> 2] & 4) {
  STACKTOP = i17;
  return;
 }
 i1 = HEAP32[i2 + 56 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vii[i1 & 127](i2, i16);
 _SDL_SendWindowEvent(i16, 1, 0, 0) | 0;
 STACKTOP = i17;
 return;
}

function _Blit16to16SurfaceAlpha128(i3, i20) {
 i3 = i3 | 0;
 i20 = i20 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0;
 i11 = HEAP32[i3 + 24 >> 2] | 0;
 i1 = HEAP32[i3 + 28 >> 2] | 0;
 i18 = HEAP32[i3 + 16 >> 2] >> 1;
 i19 = HEAP32[i3 + 36 >> 2] >> 1;
 if (!i1) return;
 i12 = i20 & 65535;
 i13 = i12 ^ 65535;
 i14 = i11 + -1 | 0;
 i15 = i12 << 16 | i12;
 i16 = ~i15;
 i17 = i18 + -1 | 0;
 i2 = HEAP32[i3 + 20 >> 2] | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 while (1) {
  i1 = i1 + -1 | 0;
  i4 = i3;
  i5 = i2;
  if (!((i4 ^ i5) & 2)) {
   if (!(i4 & 2)) i4 = i11; else {
    i4 = HEAP16[i2 >> 1] | 0;
    i10 = HEAP16[i3 >> 1] | 0;
    HEAP16[i2 >> 1] = (((i10 & i20 & 65535) + (i4 & i20 & 65535) | 0) >>> 1) + (i10 & i4 & 65535 & i13);
    i2 = i2 + 2 | 0;
    i3 = i3 + 2 | 0;
    i4 = i14;
   }
   if ((i4 | 0) > 1) {
    i7 = i4 + -2 | 0;
    i8 = i7 & -2;
    i5 = i2;
    i6 = i3;
    while (1) {
     i9 = HEAP32[i6 >> 2] | 0;
     i10 = HEAP32[i5 >> 2] | 0;
     HEAP32[i5 >> 2] = ((i10 & i15) >>> 1) + ((i9 & i15) >>> 1) + (i9 & i16 & i10);
     i4 = i4 + -2 | 0;
     if ((i4 | 0) <= 1) break; else {
      i5 = i5 + 4 | 0;
      i6 = i6 + 4 | 0;
     }
    }
    i2 = i2 + (i8 + 2 << 1) | 0;
    i3 = i3 + (i8 + 2 << 1) | 0;
    i4 = i7 - i8 | 0;
   }
   if (i4) {
    i10 = HEAP16[i2 >> 1] | 0;
    i9 = HEAP16[i3 >> 1] | 0;
    HEAP16[i2 >> 1] = (((i9 & i20 & 65535) + (i10 & i20 & 65535) | 0) >>> 1) + (i9 & i10 & 65535 & i13);
    i2 = i2 + 2 | 0;
    i3 = i3 + 2 | 0;
   }
   i3 = i3 + (i18 << 1) | 0;
  } else {
   if (!(i5 & 2)) i4 = i11; else {
    i4 = HEAP16[i2 >> 1] | 0;
    i10 = HEAP16[i3 >> 1] | 0;
    HEAP16[i2 >> 1] = (((i10 & i20 & 65535) + (i4 & i20 & 65535) | 0) >>> 1) + (i10 & i4 & 65535 & i13);
    i2 = i2 + 2 | 0;
    i3 = i3 + 2 | 0;
    i4 = i14;
   }
   i6 = i3 + 2 | 0;
   i5 = HEAP32[i3 + -2 >> 2] | 0;
   if ((i4 | 0) > 1) {
    i9 = i4 + -2 | 0;
    i10 = i9 & -2;
    i8 = i2;
    i7 = i5;
    while (1) {
     i5 = HEAP32[i6 >> 2] | 0;
     i21 = HEAP32[i8 >> 2] | 0;
     i7 = i5 << 16 | i7 >>> 16;
     HEAP32[i8 >> 2] = ((i7 & i15) >>> 1) + ((i21 & i15) >>> 1) + (i21 & i16 & i7);
     i4 = i4 + -2 | 0;
     if ((i4 | 0) <= 1) {
      i4 = i5;
      break;
     } else {
      i8 = i8 + 4 | 0;
      i7 = i5;
      i6 = i6 + 4 | 0;
     }
    }
    i6 = i10 + 3 | 0;
    i7 = i6;
    i2 = i2 + (i10 + 2 << 1) | 0;
    i5 = i4;
    i6 = i3 + (i6 << 1) | 0;
    i4 = i9 - i10 | 0;
   } else i7 = 1;
   if (!i4) i3 = i6; else {
    i21 = HEAP16[i2 >> 1] | 0;
    i10 = i5 >>> 16;
    HEAP16[i2 >> 1] = (((i21 & i20 & 65535) + (i10 & i12) | 0) >>> 1) + (i10 & i13 & (i21 & 65535));
    i2 = i2 + 2 | 0;
    i3 = i3 + (i7 + 1 << 1) | 0;
   }
   i3 = i3 + (i17 << 1) | 0;
  }
  if (!i1) break; else i2 = i2 + (i19 << 1) | 0;
 }
 return;
}

function __ZNSt3__112__hash_tableINS_17__hash_value_typeI6ActioniEENS_22__unordered_map_hasherIS2_S3_13EnumClassHashLb1EEENS_21__unordered_map_equalIS2_S3_NS_8equal_toIS2_EELb1EEENS_9allocatorIS3_EEE8__rehashEj(i12, i11) {
 i12 = i12 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i2 = i12 + 4 | 0;
 if (!i11) {
  i1 = HEAP32[i12 >> 2] | 0;
  HEAP32[i12 >> 2] = 0;
  if (i1) __ZdlPv(i1);
  HEAP32[i2 >> 2] = 0;
  return;
 }
 i10 = __Znwj(i11 << 2) | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 HEAP32[i12 >> 2] = i10;
 if (i1) __ZdlPv(i1);
 HEAP32[i2 >> 2] = i11;
 i1 = 0;
 do {
  HEAP32[(HEAP32[i12 >> 2] | 0) + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != (i11 | 0));
 i2 = i12 + 8 | 0;
 i5 = HEAP32[i2 >> 2] | 0;
 if (!i5) return;
 i1 = HEAP32[i5 + 4 >> 2] | 0;
 i9 = i11 + -1 | 0;
 i10 = (i9 & i11 | 0) == 0;
 if (i10) i3 = i1 & i9; else i3 = (i1 >>> 0) % (i11 >>> 0) | 0;
 HEAP32[(HEAP32[i12 >> 2] | 0) + (i3 << 2) >> 2] = i2;
 i1 = HEAP32[i5 >> 2] | 0;
 if (!i1) return; else {
  i6 = i5;
  i4 = i1;
  i2 = i5;
 }
 L23 : while (1) {
  i8 = i6;
  L25 : while (1) {
   L27 : do if (i10) {
    i1 = i4;
    while (1) {
     i7 = HEAP32[i1 + 4 >> 2] & i9;
     if ((i7 | 0) == (i3 | 0)) break L27;
     i4 = (HEAP32[i12 >> 2] | 0) + (i7 << 2) | 0;
     if (!(HEAP32[i4 >> 2] | 0)) {
      i3 = i7;
      break L25;
     }
     i6 = i1 + 8 | 0;
     i4 = i1;
     while (1) {
      i5 = HEAP32[i4 >> 2] | 0;
      if (!i5) break;
      if ((HEAP32[i6 >> 2] | 0) == (HEAP32[i5 + 8 >> 2] | 0)) i4 = i5; else break;
     }
     HEAP32[i2 >> 2] = i5;
     HEAP32[i4 >> 2] = HEAP32[HEAP32[(HEAP32[i12 >> 2] | 0) + (i7 << 2) >> 2] >> 2];
     HEAP32[HEAP32[(HEAP32[i12 >> 2] | 0) + (i7 << 2) >> 2] >> 2] = i1;
     i1 = HEAP32[i8 >> 2] | 0;
     if (!i1) {
      i1 = 30;
      break L23;
     }
    }
   } else {
    i1 = i4;
    while (1) {
     i7 = ((HEAP32[i1 + 4 >> 2] | 0) >>> 0) % (i11 >>> 0) | 0;
     if ((i7 | 0) == (i3 | 0)) break L27;
     i4 = (HEAP32[i12 >> 2] | 0) + (i7 << 2) | 0;
     if (!(HEAP32[i4 >> 2] | 0)) {
      i3 = i7;
      break L25;
     }
     i6 = i1 + 8 | 0;
     i4 = i1;
     while (1) {
      i5 = HEAP32[i4 >> 2] | 0;
      if (!i5) break;
      if ((HEAP32[i6 >> 2] | 0) == (HEAP32[i5 + 8 >> 2] | 0)) i4 = i5; else break;
     }
     HEAP32[i2 >> 2] = i5;
     HEAP32[i4 >> 2] = HEAP32[HEAP32[(HEAP32[i12 >> 2] | 0) + (i7 << 2) >> 2] >> 2];
     HEAP32[HEAP32[(HEAP32[i12 >> 2] | 0) + (i7 << 2) >> 2] >> 2] = i1;
     i1 = HEAP32[i8 >> 2] | 0;
     if (!i1) {
      i1 = 30;
      break L23;
     }
    }
   } while (0);
   i4 = HEAP32[i1 >> 2] | 0;
   if (!i4) {
    i1 = 30;
    break L23;
   } else {
    i8 = i1;
    i2 = i1;
   }
  }
  HEAP32[i4 >> 2] = i2;
  i4 = HEAP32[i1 >> 2] | 0;
  if (!i4) {
   i1 = 30;
   break;
  } else {
   i6 = i1;
   i2 = i1;
  }
 }
 if ((i1 | 0) == 30) return;
}

function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2760] | 0) == 0 ? (___cxa_guard_acquire(2760) | 0) != 0 : 0) {
  if ((HEAP8[2768] | 0) == 0 ? (___cxa_guard_acquire(2768) | 0) != 0 : 0) {
   i1 = 32180;
   do {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    i1 = i1 + 12 | 0;
   } while ((i1 | 0) != 32468);
   ___cxa_atexit(353, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(2768);
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(32180, 32468) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(32192, 32500) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(32204, 32536) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(32216, 32560) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(32228, 32584) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(32240, 32600) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(32252, 32620) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(32264, 32640) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(32276, 32668) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(32288, 32708) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(32300, 32740) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(32312, 32776) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(32324, 32812) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(32336, 32828) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(32348, 32844) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(32360, 32860) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(32372, 32584) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(32384, 32876) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(32396, 32892) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(32408, 32908) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(32420, 32924) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(32432, 32940) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(32444, 32956) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(32456, 32972) | 0;
  HEAP32[8247] = 32180;
  ___cxa_guard_release(2760);
 }
 return HEAP32[8247] | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2744] | 0) == 0 ? (___cxa_guard_acquire(2744) | 0) != 0 : 0) {
  if ((HEAP8[2752] | 0) == 0 ? (___cxa_guard_acquire(2752) | 0) != 0 : 0) {
   i1 = 31888;
   do {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    i1 = i1 + 12 | 0;
   } while ((i1 | 0) != 32176);
   ___cxa_atexit(352, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(2752);
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(31888, 63154) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(31900, 63162) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(31912, 63171) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(31924, 63177) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(31936, 63183) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(31948, 63187) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(31960, 63192) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(31972, 63197) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(31984, 63204) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(31996, 63214) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(32008, 63222) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(32020, 63231) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(32032, 63240) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(32044, 63244) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(32056, 63248) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(32068, 63252) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(32080, 63183) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(32092, 63256) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(32104, 63260) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(32116, 63264) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(32128, 63268) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(32140, 63272) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(32152, 63276) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(32164, 63280) | 0;
  HEAP32[8044] = 31888;
  ___cxa_guard_release(2744);
 }
 return HEAP32[8044] | 0;
}

function __ZNSt3__112__hash_tableINS_17__hash_value_typeI6ActioniEENS_22__unordered_map_hasherIS2_S3_13EnumClassHashLb1EEENS_21__unordered_map_equalIS2_S3_NS_8equal_toIS2_EELb1EEENS_9allocatorIS3_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS3_PvEE(i14, i13, i12) {
 i14 = i14 | 0;
 i13 = i13 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, d4 = 0.0, d5 = 0.0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = HEAP32[i12 + 8 >> 2] | 0;
 i11 = i12 + 4 | 0;
 HEAP32[i11 >> 2] = i7;
 i9 = i13 + 4 | 0;
 i10 = HEAP32[i9 >> 2] | 0;
 i8 = (i10 | 0) == 0;
 L1 : do if (!i8) {
  i6 = i10 + -1 | 0;
  i3 = (i6 & i10 | 0) == 0;
  if (i3) i2 = i6 & i7; else i2 = (i7 >>> 0) % (i10 >>> 0) | 0;
  i1 = HEAP32[(HEAP32[i13 >> 2] | 0) + (i2 << 2) >> 2] | 0;
  if (i1) if (i3) {
   while (1) {
    i1 = HEAP32[i1 >> 2] | 0;
    if (!i1) break L1;
    if ((HEAP32[i1 + 4 >> 2] & i6 | 0) != (i2 | 0)) break L1;
    if ((HEAP32[i1 + 8 >> 2] | 0) == (i7 | 0)) {
     i2 = 0;
     break;
    }
   }
   i13 = i1;
   HEAP32[i14 >> 2] = i13;
   i14 = i14 + 4 | 0;
   HEAP8[i14 >> 0] = i2;
   return;
  } else {
   while (1) {
    i1 = HEAP32[i1 >> 2] | 0;
    if (!i1) break L1;
    if ((((HEAP32[i1 + 4 >> 2] | 0) >>> 0) % (i10 >>> 0) | 0 | 0) != (i2 | 0)) break L1;
    if ((HEAP32[i1 + 8 >> 2] | 0) == (i7 | 0)) {
     i2 = 0;
     break;
    }
   }
   i13 = i1;
   HEAP32[i14 >> 2] = i13;
   i14 = i14 + 4 | 0;
   HEAP8[i14 >> 0] = i2;
   return;
  }
 } else i2 = 0; while (0);
 i7 = i13 + 12 | 0;
 d4 = +(((HEAP32[i7 >> 2] | 0) + 1 | 0) >>> 0);
 d5 = +HEAPF32[i13 + 16 >> 2];
 do if (i8 | d4 > +(i10 >>> 0) * d5) {
  if (i10 >>> 0 > 2) i1 = (i10 + -1 & i10 | 0) == 0; else i1 = 0;
  i3 = (i1 & 1 | i10 << 1) ^ 1;
  i1 = ~~+Math_ceil(+(d4 / d5)) >>> 0;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeI6ActioniEENS_22__unordered_map_hasherIS2_S3_13EnumClassHashLb1EEENS_21__unordered_map_equalIS2_S3_NS_8equal_toIS2_EELb1EEENS_9allocatorIS3_EEE6rehashEj(i13, i3 >>> 0 < i1 >>> 0 ? i1 : i3);
  i3 = HEAP32[i9 >> 2] | 0;
  i1 = HEAP32[i11 >> 2] | 0;
  i2 = i3 + -1 | 0;
  if (!(i2 & i3)) {
   i6 = i3;
   i2 = i2 & i1;
   break;
  } else {
   i6 = i3;
   i2 = (i1 >>> 0) % (i3 >>> 0) | 0;
   break;
  }
 } else i6 = i10; while (0);
 i1 = HEAP32[(HEAP32[i13 >> 2] | 0) + (i2 << 2) >> 2] | 0;
 if (!i1) {
  i1 = i13 + 8 | 0;
  HEAP32[i12 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i1 >> 2] = i12;
  HEAP32[(HEAP32[i13 >> 2] | 0) + (i2 << 2) >> 2] = i1;
  i1 = HEAP32[i12 >> 2] | 0;
  if (i1) {
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   i2 = i6 + -1 | 0;
   if (!(i2 & i6)) i1 = i1 & i2; else i1 = (i1 >>> 0) % (i6 >>> 0) | 0;
   HEAP32[(HEAP32[i13 >> 2] | 0) + (i1 << 2) >> 2] = i12;
  }
 } else {
  HEAP32[i12 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i1 >> 2] = i12;
 }
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 i13 = 1;
 HEAP32[i14 >> 2] = i12;
 i14 = i14 + 4 | 0;
 HEAP8[i14 >> 0] = i13;
 return;
}

function _Blit1to2Key(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i1 = HEAP32[i3 + 24 >> 2] | 0;
 i2 = HEAP32[i3 + 28 >> 2] | 0;
 i10 = HEAP32[i3 + 16 >> 2] | 0;
 i11 = HEAP32[i3 + 48 >> 2] | 0;
 i7 = HEAP32[i3 + 56 >> 2] | 0;
 i8 = (HEAP32[i3 + 36 >> 2] | 0) / 2 | 0;
 if (!i2) return;
 i9 = (i1 + 7 | 0) / 8 | 0;
 i6 = i1 & 7;
 i1 = HEAP32[i3 + 20 >> 2] | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 L4 : while (1) {
  i2 = i2 + -1 | 0;
  switch (i6 | 0) {
  case 0:
   {
    i5 = i9;
    i3 = 4;
    break;
   }
  case 7:
   {
    i5 = i9;
    i3 = 7;
    break;
   }
  case 6:
   {
    i5 = i9;
    i3 = 10;
    break;
   }
  case 5:
   {
    i5 = i9;
    i3 = 13;
    break;
   }
  case 4:
   {
    i5 = i9;
    i3 = 16;
    break;
   }
  case 3:
   {
    i5 = i9;
    i3 = 19;
    break;
   }
  case 2:
   {
    i5 = i9;
    i3 = 22;
    break;
   }
  case 1:
   {
    i5 = i9;
    i3 = 25;
    break;
   }
  default:
   i3 = 28;
  }
  while (1) if ((i3 | 0) == 4) {
   i3 = HEAPU8[i4 >> 0] | 0;
   if ((i3 | 0) != (i7 | 0)) HEAP16[i1 >> 1] = HEAP16[i11 + (i3 << 1) >> 1] | 0;
   i1 = i1 + 2 | 0;
   i4 = i4 + 1 | 0;
   i3 = 7;
   continue;
  } else if ((i3 | 0) == 7) {
   i3 = HEAPU8[i4 >> 0] | 0;
   if ((i3 | 0) != (i7 | 0)) HEAP16[i1 >> 1] = HEAP16[i11 + (i3 << 1) >> 1] | 0;
   i1 = i1 + 2 | 0;
   i4 = i4 + 1 | 0;
   i3 = 10;
   continue;
  } else if ((i3 | 0) == 10) {
   i3 = HEAPU8[i4 >> 0] | 0;
   if ((i3 | 0) != (i7 | 0)) HEAP16[i1 >> 1] = HEAP16[i11 + (i3 << 1) >> 1] | 0;
   i1 = i1 + 2 | 0;
   i4 = i4 + 1 | 0;
   i3 = 13;
   continue;
  } else if ((i3 | 0) == 13) {
   i3 = HEAPU8[i4 >> 0] | 0;
   if ((i3 | 0) != (i7 | 0)) HEAP16[i1 >> 1] = HEAP16[i11 + (i3 << 1) >> 1] | 0;
   i1 = i1 + 2 | 0;
   i4 = i4 + 1 | 0;
   i3 = 16;
   continue;
  } else if ((i3 | 0) == 16) {
   i3 = HEAPU8[i4 >> 0] | 0;
   if ((i3 | 0) != (i7 | 0)) HEAP16[i1 >> 1] = HEAP16[i11 + (i3 << 1) >> 1] | 0;
   i1 = i1 + 2 | 0;
   i4 = i4 + 1 | 0;
   i3 = 19;
   continue;
  } else if ((i3 | 0) == 19) {
   i3 = HEAPU8[i4 >> 0] | 0;
   if ((i3 | 0) != (i7 | 0)) HEAP16[i1 >> 1] = HEAP16[i11 + (i3 << 1) >> 1] | 0;
   i1 = i1 + 2 | 0;
   i4 = i4 + 1 | 0;
   i3 = 22;
   continue;
  } else if ((i3 | 0) == 22) {
   i3 = HEAPU8[i4 >> 0] | 0;
   if ((i3 | 0) != (i7 | 0)) HEAP16[i1 >> 1] = HEAP16[i11 + (i3 << 1) >> 1] | 0;
   i1 = i1 + 2 | 0;
   i4 = i4 + 1 | 0;
   i3 = 25;
   continue;
  } else if ((i3 | 0) == 25) {
   i3 = HEAPU8[i4 >> 0] | 0;
   if ((i3 | 0) != (i7 | 0)) HEAP16[i1 >> 1] = HEAP16[i11 + (i3 << 1) >> 1] | 0;
   i4 = i4 + 1 | 0;
   i1 = i1 + 2 | 0;
   if ((i5 | 0) > 1) {
    i5 = i5 + -1 | 0;
    i3 = 4;
    continue;
   } else {
    i3 = 28;
    continue;
   }
  } else if ((i3 | 0) == 28) if (!i2) break L4; else {
   i1 = i1 + (i8 << 1) | 0;
   i4 = i4 + i10 | 0;
   continue L4;
  }
 }
 return;
}

function __ZNSt3__18ios_base4InitC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = HEAP32[5786] | 0;
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(27908, i2, 27964);
 HEAP32[6807] = 29116;
 HEAP32[6809] = 29136;
 HEAP32[6808] = 0;
 i4 = HEAP32[7276] | 0;
 __ZNSt3__18ios_base4initEPv(27228 + i4 | 0, 27908);
 HEAP32[27228 + (i4 + 72) >> 2] = 0;
 HEAP32[27228 + (i4 + 76) >> 2] = -1;
 i4 = HEAP32[5787] | 0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(28012, i4, 27972);
 HEAP32[6829] = 29196;
 HEAP32[6830] = 29216;
 i7 = HEAP32[7296] | 0;
 __ZNSt3__18ios_base4initEPv(27316 + i7 | 0, 28012);
 i5 = i7 + 72 | 0;
 HEAP32[27316 + i5 >> 2] = 0;
 i1 = i7 + 76 | 0;
 HEAP32[27316 + i1 >> 2] = -1;
 i3 = HEAP32[5785] | 0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(28060, i3, 27980);
 HEAP32[6850] = 29196;
 HEAP32[6851] = 29216;
 __ZNSt3__18ios_base4initEPv(27400 + i7 | 0, 28060);
 HEAP32[27400 + i5 >> 2] = 0;
 HEAP32[27400 + i1 >> 2] = -1;
 i6 = HEAP32[27400 + ((HEAP32[(HEAP32[6850] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
 HEAP32[6871] = 29196;
 HEAP32[6872] = 29216;
 __ZNSt3__18ios_base4initEPv(27484 + i7 | 0, i6);
 HEAP32[27484 + i5 >> 2] = 0;
 HEAP32[27484 + i1 >> 2] = -1;
 HEAP32[27228 + ((HEAP32[(HEAP32[6807] | 0) + -12 >> 2] | 0) + 72) >> 2] = 27316;
 i1 = 27400 + ((HEAP32[(HEAP32[6850] | 0) + -12 >> 2] | 0) + 4) | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 8192;
 HEAP32[27400 + ((HEAP32[(HEAP32[6850] | 0) + -12 >> 2] | 0) + 72) >> 2] = 27316;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(28108, i2, 27988);
 HEAP32[6892] = 29156;
 HEAP32[6894] = 29176;
 HEAP32[6893] = 0;
 i2 = HEAP32[7286] | 0;
 __ZNSt3__18ios_base4initEPv(27568 + i2 | 0, 28108);
 HEAP32[27568 + (i2 + 72) >> 2] = 0;
 HEAP32[27568 + (i2 + 76) >> 2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(28164, i4, 27996);
 HEAP32[6914] = 29236;
 HEAP32[6915] = 29256;
 i4 = HEAP32[7306] | 0;
 __ZNSt3__18ios_base4initEPv(27656 + i4 | 0, 28164);
 i2 = i4 + 72 | 0;
 HEAP32[27656 + i2 >> 2] = 0;
 i1 = i4 + 76 | 0;
 HEAP32[27656 + i1 >> 2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(28212, i3, 28004);
 HEAP32[6935] = 29236;
 HEAP32[6936] = 29256;
 __ZNSt3__18ios_base4initEPv(27740 + i4 | 0, 28212);
 HEAP32[27740 + i2 >> 2] = 0;
 HEAP32[27740 + i1 >> 2] = -1;
 i3 = HEAP32[27740 + ((HEAP32[(HEAP32[6935] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
 HEAP32[6956] = 29236;
 HEAP32[6957] = 29256;
 __ZNSt3__18ios_base4initEPv(27824 + i4 | 0, i3);
 HEAP32[27824 + i2 >> 2] = 0;
 HEAP32[27824 + i1 >> 2] = -1;
 HEAP32[27568 + ((HEAP32[(HEAP32[6892] | 0) + -12 >> 2] | 0) + 72) >> 2] = 27656;
 i1 = 27740 + ((HEAP32[(HEAP32[6935] | 0) + -12 >> 2] | 0) + 4) | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 8192;
 HEAP32[27740 + ((HEAP32[(HEAP32[6935] | 0) + -12 >> 2] | 0) + 72) >> 2] = 27656;
 return;
}

function _GLES2_SetDrawingState(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i1 = i5 + 316 | 0;
 i14 = HEAP32[i1 >> 2] | 0;
 i4 = HEAP32[i5 + 312 >> 2] | 0;
 i3 = HEAP32[i14 >> 2] | 0;
 if ((HEAP32[3491] | 0) != (i3 | 0)) {
  HEAP32[i14 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i5 + 188 >> 2] | 0, i3) | 0) >= 0) {
   HEAP32[3491] = HEAP32[i14 >> 2];
   _GLES2_UpdateViewport(i5) | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   i6 = 4;
  }
 } else {
  i2 = i14;
  i6 = 4;
 }
 if ((i6 | 0) == 4 ? (HEAP32[i2 + 4 >> 2] | 0) != 0 : 0) {
  i1 = i2 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 7]() | 0) != 0);
 }
 i1 = i14 + 8 | 0;
 if ((HEAP32[i1 >> 2] | 0) != (i4 | 0)) {
  switch (i4 | 0) {
  case 4:
   {
    FUNCTION_TABLE_vi[HEAP32[i14 + 80 >> 2] & 511](3042);
    FUNCTION_TABLE_viiii[HEAP32[i14 + 32 >> 2] & 63](0, 768, 0, 1);
    break;
   }
  case 1:
   {
    FUNCTION_TABLE_vi[HEAP32[i14 + 80 >> 2] & 511](3042);
    FUNCTION_TABLE_viiii[HEAP32[i14 + 32 >> 2] & 63](770, 771, 1, 771);
    break;
   }
  case 2:
   {
    FUNCTION_TABLE_vi[HEAP32[i14 + 80 >> 2] & 511](3042);
    FUNCTION_TABLE_viiii[HEAP32[i14 + 32 >> 2] & 63](770, 1, 0, 1);
    break;
   }
  default:
   FUNCTION_TABLE_vi[HEAP32[i14 + 68 >> 2] & 511](3042);
  }
  HEAP32[i1 >> 2] = i4;
 }
 i1 = i14 + 12 | 0;
 if (HEAP32[i1 >> 2] | 0) {
  FUNCTION_TABLE_vi[HEAP32[i14 + 72 >> 2] & 511](1);
  HEAP32[i1 >> 2] = 0;
 }
 if ((_GLES2_SelectProgram(i5, 0, i4) | 0) < 0) {
  i14 = -1;
  return i14 | 0;
 }
 i12 = HEAP8[i5 + 309 >> 0] | 0;
 i13 = HEAP8[i5 + 311 >> 0] | 0;
 i1 = HEAP32[i5 + 304 >> 2] | 0;
 L25 : do if (!i1) i6 = 20; else {
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  if ((i1 | 0) < 372645892) switch (i1 | 0) {
  case 370546692:
   break;
  default:
   {
    i6 = 20;
    break L25;
   }
  } else switch (i1 | 0) {
  case 372645892:
   break;
  default:
   {
    i6 = 20;
    break L25;
   }
  }
  i1 = i5 + 308 | 0;
  i2 = i5 + 310 | 0;
 } while (0);
 if ((i6 | 0) == 20) {
  i1 = i5 + 310 | 0;
  i2 = i5 + 308 | 0;
 }
 i11 = HEAP8[i1 >> 0] | 0;
 i10 = HEAP8[i2 >> 0] | 0;
 i1 = HEAP32[i14 + 268 >> 2] | 0;
 i2 = i1 + 80 | 0;
 i3 = i1 + 81 | 0;
 i4 = i1 + 82 | 0;
 i5 = i1 + 83 | 0;
 i6 = i10 & 255;
 i7 = i12 & 255;
 i8 = i11 & 255;
 i9 = i13 & 255;
 if (((HEAPU8[i3 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i5 >> 0] | 0) | 0) == (i9 | i7 << 16 | i8 << 8 | i6 << 24 | 0)) {
  i14 = 0;
  return i14 | 0;
 }
 FUNCTION_TABLE_vidddd[HEAP32[i14 + 172 >> 2] & 3](HEAP32[i1 + 28 >> 2] | 0, +(i6 | 0) * .003921568859368563, +(i7 | 0) * .003921568859368563, +(i8 | 0) * .003921568859368563, +(i9 | 0) * .003921568859368563);
 HEAP8[i2 >> 0] = i10;
 HEAP8[i3 >> 0] = i12;
 HEAP8[i4 >> 0] = i11;
 HEAP8[i5 >> 0] = i13;
 i14 = 0;
 return i14 | 0;
}

function _SDL_PrivateSendMouseMotion(i8, i15, i5, i6, i7) {
 i8 = i8 | 0;
 i15 = i15 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i1 = i16 + 68 | 0;
 i2 = i16 + 64 | 0;
 i10 = i16 + 60 | 0;
 i11 = i16 + 56 | 0;
 i14 = i16;
 do if (HEAP32[3025] | 0) {
  HEAP32[i1 >> 2] = 0;
  HEAP32[i2 >> 2] = 0;
  _SDL_GetWindowSize(i8, i1, i2);
  i4 = (HEAP32[i1 >> 2] | 0) / 2 | 0;
  HEAP32[i1 >> 2] = i4;
  i3 = (HEAP32[i2 >> 2] | 0) / 2 | 0;
  HEAP32[i2 >> 2] = i3;
  if ((i4 | 0) == (i6 | 0) & (i3 | 0) == (i7 | 0)) {
   HEAP32[3021] = i6;
   HEAP32[3022] = i7;
   i15 = 0;
   STACKTOP = i16;
   return i15 | 0;
  }
  i2 = (i8 | 0) == 0 ? HEAP32[3016] | 0 : i8;
  if (i2) {
   i1 = HEAP32[3010] | 0;
   if (i1) {
    FUNCTION_TABLE_viii[i1 & 31](i2, i4, i3);
    break;
   }
   i1 = HEAP32[3015] | 0;
   if (_SDL_UpdateMouseFocus(i2, i4, i3) | 0) _SDL_PrivateSendMouseMotion(i2, i1, 0, i4, i3) | 0;
  }
 } while (0);
 i1 = HEAP32[3021] | 0;
 if (!i5) {
  i5 = i7;
  i9 = i6;
  i6 = i6 - i1 | 0;
  i4 = i7 - (HEAP32[3022] | 0) | 0;
 } else {
  i5 = (HEAP32[3022] | 0) + i7 | 0;
  i9 = i1 + i6 | 0;
  i4 = i7;
 }
 if (!(i4 | i6)) {
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 if (!(HEAP32[3024] | 0)) {
  HEAP32[3017] = i9;
  i1 = i5;
 } else {
  HEAP32[3017] = (HEAP32[3017] | 0) + i6;
  i1 = (HEAP32[3018] | 0) + i4 | 0;
 }
 HEAP32[3018] = i1;
 if ((i8 | 0) != 0 ? (HEAP32[i8 + 48 >> 2] & 16384 | 0) == 0 : 0) {
  HEAP32[i10 >> 2] = 0;
  HEAP32[i11 >> 2] = 0;
  _SDL_GetWindowSize(HEAP32[3016] | 0, i10, i11);
  i2 = (HEAP32[i10 >> 2] | 0) + -1 | 0;
  HEAP32[i10 >> 2] = i2;
  i1 = (HEAP32[i11 >> 2] | 0) + -1 | 0;
  HEAP32[i11 >> 2] = i1;
  i3 = HEAP32[3017] | 0;
  if ((i3 | 0) > (i2 | 0)) HEAP32[3017] = i2; else i2 = i3;
  if ((i2 | 0) < 0) HEAP32[3017] = 0;
  i2 = HEAP32[3018] | 0;
  if ((i2 | 0) > (i1 | 0)) HEAP32[3018] = i1; else i1 = i2;
  if ((i1 | 0) < 0) HEAP32[3018] = 0;
 }
 HEAP32[3019] = (HEAP32[3019] | 0) + i6;
 HEAP32[3020] = (HEAP32[3020] | 0) + i4;
 if (((HEAP32[3031] | 0) != 0 & (HEAP32[3024] | 0) == 0 ? (i12 = HEAP32[3008] | 0, (i12 | 0) != 0) : 0) ? (i13 = HEAP32[3030] | 0, (i13 | 0) != 0) : 0) FUNCTION_TABLE_vi[i12 & 511](i13);
 if ((_SDL_EventState(1024, -1) | 0) << 24 >> 24 == 1) {
  HEAP32[i14 >> 2] = 1024;
  i1 = HEAP32[3016] | 0;
  if (!i1) i1 = 0; else i1 = HEAP32[i1 + 4 >> 2] | 0;
  HEAP32[i14 + 8 >> 2] = i1;
  HEAP32[i14 + 12 >> 2] = i15;
  HEAP32[i14 + 16 >> 2] = HEAP32[3023];
  HEAP32[i14 + 20 >> 2] = HEAP32[3017];
  HEAP32[i14 + 24 >> 2] = HEAP32[3018];
  HEAP32[i14 + 28 >> 2] = i6;
  HEAP32[i14 + 32 >> 2] = i4;
  i1 = (_SDL_PushEvent(i14) | 0) > 0 & 1;
 } else i1 = 0;
 HEAP32[3021] = i9;
 HEAP32[3022] = i5;
 i15 = i1;
 STACKTOP = i16;
 return i15 | 0;
}

function _SDL_GetClosestDisplayModeForDisplay(i14, i18, i21) {
 i14 = i14 | 0;
 i18 = i18 | 0;
 i21 = i21 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i22 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!((i18 | 0) != 0 & (i21 | 0) != 0)) {
  _SDL_SetError(48214, i22) | 0;
  i21 = 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 i1 = HEAP32[i18 >> 2] | 0;
 if (!i1) i1 = HEAP32[i14 + 16 >> 2] | 0;
 i20 = i18 + 12 | 0;
 i2 = HEAP32[i20 >> 2] | 0;
 if (!i2) i2 = HEAP32[i14 + 28 >> 2] | 0;
 i16 = i18 + 4 | 0;
 i10 = i14 + 8 | 0;
 i11 = i14 + 12 | 0;
 i12 = i1 >>> 8 & 255;
 i17 = i18 + 8 | 0;
 i3 = HEAP32[i10 >> 2] | 0;
 i13 = 0;
 i5 = 0;
 while (1) {
  if (!i3) {
   i3 = HEAP32[3256] | 0;
   i4 = HEAP32[i3 + 16 >> 2] | 0;
   if (!i4) i3 = 0; else {
    FUNCTION_TABLE_vii[i4 & 127](i3, i14);
    _SDL_qsort(HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0, 20, 28);
    i3 = HEAP32[i10 >> 2] | 0;
   }
  }
  if ((i13 | 0) >= (i3 | 0)) break;
  i8 = HEAP32[i11 >> 2] | 0;
  i9 = i8 + (i13 * 20 | 0) | 0;
  i4 = HEAP32[i8 + (i13 * 20 | 0) + 4 >> 2] | 0;
  i6 = (i4 | 0) == 0;
  if (!i6 ? (i4 | 0) < (HEAP32[i16 >> 2] | 0) : 0) break;
  i7 = HEAP32[i8 + (i13 * 20 | 0) + 8 >> 2] | 0;
  if ((i7 | 0) != 0 ? (i7 | 0) < (HEAP32[i17 >> 2] | 0) : 0) {
   if (!i6 ? (i4 | 0) == (HEAP32[i16 >> 2] | 0) : 0) break;
  } else i15 = 18;
  do if ((i15 | 0) == 18) {
   i15 = 0;
   if (((i5 | 0) != 0 ? (i4 | 0) >= (HEAP32[i5 + 4 >> 2] | 0) : 0) ? (i7 | 0) >= (HEAP32[i5 + 8 >> 2] | 0) : 0) {
    i4 = HEAP32[i9 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i5 >> 2] | 0)) {
     i8 = HEAP32[i8 + (i13 * 20 | 0) + 12 >> 2] | 0;
     i5 = ((i8 | 0) < (i2 | 0) ? 1 : (i8 | 0) == (HEAP32[i5 + 12 >> 2] | 0)) ? i5 : i9;
     break;
    }
    if ((i4 | 0) != (i1 | 0)) {
     if ((i4 >>> 8 & 255) >>> 0 < i12 >>> 0) break;
     if ((i4 ^ i1) & 251658240) break;
    }
    i5 = i9;
   } else i5 = i9;
  } while (0);
  i13 = i13 + 1 | 0;
 }
 if (!i5) {
  i21 = 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 i1 = HEAP32[i5 >> 2] | 0;
 if (!i1) i4 = HEAP32[i18 >> 2] | 0; else i4 = i1;
 HEAP32[i21 >> 2] = i4;
 i1 = HEAP32[i5 + 4 >> 2] | 0;
 if ((i1 | 0) != 0 ? (i19 = HEAP32[i5 + 8 >> 2] | 0, (i19 | 0) != 0) : 0) {
  HEAP32[i21 + 4 >> 2] = i1;
  HEAP32[i21 + 8 >> 2] = i19;
  i3 = i1;
  i2 = i19;
 } else {
  i3 = HEAP32[i16 >> 2] | 0;
  HEAP32[i21 + 4 >> 2] = i3;
  i2 = HEAP32[i17 >> 2] | 0;
  HEAP32[i21 + 8 >> 2] = i2;
 }
 i1 = HEAP32[i5 + 12 >> 2] | 0;
 if (!i1) i1 = HEAP32[i20 >> 2] | 0;
 HEAP32[i21 + 12 >> 2] = i1;
 HEAP32[i21 + 16 >> 2] = HEAP32[i5 + 16 >> 2];
 if (!i4) HEAP32[i21 >> 2] = 370546692;
 if (!i3) HEAP32[i21 + 4 >> 2] = 640;
 if (i2) {
  STACKTOP = i22;
  return i21 | 0;
 }
 HEAP32[i21 + 8 >> 2] = 480;
 STACKTOP = i22;
 return i21 | 0;
}

function _SDL_GetWindowDisplayIndex(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i12 = i14 + 16 | 0;
 i1 = i14 + 8 | 0;
 i10 = i14 + 40 | 0;
 i11 = i14 + 24 | 0;
 i2 = HEAP32[3256] | 0;
 if (!i2) {
  _SDL_SetError(41242, i14) | 0;
  i13 = -1;
  STACKTOP = i14;
  return i13 | 0;
 }
 if ((i7 | 0) != 0 ? (HEAP32[i7 >> 2] | 0) == (i2 + 248 | 0) : 0) {
  i6 = HEAP32[i7 + 16 >> 2] | 0;
  i1 = i6 & -65536;
  if ((i1 | 0) < 805240832) switch (i1 | 0) {
  case 536805376:
   {
    i13 = 7;
    break;
   }
  default:
   {}
  } else switch (i1 | 0) {
  case 805240832:
   {
    i13 = 7;
    break;
   }
  default:
   {}
  }
  if ((i13 | 0) == 7) {
   i13 = i6 & 65535;
   i13 = (i13 | 0) >= (HEAP32[i2 + 236 >> 2] | 0) ? 0 : i13;
   STACKTOP = i14;
   return i13 | 0;
  }
  i5 = HEAP32[i7 + 20 >> 2] | 0;
  i1 = i5 & -65536;
  if ((i1 | 0) < 805240832) switch (i1 | 0) {
  case 536805376:
   {
    i13 = 11;
    break;
   }
  default:
   {}
  } else switch (i1 | 0) {
  case 805240832:
   {
    i13 = 11;
    break;
   }
  default:
   {}
  }
  if ((i13 | 0) == 11) {
   i13 = i5 & 65535;
   i13 = (i13 | 0) >= (HEAP32[i2 + 236 >> 2] | 0) ? 0 : i13;
   STACKTOP = i14;
   return i13 | 0;
  }
  i3 = HEAP32[i2 + 236 >> 2] | 0;
  i4 = (i3 | 0) > 0;
  L22 : do if (i4) {
   i2 = HEAP32[i2 + 240 >> 2] | 0;
   i1 = 0;
   while (1) {
    if ((HEAP32[i2 + (i1 * 68 | 0) + 56 >> 2] | 0) == (i7 | 0)) break;
    i1 = i1 + 1 | 0;
    if ((i1 | 0) >= (i3 | 0)) break L22;
   }
   STACKTOP = i14;
   return i1 | 0;
  } while (0);
  HEAP32[i10 >> 2] = ((HEAP32[i7 + 24 >> 2] | 0) / 2 | 0) + i6;
  i9 = i10 + 4 | 0;
  HEAP32[i9 >> 2] = ((HEAP32[i7 + 28 >> 2] | 0) / 2 | 0) + i5;
  if (i4) {
   i3 = i11 + 8 | 0;
   i4 = i11 + 4 | 0;
   i5 = i11 + 12 | 0;
   i2 = -1;
   i8 = 2147483647;
   i1 = 0;
   while (1) {
    _SDL_GetDisplayBounds(i1, i11) | 0;
    if (_SDL_EnclosePoints(i10, 1, i11, 0) | 0) {
     i13 = 20;
     break;
    }
    i6 = (HEAP32[i10 >> 2] | 0) - (HEAP32[i11 >> 2] | 0) + ((HEAP32[i3 >> 2] | 0) / -2 | 0) | 0;
    i7 = (HEAP32[i9 >> 2] | 0) - (HEAP32[i4 >> 2] | 0) + ((HEAP32[i5 >> 2] | 0) / -2 | 0) | 0;
    i6 = (Math_imul(i7, i7) | 0) + (Math_imul(i6, i6) | 0) | 0;
    i7 = (i6 | 0) < (i8 | 0);
    i2 = i7 ? i1 : i2;
    i1 = i1 + 1 | 0;
    if ((i1 | 0) >= (HEAP32[(HEAP32[3256] | 0) + 236 >> 2] | 0)) {
     i1 = i2;
     break;
    } else i8 = i7 ? i6 : i8;
   }
   if ((i13 | 0) == 20) {
    STACKTOP = i14;
    return i1 | 0;
   }
   if ((i1 | 0) >= 0) {
    i13 = i1;
    STACKTOP = i14;
    return i13 | 0;
   }
  } else i1 = -1;
  _SDL_SetError(41339, i12) | 0;
  i13 = i1;
  STACKTOP = i14;
  return i13 | 0;
 }
 _SDL_SetError(41324, i1) | 0;
 i13 = -1;
 STACKTOP = i14;
 return i13 | 0;
}

function _SDL_Blit_RGBA8888_RGB888_Blend_Scale(i24) {
 i24 = i24 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0;
 i1 = HEAP32[i24 + 52 >> 2] | 0;
 i22 = i24 + 28 | 0;
 i25 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i24 + 8 >> 2] << 16 | 0) / (i25 | 0) | 0;
 i18 = i24 + 24 | 0;
 i3 = HEAP32[i18 >> 2] | 0;
 i19 = (HEAP32[i24 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i25 + -1 | 0;
 HEAP32[i22 >> 2] = i2;
 if (!i25) return;
 i25 = i24 + 20 | 0;
 i20 = i24 + 32 | 0;
 i21 = (i1 & 48 | 0) != 0;
 i16 = i1 & 112;
 i17 = i24 + 12 | 0;
 i14 = HEAP32[i25 >> 2] | 0;
 i5 = i14;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i15 = i1 + -65536 | 0;
   i13 = i15 >>> 16;
   i15 = i15 - (i13 << 16) | 0;
   i4 = i4 + 1 + i13 | 0;
  } else i15 = i1;
  if (!i3) i3 = i2; else {
   i13 = i5;
   i1 = 65536;
   i2 = 0;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i5 = i5 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i24 >> 2] | 0) + ((Math_imul(HEAP32[i17 >> 2] | 0, i4) | 0) + (i5 << 2)) | 0;
    }
    i11 = HEAP32[i2 >> 2] | 0;
    i10 = i11 >>> 24;
    i9 = i11 >>> 16 & 255;
    i8 = i11 >>> 8 & 255;
    i11 = i11 & 255;
    i12 = HEAP32[i13 >> 2] | 0;
    i6 = i12 >>> 16 & 255;
    i7 = i12 >>> 8 & 255;
    i12 = i12 & 255;
    if (i21 & (i11 | 0) != 255) {
     i8 = ((Math_imul(i8, i11) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i11) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i11) | 0) >>> 0) / 255 | 0;
    }
    switch (i16 | 0) {
    case 16:
     {
      i11 = i11 ^ 255;
      i8 = (((Math_imul(i11, i12) | 0) >>> 0) / 255 | 0) + i8 | 0;
      i7 = (((Math_imul(i7, i11) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i6 = (((Math_imul(i6, i11) | 0) >>> 0) / 255 | 0) + i10 | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i9 + i7 | 0;
      i8 = i8 + i12 | 0;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      i6 = i6 >>> 0 > 255 ? 255 : i6;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i8, i12) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i9, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i8 = i12;
    }
    HEAP32[i13 >> 2] = i7 << 8 | i6 << 16 | i8;
    if (!i3) break; else {
     i13 = i13 + 4 | 0;
     i1 = i1 + i19 | 0;
    }
   }
   i3 = HEAP32[i22 >> 2] | 0;
  }
  i1 = i14 + (HEAP32[i20 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i22 >> 2] = i2;
  if (!i3) break;
  i5 = i1;
  i3 = HEAP32[i18 >> 2] | 0;
  i14 = i1;
  i1 = i15 + i23 | 0;
 }
 HEAP32[i25 >> 2] = i1;
 return;
}

function _SDL_Blit_BGRA8888_RGB888_Blend_Scale(i24) {
 i24 = i24 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0;
 i1 = HEAP32[i24 + 52 >> 2] | 0;
 i22 = i24 + 28 | 0;
 i25 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i24 + 8 >> 2] << 16 | 0) / (i25 | 0) | 0;
 i18 = i24 + 24 | 0;
 i3 = HEAP32[i18 >> 2] | 0;
 i19 = (HEAP32[i24 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i25 + -1 | 0;
 HEAP32[i22 >> 2] = i2;
 if (!i25) return;
 i25 = i24 + 20 | 0;
 i20 = i24 + 32 | 0;
 i21 = (i1 & 48 | 0) != 0;
 i16 = i1 & 112;
 i17 = i24 + 12 | 0;
 i14 = HEAP32[i25 >> 2] | 0;
 i5 = i14;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i15 = i1 + -65536 | 0;
   i13 = i15 >>> 16;
   i15 = i15 - (i13 << 16) | 0;
   i4 = i4 + 1 + i13 | 0;
  } else i15 = i1;
  if (!i3) i3 = i2; else {
   i13 = i5;
   i1 = 65536;
   i2 = 0;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i5 = i5 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i24 >> 2] | 0) + ((Math_imul(HEAP32[i17 >> 2] | 0, i4) | 0) + (i5 << 2)) | 0;
    }
    i11 = HEAP32[i2 >> 2] | 0;
    i8 = i11 >>> 24;
    i9 = i11 >>> 16 & 255;
    i10 = i11 >>> 8 & 255;
    i11 = i11 & 255;
    i12 = HEAP32[i13 >> 2] | 0;
    i6 = i12 >>> 16 & 255;
    i7 = i12 >>> 8 & 255;
    i12 = i12 & 255;
    if (i21 & (i11 | 0) != 255) {
     i8 = ((Math_imul(i8, i11) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i11) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i11) | 0) >>> 0) / 255 | 0;
    }
    switch (i16 | 0) {
    case 16:
     {
      i11 = i11 ^ 255;
      i8 = (((Math_imul(i11, i12) | 0) >>> 0) / 255 | 0) + i8 | 0;
      i7 = (((Math_imul(i7, i11) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i6 = (((Math_imul(i6, i11) | 0) >>> 0) / 255 | 0) + i10 | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i9 + i7 | 0;
      i8 = i8 + i12 | 0;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      i6 = i6 >>> 0 > 255 ? 255 : i6;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i8, i12) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i9, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i8 = i12;
    }
    HEAP32[i13 >> 2] = i7 << 8 | i6 << 16 | i8;
    if (!i3) break; else {
     i13 = i13 + 4 | 0;
     i1 = i1 + i19 | 0;
    }
   }
   i3 = HEAP32[i22 >> 2] | 0;
  }
  i1 = i14 + (HEAP32[i20 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i22 >> 2] = i2;
  if (!i3) break;
  i5 = i1;
  i3 = HEAP32[i18 >> 2] | 0;
  i14 = i1;
  i1 = i15 + i23 | 0;
 }
 HEAP32[i25 >> 2] = i1;
 return;
}

function _SDL_Blit_ARGB8888_RGB888_Blend_Scale(i24) {
 i24 = i24 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0;
 i1 = HEAP32[i24 + 52 >> 2] | 0;
 i22 = i24 + 28 | 0;
 i25 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i24 + 8 >> 2] << 16 | 0) / (i25 | 0) | 0;
 i18 = i24 + 24 | 0;
 i3 = HEAP32[i18 >> 2] | 0;
 i19 = (HEAP32[i24 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i25 + -1 | 0;
 HEAP32[i22 >> 2] = i2;
 if (!i25) return;
 i25 = i24 + 20 | 0;
 i20 = i24 + 32 | 0;
 i21 = (i1 & 48 | 0) != 0;
 i16 = i1 & 112;
 i17 = i24 + 12 | 0;
 i14 = HEAP32[i25 >> 2] | 0;
 i5 = i14;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i15 = i1 + -65536 | 0;
   i13 = i15 >>> 16;
   i15 = i15 - (i13 << 16) | 0;
   i4 = i4 + 1 + i13 | 0;
  } else i15 = i1;
  if (!i3) i3 = i2; else {
   i13 = i5;
   i1 = 65536;
   i2 = 0;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i5 = i5 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i24 >> 2] | 0) + ((Math_imul(HEAP32[i17 >> 2] | 0, i4) | 0) + (i5 << 2)) | 0;
    }
    i11 = HEAP32[i2 >> 2] | 0;
    i10 = i11 >>> 16 & 255;
    i9 = i11 >>> 8 & 255;
    i8 = i11 & 255;
    i11 = i11 >>> 24;
    i12 = HEAP32[i13 >> 2] | 0;
    i6 = i12 >>> 16 & 255;
    i7 = i12 >>> 8 & 255;
    i12 = i12 & 255;
    if (i21 & (i11 | 0) != 255) {
     i8 = ((Math_imul(i8, i11) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i11) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i11) | 0) >>> 0) / 255 | 0;
    }
    switch (i16 | 0) {
    case 16:
     {
      i11 = i11 ^ 255;
      i8 = (((Math_imul(i11, i12) | 0) >>> 0) / 255 | 0) + i8 | 0;
      i7 = (((Math_imul(i7, i11) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i6 = (((Math_imul(i6, i11) | 0) >>> 0) / 255 | 0) + i10 | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i9 + i7 | 0;
      i8 = i8 + i12 | 0;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      i6 = i6 >>> 0 > 255 ? 255 : i6;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i8, i12) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i9, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i8 = i12;
    }
    HEAP32[i13 >> 2] = i7 << 8 | i6 << 16 | i8;
    if (!i3) break; else {
     i13 = i13 + 4 | 0;
     i1 = i1 + i19 | 0;
    }
   }
   i3 = HEAP32[i22 >> 2] | 0;
  }
  i1 = i14 + (HEAP32[i20 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i22 >> 2] = i2;
  if (!i3) break;
  i5 = i1;
  i3 = HEAP32[i18 >> 2] | 0;
  i14 = i1;
  i1 = i15 + i23 | 0;
 }
 HEAP32[i25 >> 2] = i1;
 return;
}

function _SDL_Blit_ABGR8888_RGB888_Blend_Scale(i24) {
 i24 = i24 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0;
 i1 = HEAP32[i24 + 52 >> 2] | 0;
 i22 = i24 + 28 | 0;
 i25 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i24 + 8 >> 2] << 16 | 0) / (i25 | 0) | 0;
 i18 = i24 + 24 | 0;
 i3 = HEAP32[i18 >> 2] | 0;
 i19 = (HEAP32[i24 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i25 + -1 | 0;
 HEAP32[i22 >> 2] = i2;
 if (!i25) return;
 i25 = i24 + 20 | 0;
 i20 = i24 + 32 | 0;
 i21 = (i1 & 48 | 0) != 0;
 i16 = i1 & 112;
 i17 = i24 + 12 | 0;
 i14 = HEAP32[i25 >> 2] | 0;
 i5 = i14;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i15 = i1 + -65536 | 0;
   i13 = i15 >>> 16;
   i15 = i15 - (i13 << 16) | 0;
   i4 = i4 + 1 + i13 | 0;
  } else i15 = i1;
  if (!i3) i3 = i2; else {
   i13 = i5;
   i1 = 65536;
   i2 = 0;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i5 = i5 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i24 >> 2] | 0) + ((Math_imul(HEAP32[i17 >> 2] | 0, i4) | 0) + (i5 << 2)) | 0;
    }
    i11 = HEAP32[i2 >> 2] | 0;
    i8 = i11 >>> 16 & 255;
    i9 = i11 >>> 8 & 255;
    i10 = i11 & 255;
    i11 = i11 >>> 24;
    i12 = HEAP32[i13 >> 2] | 0;
    i6 = i12 >>> 16 & 255;
    i7 = i12 >>> 8 & 255;
    i12 = i12 & 255;
    if (i21 & (i11 | 0) != 255) {
     i8 = ((Math_imul(i8, i11) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i11) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i11) | 0) >>> 0) / 255 | 0;
    }
    switch (i16 | 0) {
    case 16:
     {
      i11 = i11 ^ 255;
      i8 = (((Math_imul(i11, i12) | 0) >>> 0) / 255 | 0) + i8 | 0;
      i7 = (((Math_imul(i7, i11) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i6 = (((Math_imul(i6, i11) | 0) >>> 0) / 255 | 0) + i10 | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i9 + i7 | 0;
      i8 = i8 + i12 | 0;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      i6 = i6 >>> 0 > 255 ? 255 : i6;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i8, i12) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i9, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i8 = i12;
    }
    HEAP32[i13 >> 2] = i7 << 8 | i6 << 16 | i8;
    if (!i3) break; else {
     i13 = i13 + 4 | 0;
     i1 = i1 + i19 | 0;
    }
   }
   i3 = HEAP32[i22 >> 2] | 0;
  }
  i1 = i14 + (HEAP32[i20 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i22 >> 2] = i2;
  if (!i3) break;
  i5 = i1;
  i3 = HEAP32[i18 >> 2] | 0;
  i14 = i1;
  i1 = i15 + i23 | 0;
 }
 HEAP32[i25 >> 2] = i1;
 return;
}

function _SDL_Blit_RGBA8888_BGR888_Blend_Scale(i24) {
 i24 = i24 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0;
 i1 = HEAP32[i24 + 52 >> 2] | 0;
 i22 = i24 + 28 | 0;
 i25 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i24 + 8 >> 2] << 16 | 0) / (i25 | 0) | 0;
 i18 = i24 + 24 | 0;
 i3 = HEAP32[i18 >> 2] | 0;
 i19 = (HEAP32[i24 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i25 + -1 | 0;
 HEAP32[i22 >> 2] = i2;
 if (!i25) return;
 i25 = i24 + 20 | 0;
 i20 = i24 + 32 | 0;
 i21 = (i1 & 48 | 0) != 0;
 i16 = i1 & 112;
 i17 = i24 + 12 | 0;
 i14 = HEAP32[i25 >> 2] | 0;
 i5 = i14;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i15 = i1 + -65536 | 0;
   i13 = i15 >>> 16;
   i15 = i15 - (i13 << 16) | 0;
   i4 = i4 + 1 + i13 | 0;
  } else i15 = i1;
  if (!i3) i3 = i2; else {
   i13 = i5;
   i1 = 65536;
   i2 = 0;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i5 = i5 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i24 >> 2] | 0) + ((Math_imul(HEAP32[i17 >> 2] | 0, i4) | 0) + (i5 << 2)) | 0;
    }
    i11 = HEAP32[i2 >> 2] | 0;
    i10 = i11 >>> 24;
    i9 = i11 >>> 16 & 255;
    i8 = i11 >>> 8 & 255;
    i11 = i11 & 255;
    i6 = HEAP32[i13 >> 2] | 0;
    i12 = i6 >>> 16 & 255;
    i7 = i6 >>> 8 & 255;
    i6 = i6 & 255;
    if (i21 & (i11 | 0) != 255) {
     i8 = ((Math_imul(i8, i11) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i11) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i11) | 0) >>> 0) / 255 | 0;
    }
    switch (i16 | 0) {
    case 16:
     {
      i11 = i11 ^ 255;
      i8 = (((Math_imul(i12, i11) | 0) >>> 0) / 255 | 0) + i8 | 0;
      i7 = (((Math_imul(i7, i11) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i6 = (((Math_imul(i11, i6) | 0) >>> 0) / 255 | 0) + i10 | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i9 + i7 | 0;
      i8 = i8 + i12 | 0;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      i6 = i6 >>> 0 > 255 ? 255 : i6;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i8, i12) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i9, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i8 = i12;
    }
    HEAP32[i13 >> 2] = i7 << 8 | i6 | i8 << 16;
    if (!i3) break; else {
     i13 = i13 + 4 | 0;
     i1 = i1 + i19 | 0;
    }
   }
   i3 = HEAP32[i22 >> 2] | 0;
  }
  i1 = i14 + (HEAP32[i20 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i22 >> 2] = i2;
  if (!i3) break;
  i5 = i1;
  i3 = HEAP32[i18 >> 2] | 0;
  i14 = i1;
  i1 = i15 + i23 | 0;
 }
 HEAP32[i25 >> 2] = i1;
 return;
}

function _SDL_Blit_BGRA8888_BGR888_Blend_Scale(i24) {
 i24 = i24 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0;
 i1 = HEAP32[i24 + 52 >> 2] | 0;
 i22 = i24 + 28 | 0;
 i25 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i24 + 8 >> 2] << 16 | 0) / (i25 | 0) | 0;
 i18 = i24 + 24 | 0;
 i3 = HEAP32[i18 >> 2] | 0;
 i19 = (HEAP32[i24 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i25 + -1 | 0;
 HEAP32[i22 >> 2] = i2;
 if (!i25) return;
 i25 = i24 + 20 | 0;
 i20 = i24 + 32 | 0;
 i21 = (i1 & 48 | 0) != 0;
 i16 = i1 & 112;
 i17 = i24 + 12 | 0;
 i14 = HEAP32[i25 >> 2] | 0;
 i5 = i14;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i15 = i1 + -65536 | 0;
   i13 = i15 >>> 16;
   i15 = i15 - (i13 << 16) | 0;
   i4 = i4 + 1 + i13 | 0;
  } else i15 = i1;
  if (!i3) i3 = i2; else {
   i13 = i5;
   i1 = 65536;
   i2 = 0;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i5 = i5 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i24 >> 2] | 0) + ((Math_imul(HEAP32[i17 >> 2] | 0, i4) | 0) + (i5 << 2)) | 0;
    }
    i11 = HEAP32[i2 >> 2] | 0;
    i8 = i11 >>> 24;
    i9 = i11 >>> 16 & 255;
    i10 = i11 >>> 8 & 255;
    i11 = i11 & 255;
    i6 = HEAP32[i13 >> 2] | 0;
    i12 = i6 >>> 16 & 255;
    i7 = i6 >>> 8 & 255;
    i6 = i6 & 255;
    if (i21 & (i11 | 0) != 255) {
     i8 = ((Math_imul(i8, i11) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i11) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i11) | 0) >>> 0) / 255 | 0;
    }
    switch (i16 | 0) {
    case 16:
     {
      i11 = i11 ^ 255;
      i8 = (((Math_imul(i12, i11) | 0) >>> 0) / 255 | 0) + i8 | 0;
      i7 = (((Math_imul(i7, i11) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i6 = (((Math_imul(i11, i6) | 0) >>> 0) / 255 | 0) + i10 | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i9 + i7 | 0;
      i8 = i8 + i12 | 0;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      i6 = i6 >>> 0 > 255 ? 255 : i6;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i8, i12) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i9, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i8 = i12;
    }
    HEAP32[i13 >> 2] = i7 << 8 | i6 | i8 << 16;
    if (!i3) break; else {
     i13 = i13 + 4 | 0;
     i1 = i1 + i19 | 0;
    }
   }
   i3 = HEAP32[i22 >> 2] | 0;
  }
  i1 = i14 + (HEAP32[i20 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i22 >> 2] = i2;
  if (!i3) break;
  i5 = i1;
  i3 = HEAP32[i18 >> 2] | 0;
  i14 = i1;
  i1 = i15 + i23 | 0;
 }
 HEAP32[i25 >> 2] = i1;
 return;
}

function _SDL_Blit_ARGB8888_BGR888_Blend_Scale(i24) {
 i24 = i24 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0;
 i1 = HEAP32[i24 + 52 >> 2] | 0;
 i22 = i24 + 28 | 0;
 i25 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i24 + 8 >> 2] << 16 | 0) / (i25 | 0) | 0;
 i18 = i24 + 24 | 0;
 i3 = HEAP32[i18 >> 2] | 0;
 i19 = (HEAP32[i24 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i25 + -1 | 0;
 HEAP32[i22 >> 2] = i2;
 if (!i25) return;
 i25 = i24 + 20 | 0;
 i20 = i24 + 32 | 0;
 i21 = (i1 & 48 | 0) != 0;
 i16 = i1 & 112;
 i17 = i24 + 12 | 0;
 i14 = HEAP32[i25 >> 2] | 0;
 i5 = i14;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i15 = i1 + -65536 | 0;
   i13 = i15 >>> 16;
   i15 = i15 - (i13 << 16) | 0;
   i4 = i4 + 1 + i13 | 0;
  } else i15 = i1;
  if (!i3) i3 = i2; else {
   i13 = i5;
   i1 = 65536;
   i2 = 0;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i5 = i5 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i24 >> 2] | 0) + ((Math_imul(HEAP32[i17 >> 2] | 0, i4) | 0) + (i5 << 2)) | 0;
    }
    i11 = HEAP32[i2 >> 2] | 0;
    i10 = i11 >>> 16 & 255;
    i9 = i11 >>> 8 & 255;
    i8 = i11 & 255;
    i11 = i11 >>> 24;
    i6 = HEAP32[i13 >> 2] | 0;
    i12 = i6 >>> 16 & 255;
    i7 = i6 >>> 8 & 255;
    i6 = i6 & 255;
    if (i21 & (i11 | 0) != 255) {
     i8 = ((Math_imul(i8, i11) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i11) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i11) | 0) >>> 0) / 255 | 0;
    }
    switch (i16 | 0) {
    case 16:
     {
      i11 = i11 ^ 255;
      i8 = (((Math_imul(i12, i11) | 0) >>> 0) / 255 | 0) + i8 | 0;
      i7 = (((Math_imul(i7, i11) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i6 = (((Math_imul(i11, i6) | 0) >>> 0) / 255 | 0) + i10 | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i9 + i7 | 0;
      i8 = i8 + i12 | 0;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      i6 = i6 >>> 0 > 255 ? 255 : i6;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i8, i12) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i9, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i8 = i12;
    }
    HEAP32[i13 >> 2] = i7 << 8 | i6 | i8 << 16;
    if (!i3) break; else {
     i13 = i13 + 4 | 0;
     i1 = i1 + i19 | 0;
    }
   }
   i3 = HEAP32[i22 >> 2] | 0;
  }
  i1 = i14 + (HEAP32[i20 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i22 >> 2] = i2;
  if (!i3) break;
  i5 = i1;
  i3 = HEAP32[i18 >> 2] | 0;
  i14 = i1;
  i1 = i15 + i23 | 0;
 }
 HEAP32[i25 >> 2] = i1;
 return;
}

function _SDL_Blit_ABGR8888_BGR888_Blend_Scale(i24) {
 i24 = i24 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0;
 i1 = HEAP32[i24 + 52 >> 2] | 0;
 i22 = i24 + 28 | 0;
 i25 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i24 + 8 >> 2] << 16 | 0) / (i25 | 0) | 0;
 i18 = i24 + 24 | 0;
 i3 = HEAP32[i18 >> 2] | 0;
 i19 = (HEAP32[i24 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i25 + -1 | 0;
 HEAP32[i22 >> 2] = i2;
 if (!i25) return;
 i25 = i24 + 20 | 0;
 i20 = i24 + 32 | 0;
 i21 = (i1 & 48 | 0) != 0;
 i16 = i1 & 112;
 i17 = i24 + 12 | 0;
 i14 = HEAP32[i25 >> 2] | 0;
 i5 = i14;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i15 = i1 + -65536 | 0;
   i13 = i15 >>> 16;
   i15 = i15 - (i13 << 16) | 0;
   i4 = i4 + 1 + i13 | 0;
  } else i15 = i1;
  if (!i3) i3 = i2; else {
   i13 = i5;
   i1 = 65536;
   i2 = 0;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i5 = i5 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i24 >> 2] | 0) + ((Math_imul(HEAP32[i17 >> 2] | 0, i4) | 0) + (i5 << 2)) | 0;
    }
    i11 = HEAP32[i2 >> 2] | 0;
    i8 = i11 >>> 16 & 255;
    i9 = i11 >>> 8 & 255;
    i10 = i11 & 255;
    i11 = i11 >>> 24;
    i6 = HEAP32[i13 >> 2] | 0;
    i12 = i6 >>> 16 & 255;
    i7 = i6 >>> 8 & 255;
    i6 = i6 & 255;
    if (i21 & (i11 | 0) != 255) {
     i8 = ((Math_imul(i8, i11) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i11) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i11) | 0) >>> 0) / 255 | 0;
    }
    switch (i16 | 0) {
    case 16:
     {
      i11 = i11 ^ 255;
      i8 = (((Math_imul(i12, i11) | 0) >>> 0) / 255 | 0) + i8 | 0;
      i7 = (((Math_imul(i7, i11) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i6 = (((Math_imul(i11, i6) | 0) >>> 0) / 255 | 0) + i10 | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i9 + i7 | 0;
      i8 = i8 + i12 | 0;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      i6 = i6 >>> 0 > 255 ? 255 : i6;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i8, i12) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i9, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i8 = i12;
    }
    HEAP32[i13 >> 2] = i7 << 8 | i6 | i8 << 16;
    if (!i3) break; else {
     i13 = i13 + 4 | 0;
     i1 = i1 + i19 | 0;
    }
   }
   i3 = HEAP32[i22 >> 2] | 0;
  }
  i1 = i14 + (HEAP32[i20 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i22 >> 2] = i2;
  if (!i3) break;
  i5 = i1;
  i3 = HEAP32[i18 >> 2] | 0;
  i14 = i1;
  i1 = i15 + i23 | 0;
 }
 HEAP32[i25 >> 2] = i1;
 return;
}

function _GLES2_RenderReadPixels(i9, i8, i18, i19, i17) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 i18 = i18 | 0;
 i19 = i19 | 0;
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i20 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i12 = i20;
 i10 = i20 + 28 | 0;
 i7 = i20 + 24 | 0;
 i5 = i9 + 316 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i3 = HEAP32[i6 >> 2] | 0;
 if ((HEAP32[3491] | 0) != (i3 | 0)) {
  HEAP32[i6 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i9 + 188 >> 2] | 0, i3) | 0) >= 0) {
   HEAP32[3491] = HEAP32[i6 >> 2];
   _GLES2_UpdateViewport(i9) | 0;
   i1 = HEAP32[i5 >> 2] | 0;
   i4 = 4;
  }
 } else {
  i1 = i6;
  i4 = 4;
 }
 if ((i4 | 0) == 4 ? (HEAP32[i1 + 4 >> 2] | 0) != 0 : 0) {
  i1 = i1 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 7]() | 0) != 0);
 }
 i13 = i8 + 8 | 0;
 i15 = HEAP32[i13 >> 2] << 2;
 i14 = i8 + 12 | 0;
 i16 = _SDL_malloc(Math_imul(HEAP32[i14 >> 2] | 0, i15) | 0) | 0;
 if (!i16) {
  i19 = _SDL_Error(0) | 0;
  STACKTOP = i20;
  return i19 | 0;
 }
 _SDL_GetRendererOutputSize(i9, i10, i7) | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 FUNCTION_TABLE_viiiiiii[HEAP32[i6 + 140 >> 2] & 7](HEAP32[i8 >> 2] | 0, (HEAP32[i7 >> 2] | 0) - (HEAP32[i8 + 4 >> 2] | 0) - i1 | 0, HEAP32[i13 >> 2] | 0, i1, 6408, 5121, i16);
 i1 = HEAP32[i5 >> 2] | 0;
 if ((HEAP32[i1 + 4 >> 2] | 0) != 0 ? (i11 = i1 + 108 | 0, i2 = FUNCTION_TABLE_i[HEAP32[i11 >> 2] & 7]() | 0, (i2 | 0) != 0) : 0) {
  while (1) {
   switch (i2 | 0) {
   case 1280:
    {
     i1 = 46398;
     break;
    }
   case 1281:
    {
     i1 = 46381;
     break;
    }
   case 1282:
    {
     i1 = 46360;
     break;
    }
   case 1285:
    {
     i1 = 46343;
     break;
    }
   default:
    i1 = 46335;
   }
   HEAP32[i12 >> 2] = 46571;
   HEAP32[i12 + 4 >> 2] = 46440;
   HEAP32[i12 + 8 >> 2] = 1829;
   HEAP32[i12 + 12 >> 2] = 46586;
   HEAP32[i12 + 16 >> 2] = i1;
   HEAP32[i12 + 20 >> 2] = i2;
   _SDL_SetError(46414, i12) | 0;
   i2 = FUNCTION_TABLE_i[HEAP32[i11 >> 2] & 7]() | 0;
   if (!i2) {
    i1 = -1;
    break;
   }
  }
  STACKTOP = i20;
  return i1 | 0;
 }
 i2 = HEAP32[i13 >> 2] | 0;
 i5 = i2 << 2;
 i1 = HEAP32[i14 >> 2] | 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i5 | 0) + 15 & -16) | 0;
 if ((i1 + 1 | 0) >>> 0 >= 3) {
  i2 = 0 - i15 | 0;
  i3 = i16;
  i4 = (i1 | 0) / 2 | 0;
  i1 = i16 + (Math_imul(i1 + -1 | 0, i15) | 0) | 0;
  while (1) {
   i4 = i4 + -1 | 0;
   _SDL_memcpy(i6, i3, i5) | 0;
   _SDL_memcpy(i3, i1, i5) | 0;
   _SDL_memcpy(i1, i6, i5) | 0;
   if (!i4) break; else {
    i3 = i3 + i15 | 0;
    i1 = i1 + i2 | 0;
   }
  }
  i2 = HEAP32[i13 >> 2] | 0;
  i1 = HEAP32[i14 >> 2] | 0;
 }
 i19 = _SDL_ConvertPixels(i2, i1, 376840196, i16, i15, i18, i19, i17) | 0;
 _SDL_free(i16);
 STACKTOP = i20;
 return i19 | 0;
}

function _Blit1to4Key(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i1 = HEAP32[i3 + 24 >> 2] | 0;
 i2 = HEAP32[i3 + 28 >> 2] | 0;
 i10 = HEAP32[i3 + 16 >> 2] | 0;
 i11 = HEAP32[i3 + 48 >> 2] | 0;
 i7 = HEAP32[i3 + 56 >> 2] | 0;
 i8 = (HEAP32[i3 + 36 >> 2] | 0) / 4 | 0;
 if (!i2) return;
 i9 = (i1 + 7 | 0) / 8 | 0;
 i6 = i1 & 7;
 i1 = HEAP32[i3 + 20 >> 2] | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 L4 : while (1) {
  i2 = i2 + -1 | 0;
  switch (i6 | 0) {
  case 0:
   {
    i5 = i9;
    i3 = 4;
    break;
   }
  case 7:
   {
    i5 = i9;
    i3 = 7;
    break;
   }
  case 6:
   {
    i5 = i9;
    i3 = 10;
    break;
   }
  case 5:
   {
    i5 = i9;
    i3 = 13;
    break;
   }
  case 4:
   {
    i5 = i9;
    i3 = 16;
    break;
   }
  case 3:
   {
    i5 = i9;
    i3 = 19;
    break;
   }
  case 2:
   {
    i5 = i9;
    i3 = 22;
    break;
   }
  case 1:
   {
    i5 = i9;
    i3 = 25;
    break;
   }
  default:
   i3 = 28;
  }
  while (1) if ((i3 | 0) == 4) {
   i3 = HEAPU8[i4 >> 0] | 0;
   if ((i3 | 0) != (i7 | 0)) HEAP32[i1 >> 2] = HEAP32[i11 + (i3 << 2) >> 2];
   i1 = i1 + 4 | 0;
   i4 = i4 + 1 | 0;
   i3 = 7;
   continue;
  } else if ((i3 | 0) == 7) {
   i3 = HEAPU8[i4 >> 0] | 0;
   if ((i3 | 0) != (i7 | 0)) HEAP32[i1 >> 2] = HEAP32[i11 + (i3 << 2) >> 2];
   i1 = i1 + 4 | 0;
   i4 = i4 + 1 | 0;
   i3 = 10;
   continue;
  } else if ((i3 | 0) == 10) {
   i3 = HEAPU8[i4 >> 0] | 0;
   if ((i3 | 0) != (i7 | 0)) HEAP32[i1 >> 2] = HEAP32[i11 + (i3 << 2) >> 2];
   i1 = i1 + 4 | 0;
   i4 = i4 + 1 | 0;
   i3 = 13;
   continue;
  } else if ((i3 | 0) == 13) {
   i3 = HEAPU8[i4 >> 0] | 0;
   if ((i3 | 0) != (i7 | 0)) HEAP32[i1 >> 2] = HEAP32[i11 + (i3 << 2) >> 2];
   i1 = i1 + 4 | 0;
   i4 = i4 + 1 | 0;
   i3 = 16;
   continue;
  } else if ((i3 | 0) == 16) {
   i3 = HEAPU8[i4 >> 0] | 0;
   if ((i3 | 0) != (i7 | 0)) HEAP32[i1 >> 2] = HEAP32[i11 + (i3 << 2) >> 2];
   i1 = i1 + 4 | 0;
   i4 = i4 + 1 | 0;
   i3 = 19;
   continue;
  } else if ((i3 | 0) == 19) {
   i3 = HEAPU8[i4 >> 0] | 0;
   if ((i3 | 0) != (i7 | 0)) HEAP32[i1 >> 2] = HEAP32[i11 + (i3 << 2) >> 2];
   i1 = i1 + 4 | 0;
   i4 = i4 + 1 | 0;
   i3 = 22;
   continue;
  } else if ((i3 | 0) == 22) {
   i3 = HEAPU8[i4 >> 0] | 0;
   if ((i3 | 0) != (i7 | 0)) HEAP32[i1 >> 2] = HEAP32[i11 + (i3 << 2) >> 2];
   i1 = i1 + 4 | 0;
   i4 = i4 + 1 | 0;
   i3 = 25;
   continue;
  } else if ((i3 | 0) == 25) {
   i3 = HEAPU8[i4 >> 0] | 0;
   if ((i3 | 0) != (i7 | 0)) HEAP32[i1 >> 2] = HEAP32[i11 + (i3 << 2) >> 2];
   i4 = i4 + 1 | 0;
   i1 = i1 + 4 | 0;
   if ((i5 | 0) > 1) {
    i5 = i5 + -1 | 0;
    i3 = 4;
    continue;
   } else {
    i3 = 28;
    continue;
   }
  } else if ((i3 | 0) == 28) if (!i2) break L4; else {
   i1 = i1 + (i8 << 2) | 0;
   i4 = i4 + i10 | 0;
   continue L4;
  }
 }
 return;
}

function _SDL_Blit_RGB888_ARGB8888_Modulate_Blend(i26) {
 i26 = i26 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i2 = HEAP32[i26 + 52 >> 2] | 0;
 i24 = HEAPU8[i26 + 60 >> 0] | 0;
 i25 = HEAPU8[i26 + 61 >> 0] | 0;
 i17 = HEAPU8[i26 + 62 >> 0] | 0;
 i1 = HEAP8[i26 + 63 >> 0] | 0;
 i18 = i26 + 28 | 0;
 i23 = HEAP32[i18 >> 2] | 0;
 i3 = i23 + -1 | 0;
 HEAP32[i18 >> 2] = i3;
 if (!i23) return;
 i19 = i26 + 20 | 0;
 i20 = i26 + 24 | 0;
 i21 = i26 + 12 | 0;
 i22 = i26 + 32 | 0;
 i23 = (i2 & 1 | 0) == 0;
 i15 = (i2 & 2 | 0) == 0 ? 255 : i1 & 255;
 i16 = (i2 & 48 | 0) != 0 & (i15 | 0) != 255;
 i13 = i2 & 112;
 i14 = i15 ^ 255;
 i1 = i3;
 do {
  i2 = HEAP32[i20 >> 2] | 0;
  if (!i2) {
   i3 = i1;
   i2 = HEAP32[i26 >> 2] | 0;
   i1 = HEAP32[i19 >> 2] | 0;
  } else {
   i1 = HEAP32[i19 >> 2] | 0;
   i12 = HEAP32[i26 >> 2] | 0;
   i10 = i1;
   i11 = i12;
   while (1) {
    i2 = i2 + -1 | 0;
    i5 = HEAP32[i11 >> 2] | 0;
    i7 = i5 >>> 16 & 255;
    i6 = i5 >>> 8 & 255;
    i5 = i5 & 255;
    i8 = HEAP32[i10 >> 2] | 0;
    i3 = i8 >>> 16 & 255;
    i4 = i8 >>> 8 & 255;
    i9 = i8 & 255;
    i8 = i8 >>> 24;
    if (!i23) {
     i5 = ((Math_imul(i5, i17) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i25) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i24) | 0) >>> 0) / 255 | 0;
    }
    if (i16) {
     i5 = ((Math_imul(i5, i15) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i15) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i15) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 | 0) {
    case 16:
     {
      i8 = (((Math_imul(i8, i14) | 0) >>> 0) / 255 | 0) + i15 | 0;
      i5 = (((Math_imul(i9, i14) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i4 = (((Math_imul(i4, i14) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i3 = (((Math_imul(i3, i14) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i3 = i7 + i3 | 0;
      i4 = i6 + i4 | 0;
      i5 = i5 + i9 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i4 = i4 >>> 0 > 255 ? 255 : i4;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i6, i4) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i7, i3) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i9;
    }
    HEAP32[i10 >> 2] = i4 << 8 | i3 << 16 | i5 | i8 << 24;
    if (!i2) break; else {
     i10 = i10 + 4 | 0;
     i11 = i11 + 4 | 0;
    }
   }
   i3 = HEAP32[i18 >> 2] | 0;
   i2 = i12;
  }
  HEAP32[i26 >> 2] = i2 + (HEAP32[i21 >> 2] | 0);
  HEAP32[i19 >> 2] = i1 + (HEAP32[i22 >> 2] | 0);
  i1 = i3 + -1 | 0;
  HEAP32[i18 >> 2] = i1;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_BGR888_ARGB8888_Modulate_Blend(i26) {
 i26 = i26 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i2 = HEAP32[i26 + 52 >> 2] | 0;
 i24 = HEAPU8[i26 + 60 >> 0] | 0;
 i25 = HEAPU8[i26 + 61 >> 0] | 0;
 i17 = HEAPU8[i26 + 62 >> 0] | 0;
 i1 = HEAP8[i26 + 63 >> 0] | 0;
 i18 = i26 + 28 | 0;
 i23 = HEAP32[i18 >> 2] | 0;
 i3 = i23 + -1 | 0;
 HEAP32[i18 >> 2] = i3;
 if (!i23) return;
 i19 = i26 + 20 | 0;
 i20 = i26 + 24 | 0;
 i21 = i26 + 12 | 0;
 i22 = i26 + 32 | 0;
 i23 = (i2 & 1 | 0) == 0;
 i15 = (i2 & 2 | 0) == 0 ? 255 : i1 & 255;
 i16 = (i2 & 48 | 0) != 0 & (i15 | 0) != 255;
 i13 = i2 & 112;
 i14 = i15 ^ 255;
 i1 = i3;
 do {
  i2 = HEAP32[i20 >> 2] | 0;
  if (!i2) {
   i3 = i1;
   i2 = HEAP32[i26 >> 2] | 0;
   i1 = HEAP32[i19 >> 2] | 0;
  } else {
   i1 = HEAP32[i19 >> 2] | 0;
   i12 = HEAP32[i26 >> 2] | 0;
   i10 = i1;
   i11 = i12;
   while (1) {
    i2 = i2 + -1 | 0;
    i7 = HEAP32[i11 >> 2] | 0;
    i5 = i7 >>> 16 & 255;
    i6 = i7 >>> 8 & 255;
    i7 = i7 & 255;
    i8 = HEAP32[i10 >> 2] | 0;
    i3 = i8 >>> 16 & 255;
    i4 = i8 >>> 8 & 255;
    i9 = i8 & 255;
    i8 = i8 >>> 24;
    if (!i23) {
     i5 = ((Math_imul(i5, i17) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i25) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i24) | 0) >>> 0) / 255 | 0;
    }
    if (i16) {
     i5 = ((Math_imul(i5, i15) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i15) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i15) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 | 0) {
    case 16:
     {
      i8 = (((Math_imul(i8, i14) | 0) >>> 0) / 255 | 0) + i15 | 0;
      i5 = (((Math_imul(i9, i14) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i4 = (((Math_imul(i4, i14) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i3 = (((Math_imul(i3, i14) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i3 = i7 + i3 | 0;
      i4 = i6 + i4 | 0;
      i5 = i5 + i9 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i4 = i4 >>> 0 > 255 ? 255 : i4;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i6, i4) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i7, i3) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i9;
    }
    HEAP32[i10 >> 2] = i4 << 8 | i3 << 16 | i5 | i8 << 24;
    if (!i2) break; else {
     i10 = i10 + 4 | 0;
     i11 = i11 + 4 | 0;
    }
   }
   i3 = HEAP32[i18 >> 2] | 0;
   i2 = i12;
  }
  HEAP32[i26 >> 2] = i2 + (HEAP32[i21 >> 2] | 0);
  HEAP32[i19 >> 2] = i1 + (HEAP32[i22 >> 2] | 0);
  i1 = i3 + -1 | 0;
  HEAP32[i18 >> 2] = i1;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_RGBA8888_RGB888_Modulate_Blend(i26) {
 i26 = i26 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i27 = 0;
 i1 = HEAP32[i26 + 52 >> 2] | 0;
 i24 = HEAPU8[i26 + 60 >> 0] | 0;
 i25 = HEAPU8[i26 + 61 >> 0] | 0;
 i14 = HEAPU8[i26 + 62 >> 0] | 0;
 i15 = HEAPU8[i26 + 63 >> 0] | 0;
 i16 = i26 + 28 | 0;
 i23 = HEAP32[i16 >> 2] | 0;
 i2 = i23 + -1 | 0;
 HEAP32[i16 >> 2] = i2;
 if (!i23) return;
 i17 = i26 + 20 | 0;
 i18 = i26 + 24 | 0;
 i19 = i26 + 12 | 0;
 i20 = i26 + 32 | 0;
 i21 = (i1 & 1 | 0) == 0;
 i22 = (i1 & 2 | 0) == 0;
 i23 = (i1 & 48 | 0) != 0;
 i13 = i1 & 112;
 do {
  i1 = HEAP32[i18 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i26 >> 2] | 0;
   i1 = HEAP32[i17 >> 2] | 0;
   i3 = i2;
  } else {
   i12 = HEAP32[i17 >> 2] | 0;
   i4 = HEAP32[i26 >> 2] | 0;
   i10 = i12;
   i11 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i8 = HEAP32[i11 >> 2] | 0;
    i7 = i8 >>> 24;
    i6 = i8 >>> 16 & 255;
    i5 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    i9 = HEAP32[i10 >> 2] | 0;
    i2 = i9 >>> 16 & 255;
    i3 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    if (!i21) {
     i5 = ((Math_imul(i5, i14) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i25) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i24) | 0) >>> 0) / 255 | 0;
    }
    i27 = ((Math_imul(i8, i15) | 0) >>> 0) / 255 | 0;
    i8 = i22 ? i8 : i27;
    if (i23 & i8 >>> 0 < 255) {
     i5 = ((Math_imul(i8, i5) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i8, i6) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i8, i7) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 | 0) {
    case 16:
     {
      i27 = 255 - i8 | 0;
      i5 = (((Math_imul(i27, i9) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i3 = (((Math_imul(i27, i3) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i27, i2) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i3 = i6 + i3 | 0;
      i5 = i5 + i9 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i9;
    }
    HEAP32[i10 >> 2] = i3 << 8 | i2 << 16 | i5;
    if (!i1) break; else {
     i10 = i10 + 4 | 0;
     i11 = i11 + 4 | 0;
    }
   }
   i1 = i12;
   i3 = HEAP32[i16 >> 2] | 0;
  }
  HEAP32[i26 >> 2] = i4 + (HEAP32[i19 >> 2] | 0);
  HEAP32[i17 >> 2] = i1 + (HEAP32[i20 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i16 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_RGBA8888_BGR888_Modulate_Blend(i26) {
 i26 = i26 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i27 = 0;
 i1 = HEAP32[i26 + 52 >> 2] | 0;
 i24 = HEAPU8[i26 + 60 >> 0] | 0;
 i25 = HEAPU8[i26 + 61 >> 0] | 0;
 i14 = HEAPU8[i26 + 62 >> 0] | 0;
 i15 = HEAPU8[i26 + 63 >> 0] | 0;
 i16 = i26 + 28 | 0;
 i23 = HEAP32[i16 >> 2] | 0;
 i2 = i23 + -1 | 0;
 HEAP32[i16 >> 2] = i2;
 if (!i23) return;
 i17 = i26 + 20 | 0;
 i18 = i26 + 24 | 0;
 i19 = i26 + 12 | 0;
 i20 = i26 + 32 | 0;
 i21 = (i1 & 1 | 0) == 0;
 i22 = (i1 & 2 | 0) == 0;
 i23 = (i1 & 48 | 0) != 0;
 i13 = i1 & 112;
 do {
  i1 = HEAP32[i18 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i26 >> 2] | 0;
   i1 = HEAP32[i17 >> 2] | 0;
   i3 = i2;
  } else {
   i12 = HEAP32[i17 >> 2] | 0;
   i4 = HEAP32[i26 >> 2] | 0;
   i10 = i12;
   i11 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i8 = HEAP32[i11 >> 2] | 0;
    i7 = i8 >>> 24;
    i6 = i8 >>> 16 & 255;
    i5 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    i2 = HEAP32[i10 >> 2] | 0;
    i9 = i2 >>> 16 & 255;
    i3 = i2 >>> 8 & 255;
    i2 = i2 & 255;
    if (!i21) {
     i5 = ((Math_imul(i5, i14) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i25) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i24) | 0) >>> 0) / 255 | 0;
    }
    i27 = ((Math_imul(i8, i15) | 0) >>> 0) / 255 | 0;
    i8 = i22 ? i8 : i27;
    if (i23 & i8 >>> 0 < 255) {
     i5 = ((Math_imul(i8, i5) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i8, i6) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i8, i7) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 | 0) {
    case 16:
     {
      i27 = 255 - i8 | 0;
      i5 = (((Math_imul(i27, i9) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i3 = (((Math_imul(i27, i3) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i27, i2) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i3 = i6 + i3 | 0;
      i5 = i5 + i9 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i9;
    }
    HEAP32[i10 >> 2] = i3 << 8 | i2 | i5 << 16;
    if (!i1) break; else {
     i10 = i10 + 4 | 0;
     i11 = i11 + 4 | 0;
    }
   }
   i1 = i12;
   i3 = HEAP32[i16 >> 2] | 0;
  }
  HEAP32[i26 >> 2] = i4 + (HEAP32[i19 >> 2] | 0);
  HEAP32[i17 >> 2] = i1 + (HEAP32[i20 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i16 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_BGRA8888_RGB888_Modulate_Blend(i26) {
 i26 = i26 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i27 = 0;
 i1 = HEAP32[i26 + 52 >> 2] | 0;
 i24 = HEAPU8[i26 + 60 >> 0] | 0;
 i25 = HEAPU8[i26 + 61 >> 0] | 0;
 i14 = HEAPU8[i26 + 62 >> 0] | 0;
 i15 = HEAPU8[i26 + 63 >> 0] | 0;
 i16 = i26 + 28 | 0;
 i23 = HEAP32[i16 >> 2] | 0;
 i2 = i23 + -1 | 0;
 HEAP32[i16 >> 2] = i2;
 if (!i23) return;
 i17 = i26 + 20 | 0;
 i18 = i26 + 24 | 0;
 i19 = i26 + 12 | 0;
 i20 = i26 + 32 | 0;
 i21 = (i1 & 1 | 0) == 0;
 i22 = (i1 & 2 | 0) == 0;
 i23 = (i1 & 48 | 0) != 0;
 i13 = i1 & 112;
 do {
  i1 = HEAP32[i18 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i26 >> 2] | 0;
   i1 = HEAP32[i17 >> 2] | 0;
   i3 = i2;
  } else {
   i12 = HEAP32[i17 >> 2] | 0;
   i4 = HEAP32[i26 >> 2] | 0;
   i10 = i12;
   i11 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i8 = HEAP32[i11 >> 2] | 0;
    i5 = i8 >>> 24;
    i6 = i8 >>> 16 & 255;
    i7 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    i9 = HEAP32[i10 >> 2] | 0;
    i2 = i9 >>> 16 & 255;
    i3 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    if (!i21) {
     i5 = ((Math_imul(i5, i14) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i25) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i24) | 0) >>> 0) / 255 | 0;
    }
    i27 = ((Math_imul(i8, i15) | 0) >>> 0) / 255 | 0;
    i8 = i22 ? i8 : i27;
    if (i23 & i8 >>> 0 < 255) {
     i5 = ((Math_imul(i8, i5) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i8, i6) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i8, i7) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 | 0) {
    case 16:
     {
      i27 = 255 - i8 | 0;
      i5 = (((Math_imul(i27, i9) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i3 = (((Math_imul(i27, i3) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i27, i2) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i3 = i6 + i3 | 0;
      i5 = i5 + i9 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i9;
    }
    HEAP32[i10 >> 2] = i3 << 8 | i2 << 16 | i5;
    if (!i1) break; else {
     i10 = i10 + 4 | 0;
     i11 = i11 + 4 | 0;
    }
   }
   i1 = i12;
   i3 = HEAP32[i16 >> 2] | 0;
  }
  HEAP32[i26 >> 2] = i4 + (HEAP32[i19 >> 2] | 0);
  HEAP32[i17 >> 2] = i1 + (HEAP32[i20 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i16 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_BGRA8888_BGR888_Modulate_Blend(i26) {
 i26 = i26 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i27 = 0;
 i1 = HEAP32[i26 + 52 >> 2] | 0;
 i24 = HEAPU8[i26 + 60 >> 0] | 0;
 i25 = HEAPU8[i26 + 61 >> 0] | 0;
 i14 = HEAPU8[i26 + 62 >> 0] | 0;
 i15 = HEAPU8[i26 + 63 >> 0] | 0;
 i16 = i26 + 28 | 0;
 i23 = HEAP32[i16 >> 2] | 0;
 i2 = i23 + -1 | 0;
 HEAP32[i16 >> 2] = i2;
 if (!i23) return;
 i17 = i26 + 20 | 0;
 i18 = i26 + 24 | 0;
 i19 = i26 + 12 | 0;
 i20 = i26 + 32 | 0;
 i21 = (i1 & 1 | 0) == 0;
 i22 = (i1 & 2 | 0) == 0;
 i23 = (i1 & 48 | 0) != 0;
 i13 = i1 & 112;
 do {
  i1 = HEAP32[i18 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i26 >> 2] | 0;
   i1 = HEAP32[i17 >> 2] | 0;
   i3 = i2;
  } else {
   i12 = HEAP32[i17 >> 2] | 0;
   i4 = HEAP32[i26 >> 2] | 0;
   i10 = i12;
   i11 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i8 = HEAP32[i11 >> 2] | 0;
    i5 = i8 >>> 24;
    i6 = i8 >>> 16 & 255;
    i7 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    i2 = HEAP32[i10 >> 2] | 0;
    i9 = i2 >>> 16 & 255;
    i3 = i2 >>> 8 & 255;
    i2 = i2 & 255;
    if (!i21) {
     i5 = ((Math_imul(i5, i14) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i25) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i24) | 0) >>> 0) / 255 | 0;
    }
    i27 = ((Math_imul(i8, i15) | 0) >>> 0) / 255 | 0;
    i8 = i22 ? i8 : i27;
    if (i23 & i8 >>> 0 < 255) {
     i5 = ((Math_imul(i8, i5) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i8, i6) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i8, i7) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 | 0) {
    case 16:
     {
      i27 = 255 - i8 | 0;
      i5 = (((Math_imul(i27, i9) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i3 = (((Math_imul(i27, i3) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i27, i2) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i3 = i6 + i3 | 0;
      i5 = i5 + i9 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i9;
    }
    HEAP32[i10 >> 2] = i3 << 8 | i2 | i5 << 16;
    if (!i1) break; else {
     i10 = i10 + 4 | 0;
     i11 = i11 + 4 | 0;
    }
   }
   i1 = i12;
   i3 = HEAP32[i16 >> 2] | 0;
  }
  HEAP32[i26 >> 2] = i4 + (HEAP32[i19 >> 2] | 0);
  HEAP32[i17 >> 2] = i1 + (HEAP32[i20 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i16 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_ARGB8888_RGB888_Modulate_Blend(i26) {
 i26 = i26 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i27 = 0;
 i1 = HEAP32[i26 + 52 >> 2] | 0;
 i24 = HEAPU8[i26 + 60 >> 0] | 0;
 i25 = HEAPU8[i26 + 61 >> 0] | 0;
 i14 = HEAPU8[i26 + 62 >> 0] | 0;
 i15 = HEAPU8[i26 + 63 >> 0] | 0;
 i16 = i26 + 28 | 0;
 i23 = HEAP32[i16 >> 2] | 0;
 i2 = i23 + -1 | 0;
 HEAP32[i16 >> 2] = i2;
 if (!i23) return;
 i17 = i26 + 20 | 0;
 i18 = i26 + 24 | 0;
 i19 = i26 + 12 | 0;
 i20 = i26 + 32 | 0;
 i21 = (i1 & 1 | 0) == 0;
 i22 = (i1 & 2 | 0) == 0;
 i23 = (i1 & 48 | 0) != 0;
 i13 = i1 & 112;
 do {
  i1 = HEAP32[i18 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i26 >> 2] | 0;
   i1 = HEAP32[i17 >> 2] | 0;
   i3 = i2;
  } else {
   i12 = HEAP32[i17 >> 2] | 0;
   i4 = HEAP32[i26 >> 2] | 0;
   i10 = i12;
   i11 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i8 = HEAP32[i11 >> 2] | 0;
    i7 = i8 >>> 16 & 255;
    i6 = i8 >>> 8 & 255;
    i5 = i8 & 255;
    i8 = i8 >>> 24;
    i9 = HEAP32[i10 >> 2] | 0;
    i2 = i9 >>> 16 & 255;
    i3 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    if (!i21) {
     i5 = ((Math_imul(i5, i14) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i25) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i24) | 0) >>> 0) / 255 | 0;
    }
    i27 = ((Math_imul(i8, i15) | 0) >>> 0) / 255 | 0;
    i8 = i22 ? i8 : i27;
    if (i23 & i8 >>> 0 < 255) {
     i5 = ((Math_imul(i8, i5) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i8, i6) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i8, i7) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 | 0) {
    case 16:
     {
      i27 = 255 - i8 | 0;
      i5 = (((Math_imul(i27, i9) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i3 = (((Math_imul(i27, i3) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i27, i2) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i3 = i6 + i3 | 0;
      i5 = i5 + i9 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i9;
    }
    HEAP32[i10 >> 2] = i3 << 8 | i2 << 16 | i5;
    if (!i1) break; else {
     i10 = i10 + 4 | 0;
     i11 = i11 + 4 | 0;
    }
   }
   i1 = i12;
   i3 = HEAP32[i16 >> 2] | 0;
  }
  HEAP32[i26 >> 2] = i4 + (HEAP32[i19 >> 2] | 0);
  HEAP32[i17 >> 2] = i1 + (HEAP32[i20 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i16 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_ARGB8888_BGR888_Modulate_Blend(i26) {
 i26 = i26 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i27 = 0;
 i1 = HEAP32[i26 + 52 >> 2] | 0;
 i24 = HEAPU8[i26 + 60 >> 0] | 0;
 i25 = HEAPU8[i26 + 61 >> 0] | 0;
 i14 = HEAPU8[i26 + 62 >> 0] | 0;
 i15 = HEAPU8[i26 + 63 >> 0] | 0;
 i16 = i26 + 28 | 0;
 i23 = HEAP32[i16 >> 2] | 0;
 i2 = i23 + -1 | 0;
 HEAP32[i16 >> 2] = i2;
 if (!i23) return;
 i17 = i26 + 20 | 0;
 i18 = i26 + 24 | 0;
 i19 = i26 + 12 | 0;
 i20 = i26 + 32 | 0;
 i21 = (i1 & 1 | 0) == 0;
 i22 = (i1 & 2 | 0) == 0;
 i23 = (i1 & 48 | 0) != 0;
 i13 = i1 & 112;
 do {
  i1 = HEAP32[i18 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i26 >> 2] | 0;
   i1 = HEAP32[i17 >> 2] | 0;
   i3 = i2;
  } else {
   i12 = HEAP32[i17 >> 2] | 0;
   i4 = HEAP32[i26 >> 2] | 0;
   i10 = i12;
   i11 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i8 = HEAP32[i11 >> 2] | 0;
    i7 = i8 >>> 16 & 255;
    i6 = i8 >>> 8 & 255;
    i5 = i8 & 255;
    i8 = i8 >>> 24;
    i2 = HEAP32[i10 >> 2] | 0;
    i9 = i2 >>> 16 & 255;
    i3 = i2 >>> 8 & 255;
    i2 = i2 & 255;
    if (!i21) {
     i5 = ((Math_imul(i5, i14) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i25) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i24) | 0) >>> 0) / 255 | 0;
    }
    i27 = ((Math_imul(i8, i15) | 0) >>> 0) / 255 | 0;
    i8 = i22 ? i8 : i27;
    if (i23 & i8 >>> 0 < 255) {
     i5 = ((Math_imul(i8, i5) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i8, i6) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i8, i7) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 | 0) {
    case 16:
     {
      i27 = 255 - i8 | 0;
      i5 = (((Math_imul(i27, i9) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i3 = (((Math_imul(i27, i3) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i27, i2) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i3 = i6 + i3 | 0;
      i5 = i5 + i9 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i9;
    }
    HEAP32[i10 >> 2] = i3 << 8 | i2 | i5 << 16;
    if (!i1) break; else {
     i10 = i10 + 4 | 0;
     i11 = i11 + 4 | 0;
    }
   }
   i1 = i12;
   i3 = HEAP32[i16 >> 2] | 0;
  }
  HEAP32[i26 >> 2] = i4 + (HEAP32[i19 >> 2] | 0);
  HEAP32[i17 >> 2] = i1 + (HEAP32[i20 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i16 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_ABGR8888_RGB888_Modulate_Blend(i26) {
 i26 = i26 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i27 = 0;
 i1 = HEAP32[i26 + 52 >> 2] | 0;
 i24 = HEAPU8[i26 + 60 >> 0] | 0;
 i25 = HEAPU8[i26 + 61 >> 0] | 0;
 i14 = HEAPU8[i26 + 62 >> 0] | 0;
 i15 = HEAPU8[i26 + 63 >> 0] | 0;
 i16 = i26 + 28 | 0;
 i23 = HEAP32[i16 >> 2] | 0;
 i2 = i23 + -1 | 0;
 HEAP32[i16 >> 2] = i2;
 if (!i23) return;
 i17 = i26 + 20 | 0;
 i18 = i26 + 24 | 0;
 i19 = i26 + 12 | 0;
 i20 = i26 + 32 | 0;
 i21 = (i1 & 1 | 0) == 0;
 i22 = (i1 & 2 | 0) == 0;
 i23 = (i1 & 48 | 0) != 0;
 i13 = i1 & 112;
 do {
  i1 = HEAP32[i18 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i26 >> 2] | 0;
   i1 = HEAP32[i17 >> 2] | 0;
   i3 = i2;
  } else {
   i12 = HEAP32[i17 >> 2] | 0;
   i4 = HEAP32[i26 >> 2] | 0;
   i10 = i12;
   i11 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i8 = HEAP32[i11 >> 2] | 0;
    i5 = i8 >>> 16 & 255;
    i6 = i8 >>> 8 & 255;
    i7 = i8 & 255;
    i8 = i8 >>> 24;
    i9 = HEAP32[i10 >> 2] | 0;
    i2 = i9 >>> 16 & 255;
    i3 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    if (!i21) {
     i5 = ((Math_imul(i5, i14) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i25) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i24) | 0) >>> 0) / 255 | 0;
    }
    i27 = ((Math_imul(i8, i15) | 0) >>> 0) / 255 | 0;
    i8 = i22 ? i8 : i27;
    if (i23 & i8 >>> 0 < 255) {
     i5 = ((Math_imul(i8, i5) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i8, i6) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i8, i7) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 | 0) {
    case 16:
     {
      i27 = 255 - i8 | 0;
      i5 = (((Math_imul(i27, i9) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i3 = (((Math_imul(i27, i3) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i27, i2) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i3 = i6 + i3 | 0;
      i5 = i5 + i9 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i9;
    }
    HEAP32[i10 >> 2] = i3 << 8 | i2 << 16 | i5;
    if (!i1) break; else {
     i10 = i10 + 4 | 0;
     i11 = i11 + 4 | 0;
    }
   }
   i1 = i12;
   i3 = HEAP32[i16 >> 2] | 0;
  }
  HEAP32[i26 >> 2] = i4 + (HEAP32[i19 >> 2] | 0);
  HEAP32[i17 >> 2] = i1 + (HEAP32[i20 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i16 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_ABGR8888_BGR888_Modulate_Blend(i26) {
 i26 = i26 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i27 = 0;
 i1 = HEAP32[i26 + 52 >> 2] | 0;
 i24 = HEAPU8[i26 + 60 >> 0] | 0;
 i25 = HEAPU8[i26 + 61 >> 0] | 0;
 i14 = HEAPU8[i26 + 62 >> 0] | 0;
 i15 = HEAPU8[i26 + 63 >> 0] | 0;
 i16 = i26 + 28 | 0;
 i23 = HEAP32[i16 >> 2] | 0;
 i2 = i23 + -1 | 0;
 HEAP32[i16 >> 2] = i2;
 if (!i23) return;
 i17 = i26 + 20 | 0;
 i18 = i26 + 24 | 0;
 i19 = i26 + 12 | 0;
 i20 = i26 + 32 | 0;
 i21 = (i1 & 1 | 0) == 0;
 i22 = (i1 & 2 | 0) == 0;
 i23 = (i1 & 48 | 0) != 0;
 i13 = i1 & 112;
 do {
  i1 = HEAP32[i18 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i26 >> 2] | 0;
   i1 = HEAP32[i17 >> 2] | 0;
   i3 = i2;
  } else {
   i12 = HEAP32[i17 >> 2] | 0;
   i4 = HEAP32[i26 >> 2] | 0;
   i10 = i12;
   i11 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i8 = HEAP32[i11 >> 2] | 0;
    i5 = i8 >>> 16 & 255;
    i6 = i8 >>> 8 & 255;
    i7 = i8 & 255;
    i8 = i8 >>> 24;
    i2 = HEAP32[i10 >> 2] | 0;
    i9 = i2 >>> 16 & 255;
    i3 = i2 >>> 8 & 255;
    i2 = i2 & 255;
    if (!i21) {
     i5 = ((Math_imul(i5, i14) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i25) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i24) | 0) >>> 0) / 255 | 0;
    }
    i27 = ((Math_imul(i8, i15) | 0) >>> 0) / 255 | 0;
    i8 = i22 ? i8 : i27;
    if (i23 & i8 >>> 0 < 255) {
     i5 = ((Math_imul(i8, i5) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i8, i6) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i8, i7) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 | 0) {
    case 16:
     {
      i27 = 255 - i8 | 0;
      i5 = (((Math_imul(i27, i9) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i3 = (((Math_imul(i27, i3) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i27, i2) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i3 = i6 + i3 | 0;
      i5 = i5 + i9 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i9;
    }
    HEAP32[i10 >> 2] = i3 << 8 | i2 | i5 << 16;
    if (!i1) break; else {
     i10 = i10 + 4 | 0;
     i11 = i11 + 4 | 0;
    }
   }
   i1 = i12;
   i3 = HEAP32[i16 >> 2] | 0;
  }
  HEAP32[i26 >> 2] = i4 + (HEAP32[i19 >> 2] | 0);
  HEAP32[i17 >> 2] = i1 + (HEAP32[i20 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i16 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i4, i9, i12, i7, i10, i2, i3, i8, i13, i14, i11, i5) {
 i4 = i4 | 0;
 i9 = i9 | 0;
 i12 = i12 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i11 = i11 | 0;
 i5 = i5 | 0;
 var i1 = 0, i6 = 0;
 L1 : do if (i4 << 24 >> 24 == i2 << 24 >> 24) if (HEAP8[i9 >> 0] | 0) {
  HEAP8[i9 >> 0] = 0;
  i12 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i12 + 1;
  HEAP8[i12 >> 0] = 46;
  i12 = HEAP8[i8 >> 0] | 0;
  if ((((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i8 + 4 >> 2] | 0) | 0) != 0 ? (i1 = HEAP32[i14 >> 2] | 0, (i1 - i13 | 0) < 160) : 0) {
   i13 = HEAP32[i11 >> 2] | 0;
   HEAP32[i14 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i13;
   i1 = 0;
  } else i1 = 0;
 } else i1 = -1; else {
  if (i4 << 24 >> 24 == i3 << 24 >> 24 ? (i3 = HEAP8[i8 >> 0] | 0, (((i3 & 1) == 0 ? (i3 & 255) >>> 1 : HEAP32[i8 + 4 >> 2] | 0) | 0) != 0) : 0) {
   if (!(HEAP8[i9 >> 0] | 0)) {
    i1 = -1;
    break;
   }
   i1 = HEAP32[i14 >> 2] | 0;
   if ((i1 - i13 | 0) >= 160) {
    i1 = 0;
    break;
   }
   i13 = HEAP32[i11 >> 2] | 0;
   HEAP32[i14 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i13;
   HEAP32[i11 >> 2] = 0;
   i1 = 0;
   break;
  }
  i2 = i5 + 32 | 0;
  i1 = i5;
  while (1) {
   if ((HEAP8[i1 >> 0] | 0) == i4 << 24 >> 24) break;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) == (i2 | 0)) {
    i1 = i2;
    break;
   }
  }
  i2 = i1 - i5 | 0;
  if ((i2 | 0) > 31) i1 = -1; else {
   i3 = HEAP8[61569 + i2 >> 0] | 0;
   switch (i2 | 0) {
   case 24:
   case 25:
    {
     i1 = HEAP32[i10 >> 2] | 0;
     if ((i1 | 0) != (i7 | 0) ? (HEAPU8[i1 + -1 >> 0] & 95 | 0) != (HEAPU8[i12 >> 0] & 127 | 0) : 0) {
      i1 = -1;
      break L1;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3;
     i1 = 0;
     break L1;
    }
   case 23:
   case 22:
    {
     HEAP8[i12 >> 0] = 80;
     i1 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3;
     i1 = 0;
     break L1;
    }
   default:
    {
     i1 = i3 & 95;
     if ((((i1 | 0) == (HEAP8[i12 >> 0] | 0) ? (HEAP8[i12 >> 0] = i1 | 128, (HEAP8[i9 >> 0] | 0) != 0) : 0) ? (HEAP8[i9 >> 0] = 0, i12 = HEAP8[i8 >> 0] | 0, (((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i8 + 4 >> 2] | 0) | 0) != 0) : 0) ? (i6 = HEAP32[i14 >> 2] | 0, (i6 - i13 | 0) < 160) : 0) {
      i13 = HEAP32[i11 >> 2] | 0;
      HEAP32[i14 >> 2] = i6 + 4;
      HEAP32[i6 >> 2] = i13;
     }
     i14 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i14 + 1;
     HEAP8[i14 >> 0] = i3;
     if ((i2 | 0) > 21) {
      i1 = 0;
      break L1;
     }
     HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
     i1 = 0;
     break L1;
    }
   }
  }
 } while (0);
 return i1 | 0;
}

function _SDL_RenderCopy(i11, i12, i1, i6) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0, d14 = 0.0, d15 = 0.0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i5 = i13 + 24 | 0;
 i4 = i13 + 16 | 0;
 i3 = i13 + 8 | 0;
 i2 = i13;
 i10 = i13 + 64 | 0;
 i9 = i13 + 48 | 0;
 i8 = i13 + 32 | 0;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 HEAP32[i10 + 12 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = 0;
 HEAP32[i9 + 12 >> 2] = 0;
 if ((i11 | 0) != 0 ? (HEAP32[i11 >> 2] | 0) == 37791 : 0) {
  if ((i12 | 0) != 0 ? (HEAP32[i12 >> 2] | 0) == 37830 : 0) {
   if ((HEAP32[i12 + 32 >> 2] | 0) != (i11 | 0)) {
    i12 = _SDL_SetError(38082, i4) | 0;
    STACKTOP = i13;
    return i12 | 0;
   }
   HEAP32[i10 >> 2] = 0;
   HEAP32[i10 + 4 >> 2] = 0;
   HEAP32[i10 + 8 >> 2] = HEAP32[i12 + 12 >> 2];
   HEAP32[i10 + 12 >> 2] = HEAP32[i12 + 16 >> 2];
   if (i1) {
    if (!(_SDL_IntersectRect(i1, i10, i10) | 0)) {
     i12 = 0;
     STACKTOP = i13;
     return i12 | 0;
    }
    if ((HEAP32[i11 >> 2] | 0) != 37791) {
     _SDL_SetError(37792, i5) | 0;
     i2 = i9 + 4 | 0;
     i3 = i9;
    } else i7 = 13;
   } else i7 = 13;
   if ((i7 | 0) == 13) {
    d15 = +HEAPF32[i11 + 284 >> 2];
    HEAP32[i9 >> 2] = ~~(+(HEAP32[i11 + 212 >> 2] | 0) / d15);
    d14 = +HEAPF32[i11 + 288 >> 2];
    i2 = i9 + 4 | 0;
    HEAP32[i2 >> 2] = ~~(+(HEAP32[i11 + 216 >> 2] | 0) / d14);
    HEAP32[i9 + 8 >> 2] = ~~(+(HEAP32[i11 + 220 >> 2] | 0) / d15);
    HEAP32[i9 + 12 >> 2] = ~~(+(HEAP32[i11 + 224 >> 2] | 0) / d14);
    i3 = i9;
   }
   HEAP32[i3 >> 2] = 0;
   HEAP32[i2 >> 2] = 0;
   do if (i6) if (!(_SDL_HasIntersection(i6, i9) | 0)) {
    i12 = 0;
    STACKTOP = i13;
    return i12 | 0;
   } else {
    HEAP32[i9 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i9 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
    HEAP32[i9 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
    HEAP32[i9 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
    break;
   } while (0);
   i1 = HEAP32[i12 + 36 >> 2] | 0;
   if (HEAP32[i11 + 192 >> 2] | 0) {
    i12 = 0;
    STACKTOP = i13;
    return i12 | 0;
   }
   d14 = +HEAPF32[i11 + 284 >> 2];
   HEAPF32[i8 >> 2] = +(HEAP32[i3 >> 2] | 0) * d14;
   d15 = +HEAPF32[i11 + 288 >> 2];
   HEAPF32[i8 + 4 >> 2] = +(HEAP32[i2 >> 2] | 0) * d15;
   HEAPF32[i8 + 8 >> 2] = +(HEAP32[i9 + 8 >> 2] | 0) * d14;
   HEAPF32[i8 + 12 >> 2] = +(HEAP32[i9 + 12 >> 2] | 0) * d15;
   i12 = FUNCTION_TABLE_iiiii[HEAP32[i11 + 72 >> 2] & 31](i11, (i1 | 0) == 0 ? i12 : i1, i10, i8) | 0;
   STACKTOP = i13;
   return i12 | 0;
  }
  _SDL_SetError(37831, i3) | 0;
  i12 = -1;
  STACKTOP = i13;
  return i12 | 0;
 }
 _SDL_SetError(37792, i2) | 0;
 i12 = -1;
 STACKTOP = i13;
 return i12 | 0;
}

function _SDL_SendMouseButton(i13, i11, i12, i9) {
 i13 = i13 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i10 = i14;
 i5 = HEAP32[3023] | 0;
 i6 = i9 & 255;
 if ((i6 | 0) >= (HEAP32[3026] | 0)) {
  i4 = i6 + 1 | 0;
  i3 = _SDL_realloc(HEAP32[3027] | 0, i4 << 4) | 0;
  if (!i3) i7 = 0; else {
   HEAP32[3027] = i3;
   i2 = HEAP32[3026] | 0;
   if ((i2 | 0) < (i4 | 0) ? (_SDL_memset(i3 + (i2 << 4) | 0, 0, 16) | 0, i1 = i2 + 1 | 0, (i1 | 0) != (i4 | 0)) : 0) do {
    _SDL_memset((HEAP32[3027] | 0) + (i1 << 4) | 0, 0, 16) | 0;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != (i4 | 0));
   HEAP32[3026] = i4;
   i2 = 7;
  }
 } else i2 = 7;
 if ((i2 | 0) == 7) i7 = (HEAP32[3027] | 0) + (i6 << 4) | 0;
 switch (i12 & 255 | 0) {
 case 1:
  {
   i2 = i5 | 1 << i6 + -1;
   i5 = 1025;
   break;
  }
 case 0:
  {
   i2 = i5 & ~(1 << i6 + -1);
   i5 = 1026;
   break;
  }
 default:
  {
   i13 = 0;
   STACKTOP = i14;
   return i13 | 0;
  }
 }
 i6 = (i13 | 0) != 0;
 i1 = i12 << 24 >> 24 == 1;
 if (i6 & i1) _SDL_UpdateMouseFocus(i13, HEAP32[3017] | 0, HEAP32[3018] | 0) | 0;
 if ((i2 | 0) == (HEAP32[3023] | 0)) {
  i13 = 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 HEAP32[3023] = i2;
 do if (!i7) i2 = 1; else {
  if (!i1) {
   i2 = HEAP8[i7 + 12 >> 0] | 0;
   break;
  }
  i3 = _SDL_GetTicks() | 0;
  i4 = i7 + 8 | 0;
  if ((((HEAP32[i4 >> 2] | 0) - i3 + (HEAP32[3033] | 0) | 0) >= 1 ? (_SDL_abs((HEAP32[3017] | 0) - (HEAP32[i7 >> 2] | 0) | 0) | 0) <= 1 : 0) ? (i8 = i7 + 4 | 0, (_SDL_abs((HEAP32[3018] | 0) - (HEAP32[i8 >> 2] | 0) | 0) | 0) <= 1) : 0) {
   i2 = i7 + 12 | 0;
   i1 = HEAP8[i2 >> 0] | 0;
   HEAP32[i4 >> 2] = i3;
   HEAP32[i7 >> 2] = HEAP32[3017];
   HEAP32[i8 >> 2] = HEAP32[3018];
   if (i1 << 24 >> 24 == -1) {
    i2 = -1;
    break;
   }
  } else {
   i2 = i7 + 12 | 0;
   HEAP8[i2 >> 0] = 0;
   HEAP32[i4 >> 2] = i3;
   HEAP32[i7 >> 2] = HEAP32[3017];
   HEAP32[i7 + 4 >> 2] = HEAP32[3018];
   i1 = 0;
  }
  i8 = i1 + 1 << 24 >> 24;
  HEAP8[i2 >> 0] = i8;
  i2 = i8;
 } while (0);
 if ((_SDL_EventState(i5, -1) | 0) << 24 >> 24 == 1) {
  HEAP32[i10 >> 2] = i5;
  i1 = HEAP32[3016] | 0;
  if (!i1) i1 = 0; else i1 = HEAP32[i1 + 4 >> 2] | 0;
  HEAP32[i10 + 8 >> 2] = i1;
  HEAP32[i10 + 12 >> 2] = i11;
  HEAP8[i10 + 17 >> 0] = i12;
  HEAP8[i10 + 16 >> 0] = i9;
  HEAP8[i10 + 18 >> 0] = i2;
  HEAP32[i10 + 20 >> 2] = HEAP32[3017];
  HEAP32[i10 + 24 >> 2] = HEAP32[3018];
  i1 = (_SDL_PushEvent(i10) | 0) > 0 & 1;
 } else i1 = 0;
 if (!(i6 & i12 << 24 >> 24 == 0)) {
  i13 = i1;
  STACKTOP = i14;
  return i13 | 0;
 }
 _SDL_UpdateMouseFocus(i13, HEAP32[3017] | 0, HEAP32[3018] | 0) | 0;
 i13 = i1;
 STACKTOP = i14;
 return i13 | 0;
}

function _Blit_RGB888_RGB565(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = HEAP32[i3 + 24 >> 2] | 0;
 i2 = HEAP32[i3 + 28 >> 2] | 0;
 i8 = (HEAP32[i3 + 16 >> 2] | 0) / 4 | 0;
 i9 = (HEAP32[i3 + 36 >> 2] | 0) / 2 | 0;
 if (!i2) return;
 i7 = (i1 + 7 | 0) / 8 | 0;
 i6 = i1 & 7;
 i1 = HEAP32[i3 + 20 >> 2] | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 L4 : while (1) {
  i2 = i2 + -1 | 0;
  switch (i6 | 0) {
  case 0:
   {
    i4 = i7;
    i5 = 4;
    break;
   }
  case 7:
   {
    i4 = i7;
    i5 = 5;
    break;
   }
  case 6:
   {
    i4 = i7;
    i5 = 6;
    break;
   }
  case 5:
   {
    i4 = i7;
    i5 = 7;
    break;
   }
  case 4:
   {
    i4 = i7;
    i5 = 8;
    break;
   }
  case 3:
   {
    i4 = i7;
    i5 = 9;
    break;
   }
  case 2:
   {
    i4 = i7;
    i5 = 10;
    break;
   }
  case 1:
   {
    i4 = i7;
    i5 = 11;
    break;
   }
  default:
   i5 = 12;
  }
  while (1) if ((i5 | 0) == 4) {
   i10 = HEAP32[i3 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 8 & 63488 | i10 >>> 5 & 2016 | i10 >>> 3 & 31;
   i1 = i1 + 2 | 0;
   i3 = i3 + 4 | 0;
   i5 = 5;
   continue;
  } else if ((i5 | 0) == 5) {
   i10 = HEAP32[i3 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 8 & 63488 | i10 >>> 5 & 2016 | i10 >>> 3 & 31;
   i1 = i1 + 2 | 0;
   i3 = i3 + 4 | 0;
   i5 = 6;
   continue;
  } else if ((i5 | 0) == 6) {
   i10 = HEAP32[i3 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 8 & 63488 | i10 >>> 5 & 2016 | i10 >>> 3 & 31;
   i1 = i1 + 2 | 0;
   i3 = i3 + 4 | 0;
   i5 = 7;
   continue;
  } else if ((i5 | 0) == 7) {
   i10 = HEAP32[i3 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 8 & 63488 | i10 >>> 5 & 2016 | i10 >>> 3 & 31;
   i1 = i1 + 2 | 0;
   i3 = i3 + 4 | 0;
   i5 = 8;
   continue;
  } else if ((i5 | 0) == 8) {
   i10 = HEAP32[i3 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 8 & 63488 | i10 >>> 5 & 2016 | i10 >>> 3 & 31;
   i1 = i1 + 2 | 0;
   i3 = i3 + 4 | 0;
   i5 = 9;
   continue;
  } else if ((i5 | 0) == 9) {
   i10 = HEAP32[i3 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 8 & 63488 | i10 >>> 5 & 2016 | i10 >>> 3 & 31;
   i1 = i1 + 2 | 0;
   i3 = i3 + 4 | 0;
   i5 = 10;
   continue;
  } else if ((i5 | 0) == 10) {
   i10 = HEAP32[i3 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 8 & 63488 | i10 >>> 5 & 2016 | i10 >>> 3 & 31;
   i1 = i1 + 2 | 0;
   i3 = i3 + 4 | 0;
   i5 = 11;
   continue;
  } else if ((i5 | 0) == 11) {
   i10 = HEAP32[i3 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 8 & 63488 | i10 >>> 5 & 2016 | i10 >>> 3 & 31;
   i3 = i3 + 4 | 0;
   i1 = i1 + 2 | 0;
   if ((i4 | 0) > 1) {
    i4 = i4 + -1 | 0;
    i5 = 4;
    continue;
   } else {
    i5 = 12;
    continue;
   }
  } else if ((i5 | 0) == 12) if (!i2) break L4; else {
   i1 = i1 + (i9 << 1) | 0;
   i3 = i3 + (i8 << 2) | 0;
   continue L4;
  }
 }
 return;
}

function _Blit_RGB888_RGB555(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = HEAP32[i3 + 24 >> 2] | 0;
 i2 = HEAP32[i3 + 28 >> 2] | 0;
 i8 = (HEAP32[i3 + 16 >> 2] | 0) / 4 | 0;
 i9 = (HEAP32[i3 + 36 >> 2] | 0) / 2 | 0;
 if (!i2) return;
 i7 = (i1 + 7 | 0) / 8 | 0;
 i6 = i1 & 7;
 i1 = HEAP32[i3 + 20 >> 2] | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 L4 : while (1) {
  i2 = i2 + -1 | 0;
  switch (i6 | 0) {
  case 0:
   {
    i4 = i7;
    i5 = 4;
    break;
   }
  case 7:
   {
    i4 = i7;
    i5 = 5;
    break;
   }
  case 6:
   {
    i4 = i7;
    i5 = 6;
    break;
   }
  case 5:
   {
    i4 = i7;
    i5 = 7;
    break;
   }
  case 4:
   {
    i4 = i7;
    i5 = 8;
    break;
   }
  case 3:
   {
    i4 = i7;
    i5 = 9;
    break;
   }
  case 2:
   {
    i4 = i7;
    i5 = 10;
    break;
   }
  case 1:
   {
    i4 = i7;
    i5 = 11;
    break;
   }
  default:
   i5 = 12;
  }
  while (1) if ((i5 | 0) == 4) {
   i10 = HEAP32[i3 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 9 & 31744 | i10 >>> 6 & 992 | i10 >>> 3 & 31;
   i1 = i1 + 2 | 0;
   i3 = i3 + 4 | 0;
   i5 = 5;
   continue;
  } else if ((i5 | 0) == 5) {
   i10 = HEAP32[i3 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 9 & 31744 | i10 >>> 6 & 992 | i10 >>> 3 & 31;
   i1 = i1 + 2 | 0;
   i3 = i3 + 4 | 0;
   i5 = 6;
   continue;
  } else if ((i5 | 0) == 6) {
   i10 = HEAP32[i3 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 9 & 31744 | i10 >>> 6 & 992 | i10 >>> 3 & 31;
   i1 = i1 + 2 | 0;
   i3 = i3 + 4 | 0;
   i5 = 7;
   continue;
  } else if ((i5 | 0) == 7) {
   i10 = HEAP32[i3 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 9 & 31744 | i10 >>> 6 & 992 | i10 >>> 3 & 31;
   i1 = i1 + 2 | 0;
   i3 = i3 + 4 | 0;
   i5 = 8;
   continue;
  } else if ((i5 | 0) == 8) {
   i10 = HEAP32[i3 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 9 & 31744 | i10 >>> 6 & 992 | i10 >>> 3 & 31;
   i1 = i1 + 2 | 0;
   i3 = i3 + 4 | 0;
   i5 = 9;
   continue;
  } else if ((i5 | 0) == 9) {
   i10 = HEAP32[i3 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 9 & 31744 | i10 >>> 6 & 992 | i10 >>> 3 & 31;
   i1 = i1 + 2 | 0;
   i3 = i3 + 4 | 0;
   i5 = 10;
   continue;
  } else if ((i5 | 0) == 10) {
   i10 = HEAP32[i3 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 9 & 31744 | i10 >>> 6 & 992 | i10 >>> 3 & 31;
   i1 = i1 + 2 | 0;
   i3 = i3 + 4 | 0;
   i5 = 11;
   continue;
  } else if ((i5 | 0) == 11) {
   i10 = HEAP32[i3 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 9 & 31744 | i10 >>> 6 & 992 | i10 >>> 3 & 31;
   i3 = i3 + 4 | 0;
   i1 = i1 + 2 | 0;
   if ((i4 | 0) > 1) {
    i4 = i4 + -1 | 0;
    i5 = 4;
    continue;
   } else {
    i5 = 12;
    continue;
   }
  } else if ((i5 | 0) == 12) if (!i2) break L4; else {
   i1 = i1 + (i9 << 1) | 0;
   i3 = i3 + (i8 << 2) | 0;
   continue L4;
  }
 }
 return;
}

function _GLES2_RenderFillRects(i1, i15, i14) {
 i1 = i1 | 0;
 i15 = i15 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i16 = 0, i17 = 0, i18 = 0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i17 = i18;
 i16 = i18 + 24 | 0;
 i13 = i1 + 316 | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 if ((_GLES2_SetDrawingState(i1) | 0) < 0) {
  i17 = -1;
  STACKTOP = i18;
  return i17 | 0;
 }
 if ((i14 | 0) > 0) {
  i8 = i16 + 4 | 0;
  i9 = i16 + 8 | 0;
  i10 = i16 + 12 | 0;
  i11 = i16 + 16 | 0;
  i12 = i16 + 20 | 0;
  i6 = i16 + 24 | 0;
  i7 = i16 + 28 | 0;
  i3 = i2 + 76 | 0;
  i5 = 0;
  do {
   d21 = +HEAPF32[i15 + (i5 << 4) >> 2];
   d20 = d21 + +HEAPF32[i15 + (i5 << 4) + 8 >> 2];
   d22 = +HEAPF32[i15 + (i5 << 4) + 4 >> 2];
   d19 = d22 + +HEAPF32[i15 + (i5 << 4) + 12 >> 2];
   HEAPF32[i16 >> 2] = d21;
   HEAPF32[i8 >> 2] = d22;
   HEAPF32[i9 >> 2] = d20;
   HEAPF32[i10 >> 2] = d22;
   HEAPF32[i11 >> 2] = d21;
   HEAPF32[i12 >> 2] = d19;
   HEAPF32[i6 >> 2] = d20;
   HEAPF32[i7 >> 2] = d19;
   i4 = HEAP32[i13 >> 2] | 0;
   i2 = i4 + 276 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    FUNCTION_TABLE_vii[HEAP32[i4 + 216 >> 2] & 127](1, i2);
    i1 = HEAP32[i2 >> 2] | 0;
   }
   FUNCTION_TABLE_vii[HEAP32[i4 + 220 >> 2] & 127](34962, i1);
   i1 = i4 + 292 | 0;
   if ((HEAP32[i1 >> 2] | 0) >>> 0 < 32) {
    FUNCTION_TABLE_viiii[HEAP32[i4 + 224 >> 2] & 63](34962, 32, i16, 35040);
    HEAP32[i1 >> 2] = 32;
   } else FUNCTION_TABLE_viiii[HEAP32[i4 + 228 >> 2] & 63](34962, 0, 32, i16);
   FUNCTION_TABLE_viiiiii[HEAP32[i4 + 184 >> 2] & 15](0, 2, 5126, 0, 0, 0);
   FUNCTION_TABLE_viii[HEAP32[i3 >> 2] & 31](5, 0, 4);
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != (i14 | 0));
 }
 i1 = HEAP32[i13 >> 2] | 0;
 if (!(HEAP32[i1 + 4 >> 2] | 0)) {
  i17 = 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 i4 = i1 + 108 | 0;
 i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
 if (!i1) {
  i17 = 0;
  STACKTOP = i18;
  return i17 | 0;
 } else i2 = 62969;
 while (1) {
  if ((i2 | 0) != 0 ? (HEAP8[i2 >> 0] | 0) != 0 : 0) i3 = i2; else i3 = 46327;
  switch (i1 | 0) {
  case 1280:
   {
    i2 = 46398;
    break;
   }
  case 1281:
   {
    i2 = 46381;
    break;
   }
  case 1282:
   {
    i2 = 46360;
    break;
   }
  case 1285:
   {
    i2 = 46343;
    break;
   }
  default:
   i2 = 46335;
  }
  HEAP32[i17 >> 2] = i3;
  HEAP32[i17 + 4 >> 2] = 46440;
  HEAP32[i17 + 8 >> 2] = 1526;
  HEAP32[i17 + 12 >> 2] = 47247;
  HEAP32[i17 + 16 >> 2] = i2;
  HEAP32[i17 + 20 >> 2] = i1;
  _SDL_SetError(46414, i17) | 0;
  i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
  if (!i1) {
   i1 = -1;
   break;
  } else i2 = i3;
 }
 STACKTOP = i18;
 return i1 | 0;
}

function _GLES2_DestroyRenderer(i12) {
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i10 = i13;
 i7 = i12 + 316 | 0;
 i11 = HEAP32[i7 >> 2] | 0;
 if (!i11) {
  _SDL_free(i12);
  STACKTOP = i13;
  return;
 }
 i2 = HEAP32[i11 >> 2] | 0;
 if ((HEAP32[3491] | 0) != (i2 | 0)) {
  HEAP32[i11 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i12 + 188 >> 2] | 0, i2) | 0) >= 0) {
   HEAP32[3491] = HEAP32[i11 >> 2];
   _GLES2_UpdateViewport(i12) | 0;
   i1 = HEAP32[i7 >> 2] | 0;
   i3 = 5;
  }
 } else {
  i1 = i11;
  i3 = 5;
 }
 if ((i3 | 0) == 5 ? (HEAP32[i1 + 4 >> 2] | 0) != 0 : 0) {
  i1 = i1 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 7]() | 0) != 0);
 }
 i1 = HEAP32[i11 + 252 >> 2] | 0;
 if (i1) {
  i2 = i11 + 60 | 0;
  do {
   FUNCTION_TABLE_vi[HEAP32[i2 >> 2] & 511](HEAP32[i1 >> 2] | 0);
   i6 = i1;
   i1 = HEAP32[i1 + 24 >> 2] | 0;
   _SDL_free(i6);
  } while ((i1 | 0) != 0);
 }
 i1 = HEAP32[i11 + 260 >> 2] | 0;
 if (i1) {
  i2 = i11 + 56 | 0;
  do {
   FUNCTION_TABLE_vi[HEAP32[i2 >> 2] & 511](HEAP32[i1 >> 2] | 0);
   i6 = i1;
   i1 = HEAP32[i1 + 156 >> 2] | 0;
   _SDL_free(i6);
  } while ((i1 | 0) != 0);
 }
 i1 = HEAP32[i11 >> 2] | 0;
 if (i1) {
  i6 = i11 + 232 | 0;
  i2 = HEAP32[i6 >> 2] | 0;
  if (i2) {
   i5 = i11 + 204 | 0;
   do {
    i1 = i2;
    i2 = HEAP32[i2 + 12 >> 2] | 0;
    FUNCTION_TABLE_vii[HEAP32[i5 >> 2] & 127](1, i1 + 8 | 0);
    i1 = HEAP32[i7 >> 2] | 0;
    L29 : do if ((HEAP32[i1 + 4 >> 2] | 0) != 0 ? (i8 = i1 + 108 | 0, i9 = FUNCTION_TABLE_i[HEAP32[i8 >> 2] & 7]() | 0, (i9 | 0) != 0) : 0) {
     i1 = 62969;
     i4 = i9;
     while (1) {
      if (!((i1 | 0) != 0 ? (HEAP8[i1 >> 0] | 0) != 0 : 0)) i1 = 46327;
      switch (i4 | 0) {
      case 1280:
       {
        i3 = 46398;
        break;
       }
      case 1281:
       {
        i3 = 46381;
        break;
       }
      case 1282:
       {
        i3 = 46360;
        break;
       }
      case 1285:
       {
        i3 = 46343;
        break;
       }
      default:
       i3 = 46335;
      }
      HEAP32[i10 >> 2] = i1;
      HEAP32[i10 + 4 >> 2] = 46440;
      HEAP32[i10 + 8 >> 2] = 447;
      HEAP32[i10 + 12 >> 2] = 47813;
      HEAP32[i10 + 16 >> 2] = i3;
      HEAP32[i10 + 20 >> 2] = i4;
      _SDL_SetError(46414, i10) | 0;
      i4 = FUNCTION_TABLE_i[HEAP32[i8 >> 2] & 7]() | 0;
      if (!i4) break L29;
     }
    } while (0);
    _SDL_free(HEAP32[i6 >> 2] | 0);
    HEAP32[i6 >> 2] = i2;
   } while ((i2 | 0) != 0);
   i1 = HEAP32[i11 >> 2] | 0;
  }
  _SDL_GL_DeleteContext(i1);
 }
 _SDL_free(HEAP32[i11 + 244 >> 2] | 0);
 _SDL_free(i11);
 _SDL_free(i12);
 STACKTOP = i13;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i8, i9, i4) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 i1 = HEAP32[i7 >> 2] | 0;
 do if (i1) {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i7 >> 2] = 0;
   i3 = 1;
   break;
  } else {
   i3 = (HEAP32[i7 >> 2] | 0) == 0;
   break;
  }
 } else i3 = 1; while (0);
 i2 = HEAP32[i8 >> 2] | 0;
 do if (i2) {
  i1 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i3) {
   i5 = i2;
   i6 = 17;
   break;
  } else {
   i6 = 16;
   break;
  } else {
   HEAP32[i8 >> 2] = 0;
   i6 = 14;
   break;
  }
 } else i6 = 14; while (0);
 if ((i6 | 0) == 14) if (i3) i6 = 16; else {
  i5 = 0;
  i6 = 17;
 }
 L22 : do if ((i6 | 0) == 16) HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 6; else if ((i6 | 0) == 17) {
  i1 = HEAP32[i7 >> 2] | 0;
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] & 63](i4, i1, 0) | 0) << 24 >> 24 != 37) {
   HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 4;
   break;
  }
  i1 = HEAP32[i7 >> 2] | 0;
  i2 = i1 + 12 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   i1 = HEAP32[i7 >> 2] | 0;
   if (!i1) i2 = 1; else i6 = 25;
  } else {
   HEAP32[i2 >> 2] = i3 + 4;
   i6 = 25;
  }
  do if ((i6 | 0) == 25) {
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i7 >> 2] = 0;
    i2 = 1;
    break;
   } else {
    i2 = (HEAP32[i7 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  do if (i5) {
   i1 = HEAP32[i5 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i2) break L22; else break; else {
    HEAP32[i8 >> 2] = 0;
    i6 = 37;
    break;
   }
  } else i6 = 37; while (0);
  if ((i6 | 0) == 37 ? !i2 : 0) break;
  HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 2;
 } while (0);
 return;
}

function _Color24DitherYUY2Mod2X(i27, i28, i4, i3, i5, i7, i6, i2, i1) {
 i27 = i27 | 0;
 i28 = i28 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0;
 i25 = ((i2 << 1) + i1 | 0) * 3 | 0;
 i26 = (i2 | 0) / 2 | 0;
 if (!i6) return;
 i20 = (i2 + 1 | 0) >>> 0 < 3;
 i21 = i25 + 3 | 0;
 i22 = i25 + 4 | 0;
 i23 = i25 + 1 | 0;
 i24 = i25 + 5 | 0;
 i17 = i25 + 2 | 0;
 i11 = i25 + 9 | 0;
 i12 = i25 + 6 | 0;
 i13 = i25 + 10 | 0;
 i14 = i25 + 7 | 0;
 i15 = i25 + 11 | 0;
 i16 = i25 + 8 | 0;
 i18 = i26 * 12 | 0;
 i19 = i26 << 2;
 i2 = i5;
 i1 = i7;
 while (1) {
  i6 = i6 + -1 | 0;
  if (!i20) {
   i10 = i1 + i18 | 0;
   i9 = i2 + i19 | 0;
   i7 = i4;
   i8 = i3;
   i5 = i26;
   while (1) {
    i5 = i5 + -1 | 0;
    i32 = HEAPU8[i8 >> 0] | 0;
    i31 = (HEAP32[i27 + (i32 << 2) >> 2] | 0) + 256 | 0;
    i29 = HEAPU8[i2 >> 0] | 0;
    i32 = (HEAP32[i27 + ((i32 | 256) << 2) >> 2] | 0) + 1024 + (HEAP32[i27 + ((i29 | 512) << 2) >> 2] | 0) | 0;
    i29 = (HEAP32[i27 + ((i29 | 768) << 2) >> 2] | 0) + 1792 | 0;
    i30 = HEAPU8[i7 >> 0] | 0;
    i30 = HEAP32[i28 + (i30 + i32 << 2) >> 2] | HEAP32[i28 + (i30 + i31 << 2) >> 2] | HEAP32[i28 + (i30 + i29 << 2) >> 2];
    i33 = i30 & 255;
    HEAP8[i1 + i21 >> 0] = i33;
    HEAP8[i1 + i25 >> 0] = i33;
    HEAP8[i1 + 3 >> 0] = i33;
    HEAP8[i1 >> 0] = i33;
    i33 = i30 >>> 8 & 255;
    HEAP8[i1 + i22 >> 0] = i33;
    HEAP8[i1 + i23 >> 0] = i33;
    HEAP8[i1 + 4 >> 0] = i33;
    HEAP8[i1 + 1 >> 0] = i33;
    i30 = i30 >>> 16 & 255;
    HEAP8[i1 + i24 >> 0] = i30;
    HEAP8[i1 + i17 >> 0] = i30;
    HEAP8[i1 + 5 >> 0] = i30;
    HEAP8[i1 + 2 >> 0] = i30;
    i30 = HEAPU8[i7 + 2 >> 0] | 0;
    i29 = HEAP32[i28 + (i30 + i32 << 2) >> 2] | HEAP32[i28 + (i30 + i31 << 2) >> 2] | HEAP32[i28 + (i30 + i29 << 2) >> 2];
    i30 = i29 & 255;
    HEAP8[i1 + i11 >> 0] = i30;
    HEAP8[i1 + i12 >> 0] = i30;
    HEAP8[i1 + 9 >> 0] = i30;
    HEAP8[i1 + 6 >> 0] = i30;
    i30 = i29 >>> 8 & 255;
    HEAP8[i1 + i13 >> 0] = i30;
    HEAP8[i1 + i14 >> 0] = i30;
    HEAP8[i1 + 10 >> 0] = i30;
    HEAP8[i1 + 7 >> 0] = i30;
    i29 = i29 >>> 16 & 255;
    HEAP8[i1 + i15 >> 0] = i29;
    HEAP8[i1 + i16 >> 0] = i29;
    HEAP8[i1 + 11 >> 0] = i29;
    HEAP8[i1 + 8 >> 0] = i29;
    if (!i5) break; else {
     i7 = i7 + 4 | 0;
     i8 = i8 + 4 | 0;
     i2 = i2 + 4 | 0;
     i1 = i1 + 12 | 0;
    }
   }
   i4 = i4 + i19 | 0;
   i3 = i3 + i19 | 0;
   i2 = i9;
   i1 = i10;
  }
  if (!i6) break; else i1 = i1 + i25 | 0;
 }
 return;
}

function _trinkle(i4, i14, i12, i1, i3, i2, i13) {
 i4 = i4 | 0;
 i14 = i14 | 0;
 i12 = i12 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i13 = i13 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i11 = i16;
 i6 = HEAP32[i1 >> 2] | 0;
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[i11 >> 2] = i4;
 i10 = 0 - i14 | 0;
 L1 : do if ((i1 | 0) != 0 | (i6 | 0) != 1 ? (i5 = i4 + (0 - (HEAP32[i13 + (i3 << 2) >> 2] | 0)) | 0, (FUNCTION_TABLE_iii[i12 & 63](i5, i4) | 0) >= 1) : 0) {
  i2 = (i2 | 0) == 0;
  i9 = i5;
  i7 = i6;
  i8 = i1;
  i5 = 1;
  while (1) {
   if (i2 & (i3 | 0) > 1) {
    i1 = HEAP32[i13 + (i3 + -2 << 2) >> 2] | 0;
    if ((FUNCTION_TABLE_iii[i12 & 63](i4 + i10 | 0, i9) | 0) > -1) {
     i2 = i3;
     i1 = i5;
     i15 = 20;
     break L1;
    }
    if ((FUNCTION_TABLE_iii[i12 & 63](i4 + (0 - (i1 + i14)) | 0, i9) | 0) > -1) {
     i2 = i3;
     i1 = i5;
     i15 = 20;
     break L1;
    }
   }
   i1 = i5 + 1 | 0;
   HEAP32[i11 + (i5 << 2) >> 2] = i9;
   i2 = i7 + -1 | 0;
   do if (i2) {
    if (!(i2 & 1)) {
     i4 = i2;
     i2 = 0;
     do {
      i2 = i2 + 1 | 0;
      i4 = i4 >>> 1;
     } while ((i4 & 1 | 0) == 0);
     if (!i2) i15 = 11;
    } else i15 = 11;
    if ((i15 | 0) == 11) {
     i15 = 0;
     if (!i8) {
      i2 = 64;
      i15 = 16;
      break;
     }
     if (!(i8 & 1)) {
      i4 = i8;
      i2 = 0;
     } else {
      i6 = 0;
      i4 = i7;
      i5 = i8;
      i2 = 0;
      break;
     }
     while (1) {
      i5 = i2 + 1 | 0;
      i4 = i4 >>> 1;
      if (i4 & 1) {
       i4 = i5;
       break;
      } else i2 = i5;
     }
     if (!i4) {
      i6 = 0;
      i4 = i7;
      i5 = i8;
      i2 = 0;
      break;
     } else i2 = i2 + 33 | 0;
    }
    if (i2 >>> 0 > 31) i15 = 16; else {
     i6 = i2;
     i4 = i7;
     i5 = i8;
    }
   } else {
    i2 = 32;
    i15 = 16;
   } while (0);
   if ((i15 | 0) == 16) {
    i15 = 0;
    i6 = i2 + -32 | 0;
    i4 = i8;
    i5 = 0;
   }
   i7 = i5 << 32 - i6 | i4 >>> i6;
   i8 = i5 >>> i6;
   i2 = i2 + i3 | 0;
   if (!((i8 | 0) != 0 | (i7 | 0) != 1)) {
    i4 = i9;
    i15 = 20;
    break L1;
   }
   i4 = i9 + (0 - (HEAP32[i13 + (i2 << 2) >> 2] | 0)) | 0;
   if ((FUNCTION_TABLE_iii[i12 & 63](i4, HEAP32[i11 >> 2] | 0) | 0) < 1) {
    i4 = i9;
    i3 = i2;
    i2 = 0;
    i15 = 19;
    break;
   } else {
    i6 = i9;
    i3 = i2;
    i2 = 1;
    i9 = i4;
    i5 = i1;
    i4 = i6;
   }
  }
 } else {
  i1 = 1;
  i15 = 19;
 } while (0);
 if ((i15 | 0) == 19 ? (i2 | 0) == 0 : 0) {
  i2 = i3;
  i15 = 20;
 }
 if ((i15 | 0) == 20) {
  _cycle(i14, i11, i1);
  _sift(i4, i14, i12, i2, i13);
 }
 STACKTOP = i16;
 return;
}

function _SDL_Blit_RGB888_RGB888_Modulate_Blend(i25) {
 i25 = i25 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i2 = HEAP32[i25 + 52 >> 2] | 0;
 i23 = HEAPU8[i25 + 60 >> 0] | 0;
 i24 = HEAPU8[i25 + 61 >> 0] | 0;
 i16 = HEAPU8[i25 + 62 >> 0] | 0;
 i1 = HEAP8[i25 + 63 >> 0] | 0;
 i17 = i25 + 28 | 0;
 i22 = HEAP32[i17 >> 2] | 0;
 i3 = i22 + -1 | 0;
 HEAP32[i17 >> 2] = i3;
 if (!i22) return;
 i18 = i25 + 20 | 0;
 i19 = i25 + 24 | 0;
 i20 = i25 + 12 | 0;
 i21 = i25 + 32 | 0;
 i22 = (i2 & 1 | 0) == 0;
 i14 = (i2 & 2 | 0) == 0 ? 255 : i1 & 255;
 i15 = (i2 & 48 | 0) != 0 & (i14 | 0) != 255;
 i12 = i2 & 112;
 i13 = i14 ^ 255;
 do {
  i1 = HEAP32[i19 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i25 >> 2] | 0;
   i1 = HEAP32[i18 >> 2] | 0;
   i2 = i3;
  } else {
   i11 = HEAP32[i18 >> 2] | 0;
   i4 = HEAP32[i25 >> 2] | 0;
   i9 = i11;
   i10 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i5 = HEAP32[i10 >> 2] | 0;
    i7 = i5 >>> 16 & 255;
    i6 = i5 >>> 8 & 255;
    i5 = i5 & 255;
    i8 = HEAP32[i9 >> 2] | 0;
    i2 = i8 >>> 16 & 255;
    i3 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    if (!i22) {
     i5 = ((Math_imul(i5, i16) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i24) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i23) | 0) >>> 0) / 255 | 0;
    }
    if (i15) {
     i5 = ((Math_imul(i5, i14) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i14) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i14) | 0) >>> 0) / 255 | 0;
    }
    switch (i12 | 0) {
    case 16:
     {
      i5 = (((Math_imul(i8, i13) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i3 = (((Math_imul(i3, i13) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i2, i13) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i3 = i6 + i3 | 0;
      i5 = i5 + i8 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i8) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i8;
    }
    HEAP32[i9 >> 2] = i3 << 8 | i2 << 16 | i5;
    if (!i1) break; else {
     i9 = i9 + 4 | 0;
     i10 = i10 + 4 | 0;
    }
   }
   i1 = i11;
   i2 = HEAP32[i17 >> 2] | 0;
  }
  HEAP32[i25 >> 2] = i4 + (HEAP32[i20 >> 2] | 0);
  HEAP32[i18 >> 2] = i1 + (HEAP32[i21 >> 2] | 0);
  i3 = i2 + -1 | 0;
  HEAP32[i17 >> 2] = i3;
 } while ((i2 | 0) != 0);
 return;
}

function _SDL_Blit_RGB888_BGR888_Modulate_Blend(i25) {
 i25 = i25 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i2 = HEAP32[i25 + 52 >> 2] | 0;
 i23 = HEAPU8[i25 + 60 >> 0] | 0;
 i24 = HEAPU8[i25 + 61 >> 0] | 0;
 i16 = HEAPU8[i25 + 62 >> 0] | 0;
 i1 = HEAP8[i25 + 63 >> 0] | 0;
 i17 = i25 + 28 | 0;
 i22 = HEAP32[i17 >> 2] | 0;
 i3 = i22 + -1 | 0;
 HEAP32[i17 >> 2] = i3;
 if (!i22) return;
 i18 = i25 + 20 | 0;
 i19 = i25 + 24 | 0;
 i20 = i25 + 12 | 0;
 i21 = i25 + 32 | 0;
 i22 = (i2 & 1 | 0) == 0;
 i14 = (i2 & 2 | 0) == 0 ? 255 : i1 & 255;
 i15 = (i2 & 48 | 0) != 0 & (i14 | 0) != 255;
 i12 = i2 & 112;
 i13 = i14 ^ 255;
 do {
  i1 = HEAP32[i19 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i25 >> 2] | 0;
   i1 = HEAP32[i18 >> 2] | 0;
   i2 = i3;
  } else {
   i11 = HEAP32[i18 >> 2] | 0;
   i4 = HEAP32[i25 >> 2] | 0;
   i9 = i11;
   i10 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i5 = HEAP32[i10 >> 2] | 0;
    i7 = i5 >>> 16 & 255;
    i6 = i5 >>> 8 & 255;
    i5 = i5 & 255;
    i2 = HEAP32[i9 >> 2] | 0;
    i8 = i2 >>> 16 & 255;
    i3 = i2 >>> 8 & 255;
    i2 = i2 & 255;
    if (!i22) {
     i5 = ((Math_imul(i5, i16) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i24) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i23) | 0) >>> 0) / 255 | 0;
    }
    if (i15) {
     i5 = ((Math_imul(i5, i14) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i14) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i14) | 0) >>> 0) / 255 | 0;
    }
    switch (i12 | 0) {
    case 16:
     {
      i5 = (((Math_imul(i8, i13) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i3 = (((Math_imul(i3, i13) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i2, i13) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i3 = i6 + i3 | 0;
      i5 = i5 + i8 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i8) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i8;
    }
    HEAP32[i9 >> 2] = i3 << 8 | i2 | i5 << 16;
    if (!i1) break; else {
     i9 = i9 + 4 | 0;
     i10 = i10 + 4 | 0;
    }
   }
   i1 = i11;
   i2 = HEAP32[i17 >> 2] | 0;
  }
  HEAP32[i25 >> 2] = i4 + (HEAP32[i20 >> 2] | 0);
  HEAP32[i18 >> 2] = i1 + (HEAP32[i21 >> 2] | 0);
  i3 = i2 + -1 | 0;
  HEAP32[i17 >> 2] = i3;
 } while ((i2 | 0) != 0);
 return;
}

function _SDL_Blit_BGR888_RGB888_Modulate_Blend(i25) {
 i25 = i25 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i2 = HEAP32[i25 + 52 >> 2] | 0;
 i23 = HEAPU8[i25 + 60 >> 0] | 0;
 i24 = HEAPU8[i25 + 61 >> 0] | 0;
 i16 = HEAPU8[i25 + 62 >> 0] | 0;
 i1 = HEAP8[i25 + 63 >> 0] | 0;
 i17 = i25 + 28 | 0;
 i22 = HEAP32[i17 >> 2] | 0;
 i3 = i22 + -1 | 0;
 HEAP32[i17 >> 2] = i3;
 if (!i22) return;
 i18 = i25 + 20 | 0;
 i19 = i25 + 24 | 0;
 i20 = i25 + 12 | 0;
 i21 = i25 + 32 | 0;
 i22 = (i2 & 1 | 0) == 0;
 i14 = (i2 & 2 | 0) == 0 ? 255 : i1 & 255;
 i15 = (i2 & 48 | 0) != 0 & (i14 | 0) != 255;
 i12 = i2 & 112;
 i13 = i14 ^ 255;
 do {
  i1 = HEAP32[i19 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i25 >> 2] | 0;
   i1 = HEAP32[i18 >> 2] | 0;
   i2 = i3;
  } else {
   i11 = HEAP32[i18 >> 2] | 0;
   i4 = HEAP32[i25 >> 2] | 0;
   i9 = i11;
   i10 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i7 = HEAP32[i10 >> 2] | 0;
    i5 = i7 >>> 16 & 255;
    i6 = i7 >>> 8 & 255;
    i7 = i7 & 255;
    i8 = HEAP32[i9 >> 2] | 0;
    i2 = i8 >>> 16 & 255;
    i3 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    if (!i22) {
     i5 = ((Math_imul(i5, i16) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i24) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i23) | 0) >>> 0) / 255 | 0;
    }
    if (i15) {
     i5 = ((Math_imul(i5, i14) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i14) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i14) | 0) >>> 0) / 255 | 0;
    }
    switch (i12 | 0) {
    case 16:
     {
      i5 = (((Math_imul(i8, i13) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i3 = (((Math_imul(i3, i13) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i2, i13) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i3 = i6 + i3 | 0;
      i5 = i5 + i8 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i8) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i8;
    }
    HEAP32[i9 >> 2] = i3 << 8 | i2 << 16 | i5;
    if (!i1) break; else {
     i9 = i9 + 4 | 0;
     i10 = i10 + 4 | 0;
    }
   }
   i1 = i11;
   i2 = HEAP32[i17 >> 2] | 0;
  }
  HEAP32[i25 >> 2] = i4 + (HEAP32[i20 >> 2] | 0);
  HEAP32[i18 >> 2] = i1 + (HEAP32[i21 >> 2] | 0);
  i3 = i2 + -1 | 0;
  HEAP32[i17 >> 2] = i3;
 } while ((i2 | 0) != 0);
 return;
}

function _SDL_Blit_BGR888_BGR888_Modulate_Blend(i25) {
 i25 = i25 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i2 = HEAP32[i25 + 52 >> 2] | 0;
 i23 = HEAPU8[i25 + 60 >> 0] | 0;
 i24 = HEAPU8[i25 + 61 >> 0] | 0;
 i16 = HEAPU8[i25 + 62 >> 0] | 0;
 i1 = HEAP8[i25 + 63 >> 0] | 0;
 i17 = i25 + 28 | 0;
 i22 = HEAP32[i17 >> 2] | 0;
 i3 = i22 + -1 | 0;
 HEAP32[i17 >> 2] = i3;
 if (!i22) return;
 i18 = i25 + 20 | 0;
 i19 = i25 + 24 | 0;
 i20 = i25 + 12 | 0;
 i21 = i25 + 32 | 0;
 i22 = (i2 & 1 | 0) == 0;
 i14 = (i2 & 2 | 0) == 0 ? 255 : i1 & 255;
 i15 = (i2 & 48 | 0) != 0 & (i14 | 0) != 255;
 i12 = i2 & 112;
 i13 = i14 ^ 255;
 do {
  i1 = HEAP32[i19 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i25 >> 2] | 0;
   i1 = HEAP32[i18 >> 2] | 0;
   i2 = i3;
  } else {
   i11 = HEAP32[i18 >> 2] | 0;
   i4 = HEAP32[i25 >> 2] | 0;
   i9 = i11;
   i10 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i7 = HEAP32[i10 >> 2] | 0;
    i5 = i7 >>> 16 & 255;
    i6 = i7 >>> 8 & 255;
    i7 = i7 & 255;
    i2 = HEAP32[i9 >> 2] | 0;
    i8 = i2 >>> 16 & 255;
    i3 = i2 >>> 8 & 255;
    i2 = i2 & 255;
    if (!i22) {
     i5 = ((Math_imul(i5, i16) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i24) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i23) | 0) >>> 0) / 255 | 0;
    }
    if (i15) {
     i5 = ((Math_imul(i5, i14) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i14) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i14) | 0) >>> 0) / 255 | 0;
    }
    switch (i12 | 0) {
    case 16:
     {
      i5 = (((Math_imul(i8, i13) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i3 = (((Math_imul(i3, i13) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i2, i13) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i3 = i6 + i3 | 0;
      i5 = i5 + i8 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i8) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i8;
    }
    HEAP32[i9 >> 2] = i3 << 8 | i2 | i5 << 16;
    if (!i1) break; else {
     i9 = i9 + 4 | 0;
     i10 = i10 + 4 | 0;
    }
   }
   i1 = i11;
   i2 = HEAP32[i17 >> 2] | 0;
  }
  HEAP32[i25 >> 2] = i4 + (HEAP32[i20 >> 2] | 0);
  HEAP32[i18 >> 2] = i1 + (HEAP32[i21 >> 2] | 0);
  i3 = i2 + -1 | 0;
  HEAP32[i17 >> 2] = i3;
 } while ((i2 | 0) != 0);
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe(i1, i26, i21, i20, d9) {
 i1 = i1 | 0;
 i26 = i26 | 0;
 i21 = i21 | 0;
 i20 = i20 | 0;
 d9 = +d9;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 i12 = i23 + 304 | 0;
 i7 = i23 + 48 | 0;
 i6 = i23 + 32 | 0;
 i3 = i23 + 24 | 0;
 i2 = i23 + 8 | 0;
 i5 = i23;
 i10 = i23 + 308 | 0;
 i8 = i23 + 72 | 0;
 i11 = i23 + 76 | 0;
 i17 = i23 + 68 | 0;
 i16 = i23 + 64 | 0;
 i13 = i23 + 60 | 0;
 i14 = i23 + 56 | 0;
 i4 = i5;
 HEAP32[i4 >> 2] = 37;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj(i5 + 1 | 0, 62970, HEAP32[i21 + 4 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = i10;
 i1 = __ZNSt3__16__clocEv() | 0;
 if (i4) {
  HEAP32[i2 >> 2] = HEAP32[i21 + 8 >> 2];
  HEAPF64[i2 + 8 >> 3] = d9;
  i1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i10, 30, i1, i5, i2) | 0;
 } else {
  HEAPF64[i3 >> 3] = d9;
  i1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i10, 30, i1, i5, i3) | 0;
 }
 if ((i1 | 0) > 29) {
  i1 = __ZNSt3__16__clocEv() | 0;
  if (i4) {
   HEAP32[i6 >> 2] = HEAP32[i21 + 8 >> 2];
   HEAPF64[i6 + 8 >> 3] = d9;
   i2 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i8, i1, i5, i6) | 0;
  } else {
   HEAPF64[i7 >> 3] = d9;
   i2 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i8, i1, i5, i7) | 0;
  }
  i1 = HEAP32[i8 >> 2] | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i18 = i1;
   i25 = i1;
   i15 = i2;
  }
 } else {
  i18 = HEAP32[i8 >> 2] | 0;
  i25 = 0;
  i15 = i1;
 }
 i2 = i18 + i15 | 0;
 i3 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i18, i2, i21) | 0;
 if ((i18 | 0) != (i10 | 0)) {
  i1 = _malloc(i15 << 3) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i19 = i18;
   i24 = i1;
   i22 = i1;
  }
 } else {
  i19 = i10;
  i24 = 0;
  i22 = i11;
 }
 i1 = __ZNKSt3__18ios_base6getlocEv(i21) | 0;
 HEAP32[i13 >> 2] = i1;
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE(i19, i3, i2, i22, i17, i16, i13);
 __ZNSt3__114__shared_count16__release_sharedEv(i1) | 0;
 HEAP32[i14 >> 2] = HEAP32[i26 >> 2];
 i19 = HEAP32[i17 >> 2] | 0;
 i1 = HEAP32[i16 >> 2] | 0;
 HEAP32[i12 >> 2] = HEAP32[i14 >> 2];
 i1 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i12, i22, i19, i1, i21, i20) | 0;
 HEAP32[i26 >> 2] = i1;
 if (i24) _free(i24);
 _free(i25);
 STACKTOP = i23;
 return i1 | 0;
}

function _SDL_AudioInit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i9 + 8 | 0;
 i6 = i9;
 if (_SDL_WasInit(16) | 0) _SDL_AudioQuit();
 _SDL_memset(6140, 0, 112) | 0;
 _SDL_memset(6252, 0, 64) | 0;
 L4 : do if (!i1) {
  i1 = _SDL_getenv(36530) | 0;
  i5 = (i1 | 0) == 0;
  if (i5) {
   i3 = 0;
   i2 = 0;
   while (1) {
    if ((i3 | 0) == 3) {
     i3 = i5;
     i8 = 14;
     break L4;
    }
    while (1) {
     i4 = HEAP32[6316 + (i3 << 2) >> 2] | 0;
     if (!(HEAP32[i4 + 12 >> 2] | 0)) {
      i2 = i4;
      break;
     }
     i3 = i3 + 1 | 0;
     if ((i3 | 0) == 3) {
      i3 = i5;
      i8 = 14;
      break L4;
     }
    }
    _SDL_memset(6140, 0, 112) | 0;
    HEAP32[1535] = HEAP32[i2 >> 2];
    HEAP32[1536] = HEAP32[i2 + 4 >> 2];
    if (!(FUNCTION_TABLE_ii[HEAP32[i2 + 8 >> 2] & 127](6148) | 0)) {
     i3 = i3 + 1 | 0;
     i2 = 1;
    } else break;
   }
  } else i8 = 5;
 } else i8 = 5; while (0);
 L12 : do if ((i8 | 0) == 5) {
  i2 = 0;
  i4 = 0;
  while (1) {
   if ((i2 | 0) == 3) {
    i3 = 0;
    i2 = i4;
    i8 = 14;
    break L12;
   }
   while (1) {
    i3 = HEAP32[6316 + (i2 << 2) >> 2] | 0;
    i5 = HEAP32[i3 >> 2] | 0;
    if (!(_SDL_strncasecmp(i5, i1, _SDL_strlen(i1) | 0) | 0)) break;
    i2 = i2 + 1 | 0;
    if ((i2 | 0) == 3) {
     i3 = 0;
     i2 = i4;
     i8 = 14;
     break L12;
    }
   }
   _SDL_memset(6140, 0, 112) | 0;
   HEAP32[1535] = HEAP32[i3 >> 2];
   HEAP32[1536] = HEAP32[i3 + 4 >> 2];
   if (!(FUNCTION_TABLE_ii[HEAP32[i3 + 8 >> 2] & 127](6148) | 0)) {
    i2 = i2 + 1 | 0;
    i4 = 1;
   } else break;
  }
 } while (0);
 if ((i8 | 0) == 14) {
  do if (!i2) if (i3) {
   _SDL_SetError(36578, i7) | 0;
   break;
  } else {
   HEAP32[i6 >> 2] = i1;
   _SDL_SetError(36546, i6) | 0;
   break;
  } while (0);
  _SDL_memset(6140, 0, 112) | 0;
  i8 = -1;
  STACKTOP = i9;
  return i8 | 0;
 }
 HEAP32[1556] = _SDL_CreateMutex() | 0;
 i1 = HEAP32[1537] | 0;
 if (!i1) {
  HEAP32[1537] = 3;
  i1 = 3;
 }
 if (!(HEAP32[1538] | 0)) HEAP32[1538] = 6;
 if (!(HEAP32[1539] | 0)) HEAP32[1539] = 262;
 if (!(HEAP32[1540] | 0)) HEAP32[1540] = 263;
 if (!(HEAP32[1541] | 0)) HEAP32[1541] = 264;
 if (!(HEAP32[1542] | 0)) HEAP32[1542] = 70;
 if (!(HEAP32[1543] | 0)) HEAP32[1543] = 71;
 if (!(HEAP32[1544] | 0)) HEAP32[1544] = 265;
 if (!(HEAP32[1545] | 0)) HEAP32[1545] = 266;
 if (!(HEAP32[1546] | 0)) HEAP32[1546] = 267;
 if (!(HEAP32[1547] | 0)) HEAP32[1547] = 268;
 if (!(HEAP32[1548] | 0)) HEAP32[1548] = 269;
 if (!(HEAP32[1549] | 0)) HEAP32[1549] = 4;
 FUNCTION_TABLE_v[i1 & 15]();
 i8 = 0;
 STACKTOP = i9;
 return i8 | 0;
}

function _RenderDrawLinesWithRects(i19, i17, i1) {
 i19 = i19 | 0;
 i17 = i17 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i20 = 0, d21 = 0.0, d22 = 0.0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i16 = i20;
 i15 = i1 + -1 | 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (i15 << 4) | 0) + 15 & -16) | 0;
 if ((i1 | 0) <= 1) {
  i16 = 0;
  i17 = 0;
  i15 = i19 + 68 | 0;
  i15 = HEAP32[i15 >> 2] | 0;
  i19 = FUNCTION_TABLE_iiii[i15 & 63](i19, i18, i16) | 0;
  i19 = i19 + i17 | 0;
  i18 = (i19 | 0) > -1;
  i19 = i18 ? i19 : -1;
  STACKTOP = i20;
  return i19 | 0;
 }
 i9 = i19 + 284 | 0;
 i10 = i19 + 288 | 0;
 i11 = i16 + 4 | 0;
 i12 = i16 + 8 | 0;
 i13 = i16 + 12 | 0;
 i14 = i19 + 64 | 0;
 i2 = 0;
 i3 = 0;
 i1 = 0;
 L4 : while (1) {
  i7 = HEAP32[i17 + (i2 << 3) >> 2] | 0;
  i4 = HEAP32[i17 + (i2 << 3) + 4 >> 2] | 0;
  while (1) {
   i8 = i2;
   i2 = i2 + 1 | 0;
   i5 = i7;
   i7 = HEAP32[i17 + (i2 << 3) >> 2] | 0;
   i8 = i17 + (i8 << 3) + 4 | 0;
   i6 = i4;
   i4 = HEAP32[i17 + (i2 << 3) + 4 >> 2] | 0;
   if ((i5 | 0) == (i7 | 0)) {
    i8 = (i6 | 0) < (i4 | 0) ? i6 : i4;
    d22 = +HEAPF32[i9 >> 2];
    HEAPF32[i18 + (i3 << 4) >> 2] = +(i5 | 0) * d22;
    d21 = +HEAPF32[i10 >> 2];
    HEAPF32[i18 + (i3 << 4) + 4 >> 2] = +(i8 | 0) * d21;
    HEAPF32[i18 + (i3 << 4) + 8 >> 2] = d22;
    HEAPF32[i18 + (i3 << 4) + 12 >> 2] = +(1 - i8 + ((i6 | 0) > (i4 | 0) ? i6 : i4) | 0) * d21;
   } else {
    if ((i6 | 0) != (i4 | 0)) {
     i6 = i8;
     break;
    }
    i6 = (i5 | 0) < (i7 | 0) ? i5 : i7;
    d21 = +HEAPF32[i9 >> 2];
    HEAPF32[i18 + (i3 << 4) >> 2] = +(i6 | 0) * d21;
    d22 = +HEAPF32[i10 >> 2];
    HEAPF32[i18 + (i3 << 4) + 4 >> 2] = +(HEAP32[i8 >> 2] | 0) * d22;
    HEAPF32[i18 + (i3 << 4) + 8 >> 2] = +(1 - i6 + ((i5 | 0) > (i7 | 0) ? i5 : i7) | 0) * d21;
    HEAPF32[i18 + (i3 << 4) + 12 >> 2] = d22;
   }
   i3 = i3 + 1 | 0;
   if ((i2 | 0) >= (i15 | 0)) {
    i2 = 10;
    break L4;
   }
  }
  d21 = +HEAPF32[i9 >> 2];
  HEAPF32[i16 >> 2] = +(i5 | 0) * d21;
  d22 = +HEAPF32[i10 >> 2];
  HEAPF32[i11 >> 2] = +(HEAP32[i6 >> 2] | 0) * d22;
  HEAPF32[i12 >> 2] = +(i7 | 0) * d21;
  HEAPF32[i13 >> 2] = +(i4 | 0) * d22;
  i1 = (FUNCTION_TABLE_iiii[HEAP32[i14 >> 2] & 63](i19, i16, 2) | 0) + i1 | 0;
  if ((i2 | 0) >= (i15 | 0)) {
   i2 = 10;
   break;
  }
 }
 if ((i2 | 0) == 10) {
  i17 = i19 + 68 | 0;
  i17 = HEAP32[i17 >> 2] | 0;
  i19 = FUNCTION_TABLE_iiii[i17 & 63](i19, i18, i3) | 0;
  i19 = i19 + i1 | 0;
  i18 = (i19 | 0) > -1;
  i19 = i18 ? i19 : -1;
  STACKTOP = i20;
  return i19 | 0;
 }
 return 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce(i1, i26, i24, i23, d9) {
 i1 = i1 | 0;
 i26 = i26 | 0;
 i24 = i24 | 0;
 i23 = i23 | 0;
 d9 = +d9;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i25 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i12 = i18 + 76 | 0;
 i7 = i18 + 48 | 0;
 i6 = i18 + 32 | 0;
 i3 = i18 + 24 | 0;
 i2 = i18 + 8 | 0;
 i5 = i18;
 i10 = i18 + 80 | 0;
 i8 = i18 + 72 | 0;
 i11 = i18 + 110 | 0;
 i17 = i18 + 68 | 0;
 i16 = i18 + 64 | 0;
 i13 = i18 + 60 | 0;
 i14 = i18 + 56 | 0;
 i4 = i5;
 HEAP32[i4 >> 2] = 37;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj(i5 + 1 | 0, 62970, HEAP32[i24 + 4 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = i10;
 i1 = __ZNSt3__16__clocEv() | 0;
 if (i4) {
  HEAP32[i2 >> 2] = HEAP32[i24 + 8 >> 2];
  HEAPF64[i2 + 8 >> 3] = d9;
  i1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i10, 30, i1, i5, i2) | 0;
 } else {
  HEAPF64[i3 >> 3] = d9;
  i1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i10, 30, i1, i5, i3) | 0;
 }
 if ((i1 | 0) > 29) {
  i1 = __ZNSt3__16__clocEv() | 0;
  if (i4) {
   HEAP32[i6 >> 2] = HEAP32[i24 + 8 >> 2];
   HEAPF64[i6 + 8 >> 3] = d9;
   i2 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i8, i1, i5, i6) | 0;
  } else {
   HEAPF64[i7 >> 3] = d9;
   i2 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i8, i1, i5, i7) | 0;
  }
  i1 = HEAP32[i8 >> 2] | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i19 = i1;
   i22 = i1;
   i15 = i2;
  }
 } else {
  i19 = HEAP32[i8 >> 2] | 0;
  i22 = 0;
  i15 = i1;
 }
 i2 = i19 + i15 | 0;
 i3 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i19, i2, i24) | 0;
 if ((i19 | 0) != (i10 | 0)) {
  i1 = _malloc(i15 << 1) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i20 = i19;
   i21 = i1;
   i25 = i1;
  }
 } else {
  i20 = i10;
  i21 = 0;
  i25 = i11;
 }
 i19 = __ZNKSt3__18ios_base6getlocEv(i24) | 0;
 HEAP32[i13 >> 2] = i19;
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i20, i3, i2, i25, i17, i16, i13);
 __ZNSt3__114__shared_count16__release_sharedEv(i19) | 0;
 HEAP32[i14 >> 2] = HEAP32[i26 >> 2];
 i20 = HEAP32[i17 >> 2] | 0;
 i26 = HEAP32[i16 >> 2] | 0;
 HEAP32[i12 >> 2] = HEAP32[i14 >> 2];
 i26 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i12, i25, i20, i26, i24, i23) | 0;
 _free(i21);
 _free(i22);
 STACKTOP = i18;
 return i26 | 0;
}

function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i4, i9, i12, i7, i10, i2, i3, i8, i13, i14, i11, i5) {
 i4 = i4 | 0;
 i9 = i9 | 0;
 i12 = i12 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i11 = i11 | 0;
 i5 = i5 | 0;
 var i1 = 0, i6 = 0;
 L1 : do if ((i4 | 0) == (i2 | 0)) if (HEAP8[i9 >> 0] | 0) {
  HEAP8[i9 >> 0] = 0;
  i12 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i12 + 1;
  HEAP8[i12 >> 0] = 46;
  i12 = HEAP8[i8 >> 0] | 0;
  if ((((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i8 + 4 >> 2] | 0) | 0) != 0 ? (i1 = HEAP32[i14 >> 2] | 0, (i1 - i13 | 0) < 160) : 0) {
   i13 = HEAP32[i11 >> 2] | 0;
   HEAP32[i14 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i13;
   i1 = 0;
  } else i1 = 0;
 } else i1 = -1; else {
  if ((i4 | 0) == (i3 | 0) ? (i3 = HEAP8[i8 >> 0] | 0, (((i3 & 1) == 0 ? (i3 & 255) >>> 1 : HEAP32[i8 + 4 >> 2] | 0) | 0) != 0) : 0) {
   if (!(HEAP8[i9 >> 0] | 0)) {
    i1 = -1;
    break;
   }
   i1 = HEAP32[i14 >> 2] | 0;
   if ((i1 - i13 | 0) >= 160) {
    i1 = 0;
    break;
   }
   i13 = HEAP32[i11 >> 2] | 0;
   HEAP32[i14 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i13;
   HEAP32[i11 >> 2] = 0;
   i1 = 0;
   break;
  }
  i2 = i5 + 128 | 0;
  i1 = i5;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) == (i4 | 0)) break;
   i1 = i1 + 4 | 0;
   if ((i1 | 0) == (i2 | 0)) {
    i1 = i2;
    break;
   }
  }
  i2 = i1 - i5 | 0;
  i1 = i2 >> 2;
  if ((i2 | 0) <= 124) {
   i3 = HEAP8[61569 + i1 >> 0] | 0;
   switch (i1 | 0) {
   case 24:
   case 25:
    {
     i1 = HEAP32[i10 >> 2] | 0;
     if ((i1 | 0) != (i7 | 0) ? (HEAPU8[i1 + -1 >> 0] & 95 | 0) != (HEAPU8[i12 >> 0] & 127 | 0) : 0) {
      i1 = -1;
      break L1;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3;
     i1 = 0;
     break L1;
    }
   case 23:
   case 22:
    {
     HEAP8[i12 >> 0] = 80;
     break;
    }
   default:
    {
     i1 = i3 & 95;
     if ((((i1 | 0) == (HEAP8[i12 >> 0] | 0) ? (HEAP8[i12 >> 0] = i1 | 128, (HEAP8[i9 >> 0] | 0) != 0) : 0) ? (HEAP8[i9 >> 0] = 0, i12 = HEAP8[i8 >> 0] | 0, (((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i8 + 4 >> 2] | 0) | 0) != 0) : 0) ? (i6 = HEAP32[i14 >> 2] | 0, (i6 - i13 | 0) < 160) : 0) {
      i13 = HEAP32[i11 >> 2] | 0;
      HEAP32[i14 >> 2] = i6 + 4;
      HEAP32[i6 >> 2] = i13;
     }
    }
   }
   i14 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i14 + 1;
   HEAP8[i14 >> 0] = i3;
   if ((i2 | 0) > 84) i1 = 0; else {
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
    i1 = 0;
   }
  } else i1 = -1;
 } while (0);
 return i1 | 0;
}

function _SDL_GL_SetAttribute(i2, i6) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i7 + 24 | 0;
 i4 = i7 + 16 | 0;
 i3 = i7 + 8 | 0;
 i1 = HEAP32[3256] | 0;
 L1 : do if (!i1) i1 = _SDL_SetError(41242, i7) | 0; else do switch (i2 | 0) {
 case 0:
  {
   HEAP32[i1 + 260 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 1:
  {
   HEAP32[i1 + 264 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 2:
  {
   HEAP32[i1 + 268 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 3:
  {
   HEAP32[i1 + 272 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 5:
  {
   HEAP32[i1 + 288 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 4:
  {
   HEAP32[i1 + 280 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 6:
  {
   HEAP32[i1 + 276 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 7:
  {
   HEAP32[i1 + 284 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 8:
  {
   HEAP32[i1 + 292 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 9:
  {
   HEAP32[i1 + 296 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 10:
  {
   HEAP32[i1 + 300 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 11:
  {
   HEAP32[i1 + 304 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 12:
  {
   HEAP32[i1 + 308 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 13:
  {
   HEAP32[i1 + 312 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 14:
  {
   HEAP32[i1 + 316 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 15:
  {
   HEAP32[i1 + 320 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 16:
  {
   HEAP32[i1 + 352 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 17:
  {
   HEAP32[i1 + 324 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 18:
  {
   HEAP32[i1 + 328 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 19:
  {
   i1 = i1 + 336 | 0;
   if (!i6) {
    HEAP32[i1 >> 2] = 0;
    i1 = 0;
    break L1;
   } else {
    HEAP32[i1 >> 2] = 4;
    i1 = 0;
    break L1;
   }
  }
 case 20:
  if (i6 >>> 0 > 15) {
   HEAP32[i3 >> 2] = i6;
   i1 = _SDL_SetError(41720, i3) | 0;
   break L1;
  } else {
   HEAP32[i1 + 332 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 21:
  switch (i6 | 0) {
  case 0:
  case 1:
  case 2:
  case 4:
   {
    HEAP32[i1 + 336 >> 2] = i6;
    i1 = 0;
    break L1;
   }
  default:
   {
    HEAP32[i4 >> 2] = i6;
    i1 = _SDL_SetError(41751, i4) | 0;
    break L1;
   }
  }
 case 22:
  {
   HEAP32[i1 + 340 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 23:
  {
   HEAP32[i1 + 348 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 24:
  {
   HEAP32[i1 + 344 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 default:
  {
   i1 = _SDL_SetError(41785, i5) | 0;
   break L1;
  }
 } while (0); while (0);
 STACKTOP = i7;
 return i1 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(i1, i5, i6, i7, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i8 = 0;
 L1 : while (1) {
  i1 = HEAP32[i5 >> 2] | 0;
  do if (i1) {
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i5 >> 2] = 0;
    i3 = 1;
    break;
   } else {
    i3 = (HEAP32[i5 >> 2] | 0) == 0;
    break;
   }
  } else i3 = 1; while (0);
  i2 = HEAP32[i6 >> 2] | 0;
  do if (i2) {
   i1 = HEAP32[i2 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i3) {
    i3 = i2;
    break;
   } else {
    i3 = i2;
    break L1;
   } else {
    HEAP32[i6 >> 2] = 0;
    i8 = 15;
    break;
   }
  } else i8 = 15; while (0);
  if ((i8 | 0) == 15) {
   i8 = 0;
   if (i3) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i1 = HEAP32[i5 >> 2] | 0;
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] & 63](i4, 8192, i1) | 0)) break;
  i1 = HEAP32[i5 >> 2] | 0;
  i2 = i1 + 12 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i2 >> 2] = i3 + 4;
   continue;
  }
 }
 i1 = HEAP32[i5 >> 2] | 0;
 do if (i1) {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i5 >> 2] = 0;
   i2 = 1;
   break;
  } else {
   i2 = (HEAP32[i5 >> 2] | 0) == 0;
   break;
  }
 } else i2 = 1; while (0);
 do if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i8 = 39;
   break;
  } else {
   HEAP32[i6 >> 2] = 0;
   i8 = 37;
   break;
  }
 } else i8 = 37; while (0);
 if ((i8 | 0) == 37 ? i2 : 0) i8 = 39;
 if ((i8 | 0) == 39) HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 2;
 return;
}

function _GLES2_RenderDrawLines(i1, i8, i7) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, d13 = 0.0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i11 = i12;
 i9 = i1 + 316 | 0;
 i6 = HEAP32[i9 >> 2] | 0;
 if ((_GLES2_SetDrawingState(i1) | 0) < 0) {
  i11 = -1;
  STACKTOP = i12;
  return i11 | 0;
 }
 i4 = i7 << 3;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i4 | 0) + 15 & -16) | 0;
 if ((i7 | 0) > 0) {
  i1 = 0;
  do {
   d13 = +HEAPF32[i8 + (i1 << 3) + 4 >> 2] + .5;
   i3 = i1 << 1;
   HEAPF32[i5 + (i3 << 2) >> 2] = +HEAPF32[i8 + (i1 << 3) >> 2] + .5;
   HEAPF32[i5 + ((i3 | 1) << 2) >> 2] = d13;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i7 | 0));
 }
 i3 = HEAP32[i9 >> 2] | 0;
 i2 = i3 + 276 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  FUNCTION_TABLE_vii[HEAP32[i3 + 216 >> 2] & 127](1, i2);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[i3 + 220 >> 2] & 127](34962, i1);
 i1 = i3 + 292 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 < i4 >>> 0) {
  FUNCTION_TABLE_viiii[HEAP32[i3 + 224 >> 2] & 63](34962, i4, i5, 35040);
  HEAP32[i1 >> 2] = i4;
 } else FUNCTION_TABLE_viiii[HEAP32[i3 + 228 >> 2] & 63](34962, 0, i4, i5);
 FUNCTION_TABLE_viiiiii[HEAP32[i3 + 184 >> 2] & 15](0, 2, 5126, 0, 0, 0);
 i2 = i6 + 76 | 0;
 FUNCTION_TABLE_viii[HEAP32[i2 >> 2] & 31](3, 0, i7);
 if ((i7 | 0) != 2) {
  i1 = i7 + -1 | 0;
  if (!(!(+HEAPF32[i8 >> 2] != +HEAPF32[i8 + (i1 << 3) >> 2]) ? !(+HEAPF32[i8 + 4 >> 2] != +HEAPF32[i8 + (i1 << 3) + 4 >> 2]) : 0)) i10 = 12;
 } else {
  i1 = 1;
  i10 = 12;
 }
 if ((i10 | 0) == 12) FUNCTION_TABLE_viii[HEAP32[i2 >> 2] & 31](0, i1, 1);
 i1 = HEAP32[i9 >> 2] | 0;
 if (!(HEAP32[i1 + 4 >> 2] | 0)) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i4 = i1 + 108 | 0;
 i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
 if (!i1) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 } else i2 = 62969;
 while (1) {
  if ((i2 | 0) != 0 ? (HEAP8[i2 >> 0] | 0) != 0 : 0) i3 = i2; else i3 = 46327;
  switch (i1 | 0) {
  case 1280:
   {
    i2 = 46398;
    break;
   }
  case 1281:
   {
    i2 = 46381;
    break;
   }
  case 1282:
   {
    i2 = 46360;
    break;
   }
  case 1285:
   {
    i2 = 46343;
    break;
   }
  default:
   i2 = 46335;
  }
  HEAP32[i11 >> 2] = i3;
  HEAP32[i11 + 4 >> 2] = 46440;
  HEAP32[i11 + 8 >> 2] = 1491;
  HEAP32[i11 + 12 >> 2] = 47313;
  HEAP32[i11 + 16 >> 2] = i2;
  HEAP32[i11 + 20 >> 2] = i1;
  _SDL_SetError(46414, i11) | 0;
  i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
  if (!i1) {
   i1 = -1;
   break;
  } else i2 = i3;
 }
 STACKTOP = i12;
 return i1 | 0;
}

function _SW_RenderFillRects(i12, i11, i13) {
 i12 = i12 | 0;
 i11 = i11 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, d3 = 0.0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i14 = 0;
 i14 = STACKTOP;
 i6 = i12 + 316 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if (!i1) {
  i2 = i7 + 4 | 0;
  i9 = HEAP32[i2 >> 2] | 0;
  HEAP32[i7 >> 2] = i9;
  i1 = i9;
  if (!i9) {
   i1 = _SDL_GetWindowSurface(HEAP32[i12 + 188 >> 2] | 0) | 0;
   do if (((i1 | 0) != 0 ? (HEAP32[i2 >> 2] = i1, HEAP32[i7 >> 2] = i1, i8 = HEAP32[HEAP32[i6 >> 2] >> 2] | 0, (i8 | 0) != 0) : 0) ? (_SDL_SetClipRect(i8, i12 + 212 | 0) | 0, i5 = HEAP32[HEAP32[i6 >> 2] >> 2] | 0, (i5 | 0) != 0) : 0) if (!(HEAP32[i12 + 276 >> 2] | 0)) {
    _SDL_SetClipRect(i5, 0) | 0;
    break;
   } else {
    _SDL_SetClipRect(i5, i12 + 244 | 0) | 0;
    break;
   } while (0);
   i1 = HEAP32[i7 >> 2] | 0;
  }
  if (!i1) {
   i13 = -1;
   STACKTOP = i14;
   return i13 | 0;
  }
 }
 i9 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (i13 << 4) | 0) + 15 & -16) | 0;
 i2 = HEAP32[i12 + 212 >> 2] | 0;
 if ((i2 | 0) == 0 ? (HEAP32[i12 + 216 >> 2] | 0) == 0 : 0) {
  if ((i13 | 0) > 0) {
   i5 = 0;
   do {
    HEAP32[i9 + (i5 << 4) >> 2] = ~~+HEAPF32[i11 + (i5 << 4) >> 2];
    HEAP32[i9 + (i5 << 4) + 4 >> 2] = ~~+HEAPF32[i11 + (i5 << 4) + 4 >> 2];
    i8 = ~~+HEAPF32[i11 + (i5 << 4) + 8 >> 2];
    HEAP32[i9 + (i5 << 4) + 8 >> 2] = (i8 | 0) > 1 ? i8 : 1;
    i8 = ~~+HEAPF32[i11 + (i5 << 4) + 12 >> 2];
    HEAP32[i9 + (i5 << 4) + 12 >> 2] = (i8 | 0) > 1 ? i8 : 1;
    i5 = i5 + 1 | 0;
   } while ((i5 | 0) != (i13 | 0));
  }
 } else i10 = 14;
 if ((i10 | 0) == 14 ? (i13 | 0) > 0 : 0) {
  d3 = +(i2 | 0);
  d4 = +(HEAP32[i12 + 216 >> 2] | 0);
  i2 = 0;
  do {
   HEAP32[i9 + (i2 << 4) >> 2] = ~~(d3 + +HEAPF32[i11 + (i2 << 4) >> 2]);
   HEAP32[i9 + (i2 << 4) + 4 >> 2] = ~~(d4 + +HEAPF32[i11 + (i2 << 4) + 4 >> 2]);
   i10 = ~~+HEAPF32[i11 + (i2 << 4) + 8 >> 2];
   HEAP32[i9 + (i2 << 4) + 8 >> 2] = (i10 | 0) > 1 ? i10 : 1;
   i10 = ~~+HEAPF32[i11 + (i2 << 4) + 12 >> 2];
   HEAP32[i9 + (i2 << 4) + 12 >> 2] = (i10 | 0) > 1 ? i10 : 1;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i13 | 0));
 }
 i5 = HEAP32[i12 + 312 >> 2] | 0;
 i6 = HEAP8[i12 + 308 >> 0] | 0;
 i7 = HEAP8[i12 + 309 >> 0] | 0;
 i8 = HEAP8[i12 + 310 >> 0] | 0;
 i2 = HEAP8[i12 + 311 >> 0] | 0;
 if (!i5) {
  i13 = _SDL_FillRects(i1, i9, i13, _SDL_MapRGBA(HEAP32[i1 + 4 >> 2] | 0, i6, i7, i8, i2) | 0) | 0;
  STACKTOP = i14;
  return i13 | 0;
 } else {
  i13 = _SDL_BlendFillRects(i1, i9, i13, i5, i6, i7, i8, i2) | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 return 0;
}

function _SDL_DestroyWindow(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i7 + 16 | 0;
 i2 = i7 + 8 | 0;
 i1 = HEAP32[3256] | 0;
 if (!i1) {
  _SDL_SetError(41242, i7) | 0;
  STACKTOP = i7;
  return;
 }
 if ((i6 | 0) != 0 ? (HEAP32[i6 >> 2] | 0) == (i1 + 248 | 0) : 0) {
  HEAP32[i6 + 116 >> 2] = 1;
  if (HEAP32[i6 + 48 >> 2] & 4) {
   i1 = i6 + 112 | 0;
   HEAP32[i1 >> 2] = 1;
   _SDL_UpdateFullscreenMode(i6, 0);
   i2 = HEAP32[3256] | 0;
   i3 = HEAP32[i2 + 60 >> 2] | 0;
   if (i3) FUNCTION_TABLE_vii[i3 & 127](i2, i6);
   HEAP32[i1 >> 2] = 0;
   _SDL_SendWindowEvent(i6, 2, 0, 0) | 0;
  }
  if ((_SDL_GetKeyboardFocus() | 0) == (i6 | 0)) _SDL_SetKeyboardFocus(0);
  if ((_SDL_GetMouseFocus() | 0) == (i6 | 0)) _SDL_SetMouseFocus(0);
  i3 = i6 + 48 | 0;
  if ((HEAP32[i3 >> 2] & 2 | 0) != 0 ? (HEAP32[(HEAP32[3256] | 0) + 620 >> 2] | 0) == (i6 | 0) : 0) _SDL_GL_MakeCurrent(i6, 0) | 0;
  i1 = HEAP32[i6 + 104 >> 2] | 0;
  if (i1) {
   HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -5;
   _SDL_FreeSurface(i1);
  }
  i1 = HEAP32[3256] | 0;
  i2 = HEAP32[i1 + 112 >> 2] | 0;
  if (i2) {
   FUNCTION_TABLE_vii[i2 & 127](i1, i6);
   i1 = HEAP32[3256] | 0;
  }
  i2 = HEAP32[i1 + 100 >> 2] | 0;
  if (i2) FUNCTION_TABLE_vii[i2 & 127](i1, i6);
  do if (HEAP32[i3 >> 2] & 2) {
   i3 = HEAP32[3256] | 0;
   if (!i3) {
    _SDL_SetError(41242, i4) | 0;
    break;
   }
   i1 = i3 + 356 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (((i2 | 0) > 0 ? (HEAP32[i1 >> 2] = i2 + -1, (i2 | 0) <= 1) : 0) ? (i5 = HEAP32[i3 + 144 >> 2] | 0, (i5 | 0) != 0) : 0) FUNCTION_TABLE_vi[i5 & 511](i3);
  } while (0);
  i1 = _SDL_GetWindowDisplayIndex(i6) | 0;
  if ((i1 | 0) > -1) i1 = (HEAP32[(HEAP32[3256] | 0) + 240 >> 2] | 0) + (i1 * 68 | 0) | 0; else i1 = 0;
  i1 = i1 + 56 | 0;
  if ((HEAP32[i1 >> 2] | 0) == (i6 | 0)) HEAP32[i1 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  _SDL_free(HEAP32[i6 + 8 >> 2] | 0);
  _SDL_FreeSurface(HEAP32[i6 + 12 >> 2] | 0);
  _SDL_free(HEAP32[i6 + 96 >> 2] | 0);
  i2 = i6 + 132 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i1) do {
   HEAP32[i2 >> 2] = HEAP32[i1 + 8 >> 2];
   _SDL_free(HEAP32[i1 >> 2] | 0);
   _SDL_free(i1);
   i1 = HEAP32[i2 >> 2] | 0;
  } while ((i1 | 0) != 0);
  i2 = HEAP32[i6 + 144 >> 2] | 0;
  i3 = i2;
  i1 = i6 + 140 | 0;
  if (i2) HEAP32[i2 + 140 >> 2] = HEAP32[i1 >> 2];
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) HEAP32[(HEAP32[3256] | 0) + 244 >> 2] = i3; else HEAP32[i1 + 144 >> 2] = i3;
  _SDL_free(i6);
  STACKTOP = i7;
  return;
 }
 _SDL_SetError(41324, i2) | 0;
 STACKTOP = i7;
 return;
}

function _SDL_CalculateBlitA(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i1 = HEAP32[i1 + 52 >> 2] | 0;
 i2 = HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0;
 switch (HEAP32[i1 + 68 >> 2] & -28673 | 0) {
 case 16:
  switch (HEAPU8[i2 + 9 >> 0] | 0) {
  case 2:
   {
    if ((HEAP8[i3 + 9 >> 0] | 0) != 4) {
     i5 = 280;
     return i5 | 0;
    }
    if ((HEAP32[i3 + 24 >> 2] | 0) != -16777216) {
     i5 = 280;
     return i5 | 0;
    }
    if ((HEAP32[i3 + 16 >> 2] | 0) != 65280) {
     i5 = 280;
     return i5 | 0;
    }
    if (!((HEAP32[i3 + 12 >> 2] | 0) == 255 ? (HEAP32[i2 + 12 >> 2] | 0) == 31 : 0)) {
     if ((HEAP32[i3 + 20 >> 2] | 0) != 255) {
      i5 = 280;
      return i5 | 0;
     }
     if ((HEAP32[i2 + 20 >> 2] | 0) != 31) {
      i5 = 280;
      return i5 | 0;
     }
    }
    i5 = HEAP32[i2 + 16 >> 2] | 0;
    i5 = (i5 | 0) == 2016 ? 281 : (i5 | 0) == 992 ? 279 : 280;
    return i5 | 0;
   }
  case 4:
   {
    if (((((HEAP32[i3 + 12 >> 2] | 0) == (HEAP32[i2 + 12 >> 2] | 0) ? (HEAP32[i3 + 16 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0) : 0) ? (HEAP32[i3 + 20 >> 2] | 0) == (HEAP32[i2 + 20 >> 2] | 0) : 0) ? (HEAP8[i3 + 9 >> 0] | 0) == 4 : 0) ? (HEAP32[i3 + 24 >> 2] | 0) == -16777216 : 0) {
     i5 = 288;
     return i5 | 0;
    }
    i5 = 280;
    return i5 | 0;
   }
  case 1:
   {
    i5 = 287;
    return i5 | 0;
   }
  default:
   {
    i5 = 280;
    return i5 | 0;
   }
  }
 case 18:
  {
   if (HEAP32[i3 + 24 >> 2] | 0) {
    i5 = 0;
    return i5 | 0;
   }
   switch (HEAPU8[i2 + 9 >> 0] | 0) {
   case 2:
    {
     if (!(HEAP32[i1 + 4 >> 2] | 0)) {
      i5 = 283;
      return i5 | 0;
     }
     i5 = HEAP32[i2 + 16 >> 2] | 0;
     i5 = (i5 | 0) == 2016 ? 284 : (i5 | 0) == 992 ? 282 : 283;
     return i5 | 0;
    }
   case 4:
    {
     i1 = HEAP32[i3 + 12 >> 2] | 0;
     if (((((i1 | 0) == (HEAP32[i2 + 12 >> 2] | 0) ? (i4 = HEAP32[i3 + 16 >> 2] | 0, (i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) : 0) ? (i5 = HEAP32[i3 + 20 >> 2] | 0, (i5 | 0) == (HEAP32[i2 + 20 >> 2] | 0)) : 0) ? (HEAP8[i3 + 9 >> 0] | 0) == 4 : 0) ? (i4 | i1 | i5 | 0) == 16777215 : 0) {
      i5 = 290;
      return i5 | 0;
     }
     i5 = 283;
     return i5 | 0;
    }
   case 1:
    {
     i5 = 289;
     return i5 | 0;
    }
   default:
    {
     i5 = 283;
     return i5 | 0;
    }
   }
  }
 case 274:
  {
   if (HEAP32[i3 + 24 >> 2] | 0) {
    i5 = 0;
    return i5 | 0;
   }
   i5 = (HEAP8[i2 + 9 >> 0] | 0) == 1 ? 285 : 286;
   return i5 | 0;
  }
 default:
  {
   i5 = 0;
   return i5 | 0;
  }
 }
 return 0;
}

function _Blit1to4(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = HEAP32[i3 + 24 >> 2] | 0;
 i2 = HEAP32[i3 + 28 >> 2] | 0;
 i11 = HEAP32[i3 + 16 >> 2] | 0;
 i12 = (HEAP32[i3 + 36 >> 2] | 0) / 4 | 0;
 i9 = HEAP32[i3 + 48 >> 2] | 0;
 if (!i2) return;
 i10 = (i1 + 7 | 0) / 8 | 0;
 i8 = i1 & 7;
 i1 = HEAP32[i3 + 20 >> 2] | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 L4 : while (1) {
  i2 = i2 + -1 | 0;
  switch (i8 | 0) {
  case 0:
   {
    i4 = i10;
    i7 = 4;
    break;
   }
  case 7:
   {
    i4 = i10;
    i7 = 5;
    break;
   }
  case 6:
   {
    i4 = i10;
    i7 = 6;
    break;
   }
  case 5:
   {
    i4 = i10;
    i7 = 7;
    break;
   }
  case 4:
   {
    i4 = i10;
    i7 = 8;
    break;
   }
  case 3:
   {
    i4 = i10;
    i7 = 9;
    break;
   }
  case 2:
   {
    i4 = i10;
    i7 = 10;
    break;
   }
  case 1:
   {
    i5 = i1;
    i6 = i10;
    i4 = i3;
    i7 = 11;
    break;
   }
  default:
   i7 = 12;
  }
  while (1) if ((i7 | 0) == 4) {
   HEAP32[i1 >> 2] = HEAP32[i9 + ((HEAPU8[i3 >> 0] | 0) << 2) >> 2];
   i1 = i1 + 4 | 0;
   i3 = i3 + 1 | 0;
   i7 = 5;
   continue;
  } else if ((i7 | 0) == 5) {
   HEAP32[i1 >> 2] = HEAP32[i9 + ((HEAPU8[i3 >> 0] | 0) << 2) >> 2];
   i1 = i1 + 4 | 0;
   i3 = i3 + 1 | 0;
   i7 = 6;
   continue;
  } else if ((i7 | 0) == 6) {
   HEAP32[i1 >> 2] = HEAP32[i9 + ((HEAPU8[i3 >> 0] | 0) << 2) >> 2];
   i1 = i1 + 4 | 0;
   i3 = i3 + 1 | 0;
   i7 = 7;
   continue;
  } else if ((i7 | 0) == 7) {
   HEAP32[i1 >> 2] = HEAP32[i9 + ((HEAPU8[i3 >> 0] | 0) << 2) >> 2];
   i1 = i1 + 4 | 0;
   i3 = i3 + 1 | 0;
   i7 = 8;
   continue;
  } else if ((i7 | 0) == 8) {
   HEAP32[i1 >> 2] = HEAP32[i9 + ((HEAPU8[i3 >> 0] | 0) << 2) >> 2];
   i1 = i1 + 4 | 0;
   i3 = i3 + 1 | 0;
   i7 = 9;
   continue;
  } else if ((i7 | 0) == 9) {
   HEAP32[i1 >> 2] = HEAP32[i9 + ((HEAPU8[i3 >> 0] | 0) << 2) >> 2];
   i1 = i1 + 4 | 0;
   i3 = i3 + 1 | 0;
   i7 = 10;
   continue;
  } else if ((i7 | 0) == 10) {
   HEAP32[i1 >> 2] = HEAP32[i9 + ((HEAPU8[i3 >> 0] | 0) << 2) >> 2];
   i5 = i1 + 4 | 0;
   i6 = i4;
   i4 = i3 + 1 | 0;
   i7 = 11;
   continue;
  } else if ((i7 | 0) == 11) {
   i3 = i4 + 1 | 0;
   i1 = i5 + 4 | 0;
   HEAP32[i5 >> 2] = HEAP32[i9 + ((HEAPU8[i4 >> 0] | 0) << 2) >> 2];
   if ((i6 | 0) > 1) {
    i4 = i6 + -1 | 0;
    i7 = 4;
    continue;
   } else {
    i7 = 12;
    continue;
   }
  } else if ((i7 | 0) == 12) if (!i2) break L4; else {
   i1 = i1 + (i12 << 2) | 0;
   i3 = i3 + i11 | 0;
   continue L4;
  }
 }
 return;
}

function _Blit1to2(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = HEAP32[i3 + 24 >> 2] | 0;
 i2 = HEAP32[i3 + 28 >> 2] | 0;
 i8 = HEAP32[i3 + 16 >> 2] | 0;
 i9 = HEAP32[i3 + 36 >> 2] | 0;
 i10 = HEAP32[i3 + 48 >> 2] | 0;
 if (!i2) return;
 i7 = (i1 + 7 | 0) / 8 | 0;
 i6 = i1 & 7;
 i1 = HEAP32[i3 + 20 >> 2] | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 L4 : while (1) {
  i2 = i2 + -1 | 0;
  switch (i6 | 0) {
  case 0:
   {
    i4 = i7;
    i5 = 4;
    break;
   }
  case 7:
   {
    i4 = i7;
    i5 = 5;
    break;
   }
  case 6:
   {
    i4 = i7;
    i5 = 6;
    break;
   }
  case 5:
   {
    i4 = i7;
    i5 = 7;
    break;
   }
  case 4:
   {
    i4 = i7;
    i5 = 8;
    break;
   }
  case 3:
   {
    i4 = i7;
    i5 = 9;
    break;
   }
  case 2:
   {
    i4 = i7;
    i5 = 10;
    break;
   }
  case 1:
   {
    i4 = i7;
    i5 = 11;
    break;
   }
  default:
   i5 = 12;
  }
  while (1) if ((i5 | 0) == 4) {
   HEAP16[i1 >> 1] = HEAP16[i10 + ((HEAPU8[i3 >> 0] | 0) << 1) >> 1] | 0;
   i1 = i1 + 2 | 0;
   i3 = i3 + 1 | 0;
   i5 = 5;
   continue;
  } else if ((i5 | 0) == 5) {
   HEAP16[i1 >> 1] = HEAP16[i10 + ((HEAPU8[i3 >> 0] | 0) << 1) >> 1] | 0;
   i1 = i1 + 2 | 0;
   i3 = i3 + 1 | 0;
   i5 = 6;
   continue;
  } else if ((i5 | 0) == 6) {
   HEAP16[i1 >> 1] = HEAP16[i10 + ((HEAPU8[i3 >> 0] | 0) << 1) >> 1] | 0;
   i1 = i1 + 2 | 0;
   i3 = i3 + 1 | 0;
   i5 = 7;
   continue;
  } else if ((i5 | 0) == 7) {
   HEAP16[i1 >> 1] = HEAP16[i10 + ((HEAPU8[i3 >> 0] | 0) << 1) >> 1] | 0;
   i1 = i1 + 2 | 0;
   i3 = i3 + 1 | 0;
   i5 = 8;
   continue;
  } else if ((i5 | 0) == 8) {
   HEAP16[i1 >> 1] = HEAP16[i10 + ((HEAPU8[i3 >> 0] | 0) << 1) >> 1] | 0;
   i1 = i1 + 2 | 0;
   i3 = i3 + 1 | 0;
   i5 = 9;
   continue;
  } else if ((i5 | 0) == 9) {
   HEAP16[i1 >> 1] = HEAP16[i10 + ((HEAPU8[i3 >> 0] | 0) << 1) >> 1] | 0;
   i1 = i1 + 2 | 0;
   i3 = i3 + 1 | 0;
   i5 = 10;
   continue;
  } else if ((i5 | 0) == 10) {
   HEAP16[i1 >> 1] = HEAP16[i10 + ((HEAPU8[i3 >> 0] | 0) << 1) >> 1] | 0;
   i1 = i1 + 2 | 0;
   i3 = i3 + 1 | 0;
   i5 = 11;
   continue;
  } else if ((i5 | 0) == 11) {
   i5 = i3 + 1 | 0;
   HEAP16[i1 >> 1] = HEAP16[i10 + ((HEAPU8[i3 >> 0] | 0) << 1) >> 1] | 0;
   i1 = i1 + 2 | 0;
   if ((i4 | 0) > 1) {
    i4 = i4 + -1 | 0;
    i3 = i5;
    i5 = 4;
    continue;
   } else {
    i3 = i5;
    i5 = 12;
    continue;
   }
  } else if ((i5 | 0) == 12) if (!i2) break L4; else {
   i1 = i1 + i9 | 0;
   i3 = i3 + i8 | 0;
   continue L4;
  }
 }
 return;
}

function _Color24DitherYV12Mod1X(i18, i20, i5, i2, i3, i7, i4, i19, i6) {
 i18 = i18 | 0;
 i20 = i20 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 i19 = i19 | 0;
 i6 = i6 | 0;
 var i1 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i16 = (i19 | 0) / 2 | 0;
 i1 = ((i6 << 1) + i19 | 0) * 3 | 0;
 if ((i4 + 1 | 0) >>> 0 < 3 | (i19 + 1 | 0) >>> 0 < 3) return;
 i15 = i16 * 6 | 0;
 i22 = i16 << 1;
 i17 = i22 + i19 | 0;
 i22 = i22 + i19 | 0;
 i21 = i15 + i1 | 0;
 i15 = i15 + i1 | 0;
 i14 = i5;
 i13 = (i4 | 0) / 2 | 0;
 i11 = i5;
 i12 = i7;
 i8 = i7 + ((i6 + i19 | 0) * 3 | 0) | 0;
 while (1) {
  i13 = i13 + -1 | 0;
  i1 = i14;
  i4 = i2;
  i5 = i3;
  i3 = i3 + i16 | 0;
  i6 = i11 + i19 | 0;
  i7 = i12;
  i9 = i8;
  i10 = i16;
  while (1) {
   i10 = i10 + -1 | 0;
   i26 = HEAPU8[i4 >> 0] | 0;
   i25 = (HEAP32[i18 + (i26 << 2) >> 2] | 0) + 256 | 0;
   i23 = HEAPU8[i5 >> 0] | 0;
   i26 = (HEAP32[i18 + ((i26 | 256) << 2) >> 2] | 0) + 1024 + (HEAP32[i18 + ((i23 | 512) << 2) >> 2] | 0) | 0;
   i23 = (HEAP32[i18 + ((i23 | 768) << 2) >> 2] | 0) + 1792 | 0;
   i24 = HEAPU8[i1 >> 0] | 0;
   i24 = HEAP32[i20 + (i24 + i26 << 2) >> 2] | HEAP32[i20 + (i24 + i25 << 2) >> 2] | HEAP32[i20 + (i24 + i23 << 2) >> 2];
   HEAP8[i7 >> 0] = i24;
   HEAP8[i7 + 1 >> 0] = i24 >>> 8;
   HEAP8[i7 + 2 >> 0] = i24 >>> 16;
   i24 = HEAPU8[i1 + 1 >> 0] | 0;
   i24 = HEAP32[i20 + (i24 + i26 << 2) >> 2] | HEAP32[i20 + (i24 + i25 << 2) >> 2] | HEAP32[i20 + (i24 + i23 << 2) >> 2];
   HEAP8[i7 + 3 >> 0] = i24;
   HEAP8[i7 + 4 >> 0] = i24 >>> 8;
   HEAP8[i7 + 5 >> 0] = i24 >>> 16;
   i24 = HEAPU8[i6 >> 0] | 0;
   i24 = HEAP32[i20 + (i24 + i26 << 2) >> 2] | HEAP32[i20 + (i24 + i25 << 2) >> 2] | HEAP32[i20 + (i24 + i23 << 2) >> 2];
   HEAP8[i9 >> 0] = i24;
   HEAP8[i9 + 1 >> 0] = i24 >>> 8;
   HEAP8[i9 + 2 >> 0] = i24 >>> 16;
   i24 = HEAPU8[i6 + 1 >> 0] | 0;
   i23 = HEAP32[i20 + (i24 + i26 << 2) >> 2] | HEAP32[i20 + (i24 + i25 << 2) >> 2] | HEAP32[i20 + (i24 + i23 << 2) >> 2];
   HEAP8[i9 + 3 >> 0] = i23;
   HEAP8[i9 + 4 >> 0] = i23 >>> 8;
   HEAP8[i9 + 5 >> 0] = i23 >>> 16;
   if (!i10) break; else {
    i1 = i1 + 2 | 0;
    i4 = i4 + 1 | 0;
    i5 = i5 + 1 | 0;
    i6 = i6 + 2 | 0;
    i7 = i7 + 6 | 0;
    i9 = i9 + 6 | 0;
   }
  }
  if (!i13) break; else {
   i2 = i2 + i16 | 0;
   i14 = i14 + i22 | 0;
   i11 = i11 + i17 | 0;
   i12 = i12 + i21 | 0;
   i8 = i8 + i15 | 0;
  }
 }
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd(i1, i24, i19, i18, d7) {
 i1 = i1 | 0;
 i24 = i24 | 0;
 i19 = i19 | 0;
 i18 = i18 | 0;
 d7 = +d7;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 i10 = i21 + 296 | 0;
 i5 = i21 + 32 | 0;
 i3 = i21 + 24 | 0;
 i2 = i21 + 8 | 0;
 i4 = i21;
 i8 = i21 + 300 | 0;
 i6 = i21 + 64 | 0;
 i9 = i21 + 68 | 0;
 i15 = i21 + 60 | 0;
 i14 = i21 + 56 | 0;
 i11 = i21 + 52 | 0;
 i12 = i21 + 48 | 0;
 i25 = i4;
 HEAP32[i25 >> 2] = 37;
 HEAP32[i25 + 4 >> 2] = 0;
 i25 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj(i4 + 1 | 0, 62969, HEAP32[i19 + 4 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = i8;
 i1 = __ZNSt3__16__clocEv() | 0;
 if (i25) {
  HEAP32[i2 >> 2] = HEAP32[i19 + 8 >> 2];
  HEAPF64[i2 + 8 >> 3] = d7;
  i1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i8, 30, i1, i4, i2) | 0;
 } else {
  HEAPF64[i3 >> 3] = d7;
  i1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i8, 30, i1, i4, i3) | 0;
 }
 if ((i1 | 0) > 29) {
  i2 = __ZNSt3__16__clocEv() | 0;
  HEAP32[i5 >> 2] = HEAP32[i19 + 8 >> 2];
  HEAPF64[i5 + 8 >> 3] = d7;
  i2 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i6, i2, i4, i5) | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i16 = i1;
   i23 = i1;
   i13 = i2;
  }
 } else {
  i16 = HEAP32[i6 >> 2] | 0;
  i23 = 0;
  i13 = i1;
 }
 i2 = i16 + i13 | 0;
 i3 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i16, i2, i19) | 0;
 if ((i16 | 0) != (i8 | 0)) {
  i1 = _malloc(i13 << 3) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i17 = i16;
   i22 = i1;
   i20 = i1;
  }
 } else {
  i17 = i8;
  i22 = 0;
  i20 = i9;
 }
 i25 = __ZNKSt3__18ios_base6getlocEv(i19) | 0;
 HEAP32[i11 >> 2] = i25;
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE(i17, i3, i2, i20, i15, i14, i11);
 __ZNSt3__114__shared_count16__release_sharedEv(i25) | 0;
 HEAP32[i12 >> 2] = HEAP32[i24 >> 2];
 i25 = HEAP32[i15 >> 2] | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 HEAP32[i10 >> 2] = HEAP32[i12 >> 2];
 i1 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i20, i25, i1, i19, i18) | 0;
 HEAP32[i24 >> 2] = i1;
 if (i22) _free(i22);
 _free(i23);
 STACKTOP = i21;
 return i1 | 0;
}

function _GLES2_UpdateViewport(i10) {
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i11 = i12;
 i9 = i12 + 24 | 0;
 i1 = i10 + 316 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((HEAP32[3491] | 0) != (HEAP32[i2 >> 2] | 0)) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i3 = i10 + 220 | 0;
 i4 = i10 + 224 | 0;
 FUNCTION_TABLE_viiii[HEAP32[i2 + 188 >> 2] & 63](HEAP32[i10 + 212 >> 2] | 0, HEAP32[i10 + 216 >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0);
 if ((((HEAP32[i2 + 268 >> 2] | 0) != 0 ? (i5 = HEAP32[i1 >> 2] | 0, i6 = HEAP32[i3 >> 2] | 0, (i6 | 0) != 0) : 0) ? (i7 = HEAP32[i4 >> 2] | 0, (i7 | 0) != 0) : 0) ? (HEAPF32[i9 >> 2] = 2.0 / +(i6 | 0), i8 = i9 + 4 | 0, HEAP32[i8 >> 2] = 0, HEAP32[i8 + 4 >> 2] = 0, HEAP32[i8 + 8 >> 2] = 0, HEAP32[i8 + 12 >> 2] = 0, i8 = (HEAP32[i10 + 304 >> 2] | 0) == 0, HEAPF32[i9 + 20 >> 2] = (i8 ? -2.0 : 2.0) / +(i7 | 0), i10 = i9 + 24 | 0, HEAP32[i10 >> 2] = 0, HEAP32[i10 + 4 >> 2] = 0, HEAP32[i10 + 8 >> 2] = 0, HEAP32[i10 + 12 >> 2] = 0, HEAP32[i10 + 16 >> 2] = 0, HEAP32[i10 + 20 >> 2] = 0, HEAPF32[i9 + 48 >> 2] = -1.0, HEAPF32[i9 + 52 >> 2] = i8 ? 1.0 : -1.0, HEAPF32[i9 + 56 >> 2] = 0.0, HEAPF32[i9 + 60 >> 2] = 1.0, i8 = i5 + 268 | 0, (_SDL_memcmp((HEAP32[i8 >> 2] | 0) + 88 | 0, i9, 64) | 0) != 0) : 0) {
  FUNCTION_TABLE_viiii[HEAP32[i5 + 176 >> 2] & 63](HEAP32[(HEAP32[i8 >> 2] | 0) + 16 >> 2] | 0, 1, 0, i9);
  _SDL_memcpy((HEAP32[i8 >> 2] | 0) + 88 | 0, i9, 64) | 0;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 if (!(HEAP32[i1 + 4 >> 2] | 0)) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i4 = i1 + 108 | 0;
 i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
 if (!i1) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 } else i2 = 62969;
 while (1) {
  if ((i2 | 0) != 0 ? (HEAP8[i2 >> 0] | 0) != 0 : 0) i3 = i2; else i3 = 46327;
  switch (i1 | 0) {
  case 1280:
   {
    i2 = 46398;
    break;
   }
  case 1281:
   {
    i2 = 46381;
    break;
   }
  case 1282:
   {
    i2 = 46360;
    break;
   }
  case 1285:
   {
    i2 = 46343;
    break;
   }
  default:
   i2 = 46335;
  }
  HEAP32[i11 >> 2] = i3;
  HEAP32[i11 + 4 >> 2] = 46440;
  HEAP32[i11 + 8 >> 2] = 388;
  HEAP32[i11 + 12 >> 2] = 47380;
  HEAP32[i11 + 16 >> 2] = i2;
  HEAP32[i11 + 20 >> 2] = i1;
  _SDL_SetError(46414, i11) | 0;
  i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
  if (!i1) {
   i1 = -1;
   break;
  } else i2 = i3;
 }
 STACKTOP = i12;
 return i1 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd(i1, i24, i22, i21, d7) {
 i1 = i1 | 0;
 i24 = i24 | 0;
 i22 = i22 | 0;
 i21 = i21 | 0;
 d7 = +d7;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i23 = 0, i25 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i10 = i16 + 68 | 0;
 i5 = i16 + 32 | 0;
 i3 = i16 + 24 | 0;
 i2 = i16 + 8 | 0;
 i4 = i16;
 i8 = i16 + 72 | 0;
 i6 = i16 + 64 | 0;
 i9 = i16 + 102 | 0;
 i15 = i16 + 60 | 0;
 i14 = i16 + 56 | 0;
 i11 = i16 + 52 | 0;
 i12 = i16 + 48 | 0;
 i25 = i4;
 HEAP32[i25 >> 2] = 37;
 HEAP32[i25 + 4 >> 2] = 0;
 i25 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj(i4 + 1 | 0, 62969, HEAP32[i22 + 4 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = i8;
 i1 = __ZNSt3__16__clocEv() | 0;
 if (i25) {
  HEAP32[i2 >> 2] = HEAP32[i22 + 8 >> 2];
  HEAPF64[i2 + 8 >> 3] = d7;
  i1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i8, 30, i1, i4, i2) | 0;
 } else {
  HEAPF64[i3 >> 3] = d7;
  i1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i8, 30, i1, i4, i3) | 0;
 }
 if ((i1 | 0) > 29) {
  i2 = __ZNSt3__16__clocEv() | 0;
  HEAP32[i5 >> 2] = HEAP32[i22 + 8 >> 2];
  HEAPF64[i5 + 8 >> 3] = d7;
  i2 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i6, i2, i4, i5) | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i17 = i1;
   i20 = i1;
   i13 = i2;
  }
 } else {
  i17 = HEAP32[i6 >> 2] | 0;
  i20 = 0;
  i13 = i1;
 }
 i2 = i17 + i13 | 0;
 i3 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i17, i2, i22) | 0;
 if ((i17 | 0) != (i8 | 0)) {
  i1 = _malloc(i13 << 1) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i18 = i17;
   i19 = i1;
   i23 = i1;
  }
 } else {
  i18 = i8;
  i19 = 0;
  i23 = i9;
 }
 i25 = __ZNKSt3__18ios_base6getlocEv(i22) | 0;
 HEAP32[i11 >> 2] = i25;
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i18, i3, i2, i23, i15, i14, i11);
 __ZNSt3__114__shared_count16__release_sharedEv(i25) | 0;
 HEAP32[i12 >> 2] = HEAP32[i24 >> 2];
 i24 = HEAP32[i15 >> 2] | 0;
 i25 = HEAP32[i14 >> 2] | 0;
 HEAP32[i10 >> 2] = HEAP32[i12 >> 2];
 i25 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i23, i24, i25, i22, i21) | 0;
 _free(i19);
 _free(i20);
 STACKTOP = i16;
 return i25 | 0;
}

function _SDL_CreateRGBSurface(i1, i6, i7, i5, i4, i3, i2, i11) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i11 = i11 | 0;
 var i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = _SDL_MasksToPixelFormatEnum(i5, i4, i3, i2, i11) | 0;
 if (!i1) {
  _SDL_SetError(40825, i10) | 0;
  i11 = 0;
  STACKTOP = i10;
  return i11 | 0;
 }
 i8 = _SDL_calloc(1, 60) | 0;
 if (!i8) {
  _SDL_Error(0) | 0;
  i11 = 0;
  STACKTOP = i10;
  return i11 | 0;
 }
 i5 = _SDL_AllocFormat(i1) | 0;
 i4 = i8 + 4 | 0;
 HEAP32[i4 >> 2] = i5;
 if (!i5) {
  _SDL_FreeSurface(i8);
  i11 = 0;
  STACKTOP = i10;
  return i11 | 0;
 }
 i5 = i8 + 8 | 0;
 HEAP32[i5 >> 2] = i6;
 i6 = i8 + 12 | 0;
 HEAP32[i6 >> 2] = i7;
 i3 = i8 + 16 | 0;
 HEAP32[i3 >> 2] = _SDL_CalculatePitch(i8) | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 HEAP32[i8 + 36 >> 2] = 0;
 HEAP32[i8 + 40 >> 2] = 0;
 HEAP32[i8 + 44 >> 2] = i1;
 HEAP32[i8 + 48 >> 2] = i2;
 i2 = HEAP32[i4 >> 2] | 0;
 i7 = HEAP32[i2 >> 2] | 0;
 if ((i7 | 0) == 0 | (i7 & -268435456 | 0) == 268435456 ? ((i7 >>> 24 & 15) + -1 | 0) >>> 0 < 3 : 0) {
  i1 = _SDL_AllocPalette(1 << (HEAPU8[i2 + 8 >> 0] | 0)) | 0;
  if (!i1) {
   _SDL_FreeSurface(i8);
   i11 = 0;
   STACKTOP = i10;
   return i11 | 0;
  }
  if ((HEAP32[i1 >> 2] | 0) == 2) {
   i7 = HEAP32[i1 + 4 >> 2] | 0;
   HEAP8[i7 >> 0] = -1;
   HEAP8[i7 + 1 >> 0] = -1;
   HEAP8[i7 + 2 >> 0] = -1;
   HEAP8[i7 + 4 >> 0] = 0;
   HEAP8[i7 + 5 >> 0] = 0;
   HEAP8[i7 + 6 >> 0] = 0;
  }
  if ((_SDL_SetPixelFormatPalette(HEAP32[i4 >> 2] | 0, i1) | 0) >= 0) _SDL_InvalidateMap(HEAP32[i8 + 52 >> 2] | 0);
  _SDL_FreePalette(i1);
  i1 = HEAP32[i5 >> 2] | 0;
 }
 do if ((i1 | 0) != 0 ? (i9 = HEAP32[i6 >> 2] | 0, (i9 | 0) != 0) : 0) {
  i1 = _SDL_malloc(Math_imul(HEAP32[i3 >> 2] | 0, i9) | 0) | 0;
  HEAP32[i8 + 20 >> 2] = i1;
  if (i1) {
   _SDL_memset(i1, 0, Math_imul(HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0) | 0;
   break;
  }
  _SDL_FreeSurface(i8);
  _SDL_Error(0) | 0;
  i11 = 0;
  STACKTOP = i10;
  return i11 | 0;
 } while (0);
 i1 = _SDL_AllocBlitMap() | 0;
 HEAP32[i8 + 52 >> 2] = i1;
 if (!i1) {
  _SDL_FreeSurface(i8);
  i11 = 0;
  STACKTOP = i10;
  return i11 | 0;
 }
 if ((i11 | 0) != 0 ? (i7 = i1 + 68 | 0, i11 = HEAP32[i7 >> 2] | 0, i9 = i11 & -113 | 16, HEAP32[i7 >> 2] = i9, (i9 | 0) != (i11 | 0)) : 0) _SDL_InvalidateMap(i1);
 HEAP32[i8 + 56 >> 2] = 1;
 i11 = i8;
 STACKTOP = i10;
 return i11 | 0;
}

function _SDL_CreateRenderer(i11, i3, i2) {
 i11 = i11 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i10 = i12 + 40 | 0;
 i9 = i12 + 32 | 0;
 i4 = i12 + 24 | 0;
 i7 = i12 + 16 | 0;
 if (!i11) {
  _SDL_SetError(41324, i12) | 0;
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 if (_SDL_GetWindowData(i11, 37632) | 0) {
  _SDL_SetError(37654, i12 + 8 | 0) | 0;
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i1 = _SDL_GetHint(37694) | 0;
 do if (i1) if ((HEAP8[i1 >> 0] | 0) == 48) {
  i2 = i2 & -5;
  break;
 } else {
  i2 = i2 | 4;
  break;
 } while (0);
 do if ((i3 | 0) >= 0) if ((i3 | 0) > 1) {
  HEAP32[i4 >> 2] = 1;
  _SDL_SetError(37748, i4) | 0;
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 } else {
  i1 = FUNCTION_TABLE_iii[HEAP32[HEAP32[12200 + (i3 << 2) >> 2] >> 2] & 63](i11, i2) | 0;
  if (!i1) i1 = 0; else {
   i2 = 0;
   break;
  }
  STACKTOP = i12;
  return i1 | 0;
 } else {
  i1 = _SDL_GetHint(41167) | 0;
  do if (i1) {
   if (_SDL_strcasecmp(i1, HEAP32[820] | 0) | 0) if (!(_SDL_strcasecmp(i1, HEAP32[842] | 0) | 0)) i1 = 3364; else {
    i8 = 14;
    break;
   } else i1 = 3276;
   i1 = FUNCTION_TABLE_iii[HEAP32[i1 >> 2] & 63](i11, i2) | 0;
   if (!i1) i8 = 14;
  } else i8 = 14; while (0);
  do if ((i8 | 0) == 14) {
   if ((HEAP32[821] & i2 | 0) == (i2 | 0) ? (i5 = FUNCTION_TABLE_iii[HEAP32[3276 >> 2] & 63](i11, i2) | 0, (i5 | 0) != 0) : 0) {
    i1 = i5;
    break;
   }
   if ((HEAP32[843] & i2 | 0) == (i2 | 0) ? (i6 = FUNCTION_TABLE_iii[HEAP32[3364 >> 2] & 63](i11, i2) | 0, (i6 | 0) != 0) : 0) {
    i1 = i6;
    break;
   }
   _SDL_SetError(37711, i7) | 0;
   i11 = 0;
   STACKTOP = i12;
   return i11 | 0;
  } while (0);
  i2 = (i1 | 0) == 0;
 } while (0);
 HEAP32[i1 >> 2] = 37791;
 HEAP32[i1 + 188 >> 2] = i11;
 HEAPF32[i1 + 284 >> 2] = 1.0;
 HEAPF32[i1 + 288 >> 2] = 1.0;
 HEAP32[i1 + 192 >> 2] = ((_SDL_GetWindowFlags(i11) | 0) & 72 | 0) != 0 & 1;
 _SDL_SetWindowData(i11, 37632, i1) | 0;
 if (!i2 ? (HEAP32[i1 >> 2] | 0) == 37791 : 0) {
  HEAP32[i1 + 212 >> 2] = 0;
  HEAP32[i1 + 216 >> 2] = 0;
  if ((_SDL_GetRendererOutputSize(i1, i1 + 220 | 0, i1 + 224 | 0) | 0) >= 0) FUNCTION_TABLE_ii[HEAP32[i1 + 48 >> 2] & 127](i1) | 0;
 } else _SDL_SetError(37792, i9) | 0;
 _SDL_AddEventWatch(22, i1);
 HEAP32[i10 >> 2] = HEAP32[i1 + 104 >> 2];
 _SDL_LogInfo(6, 37809, i10);
 i11 = i1;
 STACKTOP = i12;
 return i11 | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i7, i8, i3) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 i1 = HEAP32[i6 >> 2] | 0;
 do if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
   HEAP32[i6 >> 2] = 0;
   i1 = 0;
   break;
  } else {
   i1 = HEAP32[i6 >> 2] | 0;
   break;
  }
 } else i1 = 0; while (0);
 i2 = (i1 | 0) == 0;
 i1 = HEAP32[i7 >> 2] | 0;
 do if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i7 >> 2] = 0;
   i5 = 11;
   break;
  }
  if (i2) {
   i4 = i1;
   i5 = 13;
  } else i5 = 12;
 } else i5 = 11; while (0);
 if ((i5 | 0) == 11) if (i2) i5 = 12; else {
  i4 = 0;
  i5 = 13;
 }
 L16 : do if ((i5 | 0) == 12) HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 6; else if ((i5 | 0) == 13) {
  i1 = HEAP32[i6 >> 2] | 0;
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAPU8[i2 >> 0] | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 63](i3, i1 & 255, 0) | 0) << 24 >> 24 != 37) {
   HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 4;
   break;
  }
  i1 = HEAP32[i6 >> 2] | 0;
  i2 = i1 + 12 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   i1 = HEAP32[i6 >> 2] | 0;
   if (!i1) i1 = 0; else i5 = 21;
  } else {
   HEAP32[i2 >> 2] = i3 + 1;
   i5 = 21;
  }
  do if ((i5 | 0) == 21) if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
   HEAP32[i6 >> 2] = 0;
   i1 = 0;
   break;
  } else {
   i1 = HEAP32[i6 >> 2] | 0;
   break;
  } while (0);
  i1 = (i1 | 0) == 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
    HEAP32[i7 >> 2] = 0;
    i5 = 30;
    break;
   }
   if (i1) break L16;
  } else i5 = 30; while (0);
  if ((i5 | 0) == 30 ? !i1 : 0) break;
  HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 2;
 } while (0);
 return;
}

function _Color16DitherYV12Mod2X(i22, i24, i5, i2, i3, i6, i4, i23, i1) {
 i22 = i22 | 0;
 i24 = i24 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i23 = i23 | 0;
 i1 = i1 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i1 = (i1 | 0) / 2 | 0;
 i17 = i1 + i23 | 0;
 i19 = (i23 | 0) / 2 | 0;
 i1 = (i17 * 3 | 0) + i1 | 0;
 if ((i4 + 1 | 0) >>> 0 < 3) return;
 i16 = i17 + 1 | 0;
 if ((i23 + 1 | 0) >>> 0 < 3) return;
 i15 = i19 << 1;
 i18 = i15 + i23 | 0;
 i21 = i15 + i23 | 0;
 i20 = i15 + i1 | 0;
 i15 = i15 + i1 | 0;
 i14 = i5;
 i13 = (i4 | 0) / 2 | 0;
 i11 = i5;
 i12 = i6;
 i8 = i6 + (i17 << 1 << 2) | 0;
 while (1) {
  i13 = i13 + -1 | 0;
  i1 = i14;
  i4 = i2;
  i5 = i3;
  i3 = i3 + i19 | 0;
  i6 = i11 + i23 | 0;
  i7 = i12;
  i9 = i8;
  i10 = i19;
  while (1) {
   i10 = i10 + -1 | 0;
   i28 = HEAPU8[i4 >> 0] | 0;
   i27 = (HEAP32[i22 + (i28 << 2) >> 2] | 0) + 256 | 0;
   i25 = HEAPU8[i5 >> 0] | 0;
   i28 = (HEAP32[i22 + ((i28 | 256) << 2) >> 2] | 0) + 1024 + (HEAP32[i22 + ((i25 | 512) << 2) >> 2] | 0) | 0;
   i25 = (HEAP32[i22 + ((i25 | 768) << 2) >> 2] | 0) + 1792 | 0;
   i26 = HEAPU8[i1 >> 0] | 0;
   i26 = HEAP32[i24 + (i26 + i28 << 2) >> 2] | HEAP32[i24 + (i26 + i27 << 2) >> 2] | HEAP32[i24 + (i26 + i25 << 2) >> 2];
   HEAP32[i7 + (i17 << 2) >> 2] = i26;
   HEAP32[i7 >> 2] = i26;
   i26 = HEAPU8[i1 + 1 >> 0] | 0;
   i26 = HEAP32[i24 + (i26 + i28 << 2) >> 2] | HEAP32[i24 + (i26 + i27 << 2) >> 2] | HEAP32[i24 + (i26 + i25 << 2) >> 2];
   HEAP32[i7 + (i16 << 2) >> 2] = i26;
   HEAP32[i7 + 4 >> 2] = i26;
   i26 = HEAPU8[i6 >> 0] | 0;
   i26 = HEAP32[i24 + (i26 + i28 << 2) >> 2] | HEAP32[i24 + (i26 + i27 << 2) >> 2] | HEAP32[i24 + (i26 + i25 << 2) >> 2];
   HEAP32[i9 + (i17 << 2) >> 2] = i26;
   HEAP32[i9 >> 2] = i26;
   i26 = HEAPU8[i6 + 1 >> 0] | 0;
   i25 = HEAP32[i24 + (i26 + i28 << 2) >> 2] | HEAP32[i24 + (i26 + i27 << 2) >> 2] | HEAP32[i24 + (i26 + i25 << 2) >> 2];
   HEAP32[i9 + (i16 << 2) >> 2] = i25;
   HEAP32[i9 + 4 >> 2] = i25;
   if (!i10) break; else {
    i1 = i1 + 2 | 0;
    i4 = i4 + 1 | 0;
    i5 = i5 + 1 | 0;
    i6 = i6 + 2 | 0;
    i7 = i7 + 8 | 0;
    i9 = i9 + 8 | 0;
   }
  }
  if (!i13) break; else {
   i2 = i2 + i19 | 0;
   i14 = i14 + i21 | 0;
   i11 = i11 + i18 | 0;
   i12 = i12 + (i20 << 2) | 0;
   i8 = i8 + (i15 << 2) | 0;
  }
 }
 return;
}

function _SDL_PrivateLoadButtonMapping(i6, i1, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i2 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i10 = i11 + 8 | 0;
 i9 = i11;
 i7 = i11 + 32 | 0;
 i8 = i11 + 12 | 0;
 i4 = i6;
 i2 = i4 + 16 | 0;
 do {
  HEAP8[i4 >> 0] = HEAP8[i1 >> 0] | 0;
  i4 = i4 + 1 | 0;
  i1 = i1 + 1 | 0;
 } while ((i4 | 0) < (i2 | 0));
 HEAP32[i6 + 16 >> 2] = i3;
 HEAP32[i6 + 196 >> 2] = -1;
 HEAP32[i6 + 204 >> 2] = -1;
 HEAP32[i6 + 212 >> 2] = -1;
 HEAP32[i6 + 220 >> 2] = -1;
 HEAP32[i6 + 228 >> 2] = -1;
 HEAP32[i6 + 236 >> 2] = -1;
 HEAP32[i6 + 244 >> 2] = -1;
 HEAP32[i6 + 252 >> 2] = -1;
 HEAP32[i6 + 260 >> 2] = -1;
 HEAP32[i6 + 268 >> 2] = -1;
 HEAP32[i6 + 276 >> 2] = -1;
 HEAP32[i6 + 284 >> 2] = -1;
 HEAP32[i6 + 292 >> 2] = -1;
 HEAP32[i6 + 300 >> 2] = -1;
 _memset(i6 + 20 | 0, -1, 172) | 0;
 i1 = 0;
 do {
  HEAP32[i6 + 308 + (i1 << 2) >> 2] = -1;
  HEAP32[i6 + 388 + (i1 << 2) >> 2] = -1;
  HEAP32[i6 + 468 + (i1 << 2) >> 2] = -1;
  HEAP32[i6 + 548 + (i1 << 2) >> 2] = -1;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 20);
 _memset(i6 + 628 | 0, -1, 256) | 0;
 _SDL_memset(i7, 0, 20) | 0;
 _SDL_memset(i8, 0, 20) | 0;
 L4 : do if (i5) {
  i1 = 1;
  i2 = 0;
  L5 : while (1) {
   i3 = HEAP8[i5 >> 0] | 0;
   L7 : do switch (i3 << 24 >> 24) {
   case 0:
    break L4;
   case 58:
    {
     i1 = 0;
     i2 = 0;
     break;
    }
   default:
    {
     switch (i3 << 24 >> 24) {
     case 32:
      break L7;
     case 44:
      {
       _SDL_PrivateGameControllerParseButton(i7, i8, i6);
       _SDL_memset(i7, 0, 20) | 0;
       _SDL_memset(i8, 0, 20) | 0;
       i1 = 1;
       i2 = 0;
       break L7;
      }
     default:
      {}
     }
     i4 = i2 >>> 0 > 19;
     if (!i1) {
      if (i4) {
       i1 = 12;
       break L5;
      }
      HEAP8[i8 + i2 >> 0] = i3;
      i1 = 0;
      i2 = i2 + 1 | 0;
      break L7;
     } else {
      if (i4) {
       i1 = 9;
       break L5;
      }
      HEAP8[i7 + i2 >> 0] = i3;
      i2 = i2 + 1 | 0;
      break L7;
     }
    }
   } while (0);
   i5 = i5 + 1 | 0;
  }
  if ((i1 | 0) == 9) {
   HEAP32[i9 >> 2] = i7;
   _SDL_SetError(37094, i9) | 0;
   STACKTOP = i11;
   return;
  } else if ((i1 | 0) == 12) {
   HEAP32[i10 >> 2] = i8;
   _SDL_SetError(37120, i10) | 0;
   STACKTOP = i11;
   return;
  }
 } while (0);
 _SDL_PrivateGameControllerParseButton(i7, i8, i6);
 STACKTOP = i11;
 return;
}

function _SDL_Blit_RGB888_ARGB8888_Blend_Scale(i23) {
 i23 = i23 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0;
 i1 = HEAP32[i23 + 52 >> 2] | 0;
 i21 = i23 + 28 | 0;
 i24 = HEAP32[i21 >> 2] | 0;
 i22 = (HEAP32[i23 + 8 >> 2] << 16 | 0) / (i24 | 0) | 0;
 i18 = i23 + 24 | 0;
 i2 = HEAP32[i18 >> 2] | 0;
 i19 = (HEAP32[i23 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 i3 = i24 + -1 | 0;
 HEAP32[i21 >> 2] = i3;
 if (!i24) return;
 i24 = i23 + 20 | 0;
 i20 = i23 + 32 | 0;
 i16 = i1 & 112;
 i17 = i23 + 12 | 0;
 i5 = HEAP32[i24 >> 2] | 0;
 i15 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i14 = i1 + -65536 | 0;
   i13 = i14 >>> 16;
   i14 = i14 - (i13 << 16) | 0;
   i4 = i4 + 1 + i13 | 0;
  } else i14 = i1;
  if (!i2) i2 = i3; else {
   i1 = 65536;
   i3 = 0;
   i6 = -1;
   while (1) {
    i2 = i2 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i3 = i1 + -65536 | 0;
     i1 = i3 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i3 - (i1 << 16) | 0;
     i3 = (HEAP32[i23 >> 2] | 0) + ((Math_imul(HEAP32[i17 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i10 = HEAP32[i3 >> 2] | 0;
    i7 = i10 >>> 16 & 255;
    i8 = i10 >>> 8 & 255;
    i10 = i10 & 255;
    i9 = HEAP32[i5 >> 2] | 0;
    i13 = i9 >>> 16 & 255;
    i12 = i9 >>> 8 & 255;
    i11 = i9 & 255;
    i9 = i9 >>> 24;
    switch (i16 | 0) {
    case 16:
     {
      i9 = 255;
      break;
     }
    case 32:
     {
      i7 = i13 + i7 | 0;
      i8 = i12 + i8 | 0;
      i10 = i11 + i10 | 0;
      i10 = i10 >>> 0 > 255 ? 255 : i10;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      break;
     }
    case 64:
     {
      i10 = ((Math_imul(i11, i10) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i12, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i13, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {
      i10 = i11;
      i8 = i12;
      i7 = i13;
     }
    }
    HEAP32[i5 >> 2] = i8 << 8 | i7 << 16 | i10 | i9 << 24;
    if (!i2) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i19 | 0;
    }
   }
   i2 = HEAP32[i21 >> 2] | 0;
  }
  i1 = i15 + (HEAP32[i20 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i21 >> 2] = i3;
  if (!i2) break;
  i2 = HEAP32[i18 >> 2] | 0;
  i15 = i1;
  i5 = i1;
  i1 = i14 + i22 | 0;
 }
 HEAP32[i24 >> 2] = i1;
 return;
}

function _SDL_Blit_BGR888_ARGB8888_Blend_Scale(i23) {
 i23 = i23 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0;
 i1 = HEAP32[i23 + 52 >> 2] | 0;
 i21 = i23 + 28 | 0;
 i24 = HEAP32[i21 >> 2] | 0;
 i22 = (HEAP32[i23 + 8 >> 2] << 16 | 0) / (i24 | 0) | 0;
 i18 = i23 + 24 | 0;
 i2 = HEAP32[i18 >> 2] | 0;
 i19 = (HEAP32[i23 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 i3 = i24 + -1 | 0;
 HEAP32[i21 >> 2] = i3;
 if (!i24) return;
 i24 = i23 + 20 | 0;
 i20 = i23 + 32 | 0;
 i16 = i1 & 112;
 i17 = i23 + 12 | 0;
 i5 = HEAP32[i24 >> 2] | 0;
 i15 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i14 = i1 + -65536 | 0;
   i13 = i14 >>> 16;
   i14 = i14 - (i13 << 16) | 0;
   i4 = i4 + 1 + i13 | 0;
  } else i14 = i1;
  if (!i2) i2 = i3; else {
   i1 = 65536;
   i3 = 0;
   i6 = -1;
   while (1) {
    i2 = i2 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i3 = i1 + -65536 | 0;
     i1 = i3 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i3 - (i1 << 16) | 0;
     i3 = (HEAP32[i23 >> 2] | 0) + ((Math_imul(HEAP32[i17 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i7 = HEAP32[i3 >> 2] | 0;
    i10 = i7 >>> 16 & 255;
    i8 = i7 >>> 8 & 255;
    i7 = i7 & 255;
    i9 = HEAP32[i5 >> 2] | 0;
    i13 = i9 >>> 16 & 255;
    i12 = i9 >>> 8 & 255;
    i11 = i9 & 255;
    i9 = i9 >>> 24;
    switch (i16 | 0) {
    case 16:
     {
      i9 = 255;
      break;
     }
    case 32:
     {
      i7 = i13 + i7 | 0;
      i8 = i12 + i8 | 0;
      i10 = i10 + i11 | 0;
      i10 = i10 >>> 0 > 255 ? 255 : i10;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      break;
     }
    case 64:
     {
      i10 = ((Math_imul(i10, i11) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i12, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i13, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {
      i10 = i11;
      i8 = i12;
      i7 = i13;
     }
    }
    HEAP32[i5 >> 2] = i8 << 8 | i7 << 16 | i10 | i9 << 24;
    if (!i2) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i19 | 0;
    }
   }
   i2 = HEAP32[i21 >> 2] | 0;
  }
  i1 = i15 + (HEAP32[i20 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i21 >> 2] = i3;
  if (!i2) break;
  i2 = HEAP32[i18 >> 2] | 0;
  i15 = i1;
  i5 = i1;
  i1 = i14 + i22 | 0;
 }
 HEAP32[i24 >> 2] = i1;
 return;
}

function _Blit565to565SurfaceAlpha(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = HEAP8[i4 + 63 >> 0] | 0;
 if (i1 << 24 >> 24 == -128) {
  _Blit16to16SurfaceAlpha128(i4, -2082);
  return;
 }
 i2 = HEAP32[i4 + 24 >> 2] | 0;
 i3 = HEAP32[i4 + 28 >> 2] | 0;
 i10 = HEAP32[i4 + 16 >> 2] >> 1;
 i11 = HEAP32[i4 + 36 >> 2] >> 1;
 i8 = (i1 & 255) >>> 3;
 if (!i3) return;
 i9 = (i2 + 3 | 0) / 4 | 0;
 i7 = i2 & 3;
 i1 = HEAP32[i4 + 20 >> 2] | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 L8 : while (1) {
  i3 = i3 + -1 | 0;
  switch (i7 | 0) {
  case 0:
   {
    i4 = i9;
    i6 = 6;
    break;
   }
  case 3:
   {
    i4 = i9;
    i6 = 7;
    break;
   }
  case 2:
   {
    i4 = i9;
    i6 = 8;
    break;
   }
  case 1:
   {
    i5 = i1;
    i4 = i9;
    i1 = i2;
    i6 = 9;
    break;
   }
  default:
   i6 = 10;
  }
  while (1) if ((i6 | 0) == 6) {
   i12 = HEAPU16[i2 >> 1] | 0;
   i5 = HEAPU16[i1 >> 1] | 0;
   i5 = (i5 << 16 | i5) & 132184095;
   i5 = ((Math_imul(((i12 << 16 | i12) & 132184095) - i5 | 0, i8) | 0) >>> 5) + i5 & 132184095;
   HEAP16[i1 >> 1] = i5 >>> 16 | i5;
   i1 = i1 + 2 | 0;
   i2 = i2 + 2 | 0;
   i6 = 7;
   continue;
  } else if ((i6 | 0) == 7) {
   i5 = HEAPU16[i2 >> 1] | 0;
   i12 = HEAPU16[i1 >> 1] | 0;
   i12 = (i12 << 16 | i12) & 132184095;
   i12 = ((Math_imul(((i5 << 16 | i5) & 132184095) - i12 | 0, i8) | 0) >>> 5) + i12 & 132184095;
   HEAP16[i1 >> 1] = i12 >>> 16 | i12;
   i1 = i1 + 2 | 0;
   i2 = i2 + 2 | 0;
   i6 = 8;
   continue;
  } else if ((i6 | 0) == 8) {
   i12 = HEAPU16[i2 >> 1] | 0;
   i5 = HEAPU16[i1 >> 1] | 0;
   i5 = (i5 << 16 | i5) & 132184095;
   i5 = ((Math_imul(((i12 << 16 | i12) & 132184095) - i5 | 0, i8) | 0) >>> 5) + i5 & 132184095;
   HEAP16[i1 >> 1] = i5 >>> 16 | i5;
   i5 = i1 + 2 | 0;
   i1 = i2 + 2 | 0;
   i6 = 9;
   continue;
  } else if ((i6 | 0) == 9) {
   i2 = i1 + 2 | 0;
   i1 = HEAPU16[i1 >> 1] | 0;
   i12 = HEAPU16[i5 >> 1] | 0;
   i12 = (i12 << 16 | i12) & 132184095;
   i12 = ((Math_imul(((i1 << 16 | i1) & 132184095) - i12 | 0, i8) | 0) >>> 5) + i12 & 132184095;
   i1 = i5 + 2 | 0;
   HEAP16[i5 >> 1] = i12 >>> 16 | i12;
   if ((i4 | 0) > 1) {
    i4 = i4 + -1 | 0;
    i6 = 6;
    continue;
   } else {
    i6 = 10;
    continue;
   }
  } else if ((i6 | 0) == 10) if (!i3) break L8; else {
   i1 = i1 + (i11 << 1) | 0;
   i2 = i2 + (i10 << 1) | 0;
   continue L8;
  }
 }
 return;
}

function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i1, i8, i9, i4, i2, i10, i7, i3) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i10 = i10 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i4;
 i6 = i2;
 if (i3 & 2) if ((i6 - i4 | 0) < 3) i1 = 1; else {
  HEAP32[i10 >> 2] = i4 + 1;
  HEAP8[i4 >> 0] = -17;
  i5 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i5 + 1;
  HEAP8[i5 >> 0] = -69;
  i5 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i5 + 1;
  HEAP8[i5 >> 0] = -65;
  i5 = 4;
 } else i5 = 4;
 L4 : do if ((i5 | 0) == 4) {
  i1 = HEAP32[i9 >> 2] | 0;
  if (i1 >>> 0 < i8 >>> 0) while (1) {
   i3 = HEAP32[i1 >> 2] | 0;
   if (i3 >>> 0 > i7 >>> 0 | (i3 & -2048 | 0) == 55296) {
    i1 = 2;
    break L4;
   }
   do if (i3 >>> 0 >= 128) {
    if (i3 >>> 0 < 2048) {
     i1 = HEAP32[i10 >> 2] | 0;
     if ((i6 - i1 | 0) < 2) {
      i1 = 1;
      break L4;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3 >>> 6 | 192;
     i5 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 & 63 | 128;
     break;
    }
    i1 = HEAP32[i10 >> 2] | 0;
    i2 = i6 - i1 | 0;
    if (i3 >>> 0 < 65536) {
     if ((i2 | 0) < 3) {
      i1 = 1;
      break L4;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3 >>> 12 | 224;
     i5 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 >>> 6 & 63 | 128;
     i5 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 & 63 | 128;
     break;
    } else {
     if ((i2 | 0) < 4) {
      i1 = 1;
      break L4;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3 >>> 18 | 240;
     i5 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 >>> 12 & 63 | 128;
     i5 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 >>> 6 & 63 | 128;
     i5 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 & 63 | 128;
     break;
    }
   } else {
    i1 = HEAP32[i10 >> 2] | 0;
    if ((i6 - i1 | 0) < 1) {
     i1 = 1;
     break L4;
    }
    HEAP32[i10 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = i3;
   } while (0);
   i1 = (HEAP32[i9 >> 2] | 0) + 4 | 0;
   HEAP32[i9 >> 2] = i1;
   if (i1 >>> 0 >= i8 >>> 0) {
    i1 = 0;
    break;
   }
  } else i1 = 0;
 } while (0);
 return i1 | 0;
}

function _Blit555to555SurfaceAlpha(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = HEAP8[i4 + 63 >> 0] | 0;
 if (i1 << 24 >> 24 == -128) {
  _Blit16to16SurfaceAlpha128(i4, -1058);
  return;
 }
 i2 = HEAP32[i4 + 24 >> 2] | 0;
 i3 = HEAP32[i4 + 28 >> 2] | 0;
 i10 = HEAP32[i4 + 16 >> 2] >> 1;
 i11 = HEAP32[i4 + 36 >> 2] >> 1;
 i8 = (i1 & 255) >>> 3;
 if (!i3) return;
 i9 = (i2 + 3 | 0) / 4 | 0;
 i7 = i2 & 3;
 i1 = HEAP32[i4 + 20 >> 2] | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 L8 : while (1) {
  i3 = i3 + -1 | 0;
  switch (i7 | 0) {
  case 0:
   {
    i4 = i9;
    i6 = 6;
    break;
   }
  case 3:
   {
    i4 = i9;
    i6 = 7;
    break;
   }
  case 2:
   {
    i4 = i9;
    i6 = 8;
    break;
   }
  case 1:
   {
    i5 = i1;
    i4 = i9;
    i1 = i2;
    i6 = 9;
    break;
   }
  default:
   i6 = 10;
  }
  while (1) if ((i6 | 0) == 6) {
   i12 = HEAPU16[i2 >> 1] | 0;
   i5 = HEAPU16[i1 >> 1] | 0;
   i5 = (i5 << 16 | i5) & 65043487;
   i5 = ((Math_imul(((i12 << 16 | i12) & 65043487) - i5 | 0, i8) | 0) >>> 5) + i5 & 65043487;
   HEAP16[i1 >> 1] = i5 >>> 16 | i5;
   i1 = i1 + 2 | 0;
   i2 = i2 + 2 | 0;
   i6 = 7;
   continue;
  } else if ((i6 | 0) == 7) {
   i5 = HEAPU16[i2 >> 1] | 0;
   i12 = HEAPU16[i1 >> 1] | 0;
   i12 = (i12 << 16 | i12) & 65043487;
   i12 = ((Math_imul(((i5 << 16 | i5) & 65043487) - i12 | 0, i8) | 0) >>> 5) + i12 & 65043487;
   HEAP16[i1 >> 1] = i12 >>> 16 | i12;
   i1 = i1 + 2 | 0;
   i2 = i2 + 2 | 0;
   i6 = 8;
   continue;
  } else if ((i6 | 0) == 8) {
   i12 = HEAPU16[i2 >> 1] | 0;
   i5 = HEAPU16[i1 >> 1] | 0;
   i5 = (i5 << 16 | i5) & 65043487;
   i5 = ((Math_imul(((i12 << 16 | i12) & 65043487) - i5 | 0, i8) | 0) >>> 5) + i5 & 65043487;
   HEAP16[i1 >> 1] = i5 >>> 16 | i5;
   i5 = i1 + 2 | 0;
   i1 = i2 + 2 | 0;
   i6 = 9;
   continue;
  } else if ((i6 | 0) == 9) {
   i2 = i1 + 2 | 0;
   i1 = HEAPU16[i1 >> 1] | 0;
   i12 = HEAPU16[i5 >> 1] | 0;
   i12 = (i12 << 16 | i12) & 65043487;
   i12 = ((Math_imul(((i1 << 16 | i1) & 65043487) - i12 | 0, i8) | 0) >>> 5) + i12 & 65043487;
   i1 = i5 + 2 | 0;
   HEAP16[i5 >> 1] = i12 >>> 16 | i12;
   if ((i4 | 0) > 1) {
    i4 = i4 + -1 | 0;
    i6 = 6;
    continue;
   } else {
    i6 = 10;
    continue;
   }
  } else if ((i6 | 0) == 10) if (!i3) break L8; else {
   i1 = i1 + (i11 << 1) | 0;
   i2 = i2 + (i10 << 1) | 0;
   continue L8;
  }
 }
 return;
}

function _SDL_Blit_RGBA8888_ARGB8888_Blend(i21) {
 i21 = i21 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0;
 i1 = HEAP32[i21 + 52 >> 2] | 0;
 i16 = i21 + 28 | 0;
 i20 = HEAP32[i16 >> 2] | 0;
 i2 = i20 + -1 | 0;
 HEAP32[i16 >> 2] = i2;
 if (!i20) return;
 i17 = i21 + 20 | 0;
 i18 = i21 + 24 | 0;
 i19 = i21 + 12 | 0;
 i20 = i21 + 32 | 0;
 i15 = (i1 & 48 | 0) != 0;
 i14 = i1 & 112;
 do {
  i1 = HEAP32[i18 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i21 >> 2] | 0;
   i1 = HEAP32[i17 >> 2] | 0;
   i3 = i2;
  } else {
   i13 = HEAP32[i17 >> 2] | 0;
   i4 = HEAP32[i21 >> 2] | 0;
   i11 = i13;
   i12 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i9 = HEAP32[i12 >> 2] | 0;
    i7 = i9 >>> 24;
    i6 = i9 >>> 16 & 255;
    i5 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    i8 = HEAP32[i11 >> 2] | 0;
    i2 = i8 >>> 16 & 255;
    i3 = i8 >>> 8 & 255;
    i10 = i8 & 255;
    i8 = i8 >>> 24;
    if (i15 & (i9 | 0) != 255) {
     i5 = ((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i9) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i9) | 0) >>> 0) / 255 | 0;
    }
    switch (i14 | 0) {
    case 16:
     {
      i22 = i9 ^ 255;
      i8 = (((Math_imul(i22, i8) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i5 = (((Math_imul(i22, i10) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i3 = (((Math_imul(i3, i22) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i2, i22) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i3 = i6 + i3 | 0;
      i5 = i5 + i10 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i10) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i10;
    }
    HEAP32[i11 >> 2] = i3 << 8 | i2 << 16 | i5 | i8 << 24;
    if (!i1) break; else {
     i11 = i11 + 4 | 0;
     i12 = i12 + 4 | 0;
    }
   }
   i1 = i13;
   i3 = HEAP32[i16 >> 2] | 0;
  }
  HEAP32[i21 >> 2] = i4 + (HEAP32[i19 >> 2] | 0);
  HEAP32[i17 >> 2] = i1 + (HEAP32[i20 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i16 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_BGRA8888_ARGB8888_Blend(i21) {
 i21 = i21 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0;
 i1 = HEAP32[i21 + 52 >> 2] | 0;
 i16 = i21 + 28 | 0;
 i20 = HEAP32[i16 >> 2] | 0;
 i2 = i20 + -1 | 0;
 HEAP32[i16 >> 2] = i2;
 if (!i20) return;
 i17 = i21 + 20 | 0;
 i18 = i21 + 24 | 0;
 i19 = i21 + 12 | 0;
 i20 = i21 + 32 | 0;
 i15 = (i1 & 48 | 0) != 0;
 i14 = i1 & 112;
 do {
  i1 = HEAP32[i18 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i21 >> 2] | 0;
   i1 = HEAP32[i17 >> 2] | 0;
   i3 = i2;
  } else {
   i13 = HEAP32[i17 >> 2] | 0;
   i4 = HEAP32[i21 >> 2] | 0;
   i11 = i13;
   i12 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i9 = HEAP32[i12 >> 2] | 0;
    i5 = i9 >>> 24;
    i6 = i9 >>> 16 & 255;
    i7 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    i8 = HEAP32[i11 >> 2] | 0;
    i2 = i8 >>> 16 & 255;
    i3 = i8 >>> 8 & 255;
    i10 = i8 & 255;
    i8 = i8 >>> 24;
    if (i15 & (i9 | 0) != 255) {
     i5 = ((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i9) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i9) | 0) >>> 0) / 255 | 0;
    }
    switch (i14 | 0) {
    case 16:
     {
      i22 = i9 ^ 255;
      i8 = (((Math_imul(i22, i8) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i5 = (((Math_imul(i22, i10) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i3 = (((Math_imul(i3, i22) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i2, i22) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i3 = i6 + i3 | 0;
      i5 = i5 + i10 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i10) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i10;
    }
    HEAP32[i11 >> 2] = i3 << 8 | i2 << 16 | i5 | i8 << 24;
    if (!i1) break; else {
     i11 = i11 + 4 | 0;
     i12 = i12 + 4 | 0;
    }
   }
   i1 = i13;
   i3 = HEAP32[i16 >> 2] | 0;
  }
  HEAP32[i21 >> 2] = i4 + (HEAP32[i19 >> 2] | 0);
  HEAP32[i17 >> 2] = i1 + (HEAP32[i20 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i16 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_ARGB8888_ARGB8888_Blend(i21) {
 i21 = i21 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0;
 i1 = HEAP32[i21 + 52 >> 2] | 0;
 i16 = i21 + 28 | 0;
 i20 = HEAP32[i16 >> 2] | 0;
 i2 = i20 + -1 | 0;
 HEAP32[i16 >> 2] = i2;
 if (!i20) return;
 i17 = i21 + 20 | 0;
 i18 = i21 + 24 | 0;
 i19 = i21 + 12 | 0;
 i20 = i21 + 32 | 0;
 i15 = (i1 & 48 | 0) != 0;
 i14 = i1 & 112;
 do {
  i1 = HEAP32[i18 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i21 >> 2] | 0;
   i1 = HEAP32[i17 >> 2] | 0;
   i3 = i2;
  } else {
   i13 = HEAP32[i17 >> 2] | 0;
   i4 = HEAP32[i21 >> 2] | 0;
   i11 = i13;
   i12 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i9 = HEAP32[i12 >> 2] | 0;
    i7 = i9 >>> 16 & 255;
    i6 = i9 >>> 8 & 255;
    i5 = i9 & 255;
    i9 = i9 >>> 24;
    i8 = HEAP32[i11 >> 2] | 0;
    i2 = i8 >>> 16 & 255;
    i3 = i8 >>> 8 & 255;
    i10 = i8 & 255;
    i8 = i8 >>> 24;
    if (i15 & (i9 | 0) != 255) {
     i5 = ((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i9) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i9) | 0) >>> 0) / 255 | 0;
    }
    switch (i14 | 0) {
    case 16:
     {
      i22 = i9 ^ 255;
      i8 = (((Math_imul(i22, i8) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i5 = (((Math_imul(i22, i10) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i3 = (((Math_imul(i3, i22) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i2, i22) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i3 = i6 + i3 | 0;
      i5 = i5 + i10 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i10) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i10;
    }
    HEAP32[i11 >> 2] = i3 << 8 | i2 << 16 | i5 | i8 << 24;
    if (!i1) break; else {
     i11 = i11 + 4 | 0;
     i12 = i12 + 4 | 0;
    }
   }
   i1 = i13;
   i3 = HEAP32[i16 >> 2] | 0;
  }
  HEAP32[i21 >> 2] = i4 + (HEAP32[i19 >> 2] | 0);
  HEAP32[i17 >> 2] = i1 + (HEAP32[i20 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i16 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_ABGR8888_ARGB8888_Blend(i21) {
 i21 = i21 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0;
 i1 = HEAP32[i21 + 52 >> 2] | 0;
 i16 = i21 + 28 | 0;
 i20 = HEAP32[i16 >> 2] | 0;
 i2 = i20 + -1 | 0;
 HEAP32[i16 >> 2] = i2;
 if (!i20) return;
 i17 = i21 + 20 | 0;
 i18 = i21 + 24 | 0;
 i19 = i21 + 12 | 0;
 i20 = i21 + 32 | 0;
 i15 = (i1 & 48 | 0) != 0;
 i14 = i1 & 112;
 do {
  i1 = HEAP32[i18 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i21 >> 2] | 0;
   i1 = HEAP32[i17 >> 2] | 0;
   i3 = i2;
  } else {
   i13 = HEAP32[i17 >> 2] | 0;
   i4 = HEAP32[i21 >> 2] | 0;
   i11 = i13;
   i12 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i9 = HEAP32[i12 >> 2] | 0;
    i5 = i9 >>> 16 & 255;
    i6 = i9 >>> 8 & 255;
    i7 = i9 & 255;
    i9 = i9 >>> 24;
    i8 = HEAP32[i11 >> 2] | 0;
    i2 = i8 >>> 16 & 255;
    i3 = i8 >>> 8 & 255;
    i10 = i8 & 255;
    i8 = i8 >>> 24;
    if (i15 & (i9 | 0) != 255) {
     i5 = ((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i9) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i9) | 0) >>> 0) / 255 | 0;
    }
    switch (i14 | 0) {
    case 16:
     {
      i22 = i9 ^ 255;
      i8 = (((Math_imul(i22, i8) | 0) >>> 0) / 255 | 0) + i9 | 0;
      i5 = (((Math_imul(i22, i10) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i3 = (((Math_imul(i3, i22) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i2, i22) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i3 = i6 + i3 | 0;
      i5 = i5 + i10 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i10) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i10;
    }
    HEAP32[i11 >> 2] = i3 << 8 | i2 << 16 | i5 | i8 << 24;
    if (!i1) break; else {
     i11 = i11 + 4 | 0;
     i12 = i12 + 4 | 0;
    }
   }
   i1 = i13;
   i3 = HEAP32[i16 >> 2] | 0;
  }
  HEAP32[i21 >> 2] = i4 + (HEAP32[i19 >> 2] | 0);
  HEAP32[i17 >> 2] = i1 + (HEAP32[i20 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i16 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(i2, i5, i6, i7, i1) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i8 = 0;
 i4 = i1 + 8 | 0;
 L1 : while (1) {
  i1 = HEAP32[i5 >> 2] | 0;
  do if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
    HEAP32[i5 >> 2] = 0;
    i1 = 0;
    break;
   } else {
    i1 = HEAP32[i5 >> 2] | 0;
    break;
   }
  } else i1 = 0; while (0);
  i1 = (i1 | 0) == 0;
  i2 = HEAP32[i6 >> 2] | 0;
  do if (i2) {
   if ((HEAP32[i2 + 12 >> 2] | 0) != (HEAP32[i2 + 16 >> 2] | 0)) if (i1) break; else break L1;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) != -1) if (i1) break; else break L1; else {
    HEAP32[i6 >> 2] = 0;
    i8 = 12;
    break;
   }
  } else i8 = 12; while (0);
  if ((i8 | 0) == 12) {
   i8 = 0;
   if (i1) {
    i2 = 0;
    break;
   } else i2 = 0;
  }
  i1 = HEAP32[i5 >> 2] | 0;
  i3 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAPU8[i3 >> 0] | 0;
  if ((i1 & 255) << 24 >> 24 <= -1) break;
  if (!(HEAP16[(HEAP32[i4 >> 2] | 0) + (i1 << 24 >> 24 << 1) >> 1] & 8192)) break;
  i1 = HEAP32[i5 >> 2] | 0;
  i2 = i1 + 12 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i2 >> 2] = i3 + 1;
   continue;
  }
 }
 i1 = HEAP32[i5 >> 2] | 0;
 do if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
   HEAP32[i5 >> 2] = 0;
   i1 = 0;
   break;
  } else {
   i1 = HEAP32[i5 >> 2] | 0;
   break;
  }
 } else i1 = 0; while (0);
 i1 = (i1 | 0) == 0;
 do if (i2) {
  if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1 : 0) {
   HEAP32[i6 >> 2] = 0;
   i8 = 32;
   break;
  }
  if (!i1) i8 = 33;
 } else i8 = 32; while (0);
 if ((i8 | 0) == 32 ? i1 : 0) i8 = 33;
 if ((i8 | 0) == 33) HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 2;
 return;
}

function _SDL_InitFormat(i8, i3) {
 i8 = i8 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i9 + 16 | 0;
 i1 = i9 + 12 | 0;
 i5 = i9 + 8 | 0;
 i6 = i9 + 4 | 0;
 i7 = i9;
 if (!(_SDL_PixelFormatEnumToMasks(i3, i2, i1, i5, i6, i7) | 0)) {
  i8 = -1;
  STACKTOP = i9;
  return i8 | 0;
 }
 _SDL_memset(i8, 0, 44) | 0;
 HEAP32[i8 >> 2] = i3;
 i2 = HEAP32[i2 >> 2] | 0;
 HEAP8[i8 + 8 >> 0] = i2;
 HEAP8[i8 + 9 >> 0] = (i2 + 7 | 0) / 8 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 HEAP32[i8 + 12 >> 2] = i2;
 i3 = i8 + 32 | 0;
 HEAP8[i3 >> 0] = 0;
 i4 = i8 + 28 | 0;
 HEAP8[i4 >> 0] = 8;
 if (i2) {
  if (!(i2 & 1)) {
   i1 = 0;
   do {
    i1 = i1 + 1 << 24 >> 24;
    i2 = i2 >>> 1;
   } while ((i2 & 1 | 0) == 0);
   HEAP8[i3 >> 0] = i1;
  }
  if (i2 & 1) {
   i1 = 8;
   do {
    i1 = i1 + -1 << 24 >> 24;
    i2 = i2 >>> 1;
   } while ((i2 & 1 | 0) != 0);
   HEAP8[i4 >> 0] = i1;
  }
 }
 i2 = HEAP32[i5 >> 2] | 0;
 HEAP32[i8 + 16 >> 2] = i2;
 i3 = i8 + 33 | 0;
 HEAP8[i3 >> 0] = 0;
 i4 = i8 + 29 | 0;
 HEAP8[i4 >> 0] = 8;
 if (i2) {
  if (!(i2 & 1)) {
   i1 = 0;
   do {
    i1 = i1 + 1 << 24 >> 24;
    i2 = i2 >>> 1;
   } while ((i2 & 1 | 0) == 0);
   HEAP8[i3 >> 0] = i1;
  }
  if (i2 & 1) {
   i1 = 8;
   do {
    i1 = i1 + -1 << 24 >> 24;
    i2 = i2 >>> 1;
   } while ((i2 & 1 | 0) != 0);
   HEAP8[i4 >> 0] = i1;
  }
 }
 i2 = HEAP32[i6 >> 2] | 0;
 HEAP32[i8 + 20 >> 2] = i2;
 i3 = i8 + 34 | 0;
 HEAP8[i3 >> 0] = 0;
 i4 = i8 + 30 | 0;
 HEAP8[i4 >> 0] = 8;
 if (i2) {
  if (!(i2 & 1)) {
   i1 = 0;
   do {
    i1 = i1 + 1 << 24 >> 24;
    i2 = i2 >>> 1;
   } while ((i2 & 1 | 0) == 0);
   HEAP8[i3 >> 0] = i1;
  }
  if (i2 & 1) {
   i1 = 8;
   do {
    i1 = i1 + -1 << 24 >> 24;
    i2 = i2 >>> 1;
   } while ((i2 & 1 | 0) != 0);
   HEAP8[i4 >> 0] = i1;
  }
 }
 i2 = HEAP32[i7 >> 2] | 0;
 HEAP32[i8 + 24 >> 2] = i2;
 i3 = i8 + 35 | 0;
 HEAP8[i3 >> 0] = 0;
 i4 = i8 + 31 | 0;
 HEAP8[i4 >> 0] = 8;
 if (i2) {
  if (!(i2 & 1)) {
   i1 = 0;
   do {
    i1 = i1 + 1 << 24 >> 24;
    i2 = i2 >>> 1;
   } while ((i2 & 1 | 0) == 0);
   HEAP8[i3 >> 0] = i1;
  }
  if (i2 & 1) {
   i1 = 8;
   do {
    i1 = i1 + -1 << 24 >> 24;
    i2 = i2 >>> 1;
   } while ((i2 & 1 | 0) != 0);
   HEAP8[i4 >> 0] = i1;
  }
 }
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 36 >> 2] = 1;
 HEAP32[i8 + 40 >> 2] = 0;
 i8 = 0;
 STACKTOP = i9;
 return i8 | 0;
}

function __ZN17GameObjectManager13spawnObstacleER5Vec2ff(i11, i8, d7) {
 i11 = i11 | 0;
 i8 = i8 | 0;
 d7 = +d7;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i12 = 0, d13 = 0.0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i12 + 16 | 0;
 i2 = i12 + 8 | 0;
 i6 = i12;
 i9 = i11 + 12 | 0;
 i10 = i11 + 16 | 0;
 i3 = HEAP32[i10 >> 2] | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 if ((i3 | 0) == (i1 | 0)) {
  i4 = __Znwj(56) | 0;
  HEAP32[i4 + 4 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = 0;
  HEAP32[i4 >> 2] = 3152;
  i3 = i4 + 12 | 0;
  __ZN8ObstacleC2ER5Vec2ffi(i3, i8, d7, -65536);
  i1 = i5 + 4 | 0;
  HEAP32[i5 >> 2] = i3;
  HEAP32[i1 >> 2] = i4;
  i2 = HEAP32[i10 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i11 + 20 >> 2] | 0) >>> 0) {
   HEAP32[i2 >> 2] = i3;
   HEAP32[i2 + 4 >> 2] = i4;
   HEAP32[i5 >> 2] = 0;
   HEAP32[i1 >> 2] = 0;
   HEAP32[i10 >> 2] = i2 + 8;
   i11 = 1;
   STACKTOP = i12;
   return i11 | 0;
  }
  __ZNSt3__16vectorINS_10shared_ptrI8ObstacleEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i9, i5);
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) {
   i11 = 1;
   STACKTOP = i12;
   return i11 | 0;
  }
  __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
  i11 = 1;
  STACKTOP = i12;
  return i11 | 0;
 }
 do {
  __ZNK5Vec2fmiERKS_(i2, __ZN10GameObject11getPositionEv(HEAP32[i1 >> 2] | 0) | 0, i8);
  d13 = +__ZN5Vec2f6lengthEv(i2);
  if (d13 < +__ZN8Obstacle9getRadiusEv(HEAP32[i1 >> 2] | 0) + d7) {
   i1 = 0;
   i4 = 12;
   break;
  }
  i1 = i1 + 8 | 0;
 } while ((i1 | 0) != (i3 | 0));
 if ((i4 | 0) == 12) {
  STACKTOP = i12;
  return i1 | 0;
 }
 i3 = __Znwj(56) | 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 >> 2] = 3152;
 i4 = i3 + 12 | 0;
 __ZN8ObstacleC2ER5Vec2ffi(i4, i8, d7, -65536);
 i1 = i6 + 4 | 0;
 HEAP32[i6 >> 2] = i4;
 HEAP32[i1 >> 2] = i3;
 i2 = HEAP32[i10 >> 2] | 0;
 if (i2 >>> 0 < (HEAP32[i11 + 20 >> 2] | 0) >>> 0) {
  HEAP32[i2 >> 2] = i4;
  HEAP32[i2 + 4 >> 2] = i3;
  HEAP32[i6 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  HEAP32[i10 >> 2] = i2 + 8;
  i11 = 1;
  STACKTOP = i12;
  return i11 | 0;
 }
 __ZNSt3__16vectorINS_10shared_ptrI8ObstacleEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i9, i6);
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) {
  i11 = 1;
  STACKTOP = i12;
  return i11 | 0;
 }
 __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
 i11 = 1;
 STACKTOP = i12;
 return i11 | 0;
}

function _SDL_SendTouchMotion(i8, i9, i10, i11, d14, d15, d13) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 d14 = +d14;
 d15 = +d15;
 d13 = +d13;
 var i1 = 0, i2 = 0, i3 = 0, d4 = 0.0, i5 = 0, d6 = 0.0, i7 = 0, i12 = 0, i16 = 0, i17 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i7 = i16 + 56 | 0;
 i12 = i16;
 i5 = HEAP32[3034] | 0;
 L1 : do if ((i5 | 0) > 0) {
  i2 = HEAP32[3035] | 0;
  i1 = 0;
  while (1) {
   i3 = HEAP32[i2 + (i1 << 2) >> 2] | 0;
   i17 = i3;
   if ((HEAP32[i17 >> 2] | 0) == (i8 | 0) ? (HEAP32[i17 + 4 >> 2] | 0) == (i9 | 0) : 0) break;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i5 | 0)) break L1;
  }
  if ((i1 | 0) > -1 & (i1 | 0) < (i5 | 0)) {
   if (!i3) {
    i17 = -1;
    STACKTOP = i16;
    return i17 | 0;
   }
   i5 = HEAP32[i3 + 8 >> 2] | 0;
   L11 : do if ((i5 | 0) > 0) {
    i2 = HEAP32[i3 + 16 >> 2] | 0;
    i1 = 0;
    while (1) {
     i3 = HEAP32[i2 + (i1 << 2) >> 2] | 0;
     i17 = i3;
     if ((HEAP32[i17 >> 2] | 0) == (i10 | 0) ? (HEAP32[i17 + 4 >> 2] | 0) == (i11 | 0) : 0) break;
     i1 = i1 + 1 | 0;
     if ((i1 | 0) >= (i5 | 0)) break L11;
    }
    if (!((i1 | 0) >= (i5 | 0) | (i1 | 0) < 0 | (i3 | 0) == 0)) {
     i2 = i3 + 8 | 0;
     d4 = d14 - +HEAPF32[i2 >> 2];
     i5 = i3 + 12 | 0;
     d6 = d15 - +HEAPF32[i5 >> 2];
     i1 = i3 + 16 | 0;
     if (!(d4 != 0.0 | d6 != 0.0 | d13 - +HEAPF32[i1 >> 2] != 0.0)) {
      i17 = 0;
      STACKTOP = i16;
      return i17 | 0;
     }
     HEAPF32[i2 >> 2] = d14;
     HEAPF32[i5 >> 2] = d15;
     HEAPF32[i1 >> 2] = d13;
     if ((_SDL_EventState(1794, -1) | 0) << 24 >> 24 != 1) {
      i17 = 0;
      STACKTOP = i16;
      return i17 | 0;
     }
     HEAP32[i12 >> 2] = 1794;
     i17 = i12 + 8 | 0;
     HEAP32[i17 >> 2] = i8;
     HEAP32[i17 + 4 >> 2] = i9;
     i17 = i12 + 16 | 0;
     HEAP32[i17 >> 2] = i10;
     HEAP32[i17 + 4 >> 2] = i11;
     HEAPF32[i12 + 24 >> 2] = d14;
     HEAPF32[i12 + 28 >> 2] = d15;
     HEAPF32[i12 + 32 >> 2] = d4;
     HEAPF32[i12 + 36 >> 2] = d6;
     HEAPF32[i12 + 40 >> 2] = d13;
     i17 = (_SDL_PushEvent(i12) | 0) > 0 & 1;
     STACKTOP = i16;
     return i17 | 0;
    }
   } while (0);
   i17 = _SDL_SendTouch(i8, i9, i10, i11, 1, d14, d15, d13) | 0;
   STACKTOP = i16;
   return i17 | 0;
  }
 } while (0);
 _SDL_SetError(36782, i7) | 0;
 i17 = -1;
 STACKTOP = i16;
 return i17 | 0;
}

function _SDL_Blit_RGB888_RGB888_Blend_Scale(i22) {
 i22 = i22 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0;
 i1 = HEAP32[i22 + 52 >> 2] | 0;
 i20 = i22 + 28 | 0;
 i23 = HEAP32[i20 >> 2] | 0;
 i21 = (HEAP32[i22 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i17 = i22 + 24 | 0;
 i2 = HEAP32[i17 >> 2] | 0;
 i18 = (HEAP32[i22 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 i3 = i23 + -1 | 0;
 HEAP32[i20 >> 2] = i3;
 if (!i23) return;
 i23 = i22 + 20 | 0;
 i19 = i22 + 32 | 0;
 i15 = i1 & 112;
 i16 = i22 + 12 | 0;
 i5 = HEAP32[i23 >> 2] | 0;
 i14 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i13 = i1 + -65536 | 0;
   i12 = i13 >>> 16;
   i13 = i13 - (i12 << 16) | 0;
   i4 = i4 + 1 + i12 | 0;
  } else i13 = i1;
  if (!i2) i2 = i3; else {
   i1 = 65536;
   i3 = 0;
   i6 = -1;
   while (1) {
    i2 = i2 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i3 = i1 + -65536 | 0;
     i1 = i3 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i3 - (i1 << 16) | 0;
     i3 = (HEAP32[i22 >> 2] | 0) + ((Math_imul(HEAP32[i16 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i9 = HEAP32[i3 >> 2] | 0;
    i7 = i9 >>> 16 & 255;
    i8 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    i10 = HEAP32[i5 >> 2] | 0;
    i12 = i10 >>> 16 & 255;
    i11 = i10 >>> 8 & 255;
    i10 = i10 & 255;
    switch (i15 | 0) {
    case 16:
     break;
    case 32:
     {
      i7 = i12 + i7 | 0;
      i8 = i11 + i8 | 0;
      i9 = i10 + i9 | 0;
      i9 = i9 >>> 0 > 255 ? 255 : i9;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      break;
     }
    case 64:
     {
      i9 = ((Math_imul(i10, i9) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i11, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i12, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {
      i9 = i10;
      i8 = i11;
      i7 = i12;
     }
    }
    HEAP32[i5 >> 2] = i8 << 8 | i7 << 16 | i9;
    if (!i2) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i18 | 0;
    }
   }
   i2 = HEAP32[i20 >> 2] | 0;
  }
  i1 = i14 + (HEAP32[i19 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i20 >> 2] = i3;
  if (!i2) break;
  i2 = HEAP32[i17 >> 2] | 0;
  i14 = i1;
  i5 = i1;
  i1 = i13 + i21 | 0;
 }
 HEAP32[i23 >> 2] = i1;
 return;
}

function _SDL_Blit_RGB888_BGR888_Blend_Scale(i22) {
 i22 = i22 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0;
 i1 = HEAP32[i22 + 52 >> 2] | 0;
 i20 = i22 + 28 | 0;
 i23 = HEAP32[i20 >> 2] | 0;
 i21 = (HEAP32[i22 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i17 = i22 + 24 | 0;
 i2 = HEAP32[i17 >> 2] | 0;
 i18 = (HEAP32[i22 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 i3 = i23 + -1 | 0;
 HEAP32[i20 >> 2] = i3;
 if (!i23) return;
 i23 = i22 + 20 | 0;
 i19 = i22 + 32 | 0;
 i15 = i1 & 112;
 i16 = i22 + 12 | 0;
 i5 = HEAP32[i23 >> 2] | 0;
 i14 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i13 = i1 + -65536 | 0;
   i12 = i13 >>> 16;
   i13 = i13 - (i12 << 16) | 0;
   i4 = i4 + 1 + i12 | 0;
  } else i13 = i1;
  if (!i2) i2 = i3; else {
   i1 = 65536;
   i3 = 0;
   i6 = -1;
   while (1) {
    i2 = i2 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i3 = i1 + -65536 | 0;
     i1 = i3 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i3 - (i1 << 16) | 0;
     i3 = (HEAP32[i22 >> 2] | 0) + ((Math_imul(HEAP32[i16 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i9 = HEAP32[i3 >> 2] | 0;
    i7 = i9 >>> 16 & 255;
    i8 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    i12 = HEAP32[i5 >> 2] | 0;
    i10 = i12 >>> 16 & 255;
    i11 = i12 >>> 8 & 255;
    i12 = i12 & 255;
    switch (i15 | 0) {
    case 16:
     break;
    case 32:
     {
      i7 = i7 + i12 | 0;
      i8 = i11 + i8 | 0;
      i9 = i10 + i9 | 0;
      i9 = i9 >>> 0 > 255 ? 255 : i9;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      break;
     }
    case 64:
     {
      i9 = ((Math_imul(i10, i9) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i11, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i7, i12) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {
      i9 = i10;
      i8 = i11;
      i7 = i12;
     }
    }
    HEAP32[i5 >> 2] = i8 << 8 | i7 | i9 << 16;
    if (!i2) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i18 | 0;
    }
   }
   i2 = HEAP32[i20 >> 2] | 0;
  }
  i1 = i14 + (HEAP32[i19 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i20 >> 2] = i3;
  if (!i2) break;
  i2 = HEAP32[i17 >> 2] | 0;
  i14 = i1;
  i5 = i1;
  i1 = i13 + i21 | 0;
 }
 HEAP32[i23 >> 2] = i1;
 return;
}

function _SDL_Blit_BGR888_RGB888_Blend_Scale(i22) {
 i22 = i22 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0;
 i1 = HEAP32[i22 + 52 >> 2] | 0;
 i20 = i22 + 28 | 0;
 i23 = HEAP32[i20 >> 2] | 0;
 i21 = (HEAP32[i22 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i17 = i22 + 24 | 0;
 i2 = HEAP32[i17 >> 2] | 0;
 i18 = (HEAP32[i22 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 i3 = i23 + -1 | 0;
 HEAP32[i20 >> 2] = i3;
 if (!i23) return;
 i23 = i22 + 20 | 0;
 i19 = i22 + 32 | 0;
 i15 = i1 & 112;
 i16 = i22 + 12 | 0;
 i5 = HEAP32[i23 >> 2] | 0;
 i14 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i13 = i1 + -65536 | 0;
   i12 = i13 >>> 16;
   i13 = i13 - (i12 << 16) | 0;
   i4 = i4 + 1 + i12 | 0;
  } else i13 = i1;
  if (!i2) i2 = i3; else {
   i1 = 65536;
   i3 = 0;
   i6 = -1;
   while (1) {
    i2 = i2 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i3 = i1 + -65536 | 0;
     i1 = i3 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i3 - (i1 << 16) | 0;
     i3 = (HEAP32[i22 >> 2] | 0) + ((Math_imul(HEAP32[i16 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i7 = HEAP32[i3 >> 2] | 0;
    i9 = i7 >>> 16 & 255;
    i8 = i7 >>> 8 & 255;
    i7 = i7 & 255;
    i10 = HEAP32[i5 >> 2] | 0;
    i12 = i10 >>> 16 & 255;
    i11 = i10 >>> 8 & 255;
    i10 = i10 & 255;
    switch (i15 | 0) {
    case 16:
     break;
    case 32:
     {
      i7 = i12 + i7 | 0;
      i8 = i11 + i8 | 0;
      i9 = i9 + i10 | 0;
      i9 = i9 >>> 0 > 255 ? 255 : i9;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      break;
     }
    case 64:
     {
      i9 = ((Math_imul(i9, i10) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i11, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i12, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {
      i9 = i10;
      i8 = i11;
      i7 = i12;
     }
    }
    HEAP32[i5 >> 2] = i8 << 8 | i7 << 16 | i9;
    if (!i2) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i18 | 0;
    }
   }
   i2 = HEAP32[i20 >> 2] | 0;
  }
  i1 = i14 + (HEAP32[i19 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i20 >> 2] = i3;
  if (!i2) break;
  i2 = HEAP32[i17 >> 2] | 0;
  i14 = i1;
  i5 = i1;
  i1 = i13 + i21 | 0;
 }
 HEAP32[i23 >> 2] = i1;
 return;
}

function _SDL_Blit_BGR888_BGR888_Blend_Scale(i22) {
 i22 = i22 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0;
 i1 = HEAP32[i22 + 52 >> 2] | 0;
 i20 = i22 + 28 | 0;
 i23 = HEAP32[i20 >> 2] | 0;
 i21 = (HEAP32[i22 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i17 = i22 + 24 | 0;
 i2 = HEAP32[i17 >> 2] | 0;
 i18 = (HEAP32[i22 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 i3 = i23 + -1 | 0;
 HEAP32[i20 >> 2] = i3;
 if (!i23) return;
 i23 = i22 + 20 | 0;
 i19 = i22 + 32 | 0;
 i15 = i1 & 112;
 i16 = i22 + 12 | 0;
 i5 = HEAP32[i23 >> 2] | 0;
 i14 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i13 = i1 + -65536 | 0;
   i12 = i13 >>> 16;
   i13 = i13 - (i12 << 16) | 0;
   i4 = i4 + 1 + i12 | 0;
  } else i13 = i1;
  if (!i2) i2 = i3; else {
   i1 = 65536;
   i3 = 0;
   i6 = -1;
   while (1) {
    i2 = i2 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i3 = i1 + -65536 | 0;
     i1 = i3 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i3 - (i1 << 16) | 0;
     i3 = (HEAP32[i22 >> 2] | 0) + ((Math_imul(HEAP32[i16 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i7 = HEAP32[i3 >> 2] | 0;
    i9 = i7 >>> 16 & 255;
    i8 = i7 >>> 8 & 255;
    i7 = i7 & 255;
    i12 = HEAP32[i5 >> 2] | 0;
    i10 = i12 >>> 16 & 255;
    i11 = i12 >>> 8 & 255;
    i12 = i12 & 255;
    switch (i15 | 0) {
    case 16:
     break;
    case 32:
     {
      i7 = i12 + i7 | 0;
      i8 = i11 + i8 | 0;
      i9 = i10 + i9 | 0;
      i9 = i9 >>> 0 > 255 ? 255 : i9;
      i8 = i8 >>> 0 > 255 ? 255 : i8;
      i7 = i7 >>> 0 > 255 ? 255 : i7;
      break;
     }
    case 64:
     {
      i9 = ((Math_imul(i10, i9) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i11, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i12, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {
      i9 = i10;
      i8 = i11;
      i7 = i12;
     }
    }
    HEAP32[i5 >> 2] = i8 << 8 | i7 | i9 << 16;
    if (!i2) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i18 | 0;
    }
   }
   i2 = HEAP32[i20 >> 2] | 0;
  }
  i1 = i14 + (HEAP32[i19 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i20 >> 2] = i3;
  if (!i2) break;
  i2 = HEAP32[i17 >> 2] | 0;
  i14 = i1;
  i5 = i1;
  i1 = i13 + i21 | 0;
 }
 HEAP32[i23 >> 2] = i1;
 return;
}

function _pop_arg(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, d6 = 0.0;
 L1 : do if (i3 >>> 0 <= 20) do switch (i3 | 0) {
 case 9:
  {
   i4 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i3 = HEAP32[i4 >> 2] | 0;
   HEAP32[i1 >> 2] = i4 + 4;
   HEAP32[i2 >> 2] = i3;
   break L1;
  }
 case 10:
  {
   i4 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i3 = HEAP32[i4 >> 2] | 0;
   HEAP32[i1 >> 2] = i4 + 4;
   i4 = i2;
   HEAP32[i4 >> 2] = i3;
   HEAP32[i4 + 4 >> 2] = ((i3 | 0) < 0) << 31 >> 31;
   break L1;
  }
 case 11:
  {
   i4 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i3 = HEAP32[i4 >> 2] | 0;
   HEAP32[i1 >> 2] = i4 + 4;
   i4 = i2;
   HEAP32[i4 >> 2] = i3;
   HEAP32[i4 + 4 >> 2] = 0;
   break L1;
  }
 case 12:
  {
   i4 = (HEAP32[i1 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   i3 = i4;
   i5 = HEAP32[i3 >> 2] | 0;
   i3 = HEAP32[i3 + 4 >> 2] | 0;
   HEAP32[i1 >> 2] = i4 + 8;
   i4 = i2;
   HEAP32[i4 >> 2] = i5;
   HEAP32[i4 + 4 >> 2] = i3;
   break L1;
  }
 case 13:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i1 >> 2] = i5 + 4;
   i4 = (i4 & 65535) << 16 >> 16;
   i5 = i2;
   HEAP32[i5 >> 2] = i4;
   HEAP32[i5 + 4 >> 2] = ((i4 | 0) < 0) << 31 >> 31;
   break L1;
  }
 case 14:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i1 >> 2] = i5 + 4;
   i5 = i2;
   HEAP32[i5 >> 2] = i4 & 65535;
   HEAP32[i5 + 4 >> 2] = 0;
   break L1;
  }
 case 15:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i1 >> 2] = i5 + 4;
   i4 = (i4 & 255) << 24 >> 24;
   i5 = i2;
   HEAP32[i5 >> 2] = i4;
   HEAP32[i5 + 4 >> 2] = ((i4 | 0) < 0) << 31 >> 31;
   break L1;
  }
 case 16:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i1 >> 2] = i5 + 4;
   i5 = i2;
   HEAP32[i5 >> 2] = i4 & 255;
   HEAP32[i5 + 4 >> 2] = 0;
   break L1;
  }
 case 17:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   d6 = +HEAPF64[i5 >> 3];
   HEAP32[i1 >> 2] = i5 + 8;
   HEAPF64[i2 >> 3] = d6;
   break L1;
  }
 case 18:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   d6 = +HEAPF64[i5 >> 3];
   HEAP32[i1 >> 2] = i5 + 8;
   HEAPF64[i2 >> 3] = d6;
   break L1;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function _SDL_AddHintCallback(i7, i6, i8) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i9 + 8 | 0;
 i1 = i9;
 if ((i7 | 0) != 0 ? (HEAP8[i7 >> 0] | 0) != 0 : 0) {
  if (!i6) {
   HEAP32[i2 >> 2] = 36521;
   _SDL_SetError(41366, i2) | 0;
   STACKTOP = i9;
   return;
  }
  i1 = HEAP32[1528] | 0;
  L8 : do if (i1) {
   while (1) {
    if (!(_SDL_strcmp(i7, HEAP32[i1 >> 2] | 0) | 0)) break;
    i1 = HEAP32[i1 + 16 >> 2] | 0;
    if (!i1) break L8;
   }
   i4 = i1 + 12 | 0;
   i1 = HEAP32[i4 >> 2] | 0;
   if (i1) {
    i2 = 0;
    while (1) {
     if ((HEAP32[i1 >> 2] | 0) == (i6 | 0) ? (HEAP32[i1 + 4 >> 2] | 0) == (i8 | 0) : 0) {
      i3 = i2;
      break;
     }
     i2 = HEAP32[i1 + 8 >> 2] | 0;
     if (!i2) break L8; else {
      i3 = i1;
      i1 = i2;
      i2 = i3;
     }
    }
    i2 = HEAP32[i1 + 8 >> 2] | 0;
    if (!i3) HEAP32[i4 >> 2] = i2; else HEAP32[i3 + 8 >> 2] = i2;
    _SDL_free(i1);
   }
  } while (0);
  i2 = _SDL_malloc(12) | 0;
  if (!i2) {
   _SDL_Error(0) | 0;
   STACKTOP = i9;
   return;
  }
  HEAP32[i2 >> 2] = i6;
  HEAP32[i2 + 4 >> 2] = i8;
  i1 = HEAP32[1528] | 0;
  L28 : do if (!i1) i5 = 22; else while (1) {
   if (!(_SDL_strcmp(i7, HEAP32[i1 >> 2] | 0) | 0)) break L28;
   i1 = HEAP32[i1 + 16 >> 2] | 0;
   if (!i1) {
    i5 = 22;
    break;
   }
  } while (0);
  do if ((i5 | 0) == 22) {
   i1 = _SDL_malloc(20) | 0;
   if (i1) {
    HEAP32[i1 >> 2] = _SDL_strdup(i7) | 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    HEAP32[i1 + 12 >> 2] = 0;
    HEAP32[i1 + 16 >> 2] = HEAP32[1528];
    HEAP32[1528] = i1;
    break;
   }
   _SDL_Error(0) | 0;
   _SDL_free(i2);
   STACKTOP = i9;
   return;
  } while (0);
  i1 = i1 + 12 | 0;
  HEAP32[i2 + 8 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i1 >> 2] = i2;
  i1 = _SDL_getenv(i7) | 0;
  i2 = HEAP32[1528] | 0;
  L39 : do if (i2) {
   while (1) {
    if (!(_SDL_strcmp(i7, HEAP32[i2 >> 2] | 0) | 0)) break;
    i2 = HEAP32[i2 + 16 >> 2] | 0;
    if (!i2) break L39;
   }
   if ((i1 | 0) != 0 ? (HEAP32[i2 + 8 >> 2] | 0) != 2 : 0) break;
   i1 = HEAP32[i2 + 4 >> 2] | 0;
  } while (0);
  FUNCTION_TABLE_viiii[i6 & 63](i8, i7, i1, i1);
  STACKTOP = i9;
  return;
 }
 HEAP32[i1 >> 2] = 41559;
 _SDL_SetError(41366, i1) | 0;
 STACKTOP = i9;
 return;
}

function _SDL_Blit_RGB888_RGB888_Blend(i13) {
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0;
 i1 = HEAP32[i13 + 52 >> 2] | 0;
 i8 = i13 + 28 | 0;
 i12 = HEAP32[i8 >> 2] | 0;
 i2 = i12 + -1 | 0;
 HEAP32[i8 >> 2] = i2;
 if (!i12) return;
 i12 = i13 + 20 | 0;
 i9 = i13 + 24 | 0;
 i10 = i13 + 12 | 0;
 i11 = i13 + 32 | 0;
 i5 = i1 & 112;
 i3 = HEAP32[i13 >> 2] | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 i6 = i3;
 i7 = i1;
 i4 = i2;
 i2 = i3;
 while (1) {
  i14 = HEAP32[i9 >> 2] | 0;
  i3 = i14 + -1 | 0;
  if (!i14) i3 = i4; else {
   switch (i5 | 0) {
   case 16:
    {
     while (1) {
      HEAP32[i1 >> 2] = HEAP32[i2 >> 2] & 16777215;
      if (!i3) break; else {
       i3 = i3 + -1 | 0;
       i1 = i1 + 4 | 0;
       i2 = i2 + 4 | 0;
      }
     }
     break;
    }
   case 32:
    {
     while (1) {
      i14 = HEAP32[i2 >> 2] | 0;
      i16 = HEAP32[i1 >> 2] | 0;
      i4 = (i16 >>> 16 & 255) + (i14 >>> 16 & 255) | 0;
      i15 = (i16 >>> 8 & 255) + (i14 >>> 8 & 255) | 0;
      i14 = (i16 & 255) + (i14 & 255) | 0;
      HEAP32[i1 >> 2] = (i15 >>> 0 > 255 ? 65280 : i15 << 8) | (i4 >>> 0 > 255 ? 16711680 : i4 << 16) | (i14 >>> 0 > 255 ? 255 : i14);
      if (!i3) break; else {
       i3 = i3 + -1 | 0;
       i1 = i1 + 4 | 0;
       i2 = i2 + 4 | 0;
      }
     }
     break;
    }
   case 64:
    {
     while (1) {
      i16 = HEAP32[i2 >> 2] | 0;
      i15 = HEAP32[i1 >> 2] | 0;
      HEAP32[i1 >> 2] = (((Math_imul(i15 >>> 8 & 255, i16 >>> 8 & 255) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i15 >>> 16 & 255, i16 >>> 16 & 255) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i15 & 255, i16 & 255) | 0) >>> 0) / 255 | 0);
      if (!i3) break; else {
       i3 = i3 + -1 | 0;
       i1 = i1 + 4 | 0;
       i2 = i2 + 4 | 0;
      }
     }
     break;
    }
   default:
    {
     i2 = i3;
     while (1) {
      HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & 16777215;
      if (!i2) break; else {
       i2 = i2 + -1 | 0;
       i1 = i1 + 4 | 0;
      }
     }
    }
   }
   i3 = HEAP32[i8 >> 2] | 0;
  }
  i2 = i6 + (HEAP32[i10 >> 2] | 0) | 0;
  i1 = i7 + (HEAP32[i11 >> 2] | 0) | 0;
  i4 = i3 + -1 | 0;
  HEAP32[i8 >> 2] = i4;
  if (!i3) break; else {
   i6 = i2;
   i7 = i1;
  }
 }
 HEAP32[i13 >> 2] = i2;
 HEAP32[i12 >> 2] = i1;
 return;
}

function _scanexp(i8, i3) {
 i8 = i8 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = i8 + 4 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i7 = i8 + 100 | 0;
 if (i1 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
  HEAP32[i6 >> 2] = i1 + 1;
  i1 = HEAPU8[i1 >> 0] | 0;
 } else i1 = ___shgetc(i8) | 0;
 switch (i1 | 0) {
 case 43:
 case 45:
  {
   i2 = (i1 | 0) == 45 & 1;
   i1 = HEAP32[i6 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
    HEAP32[i6 >> 2] = i1 + 1;
    i1 = HEAPU8[i1 >> 0] | 0;
   } else i1 = ___shgetc(i8) | 0;
   if ((i3 | 0) != 0 & (i1 + -48 | 0) >>> 0 > 9 ? (HEAP32[i7 >> 2] | 0) != 0 : 0) {
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
    i5 = i2;
   } else i5 = i2;
   break;
  }
 default:
  i5 = 0;
 }
 if ((i1 + -48 | 0) >>> 0 > 9) if (!(HEAP32[i7 >> 2] | 0)) {
  i2 = -2147483648;
  i1 = 0;
 } else {
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
  i2 = -2147483648;
  i1 = 0;
 } else {
  i2 = 0;
  do {
   i2 = i1 + -48 + (i2 * 10 | 0) | 0;
   i1 = HEAP32[i6 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
    HEAP32[i6 >> 2] = i1 + 1;
    i1 = HEAPU8[i1 >> 0] | 0;
   } else i1 = ___shgetc(i8) | 0;
  } while ((i1 + -48 | 0) >>> 0 < 10 & (i2 | 0) < 214748364);
  i3 = ((i2 | 0) < 0) << 31 >> 31;
  if ((i1 + -48 | 0) >>> 0 < 10) {
   do {
    i3 = ___muldi3(i2 | 0, i3 | 0, 10, 0) | 0;
    i2 = tempRet0;
    i1 = _i64Add(i1 | 0, ((i1 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
    i2 = _i64Add(i1 | 0, tempRet0 | 0, i3 | 0, i2 | 0) | 0;
    i3 = tempRet0;
    i1 = HEAP32[i6 >> 2] | 0;
    if (i1 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
     HEAP32[i6 >> 2] = i1 + 1;
     i1 = HEAPU8[i1 >> 0] | 0;
    } else i1 = ___shgetc(i8) | 0;
   } while ((i1 + -48 | 0) >>> 0 < 10 & ((i3 | 0) < 21474836 | (i3 | 0) == 21474836 & i2 >>> 0 < 2061584302));
   i4 = i2;
  } else i4 = i2;
  if ((i1 + -48 | 0) >>> 0 < 10) do {
   i1 = HEAP32[i6 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
    HEAP32[i6 >> 2] = i1 + 1;
    i1 = HEAPU8[i1 >> 0] | 0;
   } else i1 = ___shgetc(i8) | 0;
  } while ((i1 + -48 | 0) >>> 0 < 10);
  if (HEAP32[i7 >> 2] | 0) HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
  i8 = (i5 | 0) != 0;
  i1 = _i64Subtract(0, 0, i4 | 0, i3 | 0) | 0;
  i2 = i8 ? tempRet0 : i3;
  i1 = i8 ? i1 : i4;
 }
 tempRet0 = i2;
 return i1 | 0;
}

function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE(i16, i1, i6, i8, i7, i2) {
 i16 = i16 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i12 = i15 + 168 | 0;
 i11 = i15 + 40 | 0;
 i10 = i15 + 32 | 0;
 i14 = i15 + 28 | 0;
 i13 = i15 + 16 | 0;
 i5 = i15 + 8 | 0;
 i9 = i15;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i13 + 4 >> 2] = 0;
 HEAP32[i13 + 8 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 >> 2] = 30860;
 i4 = HEAP8[i2 >> 0] | 0;
 i17 = (i4 & 1) == 0;
 i3 = i2 + 4 | 0;
 i1 = i17 ? i3 : HEAP32[i2 + 8 >> 2] | 0;
 i2 = i17 ? (i4 & 255) >>> 1 : HEAP32[i3 >> 2] | 0;
 i3 = i1 + (i2 << 2) | 0;
 i4 = i11 + 32 | 0;
 if ((i2 | 0) > 0) do {
  HEAP32[i14 >> 2] = i1;
  i2 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] & 31](i5, i12, i1, i3, i14, i11, i4, i10) | 0;
  if (i11 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
   i1 = i11;
   do {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i13, HEAP8[i1 >> 0] | 0);
    i1 = i1 + 1 | 0;
   } while (i1 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0);
  }
  i1 = HEAP32[i14 >> 2] | 0;
 } while ((i2 | 0) != 2 & i1 >>> 0 < i3 >>> 0);
 i1 = _catgets((i6 | 0) == -1 ? -1 : i6 << 1, i8, i7, (HEAP8[i13 >> 0] & 1) == 0 ? i13 + 1 | 0 : HEAP32[i13 + 8 >> 2] | 0) | 0;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i16 + 4 >> 2] = 0;
 HEAP32[i16 + 8 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 >> 2] = 30908;
 i17 = _strlen(i1) | 0;
 i3 = i1 + i17 | 0;
 i4 = i3;
 i5 = i11 + 128 | 0;
 if ((i17 | 0) > 0) do {
  HEAP32[i14 >> 2] = i1;
  i2 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 16 >> 2] & 31](i9, i12, i1, (i4 - i1 | 0) > 32 ? i1 + 32 | 0 : i3, i14, i11, i5, i10) | 0;
  if (i11 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
   i1 = i11;
   do {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i16, HEAP32[i1 >> 2] | 0);
    i1 = i1 + 4 | 0;
   } while (i1 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0);
  }
  i1 = HEAP32[i14 >> 2] | 0;
 } while ((i2 | 0) != 2 & i1 >>> 0 < i3 >>> 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
 STACKTOP = i15;
 return;
}

function _SDL_EGL_CreateContext(i2, i7) {
 i2 = i2 | 0;
 i7 = i7 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i10 = i11 + 24 | 0;
 i8 = i11 + 16 | 0;
 i6 = i11 + 8 | 0;
 i5 = i11;
 i4 = i11 + 28 | 0;
 HEAP32[i4 >> 2] = HEAP32[3245];
 HEAP32[i4 + 4 >> 2] = HEAP32[3246];
 HEAP32[i4 + 8 >> 2] = HEAP32[3247];
 HEAP32[i4 + 12 >> 2] = HEAP32[3248];
 HEAP32[i4 + 16 >> 2] = HEAP32[3249];
 HEAP32[i4 + 20 >> 2] = HEAP32[3250];
 HEAP32[i4 + 24 >> 2] = HEAP32[3251];
 i9 = i2 + 644 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 if (!i1) {
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 if (!(HEAP32[i2 + 340 >> 2] | 0)) i3 = 0; else {
  i3 = _SDL_GL_GetCurrentContext() | 0;
  i1 = HEAP32[i9 >> 2] | 0;
 }
 i1 = HEAP32[i1 + 84 >> 2] | 0;
 if ((HEAP32[i2 + 336 >> 2] | 0) == 4) {
  FUNCTION_TABLE_ii[i1 & 127](12448) | 0;
  i1 = HEAP32[i2 + 324 >> 2] | 0;
  if (i1) HEAP32[i4 + 4 >> 2] = i1;
  i2 = HEAP32[i9 >> 2] | 0;
  i3 = FUNCTION_TABLE_iiiii[HEAP32[i2 + 40 >> 2] & 31](HEAP32[i2 + 8 >> 2] | 0, HEAP32[i2 + 12 >> 2] | 0, i3, i4) | 0;
 } else {
  FUNCTION_TABLE_ii[i1 & 127](12450) | 0;
  HEAP32[i4 >> 2] = 12344;
  i2 = HEAP32[i9 >> 2] | 0;
  i3 = FUNCTION_TABLE_iiiii[HEAP32[i2 + 40 >> 2] & 31](HEAP32[i2 + 8 >> 2] | 0, HEAP32[i2 + 12 >> 2] | 0, i3, i4) | 0;
 }
 if (!i3) {
  _SDL_SetError(40071, i5) | 0;
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 i1 = HEAP32[i9 >> 2] | 0;
 HEAP32[i1 + 16 >> 2] = 0;
 do if (i1) {
  i2 = HEAP32[i1 + 56 >> 2] | 0;
  i1 = HEAP32[i1 + 8 >> 2] | 0;
  if (!i7) {
   FUNCTION_TABLE_iiiii[i2 & 31](i1, 0, 0, 0) | 0;
   i10 = i3;
   STACKTOP = i11;
   return i10 | 0;
  }
  if (!(FUNCTION_TABLE_iiiii[i2 & 31](i1, i7, i7, i3) | 0)) {
   i1 = _SDL_SetError(40123, i8) | 0;
   break;
  } else {
   i10 = i3;
   STACKTOP = i11;
   return i10 | 0;
  }
 } else i1 = _SDL_SetError(40100, i6) | 0; while (0);
 if ((i1 | 0) >= 0) {
  i10 = i3;
  STACKTOP = i11;
  return i10 | 0;
 }
 i1 = HEAP32[i9 >> 2] | 0;
 if (i1) {
  FUNCTION_TABLE_iiiii[HEAP32[i1 + 56 >> 2] & 31](HEAP32[i1 + 8 >> 2] | 0, 0, 0, 0) | 0;
  i9 = HEAP32[i9 >> 2] | 0;
  FUNCTION_TABLE_iii[HEAP32[i9 + 44 >> 2] & 63](HEAP32[i9 + 8 >> 2] | 0, i3) | 0;
 }
 _SDL_SetError(40158, i10) | 0;
 i10 = 0;
 STACKTOP = i11;
 return i10 | 0;
}

function _SDL_BlendPoint(i10, i11, i12, i9, i1, i2, i3, i8) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!i10) {
  i12 = _SDL_SetError(40249, i13) | 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 i6 = HEAP32[i10 + 4 >> 2] | 0;
 i7 = HEAP8[i6 + 8 >> 0] | 0;
 if ((i7 & 255) < 8) {
  i12 = _SDL_SetError(38533, i13 + 8 | 0) | 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 i5 = HEAP32[i10 + 36 >> 2] | 0;
 if ((i5 | 0) > (i11 | 0)) {
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 i4 = HEAP32[i10 + 40 >> 2] | 0;
 if ((i4 | 0) > (i12 | 0)) {
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 if (((HEAP32[i10 + 44 >> 2] | 0) + i5 | 0) <= (i11 | 0)) {
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 if (((HEAP32[i10 + 48 >> 2] | 0) + i4 | 0) <= (i12 | 0)) {
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 if ((i9 + -1 | 0) >>> 0 < 2) {
  i5 = i8 & 255;
  i3 = (((Math_imul(i5, i3 & 255) | 0) >>> 0) / 255 | 0) & 255;
  i2 = (((Math_imul(i5, i2 & 255) | 0) >>> 0) / 255 | 0) & 255;
  i1 = (((Math_imul(i5, i1 & 255) | 0) >>> 0) / 255 | 0) & 255;
 }
 switch (i7 & 255 | 0) {
 case 15:
  {
   if ((HEAP32[i6 + 12 >> 2] | 0) == 31744) {
    _SDL_BlendPoint_RGB555(i10, i11, i12, i9, i1, i2, i3, i8) | 0;
    i12 = 0;
    STACKTOP = i13;
    return i12 | 0;
   }
   break;
  }
 case 16:
  {
   if ((HEAP32[i6 + 12 >> 2] | 0) == 63488) {
    _SDL_BlendPoint_RGB565(i10, i11, i12, i9, i1, i2, i3, i8) | 0;
    i12 = 0;
    STACKTOP = i13;
    return i12 | 0;
   }
   break;
  }
 case 32:
  {
   if ((HEAP32[i6 + 12 >> 2] | 0) == 16711680) if (!(HEAP32[i6 + 24 >> 2] | 0)) {
    _SDL_BlendPoint_RGB888(i10, i11, i12, i9, i1, i2, i3, i8) | 0;
    i12 = 0;
    STACKTOP = i13;
    return i12 | 0;
   } else {
    _SDL_BlendPoint_ARGB8888(i10, i11, i12, i9, i1, i2, i3, i8) | 0;
    i12 = 0;
    STACKTOP = i13;
    return i12 | 0;
   }
   break;
  }
 default:
  {}
 }
 if (!(HEAP32[i6 + 24 >> 2] | 0)) {
  i12 = _SDL_BlendPoint_RGB(i10, i11, i12, i9, i1, i2, i3, i8) | 0;
  STACKTOP = i13;
  return i12 | 0;
 } else {
  i12 = _SDL_BlendPoint_RGBA(i10, i11, i12, i9, i1, i2, i3, i8) | 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 return 0;
}

function _SDL_SetRelativeMouseMode(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i4 = _SDL_GetKeyboardFocus() | 0;
 if ((HEAP32[3024] | 0) == (i5 | 0)) return 0;
 i6 = (i5 | 0) != 0;
 do if (i6 & (i4 | 0) != 0) {
  i1 = HEAP32[3016] | 0;
  do if ((i1 | 0) != (i4 | 0)) {
   if (i1) _SDL_SendWindowEvent(i1, 11, 0, 0) | 0;
   HEAP32[3016] = i4;
   _SDL_SendWindowEvent(i4, 10, 0, 0) | 0;
   i1 = (HEAP32[3016] | 0) == 0 ? HEAP32[3029] | 0 : HEAP32[3030] | 0;
   i2 = HEAP32[3007] | 0;
   i3 = (i2 | 0) == 0;
   if ((i1 | 0) != 0 & (HEAP32[3031] | 0) != 0 & (HEAP32[3024] | 0) == 0) {
    if (i3) break;
    FUNCTION_TABLE_ii[i2 & 127](i1) | 0;
    break;
   } else {
    if (i3) break;
    FUNCTION_TABLE_ii[i2 & 127](0) | 0;
    break;
   }
  } while (0);
  i2 = (HEAP32[i4 + 24 >> 2] | 0) / 2 | 0;
  i3 = (HEAP32[i4 + 28 >> 2] | 0) / 2 | 0;
  i1 = HEAP32[3010] | 0;
  if (i1) {
   FUNCTION_TABLE_viii[i1 & 31](i4, i2, i3);
   break;
  }
  i1 = HEAP32[3015] | 0;
  if (_SDL_UpdateMouseFocus(i4, i2, i3) | 0) _SDL_PrivateSendMouseMotion(i4, i1, 0, i2, i3) | 0;
 } while (0);
 L22 : do if (i6 | (HEAP32[3025] | 0) == 0) {
  do if (i6) {
   if (HEAP32[3012] | 0) {
    i1 = _SDL_GetHint(36753) | 0;
    if (!i1) break;
    if ((HEAP8[i1 >> 0] | 0) == 48) break;
   }
   HEAP32[3025] = 1;
   break L22;
  } while (0);
  if (i6 & (FUNCTION_TABLE_ii[HEAP32[12048 >> 2] & 127](i5) | 0) < 0) HEAP32[3025] = 1;
 } else HEAP32[3025] = 0; while (0);
 HEAP32[3024] = i5;
 i1 = HEAP32[3016] | 0;
 do if (((i1 | 0) != 0 ? (_SDL_UpdateWindowGrab(i1), !i6) : 0) ? (i7 = HEAP32[3016] | 0, i8 = HEAP32[3017] | 0, i9 = HEAP32[3018] | 0, (i7 | 0) != 0) : 0) {
  i1 = HEAP32[3010] | 0;
  if (i1) {
   FUNCTION_TABLE_viii[i1 & 31](i7, i8, i9);
   break;
  }
  i1 = HEAP32[3015] | 0;
  if (_SDL_UpdateMouseFocus(i7, i8, i9) | 0) _SDL_PrivateSendMouseMotion(i7, i1, 0, i8, i9) | 0;
 } while (0);
 _SDL_FlushEvent(1024);
 i1 = (HEAP32[3016] | 0) == 0 ? HEAP32[3029] | 0 : HEAP32[3030] | 0;
 i2 = HEAP32[3007] | 0;
 i3 = (i2 | 0) == 0;
 if ((i1 | 0) != 0 & (HEAP32[3031] | 0) != 0 & (HEAP32[3024] | 0) == 0) {
  if (i3) return 0;
  FUNCTION_TABLE_ii[i2 & 127](i1) | 0;
  return 0;
 } else {
  if (i3) return 0;
  FUNCTION_TABLE_ii[i2 & 127](0) | 0;
  return 0;
 }
 return 0;
}

function _SDL_Blit_RGBA8888_RGB888_Blend(i20) {
 i20 = i20 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i1 = HEAP32[i20 + 52 >> 2] | 0;
 i15 = i20 + 28 | 0;
 i19 = HEAP32[i15 >> 2] | 0;
 i2 = i19 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i19) return;
 i16 = i20 + 20 | 0;
 i17 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i19 = i20 + 32 | 0;
 i14 = (i1 & 48 | 0) != 0;
 i13 = i1 & 112;
 do {
  i1 = HEAP32[i17 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i20 >> 2] | 0;
   i1 = HEAP32[i16 >> 2] | 0;
   i3 = i2;
  } else {
   i12 = HEAP32[i16 >> 2] | 0;
   i4 = HEAP32[i20 >> 2] | 0;
   i10 = i12;
   i11 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i8 = HEAP32[i11 >> 2] | 0;
    i7 = i8 >>> 24;
    i6 = i8 >>> 16 & 255;
    i5 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    i9 = HEAP32[i10 >> 2] | 0;
    i2 = i9 >>> 16 & 255;
    i3 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    if (i14 & (i8 | 0) != 255) {
     i5 = ((Math_imul(i5, i8) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i8) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i8) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 | 0) {
    case 16:
     {
      i8 = i8 ^ 255;
      i5 = (((Math_imul(i8, i9) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i3 = (((Math_imul(i3, i8) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i2, i8) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i3 = i6 + i3 | 0;
      i5 = i5 + i9 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i9;
    }
    HEAP32[i10 >> 2] = i3 << 8 | i2 << 16 | i5;
    if (!i1) break; else {
     i10 = i10 + 4 | 0;
     i11 = i11 + 4 | 0;
    }
   }
   i1 = i12;
   i3 = HEAP32[i15 >> 2] | 0;
  }
  HEAP32[i20 >> 2] = i4 + (HEAP32[i18 >> 2] | 0);
  HEAP32[i16 >> 2] = i1 + (HEAP32[i19 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_RGBA8888_BGR888_Blend(i20) {
 i20 = i20 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i1 = HEAP32[i20 + 52 >> 2] | 0;
 i15 = i20 + 28 | 0;
 i19 = HEAP32[i15 >> 2] | 0;
 i2 = i19 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i19) return;
 i16 = i20 + 20 | 0;
 i17 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i19 = i20 + 32 | 0;
 i14 = (i1 & 48 | 0) != 0;
 i13 = i1 & 112;
 do {
  i1 = HEAP32[i17 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i20 >> 2] | 0;
   i1 = HEAP32[i16 >> 2] | 0;
   i3 = i2;
  } else {
   i12 = HEAP32[i16 >> 2] | 0;
   i4 = HEAP32[i20 >> 2] | 0;
   i10 = i12;
   i11 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i8 = HEAP32[i11 >> 2] | 0;
    i7 = i8 >>> 24;
    i6 = i8 >>> 16 & 255;
    i5 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    i2 = HEAP32[i10 >> 2] | 0;
    i9 = i2 >>> 16 & 255;
    i3 = i2 >>> 8 & 255;
    i2 = i2 & 255;
    if (i14 & (i8 | 0) != 255) {
     i5 = ((Math_imul(i5, i8) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i8) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i8) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 | 0) {
    case 16:
     {
      i8 = i8 ^ 255;
      i5 = (((Math_imul(i9, i8) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i3 = (((Math_imul(i3, i8) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i8, i2) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i3 = i6 + i3 | 0;
      i5 = i5 + i9 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i9;
    }
    HEAP32[i10 >> 2] = i3 << 8 | i2 | i5 << 16;
    if (!i1) break; else {
     i10 = i10 + 4 | 0;
     i11 = i11 + 4 | 0;
    }
   }
   i1 = i12;
   i3 = HEAP32[i15 >> 2] | 0;
  }
  HEAP32[i20 >> 2] = i4 + (HEAP32[i18 >> 2] | 0);
  HEAP32[i16 >> 2] = i1 + (HEAP32[i19 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_BGRA8888_RGB888_Blend(i20) {
 i20 = i20 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i1 = HEAP32[i20 + 52 >> 2] | 0;
 i15 = i20 + 28 | 0;
 i19 = HEAP32[i15 >> 2] | 0;
 i2 = i19 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i19) return;
 i16 = i20 + 20 | 0;
 i17 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i19 = i20 + 32 | 0;
 i14 = (i1 & 48 | 0) != 0;
 i13 = i1 & 112;
 do {
  i1 = HEAP32[i17 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i20 >> 2] | 0;
   i1 = HEAP32[i16 >> 2] | 0;
   i3 = i2;
  } else {
   i12 = HEAP32[i16 >> 2] | 0;
   i4 = HEAP32[i20 >> 2] | 0;
   i10 = i12;
   i11 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i8 = HEAP32[i11 >> 2] | 0;
    i5 = i8 >>> 24;
    i6 = i8 >>> 16 & 255;
    i7 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    i9 = HEAP32[i10 >> 2] | 0;
    i2 = i9 >>> 16 & 255;
    i3 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    if (i14 & (i8 | 0) != 255) {
     i5 = ((Math_imul(i5, i8) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i8) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i8) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 | 0) {
    case 16:
     {
      i8 = i8 ^ 255;
      i5 = (((Math_imul(i8, i9) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i3 = (((Math_imul(i3, i8) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i2, i8) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i3 = i6 + i3 | 0;
      i5 = i5 + i9 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i9;
    }
    HEAP32[i10 >> 2] = i3 << 8 | i2 << 16 | i5;
    if (!i1) break; else {
     i10 = i10 + 4 | 0;
     i11 = i11 + 4 | 0;
    }
   }
   i1 = i12;
   i3 = HEAP32[i15 >> 2] | 0;
  }
  HEAP32[i20 >> 2] = i4 + (HEAP32[i18 >> 2] | 0);
  HEAP32[i16 >> 2] = i1 + (HEAP32[i19 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_BGRA8888_BGR888_Blend(i20) {
 i20 = i20 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i1 = HEAP32[i20 + 52 >> 2] | 0;
 i15 = i20 + 28 | 0;
 i19 = HEAP32[i15 >> 2] | 0;
 i2 = i19 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i19) return;
 i16 = i20 + 20 | 0;
 i17 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i19 = i20 + 32 | 0;
 i14 = (i1 & 48 | 0) != 0;
 i13 = i1 & 112;
 do {
  i1 = HEAP32[i17 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i20 >> 2] | 0;
   i1 = HEAP32[i16 >> 2] | 0;
   i3 = i2;
  } else {
   i12 = HEAP32[i16 >> 2] | 0;
   i4 = HEAP32[i20 >> 2] | 0;
   i10 = i12;
   i11 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i8 = HEAP32[i11 >> 2] | 0;
    i5 = i8 >>> 24;
    i6 = i8 >>> 16 & 255;
    i7 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    i2 = HEAP32[i10 >> 2] | 0;
    i9 = i2 >>> 16 & 255;
    i3 = i2 >>> 8 & 255;
    i2 = i2 & 255;
    if (i14 & (i8 | 0) != 255) {
     i5 = ((Math_imul(i5, i8) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i8) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i8) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 | 0) {
    case 16:
     {
      i8 = i8 ^ 255;
      i5 = (((Math_imul(i9, i8) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i3 = (((Math_imul(i3, i8) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i8, i2) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i3 = i6 + i3 | 0;
      i5 = i5 + i9 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i9;
    }
    HEAP32[i10 >> 2] = i3 << 8 | i2 | i5 << 16;
    if (!i1) break; else {
     i10 = i10 + 4 | 0;
     i11 = i11 + 4 | 0;
    }
   }
   i1 = i12;
   i3 = HEAP32[i15 >> 2] | 0;
  }
  HEAP32[i20 >> 2] = i4 + (HEAP32[i18 >> 2] | 0);
  HEAP32[i16 >> 2] = i1 + (HEAP32[i19 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_ARGB8888_RGB888_Blend(i20) {
 i20 = i20 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i1 = HEAP32[i20 + 52 >> 2] | 0;
 i15 = i20 + 28 | 0;
 i19 = HEAP32[i15 >> 2] | 0;
 i2 = i19 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i19) return;
 i16 = i20 + 20 | 0;
 i17 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i19 = i20 + 32 | 0;
 i14 = (i1 & 48 | 0) != 0;
 i13 = i1 & 112;
 do {
  i1 = HEAP32[i17 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i20 >> 2] | 0;
   i1 = HEAP32[i16 >> 2] | 0;
   i3 = i2;
  } else {
   i12 = HEAP32[i16 >> 2] | 0;
   i4 = HEAP32[i20 >> 2] | 0;
   i10 = i12;
   i11 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i8 = HEAP32[i11 >> 2] | 0;
    i7 = i8 >>> 16 & 255;
    i6 = i8 >>> 8 & 255;
    i5 = i8 & 255;
    i8 = i8 >>> 24;
    i9 = HEAP32[i10 >> 2] | 0;
    i2 = i9 >>> 16 & 255;
    i3 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    if (i14 & (i8 | 0) != 255) {
     i5 = ((Math_imul(i5, i8) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i8) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i8) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 | 0) {
    case 16:
     {
      i8 = i8 ^ 255;
      i5 = (((Math_imul(i8, i9) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i3 = (((Math_imul(i3, i8) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i2, i8) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i3 = i6 + i3 | 0;
      i5 = i5 + i9 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i9;
    }
    HEAP32[i10 >> 2] = i3 << 8 | i2 << 16 | i5;
    if (!i1) break; else {
     i10 = i10 + 4 | 0;
     i11 = i11 + 4 | 0;
    }
   }
   i1 = i12;
   i3 = HEAP32[i15 >> 2] | 0;
  }
  HEAP32[i20 >> 2] = i4 + (HEAP32[i18 >> 2] | 0);
  HEAP32[i16 >> 2] = i1 + (HEAP32[i19 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_ARGB8888_BGR888_Blend(i20) {
 i20 = i20 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i1 = HEAP32[i20 + 52 >> 2] | 0;
 i15 = i20 + 28 | 0;
 i19 = HEAP32[i15 >> 2] | 0;
 i2 = i19 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i19) return;
 i16 = i20 + 20 | 0;
 i17 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i19 = i20 + 32 | 0;
 i14 = (i1 & 48 | 0) != 0;
 i13 = i1 & 112;
 do {
  i1 = HEAP32[i17 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i20 >> 2] | 0;
   i1 = HEAP32[i16 >> 2] | 0;
   i3 = i2;
  } else {
   i12 = HEAP32[i16 >> 2] | 0;
   i4 = HEAP32[i20 >> 2] | 0;
   i10 = i12;
   i11 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i8 = HEAP32[i11 >> 2] | 0;
    i7 = i8 >>> 16 & 255;
    i6 = i8 >>> 8 & 255;
    i5 = i8 & 255;
    i8 = i8 >>> 24;
    i2 = HEAP32[i10 >> 2] | 0;
    i9 = i2 >>> 16 & 255;
    i3 = i2 >>> 8 & 255;
    i2 = i2 & 255;
    if (i14 & (i8 | 0) != 255) {
     i5 = ((Math_imul(i5, i8) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i8) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i8) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 | 0) {
    case 16:
     {
      i8 = i8 ^ 255;
      i5 = (((Math_imul(i9, i8) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i3 = (((Math_imul(i3, i8) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i8, i2) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i3 = i6 + i3 | 0;
      i5 = i5 + i9 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i9;
    }
    HEAP32[i10 >> 2] = i3 << 8 | i2 | i5 << 16;
    if (!i1) break; else {
     i10 = i10 + 4 | 0;
     i11 = i11 + 4 | 0;
    }
   }
   i1 = i12;
   i3 = HEAP32[i15 >> 2] | 0;
  }
  HEAP32[i20 >> 2] = i4 + (HEAP32[i18 >> 2] | 0);
  HEAP32[i16 >> 2] = i1 + (HEAP32[i19 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_ABGR8888_RGB888_Blend(i20) {
 i20 = i20 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i1 = HEAP32[i20 + 52 >> 2] | 0;
 i15 = i20 + 28 | 0;
 i19 = HEAP32[i15 >> 2] | 0;
 i2 = i19 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i19) return;
 i16 = i20 + 20 | 0;
 i17 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i19 = i20 + 32 | 0;
 i14 = (i1 & 48 | 0) != 0;
 i13 = i1 & 112;
 do {
  i1 = HEAP32[i17 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i20 >> 2] | 0;
   i1 = HEAP32[i16 >> 2] | 0;
   i3 = i2;
  } else {
   i12 = HEAP32[i16 >> 2] | 0;
   i4 = HEAP32[i20 >> 2] | 0;
   i10 = i12;
   i11 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i8 = HEAP32[i11 >> 2] | 0;
    i5 = i8 >>> 16 & 255;
    i6 = i8 >>> 8 & 255;
    i7 = i8 & 255;
    i8 = i8 >>> 24;
    i9 = HEAP32[i10 >> 2] | 0;
    i2 = i9 >>> 16 & 255;
    i3 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    if (i14 & (i8 | 0) != 255) {
     i5 = ((Math_imul(i5, i8) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i8) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i8) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 | 0) {
    case 16:
     {
      i8 = i8 ^ 255;
      i5 = (((Math_imul(i8, i9) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i3 = (((Math_imul(i3, i8) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i2, i8) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i3 = i6 + i3 | 0;
      i5 = i5 + i9 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i9;
    }
    HEAP32[i10 >> 2] = i3 << 8 | i2 << 16 | i5;
    if (!i1) break; else {
     i10 = i10 + 4 | 0;
     i11 = i11 + 4 | 0;
    }
   }
   i1 = i12;
   i3 = HEAP32[i15 >> 2] | 0;
  }
  HEAP32[i20 >> 2] = i4 + (HEAP32[i18 >> 2] | 0);
  HEAP32[i16 >> 2] = i1 + (HEAP32[i19 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_ABGR8888_BGR888_Blend(i20) {
 i20 = i20 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i1 = HEAP32[i20 + 52 >> 2] | 0;
 i15 = i20 + 28 | 0;
 i19 = HEAP32[i15 >> 2] | 0;
 i2 = i19 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i19) return;
 i16 = i20 + 20 | 0;
 i17 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i19 = i20 + 32 | 0;
 i14 = (i1 & 48 | 0) != 0;
 i13 = i1 & 112;
 do {
  i1 = HEAP32[i17 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i20 >> 2] | 0;
   i1 = HEAP32[i16 >> 2] | 0;
   i3 = i2;
  } else {
   i12 = HEAP32[i16 >> 2] | 0;
   i4 = HEAP32[i20 >> 2] | 0;
   i10 = i12;
   i11 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i8 = HEAP32[i11 >> 2] | 0;
    i5 = i8 >>> 16 & 255;
    i6 = i8 >>> 8 & 255;
    i7 = i8 & 255;
    i8 = i8 >>> 24;
    i2 = HEAP32[i10 >> 2] | 0;
    i9 = i2 >>> 16 & 255;
    i3 = i2 >>> 8 & 255;
    i2 = i2 & 255;
    if (i14 & (i8 | 0) != 255) {
     i5 = ((Math_imul(i5, i8) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i8) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i8) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 | 0) {
    case 16:
     {
      i8 = i8 ^ 255;
      i5 = (((Math_imul(i9, i8) | 0) >>> 0) / 255 | 0) + i5 | 0;
      i3 = (((Math_imul(i3, i8) | 0) >>> 0) / 255 | 0) + i6 | 0;
      i2 = (((Math_imul(i8, i2) | 0) >>> 0) / 255 | 0) + i7 | 0;
      break;
     }
    case 32:
     {
      i2 = i7 + i2 | 0;
      i3 = i6 + i3 | 0;
      i5 = i5 + i9 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i9;
    }
    HEAP32[i10 >> 2] = i3 << 8 | i2 | i5 << 16;
    if (!i1) break; else {
     i10 = i10 + 4 | 0;
     i11 = i11 + 4 | 0;
    }
   }
   i1 = i12;
   i3 = HEAP32[i15 >> 2] | 0;
  }
  HEAP32[i20 >> 2] = i4 + (HEAP32[i18 >> 2] | 0);
  HEAP32[i16 >> 2] = i1 + (HEAP32[i19 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _Emscripten_HandleTouch(i4, i7, i2) {
 i4 = i4 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, d5 = 0.0, d6 = 0.0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i8 + 8 | 0;
 i3 = i8;
 if ((_SDL_GetTouch(0, 0) | 0) == 0 ? (_SDL_AddTouch(0, 0, 62969) | 0) < 0 : 0) {
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 _emscripten_get_element_css_size(0, i1 | 0, i3 | 0) | 0;
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 d6 = +(HEAP32[i2 + 24 >> 2] | 0) / +HEAPF64[i1 >> 3];
 d5 = +(HEAP32[i2 + 28 >> 2] | 0) / +HEAPF64[i3 >> 3];
 if ((HEAP32[i7 >> 2] | 0) <= 0) {
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 switch (i4 | 0) {
 case 24:
  {
   i2 = 0;
   i1 = 0;
   do {
    if ((HEAP32[i7 + 20 + (i2 * 52 | 0) + 28 >> 2] | 0) != 0 ? (i4 = HEAP32[i7 + 20 + (i2 * 52 | 0) >> 2] | 0, _SDL_SendTouchMotion(0, 0, i4, ((i4 | 0) < 0) << 31 >> 31, +(~~(d6 * +(HEAP32[i7 + 20 + (i2 * 52 | 0) + 44 >> 2] | 0)) | 0), +(~~(d5 * +(HEAP32[i7 + 20 + (i2 * 52 | 0) + 48 >> 2] | 0)) | 0), 1.0) | 0, (i1 | 0) == 0) : 0) i1 = (_SDL_EventState(1794, -1) | 0) << 24 >> 24 == 1 & 1;
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) < (HEAP32[i7 >> 2] | 0));
   STACKTOP = i8;
   return i1 | 0;
  }
 case 22:
  {
   i2 = 0;
   i1 = 0;
   do {
    if ((HEAP32[i7 + 20 + (i2 * 52 | 0) + 28 >> 2] | 0) != 0 ? (i4 = HEAP32[i7 + 20 + (i2 * 52 | 0) >> 2] | 0, _SDL_SendTouch(0, 0, i4, ((i4 | 0) < 0) << 31 >> 31, 1, +(~~(d6 * +(HEAP32[i7 + 20 + (i2 * 52 | 0) + 44 >> 2] | 0)) | 0), +(~~(d5 * +(HEAP32[i7 + 20 + (i2 * 52 | 0) + 48 >> 2] | 0)) | 0), 1.0) | 0, (i1 | 0) == 0) : 0) i1 = (_SDL_EventState(1792, -1) | 0) << 24 >> 24 == 1 & 1;
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) < (HEAP32[i7 >> 2] | 0));
   STACKTOP = i8;
   return i1 | 0;
  }
 default:
  {
   i2 = 0;
   i1 = 0;
   do {
    if ((HEAP32[i7 + 20 + (i2 * 52 | 0) + 28 >> 2] | 0) != 0 ? (i4 = HEAP32[i7 + 20 + (i2 * 52 | 0) >> 2] | 0, _SDL_SendTouch(0, 0, i4, ((i4 | 0) < 0) << 31 >> 31, 0, +(~~(d6 * +(HEAP32[i7 + 20 + (i2 * 52 | 0) + 44 >> 2] | 0)) | 0), +(~~(d5 * +(HEAP32[i7 + 20 + (i2 * 52 | 0) + 48 >> 2] | 0)) | 0), 1.0) | 0, (i1 | 0) == 0) : 0) i1 = (_SDL_EventState(1793, -1) | 0) << 24 >> 24 == 1 & 1;
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) < (HEAP32[i7 >> 2] | 0));
   STACKTOP = i8;
   return i1 | 0;
  }
 }
 return 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb(i11, i12, i8, i9, i13, i15) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i13 = i13 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i14 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i2 = i16 + 56 | 0;
 i1 = i16 + 52 | 0;
 i14 = i16 + 48 | 0;
 i3 = i16 + 44 | 0;
 i4 = i16 + 40 | 0;
 i5 = i16 + 36 | 0;
 i6 = i16 + 32 | 0;
 i10 = i16 + 8 | 0;
 i7 = i16;
 L1 : do if (!(HEAP32[i9 + 4 >> 2] & 1)) {
  HEAP32[i14 >> 2] = -1;
  i10 = HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[i3 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i4 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
  i1 = FUNCTION_TABLE_iiiiiii[i10 & 63](i11, i1, i2, i9, i13, i14) | 0;
  HEAP32[i12 >> 2] = i1;
  switch (HEAP32[i14 >> 2] | 0) {
  case 0:
   {
    HEAP8[i15 >> 0] = 0;
    break L1;
   }
  case 1:
   {
    HEAP8[i15 >> 0] = 1;
    break L1;
   }
  default:
   {
    HEAP8[i15 >> 0] = 1;
    HEAP32[i13 >> 2] = 4;
    break L1;
   }
  }
 } else {
  i11 = __ZNKSt3__18ios_base6getlocEv(i9) | 0;
  HEAP32[i5 >> 2] = i11;
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 30376) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(i11) | 0;
  i11 = __ZNKSt3__18ios_base6getlocEv(i9) | 0;
  HEAP32[i6 >> 2] = i11;
  i14 = __ZNKSt3__16locale9use_facetERNS0_2idE(i6, 30532) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(i11) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 24 >> 2] & 127](i10, i14);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 28 >> 2] & 127](i10 + 12 | 0, i14);
  HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
  HEAP8[i15 >> 0] = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i12, i2, i10, i10 + 24 | 0, i1, i13, 1) | 0) == (i10 | 0) & 1;
  i1 = HEAP32[i12 >> 2] | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i10 + 12 | 0);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i10);
 } while (0);
 STACKTOP = i16;
 return i1 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb(i11, i12, i8, i9, i13, i15) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i13 = i13 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i14 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i2 = i16 + 56 | 0;
 i1 = i16 + 52 | 0;
 i14 = i16 + 48 | 0;
 i3 = i16 + 44 | 0;
 i4 = i16 + 40 | 0;
 i5 = i16 + 36 | 0;
 i6 = i16 + 32 | 0;
 i10 = i16 + 8 | 0;
 i7 = i16;
 L1 : do if (!(HEAP32[i9 + 4 >> 2] & 1)) {
  HEAP32[i14 >> 2] = -1;
  i10 = HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[i3 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i4 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
  i1 = FUNCTION_TABLE_iiiiiii[i10 & 63](i11, i1, i2, i9, i13, i14) | 0;
  HEAP32[i12 >> 2] = i1;
  switch (HEAP32[i14 >> 2] | 0) {
  case 0:
   {
    HEAP8[i15 >> 0] = 0;
    break L1;
   }
  case 1:
   {
    HEAP8[i15 >> 0] = 1;
    break L1;
   }
  default:
   {
    HEAP8[i15 >> 0] = 1;
    HEAP32[i13 >> 2] = 4;
    break L1;
   }
  }
 } else {
  i11 = __ZNKSt3__18ios_base6getlocEv(i9) | 0;
  HEAP32[i5 >> 2] = i11;
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 30384) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(i11) | 0;
  i11 = __ZNKSt3__18ios_base6getlocEv(i9) | 0;
  HEAP32[i6 >> 2] = i11;
  i14 = __ZNKSt3__16locale9use_facetERNS0_2idE(i6, 30524) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(i11) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 24 >> 2] & 127](i10, i14);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 28 >> 2] & 127](i10 + 12 | 0, i14);
  HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
  HEAP8[i15 >> 0] = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i12, i2, i10, i10 + 24 | 0, i1, i13, 1) | 0) == (i10 | 0) & 1;
  i1 = HEAP32[i12 >> 2] | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10 + 12 | 0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
 } while (0);
 STACKTOP = i16;
 return i1 | 0;
}

function _SDL_VideoQuit() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 if (!(HEAP32[3256] | 0)) return;
 _SDL_TouchQuit();
 _SDL_MouseQuit();
 _SDL_QuitSubSystem(16384);
 i1 = HEAP32[3256] | 0;
 if (i1) {
  i2 = i1 + 232 | 0;
  if ((HEAP32[i2 >> 2] | 0) != 0 ? (HEAP32[i2 >> 2] = 0, i3 = HEAP32[i1 + 180 >> 2] | 0, (i3 | 0) != 0) : 0) {
   FUNCTION_TABLE_vi[i3 & 511](i1);
   i1 = HEAP32[3256] | 0;
  }
 } else i1 = 0;
 i2 = HEAP32[i1 + 244 >> 2] | 0;
 if (i2) do {
  _SDL_DestroyWindow(i2);
  i1 = HEAP32[3256] | 0;
  i2 = HEAP32[i1 + 244 >> 2] | 0;
 } while ((i2 | 0) != 0);
 FUNCTION_TABLE_vi[HEAP32[i1 + 8 >> 2] & 511](i1);
 i1 = HEAP32[3256] | 0;
 i3 = HEAP32[i1 + 236 >> 2] | 0;
 i2 = HEAP32[i1 + 240 >> 2] | 0;
 if ((i3 | 0) > 0) {
  i5 = 0;
  do {
   i1 = HEAP32[i2 + (i5 * 68 | 0) + 8 >> 2] | 0;
   i4 = i2 + (i5 * 68 | 0) + 12 | 0;
   if (!i1) i1 = HEAP32[i4 >> 2] | 0; else {
    i3 = i1;
    i1 = HEAP32[i4 >> 2] | 0;
    do {
     i3 = i3 + -1 | 0;
     _SDL_free(HEAP32[i1 + (i3 * 20 | 0) + 16 >> 2] | 0);
     i1 = HEAP32[i4 >> 2] | 0;
     HEAP32[i1 + (i3 * 20 | 0) + 16 >> 2] = 0;
    } while ((i3 | 0) != 0);
   }
   _SDL_free(i1);
   HEAP32[i4 >> 2] = 0;
   i1 = i2 + (i5 * 68 | 0) + 32 | 0;
   _SDL_free(HEAP32[i1 >> 2] | 0);
   HEAP32[i1 >> 2] = 0;
   i1 = i2 + (i5 * 68 | 0) + 64 | 0;
   _SDL_free(HEAP32[i1 >> 2] | 0);
   HEAP32[i1 >> 2] = 0;
   i5 = i5 + 1 | 0;
   i1 = HEAP32[3256] | 0;
   i3 = HEAP32[i1 + 236 >> 2] | 0;
   i2 = HEAP32[i1 + 240 >> 2] | 0;
  } while ((i5 | 0) < (i3 | 0));
 }
 if (i2) {
  i1 = i1 + 240 | 0;
  if ((i3 | 0) > 0) {
   _SDL_free(HEAP32[i2 >> 2] | 0);
   i5 = HEAP32[3256] | 0;
   i1 = i5 + 240 | 0;
   if ((HEAP32[i5 + 236 >> 2] | 0) > 1) {
    i2 = 1;
    do {
     _SDL_free(HEAP32[(HEAP32[i1 >> 2] | 0) + (i2 * 68 | 0) >> 2] | 0);
     i2 = i2 + 1 | 0;
     i5 = HEAP32[3256] | 0;
     i1 = i5 + 240 | 0;
    } while ((i2 | 0) < (HEAP32[i5 + 236 >> 2] | 0));
   }
  }
  _SDL_free(HEAP32[i1 >> 2] | 0);
  HEAP32[(HEAP32[3256] | 0) + 240 >> 2] = 0;
  i1 = HEAP32[3256] | 0;
  HEAP32[i1 + 236 >> 2] = 0;
 }
 _SDL_free(HEAP32[i1 + 256 >> 2] | 0);
 HEAP32[(HEAP32[3256] | 0) + 256 >> 2] = 0;
 i5 = HEAP32[3256] | 0;
 FUNCTION_TABLE_vi[HEAP32[i5 + 652 >> 2] & 511](i5);
 HEAP32[3256] = 0;
 return;
}

function _SDL_SetError(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i7;
 i5 = i7 + 8 | 0;
 if (!i2) {
  STACKTOP = i7;
  return -1;
 }
 HEAP32[32] = 1;
 _SDL_strlcpy(132, i2, 128) | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[65] = 0;
 i3 = HEAP8[i2 >> 0] | 0;
 L4 : do if (i3 << 24 >> 24) {
  i1 = i2;
  i2 = 0;
  do {
   i1 = i1 + 1 | 0;
   if (i3 << 24 >> 24 == 37) {
    while (1) {
     i4 = HEAP8[i1 >> 0] | 0;
     if (i4 << 24 >> 24 != 46) {
      i3 = i1 + 1 | 0;
      if ((i4 + -48 & 255) < 10) {
       i1 = i3;
       continue;
      } else break;
     } else {
      i1 = i1 + 1 | 0;
      continue;
     }
    }
    switch (i4 << 24 >> 24 | 0) {
    case 0:
     break;
    case 88:
    case 120:
    case 111:
    case 117:
    case 100:
    case 105:
    case 99:
     {
      i4 = (HEAP32[i5 >> 2] | 0) + (4 - 1) & ~(4 - 1);
      i1 = HEAP32[i4 >> 2] | 0;
      HEAP32[i5 >> 2] = i4 + 4;
      i4 = i2 + 1 | 0;
      HEAP32[65] = i4;
      HEAP32[264 + (i2 << 7) >> 2] = i1;
      i1 = i3;
      i2 = i4;
      break;
     }
    case 102:
     {
      i4 = (HEAP32[i5 >> 2] | 0) + (8 - 1) & ~(8 - 1);
      d8 = +HEAPF64[i4 >> 3];
      HEAP32[i5 >> 2] = i4 + 8;
      i4 = i2 + 1 | 0;
      HEAP32[65] = i4;
      HEAPF64[264 + (i2 << 7) >> 3] = d8;
      i1 = i3;
      i2 = i4;
      break;
     }
    case 112:
     {
      i4 = (HEAP32[i5 >> 2] | 0) + (4 - 1) & ~(4 - 1);
      i1 = HEAP32[i4 >> 2] | 0;
      HEAP32[i5 >> 2] = i4 + 4;
      i4 = i2 + 1 | 0;
      HEAP32[65] = i4;
      HEAP32[264 + (i2 << 7) >> 2] = i1;
      i1 = i3;
      i2 = i4;
      break;
     }
    case 115:
     {
      i4 = (HEAP32[i5 >> 2] | 0) + (4 - 1) & ~(4 - 1);
      i1 = HEAP32[i4 >> 2] | 0;
      HEAP32[i5 >> 2] = i4 + 4;
      _SDL_strlcpy(264 + (i2 << 7) | 0, (i1 | 0) == 0 ? 60945 : i1, 128) | 0;
      i2 = (HEAP32[65] | 0) + 1 | 0;
      HEAP32[65] = i2;
      i1 = i3;
      break;
     }
    default:
     i1 = i3;
    }
    if ((i2 | 0) > 4) break L4;
   }
   i3 = HEAP8[i1 >> 0] | 0;
  } while (i3 << 24 >> 24 != 0);
 } while (0);
 _SDL_GetError() | 0;
 HEAP32[i6 >> 2] = 35347;
 _SDL_LogError(1, 35344, i6);
 STACKTOP = i7;
 return -1;
}

function _Color32DitherYV12Mod1X(i20, i22, i4, i1, i2, i6, i3, i21, i5) {
 i20 = i20 | 0;
 i22 = i22 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i21 = i21 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i15 = (i21 | 0) / 2 | 0;
 i16 = (i5 << 1) + i21 | 0;
 if ((i3 + 1 | 0) >>> 0 < 3) return;
 i17 = (i21 + 1 | 0) >>> 0 < 3;
 i18 = i15 << 1;
 i19 = i18 + i21 | 0;
 i13 = i4;
 i14 = (i3 | 0) / 2 | 0;
 i12 = i4;
 i4 = i6;
 i3 = i6 + (i5 + i21 << 2) | 0;
 while (1) {
  i14 = i14 + -1 | 0;
  i5 = i12 + i21 | 0;
  if (i17) i6 = i13; else {
   i11 = i3 + (i18 << 2) | 0;
   i10 = i4 + (i18 << 2) | 0;
   i9 = i2 + i15 | 0;
   i7 = i13;
   i8 = i1;
   i6 = i15;
   while (1) {
    i6 = i6 + -1 | 0;
    i26 = HEAPU8[i8 >> 0] | 0;
    i25 = (HEAP32[i20 + (i26 << 2) >> 2] | 0) + 256 | 0;
    i23 = HEAPU8[i2 >> 0] | 0;
    i26 = (HEAP32[i20 + ((i26 | 256) << 2) >> 2] | 0) + 1024 + (HEAP32[i20 + ((i23 | 512) << 2) >> 2] | 0) | 0;
    i23 = (HEAP32[i20 + ((i23 | 768) << 2) >> 2] | 0) + 1792 | 0;
    i24 = HEAPU8[i7 >> 0] | 0;
    HEAP32[i4 >> 2] = HEAP32[i22 + (i24 + i26 << 2) >> 2] | HEAP32[i22 + (i24 + i25 << 2) >> 2] | HEAP32[i22 + (i24 + i23 << 2) >> 2];
    i24 = HEAPU8[i7 + 1 >> 0] | 0;
    HEAP32[i4 + 4 >> 2] = HEAP32[i22 + (i24 + i26 << 2) >> 2] | HEAP32[i22 + (i24 + i25 << 2) >> 2] | HEAP32[i22 + (i24 + i23 << 2) >> 2];
    i24 = HEAPU8[i5 >> 0] | 0;
    HEAP32[i3 >> 2] = HEAP32[i22 + (i24 + i26 << 2) >> 2] | HEAP32[i22 + (i24 + i25 << 2) >> 2] | HEAP32[i22 + (i24 + i23 << 2) >> 2];
    i24 = HEAPU8[i5 + 1 >> 0] | 0;
    HEAP32[i3 + 4 >> 2] = HEAP32[i22 + (i24 + i26 << 2) >> 2] | HEAP32[i22 + (i24 + i25 << 2) >> 2] | HEAP32[i22 + (i24 + i23 << 2) >> 2];
    if (!i6) break; else {
     i7 = i7 + 2 | 0;
     i8 = i8 + 1 | 0;
     i2 = i2 + 1 | 0;
     i5 = i5 + 2 | 0;
     i4 = i4 + 8 | 0;
     i3 = i3 + 8 | 0;
    }
   }
   i6 = i13 + i18 | 0;
   i1 = i1 + i15 | 0;
   i2 = i9;
   i5 = i12 + i19 | 0;
   i4 = i10;
   i3 = i11;
  }
  if (!i14) break; else {
   i13 = i6 + i21 | 0;
   i12 = i5;
   i4 = i4 + (i16 << 2) | 0;
   i3 = i3 + (i16 << 2) | 0;
  }
 }
 return;
}

function _SDL_UnlockTexture(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i12;
 i10 = i12 + 28 | 0;
 i9 = i12 + 24 | 0;
 i5 = i12 + 8 | 0;
 if ((i11 | 0) != 0 ? (HEAP32[i11 >> 2] | 0) == 37830 : 0) {
  if ((HEAP32[i11 + 8 >> 2] | 0) != 1) {
   STACKTOP = i12;
   return;
  }
  i4 = i11 + 40 | 0;
  if (HEAP32[i4 >> 2] | 0) {
   i1 = HEAP32[i11 + 36 >> 2] | 0;
   HEAP32[i10 >> 2] = 0;
   HEAP32[i9 >> 2] = 0;
   HEAP32[i5 >> 2] = 0;
   HEAP32[i5 + 4 >> 2] = 0;
   i2 = i5 + 8 | 0;
   HEAP32[i2 >> 2] = HEAP32[i11 + 12 >> 2];
   i3 = i5 + 12 | 0;
   HEAP32[i3 >> 2] = HEAP32[i11 + 16 >> 2];
   if ((_SDL_LockTexture(i1, i5, i10, i9) | 0) >= 0) {
    _SDL_SW_CopyYUVToRGB(HEAP32[i4 >> 2] | 0, i5, HEAP32[i1 + 4 >> 2] | 0, HEAP32[i2 >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
    _SDL_UnlockTexture(i1);
   }
   STACKTOP = i12;
   return;
  }
  i2 = HEAP32[i11 + 36 >> 2] | 0;
  if (!i2) {
   i10 = HEAP32[i11 + 32 >> 2] | 0;
   FUNCTION_TABLE_vii[HEAP32[i10 + 40 >> 2] & 127](i10, i11);
   STACKTOP = i12;
   return;
  }
  HEAP32[i10 >> 2] = 0;
  HEAP32[i9 >> 2] = 0;
  i3 = i11 + 52 | 0;
  i4 = HEAP32[i11 + 44 >> 2] | 0;
  i5 = HEAP32[i11 + 48 >> 2] | 0;
  i6 = Math_imul(i5, HEAP32[i11 + 56 >> 2] | 0) | 0;
  i7 = HEAP32[i3 >> 2] | 0;
  i8 = i11 + 4 | 0;
  i1 = HEAP32[i8 >> 2] | 0;
  L18 : do if ((i1 | 0) == 0 | (i1 & -268435456 | 0) == 268435456) i1 = i1 & 255; else {
   if ((i1 | 0) < 1498831189) switch (i1 | 0) {
   case 844715353:
    {
     i1 = 2;
     break L18;
    }
   default:
    {}
   } else switch (i1 | 0) {
   case 1498831189:
    {
     i1 = 2;
     break L18;
    }
   default:
    {}
   }
   i1 = (i1 | 0) == 1431918169 ? 2 : 1;
  } while (0);
  if ((_SDL_LockTexture(i2, i3, i10, i9) | 0) >= 0) {
   i7 = i4 + ((Math_imul(i1, i7) | 0) + i6) | 0;
   _SDL_ConvertPixels(HEAP32[i11 + 60 >> 2] | 0, HEAP32[i11 + 64 >> 2] | 0, HEAP32[i8 >> 2] | 0, i7, i5, HEAP32[i2 + 4 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
   _SDL_UnlockTexture(i2);
  }
  STACKTOP = i12;
  return;
 }
 _SDL_SetError(37831, i1) | 0;
 STACKTOP = i12;
 return;
}

function _GLES2_RenderClear(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0;
 i1 = i14 + 316 | 0;
 i15 = HEAP32[i1 >> 2] | 0;
 i3 = HEAP32[i15 >> 2] | 0;
 if ((HEAP32[3491] | 0) != (i3 | 0)) {
  HEAP32[i15 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i14 + 188 >> 2] | 0, i3) | 0) >= 0) {
   HEAP32[3491] = HEAP32[i15 >> 2];
   _GLES2_UpdateViewport(i14) | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   i16 = 4;
  }
 } else {
  i2 = i15;
  i16 = 4;
 }
 if ((i16 | 0) == 4 ? (HEAP32[i2 + 4 >> 2] | 0) != 0 : 0) {
  i1 = i2 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 7]() | 0) != 0);
 }
 i4 = i15 + 272 | 0;
 i5 = i15 + 273 | 0;
 i6 = i15 + 274 | 0;
 i7 = i15 + 275 | 0;
 i8 = i14 + 308 | 0;
 i1 = HEAP8[i8 >> 0] | 0;
 i9 = i14 + 309 | 0;
 i10 = HEAP8[i9 >> 0] | 0;
 i11 = i14 + 310 | 0;
 i3 = HEAP8[i11 >> 0] | 0;
 i12 = i14 + 311 | 0;
 i13 = HEAP8[i12 >> 0] | 0;
 if (((HEAPU8[i5 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | (HEAPU8[i6 >> 0] | 0) << 8 | (HEAPU8[i7 >> 0] | 0) | 0) == ((i10 & 255) << 16 | (i1 & 255) << 24 | (i3 & 255) << 8 | i13 & 255 | 0)) {
  i16 = i15 + 36 | 0;
  i16 = HEAP32[i16 >> 2] | 0;
  FUNCTION_TABLE_vi[i16 & 511](16384);
  return 0;
 }
 i2 = HEAP32[i14 + 304 >> 2] | 0;
 L13 : do if (i2) {
  i2 = HEAP32[i2 + 4 >> 2] | 0;
  if ((i2 | 0) < 372645892) switch (i2 | 0) {
  case 370546692:
   {
    i2 = i1;
    i1 = i3;
    break L13;
   }
  default:
   {
    i16 = 10;
    break L13;
   }
  } else switch (i2 | 0) {
  case 372645892:
   {
    i2 = i1;
    i1 = i3;
    break L13;
   }
  default:
   {
    i16 = 10;
    break L13;
   }
  }
 } else i16 = 10; while (0);
 if ((i16 | 0) == 10) i2 = i3;
 FUNCTION_TABLE_vdddd[HEAP32[i15 + 40 >> 2] & 3](+(i1 & 255) * .003921568859368563, +(i10 & 255) * .003921568859368563, +(i2 & 255) * .003921568859368563, +(i13 & 255) * .003921568859368563);
 HEAP8[i4 >> 0] = HEAP8[i8 >> 0] | 0;
 HEAP8[i5 >> 0] = HEAP8[i9 >> 0] | 0;
 HEAP8[i6 >> 0] = HEAP8[i11 >> 0] | 0;
 HEAP8[i7 >> 0] = HEAP8[i12 >> 0] | 0;
 i16 = i15 + 36 | 0;
 i16 = HEAP32[i16 >> 2] | 0;
 FUNCTION_TABLE_vi[i16 & 511](16384);
 return 0;
}

function _SDL_Blit_ARGB8888_ARGB8888_Modulate_Scale(i25) {
 i25 = i25 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i26 = 0, i27 = 0;
 i1 = HEAP32[i25 + 52 >> 2] | 0;
 i23 = HEAPU8[i25 + 60 >> 0] | 0;
 i24 = HEAPU8[i25 + 61 >> 0] | 0;
 i15 = HEAPU8[i25 + 62 >> 0] | 0;
 i16 = HEAPU8[i25 + 63 >> 0] | 0;
 i17 = i25 + 28 | 0;
 i26 = HEAP32[i17 >> 2] | 0;
 i18 = (HEAP32[i25 + 8 >> 2] << 16 | 0) / (i26 | 0) | 0;
 i19 = i25 + 24 | 0;
 i2 = HEAP32[i19 >> 2] | 0;
 i20 = (HEAP32[i25 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 i3 = i26 + -1 | 0;
 HEAP32[i17 >> 2] = i3;
 if (!i26) return;
 i26 = i25 + 20 | 0;
 i21 = i25 + 32 | 0;
 i22 = (i1 & 1 | 0) == 0;
 i13 = (i1 & 2 | 0) == 0;
 i14 = i25 + 12 | 0;
 i5 = HEAP32[i26 >> 2] | 0;
 i12 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i11 = i1 + -65536 | 0;
   i10 = i11 >>> 16;
   i11 = i11 - (i10 << 16) | 0;
   i4 = i4 + 1 + i10 | 0;
  } else i11 = i1;
  if (!i2) i2 = i3; else {
   i1 = 65536;
   i3 = 0;
   i6 = -1;
   while (1) {
    i2 = i2 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i3 = i1 + -65536 | 0;
     i1 = i3 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i3 - (i1 << 16) | 0;
     i3 = (HEAP32[i25 >> 2] | 0) + ((Math_imul(HEAP32[i14 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i10 = HEAP32[i3 >> 2] | 0;
    i8 = i10 >>> 16 & 255;
    i9 = i10 >>> 8 & 255;
    i7 = i10 & 255;
    i10 = i10 >>> 24;
    if (!i22) {
     i7 = ((Math_imul(i7, i15) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i24) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i23) | 0) >>> 0) / 255 | 0;
    }
    i27 = ((Math_imul(i10, i16) | 0) >>> 0) / 255 | 0;
    HEAP32[i5 >> 2] = i7 | i9 << 8 | i8 << 16 | (i13 ? i10 : i27) << 24;
    if (!i2) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i20 | 0;
    }
   }
   i2 = HEAP32[i17 >> 2] | 0;
  }
  i1 = i12 + (HEAP32[i21 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i17 >> 2] = i3;
  if (!i2) break;
  i2 = HEAP32[i19 >> 2] | 0;
  i12 = i1;
  i5 = i1;
  i1 = i11 + i18 | 0;
 }
 HEAP32[i26 >> 2] = i1;
 return;
}

function _SDL_Blit_ABGR8888_ARGB8888_Modulate_Scale(i25) {
 i25 = i25 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i26 = 0, i27 = 0;
 i1 = HEAP32[i25 + 52 >> 2] | 0;
 i23 = HEAPU8[i25 + 60 >> 0] | 0;
 i24 = HEAPU8[i25 + 61 >> 0] | 0;
 i15 = HEAPU8[i25 + 62 >> 0] | 0;
 i16 = HEAPU8[i25 + 63 >> 0] | 0;
 i17 = i25 + 28 | 0;
 i26 = HEAP32[i17 >> 2] | 0;
 i18 = (HEAP32[i25 + 8 >> 2] << 16 | 0) / (i26 | 0) | 0;
 i19 = i25 + 24 | 0;
 i2 = HEAP32[i19 >> 2] | 0;
 i20 = (HEAP32[i25 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 i3 = i26 + -1 | 0;
 HEAP32[i17 >> 2] = i3;
 if (!i26) return;
 i26 = i25 + 20 | 0;
 i21 = i25 + 32 | 0;
 i22 = (i1 & 1 | 0) == 0;
 i13 = (i1 & 2 | 0) == 0;
 i14 = i25 + 12 | 0;
 i5 = HEAP32[i26 >> 2] | 0;
 i12 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i11 = i1 + -65536 | 0;
   i10 = i11 >>> 16;
   i11 = i11 - (i10 << 16) | 0;
   i4 = i4 + 1 + i10 | 0;
  } else i11 = i1;
  if (!i2) i2 = i3; else {
   i1 = 65536;
   i3 = 0;
   i6 = -1;
   while (1) {
    i2 = i2 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i3 = i1 + -65536 | 0;
     i1 = i3 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i3 - (i1 << 16) | 0;
     i3 = (HEAP32[i25 >> 2] | 0) + ((Math_imul(HEAP32[i14 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i10 = HEAP32[i3 >> 2] | 0;
    i7 = i10 >>> 16 & 255;
    i9 = i10 >>> 8 & 255;
    i8 = i10 & 255;
    i10 = i10 >>> 24;
    if (!i22) {
     i7 = ((Math_imul(i7, i15) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i24) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i23) | 0) >>> 0) / 255 | 0;
    }
    i27 = ((Math_imul(i10, i16) | 0) >>> 0) / 255 | 0;
    HEAP32[i5 >> 2] = i7 | i9 << 8 | i8 << 16 | (i13 ? i10 : i27) << 24;
    if (!i2) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i20 | 0;
    }
   }
   i2 = HEAP32[i17 >> 2] | 0;
  }
  i1 = i12 + (HEAP32[i21 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i17 >> 2] = i3;
  if (!i2) break;
  i2 = HEAP32[i19 >> 2] | 0;
  i12 = i1;
  i5 = i1;
  i1 = i11 + i18 | 0;
 }
 HEAP32[i26 >> 2] = i1;
 return;
}

function __ZNSt3__110__stdinbufIcE9__getcharEb(i11, i14) {
 i11 = i11 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i13 = i15 + 16 | 0;
 i12 = i15 + 8 | 0;
 i8 = i15 + 4 | 0;
 i9 = i15;
 i3 = i11 + 52 | 0;
 L1 : do if (HEAP8[i3 >> 0] | 0) {
  i2 = i11 + 48 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i14) {
   HEAP32[i2 >> 2] = -1;
   HEAP8[i3 >> 0] = 0;
  }
 } else {
  i1 = HEAP32[i11 + 44 >> 2] | 0;
  i1 = (i1 | 0) > 1 ? i1 : 1;
  i10 = i11 + 32 | 0;
  if ((i1 | 0) > 0) {
   i3 = 0;
   do {
    i2 = _getc(HEAP32[i10 >> 2] | 0) | 0;
    if ((i2 | 0) == -1) {
     i1 = -1;
     break L1;
    }
    HEAP8[i13 + i3 >> 0] = i2;
    i3 = i3 + 1 | 0;
   } while ((i3 | 0) < (i1 | 0));
  }
  L8 : do if (!(HEAP8[i11 + 53 >> 0] | 0)) {
   i5 = i11 + 40 | 0;
   i6 = i11 + 36 | 0;
   i7 = i12 + 1 | 0;
   L10 : while (1) {
    i16 = HEAP32[i5 >> 2] | 0;
    i3 = i16;
    i2 = HEAP32[i3 >> 2] | 0;
    i3 = HEAP32[i3 + 4 >> 2] | 0;
    i17 = HEAP32[i6 >> 2] | 0;
    i4 = i13 + i1 | 0;
    switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 16 >> 2] & 31](i17, i16, i13, i4, i8, i12, i7, i9) | 0) {
    case 2:
     {
      i1 = -1;
      break L1;
     }
    case 3:
     break L10;
    case 1:
     break;
    default:
     break L8;
    }
    i17 = HEAP32[i5 >> 2] | 0;
    HEAP32[i17 >> 2] = i2;
    HEAP32[i17 + 4 >> 2] = i3;
    if ((i1 | 0) == 8) {
     i1 = -1;
     break L1;
    }
    i2 = _getc(HEAP32[i10 >> 2] | 0) | 0;
    if ((i2 | 0) == -1) {
     i1 = -1;
     break L1;
    }
    HEAP8[i4 >> 0] = i2;
    i1 = i1 + 1 | 0;
   }
   HEAP8[i12 >> 0] = HEAP8[i13 >> 0] | 0;
  } else HEAP8[i12 >> 0] = HEAP8[i13 >> 0] | 0; while (0);
  if (i14) {
   i1 = HEAP8[i12 >> 0] | 0;
   HEAP32[i11 + 48 >> 2] = i1 & 255;
  } else {
   while (1) {
    if ((i1 | 0) <= 0) break;
    i1 = i1 + -1 | 0;
    if ((_ungetc(HEAPU8[i13 + i1 >> 0] | 0, HEAP32[i10 >> 2] | 0) | 0) == -1) {
     i1 = -1;
     break L1;
    }
   }
   i1 = HEAP8[i12 >> 0] | 0;
  }
  i1 = i1 & 255;
 } while (0);
 STACKTOP = i15;
 return i1 | 0;
}

function _Emscripten_JoyStickConnected(i1, i7, i2) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i6 = i8;
 i3 = i7 + 1300 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 L1 : do if ((i2 | 0) >= 0 ? (i4 = HEAP32[3481] | 0, (i4 | 0) != 0) : 0) {
  i1 = i4;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) break;
   i1 = HEAP32[i1 + 1320 >> 2] | 0;
   if (!i1) break L1;
  }
  STACKTOP = i8;
  return 1;
 } while (0);
 i5 = _SDL_malloc(1328) | 0;
 do if (i5) {
  _SDL_memset(i5, 0, 1328) | 0;
  HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
  i4 = _SDL_strdup(i7 + 1304 | 0) | 0;
  i1 = i5 + 4 | 0;
  HEAP32[i1 >> 2] = i4;
  if (!i4) {
   _SDL_free(i5);
   break;
  }
  i4 = _SDL_strdup(i7 + 1368 | 0) | 0;
  HEAP32[i5 + 8 >> 2] = i4;
  if (!i4) {
   _SDL_free(HEAP32[i1 >> 2] | 0);
   _SDL_free(i5);
   break;
  }
  i1 = i5 + 24 | 0;
  HEAP32[i1 >> 2] = HEAP32[i7 + 8 >> 2];
  i4 = i5 + 20 | 0;
  HEAP32[i4 >> 2] = HEAP32[i7 + 12 >> 2];
  i3 = HEAP32[3482] | 0;
  HEAP32[3482] = i3 + 1;
  HEAP32[i5 + 12 >> 2] = i3;
  HEAPF64[i5 + 32 >> 3] = +HEAPF64[i7 >> 3];
  if ((HEAP32[i1 >> 2] | 0) > 0) {
   i2 = i5 + 40 | 0;
   i3 = 0;
   do {
    HEAPF64[i2 + (i3 << 3) >> 3] = +HEAPF64[i7 + 16 + (i3 << 3) >> 3];
    i3 = i3 + 1 | 0;
   } while ((i3 | 0) < (HEAP32[i1 >> 2] | 0));
  }
  if ((HEAP32[i4 >> 2] | 0) > 0) {
   i1 = i5 + 552 | 0;
   i2 = i5 + 1064 | 0;
   i3 = 0;
   do {
    HEAPF64[i1 + (i3 << 3) >> 3] = +HEAPF64[i7 + 528 + (i3 << 3) >> 3];
    HEAP32[i2 + (i3 << 2) >> 2] = HEAP32[i7 + 1040 + (i3 << 2) >> 2];
    i3 = i3 + 1 | 0;
   } while ((i3 | 0) < (HEAP32[i4 >> 2] | 0));
  }
  i1 = HEAP32[3483] | 0;
  if (!i1) {
   HEAP32[3483] = i5;
   HEAP32[3481] = i5;
  } else {
   HEAP32[i1 + 1320 >> 2] = i5;
   HEAP32[3483] = i5;
  }
  HEAP32[3484] = (HEAP32[3484] | 0) + 1;
  HEAP32[i6 >> 2] = 1541;
  if ((_SDL_EventState(1541, -1) | 0) << 24 >> 24 == 1) {
   HEAP32[i6 + 8 >> 2] = (HEAP32[3484] | 0) + -1;
   i1 = HEAP32[814] | 0;
   if ((i1 | 0) != 0 ? (FUNCTION_TABLE_iii[i1 & 63](HEAP32[815] | 0, i6) | 0) == 0 : 0) break;
   _SDL_PushEvent(i6) | 0;
  }
 } while (0);
 STACKTOP = i8;
 return 1;
}

function _SDL_Blit_RGBA8888_ARGB8888_Modulate_Scale(i25) {
 i25 = i25 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i26 = 0, i27 = 0;
 i1 = HEAP32[i25 + 52 >> 2] | 0;
 i23 = HEAPU8[i25 + 60 >> 0] | 0;
 i24 = HEAPU8[i25 + 61 >> 0] | 0;
 i15 = HEAPU8[i25 + 62 >> 0] | 0;
 i16 = HEAPU8[i25 + 63 >> 0] | 0;
 i17 = i25 + 28 | 0;
 i26 = HEAP32[i17 >> 2] | 0;
 i18 = (HEAP32[i25 + 8 >> 2] << 16 | 0) / (i26 | 0) | 0;
 i19 = i25 + 24 | 0;
 i2 = HEAP32[i19 >> 2] | 0;
 i20 = (HEAP32[i25 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 i3 = i26 + -1 | 0;
 HEAP32[i17 >> 2] = i3;
 if (!i26) return;
 i26 = i25 + 20 | 0;
 i21 = i25 + 32 | 0;
 i22 = (i1 & 1 | 0) == 0;
 i13 = (i1 & 2 | 0) == 0;
 i14 = i25 + 12 | 0;
 i5 = HEAP32[i26 >> 2] | 0;
 i12 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i11 = i1 + -65536 | 0;
   i10 = i11 >>> 16;
   i11 = i11 - (i10 << 16) | 0;
   i4 = i4 + 1 + i10 | 0;
  } else i11 = i1;
  if (!i2) i2 = i3; else {
   i1 = 65536;
   i3 = 0;
   i6 = -1;
   while (1) {
    i2 = i2 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i3 = i1 + -65536 | 0;
     i1 = i3 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i3 - (i1 << 16) | 0;
     i3 = (HEAP32[i25 >> 2] | 0) + ((Math_imul(HEAP32[i14 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i10 = HEAP32[i3 >> 2] | 0;
    i8 = i10 >>> 24;
    i9 = i10 >>> 16 & 255;
    i7 = i10 >>> 8 & 255;
    if (!i22) {
     i7 = ((Math_imul(i7, i15) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i24) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i23) | 0) >>> 0) / 255 | 0;
    }
    i27 = ((Math_imul(i10 & 255, i16) | 0) >>> 0) / 255 | 0;
    HEAP32[i5 >> 2] = i7 | i9 << 8 | i8 << 16 | (i13 ? i10 : i27) << 24;
    if (!i2) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i20 | 0;
    }
   }
   i2 = HEAP32[i17 >> 2] | 0;
  }
  i1 = i12 + (HEAP32[i21 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i17 >> 2] = i3;
  if (!i2) break;
  i2 = HEAP32[i19 >> 2] | 0;
  i12 = i1;
  i5 = i1;
  i1 = i11 + i18 | 0;
 }
 HEAP32[i26 >> 2] = i1;
 return;
}

function _SDL_Blit_BGRA8888_ARGB8888_Modulate_Scale(i25) {
 i25 = i25 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i26 = 0, i27 = 0;
 i1 = HEAP32[i25 + 52 >> 2] | 0;
 i23 = HEAPU8[i25 + 60 >> 0] | 0;
 i24 = HEAPU8[i25 + 61 >> 0] | 0;
 i15 = HEAPU8[i25 + 62 >> 0] | 0;
 i16 = HEAPU8[i25 + 63 >> 0] | 0;
 i17 = i25 + 28 | 0;
 i26 = HEAP32[i17 >> 2] | 0;
 i18 = (HEAP32[i25 + 8 >> 2] << 16 | 0) / (i26 | 0) | 0;
 i19 = i25 + 24 | 0;
 i2 = HEAP32[i19 >> 2] | 0;
 i20 = (HEAP32[i25 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 i3 = i26 + -1 | 0;
 HEAP32[i17 >> 2] = i3;
 if (!i26) return;
 i26 = i25 + 20 | 0;
 i21 = i25 + 32 | 0;
 i22 = (i1 & 1 | 0) == 0;
 i13 = (i1 & 2 | 0) == 0;
 i14 = i25 + 12 | 0;
 i5 = HEAP32[i26 >> 2] | 0;
 i12 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i11 = i1 + -65536 | 0;
   i10 = i11 >>> 16;
   i11 = i11 - (i10 << 16) | 0;
   i4 = i4 + 1 + i10 | 0;
  } else i11 = i1;
  if (!i2) i2 = i3; else {
   i1 = 65536;
   i3 = 0;
   i6 = -1;
   while (1) {
    i2 = i2 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i3 = i1 + -65536 | 0;
     i1 = i3 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i3 - (i1 << 16) | 0;
     i3 = (HEAP32[i25 >> 2] | 0) + ((Math_imul(HEAP32[i14 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i10 = HEAP32[i3 >> 2] | 0;
    i7 = i10 >>> 24;
    i9 = i10 >>> 16 & 255;
    i8 = i10 >>> 8 & 255;
    if (!i22) {
     i7 = ((Math_imul(i7, i15) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i24) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i23) | 0) >>> 0) / 255 | 0;
    }
    i27 = ((Math_imul(i10 & 255, i16) | 0) >>> 0) / 255 | 0;
    HEAP32[i5 >> 2] = i7 | i9 << 8 | i8 << 16 | (i13 ? i10 : i27) << 24;
    if (!i2) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i20 | 0;
    }
   }
   i2 = HEAP32[i17 >> 2] | 0;
  }
  i1 = i12 + (HEAP32[i21 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i17 >> 2] = i3;
  if (!i2) break;
  i2 = HEAP32[i19 >> 2] | 0;
  i12 = i1;
  i5 = i1;
  i1 = i11 + i18 | 0;
 }
 HEAP32[i26 >> 2] = i1;
 return;
}

function _SDL_BlendLines(i17, i13, i8, i16, i19, i18, i15, i14) {
 i17 = i17 | 0;
 i13 = i13 | 0;
 i8 = i8 | 0;
 i16 = i16 | 0;
 i19 = i19 | 0;
 i18 = i18 | 0;
 i15 = i15 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i20 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i20 + 24 | 0;
 i11 = i20 + 20 | 0;
 i10 = i20 + 16 | 0;
 i12 = i20 + 12 | 0;
 if (!i17) {
  i19 = _SDL_SetError(38438, i20) | 0;
  STACKTOP = i20;
  return i19 | 0;
 }
 i2 = HEAP32[i17 + 4 >> 2] | 0;
 L5 : do switch (HEAPU8[i2 + 9 >> 0] | 0 | 0) {
 case 2:
  {
   i3 = HEAP32[i2 + 12 >> 2] | 0;
   i3 = (i3 | 0) == 31744 ? 3 : (i3 | 0) == 63488 ? 1 : 2;
   break;
  }
 case 4:
  {
   i1 = (HEAP32[i2 + 24 >> 2] | 0) != 0;
   if ((HEAP32[i2 + 12 >> 2] | 0) == 16711680) {
    i3 = i1 ? 4 : 5;
    break L5;
   } else {
    i3 = i1 ? 6 : 7;
    break L5;
   }
  }
 default:
  {
   i19 = _SDL_SetError(38488, i20 + 8 | 0) | 0;
   STACKTOP = i20;
   return i19 | 0;
  }
 } while (0);
 if ((i8 | 0) > 1) {
  i4 = i17 + 36 | 0;
  i7 = 1;
  do {
   i1 = i7 + -1 | 0;
   HEAP32[i9 >> 2] = HEAP32[i13 + (i1 << 3) >> 2];
   HEAP32[i11 >> 2] = HEAP32[i13 + (i1 << 3) + 4 >> 2];
   i1 = i13 + (i7 << 3) | 0;
   HEAP32[i10 >> 2] = HEAP32[i1 >> 2];
   i2 = i13 + (i7 << 3) + 4 | 0;
   HEAP32[i12 >> 2] = HEAP32[i2 >> 2];
   if (_SDL_IntersectRectAndLine(i4, i9, i11, i10, i12) | 0) {
    i5 = HEAP32[i10 >> 2] | 0;
    i6 = HEAP32[i12 >> 2] | 0;
    if ((i5 | 0) == (HEAP32[i1 >> 2] | 0)) i1 = (i6 | 0) != (HEAP32[i2 >> 2] | 0); else i1 = 1;
    FUNCTION_TABLE_viiiiiiiiiii[i3 & 7](i17, HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0, i5, i6, i16, i19, i18, i15, i14, i1 & 1);
   }
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != (i8 | 0));
 }
 i1 = i8 + -1 | 0;
 i2 = HEAP32[i13 + (i1 << 3) >> 2] | 0;
 if ((HEAP32[i13 >> 2] | 0) == (i2 | 0)) {
  i1 = HEAP32[i13 + (i1 << 3) + 4 >> 2] | 0;
  if ((HEAP32[i13 + 4 >> 2] | 0) == (i1 | 0)) {
   i19 = 0;
   STACKTOP = i20;
   return i19 | 0;
  }
 } else i1 = HEAP32[i13 + (i1 << 3) + 4 >> 2] | 0;
 _SDL_BlendPoint(i17, i2, i1, i16, i19, i18, i15, i14) | 0;
 i19 = 0;
 STACKTOP = i20;
 return i19 | 0;
}

function _SW_RenderDrawPoints(i12, i11, i13) {
 i12 = i12 | 0;
 i11 = i11 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, d3 = 0.0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i14 = 0;
 i14 = STACKTOP;
 i6 = i12 + 316 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if (!i1) {
  i2 = i7 + 4 | 0;
  i9 = HEAP32[i2 >> 2] | 0;
  HEAP32[i7 >> 2] = i9;
  i1 = i9;
  if (!i9) {
   i1 = _SDL_GetWindowSurface(HEAP32[i12 + 188 >> 2] | 0) | 0;
   do if (((i1 | 0) != 0 ? (HEAP32[i2 >> 2] = i1, HEAP32[i7 >> 2] = i1, i8 = HEAP32[HEAP32[i6 >> 2] >> 2] | 0, (i8 | 0) != 0) : 0) ? (_SDL_SetClipRect(i8, i12 + 212 | 0) | 0, i5 = HEAP32[HEAP32[i6 >> 2] >> 2] | 0, (i5 | 0) != 0) : 0) if (!(HEAP32[i12 + 276 >> 2] | 0)) {
    _SDL_SetClipRect(i5, 0) | 0;
    break;
   } else {
    _SDL_SetClipRect(i5, i12 + 244 | 0) | 0;
    break;
   } while (0);
   i1 = HEAP32[i7 >> 2] | 0;
  }
  if (!i1) {
   i13 = -1;
   STACKTOP = i14;
   return i13 | 0;
  }
 }
 i9 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (i13 << 3) | 0) + 15 & -16) | 0;
 i2 = HEAP32[i12 + 212 >> 2] | 0;
 if ((i2 | 0) == 0 ? (HEAP32[i12 + 216 >> 2] | 0) == 0 : 0) {
  if ((i13 | 0) > 0) {
   i5 = 0;
   do {
    HEAP32[i9 + (i5 << 3) >> 2] = ~~+HEAPF32[i11 + (i5 << 3) >> 2];
    HEAP32[i9 + (i5 << 3) + 4 >> 2] = ~~+HEAPF32[i11 + (i5 << 3) + 4 >> 2];
    i5 = i5 + 1 | 0;
   } while ((i5 | 0) != (i13 | 0));
  }
 } else i10 = 14;
 if ((i10 | 0) == 14 ? (i13 | 0) > 0 : 0) {
  d3 = +(i2 | 0);
  d4 = +(HEAP32[i12 + 216 >> 2] | 0);
  i2 = 0;
  do {
   HEAP32[i9 + (i2 << 3) >> 2] = ~~(d3 + +HEAPF32[i11 + (i2 << 3) >> 2]);
   HEAP32[i9 + (i2 << 3) + 4 >> 2] = ~~(d4 + +HEAPF32[i11 + (i2 << 3) + 4 >> 2]);
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i13 | 0));
 }
 i5 = HEAP32[i12 + 312 >> 2] | 0;
 i6 = HEAP8[i12 + 308 >> 0] | 0;
 i7 = HEAP8[i12 + 309 >> 0] | 0;
 i8 = HEAP8[i12 + 310 >> 0] | 0;
 i2 = HEAP8[i12 + 311 >> 0] | 0;
 if (!i5) {
  i13 = _SDL_DrawPoints(i1, i9, i13, _SDL_MapRGBA(HEAP32[i1 + 4 >> 2] | 0, i6, i7, i8, i2) | 0) | 0;
  STACKTOP = i14;
  return i13 | 0;
 } else {
  i13 = _SDL_BlendPoints(i1, i9, i13, i5, i6, i7, i8, i2) | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 return 0;
}

function _SW_RenderDrawLines(i12, i11, i13) {
 i12 = i12 | 0;
 i11 = i11 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, d3 = 0.0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i14 = 0;
 i14 = STACKTOP;
 i6 = i12 + 316 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if (!i1) {
  i2 = i7 + 4 | 0;
  i9 = HEAP32[i2 >> 2] | 0;
  HEAP32[i7 >> 2] = i9;
  i1 = i9;
  if (!i9) {
   i1 = _SDL_GetWindowSurface(HEAP32[i12 + 188 >> 2] | 0) | 0;
   do if (((i1 | 0) != 0 ? (HEAP32[i2 >> 2] = i1, HEAP32[i7 >> 2] = i1, i8 = HEAP32[HEAP32[i6 >> 2] >> 2] | 0, (i8 | 0) != 0) : 0) ? (_SDL_SetClipRect(i8, i12 + 212 | 0) | 0, i5 = HEAP32[HEAP32[i6 >> 2] >> 2] | 0, (i5 | 0) != 0) : 0) if (!(HEAP32[i12 + 276 >> 2] | 0)) {
    _SDL_SetClipRect(i5, 0) | 0;
    break;
   } else {
    _SDL_SetClipRect(i5, i12 + 244 | 0) | 0;
    break;
   } while (0);
   i1 = HEAP32[i7 >> 2] | 0;
  }
  if (!i1) {
   i13 = -1;
   STACKTOP = i14;
   return i13 | 0;
  }
 }
 i9 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (i13 << 3) | 0) + 15 & -16) | 0;
 i2 = HEAP32[i12 + 212 >> 2] | 0;
 if ((i2 | 0) == 0 ? (HEAP32[i12 + 216 >> 2] | 0) == 0 : 0) {
  if ((i13 | 0) > 0) {
   i5 = 0;
   do {
    HEAP32[i9 + (i5 << 3) >> 2] = ~~+HEAPF32[i11 + (i5 << 3) >> 2];
    HEAP32[i9 + (i5 << 3) + 4 >> 2] = ~~+HEAPF32[i11 + (i5 << 3) + 4 >> 2];
    i5 = i5 + 1 | 0;
   } while ((i5 | 0) != (i13 | 0));
  }
 } else i10 = 14;
 if ((i10 | 0) == 14 ? (i13 | 0) > 0 : 0) {
  d3 = +(i2 | 0);
  d4 = +(HEAP32[i12 + 216 >> 2] | 0);
  i2 = 0;
  do {
   HEAP32[i9 + (i2 << 3) >> 2] = ~~(d3 + +HEAPF32[i11 + (i2 << 3) >> 2]);
   HEAP32[i9 + (i2 << 3) + 4 >> 2] = ~~(d4 + +HEAPF32[i11 + (i2 << 3) + 4 >> 2]);
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i13 | 0));
 }
 i5 = HEAP32[i12 + 312 >> 2] | 0;
 i6 = HEAP8[i12 + 308 >> 0] | 0;
 i7 = HEAP8[i12 + 309 >> 0] | 0;
 i8 = HEAP8[i12 + 310 >> 0] | 0;
 i2 = HEAP8[i12 + 311 >> 0] | 0;
 if (!i5) {
  i13 = _SDL_DrawLines(i1, i9, i13, _SDL_MapRGBA(HEAP32[i1 + 4 >> 2] | 0, i6, i7, i8, i2) | 0) | 0;
  STACKTOP = i14;
  return i13 | 0;
 } else {
  i13 = _SDL_BlendLines(i1, i9, i13, i5, i6, i7, i8, i2) | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 return 0;
}

function _Color16DitherYV12Mod1X(i18, i20, i5, i2, i3, i7, i4, i19, i6) {
 i18 = i18 | 0;
 i20 = i20 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 i19 = i19 | 0;
 i6 = i6 | 0;
 var i1 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i16 = (i19 | 0) / 2 | 0;
 i1 = (i6 << 1) + i19 | 0;
 if ((i4 + 1 | 0) >>> 0 < 3 | (i19 + 1 | 0) >>> 0 < 3) return;
 i15 = i16 << 1;
 i17 = i15 + i19 | 0;
 i22 = i15 + i19 | 0;
 i21 = i15 + i1 | 0;
 i15 = i15 + i1 | 0;
 i14 = i5;
 i13 = (i4 | 0) / 2 | 0;
 i11 = i5;
 i12 = i7;
 i8 = i7 + (i6 + i19 << 1) | 0;
 while (1) {
  i13 = i13 + -1 | 0;
  i1 = i14;
  i4 = i2;
  i5 = i3;
  i3 = i3 + i16 | 0;
  i6 = i11 + i19 | 0;
  i7 = i12;
  i9 = i8;
  i10 = i16;
  while (1) {
   i10 = i10 + -1 | 0;
   i26 = HEAPU8[i4 >> 0] | 0;
   i25 = (HEAP32[i18 + (i26 << 2) >> 2] | 0) + 256 | 0;
   i23 = HEAPU8[i5 >> 0] | 0;
   i26 = (HEAP32[i18 + ((i26 | 256) << 2) >> 2] | 0) + 1024 + (HEAP32[i18 + ((i23 | 512) << 2) >> 2] | 0) | 0;
   i23 = (HEAP32[i18 + ((i23 | 768) << 2) >> 2] | 0) + 1792 | 0;
   i24 = HEAPU8[i1 >> 0] | 0;
   HEAP16[i7 >> 1] = HEAP32[i20 + (i24 + i26 << 2) >> 2] | HEAP32[i20 + (i24 + i25 << 2) >> 2] | HEAP32[i20 + (i24 + i23 << 2) >> 2];
   i24 = HEAPU8[i1 + 1 >> 0] | 0;
   HEAP16[i7 + 2 >> 1] = HEAP32[i20 + (i24 + i26 << 2) >> 2] | HEAP32[i20 + (i24 + i25 << 2) >> 2] | HEAP32[i20 + (i24 + i23 << 2) >> 2];
   i24 = HEAPU8[i6 >> 0] | 0;
   HEAP16[i9 >> 1] = HEAP32[i20 + (i24 + i26 << 2) >> 2] | HEAP32[i20 + (i24 + i25 << 2) >> 2] | HEAP32[i20 + (i24 + i23 << 2) >> 2];
   i24 = HEAPU8[i6 + 1 >> 0] | 0;
   HEAP16[i9 + 2 >> 1] = HEAP32[i20 + (i24 + i26 << 2) >> 2] | HEAP32[i20 + (i24 + i25 << 2) >> 2] | HEAP32[i20 + (i24 + i23 << 2) >> 2];
   if (!i10) break; else {
    i1 = i1 + 2 | 0;
    i4 = i4 + 1 | 0;
    i5 = i5 + 1 | 0;
    i6 = i6 + 2 | 0;
    i7 = i7 + 4 | 0;
    i9 = i9 + 4 | 0;
   }
  }
  if (!i13) break; else {
   i2 = i2 + i16 | 0;
   i14 = i14 + i22 | 0;
   i11 = i11 + i17 | 0;
   i12 = i12 + (i21 << 1) | 0;
   i8 = i8 + (i15 << 1) | 0;
  }
 }
 return;
}

function _SW_CreateRendererForSurface(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!i1) {
  _SDL_SetError(38806, i7) | 0;
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i6 = _SDL_calloc(1, 320) | 0;
 if (!i6) {
  _SDL_Error(0) | 0;
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i4 = _SDL_calloc(1, 8) | 0;
 if (!i4) {
  _SDL_free(HEAP32[i6 + 316 >> 2] | 0);
  _SDL_free(i6);
  _SDL_Error(0) | 0;
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 HEAP32[i4 >> 2] = i1;
 i5 = i4 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 + 4 >> 2] = 41;
 HEAP32[i6 + 8 >> 2] = 26;
 HEAP32[i6 + 12 >> 2] = 23;
 HEAP32[i6 + 16 >> 2] = 24;
 HEAP32[i6 + 20 >> 2] = 25;
 HEAP32[i6 + 24 >> 2] = 26;
 HEAP32[i6 + 28 >> 2] = 21;
 HEAP32[i6 + 36 >> 2] = 22;
 HEAP32[i6 + 40 >> 2] = 42;
 HEAP32[i6 + 44 >> 2] = 27;
 HEAP32[i6 + 48 >> 2] = 74;
 HEAP32[i6 + 52 >> 2] = 75;
 HEAP32[i6 + 56 >> 2] = 76;
 HEAP32[i6 + 60 >> 2] = 27;
 HEAP32[i6 + 64 >> 2] = 28;
 HEAP32[i6 + 68 >> 2] = 29;
 HEAP32[i6 + 72 >> 2] = 10;
 HEAP32[i6 + 76 >> 2] = 1;
 HEAP32[i6 + 80 >> 2] = 23;
 HEAP32[i6 + 84 >> 2] = 271;
 HEAP32[i6 + 88 >> 2] = 43;
 HEAP32[i6 + 92 >> 2] = 272;
 i1 = i6 + 104 | 0;
 i2 = 3368;
 i3 = i1 + 84 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 i2 = i6 + 316 | 0;
 HEAP32[i2 >> 2] = i4;
 if (HEAP32[i4 >> 2] | 0) {
  STACKTOP = i7;
  return i6 | 0;
 }
 i3 = HEAP32[i5 >> 2] | 0;
 HEAP32[i4 >> 2] = i3;
 if (i3) {
  STACKTOP = i7;
  return i6 | 0;
 }
 i1 = _SDL_GetWindowSurface(HEAP32[i6 + 188 >> 2] | 0) | 0;
 if (!i1) {
  STACKTOP = i7;
  return i6 | 0;
 }
 HEAP32[i5 >> 2] = i1;
 HEAP32[i4 >> 2] = i1;
 i1 = HEAP32[HEAP32[i2 >> 2] >> 2] | 0;
 if (!i1) {
  STACKTOP = i7;
  return i6 | 0;
 }
 _SDL_SetClipRect(i1, i6 + 212 | 0) | 0;
 i1 = HEAP32[HEAP32[i2 >> 2] >> 2] | 0;
 if (!i1) {
  STACKTOP = i7;
  return i6 | 0;
 }
 if (!(HEAP32[i6 + 276 >> 2] | 0)) {
  _SDL_SetClipRect(i1, 0) | 0;
  STACKTOP = i7;
  return i6 | 0;
 } else {
  _SDL_SetClipRect(i1, i6 + 244 | 0) | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 return 0;
}

function __ZNSt3__110__stdinbufIwE9__getcharEb(i11, i14) {
 i11 = i11 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i13 = i15 + 16 | 0;
 i12 = i15 + 8 | 0;
 i8 = i15 + 4 | 0;
 i9 = i15;
 i3 = i11 + 52 | 0;
 L1 : do if (HEAP8[i3 >> 0] | 0) {
  i2 = i11 + 48 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i14) {
   HEAP32[i2 >> 2] = -1;
   HEAP8[i3 >> 0] = 0;
  }
 } else {
  i1 = HEAP32[i11 + 44 >> 2] | 0;
  i1 = (i1 | 0) > 1 ? i1 : 1;
  i10 = i11 + 32 | 0;
  if ((i1 | 0) > 0) {
   i3 = 0;
   do {
    i2 = _getc(HEAP32[i10 >> 2] | 0) | 0;
    if ((i2 | 0) == -1) {
     i1 = -1;
     break L1;
    }
    HEAP8[i13 + i3 >> 0] = i2;
    i3 = i3 + 1 | 0;
   } while ((i3 | 0) < (i1 | 0));
  }
  L8 : do if (!(HEAP8[i11 + 53 >> 0] | 0)) {
   i5 = i11 + 40 | 0;
   i6 = i11 + 36 | 0;
   i7 = i12 + 4 | 0;
   L10 : while (1) {
    i16 = HEAP32[i5 >> 2] | 0;
    i3 = i16;
    i2 = HEAP32[i3 >> 2] | 0;
    i3 = HEAP32[i3 + 4 >> 2] | 0;
    i17 = HEAP32[i6 >> 2] | 0;
    i4 = i13 + i1 | 0;
    switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 16 >> 2] & 31](i17, i16, i13, i4, i8, i12, i7, i9) | 0) {
    case 2:
     {
      i1 = -1;
      break L1;
     }
    case 3:
     break L10;
    case 1:
     break;
    default:
     break L8;
    }
    i17 = HEAP32[i5 >> 2] | 0;
    HEAP32[i17 >> 2] = i2;
    HEAP32[i17 + 4 >> 2] = i3;
    if ((i1 | 0) == 8) {
     i1 = -1;
     break L1;
    }
    i2 = _getc(HEAP32[i10 >> 2] | 0) | 0;
    if ((i2 | 0) == -1) {
     i1 = -1;
     break L1;
    }
    HEAP8[i4 >> 0] = i2;
    i1 = i1 + 1 | 0;
   }
   HEAP32[i12 >> 2] = HEAP8[i13 >> 0];
  } else HEAP32[i12 >> 2] = HEAP8[i13 >> 0]; while (0);
  if (i14) {
   i1 = HEAP32[i12 >> 2] | 0;
   HEAP32[i11 + 48 >> 2] = i1;
   break;
  }
  while (1) {
   if ((i1 | 0) <= 0) break;
   i1 = i1 + -1 | 0;
   if ((_ungetc(HEAP8[i13 + i1 >> 0] | 0, HEAP32[i10 >> 2] | 0) | 0) == -1) {
    i1 = -1;
    break L1;
   }
  }
  i1 = HEAP32[i12 >> 2] | 0;
 } while (0);
 STACKTOP = i15;
 return i1 | 0;
}

function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i7, i13, i11, i12, i14, i3, i2, i4, i5, i8) {
 i7 = i7 | 0;
 i13 = i13 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i14 = i14 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 var i1 = 0, i6 = 0, i9 = 0, i10 = 0;
 i9 = HEAP32[i12 >> 2] | 0;
 i10 = (i9 | 0) == (i11 | 0);
 do if (i10) {
  i1 = (HEAP8[i8 + 24 >> 0] | 0) == i7 << 24 >> 24;
  if (!i1 ? (HEAP8[i8 + 25 >> 0] | 0) != i7 << 24 >> 24 : 0) {
   i6 = 5;
   break;
  }
  HEAP32[i12 >> 2] = i11 + 1;
  HEAP8[i11 >> 0] = i1 ? 43 : 45;
  HEAP32[i14 >> 2] = 0;
  i1 = 0;
 } else i6 = 5; while (0);
 L6 : do if ((i6 | 0) == 5) {
  i6 = HEAP8[i2 >> 0] | 0;
  if (i7 << 24 >> 24 == i3 << 24 >> 24 ? (((i6 & 1) == 0 ? (i6 & 255) >>> 1 : HEAP32[i2 + 4 >> 2] | 0) | 0) != 0 : 0) {
   i1 = HEAP32[i5 >> 2] | 0;
   if ((i1 - i4 | 0) >= 160) {
    i1 = 0;
    break;
   }
   i13 = HEAP32[i14 >> 2] | 0;
   HEAP32[i5 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i13;
   HEAP32[i14 >> 2] = 0;
   i1 = 0;
   break;
  }
  i2 = i8 + 26 | 0;
  i1 = i8;
  while (1) {
   if ((HEAP8[i1 >> 0] | 0) == i7 << 24 >> 24) break;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) == (i2 | 0)) {
    i1 = i2;
    break;
   }
  }
  i1 = i1 - i8 | 0;
  if ((i1 | 0) > 23) i1 = -1; else {
   switch (i13 | 0) {
   case 10:
   case 8:
    {
     if ((i1 | 0) >= (i13 | 0)) {
      i1 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if ((i1 | 0) >= 22) {
      if (i10) {
       i1 = -1;
       break L6;
      }
      if ((i9 - i11 | 0) >= 3) {
       i1 = -1;
       break L6;
      }
      if ((HEAP8[i9 + -1 >> 0] | 0) != 48) {
       i1 = -1;
       break L6;
      }
      HEAP32[i14 >> 2] = 0;
      i1 = HEAP8[61569 + i1 >> 0] | 0;
      HEAP32[i12 >> 2] = i9 + 1;
      HEAP8[i9 >> 0] = i1;
      i1 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   i1 = HEAP8[61569 + i1 >> 0] | 0;
   HEAP32[i12 >> 2] = i9 + 1;
   HEAP8[i9 >> 0] = i1;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
   i1 = 0;
  }
 } while (0);
 return i1 | 0;
}

function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i7, i13, i11, i12, i14, i3, i2, i4, i5, i8) {
 i7 = i7 | 0;
 i13 = i13 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i14 = i14 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 var i1 = 0, i6 = 0, i9 = 0, i10 = 0;
 i9 = HEAP32[i12 >> 2] | 0;
 i10 = (i9 | 0) == (i11 | 0);
 do if (i10) {
  i1 = (HEAP32[i8 + 96 >> 2] | 0) == (i7 | 0);
  if (!i1 ? (HEAP32[i8 + 100 >> 2] | 0) != (i7 | 0) : 0) {
   i6 = 5;
   break;
  }
  HEAP32[i12 >> 2] = i11 + 1;
  HEAP8[i11 >> 0] = i1 ? 43 : 45;
  HEAP32[i14 >> 2] = 0;
  i1 = 0;
 } else i6 = 5; while (0);
 L6 : do if ((i6 | 0) == 5) {
  i6 = HEAP8[i2 >> 0] | 0;
  if ((i7 | 0) == (i3 | 0) ? (((i6 & 1) == 0 ? (i6 & 255) >>> 1 : HEAP32[i2 + 4 >> 2] | 0) | 0) != 0 : 0) {
   i1 = HEAP32[i5 >> 2] | 0;
   if ((i1 - i4 | 0) >= 160) {
    i1 = 0;
    break;
   }
   i13 = HEAP32[i14 >> 2] | 0;
   HEAP32[i5 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i13;
   HEAP32[i14 >> 2] = 0;
   i1 = 0;
   break;
  }
  i2 = i8 + 104 | 0;
  i1 = i8;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) == (i7 | 0)) break;
   i1 = i1 + 4 | 0;
   if ((i1 | 0) == (i2 | 0)) {
    i1 = i2;
    break;
   }
  }
  i1 = i1 - i8 | 0;
  i2 = i1 >> 2;
  if ((i1 | 0) > 92) i1 = -1; else {
   switch (i13 | 0) {
   case 10:
   case 8:
    {
     if ((i2 | 0) >= (i13 | 0)) {
      i1 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if ((i1 | 0) >= 88) {
      if (i10) {
       i1 = -1;
       break L6;
      }
      if ((i9 - i11 | 0) >= 3) {
       i1 = -1;
       break L6;
      }
      if ((HEAP8[i9 + -1 >> 0] | 0) != 48) {
       i1 = -1;
       break L6;
      }
      HEAP32[i14 >> 2] = 0;
      i1 = HEAP8[61569 + i2 >> 0] | 0;
      HEAP32[i12 >> 2] = i9 + 1;
      HEAP8[i9 >> 0] = i1;
      i1 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   i1 = HEAP8[61569 + i2 >> 0] | 0;
   HEAP32[i12 >> 2] = i9 + 1;
   HEAP8[i9 >> 0] = i1;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
   i1 = 0;
  }
 } while (0);
 return i1 | 0;
}

function _SDL_Blit_RGB888_ARGB8888_Modulate_Scale(i23) {
 i23 = i23 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0;
 i1 = HEAP32[i23 + 52 >> 2] | 0;
 i21 = HEAPU8[i23 + 60 >> 0] | 0;
 i22 = HEAPU8[i23 + 61 >> 0] | 0;
 i14 = HEAPU8[i23 + 62 >> 0] | 0;
 i2 = HEAP8[i23 + 63 >> 0] | 0;
 i15 = i23 + 28 | 0;
 i24 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i23 + 8 >> 2] << 16 | 0) / (i24 | 0) | 0;
 i17 = i23 + 24 | 0;
 i3 = HEAP32[i17 >> 2] | 0;
 i18 = (HEAP32[i23 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i4 = i24 + -1 | 0;
 HEAP32[i15 >> 2] = i4;
 if (!i24) return;
 i24 = i23 + 20 | 0;
 i19 = i23 + 32 | 0;
 i20 = (i1 & 1 | 0) == 0;
 i12 = (i1 & 2 | 0) == 0 ? -16777216 : (i2 & 255) << 24;
 i13 = i23 + 12 | 0;
 i5 = HEAP32[i24 >> 2] | 0;
 i11 = i5;
 i1 = 0;
 i2 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i9 = i1 + -65536 | 0;
   i10 = i9 >>> 16;
   i9 = i9 - (i10 << 16) | 0;
   i10 = i2 + 1 + i10 | 0;
  } else {
   i9 = i1;
   i10 = i2;
  }
  if (!i3) i2 = i4; else {
   i1 = 65536;
   i2 = 0;
   i4 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i4 = i4 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i23 >> 2] | 0) + ((Math_imul(HEAP32[i13 >> 2] | 0, i10) | 0) + (i4 << 2)) | 0;
    }
    i6 = HEAP32[i2 >> 2] | 0;
    i7 = i6 >>> 16 & 255;
    i8 = i6 >>> 8 & 255;
    i6 = i6 & 255;
    if (!i20) {
     i6 = ((Math_imul(i6, i14) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i22) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i21) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i5 >> 2] = i8 << 8 | i12 | i6 | i7 << 16;
    if (!i3) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i18 | 0;
    }
   }
   i2 = HEAP32[i15 >> 2] | 0;
  }
  i1 = i11 + (HEAP32[i19 >> 2] | 0) | 0;
  i4 = i2 + -1 | 0;
  HEAP32[i15 >> 2] = i4;
  if (!i2) break;
  i3 = HEAP32[i17 >> 2] | 0;
  i11 = i1;
  i5 = i1;
  i1 = i9 + i16 | 0;
  i2 = i10;
 }
 HEAP32[i24 >> 2] = i1;
 return;
}

function _SDL_Blit_BGR888_ARGB8888_Modulate_Scale(i23) {
 i23 = i23 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0;
 i1 = HEAP32[i23 + 52 >> 2] | 0;
 i21 = HEAPU8[i23 + 60 >> 0] | 0;
 i22 = HEAPU8[i23 + 61 >> 0] | 0;
 i14 = HEAPU8[i23 + 62 >> 0] | 0;
 i2 = HEAP8[i23 + 63 >> 0] | 0;
 i15 = i23 + 28 | 0;
 i24 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i23 + 8 >> 2] << 16 | 0) / (i24 | 0) | 0;
 i17 = i23 + 24 | 0;
 i3 = HEAP32[i17 >> 2] | 0;
 i18 = (HEAP32[i23 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i4 = i24 + -1 | 0;
 HEAP32[i15 >> 2] = i4;
 if (!i24) return;
 i24 = i23 + 20 | 0;
 i19 = i23 + 32 | 0;
 i20 = (i1 & 1 | 0) == 0;
 i12 = (i1 & 2 | 0) == 0 ? -16777216 : (i2 & 255) << 24;
 i13 = i23 + 12 | 0;
 i5 = HEAP32[i24 >> 2] | 0;
 i11 = i5;
 i1 = 0;
 i2 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i9 = i1 + -65536 | 0;
   i10 = i9 >>> 16;
   i9 = i9 - (i10 << 16) | 0;
   i10 = i2 + 1 + i10 | 0;
  } else {
   i9 = i1;
   i10 = i2;
  }
  if (!i3) i2 = i4; else {
   i1 = 65536;
   i2 = 0;
   i4 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i4 = i4 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i23 >> 2] | 0) + ((Math_imul(HEAP32[i13 >> 2] | 0, i10) | 0) + (i4 << 2)) | 0;
    }
    i7 = HEAP32[i2 >> 2] | 0;
    i6 = i7 >>> 16 & 255;
    i8 = i7 >>> 8 & 255;
    i7 = i7 & 255;
    if (!i20) {
     i6 = ((Math_imul(i6, i14) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i22) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i21) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i5 >> 2] = i8 << 8 | i12 | i6 | i7 << 16;
    if (!i3) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i18 | 0;
    }
   }
   i2 = HEAP32[i15 >> 2] | 0;
  }
  i1 = i11 + (HEAP32[i19 >> 2] | 0) | 0;
  i4 = i2 + -1 | 0;
  HEAP32[i15 >> 2] = i4;
  if (!i2) break;
  i3 = HEAP32[i17 >> 2] | 0;
  i11 = i1;
  i5 = i1;
  i1 = i9 + i16 | 0;
  i2 = i10;
 }
 HEAP32[i24 >> 2] = i1;
 return;
}

function _SDL_AudioQuit() {
 var i1 = 0, i2 = 0, i3 = 0;
 if (!(HEAP32[1535] | 0)) return;
 i1 = HEAP32[1563] | 0;
 if (i1) {
  _close_audio_device(i1);
  HEAP32[1563] = 0;
 }
 i1 = HEAP32[1564] | 0;
 if (i1) {
  _close_audio_device(i1);
  HEAP32[1564] = 0;
 }
 i1 = HEAP32[1565] | 0;
 if (i1) {
  _close_audio_device(i1);
  HEAP32[1565] = 0;
 }
 i1 = HEAP32[1566] | 0;
 if (i1) {
  _close_audio_device(i1);
  HEAP32[1566] = 0;
 }
 i1 = HEAP32[1567] | 0;
 if (i1) {
  _close_audio_device(i1);
  HEAP32[1567] = 0;
 }
 i1 = HEAP32[1568] | 0;
 if (i1) {
  _close_audio_device(i1);
  HEAP32[1568] = 0;
 }
 i1 = HEAP32[1569] | 0;
 if (i1) {
  _close_audio_device(i1);
  HEAP32[1569] = 0;
 }
 i1 = HEAP32[1570] | 0;
 if (i1) {
  _close_audio_device(i1);
  HEAP32[1570] = 0;
 }
 i1 = HEAP32[1571] | 0;
 if (i1) {
  _close_audio_device(i1);
  HEAP32[1571] = 0;
 }
 i1 = HEAP32[1572] | 0;
 if (i1) {
  _close_audio_device(i1);
  HEAP32[1572] = 0;
 }
 i1 = HEAP32[1573] | 0;
 if (i1) {
  _close_audio_device(i1);
  HEAP32[1573] = 0;
 }
 i1 = HEAP32[1574] | 0;
 if (i1) {
  _close_audio_device(i1);
  HEAP32[1574] = 0;
 }
 i1 = HEAP32[1575] | 0;
 if (i1) {
  _close_audio_device(i1);
  HEAP32[1575] = 0;
 }
 i1 = HEAP32[1576] | 0;
 if (i1) {
  _close_audio_device(i1);
  HEAP32[1576] = 0;
 }
 i1 = HEAP32[1577] | 0;
 if (i1) {
  _close_audio_device(i1);
  HEAP32[1577] = 0;
 }
 i1 = HEAP32[1578] | 0;
 if (i1) {
  _close_audio_device(i1);
  HEAP32[1578] = 0;
 }
 i1 = HEAP32[1561] | 0;
 if (i1) do {
  i3 = i1;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  if (i2) FUNCTION_TABLE_vi[HEAP32[6192 >> 2] & 511](i2);
  _SDL_free(i3);
 } while ((i1 | 0) != 0);
 HEAP32[1561] = 0;
 HEAP32[1559] = 0;
 i1 = HEAP32[1562] | 0;
 if (i1) do {
  i3 = i1;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  if (i2) FUNCTION_TABLE_vi[HEAP32[6192 >> 2] & 511](i2);
  _SDL_free(i3);
 } while ((i1 | 0) != 0);
 HEAP32[1562] = 0;
 HEAP32[1560] = 0;
 FUNCTION_TABLE_v[HEAP32[6196 >> 2] & 15]();
 _SDL_DestroyMutex(HEAP32[1556] | 0);
 _SDL_memset(6140, 0, 112) | 0;
 _SDL_memset(6252, 0, 64) | 0;
 return;
}

function _SDL_SetDisplayModeForDisplay(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i8 = i9 + 8 | 0;
 i4 = i9;
 i7 = i9 + 32 | 0;
 i5 = i9 + 12 | 0;
 if (i1) {
  HEAP32[i7 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i7 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
  HEAP32[i7 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
  if (!(HEAP32[i7 >> 2] | 0)) HEAP32[i7 >> 2] = HEAP32[i6 + 36 >> 2];
  i3 = i7 + 4 | 0;
  if (!(HEAP32[i3 >> 2] | 0)) HEAP32[i3 >> 2] = HEAP32[i6 + 40 >> 2];
  i1 = i7 + 8 | 0;
  if (!(HEAP32[i1 >> 2] | 0)) HEAP32[i1 >> 2] = HEAP32[i6 + 44 >> 2];
  i2 = i7 + 12 | 0;
  if (!(HEAP32[i2 >> 2] | 0)) HEAP32[i2 >> 2] = HEAP32[i6 + 48 >> 2];
  if (!(_SDL_GetClosestDisplayModeForDisplay(i6, i7, i7) | 0)) {
   i8 = HEAP32[i1 >> 2] | 0;
   HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i4 + 4 >> 2] = i8;
   _SDL_SetError(48177, i4) | 0;
   STACKTOP = i9;
   return;
  } else i3 = i7;
 } else {
  i3 = i6 + 16 | 0;
  HEAP32[i7 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAP32[i7 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
  HEAP32[i7 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
  i3 = i7;
 }
 i4 = i6 + 36 | 0;
 HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i5 + 16 >> 2] = HEAP32[i4 + 16 >> 2];
 if (!(_SDL_memcmp(i3, i5, 20) | 0)) {
  STACKTOP = i9;
  return;
 }
 i1 = HEAP32[3256] | 0;
 i2 = HEAP32[i1 + 20 >> 2] | 0;
 if (!i2) {
  _SDL_SetError(48126, i8) | 0;
  STACKTOP = i9;
  return;
 }
 if ((FUNCTION_TABLE_iiii[i2 & 63](i1, i6, i7) | 0) < 0) {
  STACKTOP = i9;
  return;
 };
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i4 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
 STACKTOP = i9;
 return;
}

function _SDL_GetWindowDisplayMode(i4, i6) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i8 + 24 | 0;
 i3 = i8 + 16 | 0;
 i2 = i8 + 8 | 0;
 i5 = i8 + 28 | 0;
 i1 = HEAP32[3256] | 0;
 if (!i1) {
  _SDL_SetError(41242, i8) | 0;
  i7 = -1;
  STACKTOP = i8;
  return i7 | 0;
 }
 if ((i4 | 0) != 0 ? (HEAP32[i4 >> 2] | 0) == (i1 + 248 | 0) : 0) {
  if (!i6) {
   HEAP32[i3 >> 2] = 41392;
   i7 = _SDL_SetError(41366, i3) | 0;
   STACKTOP = i8;
   return i7 | 0;
  }
  i1 = i4 + 72 | 0;
  HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i5 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i5 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
  HEAP32[i5 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
  i1 = i5 + 4 | 0;
  if (!(HEAP32[i1 >> 2] | 0)) HEAP32[i1 >> 2] = HEAP32[i4 + 64 >> 2];
  i1 = i5 + 8 | 0;
  if (!(HEAP32[i1 >> 2] | 0)) HEAP32[i1 >> 2] = HEAP32[i4 + 68 >> 2];
  i1 = _SDL_GetWindowDisplayIndex(i4) | 0;
  if ((i1 | 0) > -1) i1 = (HEAP32[(HEAP32[3256] | 0) + 240 >> 2] | 0) + (i1 * 68 | 0) | 0; else i1 = 0;
  if ((HEAP32[i4 + 48 >> 2] & 4097 | 0) != 4097) {
   i1 = _SDL_GetWindowDisplayIndex(i4) | 0;
   if ((i1 | 0) > -1) i1 = (HEAP32[(HEAP32[3256] | 0) + 240 >> 2] | 0) + (i1 * 68 | 0) | 0; else i1 = 0;
   if (!(_SDL_GetClosestDisplayModeForDisplay(i1, i5, i5) | 0)) {
    i7 = _SDL_SetError(41397, i7) | 0;
    STACKTOP = i8;
    return i7 | 0;
   }
  } else {
   i7 = i1 + 16 | 0;
   HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i5 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i5 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   HEAP32[i5 + 16 >> 2] = HEAP32[i7 + 16 >> 2];
  };
  HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i6 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i6 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
  HEAP32[i6 + 16 >> 2] = HEAP32[i5 + 16 >> 2];
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 _SDL_SetError(41324, i2) | 0;
 i7 = -1;
 STACKTOP = i8;
 return i7 | 0;
}

function _wcsrtombs(i3, i6, i1, i2) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8;
 L1 : do if (!i3) {
  i3 = HEAP32[i6 >> 2] | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  if (!i2) i1 = 0; else {
   i1 = 0;
   do {
    if (i2 >>> 0 > 127) {
     i2 = _wcrtomb(i7, i2, 0) | 0;
     if ((i2 | 0) == -1) {
      i1 = -1;
      break L1;
     }
    } else i2 = 1;
    i1 = i2 + i1 | 0;
    i3 = i3 + 4 | 0;
    i2 = HEAP32[i3 >> 2] | 0;
   } while ((i2 | 0) != 0);
  }
 } else {
  L9 : do if (i1 >>> 0 > 3) {
   i2 = i1;
   i4 = HEAP32[i6 >> 2] | 0;
   while (1) {
    i5 = HEAP32[i4 >> 2] | 0;
    if ((i5 + -1 | 0) >>> 0 > 126) {
     if (!i5) break;
     i5 = _wcrtomb(i3, i5, 0) | 0;
     if ((i5 | 0) == -1) {
      i1 = -1;
      break L1;
     }
     i3 = i3 + i5 | 0;
     i2 = i2 - i5 | 0;
    } else {
     HEAP8[i3 >> 0] = i5;
     i3 = i3 + 1 | 0;
     i2 = i2 + -1 | 0;
     i4 = HEAP32[i6 >> 2] | 0;
    }
    i4 = i4 + 4 | 0;
    HEAP32[i6 >> 2] = i4;
    if (i2 >>> 0 <= 3) break L9;
   }
   HEAP8[i3 >> 0] = 0;
   HEAP32[i6 >> 2] = 0;
   i1 = i1 - i2 | 0;
   break L1;
  } else i2 = i1; while (0);
  if (i2) {
   i4 = HEAP32[i6 >> 2] | 0;
   while (1) {
    i5 = HEAP32[i4 >> 2] | 0;
    if ((i5 + -1 | 0) >>> 0 > 126) {
     if (!i5) {
      i4 = 19;
      break;
     }
     i5 = _wcrtomb(i7, i5, 0) | 0;
     if ((i5 | 0) == -1) {
      i1 = -1;
      break L1;
     }
     if (i2 >>> 0 < i5 >>> 0) {
      i4 = 22;
      break;
     }
     _wcrtomb(i3, HEAP32[i4 >> 2] | 0, 0) | 0;
     i3 = i3 + i5 | 0;
     i2 = i2 - i5 | 0;
    } else {
     HEAP8[i3 >> 0] = i5;
     i3 = i3 + 1 | 0;
     i2 = i2 + -1 | 0;
     i4 = HEAP32[i6 >> 2] | 0;
    }
    i4 = i4 + 4 | 0;
    HEAP32[i6 >> 2] = i4;
    if (!i2) break L1;
   }
   if ((i4 | 0) == 19) {
    HEAP8[i3 >> 0] = 0;
    HEAP32[i6 >> 2] = 0;
    i1 = i1 - i2 | 0;
    break;
   } else if ((i4 | 0) == 22) {
    i1 = i1 - i2 | 0;
    break;
   }
  }
 } while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function _SDL_AddDisplayMode(i11, i14) {
 i11 = i11 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0;
 i2 = i11 + 12 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 i12 = i11 + 8 | 0;
 i13 = HEAP32[i12 >> 2] | 0;
 L1 : do if ((i13 | 0) > 0) {
  i7 = i14 + 4 | 0;
  i8 = i14 + 8 | 0;
  i9 = i14 + 12 | 0;
  i10 = 0;
  while (1) {
   i6 = i1 + (i10 * 20 | 0) | 0;
   if ((i6 | 0) == (i14 | 0)) {
    i1 = 0;
    i3 = 20;
    break;
   }
   i3 = HEAP32[i7 >> 2] | 0;
   i4 = HEAP32[i1 + (i10 * 20 | 0) + 4 >> 2] | 0;
   do if ((i4 | 0) == (i3 | 0)) {
    i3 = HEAP32[i8 >> 2] | 0;
    i4 = HEAP32[i1 + (i10 * 20 | 0) + 8 >> 2] | 0;
    if ((i4 | 0) != (i3 | 0)) {
     i3 = i4 - i3 | 0;
     break;
    }
    i4 = HEAP32[i14 >> 2] | 0;
    i5 = i4 >>> 8 & 255;
    i6 = HEAP32[i6 >> 2] | 0;
    i3 = i6 >>> 8 & 255;
    if ((i3 | 0) != (i5 | 0)) {
     i3 = i3 - i5 | 0;
     break;
    }
    i4 = i4 >>> 16 & 15;
    i3 = i6 >>> 16 & 15;
    if ((i3 | 0) == (i4 | 0)) {
     i3 = (HEAP32[i1 + (i10 * 20 | 0) + 12 >> 2] | 0) - (HEAP32[i9 >> 2] | 0) | 0;
     break;
    } else {
     i3 = i3 - i4 | 0;
     break;
    }
   } else i3 = i4 - i3 | 0; while (0);
   i10 = i10 + 1 | 0;
   if (!i3) {
    i1 = 0;
    i3 = 20;
    break;
   }
   if ((i10 | 0) >= (i13 | 0)) break L1;
  }
  if ((i3 | 0) == 20) return i1 | 0;
 } while (0);
 i3 = i11 + 4 | 0;
 do if ((i13 | 0) == (HEAP32[i3 >> 2] | 0)) {
  i1 = _SDL_realloc(i1, (i13 * 20 | 0) + 640 | 0) | 0;
  if (!i1) {
   i14 = 0;
   return i14 | 0;
  } else {
   HEAP32[i2 >> 2] = i1;
   HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 32;
   break;
  }
 } while (0);
 i13 = i1 + (i13 * 20 | 0) | 0;
 HEAP32[i13 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i13 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
 HEAP32[i13 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
 HEAP32[i13 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
 HEAP32[i13 + 16 >> 2] = HEAP32[i14 + 16 >> 2];
 i14 = (HEAP32[i12 >> 2] | 0) + 1 | 0;
 HEAP32[i12 >> 2] = i14;
 _SDL_qsort(HEAP32[i2 >> 2] | 0, i14, 20, 28);
 i14 = 1;
 return i14 | 0;
}

function _SDL_DestroyTexture(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i6;
 if ((i5 | 0) != 0 ? (HEAP32[i5 >> 2] | 0) == 37830 : 0) {
  i4 = HEAP32[i5 + 32 >> 2] | 0;
  i1 = i4 + 304 | 0;
  do if ((HEAP32[i1 >> 2] | 0) == (i5 | 0)) {
   if (((i4 | 0) != 0 ? (i2 = HEAP32[i4 + 44 >> 2] | 0, (i2 | 0) != 0) : 0) ? (HEAP32[i4 + 108 >> 2] & 8 | 0) != 0 : 0) {
    HEAP32[i1 >> 2] = 0;
    if ((FUNCTION_TABLE_iii[i2 & 63](i4, 0) | 0) < 0) break;
    i1 = i4 + 212 | 0;
    i2 = i4 + 228 | 0;
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
    HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
    HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
    HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
    i1 = i4 + 244 | 0;
    i2 = i4 + 260 | 0;
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
    HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
    HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
    HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
    HEAP32[i4 + 276 >> 2] = HEAP32[i4 + 280 >> 2];
    i1 = i4 + 292 | 0;
    i2 = HEAP32[i1 + 4 >> 2] | 0;
    i3 = i4 + 284 | 0;
    HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
    HEAP32[i3 + 4 >> 2] = i2;
    i3 = HEAP32[i4 + 208 >> 2] | 0;
    HEAP32[i4 + 196 >> 2] = HEAP32[i4 + 204 >> 2];
    HEAP32[i4 + 200 >> 2] = i3;
    if ((FUNCTION_TABLE_ii[HEAP32[i4 + 48 >> 2] & 127](i4) | 0) < 0) break;
    FUNCTION_TABLE_ii[HEAP32[i4 + 52 >> 2] & 127](i4) | 0;
    break;
   }
   _SDL_Error(4) | 0;
  } while (0);
  HEAP32[i5 >> 2] = 0;
  i2 = HEAP32[i5 + 76 >> 2] | 0;
  i3 = i2;
  i1 = i5 + 72 | 0;
  if (i2) HEAP32[i2 + 72 >> 2] = HEAP32[i1 >> 2];
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) HEAP32[i4 + 300 >> 2] = i3; else HEAP32[i1 + 76 >> 2] = i3;
  i1 = HEAP32[i5 + 36 >> 2] | 0;
  if (i1) _SDL_DestroyTexture(i1);
  i1 = HEAP32[i5 + 40 >> 2] | 0;
  if (i1) _SDL_SW_DestroyYUVTexture(i1);
  _SDL_free(HEAP32[i5 + 44 >> 2] | 0);
  FUNCTION_TABLE_vii[HEAP32[i4 + 88 >> 2] & 127](i4, i5);
  _SDL_free(i5);
  STACKTOP = i6;
  return;
 }
 _SDL_SetError(37831, i1) | 0;
 STACKTOP = i6;
 return;
}

function _SW_RenderReadPixels(i8, i9, i13, i15, i14) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 i13 = i13 | 0;
 i15 = i15 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0, i16 = 0, i17 = 0, i18 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i16 = i17;
 i2 = i17 + 8 | 0;
 i5 = i8 + 316 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if (!i1) {
  i3 = i6 + 4 | 0;
  i18 = HEAP32[i3 >> 2] | 0;
  HEAP32[i6 >> 2] = i18;
  i1 = i18;
  if (!i18) {
   i1 = _SDL_GetWindowSurface(HEAP32[i8 + 188 >> 2] | 0) | 0;
   do if (((i1 | 0) != 0 ? (HEAP32[i3 >> 2] = i1, HEAP32[i6 >> 2] = i1, i7 = HEAP32[HEAP32[i5 >> 2] >> 2] | 0, (i7 | 0) != 0) : 0) ? (_SDL_SetClipRect(i7, i8 + 212 | 0) | 0, i4 = HEAP32[HEAP32[i5 >> 2] >> 2] | 0, (i4 | 0) != 0) : 0) if (!(HEAP32[i8 + 276 >> 2] | 0)) {
    _SDL_SetClipRect(i4, 0) | 0;
    break;
   } else {
    _SDL_SetClipRect(i4, i8 + 244 | 0) | 0;
    break;
   } while (0);
   i1 = HEAP32[i6 >> 2] | 0;
  }
  if (!i1) {
   i18 = -1;
   STACKTOP = i17;
   return i18 | 0;
  } else i5 = i1;
 } else i5 = i1;
 i4 = HEAP32[i8 + 212 >> 2] | 0;
 i3 = HEAP32[i8 + 216 >> 2] | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 if (!(i4 | i3)) i2 = i9; else {
  i1 = i1 + i4 | 0;
  HEAP32[i2 >> 2] = i1;
  HEAP32[i2 + 4 >> 2] = (HEAP32[i9 + 4 >> 2] | 0) + i3;
  HEAP32[i2 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i9 + 12 >> 2];
 }
 if ((((i1 | 0) >= 0 ? (i10 = HEAP32[i2 + 8 >> 2] | 0, (i10 + i1 | 0) <= (HEAP32[i5 + 8 >> 2] | 0)) : 0) ? (i11 = HEAP32[i2 + 4 >> 2] | 0, (i11 | 0) >= 0) : 0) ? (i12 = HEAP32[i2 + 12 >> 2] | 0, (i12 + i11 | 0) <= (HEAP32[i5 + 12 >> 2] | 0)) : 0) {
  i9 = HEAP32[i5 + 4 >> 2] | 0;
  i18 = HEAP32[i5 + 16 >> 2] | 0;
  i16 = Math_imul(i18, i11) | 0;
  i18 = _SDL_ConvertPixels(i10, i12, HEAP32[i9 >> 2] | 0, (HEAP32[i5 + 20 >> 2] | 0) + ((Math_imul(HEAPU8[i9 + 9 >> 0] | 0, i1) | 0) + i16) | 0, i18, i13, i15, i14) | 0;
  STACKTOP = i17;
  return i18 | 0;
 }
 i18 = _SDL_SetError(48351, i16) | 0;
 STACKTOP = i17;
 return i18 | 0;
}

function _SDL_MouseQuit() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 if ((((HEAP32[3013] | 0) != 0 ? (i1 = _SDL_GetKeyboardFocus() | 0, (i1 | 0) != 0) : 0) ? (i2 = i1 + 48 | 0, (HEAP32[i2 >> 2] & 16384 | 0) != 0) : 0) ? (FUNCTION_TABLE_ii[HEAP32[12052 >> 2] & 127](0) | 0) != -1 : 0) HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -16385;
 _SDL_SetRelativeMouseMode(0) | 0;
 i5 = HEAP32[3031] | 0;
 HEAP32[3031] = 1;
 do if ((i5 | 0) != 1) {
  i1 = (HEAP32[3016] | 0) == 0 ? HEAP32[3029] | 0 : HEAP32[3030] | 0;
  i2 = HEAP32[3007] | 0;
  i3 = (i2 | 0) == 0;
  if ((i1 | 0) != 0 & (HEAP32[3024] | 0) == 0) {
   if (i3) break;
   FUNCTION_TABLE_ii[i2 & 127](i1) | 0;
   break;
  } else {
   if (i3) break;
   FUNCTION_TABLE_ii[i2 & 127](0) | 0;
   break;
  }
 } while (0);
 i1 = HEAP32[3028] | 0;
 if (i1) do {
  i5 = i1;
  i1 = HEAP32[i1 >> 2] | 0;
  i2 = HEAP32[3029] | 0;
  L18 : do if ((i2 | 0) != (i5 | 0)) {
   do if ((HEAP32[3030] | 0) == (i5 | 0)) {
    if (!i2) i2 = (HEAP32[3016] | 0) == 0 ? 0 : i5; else HEAP32[3030] = i2;
    i3 = HEAP32[3007] | 0;
    i4 = (i3 | 0) == 0;
    if ((i2 | 0) != 0 & (HEAP32[3031] | 0) != 0 & (HEAP32[3024] | 0) == 0) {
     if (i4) break;
     FUNCTION_TABLE_ii[i3 & 127](i2) | 0;
     break;
    } else {
     if (i4) break;
     FUNCTION_TABLE_ii[i3 & 127](0) | 0;
     break;
    }
   } while (0);
   i2 = HEAP32[3028] | 0;
   if (i2) {
    i3 = 0;
    while (1) {
     if ((i2 | 0) == (i5 | 0)) break;
     i3 = HEAP32[i2 >> 2] | 0;
     if (!i3) break L18; else {
      i4 = i2;
      i2 = i3;
      i3 = i4;
     }
    }
    i2 = HEAP32[i5 >> 2] | 0;
    if (!i3) HEAP32[3028] = i2; else HEAP32[i3 >> 2] = i2;
    i2 = HEAP32[3009] | 0;
    if (i2) FUNCTION_TABLE_vi[i2 & 511](i5);
   }
  } while (0);
 } while ((i1 | 0) != 0);
 i1 = HEAP32[3029] | 0;
 if ((i1 | 0) != 0 ? (i6 = HEAP32[3009] | 0, (i6 | 0) != 0) : 0) FUNCTION_TABLE_vi[i6 & 511](i1);
 i1 = HEAP32[3027] | 0;
 if (!i1) {
  _SDL_memset(12020, 0, 112) | 0;
  return;
 }
 _SDL_free(i1);
 _SDL_memset(12020, 0, 112) | 0;
 return;
}

function _SDL_UpdateMouseFocus(i7, i8, i9) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i10 + 4 | 0;
 i3 = i10;
 i6 = (i7 | 0) == 0;
 do if (!i6 ? (HEAP32[i7 + 48 >> 2] & 16384 | 0) == 0 : 0) {
  _SDL_GetWindowSize(i7, i4, i3);
  i1 = HEAP32[3016] | 0;
  i2 = (i1 | 0) == (i7 | 0);
  if (((i9 | i8 | 0) > -1 ? (HEAP32[i4 >> 2] | 0) > (i8 | 0) : 0) & (HEAP32[i3 >> 2] | 0) > (i9 | 0)) {
   if (i2) i1 = 1; else break;
   STACKTOP = i10;
   return i1 | 0;
  }
  if (!i2) {
   i9 = 0;
   STACKTOP = i10;
   return i9 | 0;
  }
  _SDL_PrivateSendMouseMotion(i7, HEAP32[3015] | 0, 0, i8, i9) | 0;
  i1 = HEAP32[3016] | 0;
  if (!i1) {
   i9 = 0;
   STACKTOP = i10;
   return i9 | 0;
  }
  _SDL_SendWindowEvent(i1, 11, 0, 0) | 0;
  HEAP32[3016] = 0;
  i1 = HEAP32[3029] | 0;
  i2 = HEAP32[3007] | 0;
  i3 = (i2 | 0) == 0;
  if ((i1 | 0) != 0 & (HEAP32[3031] | 0) != 0 & (HEAP32[3024] | 0) == 0) {
   if (i3) {
    i9 = 0;
    STACKTOP = i10;
    return i9 | 0;
   }
   FUNCTION_TABLE_ii[i2 & 127](i1) | 0;
   i9 = 0;
   STACKTOP = i10;
   return i9 | 0;
  } else {
   if (i3) {
    i9 = 0;
    STACKTOP = i10;
    return i9 | 0;
   }
   FUNCTION_TABLE_ii[i2 & 127](0) | 0;
   i9 = 0;
   STACKTOP = i10;
   return i9 | 0;
  }
 } else i5 = 3; while (0);
 if ((i5 | 0) == 3) {
  i1 = HEAP32[3016] | 0;
  if ((i1 | 0) == (i7 | 0)) {
   i9 = 1;
   STACKTOP = i10;
   return i9 | 0;
  }
 }
 if (i1) _SDL_SendWindowEvent(i1, 11, 0, 0) | 0;
 HEAP32[3016] = i7;
 if (!i6 ? (_SDL_SendWindowEvent(i7, 10, 0, 0) | 0, (HEAP32[3016] | 0) != 0) : 0) i1 = 12120; else i1 = 12116;
 i1 = HEAP32[i1 >> 2] | 0;
 i2 = HEAP32[3007] | 0;
 i3 = (i2 | 0) == 0;
 if ((i1 | 0) != 0 & (HEAP32[3031] | 0) != 0 & (HEAP32[3024] | 0) == 0) {
  if (!i3) FUNCTION_TABLE_ii[i2 & 127](i1) | 0;
 } else if (!i3) FUNCTION_TABLE_ii[i2 & 127](0) | 0;
 _SDL_PrivateSendMouseMotion(i7, HEAP32[3015] | 0, 0, i8, i9) | 0;
 i9 = 1;
 STACKTOP = i10;
 return i9 | 0;
}

function ___stdio_write(i14, i2, i1) {
 i14 = i14 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i11 = i15 + 16 | 0;
 i10 = i15;
 i3 = i15 + 32 | 0;
 i12 = i14 + 28 | 0;
 i4 = HEAP32[i12 >> 2] | 0;
 HEAP32[i3 >> 2] = i4;
 i13 = i14 + 20 | 0;
 i4 = (HEAP32[i13 >> 2] | 0) - i4 | 0;
 HEAP32[i3 + 4 >> 2] = i4;
 HEAP32[i3 + 8 >> 2] = i2;
 HEAP32[i3 + 12 >> 2] = i1;
 i8 = i14 + 60 | 0;
 i9 = i14 + 44 | 0;
 i2 = 2;
 i4 = i4 + i1 | 0;
 while (1) {
  if (!(HEAP32[5723] | 0)) {
   HEAP32[i11 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i11 + 4 >> 2] = i3;
   HEAP32[i11 + 8 >> 2] = i2;
   i6 = ___syscall_ret(___syscall146(146, i11 | 0) | 0) | 0;
  } else {
   _pthread_cleanup_push(345, i14 | 0);
   HEAP32[i10 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i10 + 4 >> 2] = i3;
   HEAP32[i10 + 8 >> 2] = i2;
   i6 = ___syscall_ret(___syscall146(146, i10 | 0) | 0) | 0;
   _pthread_cleanup_pop(0);
  }
  if ((i4 | 0) == (i6 | 0)) {
   i4 = 6;
   break;
  }
  if ((i6 | 0) < 0) {
   i4 = 8;
   break;
  }
  i4 = i4 - i6 | 0;
  i5 = HEAP32[i3 + 4 >> 2] | 0;
  if (i6 >>> 0 <= i5 >>> 0) if ((i2 | 0) == 2) {
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + i6;
   i7 = i5;
   i2 = 2;
  } else i7 = i5; else {
   i7 = HEAP32[i9 >> 2] | 0;
   HEAP32[i12 >> 2] = i7;
   HEAP32[i13 >> 2] = i7;
   i7 = HEAP32[i3 + 12 >> 2] | 0;
   i6 = i6 - i5 | 0;
   i3 = i3 + 8 | 0;
   i2 = i2 + -1 | 0;
  }
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + i6;
  HEAP32[i3 + 4 >> 2] = i7 - i6;
 }
 if ((i4 | 0) == 6) {
  i11 = HEAP32[i9 >> 2] | 0;
  HEAP32[i14 + 16 >> 2] = i11 + (HEAP32[i14 + 48 >> 2] | 0);
  i14 = i11;
  HEAP32[i12 >> 2] = i14;
  HEAP32[i13 >> 2] = i14;
 } else if ((i4 | 0) == 8) {
  HEAP32[i14 + 16 >> 2] = 0;
  HEAP32[i12 >> 2] = 0;
  HEAP32[i13 >> 2] = 0;
  HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 32;
  if ((i2 | 0) == 2) i1 = 0; else i1 = i1 - (HEAP32[i3 + 4 >> 2] | 0) | 0;
 }
 STACKTOP = i15;
 return i1 | 0;
}

function _SDL_BlendPoint_RGB565(i4, i7, i8, i3, i6, i5, i2, i1) {
 i4 = i4 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = i1 & 255 ^ 255;
 switch (i3 | 0) {
 case 1:
  {
   i8 = (HEAP32[i4 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i4 + 16 >> 2] | 0, i8) | 0) + (i7 << 1)) | 0;
   i7 = HEAPU16[i8 >> 1] | 0;
   i4 = HEAP32[1501] | 0;
   HEAP16[i8 >> 1] = ((((Math_imul(HEAPU8[(HEAP32[1500] | 0) + (i7 >>> 5 & 63) >> 0] | 0, i1) | 0) >>> 0) / 255 | 0) + (i5 & 255) | 0) >>> 2 << 5 | ((((Math_imul(HEAPU8[i4 + (i7 >>> 11) >> 0] | 0, i1) | 0) >>> 0) / 255 | 0) + (i6 & 255) | 0) >>> 3 << 11 | ((((Math_imul(HEAPU8[i4 + (i7 & 31) >> 0] | 0, i1) | 0) >>> 0) / 255 | 0) + (i2 & 255) | 0) >>> 3;
   return 0;
  }
 case 2:
  {
   i8 = (HEAP32[i4 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i4 + 16 >> 2] | 0, i8) | 0) + (i7 << 1)) | 0;
   i7 = HEAPU16[i8 >> 1] | 0;
   i4 = HEAP32[1501] | 0;
   i6 = (HEAPU8[i4 + (i7 >>> 11) >> 0] | 0) + (i6 & 255) | 0;
   i5 = (HEAPU8[(HEAP32[1500] | 0) + (i7 >>> 5 & 63) >> 0] | 0) + (i5 & 255) | 0;
   i7 = (HEAPU8[i4 + (i7 & 31) >> 0] | 0) + (i2 & 255) | 0;
   HEAP16[i8 >> 1] = (i5 >>> 0 > 255 ? 2016 : i5 >>> 2 << 5) | (i6 >>> 0 > 255 ? 63488 : i6 >>> 3 << 11) | (i7 >>> 0 > 255 ? 31 : i7 >>> 3);
   return 0;
  }
 case 4:
  {
   i8 = (HEAP32[i4 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i4 + 16 >> 2] | 0, i8) | 0) + (i7 << 1)) | 0;
   i7 = HEAPU16[i8 >> 1] | 0;
   i4 = HEAP32[1501] | 0;
   HEAP16[i8 >> 1] = (((Math_imul(HEAPU8[(HEAP32[1500] | 0) + (i7 >>> 5 & 63) >> 0] | 0, i5 & 255) | 0) >>> 0) / 255 | 0) >>> 2 << 5 | (((Math_imul(HEAPU8[i4 + (i7 >>> 11) >> 0] | 0, i6 & 255) | 0) >>> 0) / 255 | 0) >>> 3 << 11 | (((Math_imul(HEAPU8[i4 + (i7 & 31) >> 0] | 0, i2 & 255) | 0) >>> 0) / 255 | 0) >>> 3;
   return 0;
  }
 default:
  {
   HEAP16[(HEAP32[i4 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i4 + 16 >> 2] | 0, i8) | 0) + (i7 << 1)) >> 1] = (i5 & 255) >>> 2 << 5 | (i6 & 255) >>> 3 << 11 | (i2 & 255) >>> 3;
   return 0;
  }
 }
 return 0;
}

function _Emscripten_CreateWindow(i12, i14) {
 i12 = i12 | 0;
 i14 = i14 | 0;
 var i1 = 0, d2 = 0.0, d3 = 0.0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, d18 = 0.0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i13 = i15 + 16 | 0;
 i7 = i15 + 8 | 0;
 i6 = i15;
 i9 = _SDL_calloc(1, 28) | 0;
 if (!i9) {
  i14 = _SDL_Error(0) | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 i11 = i14 + 48 | 0;
 if (!(HEAP32[i11 >> 2] & 8192)) {
  i8 = i9 + 12 | 0;
  HEAPF32[i8 >> 2] = 1.0;
  d2 = 1.0;
 } else {
  d2 = +_emscripten_get_device_pixel_ratio();
  i8 = i9 + 12 | 0;
  HEAPF32[i8 >> 2] = d2;
 }
 i10 = i14 + 24 | 0;
 d3 = +_SDL_floor(+(HEAP32[i10 >> 2] | 0) * d2);
 i5 = i14 + 28 | 0;
 d18 = +_SDL_floor(+(HEAP32[i5 >> 2] | 0) * +HEAPF32[i8 >> 2]);
 _emscripten_set_canvas_size(~~d3 | 0, ~~d18 | 0);
 _emscripten_get_element_css_size(0, i7 | 0, i6 | 0) | 0;
 d2 = +HEAPF64[i7 >> 3];
 i17 = d2 != d3;
 d3 = +HEAPF64[i6 >> 3];
 i16 = d3 != d18;
 i1 = (i17 | i16) & 1;
 i4 = i9 + 16 | 0;
 HEAP32[i4 >> 2] = i1;
 if (!((HEAP32[i11 >> 2] & 32 | 0) == 0 | (i17 | i16) ^ 1)) {
  d18 = +HEAPF32[i8 >> 2];
  _emscripten_set_canvas_size(~~(d2 * d18) | 0, ~~(d3 * d18) | 0);
  _SDL_SendWindowEvent(i14, 5, ~~+HEAPF64[i7 >> 3], ~~+HEAPF64[i6 >> 3]) | 0;
  i1 = HEAP32[i4 >> 2] | 0;
 }
 if ((i1 | 0) == 0 ? +HEAPF32[i8 >> 2] != 1.0 : 0) _emscripten_set_element_css_size(0, +(+(HEAP32[i10 >> 2] | 0)), +(+(HEAP32[i5 >> 2] | 0))) | 0;
 if (HEAP32[i11 >> 2] & 2) {
  if ((HEAP32[i12 + 644 >> 2] | 0) == 0 ? (_SDL_GL_LoadLibrary(0) | 0) < 0 : 0) {
   i17 = -1;
   STACKTOP = i15;
   return i17 | 0;
  }
  i17 = _SDL_EGL_CreateSurface(i12, 0) | 0;
  HEAP32[i9 >> 2] = i17;
  if (!i17) {
   i17 = _SDL_SetError(46202, i13) | 0;
   STACKTOP = i15;
   return i17 | 0;
  }
 }
 HEAP32[i9 + 4 >> 2] = i14;
 HEAP32[i14 + 136 >> 2] = i9;
 _SDL_SetMouseFocus(i14);
 _SDL_SetKeyboardFocus(i14);
 _Emscripten_RegisterEventHandlers(i9);
 i17 = 0;
 STACKTOP = i15;
 return i17 | 0;
}

function _SDL_Blit_RGBA8888_RGB888_Modulate_Scale(i22) {
 i22 = i22 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0;
 i1 = HEAP32[i22 + 52 >> 2] | 0;
 i20 = HEAPU8[i22 + 60 >> 0] | 0;
 i21 = HEAPU8[i22 + 61 >> 0] | 0;
 i14 = HEAPU8[i22 + 62 >> 0] | 0;
 i15 = i22 + 28 | 0;
 i23 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i22 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i17 = i22 + 24 | 0;
 i2 = HEAP32[i17 >> 2] | 0;
 i18 = (HEAP32[i22 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 i3 = i23 + -1 | 0;
 HEAP32[i15 >> 2] = i3;
 if (!i23) return;
 i23 = i22 + 20 | 0;
 i19 = i22 + 32 | 0;
 i12 = (i1 & 1 | 0) == 0;
 i13 = i22 + 12 | 0;
 i5 = HEAP32[i23 >> 2] | 0;
 i11 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i10 = i1 + -65536 | 0;
   i9 = i10 >>> 16;
   i10 = i10 - (i9 << 16) | 0;
   i4 = i4 + 1 + i9 | 0;
  } else i10 = i1;
  if (!i2) i2 = i3; else {
   i1 = 65536;
   i3 = 0;
   i6 = -1;
   while (1) {
    i2 = i2 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i3 = i1 + -65536 | 0;
     i1 = i3 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i3 - (i1 << 16) | 0;
     i3 = (HEAP32[i22 >> 2] | 0) + ((Math_imul(HEAP32[i13 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i7 = HEAP32[i3 >> 2] | 0;
    i8 = i7 >>> 24;
    i9 = i7 >>> 16 & 255;
    i7 = i7 >>> 8 & 255;
    if (!i12) {
     i7 = ((Math_imul(i7, i14) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i21) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i20) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i5 >> 2] = i7 | i9 << 8 | i8 << 16;
    if (!i2) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i18 | 0;
    }
   }
   i2 = HEAP32[i15 >> 2] | 0;
  }
  i1 = i11 + (HEAP32[i19 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i15 >> 2] = i3;
  if (!i2) break;
  i2 = HEAP32[i17 >> 2] | 0;
  i11 = i1;
  i5 = i1;
  i1 = i10 + i16 | 0;
 }
 HEAP32[i23 >> 2] = i1;
 return;
}

function _SDL_Blit_RGBA8888_BGR888_Modulate_Scale(i22) {
 i22 = i22 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0;
 i1 = HEAP32[i22 + 52 >> 2] | 0;
 i20 = HEAPU8[i22 + 60 >> 0] | 0;
 i21 = HEAPU8[i22 + 61 >> 0] | 0;
 i14 = HEAPU8[i22 + 62 >> 0] | 0;
 i15 = i22 + 28 | 0;
 i23 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i22 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i17 = i22 + 24 | 0;
 i2 = HEAP32[i17 >> 2] | 0;
 i18 = (HEAP32[i22 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 i3 = i23 + -1 | 0;
 HEAP32[i15 >> 2] = i3;
 if (!i23) return;
 i23 = i22 + 20 | 0;
 i19 = i22 + 32 | 0;
 i12 = (i1 & 1 | 0) == 0;
 i13 = i22 + 12 | 0;
 i5 = HEAP32[i23 >> 2] | 0;
 i11 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i10 = i1 + -65536 | 0;
   i9 = i10 >>> 16;
   i10 = i10 - (i9 << 16) | 0;
   i4 = i4 + 1 + i9 | 0;
  } else i10 = i1;
  if (!i2) i2 = i3; else {
   i1 = 65536;
   i3 = 0;
   i6 = -1;
   while (1) {
    i2 = i2 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i3 = i1 + -65536 | 0;
     i1 = i3 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i3 - (i1 << 16) | 0;
     i3 = (HEAP32[i22 >> 2] | 0) + ((Math_imul(HEAP32[i13 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i7 = HEAP32[i3 >> 2] | 0;
    i8 = i7 >>> 24;
    i9 = i7 >>> 16 & 255;
    i7 = i7 >>> 8 & 255;
    if (!i12) {
     i7 = ((Math_imul(i7, i14) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i21) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i20) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i5 >> 2] = i7 << 16 | i9 << 8 | i8;
    if (!i2) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i18 | 0;
    }
   }
   i2 = HEAP32[i15 >> 2] | 0;
  }
  i1 = i11 + (HEAP32[i19 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i15 >> 2] = i3;
  if (!i2) break;
  i2 = HEAP32[i17 >> 2] | 0;
  i11 = i1;
  i5 = i1;
  i1 = i10 + i16 | 0;
 }
 HEAP32[i23 >> 2] = i1;
 return;
}

function _SDL_Blit_BGRA8888_RGB888_Modulate_Scale(i22) {
 i22 = i22 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0;
 i1 = HEAP32[i22 + 52 >> 2] | 0;
 i20 = HEAPU8[i22 + 60 >> 0] | 0;
 i21 = HEAPU8[i22 + 61 >> 0] | 0;
 i14 = HEAPU8[i22 + 62 >> 0] | 0;
 i15 = i22 + 28 | 0;
 i23 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i22 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i17 = i22 + 24 | 0;
 i2 = HEAP32[i17 >> 2] | 0;
 i18 = (HEAP32[i22 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 i3 = i23 + -1 | 0;
 HEAP32[i15 >> 2] = i3;
 if (!i23) return;
 i23 = i22 + 20 | 0;
 i19 = i22 + 32 | 0;
 i12 = (i1 & 1 | 0) == 0;
 i13 = i22 + 12 | 0;
 i5 = HEAP32[i23 >> 2] | 0;
 i11 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i10 = i1 + -65536 | 0;
   i9 = i10 >>> 16;
   i10 = i10 - (i9 << 16) | 0;
   i4 = i4 + 1 + i9 | 0;
  } else i10 = i1;
  if (!i2) i2 = i3; else {
   i1 = 65536;
   i3 = 0;
   i6 = -1;
   while (1) {
    i2 = i2 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i3 = i1 + -65536 | 0;
     i1 = i3 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i3 - (i1 << 16) | 0;
     i3 = (HEAP32[i22 >> 2] | 0) + ((Math_imul(HEAP32[i13 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i8 = HEAP32[i3 >> 2] | 0;
    i7 = i8 >>> 24;
    i9 = i8 >>> 16 & 255;
    i8 = i8 >>> 8 & 255;
    if (!i12) {
     i7 = ((Math_imul(i7, i14) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i21) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i20) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i5 >> 2] = i7 | i9 << 8 | i8 << 16;
    if (!i2) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i18 | 0;
    }
   }
   i2 = HEAP32[i15 >> 2] | 0;
  }
  i1 = i11 + (HEAP32[i19 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i15 >> 2] = i3;
  if (!i2) break;
  i2 = HEAP32[i17 >> 2] | 0;
  i11 = i1;
  i5 = i1;
  i1 = i10 + i16 | 0;
 }
 HEAP32[i23 >> 2] = i1;
 return;
}

function _SDL_Blit_BGRA8888_BGR888_Modulate_Scale(i22) {
 i22 = i22 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0;
 i1 = HEAP32[i22 + 52 >> 2] | 0;
 i20 = HEAPU8[i22 + 60 >> 0] | 0;
 i21 = HEAPU8[i22 + 61 >> 0] | 0;
 i14 = HEAPU8[i22 + 62 >> 0] | 0;
 i15 = i22 + 28 | 0;
 i23 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i22 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i17 = i22 + 24 | 0;
 i2 = HEAP32[i17 >> 2] | 0;
 i18 = (HEAP32[i22 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 i3 = i23 + -1 | 0;
 HEAP32[i15 >> 2] = i3;
 if (!i23) return;
 i23 = i22 + 20 | 0;
 i19 = i22 + 32 | 0;
 i12 = (i1 & 1 | 0) == 0;
 i13 = i22 + 12 | 0;
 i5 = HEAP32[i23 >> 2] | 0;
 i11 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i10 = i1 + -65536 | 0;
   i9 = i10 >>> 16;
   i10 = i10 - (i9 << 16) | 0;
   i4 = i4 + 1 + i9 | 0;
  } else i10 = i1;
  if (!i2) i2 = i3; else {
   i1 = 65536;
   i3 = 0;
   i6 = -1;
   while (1) {
    i2 = i2 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i3 = i1 + -65536 | 0;
     i1 = i3 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i3 - (i1 << 16) | 0;
     i3 = (HEAP32[i22 >> 2] | 0) + ((Math_imul(HEAP32[i13 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i8 = HEAP32[i3 >> 2] | 0;
    i7 = i8 >>> 24;
    i9 = i8 >>> 16 & 255;
    i8 = i8 >>> 8 & 255;
    if (!i12) {
     i7 = ((Math_imul(i7, i14) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i21) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i20) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i5 >> 2] = i7 << 16 | i9 << 8 | i8;
    if (!i2) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i18 | 0;
    }
   }
   i2 = HEAP32[i15 >> 2] | 0;
  }
  i1 = i11 + (HEAP32[i19 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i15 >> 2] = i3;
  if (!i2) break;
  i2 = HEAP32[i17 >> 2] | 0;
  i11 = i1;
  i5 = i1;
  i1 = i10 + i16 | 0;
 }
 HEAP32[i23 >> 2] = i1;
 return;
}

function _SDL_Blit_ARGB8888_RGB888_Modulate_Scale(i22) {
 i22 = i22 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0;
 i1 = HEAP32[i22 + 52 >> 2] | 0;
 i20 = HEAPU8[i22 + 60 >> 0] | 0;
 i21 = HEAPU8[i22 + 61 >> 0] | 0;
 i14 = HEAPU8[i22 + 62 >> 0] | 0;
 i15 = i22 + 28 | 0;
 i23 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i22 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i17 = i22 + 24 | 0;
 i2 = HEAP32[i17 >> 2] | 0;
 i18 = (HEAP32[i22 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 i3 = i23 + -1 | 0;
 HEAP32[i15 >> 2] = i3;
 if (!i23) return;
 i23 = i22 + 20 | 0;
 i19 = i22 + 32 | 0;
 i12 = (i1 & 1 | 0) == 0;
 i13 = i22 + 12 | 0;
 i5 = HEAP32[i23 >> 2] | 0;
 i11 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i10 = i1 + -65536 | 0;
   i9 = i10 >>> 16;
   i10 = i10 - (i9 << 16) | 0;
   i4 = i4 + 1 + i9 | 0;
  } else i10 = i1;
  if (!i2) i2 = i3; else {
   i1 = 65536;
   i3 = 0;
   i6 = -1;
   while (1) {
    i2 = i2 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i3 = i1 + -65536 | 0;
     i1 = i3 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i3 - (i1 << 16) | 0;
     i3 = (HEAP32[i22 >> 2] | 0) + ((Math_imul(HEAP32[i13 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i7 = HEAP32[i3 >> 2] | 0;
    i8 = i7 >>> 16 & 255;
    i9 = i7 >>> 8 & 255;
    i7 = i7 & 255;
    if (!i12) {
     i7 = ((Math_imul(i7, i14) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i21) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i20) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i5 >> 2] = i7 | i9 << 8 | i8 << 16;
    if (!i2) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i18 | 0;
    }
   }
   i2 = HEAP32[i15 >> 2] | 0;
  }
  i1 = i11 + (HEAP32[i19 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i15 >> 2] = i3;
  if (!i2) break;
  i2 = HEAP32[i17 >> 2] | 0;
  i11 = i1;
  i5 = i1;
  i1 = i10 + i16 | 0;
 }
 HEAP32[i23 >> 2] = i1;
 return;
}

function _SDL_Blit_ARGB8888_BGR888_Modulate_Scale(i22) {
 i22 = i22 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0;
 i1 = HEAP32[i22 + 52 >> 2] | 0;
 i20 = HEAPU8[i22 + 60 >> 0] | 0;
 i21 = HEAPU8[i22 + 61 >> 0] | 0;
 i14 = HEAPU8[i22 + 62 >> 0] | 0;
 i15 = i22 + 28 | 0;
 i23 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i22 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i17 = i22 + 24 | 0;
 i2 = HEAP32[i17 >> 2] | 0;
 i18 = (HEAP32[i22 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 i3 = i23 + -1 | 0;
 HEAP32[i15 >> 2] = i3;
 if (!i23) return;
 i23 = i22 + 20 | 0;
 i19 = i22 + 32 | 0;
 i12 = (i1 & 1 | 0) == 0;
 i13 = i22 + 12 | 0;
 i5 = HEAP32[i23 >> 2] | 0;
 i11 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i10 = i1 + -65536 | 0;
   i9 = i10 >>> 16;
   i10 = i10 - (i9 << 16) | 0;
   i4 = i4 + 1 + i9 | 0;
  } else i10 = i1;
  if (!i2) i2 = i3; else {
   i1 = 65536;
   i3 = 0;
   i6 = -1;
   while (1) {
    i2 = i2 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i3 = i1 + -65536 | 0;
     i1 = i3 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i3 - (i1 << 16) | 0;
     i3 = (HEAP32[i22 >> 2] | 0) + ((Math_imul(HEAP32[i13 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i7 = HEAP32[i3 >> 2] | 0;
    i8 = i7 >>> 16 & 255;
    i9 = i7 >>> 8 & 255;
    i7 = i7 & 255;
    if (!i12) {
     i7 = ((Math_imul(i7, i14) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i21) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i20) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i5 >> 2] = i7 << 16 | i9 << 8 | i8;
    if (!i2) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i18 | 0;
    }
   }
   i2 = HEAP32[i15 >> 2] | 0;
  }
  i1 = i11 + (HEAP32[i19 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i15 >> 2] = i3;
  if (!i2) break;
  i2 = HEAP32[i17 >> 2] | 0;
  i11 = i1;
  i5 = i1;
  i1 = i10 + i16 | 0;
 }
 HEAP32[i23 >> 2] = i1;
 return;
}

function _SDL_Blit_ABGR8888_RGB888_Modulate_Scale(i22) {
 i22 = i22 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0;
 i1 = HEAP32[i22 + 52 >> 2] | 0;
 i20 = HEAPU8[i22 + 60 >> 0] | 0;
 i21 = HEAPU8[i22 + 61 >> 0] | 0;
 i14 = HEAPU8[i22 + 62 >> 0] | 0;
 i15 = i22 + 28 | 0;
 i23 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i22 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i17 = i22 + 24 | 0;
 i2 = HEAP32[i17 >> 2] | 0;
 i18 = (HEAP32[i22 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 i3 = i23 + -1 | 0;
 HEAP32[i15 >> 2] = i3;
 if (!i23) return;
 i23 = i22 + 20 | 0;
 i19 = i22 + 32 | 0;
 i12 = (i1 & 1 | 0) == 0;
 i13 = i22 + 12 | 0;
 i5 = HEAP32[i23 >> 2] | 0;
 i11 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i10 = i1 + -65536 | 0;
   i9 = i10 >>> 16;
   i10 = i10 - (i9 << 16) | 0;
   i4 = i4 + 1 + i9 | 0;
  } else i10 = i1;
  if (!i2) i2 = i3; else {
   i1 = 65536;
   i3 = 0;
   i6 = -1;
   while (1) {
    i2 = i2 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i3 = i1 + -65536 | 0;
     i1 = i3 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i3 - (i1 << 16) | 0;
     i3 = (HEAP32[i22 >> 2] | 0) + ((Math_imul(HEAP32[i13 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i8 = HEAP32[i3 >> 2] | 0;
    i7 = i8 >>> 16 & 255;
    i9 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    if (!i12) {
     i7 = ((Math_imul(i7, i14) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i21) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i20) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i5 >> 2] = i7 | i9 << 8 | i8 << 16;
    if (!i2) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i18 | 0;
    }
   }
   i2 = HEAP32[i15 >> 2] | 0;
  }
  i1 = i11 + (HEAP32[i19 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i15 >> 2] = i3;
  if (!i2) break;
  i2 = HEAP32[i17 >> 2] | 0;
  i11 = i1;
  i5 = i1;
  i1 = i10 + i16 | 0;
 }
 HEAP32[i23 >> 2] = i1;
 return;
}

function _SDL_Blit_ABGR8888_BGR888_Modulate_Scale(i22) {
 i22 = i22 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0;
 i1 = HEAP32[i22 + 52 >> 2] | 0;
 i20 = HEAPU8[i22 + 60 >> 0] | 0;
 i21 = HEAPU8[i22 + 61 >> 0] | 0;
 i14 = HEAPU8[i22 + 62 >> 0] | 0;
 i15 = i22 + 28 | 0;
 i23 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i22 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i17 = i22 + 24 | 0;
 i2 = HEAP32[i17 >> 2] | 0;
 i18 = (HEAP32[i22 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 i3 = i23 + -1 | 0;
 HEAP32[i15 >> 2] = i3;
 if (!i23) return;
 i23 = i22 + 20 | 0;
 i19 = i22 + 32 | 0;
 i12 = (i1 & 1 | 0) == 0;
 i13 = i22 + 12 | 0;
 i5 = HEAP32[i23 >> 2] | 0;
 i11 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i10 = i1 + -65536 | 0;
   i9 = i10 >>> 16;
   i10 = i10 - (i9 << 16) | 0;
   i4 = i4 + 1 + i9 | 0;
  } else i10 = i1;
  if (!i2) i2 = i3; else {
   i1 = 65536;
   i3 = 0;
   i6 = -1;
   while (1) {
    i2 = i2 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i3 = i1 + -65536 | 0;
     i1 = i3 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i3 - (i1 << 16) | 0;
     i3 = (HEAP32[i22 >> 2] | 0) + ((Math_imul(HEAP32[i13 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i8 = HEAP32[i3 >> 2] | 0;
    i7 = i8 >>> 16 & 255;
    i9 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    if (!i12) {
     i7 = ((Math_imul(i7, i14) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i21) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i20) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i5 >> 2] = i7 << 16 | i9 << 8 | i8;
    if (!i2) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i18 | 0;
    }
   }
   i2 = HEAP32[i15 >> 2] | 0;
  }
  i1 = i11 + (HEAP32[i19 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i15 >> 2] = i3;
  if (!i2) break;
  i2 = HEAP32[i17 >> 2] | 0;
  i11 = i1;
  i5 = i1;
  i1 = i10 + i16 | 0;
 }
 HEAP32[i23 >> 2] = i1;
 return;
}

function _SDL_BlendPoint_RGB555(i4, i7, i8, i3, i6, i5, i2, i1) {
 i4 = i4 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = i1 & 255 ^ 255;
 switch (i3 | 0) {
 case 1:
  {
   i8 = (HEAP32[i4 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i4 + 16 >> 2] | 0, i8) | 0) + (i7 << 1)) | 0;
   i7 = HEAPU16[i8 >> 1] | 0;
   i4 = HEAP32[1501] | 0;
   HEAP16[i8 >> 1] = ((((Math_imul(HEAPU8[i4 + (i7 >>> 5 & 31) >> 0] | 0, i1) | 0) >>> 0) / 255 | 0) + (i5 & 255) | 0) >>> 3 << 5 | ((((Math_imul(HEAPU8[i4 + (i7 >>> 10 & 31) >> 0] | 0, i1) | 0) >>> 0) / 255 | 0) + (i6 & 255) | 0) >>> 3 << 10 | ((((Math_imul(HEAPU8[i4 + (i7 & 31) >> 0] | 0, i1) | 0) >>> 0) / 255 | 0) + (i2 & 255) | 0) >>> 3;
   return 0;
  }
 case 2:
  {
   i8 = (HEAP32[i4 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i4 + 16 >> 2] | 0, i8) | 0) + (i7 << 1)) | 0;
   i7 = HEAPU16[i8 >> 1] | 0;
   i4 = HEAP32[1501] | 0;
   i6 = (HEAPU8[i4 + (i7 >>> 10 & 31) >> 0] | 0) + (i6 & 255) | 0;
   i5 = (HEAPU8[i4 + (i7 >>> 5 & 31) >> 0] | 0) + (i5 & 255) | 0;
   i7 = (HEAPU8[i4 + (i7 & 31) >> 0] | 0) + (i2 & 255) | 0;
   HEAP16[i8 >> 1] = (i5 >>> 0 > 255 ? 992 : i5 >>> 3 << 5) | (i6 >>> 0 > 255 ? 31744 : i6 >>> 3 << 10) | (i7 >>> 0 > 255 ? 31 : i7 >>> 3);
   return 0;
  }
 case 4:
  {
   i8 = (HEAP32[i4 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i4 + 16 >> 2] | 0, i8) | 0) + (i7 << 1)) | 0;
   i7 = HEAPU16[i8 >> 1] | 0;
   i4 = HEAP32[1501] | 0;
   HEAP16[i8 >> 1] = (((Math_imul(HEAPU8[i4 + (i7 >>> 5 & 31) >> 0] | 0, i5 & 255) | 0) >>> 0) / 255 | 0) >>> 3 << 5 | (((Math_imul(HEAPU8[i4 + (i7 >>> 10 & 31) >> 0] | 0, i6 & 255) | 0) >>> 0) / 255 | 0) >>> 3 << 10 | (((Math_imul(HEAPU8[i4 + (i7 & 31) >> 0] | 0, i2 & 255) | 0) >>> 0) / 255 | 0) >>> 3;
   return 0;
  }
 default:
  {
   HEAP16[(HEAP32[i4 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i4 + 16 >> 2] | 0, i8) | 0) + (i7 << 1)) >> 1] = (i5 & 255) >>> 3 << 5 | (i6 & 255) >>> 3 << 10 | (i2 & 255) >>> 3;
   return 0;
  }
 }
 return 0;
}

function _SDL_Blit_RGB888_RGB888_Modulate_Scale(i22) {
 i22 = i22 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0;
 i1 = HEAP32[i22 + 52 >> 2] | 0;
 i20 = HEAPU8[i22 + 60 >> 0] | 0;
 i21 = HEAPU8[i22 + 61 >> 0] | 0;
 i14 = HEAPU8[i22 + 62 >> 0] | 0;
 i15 = i22 + 28 | 0;
 i23 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i22 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i17 = i22 + 24 | 0;
 i2 = HEAP32[i17 >> 2] | 0;
 i18 = (HEAP32[i22 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 i3 = i23 + -1 | 0;
 HEAP32[i15 >> 2] = i3;
 if (!i23) return;
 i23 = i22 + 20 | 0;
 i19 = i22 + 32 | 0;
 i12 = (i1 & 1 | 0) == 0;
 i13 = i22 + 12 | 0;
 i5 = HEAP32[i23 >> 2] | 0;
 i11 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i10 = i1 + -65536 | 0;
   i9 = i10 >>> 16;
   i10 = i10 - (i9 << 16) | 0;
   i4 = i4 + 1 + i9 | 0;
  } else i10 = i1;
  if (!i2) i2 = i3; else {
   i1 = 65536;
   i3 = 0;
   i6 = -1;
   while (1) {
    i2 = i2 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i3 = i1 + -65536 | 0;
     i1 = i3 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i3 - (i1 << 16) | 0;
     i3 = (HEAP32[i22 >> 2] | 0) + ((Math_imul(HEAP32[i13 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i7 = HEAP32[i3 >> 2] | 0;
    i8 = i7 >>> 16 & 255;
    i9 = i7 >>> 8 & 255;
    i7 = i7 & 255;
    if (!i12) {
     i7 = ((Math_imul(i7, i14) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i21) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i20) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i5 >> 2] = i7 | i9 << 8 | i8 << 16;
    if (!i2) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i18 | 0;
    }
   }
   i2 = HEAP32[i15 >> 2] | 0;
  }
  i1 = i11 + (HEAP32[i19 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i15 >> 2] = i3;
  if (!i2) break;
  i2 = HEAP32[i17 >> 2] | 0;
  i11 = i1;
  i5 = i1;
  i1 = i10 + i16 | 0;
 }
 HEAP32[i23 >> 2] = i1;
 return;
}

function _SDL_Blit_RGB888_BGR888_Modulate_Scale(i22) {
 i22 = i22 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0;
 i1 = HEAP32[i22 + 52 >> 2] | 0;
 i20 = HEAPU8[i22 + 60 >> 0] | 0;
 i21 = HEAPU8[i22 + 61 >> 0] | 0;
 i14 = HEAPU8[i22 + 62 >> 0] | 0;
 i15 = i22 + 28 | 0;
 i23 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i22 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i17 = i22 + 24 | 0;
 i2 = HEAP32[i17 >> 2] | 0;
 i18 = (HEAP32[i22 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 i3 = i23 + -1 | 0;
 HEAP32[i15 >> 2] = i3;
 if (!i23) return;
 i23 = i22 + 20 | 0;
 i19 = i22 + 32 | 0;
 i12 = (i1 & 1 | 0) == 0;
 i13 = i22 + 12 | 0;
 i5 = HEAP32[i23 >> 2] | 0;
 i11 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i10 = i1 + -65536 | 0;
   i9 = i10 >>> 16;
   i10 = i10 - (i9 << 16) | 0;
   i4 = i4 + 1 + i9 | 0;
  } else i10 = i1;
  if (!i2) i2 = i3; else {
   i1 = 65536;
   i3 = 0;
   i6 = -1;
   while (1) {
    i2 = i2 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i3 = i1 + -65536 | 0;
     i1 = i3 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i3 - (i1 << 16) | 0;
     i3 = (HEAP32[i22 >> 2] | 0) + ((Math_imul(HEAP32[i13 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i7 = HEAP32[i3 >> 2] | 0;
    i8 = i7 >>> 16 & 255;
    i9 = i7 >>> 8 & 255;
    i7 = i7 & 255;
    if (!i12) {
     i7 = ((Math_imul(i7, i14) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i21) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i20) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i5 >> 2] = i7 << 16 | i9 << 8 | i8;
    if (!i2) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i18 | 0;
    }
   }
   i2 = HEAP32[i15 >> 2] | 0;
  }
  i1 = i11 + (HEAP32[i19 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i15 >> 2] = i3;
  if (!i2) break;
  i2 = HEAP32[i17 >> 2] | 0;
  i11 = i1;
  i5 = i1;
  i1 = i10 + i16 | 0;
 }
 HEAP32[i23 >> 2] = i1;
 return;
}

function _SDL_Blit_BGR888_RGB888_Modulate_Scale(i22) {
 i22 = i22 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0;
 i1 = HEAP32[i22 + 52 >> 2] | 0;
 i20 = HEAPU8[i22 + 60 >> 0] | 0;
 i21 = HEAPU8[i22 + 61 >> 0] | 0;
 i14 = HEAPU8[i22 + 62 >> 0] | 0;
 i15 = i22 + 28 | 0;
 i23 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i22 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i17 = i22 + 24 | 0;
 i2 = HEAP32[i17 >> 2] | 0;
 i18 = (HEAP32[i22 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 i3 = i23 + -1 | 0;
 HEAP32[i15 >> 2] = i3;
 if (!i23) return;
 i23 = i22 + 20 | 0;
 i19 = i22 + 32 | 0;
 i12 = (i1 & 1 | 0) == 0;
 i13 = i22 + 12 | 0;
 i5 = HEAP32[i23 >> 2] | 0;
 i11 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i10 = i1 + -65536 | 0;
   i9 = i10 >>> 16;
   i10 = i10 - (i9 << 16) | 0;
   i4 = i4 + 1 + i9 | 0;
  } else i10 = i1;
  if (!i2) i2 = i3; else {
   i1 = 65536;
   i3 = 0;
   i6 = -1;
   while (1) {
    i2 = i2 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i3 = i1 + -65536 | 0;
     i1 = i3 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i3 - (i1 << 16) | 0;
     i3 = (HEAP32[i22 >> 2] | 0) + ((Math_imul(HEAP32[i13 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i8 = HEAP32[i3 >> 2] | 0;
    i7 = i8 >>> 16 & 255;
    i9 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    if (!i12) {
     i7 = ((Math_imul(i7, i14) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i21) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i20) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i5 >> 2] = i7 | i9 << 8 | i8 << 16;
    if (!i2) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i18 | 0;
    }
   }
   i2 = HEAP32[i15 >> 2] | 0;
  }
  i1 = i11 + (HEAP32[i19 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i15 >> 2] = i3;
  if (!i2) break;
  i2 = HEAP32[i17 >> 2] | 0;
  i11 = i1;
  i5 = i1;
  i1 = i10 + i16 | 0;
 }
 HEAP32[i23 >> 2] = i1;
 return;
}

function _SDL_Blit_BGR888_BGR888_Modulate_Scale(i22) {
 i22 = i22 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0;
 i1 = HEAP32[i22 + 52 >> 2] | 0;
 i20 = HEAPU8[i22 + 60 >> 0] | 0;
 i21 = HEAPU8[i22 + 61 >> 0] | 0;
 i14 = HEAPU8[i22 + 62 >> 0] | 0;
 i15 = i22 + 28 | 0;
 i23 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i22 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i17 = i22 + 24 | 0;
 i2 = HEAP32[i17 >> 2] | 0;
 i18 = (HEAP32[i22 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 i3 = i23 + -1 | 0;
 HEAP32[i15 >> 2] = i3;
 if (!i23) return;
 i23 = i22 + 20 | 0;
 i19 = i22 + 32 | 0;
 i12 = (i1 & 1 | 0) == 0;
 i13 = i22 + 12 | 0;
 i5 = HEAP32[i23 >> 2] | 0;
 i11 = i5;
 i1 = 0;
 i4 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i10 = i1 + -65536 | 0;
   i9 = i10 >>> 16;
   i10 = i10 - (i9 << 16) | 0;
   i4 = i4 + 1 + i9 | 0;
  } else i10 = i1;
  if (!i2) i2 = i3; else {
   i1 = 65536;
   i3 = 0;
   i6 = -1;
   while (1) {
    i2 = i2 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i3 = i1 + -65536 | 0;
     i1 = i3 >>> 16;
     i6 = i6 + 1 + i1 | 0;
     i1 = i3 - (i1 << 16) | 0;
     i3 = (HEAP32[i22 >> 2] | 0) + ((Math_imul(HEAP32[i13 >> 2] | 0, i4) | 0) + (i6 << 2)) | 0;
    }
    i8 = HEAP32[i3 >> 2] | 0;
    i7 = i8 >>> 16 & 255;
    i9 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    if (!i12) {
     i7 = ((Math_imul(i7, i14) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i21) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i20) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i5 >> 2] = i7 << 16 | i9 << 8 | i8;
    if (!i2) break; else {
     i5 = i5 + 4 | 0;
     i1 = i1 + i18 | 0;
    }
   }
   i2 = HEAP32[i15 >> 2] | 0;
  }
  i1 = i11 + (HEAP32[i19 >> 2] | 0) | 0;
  i3 = i2 + -1 | 0;
  HEAP32[i15 >> 2] = i3;
  if (!i2) break;
  i2 = HEAP32[i17 >> 2] | 0;
  i11 = i1;
  i5 = i1;
  i1 = i10 + i16 | 0;
 }
 HEAP32[i23 >> 2] = i1;
 return;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb(i6, i10, i5, i4, i7) {
 i6 = i6 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i8 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i11 + 20 | 0;
 i2 = i11 + 16 | 0;
 i3 = i11 + 12 | 0;
 i9 = i11;
 if (!(HEAP32[i5 + 4 >> 2] & 1)) {
  i9 = HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[i2 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = FUNCTION_TABLE_iiiiii[i9 & 63](i6, i1, i5, i4, i7 & 1) | 0;
 } else {
  i2 = __ZNKSt3__18ios_base6getlocEv(i5) | 0;
  HEAP32[i3 >> 2] = i2;
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i3, 30524) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i7) FUNCTION_TABLE_vii[HEAP32[i2 + 24 >> 2] & 127](i9, i1); else FUNCTION_TABLE_vii[HEAP32[i2 + 28 >> 2] & 127](i9, i1);
  i5 = HEAP8[i9 >> 0] | 0;
  i8 = (i5 & 1) == 0;
  i1 = i9 + 1 | 0;
  i7 = i9 + 8 | 0;
  i6 = i8 ? i1 : i9 + 1 | 0;
  i1 = i8 ? i1 : HEAP32[i9 + 8 >> 2] | 0;
  i8 = i9 + 4 | 0;
  i4 = (i5 & 1) == 0;
  if ((i1 | 0) != ((i4 ? i6 : HEAP32[i7 >> 2] | 0) + (i4 ? (i5 & 255) >>> 1 : HEAP32[i8 >> 2] | 0) | 0)) do {
   i2 = HEAP8[i1 >> 0] | 0;
   i3 = HEAP32[i10 >> 2] | 0;
   do if (i3) {
    i4 = i3 + 24 | 0;
    i5 = HEAP32[i4 >> 2] | 0;
    if ((i5 | 0) != (HEAP32[i3 + 28 >> 2] | 0)) {
     HEAP32[i4 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i2;
     break;
    }
    if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] & 63](i3, i2 & 255) | 0) == -1) HEAP32[i10 >> 2] = 0;
   } while (0);
   i1 = i1 + 1 | 0;
   i5 = HEAP8[i9 >> 0] | 0;
   i4 = (i5 & 1) == 0;
  } while ((i1 | 0) != ((i4 ? i6 : HEAP32[i7 >> 2] | 0) + (i4 ? (i5 & 255) >>> 1 : HEAP32[i8 >> 2] | 0) | 0));
  i1 = HEAP32[i10 >> 2] | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i9);
 }
 STACKTOP = i11;
 return i1 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb(i6, i9, i5, i4, i7) {
 i6 = i6 | 0;
 i9 = i9 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i8 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i10 + 20 | 0;
 i2 = i10 + 16 | 0;
 i3 = i10 + 12 | 0;
 i8 = i10;
 if (!(HEAP32[i5 + 4 >> 2] & 1)) {
  i8 = HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[i2 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = FUNCTION_TABLE_iiiiii[i8 & 63](i6, i1, i5, i4, i7 & 1) | 0;
 } else {
  i2 = __ZNKSt3__18ios_base6getlocEv(i5) | 0;
  HEAP32[i3 >> 2] = i2;
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i3, 30532) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i7) FUNCTION_TABLE_vii[HEAP32[i2 + 24 >> 2] & 127](i8, i1); else FUNCTION_TABLE_vii[HEAP32[i2 + 28 >> 2] & 127](i8, i1);
  i5 = HEAP8[i8 >> 0] | 0;
  i4 = (i5 & 1) == 0;
  i1 = i8 + 4 | 0;
  i7 = i8 + 8 | 0;
  i6 = i4 ? i1 : i8 + 4 | 0;
  i1 = i4 ? i1 : HEAP32[i8 + 8 >> 2] | 0;
  i4 = (i5 & 1) == 0;
  if ((i1 | 0) != ((i4 ? i6 : HEAP32[i7 >> 2] | 0) + ((i4 ? (i5 & 255) >>> 1 : HEAP32[i6 >> 2] | 0) << 2) | 0)) do {
   i2 = HEAP32[i1 >> 2] | 0;
   i3 = HEAP32[i9 >> 2] | 0;
   if (i3) {
    i4 = i3 + 24 | 0;
    i5 = HEAP32[i4 >> 2] | 0;
    if ((i5 | 0) == (HEAP32[i3 + 28 >> 2] | 0)) i2 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] & 63](i3, i2) | 0; else {
     HEAP32[i4 >> 2] = i5 + 4;
     HEAP32[i5 >> 2] = i2;
    }
    if ((i2 | 0) == -1) HEAP32[i9 >> 2] = 0;
   }
   i1 = i1 + 4 | 0;
   i5 = HEAP8[i8 >> 0] | 0;
   i4 = (i5 & 1) == 0;
  } while ((i1 | 0) != ((i4 ? i6 : HEAP32[i7 >> 2] | 0) + ((i4 ? (i5 & 255) >>> 1 : HEAP32[i6 >> 2] | 0) << 2) | 0));
  i1 = HEAP32[i9 >> 2] | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i8);
 }
 STACKTOP = i10;
 return i1 | 0;
}

function _SDL_InitSubSystem(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i4;
 _SDL_ClearError();
 _SDL_TicksInit();
 i2 = i1 >>> 4 & 512 | i1;
 i2 = (i2 & 544 | 0) == 0 ? i2 : i2 | 16384;
 if (i2 & 16384) {
  i1 = HEAP8[35275] | 0;
  do if (!(i1 << 24 >> 24)) if ((_SDL_StartEventLoop() | 0) < 0) {
   i3 = -1;
   STACKTOP = i4;
   return i3 | 0;
  } else {
   _SDL_QuitInit() | 0;
   i1 = HEAP8[35275] | 0;
   break;
  } while (0);
  HEAP8[35275] = i1 + 1 << 24 >> 24;
 }
 if (i2 & 1) {
  i1 = HEAP8[35261] | 0;
  do if (!(i1 << 24 >> 24)) if ((_SDL_TimerInit() | 0) < 0) {
   i3 = -1;
   STACKTOP = i4;
   return i3 | 0;
  } else {
   i1 = HEAP8[35261] | 0;
   break;
  } while (0);
  HEAP8[35261] = i1 + 1 << 24 >> 24;
 }
 if (i2 & 32) {
  i1 = HEAP8[35266] | 0;
  do if (!(i1 << 24 >> 24)) if ((_SDL_VideoInit(0) | 0) < 0) {
   i3 = -1;
   STACKTOP = i4;
   return i3 | 0;
  } else {
   i1 = HEAP8[35266] | 0;
   break;
  } while (0);
  HEAP8[35266] = i1 + 1 << 24 >> 24;
 }
 if (i2 & 16) {
  i1 = HEAP8[35265] | 0;
  do if (!(i1 << 24 >> 24)) if ((_SDL_AudioInit(0) | 0) < 0) {
   i3 = -1;
   STACKTOP = i4;
   return i3 | 0;
  } else {
   i1 = HEAP8[35265] | 0;
   break;
  } while (0);
  HEAP8[35265] = i1 + 1 << 24 >> 24;
 }
 if (i2 & 512) {
  i1 = HEAP8[35270] | 0;
  do if (!(i1 << 24 >> 24)) if ((_SDL_JoystickInit() | 0) < 0) {
   i3 = -1;
   STACKTOP = i4;
   return i3 | 0;
  } else {
   i1 = HEAP8[35270] | 0;
   break;
  } while (0);
  HEAP8[35270] = i1 + 1 << 24 >> 24;
 }
 if (i2 & 8192) {
  i1 = HEAP8[35274] | 0;
  do if (!(i1 << 24 >> 24)) if ((_SDL_GameControllerInit() | 0) < 0) {
   i3 = -1;
   STACKTOP = i4;
   return i3 | 0;
  } else {
   i1 = HEAP8[35274] | 0;
   break;
  } while (0);
  HEAP8[35274] = i1 + 1 << 24 >> 24;
 }
 if (!(i2 & 4096)) {
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 i3 = _SDL_SetError(35293, i3) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function ___cxx_global_array_dtor112(i1) {
 i1 = i1 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(33560);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(33548);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(33536);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(33524);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(33512);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(33500);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(33488);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(33476);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(33464);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(33452);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(33440);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(33428);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(33416);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(33404);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(33392);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(33380);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(33368);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(33356);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(33344);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(33332);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(33320);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(33308);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(33296);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(33284);
 return;
}

function ___cxx_global_array_dtor109(i1) {
 i1 = i1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33268);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33256);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33244);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33232);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33220);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33208);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33196);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33184);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33172);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33160);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33148);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33136);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33124);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33112);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33100);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33088);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33076);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33064);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33052);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33040);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33028);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33016);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(33004);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(32992);
 return;
}

function ___cxx_global_array_dtor85(i1) {
 i1 = i1 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(32456);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(32444);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(32432);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(32420);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(32408);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(32396);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(32384);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(32372);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(32360);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(32348);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(32336);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(32324);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(32312);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(32300);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(32288);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(32276);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(32264);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(32252);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(32240);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(32228);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(32216);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(32204);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(32192);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(32180);
 return;
}

function ___cxx_global_array_dtor61(i1) {
 i1 = i1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(32164);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(32152);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(32140);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(32128);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(32116);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(32104);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(32092);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(32080);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(32068);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(32056);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(32044);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(32032);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(32020);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(32008);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(31996);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(31984);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(31972);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(31960);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(31948);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(31936);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(31924);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(31912);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(31900);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(31888);
 return;
}

function ___fdopen(i9, i3) {
 i9 = i9 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i11 = i12 + 40 | 0;
 i8 = i12 + 24 | 0;
 i7 = i12 + 16 | 0;
 i4 = i12;
 i10 = i12 + 52 | 0;
 i2 = HEAP8[i3 >> 0] | 0;
 if (_memchr(58379, i2 << 24 >> 24, 4) | 0) {
  i1 = _malloc(1144) | 0;
  if (!i1) i1 = 0; else {
   i5 = i1;
   i6 = i5 + 112 | 0;
   do {
    HEAP32[i5 >> 2] = 0;
    i5 = i5 + 4 | 0;
   } while ((i5 | 0) < (i6 | 0));
   if (!(_strchr(i3, 43) | 0)) HEAP32[i1 >> 2] = i2 << 24 >> 24 == 114 ? 8 : 4;
   if (_strchr(i3, 101) | 0) {
    HEAP32[i4 >> 2] = i9;
    HEAP32[i4 + 4 >> 2] = 2;
    HEAP32[i4 + 8 >> 2] = 1;
    ___syscall221(221, i4 | 0) | 0;
    i2 = HEAP8[i3 >> 0] | 0;
   }
   if (i2 << 24 >> 24 == 97) {
    HEAP32[i7 >> 2] = i9;
    HEAP32[i7 + 4 >> 2] = 3;
    i2 = ___syscall221(221, i7 | 0) | 0;
    if (!(i2 & 1024)) {
     HEAP32[i8 >> 2] = i9;
     HEAP32[i8 + 4 >> 2] = 4;
     HEAP32[i8 + 8 >> 2] = i2 | 1024;
     ___syscall221(221, i8 | 0) | 0;
    }
    i3 = HEAP32[i1 >> 2] | 128;
    HEAP32[i1 >> 2] = i3;
   } else i3 = HEAP32[i1 >> 2] | 0;
   HEAP32[i1 + 60 >> 2] = i9;
   HEAP32[i1 + 44 >> 2] = i1 + 120;
   HEAP32[i1 + 48 >> 2] = 1024;
   i2 = i1 + 75 | 0;
   HEAP8[i2 >> 0] = -1;
   if ((i3 & 8 | 0) == 0 ? (HEAP32[i11 >> 2] = i9, HEAP32[i11 + 4 >> 2] = 21505, HEAP32[i11 + 8 >> 2] = i10, (___syscall54(54, i11 | 0) | 0) == 0) : 0) HEAP8[i2 >> 0] = 10;
   HEAP32[i1 + 32 >> 2] = 5;
   HEAP32[i1 + 36 >> 2] = 3;
   HEAP32[i1 + 40 >> 2] = 4;
   HEAP32[i1 + 12 >> 2] = 11;
   if (!(HEAP32[5724] | 0)) HEAP32[i1 + 76 >> 2] = -1;
   ___lock(22920);
   i2 = HEAP32[5729] | 0;
   HEAP32[i1 + 56 >> 2] = i2;
   if (i2) HEAP32[i2 + 52 >> 2] = i1;
   HEAP32[5729] = i1;
   ___unlock(22920);
  }
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  i1 = 0;
 }
 STACKTOP = i12;
 return i1 | 0;
}

function _SDL_BlendPoints(i16, i17, i15, i14, i1, i2, i3, i13) {
 i16 = i16 | 0;
 i17 = i17 | 0;
 i15 = i15 | 0;
 i14 = i14 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i13 = i13 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i18 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!i16) {
  i17 = _SDL_SetError(40249, i18) | 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 i4 = HEAP32[i16 + 4 >> 2] | 0;
 i5 = HEAP8[i4 + 8 >> 0] | 0;
 if ((i5 & 255) < 8) {
  i17 = _SDL_SetError(38578, i18 + 8 | 0) | 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 if ((i14 + -1 | 0) >>> 0 < 2) {
  i11 = i13 & 255;
  i12 = (((Math_imul(i11, i1 & 255) | 0) >>> 0) / 255 | 0) & 255;
  i2 = (((Math_imul(i11, i2 & 255) | 0) >>> 0) / 255 | 0) & 255;
  i3 = (((Math_imul(i11, i3 & 255) | 0) >>> 0) / 255 | 0) & 255;
 } else i12 = i1;
 switch (i5 & 255 | 0) {
 case 15:
  {
   if ((HEAP32[i4 + 12 >> 2] | 0) == 31744) i11 = 15; else i6 = 12;
   break;
  }
 case 16:
  {
   if ((HEAP32[i4 + 12 >> 2] | 0) == 63488) i11 = 16; else i6 = 12;
   break;
  }
 case 32:
  {
   if ((HEAP32[i4 + 12 >> 2] | 0) == 16711680) i11 = (HEAP32[i4 + 24 >> 2] | 0) == 0 ? 11 : 12; else i6 = 12;
   break;
  }
 default:
  i6 = 12;
 }
 if ((i6 | 0) == 12) i11 = (HEAP32[i4 + 24 >> 2] | 0) == 0 ? 13 : 14;
 i6 = HEAP32[i16 + 36 >> 2] | 0;
 i7 = i6 + -1 + (HEAP32[i16 + 44 >> 2] | 0) | 0;
 i8 = HEAP32[i16 + 40 >> 2] | 0;
 i9 = i8 + -1 + (HEAP32[i16 + 48 >> 2] | 0) | 0;
 if ((i15 | 0) > 0) {
  i10 = 0;
  i1 = 0;
 } else {
  i17 = 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 do {
  i4 = HEAP32[i17 + (i10 << 3) >> 2] | 0;
  i5 = HEAP32[i17 + (i10 << 3) + 4 >> 2] | 0;
  if (!((i5 | 0) > (i9 | 0) | ((i4 | 0) < (i6 | 0) | (i4 | 0) > (i7 | 0) | (i5 | 0) < (i8 | 0)))) i1 = FUNCTION_TABLE_iiiiiiiii[i11 & 31](i16, i4, i5, i14, i12, i2, i3, i13) | 0;
  i10 = i10 + 1 | 0;
 } while ((i10 | 0) != (i15 | 0));
 STACKTOP = i18;
 return i1 | 0;
}

function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2728] | 0) == 0 ? (___cxa_guard_acquire(2728) | 0) != 0 : 0) {
  if ((HEAP8[2736] | 0) == 0 ? (___cxa_guard_acquire(2736) | 0) != 0 : 0) {
   i1 = 31376;
   do {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    i1 = i1 + 12 | 0;
   } while ((i1 | 0) != 31544);
   ___cxa_atexit(351, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(2736);
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(31376, 31544) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(31388, 31572) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(31400, 31600) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(31412, 31632) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(31424, 31672) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(31436, 31708) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(31448, 31736) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(31460, 31772) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(31472, 31788) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(31484, 31804) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(31496, 31820) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(31508, 31836) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(31520, 31852) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(31532, 31868) | 0;
  HEAP32[7971] = 31376;
  ___cxa_guard_release(2728);
 }
 return HEAP32[7971] | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2712] | 0) == 0 ? (___cxa_guard_acquire(2712) | 0) != 0 : 0) {
  if ((HEAP8[2720] | 0) == 0 ? (___cxa_guard_acquire(2720) | 0) != 0 : 0) {
   i1 = 31204;
   do {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    i1 = i1 + 12 | 0;
   } while ((i1 | 0) != 31372);
   ___cxa_atexit(350, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(2720);
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(31204, 63069) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(31216, 63076) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(31228, 63083) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(31240, 63091) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(31252, 63101) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(31264, 63110) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(31276, 63117) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(31288, 63126) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(31300, 63130) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(31312, 63134) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(31324, 63138) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(31336, 63142) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(31348, 63146) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(31360, 63150) | 0;
  HEAP32[7843] = 31204;
  ___cxa_guard_release(2712);
 }
 return HEAP32[7843] | 0;
}

function _SDL_DrawLines(i15, i13, i8, i14) {
 i15 = i15 | 0;
 i13 = i13 | 0;
 i8 = i8 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i16 + 8 | 0;
 i9 = i16 + 24 | 0;
 i11 = i16 + 20 | 0;
 i10 = i16 + 16 | 0;
 i12 = i16 + 12 | 0;
 if (!i15) {
  i15 = _SDL_SetError(38624, i16) | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 i1 = HEAP32[i15 + 4 >> 2] | 0;
 switch (HEAPU8[i1 + 9 >> 0] | 0 | 0) {
 case 1:
  {
   if ((HEAPU8[i1 + 8 >> 0] | 0) < 8) i3 = 8; else i7 = 2;
   break;
  }
 case 2:
  {
   i7 = 1;
   break;
  }
 case 4:
  {
   i7 = 3;
   break;
  }
 default:
  i3 = 8;
 }
 if ((i3 | 0) == 8) {
  i15 = _SDL_SetError(38673, i2) | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 if ((i8 | 0) > 1) {
  i3 = i15 + 36 | 0;
  i6 = 1;
  do {
   i1 = i6 + -1 | 0;
   HEAP32[i9 >> 2] = HEAP32[i13 + (i1 << 3) >> 2];
   HEAP32[i11 >> 2] = HEAP32[i13 + (i1 << 3) + 4 >> 2];
   i1 = i13 + (i6 << 3) | 0;
   HEAP32[i10 >> 2] = HEAP32[i1 >> 2];
   i2 = i13 + (i6 << 3) + 4 | 0;
   HEAP32[i12 >> 2] = HEAP32[i2 >> 2];
   if (_SDL_IntersectRectAndLine(i3, i9, i11, i10, i12) | 0) {
    i4 = HEAP32[i10 >> 2] | 0;
    i5 = HEAP32[i12 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i1 >> 2] | 0)) i1 = (i5 | 0) != (HEAP32[i2 >> 2] | 0); else i1 = 1;
    FUNCTION_TABLE_viiiiiii[i7 & 7](i15, HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0, i4, i5, i14, i1 & 1);
   }
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) != (i8 | 0));
 }
 i1 = i8 + -1 | 0;
 i2 = HEAP32[i13 + (i1 << 3) >> 2] | 0;
 if ((HEAP32[i13 >> 2] | 0) == (i2 | 0)) {
  i1 = HEAP32[i13 + (i1 << 3) + 4 >> 2] | 0;
  if ((HEAP32[i13 + 4 >> 2] | 0) == (i1 | 0)) {
   i15 = 0;
   STACKTOP = i16;
   return i15 | 0;
  }
 } else i1 = HEAP32[i13 + (i1 << 3) + 4 >> 2] | 0;
 _SDL_DrawPoint(i15, i2, i1, i14) | 0;
 i15 = 0;
 STACKTOP = i16;
 return i15 | 0;
}

function _SDL_Blit_RGB888_ARGB8888_Blend(i19) {
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i1 = HEAP32[i19 + 52 >> 2] | 0;
 i14 = i19 + 28 | 0;
 i18 = HEAP32[i14 >> 2] | 0;
 i2 = i18 + -1 | 0;
 HEAP32[i14 >> 2] = i2;
 if (!i18) return;
 i15 = i19 + 20 | 0;
 i16 = i19 + 24 | 0;
 i17 = i19 + 12 | 0;
 i18 = i19 + 32 | 0;
 i13 = i1 & 112;
 do {
  i1 = HEAP32[i16 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i19 >> 2] | 0;
   i1 = HEAP32[i15 >> 2] | 0;
   i3 = i2;
  } else {
   i12 = HEAP32[i15 >> 2] | 0;
   i4 = HEAP32[i19 >> 2] | 0;
   i10 = i12;
   i11 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i6 = HEAP32[i11 >> 2] | 0;
    i2 = i6 >>> 16 & 255;
    i3 = i6 >>> 8 & 255;
    i6 = i6 & 255;
    i5 = HEAP32[i10 >> 2] | 0;
    i9 = i5 >>> 16 & 255;
    i8 = i5 >>> 8 & 255;
    i7 = i5 & 255;
    i5 = i5 >>> 24;
    switch (i13 | 0) {
    case 16:
     {
      i5 = 255;
      break;
     }
    case 32:
     {
      i2 = i9 + i2 | 0;
      i3 = i8 + i3 | 0;
      i6 = i7 + i6 | 0;
      i6 = i6 >>> 0 > 255 ? 255 : i6;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i6 = ((Math_imul(i7, i6) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i8, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i9, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {
      i6 = i7;
      i3 = i8;
      i2 = i9;
     }
    }
    HEAP32[i10 >> 2] = i3 << 8 | i2 << 16 | i6 | i5 << 24;
    if (!i1) break; else {
     i10 = i10 + 4 | 0;
     i11 = i11 + 4 | 0;
    }
   }
   i1 = i12;
   i3 = HEAP32[i14 >> 2] | 0;
  }
  HEAP32[i19 >> 2] = i4 + (HEAP32[i17 >> 2] | 0);
  HEAP32[i15 >> 2] = i1 + (HEAP32[i18 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i14 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_BGR888_ARGB8888_Blend(i19) {
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i1 = HEAP32[i19 + 52 >> 2] | 0;
 i14 = i19 + 28 | 0;
 i18 = HEAP32[i14 >> 2] | 0;
 i2 = i18 + -1 | 0;
 HEAP32[i14 >> 2] = i2;
 if (!i18) return;
 i15 = i19 + 20 | 0;
 i16 = i19 + 24 | 0;
 i17 = i19 + 12 | 0;
 i18 = i19 + 32 | 0;
 i13 = i1 & 112;
 do {
  i1 = HEAP32[i16 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i19 >> 2] | 0;
   i1 = HEAP32[i15 >> 2] | 0;
   i3 = i2;
  } else {
   i12 = HEAP32[i15 >> 2] | 0;
   i4 = HEAP32[i19 >> 2] | 0;
   i10 = i12;
   i11 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i2 = HEAP32[i11 >> 2] | 0;
    i6 = i2 >>> 16 & 255;
    i3 = i2 >>> 8 & 255;
    i2 = i2 & 255;
    i5 = HEAP32[i10 >> 2] | 0;
    i9 = i5 >>> 16 & 255;
    i8 = i5 >>> 8 & 255;
    i7 = i5 & 255;
    i5 = i5 >>> 24;
    switch (i13 | 0) {
    case 16:
     {
      i5 = 255;
      break;
     }
    case 32:
     {
      i2 = i9 + i2 | 0;
      i3 = i8 + i3 | 0;
      i6 = i6 + i7 | 0;
      i6 = i6 >>> 0 > 255 ? 255 : i6;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i6 = ((Math_imul(i6, i7) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i8, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i9, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {
      i6 = i7;
      i3 = i8;
      i2 = i9;
     }
    }
    HEAP32[i10 >> 2] = i3 << 8 | i2 << 16 | i6 | i5 << 24;
    if (!i1) break; else {
     i10 = i10 + 4 | 0;
     i11 = i11 + 4 | 0;
    }
   }
   i1 = i12;
   i3 = HEAP32[i14 >> 2] | 0;
  }
  HEAP32[i19 >> 2] = i4 + (HEAP32[i17 >> 2] | 0);
  HEAP32[i15 >> 2] = i1 + (HEAP32[i18 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i14 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_LockTexture(i6, i2, i8, i7) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i9 + 8 | 0;
 i3 = i9;
 i1 = i9 + 16 | 0;
 if ((i6 | 0) != 0 ? (HEAP32[i6 >> 2] | 0) == 37830 : 0) {
  if ((HEAP32[i6 + 8 >> 2] | 0) != 1) {
   i8 = _SDL_SetError(38037, i4) | 0;
   STACKTOP = i9;
   return i8 | 0;
  }
  if (!i2) {
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = HEAP32[i6 + 12 >> 2];
   HEAP32[i1 + 12 >> 2] = HEAP32[i6 + 16 >> 2];
   i2 = i1;
  }
  i1 = HEAP32[i6 + 40 >> 2] | 0;
  if (i1) {
   i8 = _SDL_SW_LockYUVTexture(i1, i2, i8, i7) | 0;
   STACKTOP = i9;
   return i8 | 0;
  }
  if (!(HEAP32[i6 + 36 >> 2] | 0)) {
   i5 = HEAP32[i6 + 32 >> 2] | 0;
   i8 = FUNCTION_TABLE_iiiiii[HEAP32[i5 + 36 >> 2] & 63](i5, i6, i2, i8, i7) | 0;
   STACKTOP = i9;
   return i8 | 0;
  }
  i3 = i6 + 52 | 0;
  HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
  i3 = HEAP32[i6 + 44 >> 2] | 0;
  i4 = HEAP32[i6 + 48 >> 2] | 0;
  i5 = Math_imul(i4, HEAP32[i2 + 4 >> 2] | 0) | 0;
  i2 = HEAP32[i2 >> 2] | 0;
  i1 = HEAP32[i6 + 4 >> 2] | 0;
  L19 : do if ((i1 | 0) == 0 | (i1 & -268435456 | 0) == 268435456) i1 = i1 & 255; else {
   if ((i1 | 0) < 1498831189) switch (i1 | 0) {
   case 844715353:
    {
     i1 = 2;
     break L19;
    }
   default:
    {}
   } else switch (i1 | 0) {
   case 1498831189:
    {
     i1 = 2;
     break L19;
    }
   default:
    {}
   }
   i1 = (i1 | 0) == 1431918169 ? 2 : 1;
  } while (0);
  HEAP32[i8 >> 2] = i3 + ((Math_imul(i1, i2) | 0) + i5);
  HEAP32[i7 >> 2] = i4;
  i8 = 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 _SDL_SetError(37831, i3) | 0;
 i8 = -1;
 STACKTOP = i9;
 return i8 | 0;
}

function _Color32DitherYUY2Mod2X(i18, i19, i4, i3, i5, i7, i6, i2, i1) {
 i18 = i18 | 0;
 i19 = i19 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i16 = (i2 << 1) + i1 | 0;
 i17 = (i2 | 0) / 2 | 0;
 if (!i6) return;
 i13 = (i2 + 1 | 0) >>> 0 < 3;
 i14 = i16 + 1 | 0;
 i11 = i16 + 3 | 0;
 i12 = i16 + 2 | 0;
 i15 = i17 << 2;
 i2 = i5;
 i1 = i7;
 while (1) {
  i6 = i6 + -1 | 0;
  if (!i13) {
   i10 = i1 + (i15 << 2) | 0;
   i9 = i2 + i15 | 0;
   i7 = i4;
   i8 = i3;
   i5 = i17;
   while (1) {
    i5 = i5 + -1 | 0;
    i23 = HEAPU8[i8 >> 0] | 0;
    i22 = (HEAP32[i18 + (i23 << 2) >> 2] | 0) + 256 | 0;
    i20 = HEAPU8[i2 >> 0] | 0;
    i23 = (HEAP32[i18 + ((i23 | 256) << 2) >> 2] | 0) + 1024 + (HEAP32[i18 + ((i20 | 512) << 2) >> 2] | 0) | 0;
    i20 = (HEAP32[i18 + ((i20 | 768) << 2) >> 2] | 0) + 1792 | 0;
    i21 = HEAPU8[i7 >> 0] | 0;
    i21 = HEAP32[i19 + (i21 + i23 << 2) >> 2] | HEAP32[i19 + (i21 + i22 << 2) >> 2] | HEAP32[i19 + (i21 + i20 << 2) >> 2];
    HEAP32[i1 + (i14 << 2) >> 2] = i21;
    HEAP32[i1 + (i16 << 2) >> 2] = i21;
    HEAP32[i1 + 4 >> 2] = i21;
    HEAP32[i1 >> 2] = i21;
    i21 = HEAPU8[i7 + 2 >> 0] | 0;
    i20 = HEAP32[i19 + (i21 + i23 << 2) >> 2] | HEAP32[i19 + (i21 + i22 << 2) >> 2] | HEAP32[i19 + (i21 + i20 << 2) >> 2];
    HEAP32[i1 + (i11 << 2) >> 2] = i20;
    HEAP32[i1 + (i12 << 2) >> 2] = i20;
    HEAP32[i1 + 12 >> 2] = i20;
    HEAP32[i1 + 8 >> 2] = i20;
    if (!i5) break; else {
     i7 = i7 + 4 | 0;
     i8 = i8 + 4 | 0;
     i2 = i2 + 4 | 0;
     i1 = i1 + 16 | 0;
    }
   }
   i4 = i4 + i15 | 0;
   i3 = i3 + i15 | 0;
   i2 = i9;
   i1 = i10;
  }
  if (!i6) break; else i1 = i1 + (i16 << 2) | 0;
 }
 return;
}

function _DISKAUD_OpenDevice(i6, i1, i3, i2) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i8;
 i2 = _SDL_getenv(44519) | 0;
 if (!i3) {
  i3 = _SDL_getenv(44538) | 0;
  i3 = (i3 | 0) == 0 ? 44556 : i3;
 }
 i1 = _SDL_malloc(16) | 0;
 i7 = i6 + 184 | 0;
 HEAP32[i7 >> 2] = i1;
 if (!i1) {
  i7 = _SDL_Error(0) | 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 _SDL_memset(i1, 0, 16) | 0;
 i4 = i6 + 16 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 HEAP32[i1 + 8 >> 2] = HEAP32[i4 >> 2];
 if (!i2) i2 = 150; else {
  i2 = _SDL_atoi(i2) | 0;
  i1 = HEAP32[i7 >> 2] | 0;
 }
 HEAP32[i1 + 12 >> 2] = i2;
 i2 = _SDL_RWFromFile(i3, 44569) | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 HEAP32[i1 >> 2] = i2;
 if (!i2) {
  if (!i1) {
   i7 = -1;
   STACKTOP = i8;
   return i7 | 0;
  }
  _SDL_free(HEAP32[i1 + 4 >> 2] | 0);
  i1 = HEAP32[i7 >> 2] | 0;
  HEAP32[i1 + 4 >> 2] = 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2) {
   FUNCTION_TABLE_ii[HEAP32[i2 + 16 >> 2] & 127](i2) | 0;
   i1 = HEAP32[i7 >> 2] | 0;
   HEAP32[i1 >> 2] = 0;
  }
  _SDL_free(i1);
  HEAP32[i7 >> 2] = 0;
  i7 = -1;
  STACKTOP = i8;
  return i7 | 0;
 }
 i1 = _SDL_malloc(HEAP32[i1 + 8 >> 2] | 0) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 HEAP32[i2 + 4 >> 2] = i1;
 if (i1) {
  _SDL_memset(i1, HEAPU8[i6 + 11 >> 0] | 0, HEAP32[i4 >> 2] | 0) | 0;
  i7 = HEAP32[5785] | 0;
  HEAP32[i5 >> 2] = i3;
  _fprintf(i7, 44572, i5) | 0;
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 if (!i2) {
  i7 = -1;
  STACKTOP = i8;
  return i7 | 0;
 }
 _SDL_free(0);
 i1 = HEAP32[i7 >> 2] | 0;
 HEAP32[i1 + 4 >> 2] = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2) {
  FUNCTION_TABLE_ii[HEAP32[i2 + 16 >> 2] & 127](i2) | 0;
  i1 = HEAP32[i7 >> 2] | 0;
  HEAP32[i1 >> 2] = 0;
 }
 _SDL_free(i1);
 HEAP32[i7 >> 2] = 0;
 i7 = -1;
 STACKTOP = i8;
 return i7 | 0;
}

function _SDL_SYS_JoystickUpdate(i1) {
 i1 = i1 | 0;
 var i2 = 0, d3 = 0.0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 1440 | 0;
 i8 = i9;
 i6 = HEAP32[i1 + 40 >> 2] | 0;
 if (!i6) {
  STACKTOP = i9;
  return;
 }
 if (_emscripten_get_gamepad_status(HEAP32[i6 >> 2] | 0, i8 | 0) | 0) {
  STACKTOP = i9;
  return;
 }
 d3 = +HEAPF64[i8 >> 3];
 if (!(d3 == 0.0) ? !(d3 != +HEAPF64[i6 + 32 >> 3]) : 0) {
  STACKTOP = i9;
  return;
 }
 i7 = i6 + 20 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) > 0) {
  i5 = i6 + 16 | 0;
  i4 = 0;
  do {
   i2 = HEAP32[i8 + 1040 + (i4 << 2) >> 2] | 0;
   if ((HEAP32[i6 + 1064 + (i4 << 2) >> 2] | 0) != (i2 | 0)) {
    _SDL_PrivateJoystickButton(HEAP32[i5 >> 2] | 0, i4 & 255, (i2 | 0) != 0 & 1) | 0;
    i1 = HEAP32[i7 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (i1 | 0));
 }
 i5 = i6 + 24 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if ((i1 | 0) > 0) {
  i4 = i6 + 16 | 0;
  i2 = 0;
  do {
   d3 = +HEAPF64[i8 + 16 + (i2 << 3) >> 3];
   if (+HEAPF64[i6 + 40 + (i2 << 3) >> 3] != d3) {
    _SDL_PrivateJoystickAxis(HEAP32[i4 >> 2] | 0, i2 & 255, ~~(d3 * 32767.0)) | 0;
    i1 = HEAP32[i5 >> 2] | 0;
   }
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) < (i1 | 0));
  HEAPF64[i6 + 32 >> 3] = +HEAPF64[i8 >> 3];
  if ((i1 | 0) > 0) {
   i1 = 0;
   do {
    HEAPF64[i6 + 40 + (i1 << 3) >> 3] = +HEAPF64[i8 + 16 + (i1 << 3) >> 3];
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (HEAP32[i5 >> 2] | 0));
  }
 } else HEAPF64[i6 + 32 >> 3] = +HEAPF64[i8 >> 3];
 if ((HEAP32[i7 >> 2] | 0) > 0) i1 = 0; else {
  STACKTOP = i9;
  return;
 }
 do {
  HEAPF64[i6 + 552 + (i1 << 3) >> 3] = +HEAPF64[i8 + 528 + (i1 << 3) >> 3];
  HEAP32[i6 + 1064 + (i1 << 2) >> 2] = HEAP32[i8 + 1040 + (i1 << 2) >> 2];
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) < (HEAP32[i7 >> 2] | 0));
 STACKTOP = i9;
 return;
}

function _SDL_PrivateGameControllerParseButton(i1, i6, i8) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i10 + 16 | 0;
 i4 = i10 + 8 | 0;
 i3 = i10;
 i7 = _SDL_GameControllerGetButtonFromString(i1) | 0;
 i1 = _SDL_GameControllerGetAxisFromString(i1) | 0;
 i2 = i6 + 1 | 0;
 i5 = _SDL_atoi(i2) | 0;
 switch (HEAP8[i6 >> 0] | 0) {
 case 97:
  {
   if ((i5 | 0) > 19) {
    HEAP32[i3 >> 2] = i5;
    _SDL_SetError(37018, i3) | 0;
    STACKTOP = i10;
    return;
   }
   if ((i1 | 0) != -1) {
    HEAP32[i8 + 20 + (i1 << 2) >> 2] = i5;
    HEAP32[i8 + 308 + (i5 << 2) >> 2] = i1;
    STACKTOP = i10;
    return;
   }
   if ((i7 | 0) == -1) {
    STACKTOP = i10;
    return;
   }
   HEAP32[i8 + 128 + (i7 << 2) >> 2] = i5;
   HEAP32[i8 + 548 + (i5 << 2) >> 2] = i7;
   STACKTOP = i10;
   return;
  }
 case 98:
  {
   if ((i5 | 0) > 19) {
    HEAP32[i4 >> 2] = i5;
    _SDL_SetError(37043, i4) | 0;
    STACKTOP = i10;
    return;
   }
   if ((i7 | 0) != -1) {
    HEAP32[i8 + 68 + (i7 << 2) >> 2] = i5;
    HEAP32[i8 + 468 + (i5 << 2) >> 2] = i7;
    STACKTOP = i10;
    return;
   }
   if ((i1 | 0) == -1) {
    STACKTOP = i10;
    return;
   }
   HEAP32[i8 + 44 + (i1 << 2) >> 2] = i5;
   HEAP32[i8 + 388 + (i5 << 2) >> 2] = i1;
   STACKTOP = i10;
   return;
  }
 case 104:
  {
   i2 = _SDL_atoi(i2) | 0;
   i1 = _SDL_atoi(i6 + 3 | 0) | 0;
   if ((i2 | 0) > 3) {
    HEAP32[i9 >> 2] = i5;
    _SDL_SetError(37070, i9) | 0;
   }
   if ((i7 | 0) == -1) {
    STACKTOP = i10;
    return;
   }
   HEAP32[i8 + 188 + (i7 << 3) >> 2] = i2;
   HEAP8[i8 + 188 + (i7 << 3) + 4 >> 0] = i1;
   HEAP32[i8 + 628 + ((i2 << 4 | i1) << 2) >> 2] = i7;
   STACKTOP = i10;
   return;
  }
 default:
  {
   STACKTOP = i10;
   return;
  }
 }
}

function _mbsnrtowcs(i2, i12, i3, i1, i9) {
 i2 = i2 | 0;
 i12 = i12 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 i8 = i13 + 8 | 0;
 i11 = i13;
 i7 = HEAP32[i12 >> 2] | 0;
 HEAP32[i11 >> 2] = i7;
 i10 = (i2 | 0) != 0;
 i1 = i10 ? i1 : 256;
 i2 = i10 ? i2 : i8;
 i4 = i7;
 L1 : do if ((i1 | 0) != 0 & (i7 | 0) != 0) {
  i6 = i1;
  i7 = i4;
  i1 = 0;
  while (1) {
   i4 = i3 >>> 2;
   i5 = i4 >>> 0 >= i6 >>> 0;
   if (!(i3 >>> 0 > 131 | i5)) {
    i4 = i7;
    break L1;
   }
   i4 = i5 ? i6 : i4;
   i3 = i3 - i4 | 0;
   i4 = _mbsrtowcs(i2, i11, i4, i9) | 0;
   if ((i4 | 0) == -1) {
    i1 = i3;
    break;
   }
   i14 = (i2 | 0) == (i8 | 0);
   i7 = i14 ? 0 : i4;
   i5 = i6 - i7 | 0;
   i2 = i14 ? i2 : i2 + (i4 << 2) | 0;
   i1 = i4 + i1 | 0;
   i4 = HEAP32[i11 >> 2] | 0;
   if ((i6 | 0) != (i7 | 0) & (i4 | 0) != 0) {
    i6 = i5;
    i7 = i4;
   } else {
    i6 = i5;
    break L1;
   }
  }
  i3 = i1;
  i6 = 0;
  i4 = HEAP32[i11 >> 2] | 0;
  i1 = -1;
 } else {
  i6 = i1;
  i1 = 0;
 } while (0);
 L8 : do if ((i4 | 0) != 0 ? (i6 | 0) != 0 & (i3 | 0) != 0 : 0) {
  i5 = i4;
  i4 = i2;
  while (1) {
   i2 = _mbrtowc(i4, i5, i3, i9) | 0;
   if ((i2 + 2 | 0) >>> 0 < 3) break;
   i5 = (HEAP32[i11 >> 2] | 0) + i2 | 0;
   HEAP32[i11 >> 2] = i5;
   i6 = i6 + -1 | 0;
   i1 = i1 + 1 | 0;
   if (!((i6 | 0) != 0 & (i3 | 0) != (i2 | 0))) break L8; else {
    i3 = i3 - i2 | 0;
    i4 = i4 + 4 | 0;
   }
  }
  switch (i2 | 0) {
  case -1:
   {
    i1 = -1;
    break L8;
   }
  case 0:
   {
    HEAP32[i11 >> 2] = 0;
    break L8;
   }
  default:
   {
    HEAP32[i9 >> 2] = 0;
    break L8;
   }
  }
 } while (0);
 if (i10) HEAP32[i12 >> 2] = HEAP32[i11 >> 2];
 STACKTOP = i13;
 return i1 | 0;
}

function _SDL_Blit_RGB888_BGR888_Blend(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i13 = i18 + 28 | 0;
 i17 = HEAP32[i13 >> 2] | 0;
 i2 = i17 + -1 | 0;
 HEAP32[i13 >> 2] = i2;
 if (!i17) return;
 i14 = i18 + 20 | 0;
 i15 = i18 + 24 | 0;
 i16 = i18 + 12 | 0;
 i17 = i18 + 32 | 0;
 i12 = i1 & 112;
 do {
  i1 = HEAP32[i15 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i18 >> 2] | 0;
   i1 = HEAP32[i14 >> 2] | 0;
   i3 = i2;
  } else {
   i11 = HEAP32[i14 >> 2] | 0;
   i4 = HEAP32[i18 >> 2] | 0;
   i9 = i11;
   i10 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i5 = HEAP32[i10 >> 2] | 0;
    i2 = i5 >>> 16 & 255;
    i3 = i5 >>> 8 & 255;
    i5 = i5 & 255;
    i8 = HEAP32[i9 >> 2] | 0;
    i6 = i8 >>> 16 & 255;
    i7 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    switch (i12 | 0) {
    case 16:
     break;
    case 32:
     {
      i2 = i2 + i8 | 0;
      i3 = i7 + i3 | 0;
      i5 = i6 + i5 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i6, i5) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i7, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i2, i8) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {
      i5 = i6;
      i3 = i7;
      i2 = i8;
     }
    }
    HEAP32[i9 >> 2] = i3 << 8 | i2 | i5 << 16;
    if (!i1) break; else {
     i9 = i9 + 4 | 0;
     i10 = i10 + 4 | 0;
    }
   }
   i1 = i11;
   i3 = HEAP32[i13 >> 2] | 0;
  }
  HEAP32[i18 >> 2] = i4 + (HEAP32[i16 >> 2] | 0);
  HEAP32[i14 >> 2] = i1 + (HEAP32[i17 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i13 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_BGR888_RGB888_Blend(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i13 = i18 + 28 | 0;
 i17 = HEAP32[i13 >> 2] | 0;
 i2 = i17 + -1 | 0;
 HEAP32[i13 >> 2] = i2;
 if (!i17) return;
 i14 = i18 + 20 | 0;
 i15 = i18 + 24 | 0;
 i16 = i18 + 12 | 0;
 i17 = i18 + 32 | 0;
 i12 = i1 & 112;
 do {
  i1 = HEAP32[i15 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i18 >> 2] | 0;
   i1 = HEAP32[i14 >> 2] | 0;
   i3 = i2;
  } else {
   i11 = HEAP32[i14 >> 2] | 0;
   i4 = HEAP32[i18 >> 2] | 0;
   i9 = i11;
   i10 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i2 = HEAP32[i10 >> 2] | 0;
    i5 = i2 >>> 16 & 255;
    i3 = i2 >>> 8 & 255;
    i2 = i2 & 255;
    i6 = HEAP32[i9 >> 2] | 0;
    i8 = i6 >>> 16 & 255;
    i7 = i6 >>> 8 & 255;
    i6 = i6 & 255;
    switch (i12 | 0) {
    case 16:
     break;
    case 32:
     {
      i2 = i8 + i2 | 0;
      i3 = i7 + i3 | 0;
      i5 = i5 + i6 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i6) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i7, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i8, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {
      i5 = i6;
      i3 = i7;
      i2 = i8;
     }
    }
    HEAP32[i9 >> 2] = i3 << 8 | i2 << 16 | i5;
    if (!i1) break; else {
     i9 = i9 + 4 | 0;
     i10 = i10 + 4 | 0;
    }
   }
   i1 = i11;
   i3 = HEAP32[i13 >> 2] | 0;
  }
  HEAP32[i18 >> 2] = i4 + (HEAP32[i16 >> 2] | 0);
  HEAP32[i14 >> 2] = i1 + (HEAP32[i17 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i13 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_BGR888_BGR888_Blend(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i13 = i18 + 28 | 0;
 i17 = HEAP32[i13 >> 2] | 0;
 i2 = i17 + -1 | 0;
 HEAP32[i13 >> 2] = i2;
 if (!i17) return;
 i14 = i18 + 20 | 0;
 i15 = i18 + 24 | 0;
 i16 = i18 + 12 | 0;
 i17 = i18 + 32 | 0;
 i12 = i1 & 112;
 do {
  i1 = HEAP32[i15 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i18 >> 2] | 0;
   i1 = HEAP32[i14 >> 2] | 0;
   i3 = i2;
  } else {
   i11 = HEAP32[i14 >> 2] | 0;
   i4 = HEAP32[i18 >> 2] | 0;
   i9 = i11;
   i10 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i2 = HEAP32[i10 >> 2] | 0;
    i5 = i2 >>> 16 & 255;
    i3 = i2 >>> 8 & 255;
    i2 = i2 & 255;
    i8 = HEAP32[i9 >> 2] | 0;
    i6 = i8 >>> 16 & 255;
    i7 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    switch (i12 | 0) {
    case 16:
     break;
    case 32:
     {
      i2 = i8 + i2 | 0;
      i3 = i7 + i3 | 0;
      i5 = i6 + i5 | 0;
      i5 = i5 >>> 0 > 255 ? 255 : i5;
      i3 = i3 >>> 0 > 255 ? 255 : i3;
      i2 = i2 >>> 0 > 255 ? 255 : i2;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i6, i5) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i7, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i8, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {
      i5 = i6;
      i3 = i7;
      i2 = i8;
     }
    }
    HEAP32[i9 >> 2] = i3 << 8 | i2 | i5 << 16;
    if (!i1) break; else {
     i9 = i9 + 4 | 0;
     i10 = i10 + 4 | 0;
    }
   }
   i1 = i11;
   i3 = HEAP32[i13 >> 2] | 0;
  }
  HEAP32[i18 >> 2] = i4 + (HEAP32[i16 >> 2] | 0);
  HEAP32[i14 >> 2] = i1 + (HEAP32[i17 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i13 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function __ZNSt3__16vectorINS_10shared_ptrI8ObstacleEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i11, i9) {
 i11 = i11 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i12 = 0, i13 = 0;
 i12 = i11 + 4 | 0;
 i10 = HEAP32[i11 >> 2] | 0;
 i2 = ((HEAP32[i12 >> 2] | 0) - i10 >> 3) + 1 | 0;
 if (i2 >>> 0 > 536870911) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
 i13 = i11 + 8 | 0;
 i4 = i10;
 i1 = (HEAP32[i13 >> 2] | 0) - i4 | 0;
 if (i1 >> 3 >>> 0 < 268435455) {
  i1 = i1 >> 2;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i3 = HEAP32[i12 >> 2] | 0;
  i2 = i3 - i4 >> 3;
  if (!i1) {
   i6 = 0;
   i7 = 0;
   i5 = i2;
  } else i8 = 6;
 } else {
  i3 = HEAP32[i12 >> 2] | 0;
  i1 = 536870911;
  i2 = i3 - i4 >> 3;
  i8 = 6;
 }
 if ((i8 | 0) == 6) {
  i6 = i1;
  i7 = __Znwj(i1 << 3) | 0;
  i5 = i2;
 }
 i2 = i7 + (i5 << 3) | 0;
 i1 = i2;
 i6 = i7 + (i6 << 3) | 0;
 HEAP32[i2 >> 2] = HEAP32[i9 >> 2];
 i8 = i9 + 4 | 0;
 HEAP32[i7 + (i5 << 3) + 4 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i9 >> 2] = 0;
 HEAP32[i8 >> 2] = 0;
 i5 = i7 + (i5 + 1 << 3) | 0;
 if ((i3 | 0) == (i10 | 0)) i2 = i11; else {
  do {
   i9 = i3;
   i3 = i3 + -8 | 0;
   HEAP32[i2 + -8 >> 2] = HEAP32[i3 >> 2];
   i9 = i9 + -4 | 0;
   HEAP32[i2 + -4 >> 2] = HEAP32[i9 >> 2];
   HEAP32[i3 >> 2] = 0;
   HEAP32[i9 >> 2] = 0;
   i2 = i1 + -8 | 0;
   i1 = i2;
  } while ((i3 | 0) != (i10 | 0));
  i2 = i11;
  i4 = HEAP32[i11 >> 2] | 0;
 }
 HEAP32[i2 >> 2] = i1;
 i1 = HEAP32[i12 >> 2] | 0;
 HEAP32[i12 >> 2] = i5;
 HEAP32[i13 >> 2] = i6;
 i3 = i4;
 if ((i1 | 0) != (i3 | 0)) do {
  i2 = HEAP32[i1 + -4 >> 2] | 0;
  i1 = i1 + -8 | 0;
  if (i2) __ZNSt3__119__shared_weak_count16__release_sharedEv(i2);
 } while ((i1 | 0) != (i3 | 0));
 if (!i4) return;
 __ZdlPv(i4);
 return;
}

function _SDL_DrawPoints(i1, i15, i14, i13) {
 i1 = i1 | 0;
 i15 = i15 | 0;
 i14 = i14 | 0;
 i13 = i13 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i16 = 0, i17 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!i1) {
  i16 = _SDL_SetError(40249, i17) | 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 i9 = i1 + 4 | 0;
 if ((HEAPU8[(HEAP32[i9 >> 2] | 0) + 8 >> 0] | 0) < 8) {
  i16 = _SDL_SetError(38761, i17 + 8 | 0) | 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 i12 = HEAP32[i1 + 36 >> 2] | 0;
 i6 = i12 + -1 + (HEAP32[i1 + 44 >> 2] | 0) | 0;
 i7 = HEAP32[i1 + 40 >> 2] | 0;
 i8 = i7 + -1 + (HEAP32[i1 + 48 >> 2] | 0) | 0;
 if ((i14 | 0) <= 0) {
  i16 = 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 i10 = i13 & 255;
 i11 = i1 + 20 | 0;
 i1 = i1 + 16 | 0;
 i2 = i13 & 65535;
 i5 = 0;
 L12 : while (1) {
  i3 = HEAP32[i15 + (i5 << 3) >> 2] | 0;
  i4 = HEAP32[i15 + (i5 << 3) + 4 >> 2] | 0;
  L14 : do if (!((i4 | 0) > (i8 | 0) | ((i3 | 0) < (i12 | 0) | (i3 | 0) > (i6 | 0) | (i4 | 0) < (i7 | 0)))) switch (HEAPU8[(HEAP32[i9 >> 2] | 0) + 9 >> 0] | 0 | 0) {
  case 3:
   break L12;
  case 1:
   {
    HEAP8[(HEAP32[i11 >> 2] | 0) + ((Math_imul(HEAP32[i1 >> 2] | 0, i4) | 0) + i3) >> 0] = i10;
    break L14;
   }
  case 2:
   {
    HEAP16[(HEAP32[i11 >> 2] | 0) + ((Math_imul(HEAP32[i1 >> 2] | 0, i4) | 0) + (i3 << 1)) >> 1] = i2;
    break L14;
   }
  case 4:
   {
    HEAP32[(HEAP32[i11 >> 2] | 0) + ((Math_imul(HEAP32[i1 >> 2] | 0, i4) | 0) + (i3 << 2)) >> 2] = i13;
    break L14;
   }
  default:
   break L14;
  } while (0);
  i5 = i5 + 1 | 0;
  if ((i5 | 0) >= (i14 | 0)) {
   i1 = 0;
   i16 = 14;
   break;
  }
 }
 if ((i16 | 0) == 14) {
  STACKTOP = i17;
  return i1 | 0;
 }
 i16 = _SDL_Error(4) | 0;
 STACKTOP = i17;
 return i16 | 0;
}

function __ZN13PlayerVehicle6updateEfRNSt3__16vectorI6ActionNS0_9allocatorIS2_EEEE(i19, d18, i1) {
 i19 = i19 | 0;
 d18 = +d18;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i20 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i10 = i20 + 56 | 0;
 i11 = i20 + 48 | 0;
 i12 = i20 + 40 | 0;
 i13 = i20 + 32 | 0;
 i14 = i20 + 24 | 0;
 i15 = i20 + 16 | 0;
 i16 = i20 + 8 | 0;
 i17 = i20;
 i2 = HEAP32[i1 >> 2] | 0;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 if ((i2 | 0) == (i3 | 0)) {
  __ZN10GameObject6updateEfRNSt3__16vectorI6ActionNS0_9allocatorIS2_EEEE(i19, d18, 0);
  STACKTOP = i20;
  return;
 }
 i4 = i19 + 12 | 0;
 i5 = i19 + 36 | 0;
 i6 = i11 + 4 | 0;
 i7 = i13 + 4 | 0;
 i8 = i15 + 4 | 0;
 i9 = i17 + 4 | 0;
 do {
  i1 = HEAP32[i2 >> 2] | 0;
  if (!i1) {
   i1 = HEAP32[i5 >> 2] | 0;
   HEAPF32[i11 >> 2] = 0.0;
   HEAP32[i6 >> 2] = i1;
   __ZNK5Vec2fmiERKS_(i10, i4, i11);
   __ZN5Vec2faSERKS_(i4, i10) | 0;
   i1 = HEAP32[i2 >> 2] | 0;
  }
  if ((i1 | 0) == 1) {
   i1 = HEAP32[i5 >> 2] | 0;
   HEAPF32[i13 >> 2] = 0.0;
   HEAP32[i7 >> 2] = i1;
   __ZNK5Vec2fplERKS_(i12, i4, i13);
   __ZN5Vec2faSERKS_(i4, i12) | 0;
   i1 = HEAP32[i2 >> 2] | 0;
  }
  if ((i1 | 0) == 2) {
   HEAP32[i15 >> 2] = HEAP32[i5 >> 2];
   HEAPF32[i8 >> 2] = 0.0;
   __ZNK5Vec2fmiERKS_(i14, i4, i15);
   __ZN5Vec2faSERKS_(i4, i14) | 0;
   i1 = HEAP32[i2 >> 2] | 0;
  }
  if ((i1 | 0) == 3) {
   HEAP32[i17 >> 2] = HEAP32[i5 >> 2];
   HEAPF32[i9 >> 2] = 0.0;
   __ZNK5Vec2fplERKS_(i16, i4, i17);
   __ZN5Vec2faSERKS_(i4, i16) | 0;
  }
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) != (i3 | 0));
 __ZN10GameObject6updateEfRNSt3__16vectorI6ActionNS0_9allocatorIS2_EEEE(i19, d18, 0);
 STACKTOP = i20;
 return;
}

function _Map1to1(i16, i15, i2) {
 i16 = i16 | 0;
 i15 = i15 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i17 = 0, i18 = 0, i19 = 0;
 if (i2) {
  i1 = HEAP32[i16 >> 2] | 0;
  do if ((i1 | 0) <= (HEAP32[i15 >> 2] | 0)) {
   if ((i16 | 0) != (i15 | 0) ? (_SDL_memcmp(HEAP32[i16 + 4 >> 2] | 0, HEAP32[i15 + 4 >> 2] | 0, i1 << 2) | 0) != 0 : 0) break;
   HEAP32[i2 >> 2] = 1;
   i16 = 0;
   return i16 | 0;
  } while (0);
  HEAP32[i2 >> 2] = 0;
 }
 i1 = _SDL_malloc(HEAP32[i16 >> 2] | 0) | 0;
 if (!i1) {
  _SDL_Error(0) | 0;
  i16 = 0;
  return i16 | 0;
 }
 if ((HEAP32[i16 >> 2] | 0) <= 0) {
  i16 = i1;
  return i16 | 0;
 }
 i12 = i16 + 4 | 0;
 i13 = i15 + 4 | 0;
 i14 = 0;
 do {
  i2 = HEAP32[i12 >> 2] | 0;
  i7 = HEAP32[i15 >> 2] | 0;
  L20 : do if ((i7 | 0) > 0) {
   i8 = HEAP32[i13 >> 2] | 0;
   i9 = HEAPU8[i2 + (i14 << 2) >> 0] | 0;
   i10 = HEAPU8[i2 + (i14 << 2) + 1 >> 0] | 0;
   i11 = HEAPU8[i2 + (i14 << 2) + 2 >> 0] | 0;
   i5 = HEAPU8[i2 + (i14 << 2) + 3 >> 0] | 0;
   i6 = 0;
   i2 = 0;
   i4 = -1;
   while (1) {
    i18 = (HEAPU8[i8 + (i6 << 2) >> 0] | 0) - i9 | 0;
    i19 = (HEAPU8[i8 + (i6 << 2) + 1 >> 0] | 0) - i10 | 0;
    i17 = (HEAPU8[i8 + (i6 << 2) + 2 >> 0] | 0) - i11 | 0;
    i3 = (HEAPU8[i8 + (i6 << 2) + 3 >> 0] | 0) - i5 | 0;
    i3 = (Math_imul(i19, i19) | 0) + (Math_imul(i18, i18) | 0) + (Math_imul(i17, i17) | 0) + (Math_imul(i3, i3) | 0) | 0;
    if (i3 >>> 0 < i4 >>> 0) {
     i2 = i6 & 255;
     if (!i3) break L20;
    } else i3 = i4;
    i6 = i6 + 1 | 0;
    if ((i6 | 0) >= (i7 | 0)) break; else i4 = i3;
   }
  } else i2 = 0; while (0);
  HEAP8[i1 + i14 >> 0] = i2;
  i14 = i14 + 1 | 0;
 } while ((i14 | 0) < (HEAP32[i16 >> 2] | 0));
 return i1 | 0;
}

function _SDL_BlendPoint_ARGB8888(i5, i8, i9, i4, i7, i6, i3, i1) {
 i5 = i5 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i1 = i1 & 255;
 i2 = i1 ^ 255;
 switch (i4 | 0) {
 case 1:
  {
   i9 = (HEAP32[i5 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i5 + 16 >> 2] | 0, i9) | 0) + (i8 << 2)) | 0;
   i8 = HEAP32[i9 >> 2] | 0;
   HEAP32[i9 >> 2] = (((Math_imul(i8 >>> 8 & 255, i2) | 0) >>> 0) / 255 | 0) + (i6 & 255) << 8 | (((Math_imul(i8 >>> 16 & 255, i2) | 0) >>> 0) / 255 | 0) + (i7 & 255) << 16 | (((Math_imul(i8 & 255, i2) | 0) >>> 0) / 255 | 0) + (i3 & 255) | (((Math_imul(i8 >>> 24, i2) | 0) >>> 0) / 255 | 0) + i1 << 24;
   return 0;
  }
 case 2:
  {
   i9 = (HEAP32[i5 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i5 + 16 >> 2] | 0, i9) | 0) + (i8 << 2)) | 0;
   i5 = HEAP32[i9 >> 2] | 0;
   i7 = (i5 >>> 16 & 255) + (i7 & 255) | 0;
   i8 = (i5 >>> 8 & 255) + (i6 & 255) | 0;
   i6 = (i5 & 255) + (i3 & 255) | 0;
   HEAP32[i9 >> 2] = (i6 >>> 0 > 255 ? 255 : i6) | i5 & -16777216 | (i7 >>> 0 > 255 ? 16711680 : i7 << 16) | (i8 >>> 0 > 255 ? 65280 : i8 << 8);
   return 0;
  }
 case 4:
  {
   i9 = (HEAP32[i5 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i5 + 16 >> 2] | 0, i9) | 0) + (i8 << 2)) | 0;
   i8 = HEAP32[i9 >> 2] | 0;
   HEAP32[i9 >> 2] = (((Math_imul(i8 >>> 16 & 255, i7 & 255) | 0) >>> 0) / 255 | 0) << 16 | i8 & -16777216 | (((Math_imul(i8 >>> 8 & 255, i6 & 255) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i8 & 255, i3 & 255) | 0) >>> 0) / 255 | 0);
   return 0;
  }
 default:
  {
   HEAP32[(HEAP32[i5 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i5 + 16 >> 2] | 0, i9) | 0) + (i8 << 2)) >> 2] = (i6 & 255) << 8 | (i7 & 255) << 16 | i3 & 255 | i1 << 24;
   return 0;
  }
 }
 return 0;
}

function _SDL_QuitSubSystem(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 do if (i2 & 8192) {
  i2 = i2 | 512;
  i4 = HEAP8[35274] | 0;
  if (i4 << 24 >> 24) {
   if (HEAP32[1527] | i4 << 24 >> 24 == 1) {
    _SDL_GameControllerQuit();
    i4 = HEAP8[35274] | 0;
    if (!(i4 << 24 >> 24)) break;
   }
   HEAP8[35274] = i4 + -1 << 24 >> 24;
  }
 } while (0);
 do if (i2 & 512) {
  i2 = i2 | 16384;
  i4 = HEAP8[35270] | 0;
  if (i4 << 24 >> 24) {
   if (HEAP32[1527] | i4 << 24 >> 24 == 1) {
    _SDL_JoystickQuit();
    i4 = HEAP8[35270] | 0;
    if (!(i4 << 24 >> 24)) break;
   }
   HEAP8[35270] = i4 + -1 << 24 >> 24;
  }
 } while (0);
 do if ((i2 & 16 | 0) != 0 ? (i3 = HEAP8[35265] | 0, i3 << 24 >> 24 != 0) : 0) {
  if (HEAP32[1527] | i3 << 24 >> 24 == 1) {
   _SDL_AudioQuit();
   i3 = HEAP8[35265] | 0;
   if (!(i3 << 24 >> 24)) break;
  }
  HEAP8[35265] = i3 + -1 << 24 >> 24;
 } while (0);
 do if (i2 & 32) {
  i2 = i2 | 16384;
  i3 = HEAP8[35266] | 0;
  if (i3 << 24 >> 24) {
   if (HEAP32[1527] | i3 << 24 >> 24 == 1) {
    _SDL_VideoQuit();
    i3 = HEAP8[35266] | 0;
    if (!(i3 << 24 >> 24)) break;
   }
   HEAP8[35266] = i3 + -1 << 24 >> 24;
  }
 } while (0);
 do if ((i2 & 1 | 0) != 0 ? (i1 = HEAP8[35261] | 0, i1 << 24 >> 24 != 0) : 0) {
  if (HEAP32[1527] | i1 << 24 >> 24 == 1) {
   _SDL_TimerQuit();
   i1 = HEAP8[35261] | 0;
   if (!(i1 << 24 >> 24)) break;
  }
  HEAP8[35261] = i1 + -1 << 24 >> 24;
 } while (0);
 if (!(i2 & 16384)) return;
 i1 = HEAP8[35275] | 0;
 if (!(i1 << 24 >> 24)) return;
 if (HEAP32[1527] | i1 << 24 >> 24 == 1) {
  _SDL_QuitQuit();
  _SDL_StopEventLoop();
  i1 = HEAP8[35275] | 0;
  if (!(i1 << 24 >> 24)) return;
 }
 HEAP8[35275] = i1 + -1 << 24 >> 24;
 return;
}

function _SDL_SoftBlit(i9, i6, i7, i4) {
 i9 = i9 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 if (!(HEAP32[i7 >> 2] & 2)) {
  i8 = 0;
  i5 = 1;
 } else {
  i5 = (_SDL_LockSurface(i7) | 0) >>> 31 ^ 1;
  i8 = i5;
 }
 if (HEAP32[i9 >> 2] & 2) {
  i11 = _SDL_LockSurface(i9) | 0;
  i1 = i11 >>> 31 ^ 1;
  if ((i11 | 0) < 0) i2 = -1; else i10 = 5;
 } else {
  i1 = 0;
  i10 = 5;
 }
 if ((i10 | 0) == 5) if (i5) if (((i6 | 0) != 0 ? (i2 = HEAP32[i6 + 8 >> 2] | 0, (i2 | 0) >= 1) : 0) ? (i3 = HEAP32[i6 + 12 >> 2] | 0, (i3 | 0) >= 1) : 0) {
  i10 = HEAP32[i9 + 52 >> 2] | 0;
  i11 = i10 + 16 | 0;
  i12 = HEAP32[i9 + 16 >> 2] | 0;
  i13 = Math_imul(HEAP32[i6 + 4 >> 2] & 65535, i12) | 0;
  i5 = HEAPU8[(HEAP32[i10 + 56 >> 2] | 0) + 9 >> 0] | 0;
  HEAP32[i11 >> 2] = (HEAP32[i9 + 20 >> 2] | 0) + ((Math_imul(i5, HEAP32[i6 >> 2] & 65535) | 0) + i13);
  HEAP32[i10 + 20 >> 2] = i2;
  HEAP32[i10 + 24 >> 2] = i3;
  HEAP32[i10 + 28 >> 2] = i12;
  HEAP32[i10 + 32 >> 2] = i12 - (Math_imul(i5, i2) | 0);
  i5 = HEAP32[i7 + 16 >> 2] | 0;
  i2 = Math_imul(HEAP32[i4 + 4 >> 2] & 65535, i5) | 0;
  i6 = HEAPU8[(HEAP32[i10 + 60 >> 2] | 0) + 9 >> 0] | 0;
  HEAP32[i10 + 36 >> 2] = (HEAP32[i7 + 20 >> 2] | 0) + ((Math_imul(i6, HEAP32[i4 >> 2] & 65535) | 0) + i2);
  i2 = HEAP32[i4 + 8 >> 2] | 0;
  HEAP32[i10 + 40 >> 2] = i2;
  HEAP32[i10 + 44 >> 2] = HEAP32[i4 + 12 >> 2];
  HEAP32[i10 + 48 >> 2] = i5;
  HEAP32[i10 + 52 >> 2] = i5 - (Math_imul(i6, i2) | 0);
  FUNCTION_TABLE_vi[HEAP32[i10 + 12 >> 2] & 511](i11);
  i2 = 0;
 } else i2 = 0; else i2 = -1;
 if (i8) _SDL_UnlockSurface(i7);
 if (!i1) return i2 | 0;
 _SDL_UnlockSurface(i9);
 return i2 | 0;
}

function _SW_RenderCopy(i8, i7, i11, i9) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 i11 = i11 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i10 = 0, i12 = 0, i13 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i10 = i12;
 i4 = i8 + 316 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if (!i1) {
  i2 = i5 + 4 | 0;
  i13 = HEAP32[i2 >> 2] | 0;
  HEAP32[i5 >> 2] = i13;
  i1 = i13;
  if (!i13) {
   i1 = _SDL_GetWindowSurface(HEAP32[i8 + 188 >> 2] | 0) | 0;
   do if (((i1 | 0) != 0 ? (HEAP32[i2 >> 2] = i1, HEAP32[i5 >> 2] = i1, i6 = HEAP32[HEAP32[i4 >> 2] >> 2] | 0, (i6 | 0) != 0) : 0) ? (_SDL_SetClipRect(i6, i8 + 212 | 0) | 0, i3 = HEAP32[HEAP32[i4 >> 2] >> 2] | 0, (i3 | 0) != 0) : 0) if (!(HEAP32[i8 + 276 >> 2] | 0)) {
    _SDL_SetClipRect(i3, 0) | 0;
    break;
   } else {
    _SDL_SetClipRect(i3, i8 + 244 | 0) | 0;
    break;
   } while (0);
   i1 = HEAP32[i5 >> 2] | 0;
  }
  if (!i1) {
   i13 = -1;
   STACKTOP = i12;
   return i13 | 0;
  }
 }
 i3 = HEAP32[i7 + 68 >> 2] | 0;
 i4 = HEAP32[i8 + 212 >> 2] | 0;
 i2 = HEAP32[i8 + 216 >> 2] | 0;
 if (!(i4 | i2)) {
  HEAP32[i10 >> 2] = ~~+HEAPF32[i9 >> 2];
  HEAP32[i10 + 4 >> 2] = ~~+HEAPF32[i9 + 4 >> 2];
 } else {
  HEAP32[i10 >> 2] = ~~(+(i4 | 0) + +HEAPF32[i9 >> 2]);
  HEAP32[i10 + 4 >> 2] = ~~(+(i2 | 0) + +HEAPF32[i9 + 4 >> 2]);
 }
 i8 = ~~+HEAPF32[i9 + 8 >> 2];
 HEAP32[i10 + 8 >> 2] = i8;
 i13 = ~~+HEAPF32[i9 + 12 >> 2];
 HEAP32[i10 + 12 >> 2] = i13;
 if ((HEAP32[i11 + 8 >> 2] | 0) == (i8 | 0) ? (HEAP32[i11 + 12 >> 2] | 0) == (i13 | 0) : 0) {
  i13 = _SDL_UpperBlit(i3, i11, i1, i10) | 0;
  STACKTOP = i12;
  return i13 | 0;
 }
 i13 = _SDL_UpperBlitScaled(i3, i11, i1, i10) | 0;
 STACKTOP = i12;
 return i13 | 0;
}

function _GLES2_GetShader(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 L1 : do switch (i2 | 0) {
 case 0:
  {
   i1 = 12568;
   break;
  }
 case 1:
  switch (i1 | 0) {
  case 0:
   {
    i1 = 12588;
    break L1;
   }
  case 1:
   {
    i1 = 12548;
    break L1;
   }
  case 2:
   {
    i1 = 12528;
    break L1;
   }
  case 4:
   {
    i1 = 12508;
    break L1;
   }
  default:
   {
    i1 = 0;
    break L1;
   }
  }
 case 2:
  switch (i1 | 0) {
  case 0:
   {
    i1 = 12608;
    break L1;
   }
  case 1:
   {
    i1 = 12488;
    break L1;
   }
  case 2:
   {
    i1 = 12468;
    break L1;
   }
  case 4:
   {
    i1 = 12448;
    break L1;
   }
  default:
   {
    i1 = 0;
    break L1;
   }
  }
 case 3:
  switch (i1 | 0) {
  case 0:
   {
    i1 = 12628;
    break L1;
   }
  case 1:
   {
    i1 = 12428;
    break L1;
   }
  case 2:
   {
    i1 = 12408;
    break L1;
   }
  case 4:
   {
    i1 = 12388;
    break L1;
   }
  default:
   {
    i1 = 0;
    break L1;
   }
  }
 case 5:
  switch (i1 | 0) {
  case 0:
   {
    i1 = 12648;
    break L1;
   }
  case 1:
   {
    i1 = 12368;
    break L1;
   }
  case 2:
   {
    i1 = 12348;
    break L1;
   }
  case 4:
   {
    i1 = 12328;
    break L1;
   }
  default:
   {
    i1 = 0;
    break L1;
   }
  }
 case 4:
  switch (i1 | 0) {
  case 0:
   {
    i1 = 12668;
    break L1;
   }
  case 1:
   {
    i1 = 12308;
    break L1;
   }
  case 2:
   {
    i1 = 12288;
    break L1;
   }
  case 4:
   {
    i1 = 12268;
    break L1;
   }
  default:
   {
    i1 = 0;
    break L1;
   }
  }
 case 6:
  {
   i1 = 12248;
   break;
  }
 case 7:
  {
   i1 = 12228;
   break;
  }
 case 8:
  {
   i1 = 12208;
   break;
  }
 default:
  i1 = 0;
 } while (0);
 return i1 | 0;
}

function _Emscripten_OpenDevice(i10, i2, i1, i3) {
 i10 = i10 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var d4 = 0.0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i9 + 8 | 0;
 i3 = i9;
 i8 = i10 + 4 | 0;
 i2 = i10 + 8 | 0;
 i1 = _SDL_FirstAudioFormat(HEAP16[i2 >> 1] | 0) | 0;
 L1 : do if (i1 << 16 >> 16) {
  while (1) {
   if (i1 << 16 >> 16 == -32480) break;
   i1 = _SDL_NextAudioFormat() | 0;
   if (!(i1 << 16 >> 16)) break L1;
  }
  HEAP16[i2 >> 1] = -32480;
  _SDL_NextAudioFormat() | 0;
  i1 = _SDL_malloc(20) | 0;
  i7 = i10 + 184 | 0;
  HEAP32[i7 >> 2] = i1;
  if (!i1) {
   i10 = _SDL_Error(0) | 0;
   STACKTOP = i9;
   return i10 | 0;
  }
  _SDL_memset(i1, 0, 20) | 0;
  if ((_emscripten_asm_const_0(4) | 0) < 0) {
   i10 = _SDL_SetError(45185, i5) | 0;
   STACKTOP = i9;
   return i10 | 0;
  }
  i5 = _emscripten_asm_const_0(5) | 0;
  i2 = HEAP32[i8 >> 2] | 0;
  i3 = i10 + 12 | 0;
  if ((i2 | 0) != (i5 | 0)) {
   i1 = HEAP16[i3 >> 1] | 0;
   L16 : do if (i1 << 16 >> 16) {
    i1 = i1 & 65535;
    d6 = +(i5 | 0);
    d4 = +(i1 | 0) / d6 * +(i2 | 0);
    if (!(+_SDL_floor(d4) == d4)) do {
     if ((i1 | 0) <= 1) break L16;
     i1 = i1 + -1 | 0;
     d4 = +(i1 | 0) / d6 * +(HEAP32[i8 >> 2] | 0);
    } while (!(+_SDL_floor(d4) == d4));
    i2 = ~~+_SDL_floor(d4) >>> 0;
    HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] = i2;
   } while (0);
   HEAP32[i8 >> 2] = i5;
  }
  _SDL_CalculateAudioSpec(i8);
  _emscripten_asm_const_4(6, HEAPU8[i10 + 10 >> 0] | 0 | 0, HEAPU16[i3 >> 1] | 0 | 0, 316, i10 | 0) | 0;
  i10 = 0;
  STACKTOP = i9;
  return i10 | 0;
 } while (0);
 i10 = _SDL_SetError(44806, i3) | 0;
 STACKTOP = i9;
 return i10 | 0;
}

function _Color24DitherYUY2Mod1X(i16, i17, i4, i3, i5, i7, i6, i2, i1) {
 i16 = i16 | 0;
 i17 = i17 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i15 = (i2 | 0) / 2 | 0;
 i14 = i1 * 3 | 0;
 if (!i6) return;
 i11 = (i2 + 1 | 0) >>> 0 < 3;
 i12 = i15 * 6 | 0;
 i13 = i15 << 2;
 i2 = i5;
 i1 = i7;
 while (1) {
  i6 = i6 + -1 | 0;
  if (!i11) {
   i10 = i1 + i12 | 0;
   i9 = i2 + i13 | 0;
   i8 = i3;
   i7 = i4;
   i5 = i15;
   while (1) {
    i5 = i5 + -1 | 0;
    i21 = HEAPU8[i8 >> 0] | 0;
    i20 = (HEAP32[i16 + (i21 << 2) >> 2] | 0) + 256 | 0;
    i18 = HEAPU8[i2 >> 0] | 0;
    i21 = (HEAP32[i16 + ((i21 | 256) << 2) >> 2] | 0) + 1024 + (HEAP32[i16 + ((i18 | 512) << 2) >> 2] | 0) | 0;
    i18 = (HEAP32[i16 + ((i18 | 768) << 2) >> 2] | 0) + 1792 | 0;
    i19 = HEAPU8[i7 >> 0] | 0;
    i19 = HEAP32[i17 + (i19 + i21 << 2) >> 2] | HEAP32[i17 + (i19 + i20 << 2) >> 2] | HEAP32[i17 + (i19 + i18 << 2) >> 2];
    HEAP8[i1 >> 0] = i19;
    HEAP8[i1 + 1 >> 0] = i19 >>> 8;
    HEAP8[i1 + 2 >> 0] = i19 >>> 16;
    i19 = HEAPU8[i7 + 2 >> 0] | 0;
    i18 = HEAP32[i17 + (i19 + i21 << 2) >> 2] | HEAP32[i17 + (i19 + i20 << 2) >> 2] | HEAP32[i17 + (i19 + i18 << 2) >> 2];
    HEAP8[i1 + 3 >> 0] = i18;
    HEAP8[i1 + 4 >> 0] = i18 >>> 8;
    HEAP8[i1 + 5 >> 0] = i18 >>> 16;
    if (!i5) break; else {
     i8 = i8 + 4 | 0;
     i2 = i2 + 4 | 0;
     i7 = i7 + 4 | 0;
     i1 = i1 + 6 | 0;
    }
   }
   i4 = i4 + i13 | 0;
   i3 = i3 + i13 | 0;
   i2 = i9;
   i1 = i10;
  }
  if (!i6) break; else i1 = i1 + i14 | 0;
 }
 return;
}

function _BlitBto1Key(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i11 = HEAP32[i1 + 24 >> 2] | 0;
 i3 = HEAP32[i1 + 28 >> 2] | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i2 = HEAP32[i1 + 20 >> 2] | 0;
 i12 = HEAP32[i1 + 36 >> 2] | 0;
 i13 = HEAP32[i1 + 56 >> 2] | 0;
 i9 = HEAP32[i1 + 48 >> 2] | 0;
 i10 = i11 - ((i11 + 7 | 0) / 8 | 0) + (HEAP32[i1 + 16 >> 2] | 0) | 0;
 i1 = (i3 | 0) == 0;
 if (!i9) {
  if (i1) return;
  i8 = (i11 | 0) > 0;
  i1 = i4;
  while (1) {
   i3 = i3 + -1 | 0;
   if (i8) {
    i4 = 0;
    i6 = 0;
    i7 = i2;
    while (1) {
     if (!(i6 & 7)) {
      i5 = HEAP8[i1 >> 0] | 0;
      i1 = i1 + 1 | 0;
     } else i5 = i4;
     i4 = (i5 & 255) >>> 7;
     if ((i4 & 255 | 0) != (i13 | 0)) HEAP8[i7 >> 0] = i4;
     i6 = i6 + 1 | 0;
     if ((i6 | 0) == (i11 | 0)) break; else {
      i4 = (i5 & 255) << 1 & 255;
      i7 = i7 + 1 | 0;
     }
    }
    i2 = i2 + i11 | 0;
   }
   if (!i3) break; else {
    i2 = i2 + i12 | 0;
    i1 = i1 + i10 | 0;
   }
  }
  return;
 } else {
  if (i1) return;
  i8 = (i11 | 0) > 0;
  i1 = i4;
  while (1) {
   i3 = i3 + -1 | 0;
   if (i8) {
    i4 = 0;
    i6 = 0;
    i7 = i2;
    while (1) {
     if (!(i6 & 7)) {
      i5 = HEAP8[i1 >> 0] | 0;
      i1 = i1 + 1 | 0;
     } else i5 = i4;
     i4 = (i5 & 255) >>> 7 & 255;
     if ((i4 | 0) != (i13 | 0)) HEAP8[i7 >> 0] = HEAP8[i9 + i4 >> 0] | 0;
     i6 = i6 + 1 | 0;
     if ((i6 | 0) == (i11 | 0)) break; else {
      i4 = (i5 & 255) << 1 & 255;
      i7 = i7 + 1 | 0;
     }
    }
    i2 = i2 + i11 | 0;
   }
   if (!i3) break; else {
    i2 = i2 + i12 | 0;
    i1 = i1 + i10 | 0;
   }
  }
  return;
 }
}

function _Color16DitherYUY2Mod2X(i17, i18, i4, i3, i5, i7, i6, i2, i1) {
 i17 = i17 | 0;
 i18 = i18 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i15 = ((i1 | 0) / 2 | 0) + i2 | 0;
 i16 = (i2 | 0) / 2 | 0;
 if (!i6) return;
 i12 = (i2 + 1 | 0) >>> 0 < 3;
 i11 = i15 + 1 | 0;
 i13 = i16 << 1;
 i14 = i16 << 2;
 i2 = i5;
 i1 = i7;
 while (1) {
  i6 = i6 + -1 | 0;
  if (!i12) {
   i10 = i1 + (i13 << 2) | 0;
   i9 = i2 + i14 | 0;
   i8 = i3;
   i7 = i4;
   i5 = i16;
   while (1) {
    i5 = i5 + -1 | 0;
    i22 = HEAPU8[i8 >> 0] | 0;
    i21 = (HEAP32[i17 + (i22 << 2) >> 2] | 0) + 256 | 0;
    i19 = HEAPU8[i2 >> 0] | 0;
    i22 = (HEAP32[i17 + ((i22 | 256) << 2) >> 2] | 0) + 1024 + (HEAP32[i17 + ((i19 | 512) << 2) >> 2] | 0) | 0;
    i19 = (HEAP32[i17 + ((i19 | 768) << 2) >> 2] | 0) + 1792 | 0;
    i20 = HEAPU8[i7 >> 0] | 0;
    i20 = HEAP32[i18 + (i20 + i22 << 2) >> 2] | HEAP32[i18 + (i20 + i21 << 2) >> 2] | HEAP32[i18 + (i20 + i19 << 2) >> 2];
    HEAP32[i1 + (i15 << 2) >> 2] = i20;
    HEAP32[i1 >> 2] = i20;
    i20 = HEAPU8[i7 + 2 >> 0] | 0;
    i19 = HEAP32[i18 + (i20 + i22 << 2) >> 2] | HEAP32[i18 + (i20 + i21 << 2) >> 2] | HEAP32[i18 + (i20 + i19 << 2) >> 2];
    HEAP32[i1 + (i11 << 2) >> 2] = i19;
    HEAP32[i1 + 4 >> 2] = i19;
    if (!i5) break; else {
     i8 = i8 + 4 | 0;
     i2 = i2 + 4 | 0;
     i7 = i7 + 4 | 0;
     i1 = i1 + 8 | 0;
    }
   }
   i4 = i4 + i14 | 0;
   i3 = i3 + i14 | 0;
   i2 = i9;
   i1 = i10;
  }
  if (!i6) break; else i1 = i1 + (i15 << 2) | 0;
 }
 return;
}

function __ZN13PlayerVehicleC2ER5Vec2fi(i11, i2, i1) {
 i11 = i11 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, d13 = 0.0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i12 + 16 | 0;
 i8 = i12 + 8 | 0;
 i9 = i12;
 HEAP32[i11 >> 2] = 3180;
 i3 = i11 + 4 | 0;
 i6 = i11 + 24 | 0;
 i4 = i11 + 32 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP32[i3 + 24 >> 2] = 0;
 HEAP32[i4 >> 2] = -16777216;
 i10 = i11 + 36 | 0;
 HEAPF32[i10 >> 2] = 0.0;
 __ZN5Vec2faSERKS_(i3, i2) | 0;
 HEAP32[i11 >> 2] = 3196;
 HEAP32[i4 >> 2] = i1;
 i4 = i11 + 20 | 0;
 i3 = HEAP32[i6 >> 2] | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i2 = i3 - i1 >> 3;
 if (i2 >>> 0 >= 3) {
  if (i2 >>> 0 > 3 ? (i5 = i1 + 24 | 0, (i3 | 0) != (i5 | 0)) : 0) HEAP32[i6 >> 2] = i3 + (~((i3 + -8 - i5 | 0) >>> 3) << 3);
 } else {
  __ZNSt3__16vectorI5Vec2fNS_9allocatorIS1_EEE8__appendEj(i4, 3 - i2 | 0);
  i1 = HEAP32[i4 >> 2] | 0;
 }
 i6 = i11 + 4 | 0;
 i5 = i11 + 8 | 0;
 d13 = +HEAPF32[i5 >> 2] + 10.0;
 HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
 HEAPF32[i7 + 4 >> 2] = d13;
 __ZN5Vec2faSERKS_(i1, i7) | 0;
 i11 = (HEAP32[i4 >> 2] | 0) + 8 | 0;
 d13 = +HEAPF32[i5 >> 2] + -10.0;
 HEAPF32[i8 >> 2] = +HEAPF32[i6 >> 2] + -10.0;
 HEAPF32[i8 + 4 >> 2] = d13;
 __ZN5Vec2faSERKS_(i11, i8) | 0;
 i11 = (HEAP32[i4 >> 2] | 0) + 16 | 0;
 d13 = +HEAPF32[i5 >> 2] + -10.0;
 HEAPF32[i9 >> 2] = +HEAPF32[i6 >> 2] + 10.0;
 HEAPF32[i9 + 4 >> 2] = d13;
 __ZN5Vec2faSERKS_(i11, i9) | 0;
 HEAPF32[i10 >> 2] = .10000000149011612;
 STACKTOP = i12;
 return;
}

function _SDL_Blit_ARGB8888_ARGB8888_Modulate(i21) {
 i21 = i21 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0;
 i1 = HEAP32[i21 + 52 >> 2] | 0;
 i19 = HEAPU8[i21 + 60 >> 0] | 0;
 i20 = HEAPU8[i21 + 61 >> 0] | 0;
 i11 = HEAPU8[i21 + 62 >> 0] | 0;
 i12 = HEAPU8[i21 + 63 >> 0] | 0;
 i13 = i21 + 28 | 0;
 i18 = HEAP32[i13 >> 2] | 0;
 i2 = i18 + -1 | 0;
 HEAP32[i13 >> 2] = i2;
 if (!i18) return;
 i14 = i21 + 20 | 0;
 i15 = i21 + 24 | 0;
 i16 = i21 + 12 | 0;
 i17 = i21 + 32 | 0;
 i18 = (i1 & 1 | 0) == 0;
 i10 = (i1 & 2 | 0) == 0;
 do {
  i1 = HEAP32[i15 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i21 >> 2] | 0;
   i1 = HEAP32[i14 >> 2] | 0;
   i3 = i2;
  } else {
   i9 = HEAP32[i14 >> 2] | 0;
   i4 = HEAP32[i21 >> 2] | 0;
   i7 = i9;
   i8 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i6 = HEAP32[i8 >> 2] | 0;
    i3 = i6 >>> 16 & 255;
    i5 = i6 >>> 8 & 255;
    i2 = i6 & 255;
    i6 = i6 >>> 24;
    if (!i18) {
     i2 = ((Math_imul(i2, i11) | 0) >>> 0) / 255 | 0;
     i5 = ((Math_imul(i5, i20) | 0) >>> 0) / 255 | 0;
     i3 = ((Math_imul(i3, i19) | 0) >>> 0) / 255 | 0;
    }
    i22 = ((Math_imul(i6, i12) | 0) >>> 0) / 255 | 0;
    HEAP32[i7 >> 2] = i5 << 8 | i3 << 16 | i2 | (i10 ? i6 : i22) << 24;
    if (!i1) break; else {
     i7 = i7 + 4 | 0;
     i8 = i8 + 4 | 0;
    }
   }
   i1 = i9;
   i3 = HEAP32[i13 >> 2] | 0;
  }
  HEAP32[i21 >> 2] = i4 + (HEAP32[i16 >> 2] | 0);
  HEAP32[i14 >> 2] = i1 + (HEAP32[i17 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i13 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_ABGR8888_ARGB8888_Modulate(i21) {
 i21 = i21 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0;
 i1 = HEAP32[i21 + 52 >> 2] | 0;
 i19 = HEAPU8[i21 + 60 >> 0] | 0;
 i20 = HEAPU8[i21 + 61 >> 0] | 0;
 i11 = HEAPU8[i21 + 62 >> 0] | 0;
 i12 = HEAPU8[i21 + 63 >> 0] | 0;
 i13 = i21 + 28 | 0;
 i18 = HEAP32[i13 >> 2] | 0;
 i2 = i18 + -1 | 0;
 HEAP32[i13 >> 2] = i2;
 if (!i18) return;
 i14 = i21 + 20 | 0;
 i15 = i21 + 24 | 0;
 i16 = i21 + 12 | 0;
 i17 = i21 + 32 | 0;
 i18 = (i1 & 1 | 0) == 0;
 i10 = (i1 & 2 | 0) == 0;
 do {
  i1 = HEAP32[i15 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i21 >> 2] | 0;
   i1 = HEAP32[i14 >> 2] | 0;
   i3 = i2;
  } else {
   i9 = HEAP32[i14 >> 2] | 0;
   i4 = HEAP32[i21 >> 2] | 0;
   i7 = i9;
   i8 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i6 = HEAP32[i8 >> 2] | 0;
    i2 = i6 >>> 16 & 255;
    i5 = i6 >>> 8 & 255;
    i3 = i6 & 255;
    i6 = i6 >>> 24;
    if (!i18) {
     i2 = ((Math_imul(i2, i11) | 0) >>> 0) / 255 | 0;
     i5 = ((Math_imul(i5, i20) | 0) >>> 0) / 255 | 0;
     i3 = ((Math_imul(i3, i19) | 0) >>> 0) / 255 | 0;
    }
    i22 = ((Math_imul(i6, i12) | 0) >>> 0) / 255 | 0;
    HEAP32[i7 >> 2] = i5 << 8 | i3 << 16 | i2 | (i10 ? i6 : i22) << 24;
    if (!i1) break; else {
     i7 = i7 + 4 | 0;
     i8 = i8 + 4 | 0;
    }
   }
   i1 = i9;
   i3 = HEAP32[i13 >> 2] | 0;
  }
  HEAP32[i21 >> 2] = i4 + (HEAP32[i16 >> 2] | 0);
  HEAP32[i14 >> 2] = i1 + (HEAP32[i17 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i13 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_GetWindowSurface(i13) {
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i1 = i14 + 8 | 0;
 i10 = i14 + 40 | 0;
 i12 = i14 + 36 | 0;
 i11 = i14 + 32 | 0;
 i9 = i14 + 28 | 0;
 i8 = i14 + 24 | 0;
 i7 = i14 + 20 | 0;
 i6 = i14 + 16 | 0;
 i5 = i14 + 12 | 0;
 i2 = HEAP32[3256] | 0;
 if (!i2) {
  _SDL_SetError(41242, i14) | 0;
  i13 = 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 if ((i13 | 0) != 0 ? (HEAP32[i13 >> 2] | 0) == (i2 + 248 | 0) : 0) {
  i3 = i13 + 108 | 0;
  i4 = i13 + 104 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  if (HEAP32[i3 >> 2] | 0) {
   i13 = i1;
   STACKTOP = i14;
   return i13 | 0;
  }
  if (!i1) i1 = i2; else {
   HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -5;
   _SDL_FreeSurface(i1);
   i1 = HEAP32[3256] | 0;
  }
  i2 = HEAP32[i1 + 104 >> 2] | 0;
  if ((((i2 | 0) != 0 ? (HEAP32[i1 + 108 >> 2] | 0) != 0 : 0) ? (FUNCTION_TABLE_iiiiii[i2 & 63](i1, i13, i10, i12, i11) | 0) >= 0 : 0) ? (_SDL_PixelFormatEnumToMasks(HEAP32[i10 >> 2] | 0, i9, i8, i7, i6, i5) | 0) != 0 : 0) i1 = _SDL_CreateRGBSurfaceFrom(HEAP32[i12 >> 2] | 0, HEAP32[i13 + 24 >> 2] | 0, HEAP32[i13 + 28 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0; else i1 = 0;
  HEAP32[i4 >> 2] = i1;
  if (!i1) {
   i13 = 0;
   STACKTOP = i14;
   return i13 | 0;
  }
  HEAP32[i3 >> 2] = 1;
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 4;
  i13 = i1;
  STACKTOP = i14;
  return i13 | 0;
 }
 _SDL_SetError(41324, i1) | 0;
 i13 = 0;
 STACKTOP = i14;
 return i13 | 0;
}

function _SDL_Blit_RGBA8888_ARGB8888_Modulate(i21) {
 i21 = i21 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0;
 i1 = HEAP32[i21 + 52 >> 2] | 0;
 i19 = HEAPU8[i21 + 60 >> 0] | 0;
 i20 = HEAPU8[i21 + 61 >> 0] | 0;
 i11 = HEAPU8[i21 + 62 >> 0] | 0;
 i12 = HEAPU8[i21 + 63 >> 0] | 0;
 i13 = i21 + 28 | 0;
 i18 = HEAP32[i13 >> 2] | 0;
 i2 = i18 + -1 | 0;
 HEAP32[i13 >> 2] = i2;
 if (!i18) return;
 i14 = i21 + 20 | 0;
 i15 = i21 + 24 | 0;
 i16 = i21 + 12 | 0;
 i17 = i21 + 32 | 0;
 i18 = (i1 & 1 | 0) == 0;
 i10 = (i1 & 2 | 0) == 0;
 do {
  i1 = HEAP32[i15 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i21 >> 2] | 0;
   i1 = HEAP32[i14 >> 2] | 0;
   i3 = i2;
  } else {
   i9 = HEAP32[i14 >> 2] | 0;
   i4 = HEAP32[i21 >> 2] | 0;
   i7 = i9;
   i8 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i6 = HEAP32[i8 >> 2] | 0;
    i3 = i6 >>> 24;
    i5 = i6 >>> 16 & 255;
    i2 = i6 >>> 8 & 255;
    if (!i18) {
     i2 = ((Math_imul(i2, i11) | 0) >>> 0) / 255 | 0;
     i5 = ((Math_imul(i5, i20) | 0) >>> 0) / 255 | 0;
     i3 = ((Math_imul(i3, i19) | 0) >>> 0) / 255 | 0;
    }
    i22 = ((Math_imul(i6 & 255, i12) | 0) >>> 0) / 255 | 0;
    HEAP32[i7 >> 2] = i5 << 8 | i3 << 16 | i2 | (i10 ? i6 : i22) << 24;
    if (!i1) break; else {
     i7 = i7 + 4 | 0;
     i8 = i8 + 4 | 0;
    }
   }
   i1 = i9;
   i3 = HEAP32[i13 >> 2] | 0;
  }
  HEAP32[i21 >> 2] = i4 + (HEAP32[i16 >> 2] | 0);
  HEAP32[i14 >> 2] = i1 + (HEAP32[i17 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i13 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_BGRA8888_ARGB8888_Modulate(i21) {
 i21 = i21 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0;
 i1 = HEAP32[i21 + 52 >> 2] | 0;
 i19 = HEAPU8[i21 + 60 >> 0] | 0;
 i20 = HEAPU8[i21 + 61 >> 0] | 0;
 i11 = HEAPU8[i21 + 62 >> 0] | 0;
 i12 = HEAPU8[i21 + 63 >> 0] | 0;
 i13 = i21 + 28 | 0;
 i18 = HEAP32[i13 >> 2] | 0;
 i2 = i18 + -1 | 0;
 HEAP32[i13 >> 2] = i2;
 if (!i18) return;
 i14 = i21 + 20 | 0;
 i15 = i21 + 24 | 0;
 i16 = i21 + 12 | 0;
 i17 = i21 + 32 | 0;
 i18 = (i1 & 1 | 0) == 0;
 i10 = (i1 & 2 | 0) == 0;
 do {
  i1 = HEAP32[i15 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i21 >> 2] | 0;
   i1 = HEAP32[i14 >> 2] | 0;
   i3 = i2;
  } else {
   i9 = HEAP32[i14 >> 2] | 0;
   i4 = HEAP32[i21 >> 2] | 0;
   i7 = i9;
   i8 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i6 = HEAP32[i8 >> 2] | 0;
    i2 = i6 >>> 24;
    i5 = i6 >>> 16 & 255;
    i3 = i6 >>> 8 & 255;
    if (!i18) {
     i2 = ((Math_imul(i2, i11) | 0) >>> 0) / 255 | 0;
     i5 = ((Math_imul(i5, i20) | 0) >>> 0) / 255 | 0;
     i3 = ((Math_imul(i3, i19) | 0) >>> 0) / 255 | 0;
    }
    i22 = ((Math_imul(i6 & 255, i12) | 0) >>> 0) / 255 | 0;
    HEAP32[i7 >> 2] = i5 << 8 | i3 << 16 | i2 | (i10 ? i6 : i22) << 24;
    if (!i1) break; else {
     i7 = i7 + 4 | 0;
     i8 = i8 + 4 | 0;
    }
   }
   i1 = i9;
   i3 = HEAP32[i13 >> 2] | 0;
  }
  HEAP32[i21 >> 2] = i4 + (HEAP32[i16 >> 2] | 0);
  HEAP32[i14 >> 2] = i1 + (HEAP32[i17 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i13 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _wcsnrtombs(i3, i11, i4, i2, i1) {
 i3 = i3 | 0;
 i11 = i11 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 i7 = i10 + 8 | 0;
 i9 = i10;
 i6 = HEAP32[i11 >> 2] | 0;
 HEAP32[i9 >> 2] = i6;
 i8 = (i3 | 0) != 0;
 i1 = i8 ? i2 : 256;
 i2 = i8 ? i3 : i7;
 i3 = i6;
 L1 : do if ((i1 | 0) != 0 & (i6 | 0) != 0) {
  i6 = i1;
  i5 = i3;
  i1 = 0;
  while (1) {
   i3 = i4 >>> 0 >= i6 >>> 0;
   if (!(i3 | i4 >>> 0 > 32)) {
    i3 = i5;
    break L1;
   }
   i3 = i3 ? i6 : i4;
   i4 = i4 - i3 | 0;
   i3 = _wcsrtombs(i2, i9, i3, 0) | 0;
   if ((i3 | 0) == -1) {
    i1 = i4;
    break;
   }
   i13 = (i2 | 0) == (i7 | 0);
   i12 = i13 ? 0 : i3;
   i5 = i6 - i12 | 0;
   i2 = i13 ? i2 : i2 + i3 | 0;
   i1 = i3 + i1 | 0;
   i3 = HEAP32[i9 >> 2] | 0;
   if ((i6 | 0) != (i12 | 0) & (i3 | 0) != 0) {
    i6 = i5;
    i5 = i3;
   } else {
    i6 = i5;
    break L1;
   }
  }
  i4 = i1;
  i6 = 0;
  i3 = HEAP32[i9 >> 2] | 0;
  i1 = -1;
 } else {
  i6 = i1;
  i1 = 0;
 } while (0);
 L8 : do if ((i3 | 0) != 0 ? (i6 | 0) != 0 & (i4 | 0) != 0 : 0) {
  i5 = i3;
  i3 = i2;
  while (1) {
   i2 = _wcrtomb(i3, HEAP32[i5 >> 2] | 0, 0) | 0;
   if ((i2 + 1 | 0) >>> 0 < 2) break;
   i5 = (HEAP32[i9 >> 2] | 0) + 4 | 0;
   HEAP32[i9 >> 2] = i5;
   i4 = i4 + -1 | 0;
   i1 = i1 + 1 | 0;
   if (!((i6 | 0) != (i2 | 0) & (i4 | 0) != 0)) break L8; else {
    i6 = i6 - i2 | 0;
    i3 = i3 + i2 | 0;
   }
  }
  if (!i2) HEAP32[i9 >> 2] = 0; else i1 = -1;
 } while (0);
 if (i8) HEAP32[i11 >> 2] = HEAP32[i9 >> 2];
 STACKTOP = i10;
 return i1 | 0;
}

function _SDL_SetWindowData(i4, i5, i7) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i8 + 16 | 0;
 i2 = i8 + 8 | 0;
 i1 = HEAP32[3256] | 0;
 if (!i1) {
  _SDL_SetError(41242, i8) | 0;
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 if ((i4 | 0) != 0 ? (HEAP32[i4 >> 2] | 0) == (i1 + 248 | 0) : 0) {
  if ((i5 | 0) != 0 ? (HEAP8[i5 >> 0] | 0) != 0 : 0) {
   i6 = i4 + 132 | 0;
   i1 = HEAP32[i6 >> 2] | 0;
   L11 : do if (i1) {
    i3 = 0;
    while (1) {
     i2 = HEAP32[i1 >> 2] | 0;
     if ((i2 | 0) != 0 ? (_SDL_strcmp(i2, i5) | 0) == 0 : 0) {
      i5 = i1;
      i4 = i1;
      break;
     }
     i2 = HEAP32[i1 + 8 >> 2] | 0;
     if (!i2) break L11; else {
      i3 = i1;
      i1 = i2;
     }
    }
    i1 = i4 + 4 | 0;
    i2 = HEAP32[i1 >> 2] | 0;
    if (i7) {
     HEAP32[i1 >> 2] = i7;
     i7 = i2;
     STACKTOP = i8;
     return i7 | 0;
    }
    i1 = HEAP32[i4 + 8 >> 2] | 0;
    if (!i3) HEAP32[i6 >> 2] = i1; else HEAP32[i3 + 8 >> 2] = i1;
    _SDL_free(HEAP32[i5 >> 2] | 0);
    _SDL_free(i4);
    i7 = i2;
    STACKTOP = i8;
    return i7 | 0;
   } while (0);
   if (!i7) {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   }
   i4 = _SDL_malloc(12) | 0;
   HEAP32[i4 >> 2] = _SDL_strdup(i5) | 0;
   HEAP32[i4 + 4 >> 2] = i7;
   HEAP32[i4 + 8 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i6 >> 2] = i4;
   i7 = 0;
   STACKTOP = i8;
   return i7 | 0;
  }
  HEAP32[i3 >> 2] = 41559;
  _SDL_SetError(41366, i3) | 0;
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 _SDL_SetError(41324, i2) | 0;
 i7 = 0;
 STACKTOP = i8;
 return i7 | 0;
}

function __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i8, i10, i1) {
 i8 = i8 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i11 + 16 | 0;
 i9 = i11 + 8 | 0;
 i5 = i11;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i9, i8);
 if (!(HEAP8[i9 >> 0] | 0)) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i9);
  STACKTOP = i11;
  return i8 | 0;
 }
 i2 = HEAP32[(HEAP32[i8 >> 2] | 0) + -12 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[i8 + (i2 + 24) >> 2];
 i7 = i8 + i2 | 0;
 i6 = HEAP32[i8 + (i2 + 4) >> 2] | 0;
 i3 = i10 + i1 | 0;
 i2 = i8 + (i2 + 76) | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i1 | 0) == -1) {
  HEAP32[i4 >> 2] = __ZNKSt3__18ios_base6getlocEv(i7) | 0;
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i4, 30384) | 0;
  i1 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i1, 32) | 0;
  __ZNSt3__16localeD2Ev(i4);
  i1 = i1 << 24 >> 24;
  HEAP32[i2 >> 2] = i1;
 }
 HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
 if (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i4, i10, (i6 & 176 | 0) == 32 ? i3 : i10, i3, i7, i1 & 255) | 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i9);
  STACKTOP = i11;
  return i8 | 0;
 }
 i10 = HEAP32[(HEAP32[i8 >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_base5clearEj(i8 + i10 | 0, HEAP32[i8 + (i10 + 16) >> 2] | 5);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i9);
 STACKTOP = i11;
 return i8 | 0;
}

function _SDL_BlendFillRects(i12, i14, i11, i10, i3, i2, i1, i9) {
 i12 = i12 | 0;
 i14 = i14 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i13 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i13 = i15 + 16 | 0;
 if (!i12) {
  i14 = _SDL_SetError(40249, i15) | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 i4 = HEAP32[i12 + 4 >> 2] | 0;
 i5 = HEAP8[i4 + 8 >> 0] | 0;
 if ((i5 & 255) < 8) {
  i14 = _SDL_SetError(38389, i15 + 8 | 0) | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 if ((i10 + -1 | 0) >>> 0 < 2) {
  i7 = i9 & 255;
  i8 = (((Math_imul(i7, i1 & 255) | 0) >>> 0) / 255 | 0) & 255;
  i2 = (((Math_imul(i7, i2 & 255) | 0) >>> 0) / 255 | 0) & 255;
  i7 = (((Math_imul(i7, i3 & 255) | 0) >>> 0) / 255 | 0) & 255;
 } else {
  i8 = i1;
  i7 = i3;
 }
 switch (i5 & 255 | 0) {
 case 15:
  {
   if ((HEAP32[i4 + 12 >> 2] | 0) == 31744) i5 = 11; else i6 = 12;
   break;
  }
 case 16:
  {
   if ((HEAP32[i4 + 12 >> 2] | 0) == 63488) i5 = 12; else i6 = 12;
   break;
  }
 case 32:
  {
   if ((HEAP32[i4 + 12 >> 2] | 0) == 16711680) i5 = (HEAP32[i4 + 24 >> 2] | 0) == 0 ? 7 : 8; else i6 = 12;
   break;
  }
 default:
  i6 = 12;
 }
 if ((i6 | 0) == 12) i5 = (HEAP32[i4 + 24 >> 2] | 0) == 0 ? 9 : 10;
 if ((i11 | 0) <= 0) {
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 i3 = i12 + 36 | 0;
 i4 = 0;
 i1 = 0;
 do {
  if (_SDL_IntersectRect(i14 + (i4 << 4) | 0, i3, i13) | 0) i1 = FUNCTION_TABLE_iiiiiiii[i5 & 15](i12, i13, i10, i7, i2, i8, i9) | 0;
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != (i11 | 0));
 STACKTOP = i15;
 return i1 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i3, i7, i6, i2, i4) {
 i3 = i3 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i8 = 0, i9 = 0;
 L1 : do if ((i3 | 0) == (HEAP32[i7 + 8 >> 2] | 0)) {
  if ((HEAP32[i7 + 4 >> 2] | 0) == (i6 | 0) ? (i1 = i7 + 28 | 0, (HEAP32[i1 >> 2] | 0) != 1) : 0) HEAP32[i1 >> 2] = i2;
 } else {
  if ((i3 | 0) != (HEAP32[i7 >> 2] | 0)) {
   i8 = HEAP32[i3 + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] & 7](i8, i7, i6, i2, i4);
   break;
  }
  if ((HEAP32[i7 + 16 >> 2] | 0) != (i6 | 0) ? (i5 = i7 + 20 | 0, (HEAP32[i5 >> 2] | 0) != (i6 | 0)) : 0) {
   HEAP32[i7 + 32 >> 2] = i2;
   i2 = i7 + 44 | 0;
   if ((HEAP32[i2 >> 2] | 0) == 4) break;
   i1 = i7 + 52 | 0;
   HEAP8[i1 >> 0] = 0;
   i9 = i7 + 53 | 0;
   HEAP8[i9 >> 0] = 0;
   i3 = HEAP32[i3 + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 15](i3, i7, i6, i6, 1, i4);
   if (HEAP8[i9 >> 0] | 0) {
    if (!(HEAP8[i1 >> 0] | 0)) {
     i1 = 1;
     i8 = 13;
    }
   } else {
    i1 = 0;
    i8 = 13;
   }
   do if ((i8 | 0) == 13) {
    HEAP32[i5 >> 2] = i6;
    i9 = i7 + 40 | 0;
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
    if ((HEAP32[i7 + 36 >> 2] | 0) == 1 ? (HEAP32[i7 + 24 >> 2] | 0) == 2 : 0) {
     HEAP8[i7 + 54 >> 0] = 1;
     if (i1) break;
    } else i8 = 16;
    if ((i8 | 0) == 16 ? i1 : 0) break;
    HEAP32[i2 >> 2] = 4;
    break L1;
   } while (0);
   HEAP32[i2 >> 2] = 3;
   break;
  }
  if ((i2 | 0) == 1) HEAP32[i7 + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i11, i7, i10, i1, i2, i6) {
 i11 = i11 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0, i12 = 0, i13 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i12;
 i9 = HEAP32[i11 >> 2] | 0;
 if (!i9) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i13 = i7;
 i4 = i1 - i13 | 0;
 i5 = i2 + 12 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 i4 = (i3 | 0) > (i4 | 0) ? i3 - i4 | 0 : 0;
 i3 = i10;
 i2 = i3 - i13 | 0;
 if ((i2 | 0) > 0 ? (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 48 >> 2] & 63](i9, i7, i2) | 0) != (i2 | 0) : 0) {
  HEAP32[i11 >> 2] = 0;
  i13 = 0;
  STACKTOP = i12;
  return i13 | 0;
 }
 do if ((i4 | 0) > 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc(i8, i4, i6);
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 48 >> 2] & 63](i9, (HEAP8[i8 >> 0] & 1) == 0 ? i8 + 1 | 0 : HEAP32[i8 + 8 >> 2] | 0, i4) | 0) == (i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i8);
   break;
  }
  HEAP32[i11 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i8);
  i13 = 0;
  STACKTOP = i12;
  return i13 | 0;
 } while (0);
 i1 = i1 - i3 | 0;
 if ((i1 | 0) > 0 ? (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 48 >> 2] & 63](i9, i10, i1) | 0) != (i1 | 0) : 0) {
  HEAP32[i11 >> 2] = 0;
  i13 = 0;
  STACKTOP = i12;
  return i13 | 0;
 }
 HEAP32[i5 >> 2] = 0;
 i13 = i9;
 STACKTOP = i12;
 return i13 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm(i5, i3, i2, i1, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i8 = i6;
 i12 = i6 + 116 | 0;
 i14 = i6 + 104 | 0;
 i7 = i6 + 20 | 0;
 i10 = i6 + 16 | 0;
 i5 = i6 + 12 | 0;
 i11 = i6 + 8 | 0;
 i9 = i6 + 4 | 0;
 HEAP8[i12 >> 0] = HEAP8[62958] | 0;
 HEAP8[i12 + 1 >> 0] = HEAP8[62959] | 0;
 HEAP8[i12 + 2 >> 0] = HEAP8[62960] | 0;
 HEAP8[i12 + 3 >> 0] = HEAP8[62961] | 0;
 HEAP8[i12 + 4 >> 0] = HEAP8[62962] | 0;
 HEAP8[i12 + 5 >> 0] = HEAP8[62963] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i12 + 1 | 0, 62964, 0, HEAP32[i2 + 4 >> 2] | 0);
 i13 = __ZNSt3__16__clocEv() | 0;
 HEAP32[i8 >> 2] = i4;
 i12 = i14 + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i14, 12, i13, i12, i8) | 0) | 0;
 i13 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i14, i12, i2) | 0;
 i4 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i11 >> 2] = i4;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i14, i13, i12, i7, i10, i5, i11);
 __ZNSt3__114__shared_count16__release_sharedEv(i4) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 i4 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i5 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i5 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i8, i7, i4, i5, i2, i1) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl(i5, i3, i2, i1, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i8 = i6;
 i12 = i6 + 116 | 0;
 i14 = i6 + 104 | 0;
 i7 = i6 + 20 | 0;
 i10 = i6 + 16 | 0;
 i5 = i6 + 12 | 0;
 i11 = i6 + 8 | 0;
 i9 = i6 + 4 | 0;
 HEAP8[i12 >> 0] = HEAP8[62958] | 0;
 HEAP8[i12 + 1 >> 0] = HEAP8[62959] | 0;
 HEAP8[i12 + 2 >> 0] = HEAP8[62960] | 0;
 HEAP8[i12 + 3 >> 0] = HEAP8[62961] | 0;
 HEAP8[i12 + 4 >> 0] = HEAP8[62962] | 0;
 HEAP8[i12 + 5 >> 0] = HEAP8[62963] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i12 + 1 | 0, 62964, 1, HEAP32[i2 + 4 >> 2] | 0);
 i13 = __ZNSt3__16__clocEv() | 0;
 HEAP32[i8 >> 2] = i4;
 i12 = i14 + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i14, 12, i13, i12, i8) | 0) | 0;
 i13 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i14, i12, i2) | 0;
 i4 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i11 >> 2] = i4;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i14, i13, i12, i7, i10, i5, i11);
 __ZNSt3__114__shared_count16__release_sharedEv(i4) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 i4 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i5 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i5 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i8, i7, i4, i5, i2, i1) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm(i5, i3, i2, i1, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i8 = i6;
 i12 = i6 + 56 | 0;
 i14 = i6 + 44 | 0;
 i7 = i6 + 20 | 0;
 i10 = i6 + 16 | 0;
 i5 = i6 + 12 | 0;
 i11 = i6 + 8 | 0;
 i9 = i6 + 4 | 0;
 HEAP8[i12 >> 0] = HEAP8[62958] | 0;
 HEAP8[i12 + 1 >> 0] = HEAP8[62959] | 0;
 HEAP8[i12 + 2 >> 0] = HEAP8[62960] | 0;
 HEAP8[i12 + 3 >> 0] = HEAP8[62961] | 0;
 HEAP8[i12 + 4 >> 0] = HEAP8[62962] | 0;
 HEAP8[i12 + 5 >> 0] = HEAP8[62963] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i12 + 1 | 0, 62964, 0, HEAP32[i2 + 4 >> 2] | 0);
 i13 = __ZNSt3__16__clocEv() | 0;
 HEAP32[i8 >> 2] = i4;
 i12 = i14 + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i14, 12, i13, i12, i8) | 0) | 0;
 i13 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i14, i12, i2) | 0;
 i4 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i11 >> 2] = i4;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i14, i13, i12, i7, i10, i5, i11);
 __ZNSt3__114__shared_count16__release_sharedEv(i4) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 i4 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i5 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i5 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i8, i7, i4, i5, i2, i1) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl(i5, i3, i2, i1, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i8 = i6;
 i12 = i6 + 56 | 0;
 i14 = i6 + 44 | 0;
 i7 = i6 + 20 | 0;
 i10 = i6 + 16 | 0;
 i5 = i6 + 12 | 0;
 i11 = i6 + 8 | 0;
 i9 = i6 + 4 | 0;
 HEAP8[i12 >> 0] = HEAP8[62958] | 0;
 HEAP8[i12 + 1 >> 0] = HEAP8[62959] | 0;
 HEAP8[i12 + 2 >> 0] = HEAP8[62960] | 0;
 HEAP8[i12 + 3 >> 0] = HEAP8[62961] | 0;
 HEAP8[i12 + 4 >> 0] = HEAP8[62962] | 0;
 HEAP8[i12 + 5 >> 0] = HEAP8[62963] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i12 + 1 | 0, 62964, 1, HEAP32[i2 + 4 >> 2] | 0);
 i13 = __ZNSt3__16__clocEv() | 0;
 HEAP32[i8 >> 2] = i4;
 i12 = i14 + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i14, 12, i13, i12, i8) | 0) | 0;
 i13 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i14, i12, i2) | 0;
 i4 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i11 >> 2] = i4;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i14, i13, i12, i7, i10, i5, i11);
 __ZNSt3__114__shared_count16__release_sharedEv(i4) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 i4 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i5 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i5 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i8, i7, i4, i5, i2, i1) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function _SDL_BlendPoint_RGB888(i4, i7, i8, i3, i6, i5, i2, i1) {
 i4 = i4 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = i1 & 255 ^ 255;
 switch (i3 | 0) {
 case 1:
  {
   i8 = (HEAP32[i4 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i4 + 16 >> 2] | 0, i8) | 0) + (i7 << 2)) | 0;
   i7 = HEAP32[i8 >> 2] | 0;
   HEAP32[i8 >> 2] = (((Math_imul(i7 >>> 8 & 255, i1) | 0) >>> 0) / 255 | 0) + (i5 & 255) << 8 | (((Math_imul(i7 >>> 16 & 255, i1) | 0) >>> 0) / 255 | 0) + (i6 & 255) << 16 | (((Math_imul(i7 & 255, i1) | 0) >>> 0) / 255 | 0) + (i2 & 255);
   return 0;
  }
 case 2:
  {
   i8 = (HEAP32[i4 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i4 + 16 >> 2] | 0, i8) | 0) + (i7 << 2)) | 0;
   i4 = HEAP32[i8 >> 2] | 0;
   i7 = (i4 >>> 16 & 255) + (i6 & 255) | 0;
   i5 = (i4 >>> 8 & 255) + (i5 & 255) | 0;
   i6 = (i4 & 255) + (i2 & 255) | 0;
   HEAP32[i8 >> 2] = (i5 >>> 0 > 255 ? 65280 : i5 << 8) | (i6 >>> 0 > 255 ? 255 : i6) | (i7 >>> 0 > 255 ? 16711680 : i7 << 16);
   return 0;
  }
 case 4:
  {
   i8 = (HEAP32[i4 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i4 + 16 >> 2] | 0, i8) | 0) + (i7 << 2)) | 0;
   i7 = HEAP32[i8 >> 2] | 0;
   HEAP32[i8 >> 2] = (((Math_imul(i7 >>> 8 & 255, i5 & 255) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i7 >>> 16 & 255, i6 & 255) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i7 & 255, i2 & 255) | 0) >>> 0) / 255 | 0);
   return 0;
  }
 default:
  {
   HEAP32[(HEAP32[i4 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i4 + 16 >> 2] | 0, i8) | 0) + (i7 << 2)) >> 2] = (i5 & 255) << 8 | (i6 & 255) << 16 | i2 & 255;
   return 0;
  }
 }
 return 0;
}

function _SDL_Blit_RGBA8888_ARGB8888_Scale(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0;
 i12 = i15 + 28 | 0;
 i16 = HEAP32[i12 >> 2] | 0;
 i13 = (HEAP32[i15 + 8 >> 2] << 16 | 0) / (i16 | 0) | 0;
 i14 = i15 + 24 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 i9 = (HEAP32[i15 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i16 + -1 | 0;
 HEAP32[i12 >> 2] = i2;
 if (!i16) return;
 i16 = i15 + 20 | 0;
 i10 = i15 + 32 | 0;
 i11 = i15 + 12 | 0;
 i4 = HEAP32[i16 >> 2] | 0;
 i5 = i1;
 i8 = i4;
 i1 = 0;
 i3 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i6 = i1 + -65536 | 0;
   i7 = i6 >>> 16;
   i6 = i6 - (i7 << 16) | 0;
   i7 = i3 + 1 + i7 | 0;
  } else {
   i6 = i1;
   i7 = i3;
  }
  if (!i5) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i3 = -1;
   while (1) {
    i5 = i5 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i3 = i3 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i15 >> 2] | 0) + ((Math_imul(HEAP32[i11 >> 2] | 0, i7) | 0) + (i3 << 2)) | 0;
    }
    i18 = HEAP32[i2 >> 2] | 0;
    i17 = i18 >>> 8;
    HEAP32[i4 >> 2] = i18 >>> 24 << 16 | i18 << 24 | i17 & 65280 | i17 & 255;
    if (!i5) break; else {
     i4 = i4 + 4 | 0;
     i1 = i1 + i9 | 0;
    }
   }
   i3 = HEAP32[i12 >> 2] | 0;
  }
  i1 = i8 + (HEAP32[i10 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i12 >> 2] = i2;
  if (!i3) break;
  i5 = HEAP32[i14 >> 2] | 0;
  i8 = i1;
  i4 = i1;
  i1 = i6 + i13 | 0;
  i3 = i7;
 }
 HEAP32[i16 >> 2] = i1;
 return;
}

function _SDL_SetColorKey(i2, i6, i7) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i8 + 8 | 0;
 i1 = i8;
 if (!i2) {
  HEAP32[i1 >> 2] = 40846;
  i7 = _SDL_SetError(41366, i1) | 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 i5 = i2 + 4 | 0;
 i1 = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0;
 if ((i1 | 0) != 0 ? (HEAP32[i1 >> 2] | 0) >>> 0 <= i7 >>> 0 : 0) {
  HEAP32[i3 >> 2] = 40854;
  i7 = _SDL_SetError(41366, i3) | 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 i1 = i2 + 52 | 0;
 if ((i6 & 2 | 0) != 0 ? (i4 = HEAP32[i1 >> 2] | 0, i9 = i4 + 68 | 0, i3 = HEAP32[i9 >> 2] | 0, i2 = i3 | 4096, HEAP32[i9 >> 2] = i2, (i2 | 0) != (i3 | 0)) : 0) _SDL_InvalidateMap(i4);
 i3 = HEAP32[i1 >> 2] | 0;
 i2 = i3 + 68 | 0;
 i4 = HEAP32[i2 >> 2] | 0;
 if (i6) {
  i1 = i4 | 256;
  HEAP32[i2 >> 2] = i1;
  HEAP32[i3 + 72 >> 2] = i7;
  i2 = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0;
  if (i2) {
   HEAP8[(HEAP32[i2 + 4 >> 2] | 0) + (i7 << 2) + 3 >> 0] = 0;
   i9 = i2 + 8 | 0;
   i7 = (HEAP32[i9 >> 2] | 0) + 1 | 0;
   HEAP32[i9 >> 2] = (i7 | 0) == 0 ? 1 : i7;
  }
 } else {
  i1 = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0;
  if (i1) {
   HEAP8[(HEAP32[i1 + 4 >> 2] | 0) + (HEAP32[i3 + 72 >> 2] << 2) + 3 >> 0] = -1;
   i9 = i1 + 8 | 0;
   i7 = (HEAP32[i9 >> 2] | 0) + 1 | 0;
   HEAP32[i9 >> 2] = (i7 | 0) == 0 ? 1 : i7;
  }
  i1 = i4 & -257;
  HEAP32[i2 >> 2] = i1;
 }
 if ((i1 | 0) == (i4 | 0)) {
  i9 = 0;
  STACKTOP = i8;
  return i9 | 0;
 }
 _SDL_InvalidateMap(i3);
 i9 = 0;
 STACKTOP = i8;
 return i9 | 0;
}

function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i11, i8, i10, i2, i3, i7) {
 i11 = i11 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i12 = 0, i13 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i12;
 i1 = HEAP32[i11 >> 2] | 0;
 L1 : do if (!i1) i1 = 0; else {
  i13 = i8;
  i5 = i2 - i13 >> 2;
  i6 = i3 + 12 | 0;
  i3 = HEAP32[i6 >> 2] | 0;
  i5 = (i3 | 0) > (i5 | 0) ? i3 - i5 | 0 : 0;
  i3 = i10;
  i13 = i3 - i13 | 0;
  i4 = i13 >> 2;
  if ((i13 | 0) > 0 ? (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 63](i1, i8, i4) | 0) != (i4 | 0) : 0) {
   HEAP32[i11 >> 2] = 0;
   i1 = 0;
   break;
  }
  do if ((i5 | 0) > 0) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw(i9, i5, i7);
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 63](i1, (HEAP8[i9 >> 0] & 1) == 0 ? i9 + 4 | 0 : HEAP32[i9 + 8 >> 2] | 0, i5) | 0) == (i5 | 0)) {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i9);
    break;
   } else {
    HEAP32[i11 >> 2] = 0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i9);
    i1 = 0;
    break L1;
   }
  } while (0);
  i13 = i2 - i3 | 0;
  i2 = i13 >> 2;
  if ((i13 | 0) > 0 ? (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 63](i1, i10, i2) | 0) != (i2 | 0) : 0) {
   HEAP32[i11 >> 2] = 0;
   i1 = 0;
   break;
  }
  HEAP32[i6 >> 2] = 0;
 } while (0);
 STACKTOP = i12;
 return i1 | 0;
}

function _SDL_Blit_RGBA8888_RGB888_Scale(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0;
 i12 = i15 + 28 | 0;
 i16 = HEAP32[i12 >> 2] | 0;
 i13 = (HEAP32[i15 + 8 >> 2] << 16 | 0) / (i16 | 0) | 0;
 i14 = i15 + 24 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 i9 = (HEAP32[i15 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i16 + -1 | 0;
 HEAP32[i12 >> 2] = i2;
 if (!i16) return;
 i16 = i15 + 20 | 0;
 i10 = i15 + 32 | 0;
 i11 = i15 + 12 | 0;
 i4 = HEAP32[i16 >> 2] | 0;
 i5 = i1;
 i8 = i4;
 i1 = 0;
 i3 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i6 = i1 + -65536 | 0;
   i7 = i6 >>> 16;
   i6 = i6 - (i7 << 16) | 0;
   i7 = i3 + 1 + i7 | 0;
  } else {
   i6 = i1;
   i7 = i3;
  }
  if (!i5) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i3 = -1;
   while (1) {
    i5 = i5 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i3 = i3 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i15 >> 2] | 0) + ((Math_imul(HEAP32[i11 >> 2] | 0, i7) | 0) + (i3 << 2)) | 0;
    }
    i18 = HEAP32[i2 >> 2] | 0;
    i17 = i18 >>> 8;
    HEAP32[i4 >> 2] = i18 >>> 24 << 16 | i17 & 65280 | i17 & 255;
    if (!i5) break; else {
     i4 = i4 + 4 | 0;
     i1 = i1 + i9 | 0;
    }
   }
   i3 = HEAP32[i12 >> 2] | 0;
  }
  i1 = i8 + (HEAP32[i10 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i12 >> 2] = i2;
  if (!i3) break;
  i5 = HEAP32[i14 >> 2] | 0;
  i8 = i1;
  i4 = i1;
  i1 = i6 + i13 | 0;
  i3 = i7;
 }
 HEAP32[i16 >> 2] = i1;
 return;
}

function _SDL_Blit_BGRA8888_BGR888_Scale(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0;
 i12 = i15 + 28 | 0;
 i16 = HEAP32[i12 >> 2] | 0;
 i13 = (HEAP32[i15 + 8 >> 2] << 16 | 0) / (i16 | 0) | 0;
 i14 = i15 + 24 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 i9 = (HEAP32[i15 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i16 + -1 | 0;
 HEAP32[i12 >> 2] = i2;
 if (!i16) return;
 i16 = i15 + 20 | 0;
 i10 = i15 + 32 | 0;
 i11 = i15 + 12 | 0;
 i4 = HEAP32[i16 >> 2] | 0;
 i5 = i1;
 i8 = i4;
 i1 = 0;
 i3 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i6 = i1 + -65536 | 0;
   i7 = i6 >>> 16;
   i6 = i6 - (i7 << 16) | 0;
   i7 = i3 + 1 + i7 | 0;
  } else {
   i6 = i1;
   i7 = i3;
  }
  if (!i5) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i3 = -1;
   while (1) {
    i5 = i5 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i3 = i3 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i15 >> 2] | 0) + ((Math_imul(HEAP32[i11 >> 2] | 0, i7) | 0) + (i3 << 2)) | 0;
    }
    i18 = HEAP32[i2 >> 2] | 0;
    i17 = i18 >>> 8;
    HEAP32[i4 >> 2] = i18 >>> 24 << 16 | i17 & 65280 | i17 & 255;
    if (!i5) break; else {
     i4 = i4 + 4 | 0;
     i1 = i1 + i9 | 0;
    }
   }
   i3 = HEAP32[i12 >> 2] | 0;
  }
  i1 = i8 + (HEAP32[i10 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i12 >> 2] = i2;
  if (!i3) break;
  i5 = HEAP32[i14 >> 2] | 0;
  i8 = i1;
  i4 = i1;
  i1 = i6 + i13 | 0;
  i3 = i7;
 }
 HEAP32[i16 >> 2] = i1;
 return;
}

function _SDL_Blit_ABGR8888_ARGB8888_Scale(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0;
 i12 = i15 + 28 | 0;
 i16 = HEAP32[i12 >> 2] | 0;
 i13 = (HEAP32[i15 + 8 >> 2] << 16 | 0) / (i16 | 0) | 0;
 i14 = i15 + 24 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 i9 = (HEAP32[i15 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i16 + -1 | 0;
 HEAP32[i12 >> 2] = i2;
 if (!i16) return;
 i16 = i15 + 20 | 0;
 i10 = i15 + 32 | 0;
 i11 = i15 + 12 | 0;
 i4 = HEAP32[i16 >> 2] | 0;
 i5 = i1;
 i8 = i4;
 i1 = 0;
 i3 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i6 = i1 + -65536 | 0;
   i7 = i6 >>> 16;
   i6 = i6 - (i7 << 16) | 0;
   i7 = i3 + 1 + i7 | 0;
  } else {
   i6 = i1;
   i7 = i3;
  }
  if (!i5) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i3 = -1;
   while (1) {
    i5 = i5 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i3 = i3 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i15 >> 2] | 0) + ((Math_imul(HEAP32[i11 >> 2] | 0, i7) | 0) + (i3 << 2)) | 0;
    }
    i17 = HEAP32[i2 >> 2] | 0;
    HEAP32[i4 >> 2] = i17 & -16711936 | i17 << 16 & 16711680 | i17 >>> 16 & 255;
    if (!i5) break; else {
     i4 = i4 + 4 | 0;
     i1 = i1 + i9 | 0;
    }
   }
   i3 = HEAP32[i12 >> 2] | 0;
  }
  i1 = i8 + (HEAP32[i10 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i12 >> 2] = i2;
  if (!i3) break;
  i5 = HEAP32[i14 >> 2] | 0;
  i8 = i1;
  i4 = i1;
  i1 = i6 + i13 | 0;
  i3 = i7;
 }
 HEAP32[i16 >> 2] = i1;
 return;
}

function _SDL_UpdateWindowTexture(i1, i8, i7, i6) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i5 + 16 | 0;
 i2 = i5 + 8 | 0;
 i3 = i5 + 24 | 0;
 i1 = HEAP32[3256] | 0;
 L1 : do if (!i1) _SDL_SetError(41242, i5) | 0; else {
  if ((i8 | 0) != 0 ? (HEAP32[i8 >> 2] | 0) == (i1 + 248 | 0) : 0) {
   i1 = HEAP32[i8 + 132 >> 2] | 0;
   if (!i1) break;
   while (1) {
    i2 = HEAP32[i1 >> 2] | 0;
    if ((i2 | 0) != 0 ? (_SDL_strcmp(i2, 48261) | 0) == 0 : 0) break;
    i1 = HEAP32[i1 + 8 >> 2] | 0;
    if (!i1) break L1;
   }
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   if (!i1) break;
   i2 = i1 + 4 | 0;
   if (!(HEAP32[i2 >> 2] | 0)) break;
   if (!(_SDL_GetSpanEnclosingRect(HEAP32[i8 + 24 >> 2] | 0, HEAP32[i8 + 28 >> 2] | 0, i6, i7, i3) | 0)) {
    i8 = 0;
    STACKTOP = i5;
    return i8 | 0;
   }
   i8 = HEAP32[i1 + 12 >> 2] | 0;
   i7 = Math_imul(i8, HEAP32[i3 + 4 >> 2] | 0) | 0;
   i7 = (HEAP32[i1 + 8 >> 2] | 0) + ((Math_imul(HEAP32[i1 + 16 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0) + i7) | 0;
   if ((_SDL_UpdateTexture(HEAP32[i2 >> 2] | 0, i3, i7, i8) | 0) < 0) {
    i8 = -1;
    STACKTOP = i5;
    return i8 | 0;
   }
   if ((_SDL_RenderCopy(HEAP32[i1 >> 2] | 0, HEAP32[i2 >> 2] | 0, 0, 0) | 0) < 0) {
    i8 = -1;
    STACKTOP = i5;
    return i8 | 0;
   }
   _SDL_RenderPresent(HEAP32[i1 >> 2] | 0);
   i8 = 0;
   STACKTOP = i5;
   return i8 | 0;
  }
  _SDL_SetError(41324, i2) | 0;
 } while (0);
 i8 = _SDL_SetError(48284, i4) | 0;
 STACKTOP = i5;
 return i8 | 0;
}

function ___dynamic_cast(i2, i3, i12, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i12 = i12 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i13 = i14;
 i11 = HEAP32[i2 >> 2] | 0;
 i10 = i2 + (HEAP32[i11 + -8 >> 2] | 0) | 0;
 i11 = HEAP32[i11 + -4 >> 2] | 0;
 HEAP32[i13 >> 2] = i12;
 HEAP32[i13 + 4 >> 2] = i2;
 HEAP32[i13 + 8 >> 2] = i3;
 HEAP32[i13 + 12 >> 2] = i1;
 i1 = i13 + 16 | 0;
 i2 = i13 + 20 | 0;
 i3 = i13 + 24 | 0;
 i4 = i13 + 28 | 0;
 i5 = i13 + 32 | 0;
 i6 = i13 + 40 | 0;
 i7 = (i11 | 0) == (i12 | 0);
 i8 = i1;
 i9 = i8 + 36 | 0;
 do {
  HEAP32[i8 >> 2] = 0;
  i8 = i8 + 4 | 0;
 } while ((i8 | 0) < (i9 | 0));
 HEAP16[i1 + 36 >> 1] = 0;
 HEAP8[i1 + 38 >> 0] = 0;
 L1 : do if (i7) {
  HEAP32[i13 + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] & 15](i12, i13, i10, i10, 1, 0);
  i1 = (HEAP32[i3 >> 2] | 0) == 1 ? i10 : 0;
 } else {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2] & 7](i11, i13, i10, 1, 0);
  switch (HEAP32[i13 + 36 >> 2] | 0) {
  case 0:
   {
    i1 = (HEAP32[i6 >> 2] | 0) == 1 & (HEAP32[i4 >> 2] | 0) == 1 & (HEAP32[i5 >> 2] | 0) == 1 ? HEAP32[i2 >> 2] | 0 : 0;
    break L1;
   }
  case 1:
   break;
  default:
   {
    i1 = 0;
    break L1;
   }
  }
  if ((HEAP32[i3 >> 2] | 0) != 1 ? !((HEAP32[i6 >> 2] | 0) == 0 & (HEAP32[i4 >> 2] | 0) == 1 & (HEAP32[i5 >> 2] | 0) == 1) : 0) {
   i1 = 0;
   break;
  }
  i1 = HEAP32[i1 >> 2] | 0;
 } while (0);
 STACKTOP = i14;
 return i1 | 0;
}

function _SDL_Blit_BGR888_ARGB8888_Scale(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0;
 i12 = i15 + 28 | 0;
 i16 = HEAP32[i12 >> 2] | 0;
 i13 = (HEAP32[i15 + 8 >> 2] << 16 | 0) / (i16 | 0) | 0;
 i14 = i15 + 24 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 i9 = (HEAP32[i15 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i16 + -1 | 0;
 HEAP32[i12 >> 2] = i2;
 if (!i16) return;
 i16 = i15 + 20 | 0;
 i10 = i15 + 32 | 0;
 i11 = i15 + 12 | 0;
 i4 = HEAP32[i16 >> 2] | 0;
 i5 = i1;
 i8 = i4;
 i1 = 0;
 i3 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i6 = i1 + -65536 | 0;
   i7 = i6 >>> 16;
   i6 = i6 - (i7 << 16) | 0;
   i7 = i3 + 1 + i7 | 0;
  } else {
   i6 = i1;
   i7 = i3;
  }
  if (!i5) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i3 = -1;
   while (1) {
    i5 = i5 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i3 = i3 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i15 >> 2] | 0) + ((Math_imul(HEAP32[i11 >> 2] | 0, i7) | 0) + (i3 << 2)) | 0;
    }
    i17 = HEAP32[i2 >> 2] | 0;
    HEAP32[i4 >> 2] = i17 & 65280 | i17 << 16 | i17 >>> 16 & 255 | -16777216;
    if (!i5) break; else {
     i4 = i4 + 4 | 0;
     i1 = i1 + i9 | 0;
    }
   }
   i3 = HEAP32[i12 >> 2] | 0;
  }
  i1 = i8 + (HEAP32[i10 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i12 >> 2] = i2;
  if (!i3) break;
  i5 = HEAP32[i14 >> 2] | 0;
  i8 = i1;
  i4 = i1;
  i1 = i6 + i13 | 0;
  i3 = i7;
 }
 HEAP32[i16 >> 2] = i1;
 return;
}

function _SDL_Blit_ARGB8888_BGR888_Scale(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0;
 i12 = i15 + 28 | 0;
 i16 = HEAP32[i12 >> 2] | 0;
 i13 = (HEAP32[i15 + 8 >> 2] << 16 | 0) / (i16 | 0) | 0;
 i14 = i15 + 24 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 i9 = (HEAP32[i15 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i16 + -1 | 0;
 HEAP32[i12 >> 2] = i2;
 if (!i16) return;
 i16 = i15 + 20 | 0;
 i10 = i15 + 32 | 0;
 i11 = i15 + 12 | 0;
 i4 = HEAP32[i16 >> 2] | 0;
 i5 = i1;
 i8 = i4;
 i1 = 0;
 i3 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i6 = i1 + -65536 | 0;
   i7 = i6 >>> 16;
   i6 = i6 - (i7 << 16) | 0;
   i7 = i3 + 1 + i7 | 0;
  } else {
   i6 = i1;
   i7 = i3;
  }
  if (!i5) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i3 = -1;
   while (1) {
    i5 = i5 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i3 = i3 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i15 >> 2] | 0) + ((Math_imul(HEAP32[i11 >> 2] | 0, i7) | 0) + (i3 << 2)) | 0;
    }
    i17 = HEAP32[i2 >> 2] | 0;
    HEAP32[i4 >> 2] = i17 << 16 & 16711680 | i17 & 65280 | i17 >>> 16 & 255;
    if (!i5) break; else {
     i4 = i4 + 4 | 0;
     i1 = i1 + i9 | 0;
    }
   }
   i3 = HEAP32[i12 >> 2] | 0;
  }
  i1 = i8 + (HEAP32[i10 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i12 >> 2] = i2;
  if (!i3) break;
  i5 = HEAP32[i14 >> 2] | 0;
  i8 = i1;
  i4 = i1;
  i1 = i6 + i13 | 0;
  i3 = i7;
 }
 HEAP32[i16 >> 2] = i1;
 return;
}

function _SDL_Blit_ABGR8888_RGB888_Scale(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0;
 i12 = i15 + 28 | 0;
 i16 = HEAP32[i12 >> 2] | 0;
 i13 = (HEAP32[i15 + 8 >> 2] << 16 | 0) / (i16 | 0) | 0;
 i14 = i15 + 24 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 i9 = (HEAP32[i15 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i16 + -1 | 0;
 HEAP32[i12 >> 2] = i2;
 if (!i16) return;
 i16 = i15 + 20 | 0;
 i10 = i15 + 32 | 0;
 i11 = i15 + 12 | 0;
 i4 = HEAP32[i16 >> 2] | 0;
 i5 = i1;
 i8 = i4;
 i1 = 0;
 i3 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i6 = i1 + -65536 | 0;
   i7 = i6 >>> 16;
   i6 = i6 - (i7 << 16) | 0;
   i7 = i3 + 1 + i7 | 0;
  } else {
   i6 = i1;
   i7 = i3;
  }
  if (!i5) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i3 = -1;
   while (1) {
    i5 = i5 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i3 = i3 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i15 >> 2] | 0) + ((Math_imul(HEAP32[i11 >> 2] | 0, i7) | 0) + (i3 << 2)) | 0;
    }
    i17 = HEAP32[i2 >> 2] | 0;
    HEAP32[i4 >> 2] = i17 << 16 & 16711680 | i17 & 65280 | i17 >>> 16 & 255;
    if (!i5) break; else {
     i4 = i4 + 4 | 0;
     i1 = i1 + i9 | 0;
    }
   }
   i3 = HEAP32[i12 >> 2] | 0;
  }
  i1 = i8 + (HEAP32[i10 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i12 >> 2] = i2;
  if (!i3) break;
  i5 = HEAP32[i14 >> 2] | 0;
  i8 = i1;
  i4 = i1;
  i1 = i6 + i13 | 0;
  i3 = i7;
 }
 HEAP32[i16 >> 2] = i1;
 return;
}

function _SDL_Blit_RGBA8888_BGR888_Scale(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0;
 i12 = i15 + 28 | 0;
 i16 = HEAP32[i12 >> 2] | 0;
 i13 = (HEAP32[i15 + 8 >> 2] << 16 | 0) / (i16 | 0) | 0;
 i14 = i15 + 24 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 i9 = (HEAP32[i15 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i16 + -1 | 0;
 HEAP32[i12 >> 2] = i2;
 if (!i16) return;
 i16 = i15 + 20 | 0;
 i10 = i15 + 32 | 0;
 i11 = i15 + 12 | 0;
 i4 = HEAP32[i16 >> 2] | 0;
 i5 = i1;
 i8 = i4;
 i1 = 0;
 i3 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i6 = i1 + -65536 | 0;
   i7 = i6 >>> 16;
   i6 = i6 - (i7 << 16) | 0;
   i7 = i3 + 1 + i7 | 0;
  } else {
   i6 = i1;
   i7 = i3;
  }
  if (!i5) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i3 = -1;
   while (1) {
    i5 = i5 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i3 = i3 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i15 >> 2] | 0) + ((Math_imul(HEAP32[i11 >> 2] | 0, i7) | 0) + (i3 << 2)) | 0;
    }
    i17 = HEAP32[i2 >> 2] | 0;
    HEAP32[i4 >> 2] = i17 >>> 8 & 65280 | i17 >>> 24 | i17 << 8 & 16711680;
    if (!i5) break; else {
     i4 = i4 + 4 | 0;
     i1 = i1 + i9 | 0;
    }
   }
   i3 = HEAP32[i12 >> 2] | 0;
  }
  i1 = i8 + (HEAP32[i10 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i12 >> 2] = i2;
  if (!i3) break;
  i5 = HEAP32[i14 >> 2] | 0;
  i8 = i1;
  i4 = i1;
  i1 = i6 + i13 | 0;
  i3 = i7;
 }
 HEAP32[i16 >> 2] = i1;
 return;
}

function _SDL_Blit_RGB888_ARGB8888_Modulate(i19) {
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i1 = HEAP32[i19 + 52 >> 2] | 0;
 i17 = HEAPU8[i19 + 60 >> 0] | 0;
 i18 = HEAPU8[i19 + 61 >> 0] | 0;
 i10 = HEAPU8[i19 + 62 >> 0] | 0;
 i2 = HEAP8[i19 + 63 >> 0] | 0;
 i11 = i19 + 28 | 0;
 i16 = HEAP32[i11 >> 2] | 0;
 i3 = i16 + -1 | 0;
 HEAP32[i11 >> 2] = i3;
 if (!i16) return;
 i12 = i19 + 20 | 0;
 i13 = i19 + 24 | 0;
 i14 = i19 + 12 | 0;
 i15 = i19 + 32 | 0;
 i16 = (i1 & 1 | 0) == 0;
 i9 = (i1 & 2 | 0) == 0 ? -16777216 : (i2 & 255) << 24;
 do {
  i1 = HEAP32[i13 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i19 >> 2] | 0;
   i1 = HEAP32[i12 >> 2] | 0;
   i2 = i3;
  } else {
   i8 = HEAP32[i12 >> 2] | 0;
   i4 = HEAP32[i19 >> 2] | 0;
   i6 = i8;
   i7 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i2 = HEAP32[i7 >> 2] | 0;
    i3 = i2 >>> 16 & 255;
    i5 = i2 >>> 8 & 255;
    i2 = i2 & 255;
    if (!i16) {
     i2 = ((Math_imul(i2, i10) | 0) >>> 0) / 255 | 0;
     i5 = ((Math_imul(i5, i18) | 0) >>> 0) / 255 | 0;
     i3 = ((Math_imul(i3, i17) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i6 >> 2] = i3 << 16 | i9 | i5 << 8 | i2;
    if (!i1) break; else {
     i6 = i6 + 4 | 0;
     i7 = i7 + 4 | 0;
    }
   }
   i1 = i8;
   i2 = HEAP32[i11 >> 2] | 0;
  }
  HEAP32[i19 >> 2] = i4 + (HEAP32[i14 >> 2] | 0);
  HEAP32[i12 >> 2] = i1 + (HEAP32[i15 >> 2] | 0);
  i3 = i2 + -1 | 0;
  HEAP32[i11 >> 2] = i3;
 } while ((i2 | 0) != 0);
 return;
}

function _SDL_Blit_BGRA8888_RGB888_Scale(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0;
 i12 = i15 + 28 | 0;
 i16 = HEAP32[i12 >> 2] | 0;
 i13 = (HEAP32[i15 + 8 >> 2] << 16 | 0) / (i16 | 0) | 0;
 i14 = i15 + 24 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 i9 = (HEAP32[i15 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i16 + -1 | 0;
 HEAP32[i12 >> 2] = i2;
 if (!i16) return;
 i16 = i15 + 20 | 0;
 i10 = i15 + 32 | 0;
 i11 = i15 + 12 | 0;
 i4 = HEAP32[i16 >> 2] | 0;
 i5 = i1;
 i8 = i4;
 i1 = 0;
 i3 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i6 = i1 + -65536 | 0;
   i7 = i6 >>> 16;
   i6 = i6 - (i7 << 16) | 0;
   i7 = i3 + 1 + i7 | 0;
  } else {
   i6 = i1;
   i7 = i3;
  }
  if (!i5) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i3 = -1;
   while (1) {
    i5 = i5 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i3 = i3 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i15 >> 2] | 0) + ((Math_imul(HEAP32[i11 >> 2] | 0, i7) | 0) + (i3 << 2)) | 0;
    }
    i17 = HEAP32[i2 >> 2] | 0;
    HEAP32[i4 >> 2] = i17 >>> 8 & 65280 | i17 >>> 24 | i17 << 8 & 16711680;
    if (!i5) break; else {
     i4 = i4 + 4 | 0;
     i1 = i1 + i9 | 0;
    }
   }
   i3 = HEAP32[i12 >> 2] | 0;
  }
  i1 = i8 + (HEAP32[i10 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i12 >> 2] = i2;
  if (!i3) break;
  i5 = HEAP32[i14 >> 2] | 0;
  i8 = i1;
  i4 = i1;
  i1 = i6 + i13 | 0;
  i3 = i7;
 }
 HEAP32[i16 >> 2] = i1;
 return;
}

function _SDL_Blit_BGR888_ARGB8888_Modulate(i19) {
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i1 = HEAP32[i19 + 52 >> 2] | 0;
 i17 = HEAPU8[i19 + 60 >> 0] | 0;
 i18 = HEAPU8[i19 + 61 >> 0] | 0;
 i10 = HEAPU8[i19 + 62 >> 0] | 0;
 i2 = HEAP8[i19 + 63 >> 0] | 0;
 i11 = i19 + 28 | 0;
 i16 = HEAP32[i11 >> 2] | 0;
 i3 = i16 + -1 | 0;
 HEAP32[i11 >> 2] = i3;
 if (!i16) return;
 i12 = i19 + 20 | 0;
 i13 = i19 + 24 | 0;
 i14 = i19 + 12 | 0;
 i15 = i19 + 32 | 0;
 i16 = (i1 & 1 | 0) == 0;
 i9 = (i1 & 2 | 0) == 0 ? -16777216 : (i2 & 255) << 24;
 do {
  i1 = HEAP32[i13 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i19 >> 2] | 0;
   i1 = HEAP32[i12 >> 2] | 0;
   i2 = i3;
  } else {
   i8 = HEAP32[i12 >> 2] | 0;
   i4 = HEAP32[i19 >> 2] | 0;
   i6 = i8;
   i7 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i3 = HEAP32[i7 >> 2] | 0;
    i2 = i3 >>> 16 & 255;
    i5 = i3 >>> 8 & 255;
    i3 = i3 & 255;
    if (!i16) {
     i2 = ((Math_imul(i2, i10) | 0) >>> 0) / 255 | 0;
     i5 = ((Math_imul(i5, i18) | 0) >>> 0) / 255 | 0;
     i3 = ((Math_imul(i3, i17) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i6 >> 2] = i3 << 16 | i9 | i5 << 8 | i2;
    if (!i1) break; else {
     i6 = i6 + 4 | 0;
     i7 = i7 + 4 | 0;
    }
   }
   i1 = i8;
   i2 = HEAP32[i11 >> 2] | 0;
  }
  HEAP32[i19 >> 2] = i4 + (HEAP32[i14 >> 2] | 0);
  HEAP32[i12 >> 2] = i1 + (HEAP32[i15 >> 2] | 0);
  i3 = i2 + -1 | 0;
  HEAP32[i11 >> 2] = i3;
 } while ((i2 | 0) != 0);
 return;
}

function _SDL_Blit_RGB888_BGR888_Scale(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0;
 i12 = i15 + 28 | 0;
 i16 = HEAP32[i12 >> 2] | 0;
 i13 = (HEAP32[i15 + 8 >> 2] << 16 | 0) / (i16 | 0) | 0;
 i14 = i15 + 24 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 i9 = (HEAP32[i15 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i16 + -1 | 0;
 HEAP32[i12 >> 2] = i2;
 if (!i16) return;
 i16 = i15 + 20 | 0;
 i10 = i15 + 32 | 0;
 i11 = i15 + 12 | 0;
 i4 = HEAP32[i16 >> 2] | 0;
 i5 = i1;
 i8 = i4;
 i1 = 0;
 i3 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i6 = i1 + -65536 | 0;
   i7 = i6 >>> 16;
   i6 = i6 - (i7 << 16) | 0;
   i7 = i3 + 1 + i7 | 0;
  } else {
   i6 = i1;
   i7 = i3;
  }
  if (!i5) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i3 = -1;
   while (1) {
    i5 = i5 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i3 = i3 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i15 >> 2] | 0) + ((Math_imul(HEAP32[i11 >> 2] | 0, i7) | 0) + (i3 << 2)) | 0;
    }
    i17 = HEAP32[i2 >> 2] | 0;
    HEAP32[i4 >> 2] = i17 << 16 & 16711680 | i17 & 65280 | i17 >>> 16 & 255;
    if (!i5) break; else {
     i4 = i4 + 4 | 0;
     i1 = i1 + i9 | 0;
    }
   }
   i3 = HEAP32[i12 >> 2] | 0;
  }
  i1 = i8 + (HEAP32[i10 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i12 >> 2] = i2;
  if (!i3) break;
  i5 = HEAP32[i14 >> 2] | 0;
  i8 = i1;
  i4 = i1;
  i1 = i6 + i13 | 0;
  i3 = i7;
 }
 HEAP32[i16 >> 2] = i1;
 return;
}

function _SDL_Blit_BGR888_RGB888_Scale(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0;
 i12 = i15 + 28 | 0;
 i16 = HEAP32[i12 >> 2] | 0;
 i13 = (HEAP32[i15 + 8 >> 2] << 16 | 0) / (i16 | 0) | 0;
 i14 = i15 + 24 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 i9 = (HEAP32[i15 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i16 + -1 | 0;
 HEAP32[i12 >> 2] = i2;
 if (!i16) return;
 i16 = i15 + 20 | 0;
 i10 = i15 + 32 | 0;
 i11 = i15 + 12 | 0;
 i4 = HEAP32[i16 >> 2] | 0;
 i5 = i1;
 i8 = i4;
 i1 = 0;
 i3 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i6 = i1 + -65536 | 0;
   i7 = i6 >>> 16;
   i6 = i6 - (i7 << 16) | 0;
   i7 = i3 + 1 + i7 | 0;
  } else {
   i6 = i1;
   i7 = i3;
  }
  if (!i5) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i3 = -1;
   while (1) {
    i5 = i5 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i3 = i3 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i15 >> 2] | 0) + ((Math_imul(HEAP32[i11 >> 2] | 0, i7) | 0) + (i3 << 2)) | 0;
    }
    i17 = HEAP32[i2 >> 2] | 0;
    HEAP32[i4 >> 2] = i17 << 16 & 16711680 | i17 & 65280 | i17 >>> 16 & 255;
    if (!i5) break; else {
     i4 = i4 + 4 | 0;
     i1 = i1 + i9 | 0;
    }
   }
   i3 = HEAP32[i12 >> 2] | 0;
  }
  i1 = i8 + (HEAP32[i10 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i12 >> 2] = i2;
  if (!i3) break;
  i5 = HEAP32[i14 >> 2] | 0;
  i8 = i1;
  i4 = i1;
  i1 = i6 + i13 | 0;
  i3 = i7;
 }
 HEAP32[i16 >> 2] = i1;
 return;
}

function _vfprintf(i15, i11, i1) {
 i15 = i15 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i10 = i16 + 80 | 0;
 i14 = i16 + 96 | 0;
 i13 = i16;
 i12 = i16 + 136 | 0;
 i2 = i14;
 i3 = i2 + 40 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP32[i10 >> 2] = HEAP32[i1 >> 2];
 if ((_printf_core(0, i11, i10, i13, i14) | 0) < 0) i1 = -1; else {
  if ((HEAP32[i15 + 76 >> 2] | 0) > -1) i8 = ___lockfile(i15) | 0; else i8 = 0;
  i1 = HEAP32[i15 >> 2] | 0;
  i9 = i1 & 32;
  if ((HEAP8[i15 + 74 >> 0] | 0) < 1) HEAP32[i15 >> 2] = i1 & -33;
  i1 = i15 + 48 | 0;
  if (!(HEAP32[i1 >> 2] | 0)) {
   i3 = i15 + 44 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   HEAP32[i3 >> 2] = i12;
   i5 = i15 + 28 | 0;
   HEAP32[i5 >> 2] = i12;
   i6 = i15 + 20 | 0;
   HEAP32[i6 >> 2] = i12;
   HEAP32[i1 >> 2] = 80;
   i7 = i15 + 16 | 0;
   HEAP32[i7 >> 2] = i12 + 80;
   i2 = _printf_core(i15, i11, i10, i13, i14) | 0;
   if (i4) {
    FUNCTION_TABLE_iiii[HEAP32[i15 + 36 >> 2] & 63](i15, 0, 0) | 0;
    i2 = (HEAP32[i6 >> 2] | 0) == 0 ? -1 : i2;
    HEAP32[i3 >> 2] = i4;
    HEAP32[i1 >> 2] = 0;
    HEAP32[i7 >> 2] = 0;
    HEAP32[i5 >> 2] = 0;
    HEAP32[i6 >> 2] = 0;
   }
  } else i2 = _printf_core(i15, i11, i10, i13, i14) | 0;
  i1 = HEAP32[i15 >> 2] | 0;
  HEAP32[i15 >> 2] = i1 | i9;
  if (i8) ___unlockfile(i15);
  i1 = (i1 & 32 | 0) == 0 ? i2 : -1;
 }
 STACKTOP = i16;
 return i1 | 0;
}

function _SDL_Blit_RGB888_RGB888_Modulate(i16) {
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0;
 i1 = HEAP32[i16 + 52 >> 2] | 0;
 i13 = HEAPU8[i16 + 60 >> 0] | 0;
 i14 = HEAPU8[i16 + 61 >> 0] | 0;
 i8 = HEAPU8[i16 + 62 >> 0] | 0;
 i9 = i16 + 28 | 0;
 i15 = HEAP32[i9 >> 2] | 0;
 i2 = i15 + -1 | 0;
 HEAP32[i9 >> 2] = i2;
 if (!i15) return;
 i15 = i16 + 20 | 0;
 i10 = i16 + 24 | 0;
 i11 = i16 + 12 | 0;
 i12 = i16 + 32 | 0;
 i5 = (i1 & 1 | 0) == 0;
 i3 = HEAP32[i16 >> 2] | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 i6 = i3;
 i7 = i1;
 i4 = i2;
 i2 = i3;
 while (1) {
  i17 = HEAP32[i10 >> 2] | 0;
  i3 = i17 + -1 | 0;
  if (!i17) i3 = i4; else {
   if (i5) while (1) {
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2] & 16777215;
    if (!i3) break; else {
     i3 = i3 + -1 | 0;
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
    }
   } else while (1) {
    i17 = HEAP32[i2 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i17 >>> 8 & 255, i14) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i17 >>> 16 & 255, i13) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i17 & 255, i8) | 0) >>> 0) / 255 | 0);
    if (!i3) break; else {
     i3 = i3 + -1 | 0;
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
    }
   }
   i3 = HEAP32[i9 >> 2] | 0;
  }
  i2 = i6 + (HEAP32[i11 >> 2] | 0) | 0;
  i1 = i7 + (HEAP32[i12 >> 2] | 0) | 0;
  i4 = i3 + -1 | 0;
  HEAP32[i9 >> 2] = i4;
  if (!i3) break; else {
   i6 = i2;
   i7 = i1;
  }
 }
 HEAP32[i16 >> 2] = i2;
 HEAP32[i15 >> 2] = i1;
 return;
}

function _mbrtowc(i4, i3, i7, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i9;
 i6 = (i1 | 0) == 0 ? 23208 : i1;
 i1 = HEAP32[i6 >> 2] | 0;
 L1 : do if (!i3) if (!i1) i1 = 0; else i8 = 15; else {
  i5 = (i4 | 0) == 0 ? i2 : i4;
  if (!i7) i1 = -2; else {
   if (!i1) {
    i1 = HEAP8[i3 >> 0] | 0;
    i2 = i1 & 255;
    if (i1 << 24 >> 24 > -1) {
     HEAP32[i5 >> 2] = i2;
     i1 = i1 << 24 >> 24 != 0 & 1;
     break;
    }
    i1 = i2 + -194 | 0;
    if (i1 >>> 0 > 50) {
     i8 = 15;
     break;
    }
    i1 = HEAP32[22936 + (i1 << 2) >> 2] | 0;
    i2 = i7 + -1 | 0;
    if (i2) {
     i3 = i3 + 1 | 0;
     i8 = 9;
    }
   } else {
    i2 = i7;
    i8 = 9;
   }
   L11 : do if ((i8 | 0) == 9) {
    i4 = HEAP8[i3 >> 0] | 0;
    i10 = (i4 & 255) >>> 3;
    if ((i10 + -16 | i10 + (i1 >> 26)) >>> 0 > 7) {
     i8 = 15;
     break L1;
    }
    while (1) {
     i3 = i3 + 1 | 0;
     i1 = (i4 & 255) + -128 | i1 << 6;
     i2 = i2 + -1 | 0;
     if ((i1 | 0) >= 0) break;
     if (!i2) break L11;
     i4 = HEAP8[i3 >> 0] | 0;
     if ((i4 & -64) << 24 >> 24 != -128) {
      i8 = 15;
      break L1;
     }
    }
    HEAP32[i6 >> 2] = 0;
    HEAP32[i5 >> 2] = i1;
    i1 = i7 - i2 | 0;
    break L1;
   } while (0);
   HEAP32[i6 >> 2] = i1;
   i1 = -2;
  }
 } while (0);
 if ((i8 | 0) == 15) {
  HEAP32[i6 >> 2] = 0;
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  i1 = -1;
 }
 STACKTOP = i9;
 return i1 | 0;
}

function _SDL_SYS_JoystickInit() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 1440 | 0;
 i2 = i4;
 HEAP32[3484] = 0;
 i1 = _emscripten_get_num_gamepads() | 0;
 if ((i1 | 0) == -1) {
  i3 = -1;
  STACKTOP = i4;
  return i3 | 0;
 }
 if ((i1 | 0) > 0) {
  i3 = 0;
  do {
   if (!(_emscripten_get_gamepad_status(i3 | 0, i2 | 0) | 0)) _Emscripten_JoyStickConnected(0, i2, 0) | 0;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != (i1 | 0));
 }
 if (_emscripten_set_gamepadconnected_callback(0, 0, 43) | 0) {
  i1 = HEAP32[3481] | 0;
  if (i1) do {
   i3 = i1;
   i1 = HEAP32[i1 + 1320 >> 2] | 0;
   _SDL_free(HEAP32[i3 + 8 >> 2] | 0);
   _SDL_free(HEAP32[i3 + 4 >> 2] | 0);
   _SDL_free(i3);
  } while ((i1 | 0) != 0);
  HEAP32[3483] = 0;
  HEAP32[3481] = 0;
  HEAP32[3484] = 0;
  HEAP32[3482] = 0;
  _emscripten_set_gamepadconnected_callback(0, 0, 0) | 0;
  _emscripten_set_gamepaddisconnected_callback(0, 0, 0) | 0;
  i3 = -1;
  STACKTOP = i4;
  return i3 | 0;
 }
 if (!(_emscripten_set_gamepaddisconnected_callback(0, 0, 44) | 0)) {
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 i1 = HEAP32[3481] | 0;
 if (i1) do {
  i3 = i1;
  i1 = HEAP32[i1 + 1320 >> 2] | 0;
  _SDL_free(HEAP32[i3 + 8 >> 2] | 0);
  _SDL_free(HEAP32[i3 + 4 >> 2] | 0);
  _SDL_free(i3);
 } while ((i1 | 0) != 0);
 HEAP32[3483] = 0;
 HEAP32[3481] = 0;
 HEAP32[3484] = 0;
 HEAP32[3482] = 0;
 _emscripten_set_gamepadconnected_callback(0, 0, 0) | 0;
 _emscripten_set_gamepaddisconnected_callback(0, 0, 0) | 0;
 i3 = -1;
 STACKTOP = i4;
 return i3 | 0;
}

function __ZNSt3__16vectorI5Vec2fNS_9allocatorIS1_EEE8__appendEj(i12, i14) {
 i12 = i12 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0;
 i11 = i12 + 8 | 0;
 i4 = HEAP32[i11 >> 2] | 0;
 i13 = i12 + 4 | 0;
 i3 = HEAP32[i13 >> 2] | 0;
 i1 = i3;
 if (i4 - i1 >> 3 >>> 0 >= i14 >>> 0) {
  i1 = i14;
  i2 = i3;
  while (1) {
   HEAPF32[i2 >> 2] = 0.0;
   HEAPF32[i2 + 4 >> 2] = 0.0;
   i1 = i1 + -1 | 0;
   if (!i1) break; else i2 = i2 + 8 | 0;
  }
  HEAP32[i13 >> 2] = i3 + (i14 << 3);
  return;
 }
 i9 = HEAP32[i12 >> 2] | 0;
 i10 = i9;
 i2 = (i1 - i10 >> 3) + i14 | 0;
 if (i2 >>> 0 > 536870911) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i12);
 i3 = i9;
 i1 = i4 - i3 | 0;
 if (i1 >> 3 >>> 0 < 268435455) {
  i1 = i1 >> 2;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i3 = (HEAP32[i13 >> 2] | 0) - i3 | 0;
  i2 = i3 >> 3;
  if (!i1) {
   i5 = 0;
   i7 = 0;
   i6 = i2;
   i4 = i3;
  } else i8 = 9;
 } else {
  i3 = (HEAP32[i13 >> 2] | 0) - i3 | 0;
  i1 = 536870911;
  i2 = i3 >> 3;
  i8 = 9;
 }
 if ((i8 | 0) == 9) {
  i5 = i1;
  i7 = __Znwj(i1 << 3) | 0;
  i6 = i2;
  i4 = i3;
 }
 i2 = i7 + (i5 << 3) | 0;
 i1 = i14;
 i3 = i7 + (i6 << 3) | 0;
 while (1) {
  HEAPF32[i3 >> 2] = 0.0;
  HEAPF32[i3 + 4 >> 2] = 0.0;
  i1 = i1 + -1 | 0;
  if (!i1) break; else i3 = i3 + 8 | 0;
 }
 _memcpy(i7 | 0, i9 | 0, i4 | 0) | 0;
 HEAP32[i12 >> 2] = i7;
 HEAP32[i13 >> 2] = i7 + (i6 + i14 << 3);
 HEAP32[i11 >> 2] = i2;
 if (!i10) return;
 __ZdlPv(i10);
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv(i5, i3, i2, i1, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 i10 = i6;
 i5 = i6 + 180 | 0;
 i7 = i6 + 160 | 0;
 i8 = i6 + 12 | 0;
 i12 = i6 + 8 | 0;
 i11 = i6 + 4 | 0;
 HEAP8[i5 >> 0] = HEAP8[62972] | 0;
 HEAP8[i5 + 1 >> 0] = HEAP8[62973] | 0;
 HEAP8[i5 + 2 >> 0] = HEAP8[62974] | 0;
 HEAP8[i5 + 3 >> 0] = HEAP8[62975] | 0;
 HEAP8[i5 + 4 >> 0] = HEAP8[62976] | 0;
 HEAP8[i5 + 5 >> 0] = HEAP8[62977] | 0;
 i9 = __ZNSt3__16__clocEv() | 0;
 HEAP32[i10 >> 2] = i4;
 i5 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i7, 20, i9, i5, i10) | 0;
 i9 = i7 + i5 | 0;
 i4 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i7, i9, i2) | 0;
 i13 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i12 >> 2] = i13;
 i12 = __ZNKSt3__16locale9use_facetERNS0_2idE(i12, 30376) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i13) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 48 >> 2] & 31](i12, i7, i9, i8) | 0;
 i5 = i8 + (i5 << 2) | 0;
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
 i5 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i8, (i4 | 0) == (i9 | 0) ? i5 : i8 + (i4 - i7 << 2) | 0, i5, i2, i1) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function _SDL_EventState(i8, i3) {
 i8 = i8 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = 6380 + ((i8 >>> 8 & 255) << 2) | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i2 = (i1 | 0) == 0;
 if (!i2 ? (HEAP32[i1 + ((i8 >>> 5 & 7) << 2) >> 2] & 1 << (i8 & 31) | 0) != 0 : 0) i7 = 0; else i7 = 1;
 if ((i7 & 255 | 0) == (i3 | 0)) return i7 | 0;
 switch (i3 | 0) {
 case 0:
  {
   if (i2) {
    i1 = _SDL_calloc(1, 32) | 0;
    HEAP32[i4 >> 2] = i1;
    if (!i1) return i7 | 0;
   }
   i6 = i1 + ((i8 >>> 5 & 7) << 2) | 0;
   HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 1 << (i8 & 31);
   if (!(HEAP32[1587] | 0)) return i7 | 0;
   if (_SDL_LockMutex(HEAP32[1586] | 0) | 0) return i7 | 0;
   i1 = HEAP32[1589] | 0;
   if (i1) do {
    i3 = i1 + 72 | 0;
    i6 = i1;
    i1 = HEAP32[i3 >> 2] | 0;
    i2 = i1;
    if ((HEAP32[i6 >> 2] | 0) == (i8 | 0)) {
     i4 = i6 + 68 | 0;
     i5 = HEAP32[i4 >> 2] | 0;
     if (!i5) i2 = i1; else {
      HEAP32[i5 + 72 >> 2] = i2;
      i2 = HEAP32[i3 >> 2] | 0;
     }
     if (i2) HEAP32[i2 + 68 >> 2] = i5;
     if ((HEAP32[1589] | 0) == (i6 | 0)) HEAP32[1589] = i2;
     if ((HEAP32[1590] | 0) == (i6 | 0)) HEAP32[1590] = HEAP32[i4 >> 2];
     HEAP32[i3 >> 2] = HEAP32[1591];
     HEAP32[1591] = i6;
     HEAP32[1588] = (HEAP32[1588] | 0) + -1;
    }
   } while ((i1 | 0) != 0);
   return i7 | 0;
  }
 case 1:
  {
   i6 = i1 + ((i8 >>> 5 & 7) << 2) | 0;
   HEAP32[i6 >> 2] = HEAP32[i6 >> 2] & ~(1 << (i8 & 31));
   return i7 | 0;
  }
 default:
  return i7 | 0;
 }
 return 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv(i5, i3, i2, i1, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i10 = i6;
 i5 = i6 + 70 | 0;
 i7 = i6 + 12 | 0;
 i8 = i6 + 32 | 0;
 i12 = i6 + 8 | 0;
 i11 = i6 + 4 | 0;
 HEAP8[i5 >> 0] = HEAP8[62972] | 0;
 HEAP8[i5 + 1 >> 0] = HEAP8[62973] | 0;
 HEAP8[i5 + 2 >> 0] = HEAP8[62974] | 0;
 HEAP8[i5 + 3 >> 0] = HEAP8[62975] | 0;
 HEAP8[i5 + 4 >> 0] = HEAP8[62976] | 0;
 HEAP8[i5 + 5 >> 0] = HEAP8[62977] | 0;
 i9 = __ZNSt3__16__clocEv() | 0;
 HEAP32[i10 >> 2] = i4;
 i5 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i7, 20, i9, i5, i10) | 0;
 i9 = i7 + i5 | 0;
 i4 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i7, i9, i2) | 0;
 i13 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i12 >> 2] = i13;
 i12 = __ZNKSt3__16locale9use_facetERNS0_2idE(i12, 30384) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i13) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 32 >> 2] & 31](i12, i7, i9, i8) | 0;
 i5 = i8 + i5 | 0;
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
 i5 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i8, (i4 | 0) == (i9 | 0) ? i5 : i8 + (i4 - i7) | 0, i5, i2, i1) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function _SDL_Blit_BGRA8888_ARGB8888_Scale(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0;
 i12 = i15 + 28 | 0;
 i16 = HEAP32[i12 >> 2] | 0;
 i13 = (HEAP32[i15 + 8 >> 2] << 16 | 0) / (i16 | 0) | 0;
 i14 = i15 + 24 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 i9 = (HEAP32[i15 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i16 + -1 | 0;
 HEAP32[i12 >> 2] = i2;
 if (!i16) return;
 i16 = i15 + 20 | 0;
 i10 = i15 + 32 | 0;
 i11 = i15 + 12 | 0;
 i4 = HEAP32[i16 >> 2] | 0;
 i5 = i1;
 i8 = i4;
 i1 = 0;
 i3 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i6 = i1 + -65536 | 0;
   i7 = i6 >>> 16;
   i6 = i6 - (i7 << 16) | 0;
   i7 = i3 + 1 + i7 | 0;
  } else {
   i6 = i1;
   i7 = i3;
  }
  if (!i5) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i3 = -1;
   while (1) {
    i5 = i5 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i3 = i3 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i15 >> 2] | 0) + ((Math_imul(HEAP32[i11 >> 2] | 0, i7) | 0) + (i3 << 2)) | 0;
    }
    HEAP32[i4 >> 2] = _llvm_bswap_i32(HEAP32[i2 >> 2] | 0) | 0;
    if (!i5) break; else {
     i4 = i4 + 4 | 0;
     i1 = i1 + i9 | 0;
    }
   }
   i3 = HEAP32[i12 >> 2] | 0;
  }
  i1 = i8 + (HEAP32[i10 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i12 >> 2] = i2;
  if (!i3) break;
  i5 = HEAP32[i14 >> 2] | 0;
  i8 = i1;
  i4 = i1;
  i1 = i6 + i13 | 0;
  i3 = i7;
 }
 HEAP32[i16 >> 2] = i1;
 return;
}

function _SDL_GetSpanEnclosingRect(i10, i6, i7, i8, i9) {
 i10 = i10 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i3 = i11 + 32 | 0;
 i5 = i11 + 24 | 0;
 i4 = i11 + 16 | 0;
 i2 = i11 + 8 | 0;
 i1 = i11;
 if ((i10 | 0) < 1) {
  HEAP32[i1 >> 2] = 40625;
  _SDL_SetError(41366, i1) | 0;
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 if ((i6 | 0) < 1) {
  HEAP32[i2 >> 2] = 40631;
  _SDL_SetError(41366, i2) | 0;
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 if (!i8) {
  HEAP32[i4 >> 2] = 40638;
  _SDL_SetError(41366, i4) | 0;
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 if (!i9) {
  HEAP32[i5 >> 2] = 40644;
  _SDL_SetError(41366, i5) | 0;
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 if ((i7 | 0) < 1) {
  HEAP32[i3 >> 2] = 40649;
  _SDL_SetError(41366, i3) | 0;
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 } else {
  i3 = 0;
  i2 = i6;
  i1 = 0;
 }
 do {
  i4 = HEAP32[i8 + (i3 << 4) + 4 >> 2] | 0;
  i5 = (HEAP32[i8 + (i3 << 4) + 12 >> 2] | 0) + i4 | 0;
  i2 = (i4 | 0) < 0 ? 0 : (i4 | 0) < (i2 | 0) ? i4 : i2;
  i1 = (i5 | 0) > (i6 | 0) ? i6 : (i5 | 0) > (i1 | 0) ? i5 : i1;
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != (i7 | 0));
 if ((i1 | 0) <= (i2 | 0)) {
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 HEAP32[i9 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = i2;
 HEAP32[i9 + 8 >> 2] = i10;
 HEAP32[i9 + 12 >> 2] = i1 - i2;
 i10 = 1;
 STACKTOP = i11;
 return i10 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1, i12, i11, i10, i13, i14) {
 i1 = i1 | 0;
 i12 = i12 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 if ((i1 | 0) == (HEAP32[i12 + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, i12, i11, i10, i13); else {
  i6 = i12 + 52 | 0;
  i7 = HEAP8[i6 >> 0] | 0;
  i8 = i12 + 53 | 0;
  i9 = HEAP8[i8 >> 0] | 0;
  i5 = HEAP32[i1 + 12 >> 2] | 0;
  i2 = i1 + 16 + (i5 << 3) | 0;
  HEAP8[i6 >> 0] = 0;
  HEAP8[i8 >> 0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1 + 16 | 0, i12, i11, i10, i13, i14);
  L4 : do if ((i5 | 0) > 1) {
   i3 = i12 + 24 | 0;
   i4 = i1 + 8 | 0;
   i5 = i12 + 54 | 0;
   i1 = i1 + 24 | 0;
   do {
    if (HEAP8[i5 >> 0] | 0) break L4;
    if (!(HEAP8[i6 >> 0] | 0)) {
     if ((HEAP8[i8 >> 0] | 0) != 0 ? (HEAP32[i4 >> 2] & 1 | 0) == 0 : 0) break L4;
    } else {
     if ((HEAP32[i3 >> 2] | 0) == 1) break L4;
     if (!(HEAP32[i4 >> 2] & 2)) break L4;
    }
    HEAP8[i6 >> 0] = 0;
    HEAP8[i8 >> 0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1, i12, i11, i10, i13, i14);
    i1 = i1 + 8 | 0;
   } while (i1 >>> 0 < i2 >>> 0);
  } while (0);
  HEAP8[i6 >> 0] = i7;
  HEAP8[i8 >> 0] = i9;
 }
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy(i6, i5, i4, i3, i1, i2) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i9 = i7 + 8 | 0;
 i13 = i7;
 i14 = i7 + 204 | 0;
 i8 = i7 + 32 | 0;
 i11 = i7 + 28 | 0;
 i6 = i7 + 24 | 0;
 i12 = i7 + 20 | 0;
 i10 = i7 + 16 | 0;
 i15 = i13;
 HEAP32[i15 >> 2] = 37;
 HEAP32[i15 + 4 >> 2] = 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i13 + 1 | 0, 62966, 0, HEAP32[i4 + 4 >> 2] | 0);
 i15 = __ZNSt3__16__clocEv() | 0;
 i16 = i9;
 HEAP32[i16 >> 2] = i1;
 HEAP32[i16 + 4 >> 2] = i2;
 i1 = i14 + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i14, 23, i15, i13, i9) | 0) | 0;
 i13 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i14, i1, i4) | 0;
 i2 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i12 >> 2] = i2;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i14, i13, i1, i8, i11, i6, i12);
 __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
 HEAP32[i10 >> 2] = HEAP32[i5 >> 2];
 i5 = HEAP32[i11 >> 2] | 0;
 i6 = HEAP32[i6 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i9, i8, i5, i6, i4, i3) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx(i6, i5, i4, i3, i1, i2) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i9 = i7 + 8 | 0;
 i13 = i7;
 i14 = i7 + 196 | 0;
 i8 = i7 + 32 | 0;
 i11 = i7 + 28 | 0;
 i6 = i7 + 24 | 0;
 i12 = i7 + 20 | 0;
 i10 = i7 + 16 | 0;
 i15 = i13;
 HEAP32[i15 >> 2] = 37;
 HEAP32[i15 + 4 >> 2] = 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i13 + 1 | 0, 62966, 1, HEAP32[i4 + 4 >> 2] | 0);
 i15 = __ZNSt3__16__clocEv() | 0;
 i16 = i9;
 HEAP32[i16 >> 2] = i1;
 HEAP32[i16 + 4 >> 2] = i2;
 i1 = i14 + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i14, 22, i15, i13, i9) | 0) | 0;
 i13 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i14, i1, i4) | 0;
 i2 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i12 >> 2] = i2;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i14, i13, i1, i8, i11, i6, i12);
 __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
 HEAP32[i10 >> 2] = HEAP32[i5 >> 2];
 i5 = HEAP32[i11 >> 2] | 0;
 i6 = HEAP32[i6 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i9, i8, i5, i6, i4, i3) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy(i6, i5, i4, i3, i1, i2) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i9 = i7 + 8 | 0;
 i13 = i7;
 i14 = i7 + 75 | 0;
 i8 = i7 + 32 | 0;
 i11 = i7 + 28 | 0;
 i6 = i7 + 24 | 0;
 i12 = i7 + 20 | 0;
 i10 = i7 + 16 | 0;
 i15 = i13;
 HEAP32[i15 >> 2] = 37;
 HEAP32[i15 + 4 >> 2] = 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i13 + 1 | 0, 62966, 0, HEAP32[i4 + 4 >> 2] | 0);
 i15 = __ZNSt3__16__clocEv() | 0;
 i16 = i9;
 HEAP32[i16 >> 2] = i1;
 HEAP32[i16 + 4 >> 2] = i2;
 i1 = i14 + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i14, 23, i15, i13, i9) | 0) | 0;
 i13 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i14, i1, i4) | 0;
 i2 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i12 >> 2] = i2;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i14, i13, i1, i8, i11, i6, i12);
 __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
 HEAP32[i10 >> 2] = HEAP32[i5 >> 2];
 i5 = HEAP32[i11 >> 2] | 0;
 i6 = HEAP32[i6 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i9, i8, i5, i6, i4, i3) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _Color32DitherYUY2Mod1X(i15, i17, i3, i2, i4, i6, i5, i1, i16) {
 i15 = i15 | 0;
 i17 = i17 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i16 = i16 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i14 = (i1 | 0) / 2 | 0;
 if (!i5) return;
 i11 = (i1 + 1 | 0) >>> 0 < 3;
 i12 = i14 << 1;
 i13 = i14 << 2;
 i1 = i6;
 while (1) {
  i5 = i5 + -1 | 0;
  if (!i11) {
   i10 = i1 + (i12 << 2) | 0;
   i9 = i4 + i13 | 0;
   i8 = i2;
   i7 = i3;
   i6 = i14;
   while (1) {
    i6 = i6 + -1 | 0;
    i21 = HEAPU8[i8 >> 0] | 0;
    i20 = (HEAP32[i15 + (i21 << 2) >> 2] | 0) + 256 | 0;
    i18 = HEAPU8[i4 >> 0] | 0;
    i21 = (HEAP32[i15 + ((i21 | 256) << 2) >> 2] | 0) + 1024 + (HEAP32[i15 + ((i18 | 512) << 2) >> 2] | 0) | 0;
    i18 = (HEAP32[i15 + ((i18 | 768) << 2) >> 2] | 0) + 1792 | 0;
    i19 = HEAPU8[i7 >> 0] | 0;
    HEAP32[i1 >> 2] = HEAP32[i17 + (i19 + i21 << 2) >> 2] | HEAP32[i17 + (i19 + i20 << 2) >> 2] | HEAP32[i17 + (i19 + i18 << 2) >> 2];
    i19 = HEAPU8[i7 + 2 >> 0] | 0;
    HEAP32[i1 + 4 >> 2] = HEAP32[i17 + (i19 + i21 << 2) >> 2] | HEAP32[i17 + (i19 + i20 << 2) >> 2] | HEAP32[i17 + (i19 + i18 << 2) >> 2];
    if (!i6) break; else {
     i8 = i8 + 4 | 0;
     i4 = i4 + 4 | 0;
     i7 = i7 + 4 | 0;
     i1 = i1 + 8 | 0;
    }
   }
   i3 = i3 + i13 | 0;
   i2 = i2 + i13 | 0;
   i4 = i9;
   i1 = i10;
  }
  if (!i5) break; else i1 = i1 + (i16 << 2) | 0;
 }
 return;
}

function _Color16DitherYUY2Mod1X(i15, i17, i3, i2, i4, i6, i5, i1, i16) {
 i15 = i15 | 0;
 i17 = i17 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i16 = i16 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i14 = (i1 | 0) / 2 | 0;
 if (!i5) return;
 i11 = (i1 + 1 | 0) >>> 0 < 3;
 i12 = i14 << 1;
 i13 = i14 << 2;
 i1 = i6;
 while (1) {
  i5 = i5 + -1 | 0;
  if (!i11) {
   i10 = i1 + (i12 << 1) | 0;
   i9 = i4 + i13 | 0;
   i8 = i2;
   i7 = i3;
   i6 = i14;
   while (1) {
    i6 = i6 + -1 | 0;
    i21 = HEAPU8[i8 >> 0] | 0;
    i20 = (HEAP32[i15 + (i21 << 2) >> 2] | 0) + 256 | 0;
    i18 = HEAPU8[i4 >> 0] | 0;
    i21 = (HEAP32[i15 + ((i21 | 256) << 2) >> 2] | 0) + 1024 + (HEAP32[i15 + ((i18 | 512) << 2) >> 2] | 0) | 0;
    i18 = (HEAP32[i15 + ((i18 | 768) << 2) >> 2] | 0) + 1792 | 0;
    i19 = HEAPU8[i7 >> 0] | 0;
    HEAP16[i1 >> 1] = HEAP32[i17 + (i19 + i21 << 2) >> 2] | HEAP32[i17 + (i19 + i20 << 2) >> 2] | HEAP32[i17 + (i19 + i18 << 2) >> 2];
    i19 = HEAPU8[i7 + 2 >> 0] | 0;
    HEAP16[i1 + 2 >> 1] = HEAP32[i17 + (i19 + i21 << 2) >> 2] | HEAP32[i17 + (i19 + i20 << 2) >> 2] | HEAP32[i17 + (i19 + i18 << 2) >> 2];
    if (!i6) break; else {
     i8 = i8 + 4 | 0;
     i4 = i4 + 4 | 0;
     i7 = i7 + 4 | 0;
     i1 = i1 + 4 | 0;
    }
   }
   i3 = i3 + i13 | 0;
   i2 = i2 + i13 | 0;
   i4 = i9;
   i1 = i10;
  }
  if (!i5) break; else i1 = i1 + (i16 << 1) | 0;
 }
 return;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx(i6, i5, i4, i3, i1, i2) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i9 = i7 + 8 | 0;
 i13 = i7;
 i14 = i7 + 74 | 0;
 i8 = i7 + 32 | 0;
 i11 = i7 + 28 | 0;
 i6 = i7 + 24 | 0;
 i12 = i7 + 20 | 0;
 i10 = i7 + 16 | 0;
 i15 = i13;
 HEAP32[i15 >> 2] = 37;
 HEAP32[i15 + 4 >> 2] = 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i13 + 1 | 0, 62966, 1, HEAP32[i4 + 4 >> 2] | 0);
 i15 = __ZNSt3__16__clocEv() | 0;
 i16 = i9;
 HEAP32[i16 >> 2] = i1;
 HEAP32[i16 + 4 >> 2] = i2;
 i1 = i14 + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i14, 22, i15, i13, i9) | 0) | 0;
 i13 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i14, i1, i4) | 0;
 i2 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i12 >> 2] = i2;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i14, i13, i1, i8, i11, i6, i12);
 __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
 HEAP32[i10 >> 2] = HEAP32[i5 >> 2];
 i5 = HEAP32[i11 >> 2] | 0;
 i6 = HEAP32[i6 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i9, i8, i5, i6, i4, i3) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _SDL_Blit_RGB888_ARGB8888_Scale(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0;
 i12 = i15 + 28 | 0;
 i16 = HEAP32[i12 >> 2] | 0;
 i13 = (HEAP32[i15 + 8 >> 2] << 16 | 0) / (i16 | 0) | 0;
 i14 = i15 + 24 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 i9 = (HEAP32[i15 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i16 + -1 | 0;
 HEAP32[i12 >> 2] = i2;
 if (!i16) return;
 i16 = i15 + 20 | 0;
 i10 = i15 + 32 | 0;
 i11 = i15 + 12 | 0;
 i4 = HEAP32[i16 >> 2] | 0;
 i5 = i1;
 i8 = i4;
 i1 = 0;
 i3 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i6 = i1 + -65536 | 0;
   i7 = i6 >>> 16;
   i6 = i6 - (i7 << 16) | 0;
   i7 = i3 + 1 + i7 | 0;
  } else {
   i6 = i1;
   i7 = i3;
  }
  if (!i5) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i3 = -1;
   while (1) {
    i5 = i5 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i3 = i3 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i15 >> 2] | 0) + ((Math_imul(HEAP32[i11 >> 2] | 0, i7) | 0) + (i3 << 2)) | 0;
    }
    HEAP32[i4 >> 2] = HEAP32[i2 >> 2] | -16777216;
    if (!i5) break; else {
     i4 = i4 + 4 | 0;
     i1 = i1 + i9 | 0;
    }
   }
   i3 = HEAP32[i12 >> 2] | 0;
  }
  i1 = i8 + (HEAP32[i10 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i12 >> 2] = i2;
  if (!i3) break;
  i5 = HEAP32[i14 >> 2] | 0;
  i8 = i1;
  i4 = i1;
  i1 = i6 + i13 | 0;
  i3 = i7;
 }
 HEAP32[i16 >> 2] = i1;
 return;
}

function _SDL_Blit_ARGB8888_RGB888_Scale(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0;
 i12 = i15 + 28 | 0;
 i16 = HEAP32[i12 >> 2] | 0;
 i13 = (HEAP32[i15 + 8 >> 2] << 16 | 0) / (i16 | 0) | 0;
 i14 = i15 + 24 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 i9 = (HEAP32[i15 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i16 + -1 | 0;
 HEAP32[i12 >> 2] = i2;
 if (!i16) return;
 i16 = i15 + 20 | 0;
 i10 = i15 + 32 | 0;
 i11 = i15 + 12 | 0;
 i4 = HEAP32[i16 >> 2] | 0;
 i5 = i1;
 i8 = i4;
 i1 = 0;
 i3 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i6 = i1 + -65536 | 0;
   i7 = i6 >>> 16;
   i6 = i6 - (i7 << 16) | 0;
   i7 = i3 + 1 + i7 | 0;
  } else {
   i6 = i1;
   i7 = i3;
  }
  if (!i5) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i3 = -1;
   while (1) {
    i5 = i5 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i3 = i3 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i15 >> 2] | 0) + ((Math_imul(HEAP32[i11 >> 2] | 0, i7) | 0) + (i3 << 2)) | 0;
    }
    HEAP32[i4 >> 2] = HEAP32[i2 >> 2] & 16777215;
    if (!i5) break; else {
     i4 = i4 + 4 | 0;
     i1 = i1 + i9 | 0;
    }
   }
   i3 = HEAP32[i12 >> 2] | 0;
  }
  i1 = i8 + (HEAP32[i10 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i12 >> 2] = i2;
  if (!i3) break;
  i5 = HEAP32[i14 >> 2] | 0;
  i8 = i1;
  i4 = i1;
  i1 = i6 + i13 | 0;
  i3 = i7;
 }
 HEAP32[i16 >> 2] = i1;
 return;
}

function _SDL_Blit_ABGR8888_BGR888_Scale(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0;
 i12 = i15 + 28 | 0;
 i16 = HEAP32[i12 >> 2] | 0;
 i13 = (HEAP32[i15 + 8 >> 2] << 16 | 0) / (i16 | 0) | 0;
 i14 = i15 + 24 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 i9 = (HEAP32[i15 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i16 + -1 | 0;
 HEAP32[i12 >> 2] = i2;
 if (!i16) return;
 i16 = i15 + 20 | 0;
 i10 = i15 + 32 | 0;
 i11 = i15 + 12 | 0;
 i4 = HEAP32[i16 >> 2] | 0;
 i5 = i1;
 i8 = i4;
 i1 = 0;
 i3 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i6 = i1 + -65536 | 0;
   i7 = i6 >>> 16;
   i6 = i6 - (i7 << 16) | 0;
   i7 = i3 + 1 + i7 | 0;
  } else {
   i6 = i1;
   i7 = i3;
  }
  if (!i5) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i3 = -1;
   while (1) {
    i5 = i5 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i3 = i3 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i15 >> 2] | 0) + ((Math_imul(HEAP32[i11 >> 2] | 0, i7) | 0) + (i3 << 2)) | 0;
    }
    HEAP32[i4 >> 2] = HEAP32[i2 >> 2] & 16777215;
    if (!i5) break; else {
     i4 = i4 + 4 | 0;
     i1 = i1 + i9 | 0;
    }
   }
   i3 = HEAP32[i12 >> 2] | 0;
  }
  i1 = i8 + (HEAP32[i10 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i12 >> 2] = i2;
  if (!i3) break;
  i5 = HEAP32[i14 >> 2] | 0;
  i8 = i1;
  i4 = i1;
  i1 = i6 + i13 | 0;
  i3 = i7;
 }
 HEAP32[i16 >> 2] = i1;
 return;
}

function _SDL_IntersectRect(i7, i8, i9) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i10 = 0, i11 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i10 + 16 | 0;
 i2 = i10 + 8 | 0;
 i1 = i10;
 if (!i7) {
  HEAP32[i1 >> 2] = 40584;
  _SDL_SetError(41366, i1) | 0;
  i9 = 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 if (!i8) {
  HEAP32[i2 >> 2] = 40586;
  _SDL_SetError(41366, i2) | 0;
  i9 = 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 if (!i9) {
  HEAP32[i3 >> 2] = 40588;
  _SDL_SetError(41366, i3) | 0;
  i9 = 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 i1 = HEAP32[i7 + 8 >> 2] | 0;
 if ((((i1 | 0) >= 1 ? (i6 = HEAP32[i7 + 12 >> 2] | 0, (i6 | 0) >= 1) : 0) ? (i4 = HEAP32[i8 + 8 >> 2] | 0, (i4 | 0) >= 1) : 0) ? (i5 = HEAP32[i8 + 12 >> 2] | 0, (i5 | 0) >= 1) : 0) {
  i11 = HEAP32[i7 >> 2] | 0;
  i3 = i1 + i11 | 0;
  i1 = HEAP32[i8 >> 2] | 0;
  i2 = i4 + i1 | 0;
  i4 = (i1 | 0) > (i11 | 0) ? i1 : i11;
  HEAP32[i9 >> 2] = i4;
  i4 = ((i2 | 0) < (i3 | 0) ? i2 : i3) - i4 | 0;
  HEAP32[i9 + 8 >> 2] = i4;
  i3 = HEAP32[i7 + 4 >> 2] | 0;
  i7 = i6 + i3 | 0;
  i8 = HEAP32[i8 + 4 >> 2] | 0;
  i6 = i5 + i8 | 0;
  i8 = (i8 | 0) > (i3 | 0) ? i8 : i3;
  HEAP32[i9 + 4 >> 2] = i8;
  i8 = ((i6 | 0) < (i7 | 0) ? i6 : i7) - i8 | 0;
  HEAP32[i9 + 12 >> 2] = i8;
  i9 = ((i8 | 0) < 1 | (i4 | 0) < 1) & 1 ^ 1;
  STACKTOP = i10;
  return i9 | 0;
 }
 HEAP32[i9 + 8 >> 2] = 0;
 HEAP32[i9 + 12 >> 2] = 0;
 i11 = 0;
 STACKTOP = i10;
 return i11 | 0;
}

function _SDL_Blit_ARGB8888_ARGB8888_Scale(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0;
 i12 = i15 + 28 | 0;
 i16 = HEAP32[i12 >> 2] | 0;
 i13 = (HEAP32[i15 + 8 >> 2] << 16 | 0) / (i16 | 0) | 0;
 i14 = i15 + 24 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 i9 = (HEAP32[i15 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i16 + -1 | 0;
 HEAP32[i12 >> 2] = i2;
 if (!i16) return;
 i16 = i15 + 20 | 0;
 i10 = i15 + 32 | 0;
 i11 = i15 + 12 | 0;
 i4 = HEAP32[i16 >> 2] | 0;
 i5 = i1;
 i8 = i4;
 i1 = 0;
 i3 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i6 = i1 + -65536 | 0;
   i7 = i6 >>> 16;
   i6 = i6 - (i7 << 16) | 0;
   i7 = i3 + 1 + i7 | 0;
  } else {
   i6 = i1;
   i7 = i3;
  }
  if (!i5) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i3 = -1;
   while (1) {
    i5 = i5 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i3 = i3 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i15 >> 2] | 0) + ((Math_imul(HEAP32[i11 >> 2] | 0, i7) | 0) + (i3 << 2)) | 0;
    }
    HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
    if (!i5) break; else {
     i4 = i4 + 4 | 0;
     i1 = i1 + i9 | 0;
    }
   }
   i3 = HEAP32[i12 >> 2] | 0;
  }
  i1 = i8 + (HEAP32[i10 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i12 >> 2] = i2;
  if (!i3) break;
  i5 = HEAP32[i14 >> 2] | 0;
  i8 = i1;
  i4 = i1;
  i1 = i6 + i13 | 0;
  i3 = i7;
 }
 HEAP32[i16 >> 2] = i1;
 return;
}

function _uncopy_transl_16(i3, i13, i22, i1, i2) {
 i3 = i3 | 0;
 i13 = i13 | 0;
 i22 = i22 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0;
 if ((i22 | 0) <= 0) {
  i22 = i22 << 2;
  return i22 | 0;
 }
 i17 = i1 + 4 | 0;
 i20 = i1 + 8 | 0;
 i21 = i1 + 12 | 0;
 i16 = HEAP32[5992 + ((HEAPU8[i1 + 20 >> 0] | 0) << 2) >> 2] | 0;
 i14 = HEAP32[5992 + ((HEAPU8[i1 + 21 >> 0] | 0) << 2) >> 2] | 0;
 i15 = HEAP32[5992 + ((HEAPU8[i1 + 22 >> 0] | 0) << 2) >> 2] | 0;
 i18 = HEAPU8[i1 + 24 >> 0] | 0;
 i19 = HEAPU8[i1 + 25 >> 0] | 0;
 i5 = HEAPU8[i1 + 26 >> 0] | 0;
 i6 = HEAPU8[i2 + 28 >> 0] | 0;
 i7 = HEAPU8[i2 + 32 >> 0] | 0;
 i8 = HEAPU8[i2 + 29 >> 0] | 0;
 i9 = HEAPU8[i2 + 33 >> 0] | 0;
 i10 = HEAPU8[i2 + 30 >> 0] | 0;
 i11 = HEAPU8[i2 + 34 >> 0] | 0;
 i12 = HEAPU8[i2 + 31 >> 0] | 0;
 i4 = HEAPU8[i2 + 35 >> 0] | 0;
 i2 = i3;
 i3 = 0;
 i1 = i13;
 while (1) {
  i13 = HEAP32[i1 >> 2] | 0;
  i23 = i13 & -993 | i13 >>> 16;
  HEAP32[i2 >> 2] = (HEAPU8[i14 + ((HEAP32[i20 >> 2] & i23) >>> i19) >> 0] | 0) >>> i8 << i9 | (HEAPU8[i16 + ((i23 & HEAP32[i17 >> 2]) >>> i18) >> 0] | 0) >>> i6 << i7 | (HEAPU8[i15 + ((HEAP32[i21 >> 2] & i23) >>> i5) >> 0] | 0) >>> i10 << i11 | (i13 >>> 2 & 248) >>> i12 << i4;
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == (i22 | 0)) break; else {
   i2 = i2 + 4 | 0;
   i1 = i1 + 4 | 0;
  }
 }
 i23 = i22 << 2;
 return i23 | 0;
}

function _SDL_Blit_RGB888_RGB888_Scale(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0;
 i12 = i15 + 28 | 0;
 i16 = HEAP32[i12 >> 2] | 0;
 i13 = (HEAP32[i15 + 8 >> 2] << 16 | 0) / (i16 | 0) | 0;
 i14 = i15 + 24 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 i9 = (HEAP32[i15 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i16 + -1 | 0;
 HEAP32[i12 >> 2] = i2;
 if (!i16) return;
 i16 = i15 + 20 | 0;
 i10 = i15 + 32 | 0;
 i11 = i15 + 12 | 0;
 i4 = HEAP32[i16 >> 2] | 0;
 i5 = i1;
 i8 = i4;
 i1 = 0;
 i3 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i6 = i1 + -65536 | 0;
   i7 = i6 >>> 16;
   i6 = i6 - (i7 << 16) | 0;
   i7 = i3 + 1 + i7 | 0;
  } else {
   i6 = i1;
   i7 = i3;
  }
  if (!i5) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i3 = -1;
   while (1) {
    i5 = i5 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i3 = i3 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i15 >> 2] | 0) + ((Math_imul(HEAP32[i11 >> 2] | 0, i7) | 0) + (i3 << 2)) | 0;
    }
    HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
    if (!i5) break; else {
     i4 = i4 + 4 | 0;
     i1 = i1 + i9 | 0;
    }
   }
   i3 = HEAP32[i12 >> 2] | 0;
  }
  i1 = i8 + (HEAP32[i10 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i12 >> 2] = i2;
  if (!i3) break;
  i5 = HEAP32[i14 >> 2] | 0;
  i8 = i1;
  i4 = i1;
  i1 = i6 + i13 | 0;
  i3 = i7;
 }
 HEAP32[i16 >> 2] = i1;
 return;
}

function _SDL_Blit_BGR888_BGR888_Scale(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0;
 i12 = i15 + 28 | 0;
 i16 = HEAP32[i12 >> 2] | 0;
 i13 = (HEAP32[i15 + 8 >> 2] << 16 | 0) / (i16 | 0) | 0;
 i14 = i15 + 24 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 i9 = (HEAP32[i15 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i16 + -1 | 0;
 HEAP32[i12 >> 2] = i2;
 if (!i16) return;
 i16 = i15 + 20 | 0;
 i10 = i15 + 32 | 0;
 i11 = i15 + 12 | 0;
 i4 = HEAP32[i16 >> 2] | 0;
 i5 = i1;
 i8 = i4;
 i1 = 0;
 i3 = 0;
 while (1) {
  if ((i1 | 0) > 65535) {
   i6 = i1 + -65536 | 0;
   i7 = i6 >>> 16;
   i6 = i6 - (i7 << 16) | 0;
   i7 = i3 + 1 + i7 | 0;
  } else {
   i6 = i1;
   i7 = i3;
  }
  if (!i5) i3 = i2; else {
   i1 = 65536;
   i2 = 0;
   i3 = -1;
   while (1) {
    i5 = i5 + -1 | 0;
    if ((i1 | 0) > 65535) {
     i2 = i1 + -65536 | 0;
     i1 = i2 >>> 16;
     i3 = i3 + 1 + i1 | 0;
     i1 = i2 - (i1 << 16) | 0;
     i2 = (HEAP32[i15 >> 2] | 0) + ((Math_imul(HEAP32[i11 >> 2] | 0, i7) | 0) + (i3 << 2)) | 0;
    }
    HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
    if (!i5) break; else {
     i4 = i4 + 4 | 0;
     i1 = i1 + i9 | 0;
    }
   }
   i3 = HEAP32[i12 >> 2] | 0;
  }
  i1 = i8 + (HEAP32[i10 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i12 >> 2] = i2;
  if (!i3) break;
  i5 = HEAP32[i14 >> 2] | 0;
  i8 = i1;
  i4 = i1;
  i1 = i6 + i13 | 0;
  i3 = i7;
 }
 HEAP32[i16 >> 2] = i1;
 return;
}

function __ZNSt3__111__stdoutbufIwE8overflowEj(i2, i14) {
 i2 = i2 | 0;
 i14 = i14 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i12 = i16 + 16 | 0;
 i1 = i16 + 8 | 0;
 i11 = i16 + 4 | 0;
 i10 = i16;
 i13 = (i14 | 0) == -1;
 L1 : do if (!i13) {
  HEAP32[i1 >> 2] = i14;
  if (HEAP8[i2 + 44 >> 0] | 0) if ((_fwrite(i1, 4, 1, HEAP32[i2 + 32 >> 2] | 0) | 0) == 1) {
   i15 = 11;
   break;
  } else {
   i1 = -1;
   break;
  }
  HEAP32[i11 >> 2] = i12;
  i8 = i1 + 4 | 0;
  i9 = i2 + 36 | 0;
  i4 = i2 + 40 | 0;
  i5 = i12 + 8 | 0;
  i6 = i12;
  i7 = i2 + 32 | 0;
  while (1) {
   i2 = HEAP32[i9 >> 2] | 0;
   i2 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 31](i2, HEAP32[i4 >> 2] | 0, i1, i8, i10, i12, i5, i11) | 0;
   if ((HEAP32[i10 >> 2] | 0) == (i1 | 0)) {
    i1 = -1;
    break L1;
   }
   if ((i2 | 0) == 3) break;
   i3 = (i2 | 0) == 1;
   if (i2 >>> 0 >= 2) {
    i1 = -1;
    break L1;
   }
   i2 = (HEAP32[i11 >> 2] | 0) - i6 | 0;
   if ((_fwrite(i12, 1, i2, HEAP32[i7 >> 2] | 0) | 0) != (i2 | 0)) {
    i1 = -1;
    break L1;
   }
   if (i3) i1 = i3 ? HEAP32[i10 >> 2] | 0 : i1; else {
    i15 = 11;
    break L1;
   }
  }
  if ((_fwrite(i1, 1, 1, HEAP32[i7 >> 2] | 0) | 0) != 1) i1 = -1; else i15 = 11;
 } else i15 = 11; while (0);
 if ((i15 | 0) == 11) i1 = i13 ? 0 : i14;
 STACKTOP = i16;
 return i1 | 0;
}

function __ZNSt3__111__stdoutbufIcE8overflowEi(i2, i14) {
 i2 = i2 | 0;
 i14 = i14 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i12 = i16 + 16 | 0;
 i1 = i16 + 8 | 0;
 i11 = i16 + 4 | 0;
 i10 = i16;
 i13 = (i14 | 0) == -1;
 L1 : do if (!i13) {
  HEAP8[i1 >> 0] = i14;
  if (HEAP8[i2 + 44 >> 0] | 0) if ((_fwrite(i1, 1, 1, HEAP32[i2 + 32 >> 2] | 0) | 0) == 1) {
   i15 = 11;
   break;
  } else {
   i1 = -1;
   break;
  }
  HEAP32[i11 >> 2] = i12;
  i9 = i1 + 1 | 0;
  i4 = i2 + 36 | 0;
  i5 = i2 + 40 | 0;
  i6 = i12 + 8 | 0;
  i7 = i12;
  i8 = i2 + 32 | 0;
  while (1) {
   i2 = HEAP32[i4 >> 2] | 0;
   i2 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 31](i2, HEAP32[i5 >> 2] | 0, i1, i9, i10, i12, i6, i11) | 0;
   if ((HEAP32[i10 >> 2] | 0) == (i1 | 0)) {
    i1 = -1;
    break L1;
   }
   if ((i2 | 0) == 3) break;
   i3 = (i2 | 0) == 1;
   if (i2 >>> 0 >= 2) {
    i1 = -1;
    break L1;
   }
   i2 = (HEAP32[i11 >> 2] | 0) - i7 | 0;
   if ((_fwrite(i12, 1, i2, HEAP32[i8 >> 2] | 0) | 0) != (i2 | 0)) {
    i1 = -1;
    break L1;
   }
   if (i3) i1 = i3 ? HEAP32[i10 >> 2] | 0 : i1; else {
    i15 = 11;
    break L1;
   }
  }
  if ((_fwrite(i1, 1, 1, HEAP32[i8 >> 2] | 0) | 0) != 1) i1 = -1; else i15 = 11;
 } else i15 = 11; while (0);
 if ((i15 | 0) == 11) i1 = i13 ? 0 : i14;
 STACKTOP = i16;
 return i1 | 0;
}

function _SDL_Blit_RGBA8888_RGB888_Modulate(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i16 = HEAPU8[i18 + 60 >> 0] | 0;
 i17 = HEAPU8[i18 + 61 >> 0] | 0;
 i10 = HEAPU8[i18 + 62 >> 0] | 0;
 i11 = i18 + 28 | 0;
 i15 = HEAP32[i11 >> 2] | 0;
 i2 = i15 + -1 | 0;
 HEAP32[i11 >> 2] = i2;
 if (!i15) return;
 i12 = i18 + 20 | 0;
 i13 = i18 + 24 | 0;
 i14 = i18 + 12 | 0;
 i15 = i18 + 32 | 0;
 i9 = (i1 & 1 | 0) == 0;
 do {
  i1 = HEAP32[i13 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i18 >> 2] | 0;
   i1 = HEAP32[i12 >> 2] | 0;
   i3 = i2;
  } else {
   i8 = HEAP32[i12 >> 2] | 0;
   i4 = HEAP32[i18 >> 2] | 0;
   i6 = i8;
   i7 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i2 = HEAP32[i7 >> 2] | 0;
    i3 = i2 >>> 24;
    i5 = i2 >>> 16 & 255;
    i2 = i2 >>> 8 & 255;
    if (!i9) {
     i2 = ((Math_imul(i2, i10) | 0) >>> 0) / 255 | 0;
     i5 = ((Math_imul(i5, i17) | 0) >>> 0) / 255 | 0;
     i3 = ((Math_imul(i3, i16) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i6 >> 2] = i5 << 8 | i3 << 16 | i2;
    if (!i1) break; else {
     i6 = i6 + 4 | 0;
     i7 = i7 + 4 | 0;
    }
   }
   i1 = i8;
   i3 = HEAP32[i11 >> 2] | 0;
  }
  HEAP32[i18 >> 2] = i4 + (HEAP32[i14 >> 2] | 0);
  HEAP32[i12 >> 2] = i1 + (HEAP32[i15 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i11 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_RGBA8888_BGR888_Modulate(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i16 = HEAPU8[i18 + 60 >> 0] | 0;
 i17 = HEAPU8[i18 + 61 >> 0] | 0;
 i10 = HEAPU8[i18 + 62 >> 0] | 0;
 i11 = i18 + 28 | 0;
 i15 = HEAP32[i11 >> 2] | 0;
 i2 = i15 + -1 | 0;
 HEAP32[i11 >> 2] = i2;
 if (!i15) return;
 i12 = i18 + 20 | 0;
 i13 = i18 + 24 | 0;
 i14 = i18 + 12 | 0;
 i15 = i18 + 32 | 0;
 i9 = (i1 & 1 | 0) == 0;
 do {
  i1 = HEAP32[i13 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i18 >> 2] | 0;
   i1 = HEAP32[i12 >> 2] | 0;
   i3 = i2;
  } else {
   i8 = HEAP32[i12 >> 2] | 0;
   i4 = HEAP32[i18 >> 2] | 0;
   i6 = i8;
   i7 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i2 = HEAP32[i7 >> 2] | 0;
    i3 = i2 >>> 24;
    i5 = i2 >>> 16 & 255;
    i2 = i2 >>> 8 & 255;
    if (!i9) {
     i2 = ((Math_imul(i2, i10) | 0) >>> 0) / 255 | 0;
     i5 = ((Math_imul(i5, i17) | 0) >>> 0) / 255 | 0;
     i3 = ((Math_imul(i3, i16) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i6 >> 2] = i5 << 8 | i3 | i2 << 16;
    if (!i1) break; else {
     i6 = i6 + 4 | 0;
     i7 = i7 + 4 | 0;
    }
   }
   i1 = i8;
   i3 = HEAP32[i11 >> 2] | 0;
  }
  HEAP32[i18 >> 2] = i4 + (HEAP32[i14 >> 2] | 0);
  HEAP32[i12 >> 2] = i1 + (HEAP32[i15 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i11 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_BGRA8888_RGB888_Modulate(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i16 = HEAPU8[i18 + 60 >> 0] | 0;
 i17 = HEAPU8[i18 + 61 >> 0] | 0;
 i10 = HEAPU8[i18 + 62 >> 0] | 0;
 i11 = i18 + 28 | 0;
 i15 = HEAP32[i11 >> 2] | 0;
 i2 = i15 + -1 | 0;
 HEAP32[i11 >> 2] = i2;
 if (!i15) return;
 i12 = i18 + 20 | 0;
 i13 = i18 + 24 | 0;
 i14 = i18 + 12 | 0;
 i15 = i18 + 32 | 0;
 i9 = (i1 & 1 | 0) == 0;
 do {
  i1 = HEAP32[i13 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i18 >> 2] | 0;
   i1 = HEAP32[i12 >> 2] | 0;
   i3 = i2;
  } else {
   i8 = HEAP32[i12 >> 2] | 0;
   i4 = HEAP32[i18 >> 2] | 0;
   i6 = i8;
   i7 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i3 = HEAP32[i7 >> 2] | 0;
    i2 = i3 >>> 24;
    i5 = i3 >>> 16 & 255;
    i3 = i3 >>> 8 & 255;
    if (!i9) {
     i2 = ((Math_imul(i2, i10) | 0) >>> 0) / 255 | 0;
     i5 = ((Math_imul(i5, i17) | 0) >>> 0) / 255 | 0;
     i3 = ((Math_imul(i3, i16) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i6 >> 2] = i5 << 8 | i3 << 16 | i2;
    if (!i1) break; else {
     i6 = i6 + 4 | 0;
     i7 = i7 + 4 | 0;
    }
   }
   i1 = i8;
   i3 = HEAP32[i11 >> 2] | 0;
  }
  HEAP32[i18 >> 2] = i4 + (HEAP32[i14 >> 2] | 0);
  HEAP32[i12 >> 2] = i1 + (HEAP32[i15 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i11 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_BGRA8888_BGR888_Modulate(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i16 = HEAPU8[i18 + 60 >> 0] | 0;
 i17 = HEAPU8[i18 + 61 >> 0] | 0;
 i10 = HEAPU8[i18 + 62 >> 0] | 0;
 i11 = i18 + 28 | 0;
 i15 = HEAP32[i11 >> 2] | 0;
 i2 = i15 + -1 | 0;
 HEAP32[i11 >> 2] = i2;
 if (!i15) return;
 i12 = i18 + 20 | 0;
 i13 = i18 + 24 | 0;
 i14 = i18 + 12 | 0;
 i15 = i18 + 32 | 0;
 i9 = (i1 & 1 | 0) == 0;
 do {
  i1 = HEAP32[i13 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i18 >> 2] | 0;
   i1 = HEAP32[i12 >> 2] | 0;
   i3 = i2;
  } else {
   i8 = HEAP32[i12 >> 2] | 0;
   i4 = HEAP32[i18 >> 2] | 0;
   i6 = i8;
   i7 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i3 = HEAP32[i7 >> 2] | 0;
    i2 = i3 >>> 24;
    i5 = i3 >>> 16 & 255;
    i3 = i3 >>> 8 & 255;
    if (!i9) {
     i2 = ((Math_imul(i2, i10) | 0) >>> 0) / 255 | 0;
     i5 = ((Math_imul(i5, i17) | 0) >>> 0) / 255 | 0;
     i3 = ((Math_imul(i3, i16) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i6 >> 2] = i5 << 8 | i3 | i2 << 16;
    if (!i1) break; else {
     i6 = i6 + 4 | 0;
     i7 = i7 + 4 | 0;
    }
   }
   i1 = i8;
   i3 = HEAP32[i11 >> 2] | 0;
  }
  HEAP32[i18 >> 2] = i4 + (HEAP32[i14 >> 2] | 0);
  HEAP32[i12 >> 2] = i1 + (HEAP32[i15 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i11 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_ARGB8888_RGB888_Modulate(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i16 = HEAPU8[i18 + 60 >> 0] | 0;
 i17 = HEAPU8[i18 + 61 >> 0] | 0;
 i10 = HEAPU8[i18 + 62 >> 0] | 0;
 i11 = i18 + 28 | 0;
 i15 = HEAP32[i11 >> 2] | 0;
 i2 = i15 + -1 | 0;
 HEAP32[i11 >> 2] = i2;
 if (!i15) return;
 i12 = i18 + 20 | 0;
 i13 = i18 + 24 | 0;
 i14 = i18 + 12 | 0;
 i15 = i18 + 32 | 0;
 i9 = (i1 & 1 | 0) == 0;
 do {
  i1 = HEAP32[i13 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i18 >> 2] | 0;
   i1 = HEAP32[i12 >> 2] | 0;
   i3 = i2;
  } else {
   i8 = HEAP32[i12 >> 2] | 0;
   i4 = HEAP32[i18 >> 2] | 0;
   i6 = i8;
   i7 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i2 = HEAP32[i7 >> 2] | 0;
    i3 = i2 >>> 16 & 255;
    i5 = i2 >>> 8 & 255;
    i2 = i2 & 255;
    if (!i9) {
     i2 = ((Math_imul(i2, i10) | 0) >>> 0) / 255 | 0;
     i5 = ((Math_imul(i5, i17) | 0) >>> 0) / 255 | 0;
     i3 = ((Math_imul(i3, i16) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i6 >> 2] = i5 << 8 | i3 << 16 | i2;
    if (!i1) break; else {
     i6 = i6 + 4 | 0;
     i7 = i7 + 4 | 0;
    }
   }
   i1 = i8;
   i3 = HEAP32[i11 >> 2] | 0;
  }
  HEAP32[i18 >> 2] = i4 + (HEAP32[i14 >> 2] | 0);
  HEAP32[i12 >> 2] = i1 + (HEAP32[i15 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i11 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_ARGB8888_BGR888_Modulate(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i16 = HEAPU8[i18 + 60 >> 0] | 0;
 i17 = HEAPU8[i18 + 61 >> 0] | 0;
 i10 = HEAPU8[i18 + 62 >> 0] | 0;
 i11 = i18 + 28 | 0;
 i15 = HEAP32[i11 >> 2] | 0;
 i2 = i15 + -1 | 0;
 HEAP32[i11 >> 2] = i2;
 if (!i15) return;
 i12 = i18 + 20 | 0;
 i13 = i18 + 24 | 0;
 i14 = i18 + 12 | 0;
 i15 = i18 + 32 | 0;
 i9 = (i1 & 1 | 0) == 0;
 do {
  i1 = HEAP32[i13 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i18 >> 2] | 0;
   i1 = HEAP32[i12 >> 2] | 0;
   i3 = i2;
  } else {
   i8 = HEAP32[i12 >> 2] | 0;
   i4 = HEAP32[i18 >> 2] | 0;
   i6 = i8;
   i7 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i2 = HEAP32[i7 >> 2] | 0;
    i3 = i2 >>> 16 & 255;
    i5 = i2 >>> 8 & 255;
    i2 = i2 & 255;
    if (!i9) {
     i2 = ((Math_imul(i2, i10) | 0) >>> 0) / 255 | 0;
     i5 = ((Math_imul(i5, i17) | 0) >>> 0) / 255 | 0;
     i3 = ((Math_imul(i3, i16) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i6 >> 2] = i5 << 8 | i3 | i2 << 16;
    if (!i1) break; else {
     i6 = i6 + 4 | 0;
     i7 = i7 + 4 | 0;
    }
   }
   i1 = i8;
   i3 = HEAP32[i11 >> 2] | 0;
  }
  HEAP32[i18 >> 2] = i4 + (HEAP32[i14 >> 2] | 0);
  HEAP32[i12 >> 2] = i1 + (HEAP32[i15 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i11 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_ABGR8888_RGB888_Modulate(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i16 = HEAPU8[i18 + 60 >> 0] | 0;
 i17 = HEAPU8[i18 + 61 >> 0] | 0;
 i10 = HEAPU8[i18 + 62 >> 0] | 0;
 i11 = i18 + 28 | 0;
 i15 = HEAP32[i11 >> 2] | 0;
 i2 = i15 + -1 | 0;
 HEAP32[i11 >> 2] = i2;
 if (!i15) return;
 i12 = i18 + 20 | 0;
 i13 = i18 + 24 | 0;
 i14 = i18 + 12 | 0;
 i15 = i18 + 32 | 0;
 i9 = (i1 & 1 | 0) == 0;
 do {
  i1 = HEAP32[i13 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i18 >> 2] | 0;
   i1 = HEAP32[i12 >> 2] | 0;
   i3 = i2;
  } else {
   i8 = HEAP32[i12 >> 2] | 0;
   i4 = HEAP32[i18 >> 2] | 0;
   i6 = i8;
   i7 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i3 = HEAP32[i7 >> 2] | 0;
    i2 = i3 >>> 16 & 255;
    i5 = i3 >>> 8 & 255;
    i3 = i3 & 255;
    if (!i9) {
     i2 = ((Math_imul(i2, i10) | 0) >>> 0) / 255 | 0;
     i5 = ((Math_imul(i5, i17) | 0) >>> 0) / 255 | 0;
     i3 = ((Math_imul(i3, i16) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i6 >> 2] = i5 << 8 | i3 << 16 | i2;
    if (!i1) break; else {
     i6 = i6 + 4 | 0;
     i7 = i7 + 4 | 0;
    }
   }
   i1 = i8;
   i3 = HEAP32[i11 >> 2] | 0;
  }
  HEAP32[i18 >> 2] = i4 + (HEAP32[i14 >> 2] | 0);
  HEAP32[i12 >> 2] = i1 + (HEAP32[i15 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i11 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_ABGR8888_BGR888_Modulate(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i16 = HEAPU8[i18 + 60 >> 0] | 0;
 i17 = HEAPU8[i18 + 61 >> 0] | 0;
 i10 = HEAPU8[i18 + 62 >> 0] | 0;
 i11 = i18 + 28 | 0;
 i15 = HEAP32[i11 >> 2] | 0;
 i2 = i15 + -1 | 0;
 HEAP32[i11 >> 2] = i2;
 if (!i15) return;
 i12 = i18 + 20 | 0;
 i13 = i18 + 24 | 0;
 i14 = i18 + 12 | 0;
 i15 = i18 + 32 | 0;
 i9 = (i1 & 1 | 0) == 0;
 do {
  i1 = HEAP32[i13 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i18 >> 2] | 0;
   i1 = HEAP32[i12 >> 2] | 0;
   i3 = i2;
  } else {
   i8 = HEAP32[i12 >> 2] | 0;
   i4 = HEAP32[i18 >> 2] | 0;
   i6 = i8;
   i7 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i3 = HEAP32[i7 >> 2] | 0;
    i2 = i3 >>> 16 & 255;
    i5 = i3 >>> 8 & 255;
    i3 = i3 & 255;
    if (!i9) {
     i2 = ((Math_imul(i2, i10) | 0) >>> 0) / 255 | 0;
     i5 = ((Math_imul(i5, i17) | 0) >>> 0) / 255 | 0;
     i3 = ((Math_imul(i3, i16) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i6 >> 2] = i5 << 8 | i3 | i2 << 16;
    if (!i1) break; else {
     i6 = i6 + 4 | 0;
     i7 = i7 + 4 | 0;
    }
   }
   i1 = i8;
   i3 = HEAP32[i11 >> 2] | 0;
  }
  HEAP32[i18 >> 2] = i4 + (HEAP32[i14 >> 2] | 0);
  HEAP32[i12 >> 2] = i1 + (HEAP32[i15 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i11 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_RGB888_BGR888_Modulate(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i16 = HEAPU8[i18 + 60 >> 0] | 0;
 i17 = HEAPU8[i18 + 61 >> 0] | 0;
 i10 = HEAPU8[i18 + 62 >> 0] | 0;
 i11 = i18 + 28 | 0;
 i15 = HEAP32[i11 >> 2] | 0;
 i2 = i15 + -1 | 0;
 HEAP32[i11 >> 2] = i2;
 if (!i15) return;
 i12 = i18 + 20 | 0;
 i13 = i18 + 24 | 0;
 i14 = i18 + 12 | 0;
 i15 = i18 + 32 | 0;
 i9 = (i1 & 1 | 0) == 0;
 do {
  i1 = HEAP32[i13 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i18 >> 2] | 0;
   i1 = HEAP32[i12 >> 2] | 0;
   i3 = i2;
  } else {
   i8 = HEAP32[i12 >> 2] | 0;
   i4 = HEAP32[i18 >> 2] | 0;
   i6 = i8;
   i7 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i2 = HEAP32[i7 >> 2] | 0;
    i3 = i2 >>> 16 & 255;
    i5 = i2 >>> 8 & 255;
    i2 = i2 & 255;
    if (!i9) {
     i2 = ((Math_imul(i2, i10) | 0) >>> 0) / 255 | 0;
     i5 = ((Math_imul(i5, i17) | 0) >>> 0) / 255 | 0;
     i3 = ((Math_imul(i3, i16) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i6 >> 2] = i5 << 8 | i3 | i2 << 16;
    if (!i1) break; else {
     i6 = i6 + 4 | 0;
     i7 = i7 + 4 | 0;
    }
   }
   i1 = i8;
   i3 = HEAP32[i11 >> 2] | 0;
  }
  HEAP32[i18 >> 2] = i4 + (HEAP32[i14 >> 2] | 0);
  HEAP32[i12 >> 2] = i1 + (HEAP32[i15 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i11 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_BGR888_RGB888_Modulate(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i16 = HEAPU8[i18 + 60 >> 0] | 0;
 i17 = HEAPU8[i18 + 61 >> 0] | 0;
 i10 = HEAPU8[i18 + 62 >> 0] | 0;
 i11 = i18 + 28 | 0;
 i15 = HEAP32[i11 >> 2] | 0;
 i2 = i15 + -1 | 0;
 HEAP32[i11 >> 2] = i2;
 if (!i15) return;
 i12 = i18 + 20 | 0;
 i13 = i18 + 24 | 0;
 i14 = i18 + 12 | 0;
 i15 = i18 + 32 | 0;
 i9 = (i1 & 1 | 0) == 0;
 do {
  i1 = HEAP32[i13 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i18 >> 2] | 0;
   i1 = HEAP32[i12 >> 2] | 0;
   i3 = i2;
  } else {
   i8 = HEAP32[i12 >> 2] | 0;
   i4 = HEAP32[i18 >> 2] | 0;
   i6 = i8;
   i7 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i3 = HEAP32[i7 >> 2] | 0;
    i2 = i3 >>> 16 & 255;
    i5 = i3 >>> 8 & 255;
    i3 = i3 & 255;
    if (!i9) {
     i2 = ((Math_imul(i2, i10) | 0) >>> 0) / 255 | 0;
     i5 = ((Math_imul(i5, i17) | 0) >>> 0) / 255 | 0;
     i3 = ((Math_imul(i3, i16) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i6 >> 2] = i5 << 8 | i3 << 16 | i2;
    if (!i1) break; else {
     i6 = i6 + 4 | 0;
     i7 = i7 + 4 | 0;
    }
   }
   i1 = i8;
   i3 = HEAP32[i11 >> 2] | 0;
  }
  HEAP32[i18 >> 2] = i4 + (HEAP32[i14 >> 2] | 0);
  HEAP32[i12 >> 2] = i1 + (HEAP32[i15 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i11 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _SDL_Blit_BGR888_BGR888_Modulate(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i16 = HEAPU8[i18 + 60 >> 0] | 0;
 i17 = HEAPU8[i18 + 61 >> 0] | 0;
 i10 = HEAPU8[i18 + 62 >> 0] | 0;
 i11 = i18 + 28 | 0;
 i15 = HEAP32[i11 >> 2] | 0;
 i2 = i15 + -1 | 0;
 HEAP32[i11 >> 2] = i2;
 if (!i15) return;
 i12 = i18 + 20 | 0;
 i13 = i18 + 24 | 0;
 i14 = i18 + 12 | 0;
 i15 = i18 + 32 | 0;
 i9 = (i1 & 1 | 0) == 0;
 do {
  i1 = HEAP32[i13 >> 2] | 0;
  if (!i1) {
   i4 = HEAP32[i18 >> 2] | 0;
   i1 = HEAP32[i12 >> 2] | 0;
   i3 = i2;
  } else {
   i8 = HEAP32[i12 >> 2] | 0;
   i4 = HEAP32[i18 >> 2] | 0;
   i6 = i8;
   i7 = i4;
   while (1) {
    i1 = i1 + -1 | 0;
    i3 = HEAP32[i7 >> 2] | 0;
    i2 = i3 >>> 16 & 255;
    i5 = i3 >>> 8 & 255;
    i3 = i3 & 255;
    if (!i9) {
     i2 = ((Math_imul(i2, i10) | 0) >>> 0) / 255 | 0;
     i5 = ((Math_imul(i5, i17) | 0) >>> 0) / 255 | 0;
     i3 = ((Math_imul(i3, i16) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i6 >> 2] = i5 << 8 | i3 | i2 << 16;
    if (!i1) break; else {
     i6 = i6 + 4 | 0;
     i7 = i7 + 4 | 0;
    }
   }
   i1 = i8;
   i3 = HEAP32[i11 >> 2] | 0;
  }
  HEAP32[i18 >> 2] = i4 + (HEAP32[i14 >> 2] | 0);
  HEAP32[i12 >> 2] = i1 + (HEAP32[i15 >> 2] | 0);
  i2 = i3 + -1 | 0;
  HEAP32[i11 >> 2] = i2;
 } while ((i3 | 0) != 0);
 return;
}

function _uncopy_opaque_16(i3, i12, i21, i1, i2) {
 i3 = i3 | 0;
 i12 = i12 | 0;
 i21 = i21 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 if ((i21 | 0) <= 0) {
  i21 = i21 << 1;
  return i21 | 0;
 }
 i19 = i1 + 4 | 0;
 i20 = i1 + 8 | 0;
 i16 = i1 + 12 | 0;
 i15 = HEAP32[5992 + ((HEAPU8[i1 + 20 >> 0] | 0) << 2) >> 2] | 0;
 i13 = HEAP32[5992 + ((HEAPU8[i1 + 21 >> 0] | 0) << 2) >> 2] | 0;
 i14 = HEAP32[5992 + ((HEAPU8[i1 + 22 >> 0] | 0) << 2) >> 2] | 0;
 i17 = HEAPU8[i1 + 24 >> 0] | 0;
 i18 = HEAPU8[i1 + 25 >> 0] | 0;
 i5 = HEAPU8[i1 + 26 >> 0] | 0;
 i6 = HEAPU8[i2 + 28 >> 0] | 0;
 i7 = HEAPU8[i2 + 32 >> 0] | 0;
 i8 = HEAPU8[i2 + 29 >> 0] | 0;
 i9 = HEAPU8[i2 + 33 >> 0] | 0;
 i10 = HEAPU8[i2 + 30 >> 0] | 0;
 i11 = HEAPU8[i2 + 34 >> 0] | 0;
 i4 = ((HEAP32[i2 + 24 >> 2] | 0) != 0 ? 255 : 0) >>> (HEAPU8[i2 + 31 >> 0] | 0) << (HEAPU8[i2 + 35 >> 0] | 0);
 i2 = i3;
 i3 = 0;
 i1 = i12;
 while (1) {
  i12 = HEAPU16[i1 >> 1] | 0;
  HEAP32[i2 >> 2] = (HEAPU8[i13 + ((HEAP32[i20 >> 2] & i12) >>> i18) >> 0] | 0) >>> i8 << i9 | (HEAPU8[i15 + ((i12 & HEAP32[i19 >> 2]) >>> i17) >> 0] | 0) >>> i6 << i7 | (HEAPU8[i14 + ((HEAP32[i16 >> 2] & i12) >>> i5) >> 0] | 0) >>> i10 << i11 | i4;
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == (i21 | 0)) break; else {
   i2 = i2 + 4 | 0;
   i1 = i1 + 2 | 0;
  }
 }
 i21 = i21 << 1;
 return i21 | 0;
}

function _SDL_GL_MakeCurrent(i2, i7) {
 i2 = i2 | 0;
 i7 = i7 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = i8 + 32 | 0;
 i5 = i8 + 24 | 0;
 i4 = i8 + 16 | 0;
 i3 = i8 + 8 | 0;
 i1 = HEAP32[3256] | 0;
 if (!i1) {
  _SDL_SetError(41242, i8) | 0;
  i1 = 0;
 } else i1 = _SDL_TLSGet(HEAP32[i1 + 628 >> 2] | 0) | 0;
 if ((i1 | 0) == (i2 | 0)) {
  i1 = HEAP32[3256] | 0;
  if (!i1) {
   _SDL_SetError(41242, i3) | 0;
   i1 = 0;
  } else i1 = _SDL_TLSGet(HEAP32[i1 + 632 >> 2] | 0) | 0;
  if ((i1 | 0) == (i7 | 0)) {
   i7 = 0;
   STACKTOP = i8;
   return i7 | 0;
  }
 }
 i1 = HEAP32[3256] | 0;
 do if (!i7) i2 = 0; else {
  if (!i1) {
   _SDL_SetError(41242, i4) | 0;
   i7 = -1;
   STACKTOP = i8;
   return i7 | 0;
  }
  if ((i2 | 0) != 0 ? (HEAP32[i2 >> 2] | 0) == (i1 + 248 | 0) : 0) {
   if (HEAP32[i2 + 48 >> 2] & 2) break;
   i7 = _SDL_SetError(41647, i6) | 0;
   STACKTOP = i8;
   return i7 | 0;
  }
  _SDL_SetError(41324, i5) | 0;
  i7 = -1;
  STACKTOP = i8;
  return i7 | 0;
 } while (0);
 i1 = FUNCTION_TABLE_iiii[HEAP32[i1 + 152 >> 2] & 63](i1, i2, i7) | 0;
 if (i1) {
  i7 = i1;
  STACKTOP = i8;
  return i7 | 0;
 }
 HEAP32[(HEAP32[3256] | 0) + 620 >> 2] = i2;
 HEAP32[(HEAP32[3256] | 0) + 624 >> 2] = i7;
 _SDL_TLSSet(HEAP32[(HEAP32[3256] | 0) + 628 >> 2] | 0, i2, 0) | 0;
 _SDL_TLSSet(HEAP32[(HEAP32[3256] | 0) + 632 >> 2] | 0, i7, 0) | 0;
 i7 = 0;
 STACKTOP = i8;
 return i7 | 0;
}

function _BlitBto1(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = HEAP32[i2 + 24 >> 2] | 0;
 i3 = HEAP32[i2 + 28 >> 2] | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 i4 = HEAP32[i2 + 20 >> 2] | 0;
 i8 = HEAP32[i2 + 36 >> 2] | 0;
 i9 = HEAP32[i2 + 48 >> 2] | 0;
 i10 = i11 - ((i11 + 7 | 0) / 8 | 0) + (HEAP32[i2 + 16 >> 2] | 0) | 0;
 i2 = (i3 | 0) == 0;
 if (!i9) {
  if (!((i11 | 0) > 0 & (i2 ^ 1))) return;
  i7 = i11 + i8 | 0;
  i6 = i4;
  while (1) {
   i3 = i3 + -1 | 0;
   i2 = 0;
   i4 = 0;
   i5 = i6;
   while (1) {
    if (!(i4 & 7)) {
     i2 = HEAP8[i1 >> 0] | 0;
     i1 = i1 + 1 | 0;
    }
    HEAP8[i5 >> 0] = (i2 & 255) >>> 7;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) == (i11 | 0)) break; else {
     i2 = (i2 & 255) << 1 & 255;
     i5 = i5 + 1 | 0;
    }
   }
   if (!i3) break; else {
    i6 = i6 + i7 | 0;
    i1 = i1 + i10 | 0;
   }
  }
  return;
 }
 if (i2) return;
 i7 = (i11 | 0) > 0;
 i2 = i4;
 while (1) {
  i3 = i3 + -1 | 0;
  if (i7) {
   i4 = 0;
   i5 = 0;
   i6 = i2;
   while (1) {
    if (!(i5 & 7)) {
     i4 = HEAP8[i1 >> 0] | 0;
     i1 = i1 + 1 | 0;
    }
    HEAP8[i6 >> 0] = HEAP8[i9 + ((i4 & 255) >>> 7 & 255) >> 0] | 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i11 | 0)) break; else {
     i4 = (i4 & 255) << 1 & 255;
     i6 = i6 + 1 | 0;
    }
   }
   i2 = i2 + i11 | 0;
  }
  if (!i3) break; else {
   i2 = i2 + i8 | 0;
   i1 = i1 + i10 | 0;
  }
 }
 return;
}

function _main(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i1 = i3 + 48 | 0;
 i2 = i3 + 16 | 0;
 i5 = i3;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 1600;
 HEAP32[i2 + 8 >> 2] = 900;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = __ZN17GameObjectManager11getInstanceEv() | 0;
 HEAP32[i2 + 20 >> 2] = __ZN11KeyBindings11getInstanceEv() | 0;
 __ZN5ClockC2Ev(i2 + 24 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i5, 35239, 4);
 i4 = __ZN4Game4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i2, i5) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i5);
 if (i4) {
  _emscripten_set_main_loop_arg(261, i2 | 0, 0, 1);
  i5 = 0;
  STACKTOP = i3;
  return i5 | 0;
 } else {
  i5 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(27316, 35244, 16) | 0;
  HEAP32[i1 >> 2] = __ZNKSt3__18ios_base6getlocEv(i5 + (HEAP32[(HEAP32[i5 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
  i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 30384) | 0;
  i4 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 63](i4, 10) | 0;
  __ZNSt3__16localeD2Ev(i1);
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i5, i4) | 0;
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i5) | 0;
  i5 = -1;
  STACKTOP = i3;
  return i5 | 0;
 }
 return 0;
}

function _SDL_DelTouch(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i9;
 i6 = HEAP32[3034] | 0;
 L1 : do if ((i6 | 0) > 0) {
  i5 = HEAP32[3035] | 0;
  i1 = 0;
  while (1) {
   i8 = HEAP32[i5 + (i1 << 2) >> 2] | 0;
   if ((HEAP32[i8 >> 2] | 0) == (i3 | 0) ? (HEAP32[i8 + 4 >> 2] | 0) == (i4 | 0) : 0) {
    i8 = i1;
    break;
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i6 | 0)) {
    i8 = -1;
    break;
   }
  }
  i1 = 0;
  while (1) {
   i2 = HEAP32[i5 + (i1 << 2) >> 2] | 0;
   i10 = i2;
   if ((HEAP32[i10 >> 2] | 0) == (i3 | 0) ? (HEAP32[i10 + 4 >> 2] | 0) == (i4 | 0) : 0) {
    i4 = i2;
    break;
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i6 | 0)) break L1;
  }
  if ((i1 | 0) > -1 & (i1 | 0) < (i6 | 0)) {
   if (!i4) {
    STACKTOP = i9;
    return;
   }
   i1 = i4 + 12 | 0;
   i2 = i4 + 16 | 0;
   if ((HEAP32[i1 >> 2] | 0) > 0) {
    i3 = 0;
    do {
     _SDL_free(HEAP32[(HEAP32[i2 >> 2] | 0) + (i3 << 2) >> 2] | 0);
     i3 = i3 + 1 | 0;
    } while ((i3 | 0) < (HEAP32[i1 >> 2] | 0));
   }
   _SDL_free(HEAP32[i2 >> 2] | 0);
   _SDL_free(i4);
   i7 = (HEAP32[3034] | 0) + -1 | 0;
   HEAP32[3034] = i7;
   i10 = HEAP32[3035] | 0;
   HEAP32[i10 + (i8 << 2) >> 2] = HEAP32[i10 + (i7 << 2) >> 2];
   STACKTOP = i9;
   return;
  }
 } while (0);
 _SDL_SetError(36782, i7) | 0;
 STACKTOP = i9;
 return;
}

function _uncopy_32(i3, i13, i22, i1, i2) {
 i3 = i3 | 0;
 i13 = i13 | 0;
 i22 = i22 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 if ((i22 | 0) <= 0) {
  i22 = i22 << 2;
  return i22 | 0;
 }
 i17 = i1 + 4 | 0;
 i20 = i1 + 8 | 0;
 i21 = i1 + 12 | 0;
 i16 = HEAP32[5992 + ((HEAPU8[i1 + 20 >> 0] | 0) << 2) >> 2] | 0;
 i14 = HEAP32[5992 + ((HEAPU8[i1 + 21 >> 0] | 0) << 2) >> 2] | 0;
 i15 = HEAP32[5992 + ((HEAPU8[i1 + 22 >> 0] | 0) << 2) >> 2] | 0;
 i18 = HEAPU8[i1 + 24 >> 0] | 0;
 i19 = HEAPU8[i1 + 25 >> 0] | 0;
 i5 = HEAPU8[i1 + 26 >> 0] | 0;
 i6 = HEAPU8[i2 + 28 >> 0] | 0;
 i7 = HEAPU8[i2 + 32 >> 0] | 0;
 i8 = HEAPU8[i2 + 29 >> 0] | 0;
 i9 = HEAPU8[i2 + 33 >> 0] | 0;
 i10 = HEAPU8[i2 + 30 >> 0] | 0;
 i11 = HEAPU8[i2 + 34 >> 0] | 0;
 i12 = HEAPU8[i2 + 31 >> 0] | 0;
 i4 = HEAPU8[i2 + 35 >> 0] | 0;
 i2 = i3;
 i3 = 0;
 i1 = i13;
 while (1) {
  i13 = HEAP32[i1 >> 2] | 0;
  HEAP32[i2 >> 2] = (HEAPU8[i14 + ((HEAP32[i20 >> 2] & i13) >>> i19) >> 0] | 0) >>> i8 << i9 | (HEAPU8[i16 + ((HEAP32[i17 >> 2] & i13) >>> i18) >> 0] | 0) >>> i6 << i7 | (HEAPU8[i15 + ((HEAP32[i21 >> 2] & i13) >>> i5) >> 0] | 0) >>> i10 << i11 | i13 >>> 24 >>> i12 << i4;
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == (i22 | 0)) break; else {
   i2 = i2 + 4 | 0;
   i1 = i1 + 4 | 0;
  }
 }
 i22 = i22 << 2;
 return i22 | 0;
}

function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i5, i3, i6, i7) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i8 = 0;
 i1 = HEAP8[i5 >> 0] | 0;
 i4 = i5 + 4 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 L1 : do if (((i1 & 1) == 0 ? (i1 & 255) >>> 1 : i2) | 0) {
  if ((i3 | 0) != (i6 | 0)) {
   i1 = i6 + -4 | 0;
   if (i1 >>> 0 > i3 >>> 0) {
    i2 = i3;
    do {
     i8 = HEAP32[i2 >> 2] | 0;
     HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
     HEAP32[i1 >> 2] = i8;
     i2 = i2 + 4 | 0;
     i1 = i1 + -4 | 0;
    } while (i2 >>> 0 < i1 >>> 0);
   }
   i1 = HEAP8[i5 >> 0] | 0;
   i2 = HEAP32[i4 >> 2] | 0;
  }
  i8 = (i1 & 1) == 0;
  i4 = i8 ? i5 + 1 | 0 : HEAP32[i5 + 8 >> 2] | 0;
  i6 = i6 + -4 | 0;
  i5 = i4 + (i8 ? (i1 & 255) >>> 1 : i2) | 0;
  i2 = HEAP8[i4 >> 0] | 0;
  i1 = i2 << 24 >> 24 < 1 | i2 << 24 >> 24 == 127;
  L10 : do if (i6 >>> 0 > i3 >>> 0) {
   while (1) {
    if (!i1 ? (i2 << 24 >> 24 | 0) != (HEAP32[i3 >> 2] | 0) : 0) break;
    i4 = (i5 - i4 | 0) > 1 ? i4 + 1 | 0 : i4;
    i3 = i3 + 4 | 0;
    i2 = HEAP8[i4 >> 0] | 0;
    i1 = i2 << 24 >> 24 < 1 | i2 << 24 >> 24 == 127;
    if (i3 >>> 0 >= i6 >>> 0) break L10;
   }
   HEAP32[i7 >> 2] = 4;
   break L1;
  } while (0);
  if (!i1 ? ((HEAP32[i6 >> 2] | 0) + -1 | 0) >>> 0 >= i2 << 24 >> 24 >>> 0 : 0) HEAP32[i7 >> 2] = 4;
 } while (0);
 return;
}

function _SW_RenderClear(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i9;
 i4 = i8 + 316 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if (!i1) {
  i2 = i5 + 4 | 0;
  i10 = HEAP32[i2 >> 2] | 0;
  HEAP32[i5 >> 2] = i10;
  i1 = i10;
  if (!i10) {
   i1 = _SDL_GetWindowSurface(HEAP32[i8 + 188 >> 2] | 0) | 0;
   do if (((i1 | 0) != 0 ? (HEAP32[i2 >> 2] = i1, HEAP32[i5 >> 2] = i1, i6 = HEAP32[HEAP32[i4 >> 2] >> 2] | 0, (i6 | 0) != 0) : 0) ? (_SDL_SetClipRect(i6, i8 + 212 | 0) | 0, i3 = HEAP32[HEAP32[i4 >> 2] >> 2] | 0, (i3 | 0) != 0) : 0) if (!(HEAP32[i8 + 276 >> 2] | 0)) {
    _SDL_SetClipRect(i3, 0) | 0;
    break;
   } else {
    _SDL_SetClipRect(i3, i8 + 244 | 0) | 0;
    break;
   } while (0);
   i1 = HEAP32[i5 >> 2] | 0;
  }
  if (!i1) {
   i10 = -1;
   STACKTOP = i9;
   return i10 | 0;
  }
 }
 i10 = _SDL_MapRGBA(HEAP32[i1 + 4 >> 2] | 0, HEAP8[i8 + 308 >> 0] | 0, HEAP8[i8 + 309 >> 0] | 0, HEAP8[i8 + 310 >> 0] | 0, HEAP8[i8 + 311 >> 0] | 0) | 0;
 i8 = i1 + 36 | 0;
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 HEAP32[i7 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
 _SDL_SetClipRect(i1, 0) | 0;
 _SDL_FillRect(i1, 0, i10) | 0;
 _SDL_SetClipRect(i1, i7) | 0;
 i10 = 0;
 STACKTOP = i9;
 return i10 | 0;
}

function _SDL_GetRGBA(i7, i5, i8, i6, i4, i3) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = i5 + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) {
  HEAP8[i8 >> 0] = HEAP8[(HEAP32[5992 + ((HEAPU8[i5 + 28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i5 + 12 >> 2] & i7) >>> (HEAPU8[i5 + 32 >> 0] | 0)) >> 0] | 0;
  HEAP8[i6 >> 0] = HEAP8[(HEAP32[5992 + ((HEAPU8[i5 + 29 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i5 + 16 >> 2] & i7) >>> (HEAPU8[i5 + 33 >> 0] | 0)) >> 0] | 0;
  HEAP8[i4 >> 0] = HEAP8[(HEAP32[5992 + ((HEAPU8[i5 + 30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i5 + 20 >> 2] & i7) >>> (HEAPU8[i5 + 34 >> 0] | 0)) >> 0] | 0;
  HEAP8[i3 >> 0] = HEAP8[(HEAP32[5992 + ((HEAPU8[i5 + 31 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i5 + 24 >> 2] & i7) >>> (HEAPU8[i5 + 35 >> 0] | 0)) >> 0] | 0;
  return;
 }
 if ((HEAP32[i2 >> 2] | 0) >>> 0 > i7 >>> 0) {
  HEAP8[i8 >> 0] = HEAP8[(HEAP32[i2 + 4 >> 2] | 0) + (i7 << 2) >> 0] | 0;
  HEAP8[i6 >> 0] = HEAP8[(HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0) + (i7 << 2) + 1 >> 0] | 0;
  HEAP8[i4 >> 0] = HEAP8[(HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0) + (i7 << 2) + 2 >> 0] | 0;
  HEAP8[i3 >> 0] = HEAP8[(HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0) + (i7 << 2) + 3 >> 0] | 0;
  return;
 } else {
  HEAP8[i3 >> 0] = 0;
  HEAP8[i4 >> 0] = 0;
  HEAP8[i6 >> 0] = 0;
  HEAP8[i8 >> 0] = 0;
  return;
 }
}

function _SDL_OnWindowFocusLost(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i6 + 8 | 0;
 i3 = i6;
 if ((HEAP32[i5 + 96 >> 2] | 0) != 0 ? (i1 = HEAP32[3256] | 0, i2 = HEAP32[i1 + 88 >> 2] | 0, (i2 | 0) != 0) : 0) FUNCTION_TABLE_iiii[i2 & 63](i1, i5, HEAP32[i5 + 100 >> 2] | 0) | 0;
 if (!(HEAP32[(HEAP32[3256] | 0) + 96 >> 2] | 0)) i1 = i5 + 48 | 0; else {
  i7 = HEAP32[(_SDL_GetMouse() | 0) + 76 >> 2] | 0;
  i1 = i5 + 48 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  i8 = HEAP32[3256] | 0;
  FUNCTION_TABLE_viii[HEAP32[i8 + 96 >> 2] & 31](i8, i5, ((i2 & 256 | i7 | 0) == 0 | i2 >>> 9 & 1 ^ 1) ^ 1);
 }
 if (!(HEAP32[i1 >> 2] & 1)) {
  STACKTOP = i6;
  return;
 }
 if (HEAP32[i5 + 116 >> 2] | 0) {
  STACKTOP = i6;
  return;
 }
 i8 = _SDL_GetHint(46037) | 0;
 if ((i8 | 0) != 0 ? (HEAP8[i8 >> 0] | 0) == 48 : 0) {
  STACKTOP = i6;
  return;
 }
 i2 = HEAP32[3256] | 0;
 if (!i2) {
  _SDL_SetError(41242, i3) | 0;
  STACKTOP = i6;
  return;
 }
 if ((HEAP32[i5 >> 2] | 0) != (i2 + 248 | 0)) {
  _SDL_SetError(41324, i4) | 0;
  STACKTOP = i6;
  return;
 }
 if (HEAP32[i1 >> 2] & 64) {
  STACKTOP = i6;
  return;
 }
 _SDL_UpdateFullscreenMode(i5, 0);
 i1 = HEAP32[3256] | 0;
 i2 = HEAP32[i1 + 72 >> 2] | 0;
 if (!i2) {
  STACKTOP = i6;
  return;
 }
 FUNCTION_TABLE_vii[i2 & 127](i1, i5);
 STACKTOP = i6;
 return;
}

function ___stdio_read(i8, i7, i9) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i10 = 0, i11 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i3 = i10 + 16 | 0;
 i2 = i10;
 i1 = i10 + 32 | 0;
 HEAP32[i1 >> 2] = i7;
 i4 = i1 + 4 | 0;
 i6 = i8 + 48 | 0;
 i11 = HEAP32[i6 >> 2] | 0;
 HEAP32[i4 >> 2] = i9 - ((i11 | 0) != 0 & 1);
 i5 = i8 + 44 | 0;
 HEAP32[i1 + 8 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i1 + 12 >> 2] = i11;
 if (!(HEAP32[5723] | 0)) {
  HEAP32[i3 >> 2] = HEAP32[i8 + 60 >> 2];
  HEAP32[i3 + 4 >> 2] = i1;
  HEAP32[i3 + 8 >> 2] = 2;
  i1 = ___syscall_ret(___syscall145(145, i3 | 0) | 0) | 0;
 } else {
  _pthread_cleanup_push(344, i8 | 0);
  HEAP32[i2 >> 2] = HEAP32[i8 + 60 >> 2];
  HEAP32[i2 + 4 >> 2] = i1;
  HEAP32[i2 + 8 >> 2] = 2;
  i1 = ___syscall_ret(___syscall145(145, i2 | 0) | 0) | 0;
  _pthread_cleanup_pop(0);
 }
 if ((i1 | 0) >= 1) {
  i4 = HEAP32[i4 >> 2] | 0;
  if (i1 >>> 0 > i4 >>> 0) {
   i3 = HEAP32[i5 >> 2] | 0;
   i2 = i8 + 4 | 0;
   HEAP32[i2 >> 2] = i3;
   HEAP32[i8 + 8 >> 2] = i3 + (i1 - i4);
   if (!(HEAP32[i6 >> 2] | 0)) i1 = i9; else {
    HEAP32[i2 >> 2] = i3 + 1;
    HEAP8[i7 + (i9 + -1) >> 0] = HEAP8[i3 >> 0] | 0;
    i1 = i9;
   }
  }
 } else {
  HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | i1 & 48 ^ 16;
  HEAP32[i8 + 8 >> 2] = 0;
  HEAP32[i8 + 4 >> 2] = 0;
 }
 STACKTOP = i10;
 return i1 | 0;
}

function _SDL_GameControllerInit() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i4 = i6;
 HEAP32[3038] = 0;
 _SDL_GameControllerAddMapping(37250) | 0;
 i1 = _SDL_GetHint(37500) | 0;
 if ((i1 | 0) != 0 ? (HEAP8[i1 >> 0] | 0) != 0 : 0) {
  i2 = _SDL_strlen(i1) | 0;
  i3 = _SDL_malloc(i2 + 1 | 0) | 0;
  _SDL_memcpy(i3, i1, i2) | 0;
  HEAP8[i3 + i2 >> 0] = 0;
  if (i3) {
   i1 = _SDL_strchr(i3, 10) | 0;
   if (!i1) i1 = i3; else {
    i2 = i3;
    do {
     HEAP8[i1 >> 0] = 0;
     _SDL_GameControllerAddMapping(i2) | 0;
     i2 = i1 + 1 | 0;
     i1 = _SDL_strchr(i2, 10) | 0;
    } while ((i1 | 0) != 0);
    i1 = i2;
   }
   _SDL_GameControllerAddMapping(i1) | 0;
  }
  _SDL_free(i3);
 }
 _SDL_AddEventWatch(21, 0);
 if ((_SDL_NumJoysticks() | 0) <= 0) {
  STACKTOP = i6;
  return 0;
 }
 i2 = i4 + 8 | 0;
 i3 = 0;
 do {
  L17 : do if (!(HEAP32[3037] | 0)) {
   _SDL_JoystickGetDeviceGUID(i4, i3);
   i1 = HEAP32[3038] | 0;
   if (i1) do {
    if (!(_SDL_memcmp(i4, i1, 16) | 0)) {
     i5 = 15;
     break L17;
    }
    i1 = HEAP32[i1 + 24 >> 2] | 0;
   } while ((i1 | 0) != 0);
  } else i5 = 15; while (0);
  if ((i5 | 0) == 15) {
   i5 = 0;
   HEAP32[i4 >> 2] = 1619;
   HEAP32[i2 >> 2] = i3;
   _SDL_PushEvent(i4) | 0;
  }
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) < (_SDL_NumJoysticks() | 0));
 STACKTOP = i6;
 return 0;
}

function _copy_opaque_16(i5, i3, i21, i1, i2) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i21 = i21 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 if ((i21 | 0) <= 0) {
  i21 = i21 << 1;
  return i21 | 0;
 }
 i12 = HEAP32[i1 + 12 >> 2] | 0;
 i17 = HEAP32[5992 + ((HEAPU8[i1 + 28 >> 0] | 0) << 2) >> 2] | 0;
 i18 = HEAP32[i1 + 16 >> 2] | 0;
 i13 = HEAP32[5992 + ((HEAPU8[i1 + 29 >> 0] | 0) << 2) >> 2] | 0;
 i14 = HEAP32[i1 + 20 >> 2] | 0;
 i15 = HEAP32[5992 + ((HEAPU8[i1 + 30 >> 0] | 0) << 2) >> 2] | 0;
 i16 = HEAP32[i2 + 24 >> 2] | 0;
 i19 = HEAPU8[i1 + 32 >> 0] | 0;
 i20 = HEAPU8[i1 + 33 >> 0] | 0;
 i6 = HEAPU8[i1 + 34 >> 0] | 0;
 i7 = HEAPU8[i2 + 28 >> 0] | 0;
 i8 = HEAPU8[i2 + 32 >> 0] | 0;
 i9 = HEAPU8[i2 + 29 >> 0] | 0;
 i10 = HEAPU8[i2 + 33 >> 0] | 0;
 i11 = HEAPU8[i2 + 30 >> 0] | 0;
 i4 = HEAPU8[i2 + 34 >> 0] | 0;
 i1 = i5;
 i2 = 0;
 while (1) {
  i5 = HEAP32[i3 >> 2] | 0;
  HEAP16[i1 >> 1] = (HEAPU8[i13 + ((i18 & i5) >>> i20) >> 0] | 0) >>> i9 << i10 | (HEAPU8[i17 + ((i12 & i5) >>> i19) >> 0] | 0) >>> i7 << i8 | i16 | (HEAPU8[i15 + ((i14 & i5) >>> i6) >> 0] | 0) >>> i11 << i4;
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == (i21 | 0)) break; else {
   i3 = i3 + 4 | 0;
   i1 = i1 + 2 | 0;
  }
 }
 i21 = i21 << 1;
 return i21 | 0;
}

function _SDL_LowerBlitScaled(i8, i9, i6, i7) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i10 = 0;
 i4 = i8 + 52 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 68 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 if (!(i2 & 512)) {
  HEAP32[i3 >> 2] = i2 | 512;
  _SDL_InvalidateMap(i1);
  i2 = HEAP32[i4 >> 2] | 0;
  i1 = i2;
  i2 = HEAP32[i2 + 68 >> 2] | 0;
 }
 do if ((i2 & 371 | 0) == 0 ? (i5 = HEAP32[HEAP32[i8 + 4 >> 2] >> 2] | 0, (i5 | 0) == (HEAP32[HEAP32[i6 + 4 >> 2] >> 2] | 0)) : 0) {
  if ((i5 | 0) == 0 | (i5 & -268435456 | 0) == 268435456 ? ((i5 >>> 24 & 15) + -1 | 0) >>> 0 < 3 : 0) break;
  i10 = _SDL_SoftStretch(i8, i9, i6, i7) | 0;
  return i10 | 0;
 } while (0);
 do if ((HEAP32[i1 >> 2] | 0) == (i6 | 0)) {
  i5 = HEAP32[(HEAP32[i6 + 4 >> 2] | 0) + 4 >> 2] | 0;
  if ((i5 | 0) != 0 ? (HEAP32[i1 + 80 >> 2] | 0) != (HEAP32[i5 + 8 >> 2] | 0) : 0) {
   i10 = 13;
   break;
  }
  i5 = HEAP32[(HEAP32[i8 + 4 >> 2] | 0) + 4 >> 2] | 0;
  if ((i5 | 0) != 0 ? (HEAP32[i1 + 84 >> 2] | 0) != (HEAP32[i5 + 8 >> 2] | 0) : 0) i10 = 13;
 } else i10 = 13; while (0);
 do if ((i10 | 0) == 13) if ((_SDL_MapSurface(i8, i6) | 0) < 0) {
  i10 = -1;
  return i10 | 0;
 } else {
  i1 = HEAP32[i4 >> 2] | 0;
  break;
 } while (0);
 i10 = FUNCTION_TABLE_iiiii[HEAP32[i1 + 8 >> 2] & 31](i8, i9, i6, i7) | 0;
 return i10 | 0;
}

function _SDL_MapRGBA(i1, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 if (!i2) {
  i11 = (i4 & 255) >>> (HEAPU8[i1 + 29 >> 0] | 0) << (HEAPU8[i1 + 33 >> 0] | 0) | (i3 & 255) >>> (HEAPU8[i1 + 28 >> 0] | 0) << (HEAPU8[i1 + 32 >> 0] | 0) | (i5 & 255) >>> (HEAPU8[i1 + 30 >> 0] | 0) << (HEAPU8[i1 + 34 >> 0] | 0) | (i6 & 255) >>> (HEAPU8[i1 + 31 >> 0] | 0) << (HEAPU8[i1 + 35 >> 0] | 0) & HEAP32[i1 + 24 >> 2];
  return i11 | 0;
 }
 i11 = HEAP32[i2 >> 2] | 0;
 L5 : do if ((i11 | 0) > 0) {
  i10 = HEAP32[i2 + 4 >> 2] | 0;
  i9 = i3 & 255;
  i8 = i4 & 255;
  i7 = i5 & 255;
  i4 = i6 & 255;
  i5 = 0;
  i1 = 0;
  i3 = -1;
  while (1) {
   i12 = (HEAPU8[i10 + (i5 << 2) >> 0] | 0) - i9 | 0;
   i13 = (HEAPU8[i10 + (i5 << 2) + 1 >> 0] | 0) - i8 | 0;
   i6 = (HEAPU8[i10 + (i5 << 2) + 2 >> 0] | 0) - i7 | 0;
   i2 = (HEAPU8[i10 + (i5 << 2) + 3 >> 0] | 0) - i4 | 0;
   i2 = (Math_imul(i13, i13) | 0) + (Math_imul(i12, i12) | 0) + (Math_imul(i6, i6) | 0) + (Math_imul(i2, i2) | 0) | 0;
   if (i2 >>> 0 < i3 >>> 0) {
    i1 = i5 & 255;
    if (!i2) break L5;
   } else i2 = i3;
   i5 = i5 + 1 | 0;
   if ((i5 | 0) >= (i11 | 0)) break; else i3 = i2;
  }
 } else i1 = 0; while (0);
 i13 = i1 & 255;
 return i13 | 0;
}

function _Emscripten_GLES_LoadLibrary(i4, i5) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = _SDL_calloc(1, 88) | 0;
 i2 = i4 + 644 | 0;
 HEAP32[i2 >> 2] = i1;
 if (!i1) {
  i5 = _SDL_Error(0) | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 HEAP32[i1 + 20 >> 2] = 81;
 HEAP32[i1 + 24 >> 2] = 42;
 HEAP32[i1 + 28 >> 2] = 82;
 HEAP32[i1 + 32 >> 2] = 83;
 HEAP32[i1 + 36 >> 2] = 32;
 HEAP32[i1 + 72 >> 2] = 15;
 HEAP32[i1 + 40 >> 2] = 16;
 HEAP32[i1 + 44 >> 2] = 29;
 HEAP32[i1 + 48 >> 2] = 17;
 HEAP32[i1 + 52 >> 2] = 30;
 HEAP32[i1 + 56 >> 2] = 18;
 HEAP32[i1 + 60 >> 2] = 31;
 HEAP32[i1 + 64 >> 2] = 32;
 HEAP32[i1 + 76 >> 2] = 84;
 HEAP32[i1 + 80 >> 2] = 3;
 HEAP32[i1 + 84 >> 2] = 85;
 i3 = FUNCTION_TABLE_ii[HEAP32[i1 + 20 >> 2] & 127](0) | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 HEAP32[i1 + 8 >> 2] = i3;
 if (!i3) {
  i5 = _SDL_SetError(43586, i6) | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 if ((FUNCTION_TABLE_iiii[HEAP32[i1 + 24 >> 2] & 63](i3, 0, 0) | 0) != 1) {
  i5 = _SDL_SetError(43612, i6 + 8 | 0) | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 HEAP32[i4 + 356 >> 2] = 1;
 i1 = i4 + 360 | 0;
 if (!i5) {
  HEAP8[i1 >> 0] = 0;
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 } else {
  _SDL_strlcpy(i1, i5, 255) | 0;
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 return 0;
}

function _SDL_ltoa(i1, i6, i5) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 if ((i1 | 0) < 0) {
  i3 = i6 + 1 | 0;
  HEAP8[i6 >> 0] = 45;
  i2 = 0 - i1 | 0;
  i4 = i3;
  while (1) {
   i1 = i4 + 1 | 0;
   HEAP8[i4 >> 0] = HEAP8[38845 + ((i2 >>> 0) % (i5 >>> 0) | 0) >> 0] | 0;
   i2 = (i2 >>> 0) / (i5 >>> 0) | 0;
   if (!i2) break; else i4 = i1;
  }
  HEAP8[i1 >> 0] = 0;
  i2 = _strlen(i3) | 0;
  i1 = i2 >>> 1;
  if (!i1) return i6 | 0;
  i2 = i6 + i2 | 0;
  while (1) {
   i1 = i1 + -1 | 0;
   i5 = HEAP8[i3 >> 0] | 0;
   HEAP8[i3 >> 0] = HEAP8[i2 >> 0] | 0;
   HEAP8[i2 >> 0] = i5;
   if (!i1) break; else {
    i3 = i3 + 1 | 0;
    i2 = i2 + -1 | 0;
   }
  }
  return i6 | 0;
 }
 if (!i1) {
  HEAP8[i6 >> 0] = 48;
  i1 = i6 + 1 | 0;
 } else {
  i2 = i1;
  i3 = i6;
  while (1) {
   i1 = i3 + 1 | 0;
   HEAP8[i3 >> 0] = HEAP8[38845 + ((i2 >>> 0) % (i5 >>> 0) | 0) >> 0] | 0;
   i2 = (i2 >>> 0) / (i5 >>> 0) | 0;
   if (!i2) break; else i3 = i1;
  }
 }
 HEAP8[i1 >> 0] = 0;
 i1 = _strlen(i6) | 0;
 i2 = i1 >>> 1;
 if (!i2) return i6 | 0;
 i4 = i6;
 i3 = i6 + (i1 + -1) | 0;
 i1 = i2;
 while (1) {
  i1 = i1 + -1 | 0;
  i5 = HEAP8[i4 >> 0] | 0;
  HEAP8[i4 >> 0] = HEAP8[i3 >> 0] | 0;
  HEAP8[i3 >> 0] = i5;
  if (!i1) break; else {
   i4 = i4 + 1 | 0;
   i3 = i3 + -1 | 0;
  }
 }
 return i6 | 0;
}

function _SDL_SetHintWithPriority(i5, i7, i6) {
 i5 = i5 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 if (!((i5 | 0) != 0 & (i7 | 0) != 0)) {
  i7 = 0;
  return i7 | 0;
 }
 if (i6 >>> 0 < 2 & (_SDL_getenv(i5) | 0) != 0) {
  i7 = 0;
  return i7 | 0;
 }
 i1 = HEAP32[1528] | 0;
 L7 : do if (i1) {
  while (1) {
   if (!(_SDL_strcmp(i5, HEAP32[i1 >> 2] | 0) | 0)) break;
   i1 = HEAP32[i1 + 16 >> 2] | 0;
   if (!i1) break L7;
  }
  i4 = i1 + 8 | 0;
  if ((HEAP32[i4 >> 2] | 0) >>> 0 > i6 >>> 0) {
   i7 = 0;
   return i7 | 0;
  }
  i3 = i1 + 4 | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  if (!((i2 | 0) != 0 ? (_SDL_strcmp(i2, i7) | 0) == 0 : 0)) {
   i1 = HEAP32[i1 + 12 >> 2] | 0;
   if (i1) do {
    i2 = i1;
    i1 = HEAP32[i1 + 8 >> 2] | 0;
    FUNCTION_TABLE_viiii[HEAP32[i2 >> 2] & 63](HEAP32[i2 + 4 >> 2] | 0, i5, HEAP32[i3 >> 2] | 0, i7);
   } while ((i1 | 0) != 0);
   _SDL_free(HEAP32[i3 >> 2] | 0);
   HEAP32[i3 >> 2] = _SDL_strdup(i7) | 0;
  }
  HEAP32[i4 >> 2] = i6;
  i7 = 1;
  return i7 | 0;
 } while (0);
 i1 = _SDL_malloc(20) | 0;
 if (!i1) {
  i7 = 0;
  return i7 | 0;
 }
 HEAP32[i1 >> 2] = _SDL_strdup(i5) | 0;
 HEAP32[i1 + 4 >> 2] = _SDL_strdup(i7) | 0;
 HEAP32[i1 + 8 >> 2] = i6;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = HEAP32[1528];
 HEAP32[1528] = i1;
 i7 = 1;
 return i7 | 0;
}

function _mbtowc(i2, i6, i4) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i7;
 L1 : do if (!i6) i1 = 0; else {
  do if (i4) {
   i5 = (i2 | 0) == 0 ? i1 : i2;
   i1 = HEAP8[i6 >> 0] | 0;
   i2 = i1 & 255;
   if (i1 << 24 >> 24 > -1) {
    HEAP32[i5 >> 2] = i2;
    i1 = i1 << 24 >> 24 != 0 & 1;
    break L1;
   }
   i1 = i2 + -194 | 0;
   if (i1 >>> 0 <= 50) {
    i2 = i6 + 1 | 0;
    i3 = HEAP32[22936 + (i1 << 2) >> 2] | 0;
    if (i4 >>> 0 < 4 ? (i3 & -2147483648 >>> ((i4 * 6 | 0) + -6 | 0) | 0) != 0 : 0) break;
    i1 = HEAPU8[i2 >> 0] | 0;
    i4 = i1 >>> 3;
    if ((i4 + -16 | i4 + (i3 >> 26)) >>> 0 <= 7) {
     i1 = i1 + -128 | i3 << 6;
     if ((i1 | 0) >= 0) {
      HEAP32[i5 >> 2] = i1;
      i1 = 2;
      break L1;
     }
     i2 = HEAPU8[i6 + 2 >> 0] | 0;
     if ((i2 & 192 | 0) == 128) {
      i2 = i2 + -128 | i1 << 6;
      if ((i2 | 0) >= 0) {
       HEAP32[i5 >> 2] = i2;
       i1 = 3;
       break L1;
      }
      i1 = HEAPU8[i6 + 3 >> 0] | 0;
      if ((i1 & 192 | 0) == 128) {
       HEAP32[i5 >> 2] = i1 + -128 | i2 << 6;
       i1 = 4;
       break L1;
      }
     }
    }
   }
  } while (0);
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  i1 = -1;
 } while (0);
 STACKTOP = i7;
 return i1 | 0;
}

function _GLES2_RenderDrawPoints(i1, i3, i7) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, d10 = 0.0;
 i8 = STACKTOP;
 i2 = i1 + 316 | 0;
 i6 = HEAP32[i2 >> 2] | 0;
 if ((_GLES2_SetDrawingState(i1) | 0) < 0) {
  i7 = -1;
  STACKTOP = i8;
  return i7 | 0;
 }
 i4 = i7 << 3;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i4 | 0) + 15 & -16) | 0;
 if ((i7 | 0) > 0) {
  i1 = 0;
  do {
   d10 = +HEAPF32[i3 + (i1 << 3) + 4 >> 2] + .5;
   i9 = i1 << 1;
   HEAPF32[i5 + (i9 << 2) >> 2] = +HEAPF32[i3 + (i1 << 3) >> 2] + .5;
   HEAPF32[i5 + ((i9 | 1) << 2) >> 2] = d10;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i7 | 0));
 }
 i3 = HEAP32[i2 >> 2] | 0;
 i2 = i3 + 276 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  FUNCTION_TABLE_vii[HEAP32[i3 + 216 >> 2] & 127](1, i2);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[i3 + 220 >> 2] & 127](34962, i1);
 i1 = i3 + 292 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 < i4 >>> 0) {
  FUNCTION_TABLE_viiii[HEAP32[i3 + 224 >> 2] & 63](34962, i4, i5, 35040);
  HEAP32[i1 >> 2] = i4;
 } else FUNCTION_TABLE_viiii[HEAP32[i3 + 228 >> 2] & 63](34962, 0, i4, i5);
 FUNCTION_TABLE_viiiiii[HEAP32[i3 + 184 >> 2] & 15](0, 2, 5126, 0, 0, 0);
 FUNCTION_TABLE_viii[HEAP32[i6 + 76 >> 2] & 31](0, 0, i7);
 i9 = 0;
 STACKTOP = i8;
 return i9 | 0;
}

function _SDL_LogMessageV(i8, i9, i4, i3) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0;
 i10 = STACKTOP;
 if (!(HEAP32[1533] | 0)) {
  STACKTOP = i10;
  return;
 }
 if ((i9 | 0) < 0 | i9 >>> 0 > 6) {
  STACKTOP = i10;
  return;
 }
 i1 = HEAP32[1529] | 0;
 L7 : do if (!i1) i2 = 7; else {
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) == (i8 | 0)) break;
   i1 = HEAP32[i1 + 8 >> 2] | 0;
   if (!i1) {
    i2 = 7;
    break L7;
   }
  }
  i1 = HEAP32[i1 + 4 >> 2] | 0;
 } while (0);
 L12 : do if ((i2 | 0) == 7) switch (i8 | 0) {
 case 8:
  {
   i1 = 1;
   break L12;
  }
 case 0:
  {
   i1 = HEAP32[1532] | 0;
   break L12;
  }
 case 2:
  {
   i1 = HEAP32[1531] | 0;
   break L12;
  }
 default:
  {
   i1 = HEAP32[1530] | 0;
   break L12;
  }
 } while (0);
 if (i1 >>> 0 > i9 >>> 0) {
  STACKTOP = i10;
  return;
 }
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 4096 | 0;
 _SDL_vsnprintf(i2, 4096, i4, i3) | 0;
 i1 = _SDL_strlen(i2) | 0;
 if ((((i1 | 0) != 0 ? (i5 = i1 + -1 | 0, i6 = i2 + i5 | 0, (HEAP8[i6 >> 0] | 0) == 10) : 0) ? (HEAP8[i6 >> 0] = 0, (i5 | 0) != 0) : 0) ? (i7 = i2 + (i1 + -2) | 0, (HEAP8[i7 >> 0] | 0) == 13) : 0) HEAP8[i7 >> 0] = 0;
 FUNCTION_TABLE_viiii[HEAP32[6132 >> 2] & 63](HEAP32[1534] | 0, i8, i9, i2);
 STACKTOP = i10;
 return;
}

function __ZNSt3__110__stdinbufIwE9pbackfailEj(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i10 + 16 | 0;
 i8 = i10 + 8 | 0;
 i3 = i10 + 4 | 0;
 i4 = i10;
 i6 = i5 + 52 | 0;
 i2 = (HEAP8[i6 >> 0] | 0) != 0;
 L1 : do if ((i1 | 0) == -1) if (i2) i1 = -1; else {
  i1 = HEAP32[i5 + 48 >> 2] | 0;
  HEAP8[i6 >> 0] = (i1 | 0) != -1 & 1;
 } else {
  i7 = i5 + 48 | 0;
  L5 : do if (i2) {
   HEAP32[i3 >> 2] = HEAP32[i7 >> 2];
   i2 = HEAP32[i5 + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 31](i2, HEAP32[i5 + 40 >> 2] | 0, i3, i3 + 4 | 0, i4, i9, i9 + 8 | 0, i8) | 0) {
   case 1:
   case 2:
    {
     i1 = -1;
     break L1;
    }
   case 3:
    {
     HEAP8[i9 >> 0] = HEAP32[i7 >> 2];
     HEAP32[i8 >> 2] = i9 + 1;
     break;
    }
   default:
    {}
   }
   i2 = i5 + 32 | 0;
   while (1) {
    i3 = HEAP32[i8 >> 2] | 0;
    if (i3 >>> 0 <= i9 >>> 0) break L5;
    i5 = i3 + -1 | 0;
    HEAP32[i8 >> 2] = i5;
    if ((_ungetc(HEAP8[i5 >> 0] | 0, HEAP32[i2 >> 2] | 0) | 0) == -1) {
     i1 = -1;
     break L1;
    }
   }
  } while (0);
  HEAP32[i7 >> 2] = i1;
  HEAP8[i6 >> 0] = 1;
 } while (0);
 STACKTOP = i10;
 return i1 | 0;
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i10 + 16 | 0;
 i8 = i10 + 4 | 0;
 i3 = i10 + 8 | 0;
 i4 = i10;
 i6 = i5 + 52 | 0;
 i2 = (HEAP8[i6 >> 0] | 0) != 0;
 L1 : do if ((i1 | 0) == -1) if (i2) i1 = -1; else {
  i1 = HEAP32[i5 + 48 >> 2] | 0;
  HEAP8[i6 >> 0] = (i1 | 0) != -1 & 1;
 } else {
  i7 = i5 + 48 | 0;
  L5 : do if (i2) {
   HEAP8[i3 >> 0] = HEAP32[i7 >> 2];
   i2 = HEAP32[i5 + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 31](i2, HEAP32[i5 + 40 >> 2] | 0, i3, i3 + 1 | 0, i4, i9, i9 + 8 | 0, i8) | 0) {
   case 1:
   case 2:
    {
     i1 = -1;
     break L1;
    }
   case 3:
    {
     HEAP8[i9 >> 0] = HEAP32[i7 >> 2];
     HEAP32[i8 >> 2] = i9 + 1;
     break;
    }
   default:
    {}
   }
   i2 = i5 + 32 | 0;
   while (1) {
    i3 = HEAP32[i8 >> 2] | 0;
    if (i3 >>> 0 <= i9 >>> 0) break L5;
    i5 = i3 + -1 | 0;
    HEAP32[i8 >> 2] = i5;
    if ((_ungetc(HEAP8[i5 >> 0] | 0, HEAP32[i2 >> 2] | 0) | 0) == -1) {
     i1 = -1;
     break L1;
    }
   }
  } while (0);
  HEAP32[i7 >> 2] = i1;
  HEAP8[i6 >> 0] = 1;
 } while (0);
 STACKTOP = i10;
 return i1 | 0;
}

function _SDL_DrawPoint(i5, i6, i7, i4) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i8 + 8 | 0;
 L1 : do if (i5) {
  i3 = HEAP32[i5 + 4 >> 2] | 0;
  if ((HEAPU8[i3 + 8 >> 0] | 0) < 8) {
   i1 = _SDL_SetError(38717, i1) | 0;
   break;
  }
  i1 = HEAP32[i5 + 36 >> 2] | 0;
  if ((((i1 | 0) <= (i6 | 0) ? (i2 = HEAP32[i5 + 40 >> 2] | 0, (i2 | 0) <= (i7 | 0)) : 0) ? ((HEAP32[i5 + 44 >> 2] | 0) + i1 | 0) > (i6 | 0) : 0) ? ((HEAP32[i5 + 48 >> 2] | 0) + i2 | 0) > (i7 | 0) : 0) switch (HEAPU8[i3 + 9 >> 0] | 0 | 0) {
  case 1:
   {
    HEAP8[(HEAP32[i5 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i5 + 16 >> 2] | 0, i7) | 0) + i6) >> 0] = i4;
    i1 = 0;
    break L1;
   }
  case 2:
   {
    HEAP16[(HEAP32[i5 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i5 + 16 >> 2] | 0, i7) | 0) + (i6 << 1)) >> 1] = i4;
    i1 = 0;
    break L1;
   }
  case 3:
   {
    i1 = _SDL_Error(4) | 0;
    break L1;
   }
  case 4:
   {
    HEAP32[(HEAP32[i5 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i5 + 16 >> 2] | 0, i7) | 0) + (i6 << 2)) >> 2] = i4;
    i1 = 0;
    break L1;
   }
  default:
   {
    i1 = 0;
    break L1;
   }
  } else i1 = 0;
 } else i1 = _SDL_SetError(40249, i8) | 0; while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function _Emscripten_RegisterEventHandlers(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 _emscripten_set_mousemove_callback(42020, i1 | 0, 0, 30) | 0;
 _emscripten_set_mousedown_callback(42020, i1 | 0, 0, 31) | 0;
 _emscripten_set_mouseup_callback(42028, i1 | 0, 0, 31) | 0;
 _emscripten_set_mouseenter_callback(42020, i1 | 0, 0, 32) | 0;
 _emscripten_set_mouseleave_callback(42020, i1 | 0, 0, 32) | 0;
 _emscripten_set_wheel_callback(42020, i1 | 0, 0, 33) | 0;
 _emscripten_set_focus_callback(42038, i1 | 0, 0, 34) | 0;
 _emscripten_set_blur_callback(42038, i1 | 0, 0, 34) | 0;
 _emscripten_set_touchstart_callback(42020, i1 | 0, 0, 35) | 0;
 _emscripten_set_touchend_callback(42020, i1 | 0, 0, 35) | 0;
 _emscripten_set_touchmove_callback(42020, i1 | 0, 0, 35) | 0;
 _emscripten_set_touchcancel_callback(42020, i1 | 0, 0, 35) | 0;
 i2 = _SDL_GetHint(42046) | 0;
 i2 = (i2 | 0) != 0 ? i2 : 42038;
 _emscripten_set_keydown_callback(i2 | 0, i1 | 0, 0, 36) | 0;
 _emscripten_set_keyup_callback(i2 | 0, i1 | 0, 0, 36) | 0;
 _emscripten_set_keypress_callback(i2 | 0, i1 | 0, 0, 37) | 0;
 _emscripten_set_fullscreenchange_callback(42028, i1 | 0, 0, 38) | 0;
 _emscripten_set_resize_callback(42038, i1 | 0, 0, 39) | 0;
 _emscripten_set_visibilitychange_callback(i1 | 0, 0, 40) | 0;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i8, i2) {
 i8 = i8 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if (i2 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i8);
 i1 = HEAP8[i8 >> 0] | 0;
 if (!(i1 & 1)) i3 = 10; else {
  i1 = HEAP32[i8 >> 2] | 0;
  i3 = (i1 & -2) + -1 | 0;
  i1 = i1 & 255;
 }
 if (!(i1 & 1)) i7 = (i1 & 255) >>> 1; else i7 = HEAP32[i8 + 4 >> 2] | 0;
 i2 = i7 >>> 0 > i2 >>> 0 ? i7 : i2;
 if (i2 >>> 0 < 11) i6 = 10; else i6 = (i2 + 16 & -16) + -1 | 0;
 do if ((i6 | 0) != (i3 | 0)) {
  do if ((i6 | 0) != 10) {
   i2 = __Znwj(i6 + 1 | 0) | 0;
   if (!(i1 & 1)) {
    i3 = 1;
    i4 = i8 + 1 | 0;
    i5 = 0;
    break;
   } else {
    i3 = 1;
    i4 = HEAP32[i8 + 8 >> 2] | 0;
    i5 = 1;
    break;
   }
  } else {
   i2 = i8 + 1 | 0;
   i3 = 0;
   i4 = HEAP32[i8 + 8 >> 2] | 0;
   i5 = 1;
  } while (0);
  if (!(i1 & 1)) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i8 + 4 >> 2] | 0;
  _memcpy(i2 | 0, i4 | 0, i1 + 1 | 0) | 0;
  if (i5) __ZdlPv(i4);
  if (i3) {
   HEAP32[i8 >> 2] = i6 + 1 | 1;
   HEAP32[i8 + 4 >> 2] = i7;
   HEAP32[i8 + 8 >> 2] = i2;
   break;
  } else {
   HEAP8[i8 >> 0] = i7 << 1;
   break;
  }
 } while (0);
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i8, i2) {
 i8 = i8 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if (i2 >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i8);
 i1 = HEAP8[i8 >> 0] | 0;
 if (!(i1 & 1)) i3 = 1; else {
  i1 = HEAP32[i8 >> 2] | 0;
  i3 = (i1 & -2) + -1 | 0;
  i1 = i1 & 255;
 }
 if (!(i1 & 1)) i7 = (i1 & 255) >>> 1; else i7 = HEAP32[i8 + 4 >> 2] | 0;
 i2 = i7 >>> 0 > i2 >>> 0 ? i7 : i2;
 if (i2 >>> 0 < 2) i6 = 1; else i6 = (i2 + 4 & -4) + -1 | 0;
 do if ((i6 | 0) != (i3 | 0)) {
  do if ((i6 | 0) != 1) {
   i2 = __Znwj((i6 << 2) + 4 | 0) | 0;
   if (!(i1 & 1)) {
    i3 = 1;
    i4 = i8 + 4 | 0;
    i5 = 0;
    break;
   } else {
    i3 = 1;
    i4 = HEAP32[i8 + 8 >> 2] | 0;
    i5 = 1;
    break;
   }
  } else {
   i2 = i8 + 4 | 0;
   i3 = 0;
   i4 = HEAP32[i8 + 8 >> 2] | 0;
   i5 = 1;
  } while (0);
  if (!(i1 & 1)) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i8 + 4 >> 2] | 0;
  _wmemcpy(i2, i4, i1 + 1 | 0) | 0;
  if (i5) __ZdlPv(i4);
  if (i3) {
   HEAP32[i8 >> 2] = i6 + 1 | 1;
   HEAP32[i8 + 4 >> 2] = i7;
   HEAP32[i8 + 8 >> 2] = i2;
   break;
  } else {
   HEAP8[i8 >> 0] = i7 << 1;
   break;
  }
 } while (0);
 return;
}

function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(i8, i1, i3, i5, i4, i2) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i7;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 i9 = HEAP8[i2 >> 0] | 0;
 i10 = (i9 & 1) == 0;
 i1 = i10 ? i2 + 1 | 0 : HEAP32[i2 + 8 >> 2] | 0;
 i9 = i10 ? (i9 & 255) >>> 1 : HEAP32[i2 + 4 >> 2] | 0;
 i2 = i1 + i9 | 0;
 if ((i9 | 0) > 0) do {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i6, HEAP8[i1 >> 0] | 0);
  i1 = i1 + 1 | 0;
 } while (i1 >>> 0 < i2 >>> 0);
 i1 = _catgets((i3 | 0) == -1 ? -1 : i3 << 1, i5, i4, (HEAP8[i6 >> 0] & 1) == 0 ? i6 + 1 | 0 : HEAP32[i6 + 8 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 i10 = _strlen(i1) | 0;
 i2 = i1 + i10 | 0;
 if ((i10 | 0) > 0) do {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i8, HEAP8[i1 >> 0] | 0);
  i1 = i1 + 1 | 0;
 } while (i1 >>> 0 < i2 >>> 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
 STACKTOP = i7;
 return;
}

function _SDL_SW_LockYUVTexture(i8, i4, i7, i6) {
 i8 = i8 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i9;
 i1 = HEAP32[i8 >> 2] | 0;
 if ((i1 | 0) < 1448433993) switch (i1 | 0) {
 case 842094169:
  {
   i5 = 2;
   break;
  }
 default:
  i5 = 10;
 } else switch (i1 | 0) {
 case 1448433993:
  {
   i5 = 2;
   break;
  }
 default:
  i5 = 10;
 }
 do if ((i5 | 0) == 2) {
  if (!i4) {
   i1 = HEAP32[i8 + 44 >> 2] | 0;
   break;
  }
  if ((((HEAP32[i4 >> 2] | 0) == 0 ? (HEAP32[i4 + 4 >> 2] | 0) == 0 : 0) ? (HEAP32[i4 + 8 >> 2] | 0) == (HEAP32[i8 + 8 >> 2] | 0) : 0) ? (HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i8 + 12 >> 2] | 0) : 0) {
   i3 = 0;
   i2 = 0;
   i1 = HEAP32[i8 + 44 >> 2] | 0;
   i5 = 12;
   break;
  }
  i8 = _SDL_SetError(38240, i2) | 0;
  STACKTOP = i9;
  return i8 | 0;
 } else if ((i5 | 0) == 10) {
  i1 = HEAP32[i8 + 44 >> 2] | 0;
  if (i4) {
   i3 = HEAP32[i4 + 4 >> 2] | 0;
   i2 = HEAP32[i4 >> 2] << 1;
   i5 = 12;
  }
 } while (0);
 if ((i5 | 0) == 12) i1 = i1 + ((Math_imul(HEAPU16[i8 + 36 >> 1] | 0, i3) | 0) + i2) | 0;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i6 >> 2] = HEAPU16[i8 + 36 >> 1];
 i8 = 0;
 STACKTOP = i9;
 return i8 | 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj(i8, i6) {
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i9;
 i4 = HEAP32[i8 + 8 >> 2] | 0;
 i1 = HEAP32[i8 + 4 >> 2] | 0;
 if (i4 - i1 >> 2 >>> 0 < i6 >>> 0) {
  i2 = HEAP32[i8 >> 2] | 0;
  i5 = i1 - i2 >> 2;
  i3 = i5 + i6 | 0;
  if (i3 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i8);
  i1 = i4 - i2 | 0;
  if (i1 >> 2 >>> 0 < 536870911) {
   i1 = i1 >> 1;
   i1 = i1 >>> 0 < i3 >>> 0 ? i3 : i1;
  } else i1 = 1073741823;
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_(i7, i1, i5, i8 + 16 | 0);
  i5 = i7 + 8 | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  _memset(i4 | 0, 0, i6 << 2 | 0) | 0;
  HEAP32[i5 >> 2] = i4 + (i6 << 2);
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE(i8, i7);
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev(i7);
 } else __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj(i8, i6);
 STACKTOP = i9;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i10, i5, i7, i8, i6) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i11 + 4 | 0;
 i4 = i11;
 i9 = i1 + 8 | 0;
 i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] & 127](i9) | 0;
 i1 = HEAP8[i9 >> 0] | 0;
 if (!(i1 & 1)) i2 = (i1 & 255) >>> 1; else i2 = HEAP32[i9 + 4 >> 2] | 0;
 i1 = HEAP8[i9 + 12 >> 0] | 0;
 if (!(i1 & 1)) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i9 + 16 >> 2] | 0;
 do if ((i2 | 0) != (0 - i1 | 0)) {
  HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  i1 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i5, i3, i9, i9 + 24 | 0, i6, i8, 0) | 0;
  i2 = HEAP32[i10 >> 2] | 0;
  if ((i1 | 0) == (i9 | 0) & (i2 | 0) == 12) {
   HEAP32[i10 >> 2] = 0;
   break;
  }
  if ((i2 | 0) < 12 & (i1 - i9 | 0) == 12) HEAP32[i10 >> 2] = i2 + 12;
 } else HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 4; while (0);
 STACKTOP = i11;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i10, i5, i7, i8, i6) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i11 + 4 | 0;
 i4 = i11;
 i9 = i1 + 8 | 0;
 i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] & 127](i9) | 0;
 i1 = HEAP8[i9 >> 0] | 0;
 if (!(i1 & 1)) i2 = (i1 & 255) >>> 1; else i2 = HEAP32[i9 + 4 >> 2] | 0;
 i1 = HEAP8[i9 + 12 >> 0] | 0;
 if (!(i1 & 1)) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i9 + 16 >> 2] | 0;
 do if ((i2 | 0) != (0 - i1 | 0)) {
  HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  i1 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i5, i3, i9, i9 + 24 | 0, i6, i8, 0) | 0;
  i2 = HEAP32[i10 >> 2] | 0;
  if ((i1 | 0) == (i9 | 0) & (i2 | 0) == 12) {
   HEAP32[i10 >> 2] = 0;
   break;
  }
  if ((i2 | 0) < 12 & (i1 - i9 | 0) == 12) HEAP32[i10 >> 2] = i2 + 12;
 } else HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 4; while (0);
 STACKTOP = i11;
 return;
}

function __ZL25default_terminate_handlerv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i5 + 32 | 0;
 i3 = i5 + 24 | 0;
 i8 = i5 + 16 | 0;
 i6 = i5;
 i5 = i5 + 36 | 0;
 i1 = ___cxa_get_globals_fast() | 0;
 if ((i1 | 0) != 0 ? (i4 = HEAP32[i1 >> 2] | 0, (i4 | 0) != 0) : 0) {
  i1 = i4 + 48 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  if (!((i2 & -256 | 0) == 1126902528 & (i1 | 0) == 1129074247)) {
   HEAP32[i3 >> 2] = HEAP32[5722];
   _abort_message(53191, i3);
  }
  if ((i2 | 0) == 1126902529 & (i1 | 0) == 1129074247) i1 = HEAP32[i4 + 44 >> 2] | 0; else i1 = i4 + 80 | 0;
  HEAP32[i5 >> 2] = i1;
  i4 = HEAP32[i4 >> 2] | 0;
  i1 = HEAP32[i4 + 4 >> 2] | 0;
  if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[936 >> 2] | 0) + 16 >> 2] & 63](936, i4, i5) | 0) {
   i8 = HEAP32[i5 >> 2] | 0;
   i5 = HEAP32[5722] | 0;
   i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] & 127](i8) | 0;
   HEAP32[i6 >> 2] = i5;
   HEAP32[i6 + 4 >> 2] = i1;
   HEAP32[i6 + 8 >> 2] = i8;
   _abort_message(53105, i6);
  } else {
   HEAP32[i8 >> 2] = HEAP32[5722];
   HEAP32[i8 + 4 >> 2] = i1;
   _abort_message(53150, i8);
  }
 }
 _abort_message(53229, i7);
}

function __ZNSt3__114__num_put_base14__format_floatEPcPKcj(i1, i4, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 if (i2 & 2048) {
  HEAP8[i1 >> 0] = 43;
  i1 = i1 + 1 | 0;
 }
 if (i2 & 1024) {
  HEAP8[i1 >> 0] = 35;
  i1 = i1 + 1 | 0;
 }
 i7 = i2 & 260;
 i5 = i2 >>> 14;
 i8 = (i7 | 0) == 260;
 if (i8) i6 = 0; else {
  HEAP8[i1 >> 0] = 46;
  HEAP8[i1 + 1 >> 0] = 42;
  i1 = i1 + 2 | 0;
  i6 = 1;
 }
 i2 = HEAP8[i4 >> 0] | 0;
 if (i2 << 24 >> 24) {
  i3 = i1;
  while (1) {
   i4 = i4 + 1 | 0;
   i1 = i3 + 1 | 0;
   HEAP8[i3 >> 0] = i2;
   i2 = HEAP8[i4 >> 0] | 0;
   if (!(i2 << 24 >> 24)) break; else i3 = i1;
  }
 }
 L14 : do switch (i7 | 0) {
 case 4:
  if (!(i5 & 1)) {
   HEAP8[i1 >> 0] = 102;
   break L14;
  } else {
   HEAP8[i1 >> 0] = 70;
   break L14;
  }
 case 256:
  if (!(i5 & 1)) {
   HEAP8[i1 >> 0] = 101;
   break L14;
  } else {
   HEAP8[i1 >> 0] = 69;
   break L14;
  }
 default:
  {
   i2 = (i5 & 1 | 0) != 0;
   if (i8) if (i2) {
    HEAP8[i1 >> 0] = 65;
    break L14;
   } else {
    HEAP8[i1 >> 0] = 97;
    break L14;
   } else if (i2) {
    HEAP8[i1 >> 0] = 71;
    break L14;
   } else {
    HEAP8[i1 >> 0] = 103;
    break L14;
   }
  }
 } while (0);
 return i6 | 0;
}

function _SDL_SendMouseWheel(i2, i6, i7, i8, i4) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i5 = i9;
 do if ((i2 | 0) != 0 ? (i1 = HEAP32[3016] | 0, (i1 | 0) != (i2 | 0)) : 0) {
  if (i1) _SDL_SendWindowEvent(i1, 11, 0, 0) | 0;
  HEAP32[3016] = i2;
  _SDL_SendWindowEvent(i2, 10, 0, 0) | 0;
  i1 = (HEAP32[3016] | 0) == 0 ? HEAP32[3029] | 0 : HEAP32[3030] | 0;
  i2 = HEAP32[3007] | 0;
  i3 = (i2 | 0) == 0;
  if ((i1 | 0) != 0 & (HEAP32[3031] | 0) != 0 & (HEAP32[3024] | 0) == 0) {
   if (i3) break;
   FUNCTION_TABLE_ii[i2 & 127](i1) | 0;
   break;
  } else {
   if (i3) break;
   FUNCTION_TABLE_ii[i2 & 127](0) | 0;
   break;
  }
 } while (0);
 if (!(i8 | i7)) {
  i8 = 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 if ((_SDL_EventState(1027, -1) | 0) << 24 >> 24 != 1) {
  i8 = 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 HEAP32[i5 >> 2] = 1027;
 i1 = HEAP32[3016] | 0;
 if (!i1) i1 = 0; else i1 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[i5 + 8 >> 2] = i1;
 HEAP32[i5 + 12 >> 2] = i6;
 HEAP32[i5 + 16 >> 2] = i7;
 HEAP32[i5 + 20 >> 2] = i8;
 HEAP32[i5 + 24 >> 2] = i4;
 i8 = (_SDL_PushEvent(i5) | 0) > 0 & 1;
 STACKTOP = i9;
 return i8 | 0;
}

function __ZNSt3__112__hash_tableINS_17__hash_value_typeI6ActioniEENS_22__unordered_map_hasherIS2_S3_13EnumClassHashLb1EEENS_21__unordered_map_equalIS2_S3_NS_8equal_toIS2_EELb1EEENS_9allocatorIS3_EEE6rehashEj(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 if ((i1 | 0) != 1) {
  if (i1 + -1 & i1) i1 = __ZNSt3__112__next_primeEj(i1) | 0;
 } else i1 = 2;
 i4 = HEAP32[i5 + 4 >> 2] | 0;
 if (i1 >>> 0 > i4 >>> 0) {
  __ZNSt3__112__hash_tableINS_17__hash_value_typeI6ActioniEENS_22__unordered_map_hasherIS2_S3_13EnumClassHashLb1EEENS_21__unordered_map_equalIS2_S3_NS_8equal_toIS2_EELb1EEENS_9allocatorIS3_EEE8__rehashEj(i5, i1);
  return;
 }
 if (i1 >>> 0 >= i4 >>> 0) return;
 if (i4 >>> 0 > 2) i3 = (i4 + -1 & i4 | 0) == 0; else i3 = 0;
 i2 = ~~+Math_ceil(+(+((HEAP32[i5 + 12 >> 2] | 0) >>> 0) / +HEAPF32[i5 + 16 >> 2])) >>> 0;
 if (i3) i2 = 1 << 32 - (Math_clz32(i2 + -1 | 0) | 0); else i2 = __ZNSt3__112__next_primeEj(i2) | 0;
 i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
 if (i1 >>> 0 >= i4 >>> 0) return;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeI6ActioniEENS_22__unordered_map_hasherIS2_S3_13EnumClassHashLb1EEENS_21__unordered_map_equalIS2_S3_NS_8equal_toIS2_EELb1EEENS_9allocatorIS3_EEE8__rehashEj(i5, i1);
 return;
}

function _SDL_PrivateJoystickAxis(i5, i3, i6) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i4 = i7;
 i1 = i3 & 255;
 if ((i1 | 0) >= (HEAP32[i5 + 8 >> 2] | 0)) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i2 = i5 + 12 | 0;
 if ((HEAP16[(HEAP32[i2 >> 2] | 0) + (i1 << 1) >> 1] | 0) == i6 << 16 >> 16) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 do if (((HEAP32[3042] | 0) == 0 ? (_SDL_WasInit(32) | 0) != 0 : 0) ? (_SDL_GetKeyboardFocus() | 0) == 0 : 0) {
  if (i6 << 16 >> 16 > 0) {
   if ((HEAP16[(HEAP32[i2 >> 2] | 0) + (i1 << 1) >> 1] | 0) > i6 << 16 >> 16) break; else i1 = 0;
   STACKTOP = i7;
   return i1 | 0;
  }
  if (i6 << 16 >> 16 < 0 ? (HEAP16[(HEAP32[i2 >> 2] | 0) + (i1 << 1) >> 1] | 0) >= i6 << 16 >> 16 : 0) {
   i6 = 0;
   STACKTOP = i7;
   return i6 | 0;
  }
 } while (0);
 HEAP16[(HEAP32[i2 >> 2] | 0) + (i1 << 1) >> 1] = i6;
 if ((_SDL_EventState(1536, -1) | 0) << 24 >> 24 != 1) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 HEAP32[i4 >> 2] = 1536;
 HEAP32[i4 + 8 >> 2] = HEAP32[i5 >> 2];
 HEAP8[i4 + 12 >> 0] = i3;
 HEAP16[i4 + 16 >> 1] = i6;
 i6 = (_SDL_PushEvent(i4) | 0) == 1 & 1;
 STACKTOP = i7;
 return i6 | 0;
}

function _SDL_MapRGB(i1, i3, i4, i5) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 if (!i2) {
  i9 = (i4 & 255) >>> (HEAPU8[i1 + 29 >> 0] | 0) << (HEAPU8[i1 + 33 >> 0] | 0) | (i3 & 255) >>> (HEAPU8[i1 + 28 >> 0] | 0) << (HEAPU8[i1 + 32 >> 0] | 0) | HEAP32[i1 + 24 >> 2] | (i5 & 255) >>> (HEAPU8[i1 + 30 >> 0] | 0) << (HEAPU8[i1 + 34 >> 0] | 0);
  return i9 | 0;
 }
 i9 = HEAP32[i2 >> 2] | 0;
 L5 : do if ((i9 | 0) > 0) {
  i8 = HEAP32[i2 + 4 >> 2] | 0;
  i7 = i3 & 255;
  i6 = i4 & 255;
  i4 = i5 & 255;
  i5 = 0;
  i1 = 0;
  i3 = -1;
  while (1) {
   i11 = (HEAPU8[i8 + (i5 << 2) >> 0] | 0) - i7 | 0;
   i12 = (HEAPU8[i8 + (i5 << 2) + 1 >> 0] | 0) - i6 | 0;
   i10 = (HEAPU8[i8 + (i5 << 2) + 2 >> 0] | 0) - i4 | 0;
   i2 = (HEAPU8[i8 + (i5 << 2) + 3 >> 0] | 0) + -255 | 0;
   i2 = (Math_imul(i12, i12) | 0) + (Math_imul(i11, i11) | 0) + (Math_imul(i10, i10) | 0) + (Math_imul(i2, i2) | 0) | 0;
   if (i2 >>> 0 < i3 >>> 0) {
    i1 = i5 & 255;
    if (!i2) break L5;
   } else i2 = i3;
   i5 = i5 + 1 | 0;
   if ((i5 | 0) >= (i9 | 0)) break; else i3 = i2;
  }
 } else i1 = 0; while (0);
 i12 = i1 & 255;
 return i12 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_(i9, i5, i8) {
 i9 = i9 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i3 = i5;
 i1 = HEAP8[i9 >> 0] | 0;
 if (!(i1 & 1)) {
  i2 = 1;
  i7 = (i1 & 255) >>> 1;
 } else {
  i1 = HEAP32[i9 >> 2] | 0;
  i2 = (i1 & -2) + -1 | 0;
  i7 = HEAP32[i9 + 4 >> 2] | 0;
  i1 = i1 & 255;
 }
 i6 = i8 - i3 >> 2;
 do if (i6) {
  if ((i2 - i7 | 0) >>> 0 < i6 >>> 0) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj(i9, i2, i7 + i6 - i2 | 0, i7, i7, 0, 0);
   i1 = HEAP8[i9 >> 0] | 0;
  }
  if (!(i1 & 1)) i4 = i9 + 4 | 0; else i4 = HEAP32[i9 + 8 >> 2] | 0;
  i3 = i7 + ((i8 - i3 | 0) >>> 2) | 0;
  if ((i5 | 0) != (i8 | 0)) {
   i1 = i5;
   i2 = i4 + (i7 << 2) | 0;
   while (1) {
    HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
    i1 = i1 + 4 | 0;
    if ((i1 | 0) == (i8 | 0)) break; else i2 = i2 + 4 | 0;
   }
  }
  HEAP32[i4 + (i3 << 2) >> 2] = 0;
  i1 = i7 + i6 | 0;
  if (!(HEAP8[i9 >> 0] & 1)) {
   HEAP8[i9 >> 0] = i1 << 1;
   break;
  } else {
   HEAP32[i9 + 4 >> 2] = i1;
   break;
  }
 } while (0);
 return i9 | 0;
}

function _Emscripten_JoyStickDisconnected(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i5 = i6;
 i1 = HEAP32[3481] | 0;
 if (!i1) {
  STACKTOP = i6;
  return 1;
 }
 i3 = HEAP32[i3 + 1300 >> 2] | 0;
 i2 = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) == (i3 | 0)) {
   i3 = i1;
   break;
  }
  i2 = HEAP32[i1 + 1320 >> 2] | 0;
  if (!i2) {
   i4 = 17;
   break;
  } else {
   i7 = i1;
   i1 = i2;
   i2 = i7;
  }
 }
 if ((i4 | 0) == 17) {
  STACKTOP = i6;
  return 1;
 }
 i1 = HEAP32[i3 + 16 >> 2] | 0;
 if (i1) HEAP32[i1 + 40 >> 2] = 0;
 i1 = HEAP32[i3 + 1320 >> 2] | 0;
 if (!i2) HEAP32[3481] = i1; else HEAP32[i2 + 1320 >> 2] = i1;
 if ((i3 | 0) == (HEAP32[3483] | 0)) HEAP32[3483] = i2;
 HEAP32[3484] = (HEAP32[3484] | 0) + -1;
 HEAP32[i5 >> 2] = 1542;
 do if ((_SDL_EventState(1542, -1) | 0) << 24 >> 24 == 1) {
  HEAP32[i5 + 8 >> 2] = HEAP32[i3 + 12 >> 2];
  i1 = HEAP32[814] | 0;
  if ((i1 | 0) != 0 ? (FUNCTION_TABLE_iii[i1 & 63](HEAP32[815] | 0, i5) | 0) == 0 : 0) break;
  _SDL_PushEvent(i5) | 0;
 } while (0);
 _SDL_free(HEAP32[i3 + 4 >> 2] | 0);
 _SDL_free(HEAP32[i3 + 8 >> 2] | 0);
 _SDL_free(i3);
 STACKTOP = i6;
 return 1;
}

function _copy_transl_565(i5, i3, i20, i1, i2) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i20 = i20 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0;
 if ((i20 | 0) <= 0) {
  i20 = i20 << 2;
  return i20 | 0;
 }
 i13 = i1 + 12 | 0;
 i16 = HEAPU8[i1 + 32 >> 0] | 0;
 i17 = i1 + 16 | 0;
 i18 = HEAPU8[i1 + 33 >> 0] | 0;
 i19 = i1 + 20 | 0;
 i14 = HEAPU8[i1 + 34 >> 0] | 0;
 i15 = i1 + 24 | 0;
 i6 = HEAPU8[i1 + 35 >> 0] | 0;
 i7 = HEAPU8[i2 + 28 >> 0] | 0;
 i8 = HEAPU8[i2 + 32 >> 0] | 0;
 i9 = HEAPU8[i2 + 29 >> 0] | 0;
 i10 = HEAPU8[i2 + 33 >> 0] | 0;
 i11 = HEAPU8[i2 + 30 >> 0] | 0;
 i12 = HEAPU8[i2 + 34 >> 0] | 0;
 i4 = i2 + 24 | 0;
 i1 = i5;
 i2 = 0;
 while (1) {
  i21 = HEAP32[i3 >> 2] | 0;
  i5 = (HEAP32[i17 >> 2] & i21) >>> i18 >>> i9 << i10 | (HEAP32[i13 >> 2] & i21) >>> i16 >>> i7 << i8 | HEAP32[i4 >> 2] | (HEAP32[i19 >> 2] & i21) >>> i14 >>> i11 << i12;
  HEAP32[i1 >> 2] = i5 & 63519 | (HEAP32[i15 >> 2] & i21) >>> i6 << 2 & 2016 | i5 << 16 & 132120576;
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == (i20 | 0)) break; else {
   i3 = i3 + 4 | 0;
   i1 = i1 + 4 | 0;
  }
 }
 i21 = i20 << 2;
 return i21 | 0;
}

function _SDL_JoystickGetGUIDFromString(i3, i10) {
 i3 = i3 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i11;
 i6 = (_SDL_strlen(i10) | 0) & -2;
 _SDL_memset(i1, 0, 16) | 0;
 L1 : do if (i6) {
  i7 = i1;
  i8 = 0;
  i9 = i1;
  while (1) {
   if ((i9 - i7 | 0) >= 16) break L1;
   i2 = HEAP8[i10 + i8 >> 0] | 0;
   i4 = i2 << 24 >> 24;
   do if ((i2 + -48 & 255) >= 10) if ((i2 + -65 & 255) < 6) {
    i2 = i4 + 201 | 0;
    break;
   } else {
    i2 = (i2 + -97 & 255) < 6 ? i4 + 169 | 0 : 0;
    break;
   } else i2 = i4 + 208 | 0; while (0);
   i5 = i2 << 4;
   i2 = HEAP8[i10 + (i8 | 1) >> 0] | 0;
   i4 = i2 << 24 >> 24;
   do if ((i2 + -48 & 255) >= 10) if ((i2 + -65 & 255) < 6) {
    i2 = i4 + 201 | 0;
    break;
   } else {
    i2 = (i2 + -97 & 255) < 6 ? i4 + 169 | 0 : 0;
    break;
   } else i2 = i4 + 208 | 0; while (0);
   HEAP8[i9 >> 0] = i2 | i5;
   i8 = i8 + 2 | 0;
   if (i8 >>> 0 >= i6 >>> 0) break; else i9 = i9 + 1 | 0;
  }
 } while (0);
 i2 = i3 + 16 | 0;
 do {
  HEAP8[i3 >> 0] = HEAP8[i1 >> 0] | 0;
  i3 = i3 + 1 | 0;
  i1 = i1 + 1 | 0;
 } while ((i3 | 0) < (i2 | 0));
 STACKTOP = i11;
 return;
}

function _copy_transl_555(i5, i3, i20, i1, i2) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i20 = i20 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0;
 if ((i20 | 0) <= 0) {
  i20 = i20 << 2;
  return i20 | 0;
 }
 i13 = i1 + 12 | 0;
 i16 = HEAPU8[i1 + 32 >> 0] | 0;
 i17 = i1 + 16 | 0;
 i18 = HEAPU8[i1 + 33 >> 0] | 0;
 i19 = i1 + 20 | 0;
 i14 = HEAPU8[i1 + 34 >> 0] | 0;
 i15 = i1 + 24 | 0;
 i6 = HEAPU8[i1 + 35 >> 0] | 0;
 i7 = HEAPU8[i2 + 28 >> 0] | 0;
 i8 = HEAPU8[i2 + 32 >> 0] | 0;
 i9 = HEAPU8[i2 + 29 >> 0] | 0;
 i10 = HEAPU8[i2 + 33 >> 0] | 0;
 i11 = HEAPU8[i2 + 30 >> 0] | 0;
 i12 = HEAPU8[i2 + 34 >> 0] | 0;
 i4 = i2 + 24 | 0;
 i1 = i5;
 i2 = 0;
 while (1) {
  i21 = HEAP32[i3 >> 2] | 0;
  i5 = (HEAP32[i17 >> 2] & i21) >>> i18 >>> i9 << i10 | (HEAP32[i13 >> 2] & i21) >>> i16 >>> i7 << i8 | HEAP32[i4 >> 2] | (HEAP32[i19 >> 2] & i21) >>> i14 >>> i11 << i12;
  HEAP32[i1 >> 2] = i5 & 64543 | (HEAP32[i15 >> 2] & i21) >>> i6 << 2 & 992 | i5 << 16 & 65011712;
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == (i20 | 0)) break; else {
   i3 = i3 + 4 | 0;
   i1 = i1 + 4 | 0;
  }
 }
 i21 = i20 << 2;
 return i21 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_(i9, i5, i8) {
 i9 = i9 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i3 = i5;
 i1 = HEAP8[i9 >> 0] | 0;
 if (!(i1 & 1)) {
  i2 = 10;
  i7 = (i1 & 255) >>> 1;
 } else {
  i1 = HEAP32[i9 >> 2] | 0;
  i2 = (i1 & -2) + -1 | 0;
  i7 = HEAP32[i9 + 4 >> 2] | 0;
  i1 = i1 & 255;
 }
 i6 = i8 - i3 | 0;
 do if ((i8 | 0) != (i5 | 0)) {
  if ((i2 - i7 | 0) >>> 0 < i6 >>> 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(i9, i2, i7 + i6 - i2 | 0, i7, i7, 0, 0);
   i1 = HEAP8[i9 >> 0] | 0;
  }
  if (!(i1 & 1)) i4 = i9 + 1 | 0; else i4 = HEAP32[i9 + 8 >> 2] | 0;
  i3 = i8 + (i7 - i3) | 0;
  if ((i5 | 0) != (i8 | 0)) {
   i1 = i5;
   i2 = i4 + i7 | 0;
   while (1) {
    HEAP8[i2 >> 0] = HEAP8[i1 >> 0] | 0;
    i1 = i1 + 1 | 0;
    if ((i1 | 0) == (i8 | 0)) break; else i2 = i2 + 1 | 0;
   }
  }
  HEAP8[i4 + i3 >> 0] = 0;
  i1 = i7 + i6 | 0;
  if (!(HEAP8[i9 >> 0] & 1)) {
   HEAP8[i9 >> 0] = i1 << 1;
   break;
  } else {
   HEAP32[i9 + 4 >> 2] = i1;
   break;
  }
 } while (0);
 return i9 | 0;
}

function _copy_32(i5, i3, i21, i1, i2) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i21 = i21 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 if ((i21 | 0) <= 0) {
  i21 = i21 << 2;
  return i21 | 0;
 }
 i14 = i1 + 12 | 0;
 i17 = HEAPU8[i1 + 32 >> 0] | 0;
 i18 = i1 + 16 | 0;
 i19 = HEAPU8[i1 + 33 >> 0] | 0;
 i20 = i1 + 20 | 0;
 i15 = HEAPU8[i1 + 34 >> 0] | 0;
 i16 = i1 + 24 | 0;
 i6 = HEAPU8[i1 + 35 >> 0] | 0;
 i7 = HEAPU8[i2 + 28 >> 0] | 0;
 i8 = HEAPU8[i2 + 32 >> 0] | 0;
 i9 = HEAPU8[i2 + 29 >> 0] | 0;
 i10 = HEAPU8[i2 + 33 >> 0] | 0;
 i11 = HEAPU8[i2 + 30 >> 0] | 0;
 i12 = HEAPU8[i2 + 34 >> 0] | 0;
 i13 = HEAPU8[i2 + 31 >> 0] | 0;
 i4 = HEAPU8[i2 + 35 >> 0] | 0;
 i1 = i5;
 i2 = 0;
 while (1) {
  i5 = HEAP32[i3 >> 2] | 0;
  HEAP32[i1 >> 2] = (HEAP32[i18 >> 2] & i5) >>> i19 >>> i9 << i10 | (HEAP32[i14 >> 2] & i5) >>> i17 >>> i7 << i8 | (HEAP32[i20 >> 2] & i5) >>> i15 >>> i11 << i12 | (HEAP32[i16 >> 2] & i5) >>> i6 >>> i13 << i4;
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == (i21 | 0)) break; else {
   i3 = i3 + 4 | 0;
   i1 = i1 + 4 | 0;
  }
 }
 i21 = i21 << 2;
 return i21 | 0;
}

function _SW_GetOutputSize(i7, i10, i9) {
 i7 = i7 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i11 = 0, i12 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i11;
 i4 = i7 + 316 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if (!i1) {
  i2 = i5 + 4 | 0;
  i12 = HEAP32[i2 >> 2] | 0;
  HEAP32[i5 >> 2] = i12;
  i1 = i12;
  if (!i12) {
   i1 = _SDL_GetWindowSurface(HEAP32[i7 + 188 >> 2] | 0) | 0;
   do if (((i1 | 0) != 0 ? (HEAP32[i2 >> 2] = i1, HEAP32[i5 >> 2] = i1, i6 = HEAP32[HEAP32[i4 >> 2] >> 2] | 0, (i6 | 0) != 0) : 0) ? (_SDL_SetClipRect(i6, i7 + 212 | 0) | 0, i3 = HEAP32[HEAP32[i4 >> 2] >> 2] | 0, (i3 | 0) != 0) : 0) if (!(HEAP32[i7 + 276 >> 2] | 0)) {
    _SDL_SetClipRect(i3, 0) | 0;
    break;
   } else {
    _SDL_SetClipRect(i3, i7 + 244 | 0) | 0;
    break;
   } while (0);
   i1 = HEAP32[i5 >> 2] | 0;
  }
  if (!i1) {
   _SDL_SetError(48447, i8) | 0;
   i12 = -1;
   STACKTOP = i11;
   return i12 | 0;
  }
 }
 if (i10) HEAP32[i10 >> 2] = HEAP32[i1 + 8 >> 2];
 if (!i9) {
  i12 = 0;
  STACKTOP = i11;
  return i12 | 0;
 }
 HEAP32[i9 >> 2] = HEAP32[i1 + 12 >> 2];
 i12 = 0;
 STACKTOP = i11;
 return i12 | 0;
}

function _memchr(i1, i5, i2) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i6 = i5 & 255;
 i3 = (i2 | 0) != 0;
 L1 : do if (i3 & (i1 & 3 | 0) != 0) {
  i4 = i5 & 255;
  while (1) {
   if ((HEAP8[i1 >> 0] | 0) == i4 << 24 >> 24) {
    i7 = 6;
    break L1;
   }
   i1 = i1 + 1 | 0;
   i2 = i2 + -1 | 0;
   i3 = (i2 | 0) != 0;
   if (!(i3 & (i1 & 3 | 0) != 0)) {
    i7 = 5;
    break;
   }
  }
 } else i7 = 5; while (0);
 if ((i7 | 0) == 5) if (i3) i7 = 6; else i2 = 0;
 L8 : do if ((i7 | 0) == 6) {
  i4 = i5 & 255;
  if ((HEAP8[i1 >> 0] | 0) != i4 << 24 >> 24) {
   i3 = Math_imul(i6, 16843009) | 0;
   L11 : do if (i2 >>> 0 > 3) while (1) {
    i6 = HEAP32[i1 >> 2] ^ i3;
    if ((i6 & -2139062144 ^ -2139062144) & i6 + -16843009) break;
    i1 = i1 + 4 | 0;
    i2 = i2 + -4 | 0;
    if (i2 >>> 0 <= 3) {
     i7 = 11;
     break L11;
    }
   } else i7 = 11; while (0);
   if ((i7 | 0) == 11) if (!i2) {
    i2 = 0;
    break;
   }
   while (1) {
    if ((HEAP8[i1 >> 0] | 0) == i4 << 24 >> 24) break L8;
    i1 = i1 + 1 | 0;
    i2 = i2 + -1 | 0;
    if (!i2) {
     i2 = 0;
     break;
    }
   }
  }
 } while (0);
 return ((i2 | 0) != 0 ? i1 : 0) | 0;
}

function _SDL_RenderDrawLines(i5, i4, i3) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i6 + 8 | 0;
 i1 = i6;
 if ((i5 | 0) != 0 ? (HEAP32[i5 >> 2] | 0) == 37791 : 0) {
  if (!i4) {
   i5 = _SDL_SetError(38175, i2) | 0;
   STACKTOP = i6;
   return i5 | 0;
  }
  if ((i3 | 0) < 2) {
   i5 = 0;
   STACKTOP = i6;
   return i5 | 0;
  }
  if (HEAP32[i5 + 192 >> 2] | 0) {
   i5 = 0;
   STACKTOP = i6;
   return i5 | 0;
  }
  if (!(+HEAPF32[i5 + 284 >> 2] != 1.0) ? !(+HEAPF32[i5 + 288 >> 2] != 1.0) : 0) {
   i1 = STACKTOP;
   STACKTOP = STACKTOP + ((1 * (i3 << 3) | 0) + 15 & -16) | 0;
   i2 = 0;
   do {
    HEAPF32[i1 + (i2 << 3) >> 2] = +(HEAP32[i4 + (i2 << 3) >> 2] | 0);
    HEAPF32[i1 + (i2 << 3) + 4 >> 2] = +(HEAP32[i4 + (i2 << 3) + 4 >> 2] | 0);
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != (i3 | 0));
   i5 = FUNCTION_TABLE_iiii[HEAP32[i5 + 64 >> 2] & 63](i5, i1, i3) | 0;
   STACKTOP = i6;
   return i5 | 0;
  }
  i5 = _RenderDrawLinesWithRects(i5, i4, i3) | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 _SDL_SetError(37792, i1) | 0;
 i5 = -1;
 STACKTOP = i6;
 return i5 | 0;
}

function ___cxx_global_array_dtor46(i1) {
 i1 = i1 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(31532);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(31520);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(31508);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(31496);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(31484);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(31472);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(31460);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(31448);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(31436);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(31424);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(31412);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(31400);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(31388);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(31376);
 return;
}

function ___cxx_global_array_dtor(i1) {
 i1 = i1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(31360);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(31348);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(31336);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(31324);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(31312);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(31300);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(31288);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(31276);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(31264);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(31252);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(31240);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(31228);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(31216);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(31204);
 return;
}

function _Emscripten_UnregisterEventHandlers(i1) {
 i1 = i1 | 0;
 _emscripten_set_mousemove_callback(42020, 0, 0, 0) | 0;
 _emscripten_set_mousedown_callback(42020, 0, 0, 0) | 0;
 _emscripten_set_mouseup_callback(42028, 0, 0, 0) | 0;
 _emscripten_set_mouseenter_callback(42020, 0, 0, 0) | 0;
 _emscripten_set_mouseleave_callback(42020, 0, 0, 0) | 0;
 _emscripten_set_wheel_callback(42020, 0, 0, 0) | 0;
 _emscripten_set_focus_callback(42038, 0, 0, 0) | 0;
 _emscripten_set_blur_callback(42038, 0, 0, 0) | 0;
 _emscripten_set_touchstart_callback(42020, 0, 0, 0) | 0;
 _emscripten_set_touchend_callback(42020, 0, 0, 0) | 0;
 _emscripten_set_touchmove_callback(42020, 0, 0, 0) | 0;
 _emscripten_set_touchcancel_callback(42020, 0, 0, 0) | 0;
 i1 = _SDL_GetHint(42046) | 0;
 i1 = (i1 | 0) != 0 ? i1 : 42038;
 _emscripten_set_keydown_callback(i1 | 0, 0, 0, 0) | 0;
 _emscripten_set_keyup_callback(i1 | 0, 0, 0, 0) | 0;
 _emscripten_set_keypress_callback(i1 | 0, 0, 0, 0) | 0;
 _emscripten_set_fullscreenchange_callback(42028, 0, 0, 0) | 0;
 _emscripten_set_resize_callback(42038, 0, 0, 0) | 0;
 _emscripten_set_visibilitychange_callback(0, 0, 0) | 0;
 return;
}

function _SDL_CreateThread(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 i5 = _SDL_malloc(800) | 0;
 if (!i5) {
  _SDL_Error(0) | 0;
  i5 = 0;
  return i5 | 0;
 }
 _SDL_memset(i5, 0, 800) | 0;
 HEAP32[i5 + 8 >> 2] = -1;
 _SDL_AtomicSet(i5 + 12 | 0, 0) | 0;
 if ((i1 | 0) != 0 ? (i4 = _SDL_strdup(i1) | 0, HEAP32[i5 + 792 >> 2] = i4, (i4 | 0) == 0) : 0) {
  _SDL_Error(0) | 0;
  _SDL_free(i5);
  i5 = 0;
  return i5 | 0;
 }
 i4 = _SDL_malloc(16) | 0;
 if (!i4) {
  _SDL_Error(0) | 0;
  i1 = HEAP32[i5 + 792 >> 2] | 0;
  if (i1) _SDL_free(i1);
  _SDL_free(i5);
  i5 = 0;
  return i5 | 0;
 }
 HEAP32[i4 >> 2] = i3;
 HEAP32[i4 + 4 >> 2] = i2;
 HEAP32[i4 + 8 >> 2] = i5;
 i3 = _SDL_CreateSemaphore(0) | 0;
 i1 = i4 + 12 | 0;
 HEAP32[i1 >> 2] = i3;
 if (!i3) {
  i1 = HEAP32[i5 + 792 >> 2] | 0;
  if (i1) _SDL_free(i1);
  _SDL_free(i5);
  _SDL_free(i4);
  i5 = 0;
  return i5 | 0;
 }
 if ((_SDL_SYS_CreateThread(i5, i4) | 0) > -1) {
  _SDL_SemWait(HEAP32[i1 >> 2] | 0) | 0;
  i1 = i5;
 } else {
  i1 = HEAP32[i5 + 792 >> 2] | 0;
  if (i1) _SDL_free(i1);
  _SDL_free(i5);
  i1 = 0;
 }
 _SDL_free(i4);
 i5 = i1;
 return i5 | 0;
}

function _SDL_RenderDrawPoint(i4, i5, i6) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i7 = 0, i8 = 0, d9 = 0.0, d10 = 0.0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i7;
 i3 = i7 + 8 | 0;
 if ((i4 | 0) != 0 ? (HEAP32[i4 >> 2] | 0) == 37791 : 0) {
  if (HEAP32[i4 + 192 >> 2] | 0) {
   i6 = 0;
   STACKTOP = i7;
   return i6 | 0;
  }
  i2 = i4 + 284 | 0;
  i1 = i4 + 288 | 0;
  if (!(+HEAPF32[i2 >> 2] != 1.0) ? !(+HEAPF32[i1 >> 2] != 1.0) : 0) {
   i3 = STACKTOP;
   STACKTOP = STACKTOP + 16 | 0;
   HEAPF32[i3 >> 2] = +(i5 | 0);
   HEAPF32[i3 + 4 >> 2] = +(i6 | 0);
   i6 = FUNCTION_TABLE_iiii[HEAP32[i4 + 60 >> 2] & 63](i4, i3, 1) | 0;
   STACKTOP = i7;
   return i6 | 0;
  }
  i8 = _llvm_stacksave() | 0;
  d10 = +HEAPF32[i2 >> 2];
  d9 = +HEAPF32[i1 >> 2];
  HEAPF32[i3 >> 2] = d10 * +(i5 | 0);
  HEAPF32[i3 + 4 >> 2] = d9 * +(i6 | 0);
  HEAPF32[i3 + 8 >> 2] = d10;
  HEAPF32[i3 + 12 >> 2] = d9;
  i6 = FUNCTION_TABLE_iiii[HEAP32[i4 + 68 >> 2] & 63](i4, i3, 1) | 0;
  _llvm_stackrestore(i8 | 0);
  STACKTOP = i7;
  return i6 | 0;
 }
 _SDL_SetError(37792, i1) | 0;
 i8 = -1;
 STACKTOP = i7;
 return i8 | 0;
}

function _fread(i2, i9, i1, i8) {
 i2 = i2 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0;
 i6 = Math_imul(i1, i9) | 0;
 if ((HEAP32[i8 + 76 >> 2] | 0) > -1) i7 = ___lockfile(i8) | 0; else i7 = 0;
 i3 = i8 + 74 | 0;
 i4 = HEAP8[i3 >> 0] | 0;
 HEAP8[i3 >> 0] = i4 + 255 | i4;
 i3 = i8 + 4 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i5 = (HEAP32[i8 + 8 >> 2] | 0) - i4 | 0;
 if ((i5 | 0) > 0) {
  i5 = i5 >>> 0 < i6 >>> 0 ? i5 : i6;
  _memcpy(i2 | 0, i4 | 0, i5 | 0) | 0;
  HEAP32[i3 >> 2] = i4 + i5;
  i2 = i2 + i5 | 0;
  i3 = i6 - i5 | 0;
 } else i3 = i6;
 L7 : do if (!i3) i10 = 13; else {
  i5 = i8 + 32 | 0;
  i4 = i3;
  while (1) {
   if (___toread(i8) | 0) {
    i1 = i4;
    break;
   }
   i3 = FUNCTION_TABLE_iiii[HEAP32[i5 >> 2] & 63](i8, i2, i4) | 0;
   if ((i3 + 1 | 0) >>> 0 < 2) {
    i1 = i4;
    break;
   }
   if ((i4 | 0) == (i3 | 0)) {
    i10 = 13;
    break L7;
   } else {
    i2 = i2 + i3 | 0;
    i4 = i4 - i3 | 0;
   }
  }
  if (i7) ___unlockfile(i8);
  i1 = ((i6 - i1 | 0) >>> 0) / (i9 >>> 0) | 0;
 } while (0);
 if ((i10 | 0) == 13) if (i7) ___unlockfile(i8);
 return i1 | 0;
}

function _SDL_PrivateJoystickButton(i5, i3, i6) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i4 = i7;
 switch (i6 & 255 | 0) {
 case 1:
  {
   HEAP32[i4 >> 2] = 1539;
   break;
  }
 case 0:
  {
   HEAP32[i4 >> 2] = 1540;
   break;
  }
 default:
  {
   i6 = 0;
   STACKTOP = i7;
   return i6 | 0;
  }
 }
 i1 = i3 & 255;
 if ((i1 | 0) >= (HEAP32[i5 + 32 >> 2] | 0)) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i2 = i5 + 36 | 0;
 if ((HEAP8[(HEAP32[i2 >> 2] | 0) + i1 >> 0] | 0) == i6 << 24 >> 24) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 if (((HEAP32[3042] | 0) == 0 ? (_SDL_WasInit(32) | 0) != 0 : 0) ? i6 << 24 >> 24 == 1 & (_SDL_GetKeyboardFocus() | 0) == 0 : 0) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 HEAP8[(HEAP32[i2 >> 2] | 0) + i1 >> 0] = i6;
 if ((_SDL_EventState(HEAP32[i4 >> 2] | 0, -1) | 0) << 24 >> 24 != 1) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 HEAP32[i4 + 8 >> 2] = HEAP32[i5 >> 2];
 HEAP8[i4 + 12 >> 0] = i3;
 HEAP8[i4 + 13 >> 0] = i6;
 i6 = (_SDL_PushEvent(i4) | 0) == 1 & 1;
 STACKTOP = i7;
 return i6 | 0;
}

function _Emscripten_HandleKeyPress(i1, i4, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 i1 = HEAP32[i4 + 152 >> 2] | 0;
 do if (i1 >>> 0 >= 128) {
  if (i1 >>> 0 < 2048) {
   HEAP8[i2 >> 0] = i1 >>> 6 & 31 | 192;
   HEAP8[i2 + 1 >> 0] = i1 & 63 | 128;
   HEAP8[i2 + 2 >> 0] = 0;
   break;
  }
  if (i1 >>> 0 < 65536) {
   HEAP8[i2 >> 0] = i1 >>> 12 & 15 | 224;
   HEAP8[i2 + 1 >> 0] = i1 >>> 6 & 63 | 128;
   HEAP8[i2 + 2 >> 0] = i1 & 63 | 128;
   HEAP8[i2 + 3 >> 0] = 0;
   break;
  }
  if (i1 >>> 0 < 1114112) {
   HEAP8[i2 >> 0] = i1 >>> 18 | 240;
   HEAP8[i2 + 1 >> 0] = i1 >>> 12 & 63 | 128;
   HEAP8[i2 + 2 >> 0] = i1 >>> 6 & 63 | 128;
   HEAP8[i2 + 3 >> 0] = i1 & 63 | 128;
   HEAP8[i2 + 4 >> 0] = 0;
   break;
  } else {
   i4 = _SDL_EventState(771, -1) | 0;
   i4 = i4 << 24 >> 24 == 1;
   i4 = i4 & 1;
   STACKTOP = i3;
   return i4 | 0;
  }
 } else {
  HEAP8[i2 >> 0] = i1;
  HEAP8[i2 + 1 >> 0] = 0;
 } while (0);
 _SDL_SendKeyboardText(i2) | 0;
 i4 = _SDL_EventState(771, -1) | 0;
 i4 = i4 << 24 >> 24 == 1;
 i4 = i4 & 1;
 STACKTOP = i3;
 return i4 | 0;
}

function _SDL_GetDisplayBounds(i4, i5) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i6 + 8 | 0;
 i3 = HEAP32[3256] | 0;
 if (!i3) {
  _SDL_SetError(41242, i6) | 0;
  i5 = -1;
  STACKTOP = i6;
  return i5 | 0;
 }
 i1 = HEAP32[i3 + 236 >> 2] | 0;
 if (!((i4 | 0) > -1 & (i1 | 0) > (i4 | 0))) {
  HEAP32[i2 >> 2] = i1 + -1;
  _SDL_SetError(41283, i2) | 0;
  i5 = -1;
  STACKTOP = i6;
  return i5 | 0;
 }
 if (!i5) {
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 i2 = HEAP32[i3 + 240 >> 2] | 0;
 i1 = HEAP32[i3 + 12 >> 2] | 0;
 if ((i1 | 0) != 0 ? (FUNCTION_TABLE_iiii[i1 & 63](i3, i2 + (i4 * 68 | 0) | 0, i5) | 0) == 0 : 0) {
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 if (!i4) {
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  i1 = i5 + 8 | 0;
 } else {
  _SDL_GetDisplayBounds(i4 + -1 | 0, i5) | 0;
  i1 = i5 + 8 | 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i1 >> 2] | 0);
 }
 HEAP32[i1 >> 2] = HEAP32[i2 + (i4 * 68 | 0) + 40 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i2 + (i4 * 68 | 0) + 44 >> 2];
 i5 = 0;
 STACKTOP = i6;
 return i5 | 0;
}

function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji(i1, i6, i7, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i9;
 L1 : do if ((i1 | 0) == (i6 | 0)) {
  HEAP32[i7 >> 2] = 4;
  i1 = 0;
 } else {
  i4 = ___errno_location() | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = 0;
  i1 = _strtoll_l(i1, i8, i2, __ZNSt3__16__clocEv() | 0) | 0;
  i2 = tempRet0;
  i3 = HEAP32[i4 >> 2] | 0;
  if (!i3) HEAP32[i4 >> 2] = i5;
  if ((HEAP32[i8 >> 2] | 0) != (i6 | 0)) {
   HEAP32[i7 >> 2] = 4;
   i1 = 0;
   break;
  }
  do if ((i3 | 0) == 34) {
   HEAP32[i7 >> 2] = 4;
   if ((i2 | 0) > 0 | (i2 | 0) == 0 & i1 >>> 0 > 0) {
    i1 = 2147483647;
    break L1;
   }
  } else {
   if ((i2 | 0) < -1 | (i2 | 0) == -1 & i1 >>> 0 < 2147483648) {
    HEAP32[i7 >> 2] = 4;
    break;
   }
   if ((i2 | 0) > 0 | (i2 | 0) == 0 & i1 >>> 0 > 2147483647) {
    HEAP32[i7 >> 2] = 4;
    i1 = 2147483647;
    break L1;
   } else break L1;
  } while (0);
  i1 = -2147483648;
 } while (0);
 STACKTOP = i9;
 return i1 | 0;
}

function _Emscripten_CreateSystemCursor(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 do switch (i1 | 0) {
 case 0:
  {
   i3 = 43578;
   i2 = 13;
   break;
  }
 case 1:
  {
   i3 = 47944;
   i2 = 13;
   break;
  }
 case 2:
  {
   i3 = 47939;
   i2 = 13;
   break;
  }
 case 3:
  {
   i3 = 47929;
   i2 = 13;
   break;
  }
 case 4:
  {
   i3 = 47920;
   i2 = 13;
   break;
  }
 case 5:
  {
   i3 = 47908;
   i2 = 13;
   break;
  }
 case 6:
  {
   i3 = 47896;
   i2 = 13;
   break;
  }
 case 7:
  {
   i3 = 47886;
   i2 = 13;
   break;
  }
 case 8:
  {
   i3 = 47876;
   i2 = 13;
   break;
  }
 case 9:
  {
   i3 = 0;
   i2 = 13;
   break;
  }
 case 10:
  {
   i3 = 47864;
   i2 = 13;
   break;
  }
 case 11:
  {
   i3 = 47856;
   i2 = 13;
   break;
  }
 default:
  i1 = 0;
 } while (0);
 do if ((i2 | 0) == 13) {
  i1 = _SDL_calloc(1, 8) | 0;
  if (!i1) {
   _SDL_Error(0) | 0;
   i1 = 0;
   break;
  }
  i2 = _SDL_calloc(1, 4) | 0;
  if (!i2) {
   _SDL_Error(0) | 0;
   _SDL_free(i1);
   i1 = 0;
   break;
  } else {
   HEAP32[i2 >> 2] = i3;
   HEAP32[i1 + 4 >> 2] = i2;
   break;
  }
 } while (0);
 return i1 | 0;
}

function _Emscripten_HandleMouseMove(i1, i6, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 var d3 = 0.0, d4 = 0.0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, d10 = 0.0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 i7 = i5 + 16 | 0;
 i9 = i5 + 8 | 0;
 i8 = i5;
 _emscripten_get_element_css_size(0, i9 | 0, i8 | 0) | 0;
 i1 = i2 + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 d4 = +(HEAP32[i2 + 24 >> 2] | 0) / +HEAPF64[i9 >> 3];
 d3 = +(HEAP32[i2 + 28 >> 2] | 0) / +HEAPF64[i8 >> 3];
 i2 = (_emscripten_get_pointerlock_status(i7 | 0) | 0) == 0;
 i2 = i2 ? HEAP32[i7 >> 2] | 0 : 0;
 if (!i2) {
  i8 = ~~(d4 * +(HEAP32[i6 + 60 >> 2] | 0));
  i9 = ~~(d3 * +(HEAP32[i6 + 64 >> 2] | 0));
  i7 = HEAP32[i1 >> 2] | 0;
  _SDL_SendMouseMotion(i7, 0, i2, i8, i9) | 0;
  STACKTOP = i5;
  return 0;
 } else {
  d10 = +HEAPF64[113] + d4 * +(HEAP32[i6 + 44 >> 2] | 0);
  d4 = +HEAPF64[114] + d3 * +(HEAP32[i6 + 48 >> 2] | 0);
  i8 = ~~d10;
  HEAPF64[113] = d10 - +(i8 | 0);
  i9 = ~~d4;
  HEAPF64[114] = d4 - +(i9 | 0);
  i7 = HEAP32[i1 >> 2] | 0;
  _SDL_SendMouseMotion(i7, 0, i2, i8, i9) | 0;
  STACKTOP = i5;
  return 0;
 }
 return 0;
}

function _SDL_AddTouch(i4, i5, i1) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 i3 = HEAP32[3034] | 0;
 L1 : do if ((i3 | 0) > 0) {
  i1 = HEAP32[3035] | 0;
  i2 = 0;
  while (1) {
   i6 = HEAP32[i1 + (i2 << 2) >> 2] | 0;
   if ((HEAP32[i6 >> 2] | 0) == (i4 | 0) ? (HEAP32[i6 + 4 >> 2] | 0) == (i5 | 0) : 0) break;
   i2 = i2 + 1 | 0;
   if ((i2 | 0) >= (i3 | 0)) break L1;
  }
  if ((i2 | 0) > -1) {
   i6 = i2;
   return i6 | 0;
  }
 } else i1 = HEAP32[3035] | 0; while (0);
 i1 = _SDL_realloc(i1, (i3 << 2) + 4 | 0) | 0;
 if (!i1) {
  i6 = _SDL_Error(0) | 0;
  return i6 | 0;
 }
 HEAP32[3035] = i1;
 i1 = HEAP32[3034] | 0;
 HEAP32[3034] = i1 + 1;
 i2 = _SDL_malloc(24) | 0;
 HEAP32[(HEAP32[3035] | 0) + (i1 << 2) >> 2] = i2;
 i2 = HEAP32[(HEAP32[3035] | 0) + (i1 << 2) >> 2] | 0;
 if (!i2) {
  i6 = _SDL_Error(0) | 0;
  return i6 | 0;
 } else {
  i6 = i2;
  HEAP32[i6 >> 2] = i4;
  HEAP32[i6 + 4 >> 2] = i5;
  HEAP32[i2 + 8 >> 2] = 0;
  HEAP32[i2 + 12 >> 2] = 0;
  HEAP32[i2 + 16 >> 2] = 0;
  _SDL_GestureAddTouch(i4, i5) | 0;
  i6 = i1;
  return i6 | 0;
 }
 return 0;
}

function _BlitBto3(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i7 = HEAP32[i2 + 24 >> 2] | 0;
 i1 = HEAP32[i2 + 28 >> 2] | 0;
 i11 = HEAP32[i2 + 36 >> 2] | 0;
 i12 = HEAP32[i2 + 48 >> 2] | 0;
 i8 = (HEAP32[i2 + 16 >> 2] | 0) + i7 + ((i7 + 7 | 0) / -8 | 0) | 0;
 if (!i1) return;
 i9 = (i7 | 0) > 0;
 i10 = i7 * 3 | 0;
 i3 = HEAP32[i2 + 20 >> 2] | 0;
 i2 = HEAP32[i2 >> 2] | 0;
 while (1) {
  i1 = i1 + -1 | 0;
  if (i9) {
   i4 = 0;
   i5 = 0;
   i6 = i3;
   while (1) {
    if (!(i5 & 7)) {
     i4 = HEAP8[i2 >> 0] | 0;
     i2 = i2 + 1 | 0;
    }
    i14 = ((i4 & 255) >>> 7 & 255) << 2;
    i13 = i14 | 1;
    HEAP8[i6 >> 0] = HEAP8[i12 + i14 >> 0] | 0;
    HEAP8[i6 + 1 >> 0] = HEAP8[i12 + i13 >> 0] | 0;
    HEAP8[i6 + 2 >> 0] = HEAP8[i12 + (i13 + 1) >> 0] | 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i7 | 0)) break; else {
     i4 = (i4 & 255) << 1 & 255;
     i6 = i6 + 3 | 0;
    }
   }
   i3 = i3 + i10 | 0;
  }
  if (!i1) break; else {
   i3 = i3 + i11 | 0;
   i2 = i2 + i8 | 0;
  }
 }
 return;
}

function __ZNSt3__16vectorI6ActionNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i6 = i11 + 4 | 0;
 i7 = HEAP32[i11 >> 2] | 0;
 i8 = i7;
 i2 = ((HEAP32[i6 >> 2] | 0) - i8 >> 2) + 1 | 0;
 if (i2 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
 i9 = i11 + 8 | 0;
 i3 = i7;
 i1 = (HEAP32[i9 >> 2] | 0) - i3 | 0;
 if (i1 >> 2 >>> 0 < 536870911) {
  i1 = i1 >> 1;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i2 = i3 >> 2;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i1 = i3;
  } else i12 = 6;
 } else {
  i3 = (HEAP32[i6 >> 2] | 0) - i3 | 0;
  i1 = 1073741823;
  i2 = i3 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i5 = i1;
  i4 = __Znwj(i1 << 2) | 0;
  i1 = i3;
 }
 HEAP32[i4 + (i2 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i4 | 0, i7 | 0, i1 | 0) | 0;
 HEAP32[i11 >> 2] = i4;
 HEAP32[i6 >> 2] = i4 + (i2 + 1 << 2);
 HEAP32[i9 >> 2] = i4 + (i5 << 2);
 if (!i8) return;
 __ZdlPv(i8);
 return;
}

function _SDL_StopEventLoop() {
 var i1 = 0, i2 = 0;
 HEAP32[1587] = 0;
 i1 = HEAP32[1589] | 0;
 if (i1) do {
  i2 = i1;
  i1 = HEAP32[i1 + 72 >> 2] | 0;
  _SDL_free(i2);
 } while ((i1 | 0) != 0);
 i1 = HEAP32[1591] | 0;
 if (i1) do {
  i2 = i1;
  i1 = HEAP32[i1 + 72 >> 2] | 0;
  _SDL_free(i2);
 } while ((i1 | 0) != 0);
 i1 = HEAP32[1592] | 0;
 if (i1) do {
  i2 = i1;
  i1 = HEAP32[i1 + 12 >> 2] | 0;
  _SDL_free(i2);
 } while ((i1 | 0) != 0);
 i1 = HEAP32[1593] | 0;
 if (i1) do {
  i2 = i1;
  i1 = HEAP32[i1 + 12 >> 2] | 0;
  _SDL_free(i2);
 } while ((i1 | 0) != 0);
 HEAP32[1588] = 0;
 HEAP32[1589] = 0;
 HEAP32[1590] = 0;
 HEAP32[1591] = 0;
 HEAP32[1592] = 0;
 HEAP32[1593] = 0;
 i1 = 0;
 do {
  i2 = 6380 + (i1 << 2) | 0;
  _SDL_free(HEAP32[i2 >> 2] | 0);
  HEAP32[i2 >> 2] = 0;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 256);
 i1 = HEAP32[1594] | 0;
 if (i1) do {
  HEAP32[1594] = HEAP32[i1 + 8 >> 2];
  _SDL_free(i1);
  i1 = HEAP32[1594] | 0;
 } while ((i1 | 0) != 0);
 HEAP32[814] = 0;
 if (!(HEAP32[1586] | 0)) return;
 _SDL_DestroyMutex(HEAP32[1586] | 0);
 HEAP32[1586] = 0;
 return;
}

function _SDL_GetRGB(i6, i4, i7, i5, i3) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = i4 + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) {
  HEAP8[i7 >> 0] = HEAP8[(HEAP32[5992 + ((HEAPU8[i4 + 28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i4 + 12 >> 2] & i6) >>> (HEAPU8[i4 + 32 >> 0] | 0)) >> 0] | 0;
  HEAP8[i5 >> 0] = HEAP8[(HEAP32[5992 + ((HEAPU8[i4 + 29 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i4 + 16 >> 2] & i6) >>> (HEAPU8[i4 + 33 >> 0] | 0)) >> 0] | 0;
  HEAP8[i3 >> 0] = HEAP8[(HEAP32[5992 + ((HEAPU8[i4 + 30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i4 + 20 >> 2] & i6) >>> (HEAPU8[i4 + 34 >> 0] | 0)) >> 0] | 0;
  return;
 }
 if ((HEAP32[i2 >> 2] | 0) >>> 0 > i6 >>> 0) {
  HEAP8[i7 >> 0] = HEAP8[(HEAP32[i2 + 4 >> 2] | 0) + (i6 << 2) >> 0] | 0;
  HEAP8[i5 >> 0] = HEAP8[(HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0) + (i6 << 2) + 1 >> 0] | 0;
  HEAP8[i3 >> 0] = HEAP8[(HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0) + (i6 << 2) + 2 >> 0] | 0;
  return;
 } else {
  HEAP8[i3 >> 0] = 0;
  HEAP8[i5 >> 0] = 0;
  HEAP8[i7 >> 0] = 0;
  return;
 }
}

function _SDL_FreeSurface(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 if (!i5) return;
 i1 = HEAP32[i5 >> 2] | 0;
 if (i1 & 4) return;
 i2 = i5 + 56 | 0;
 i4 = HEAP32[i2 >> 2] | 0;
 HEAP32[i2 >> 2] = i4 + -1;
 if ((i4 | 0) > 1) return;
 i4 = i5 + 28 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 if ((i2 | 0) > 0) {
  while (1) {
   i1 = i2 + -1 | 0;
   HEAP32[i4 >> 2] = i1;
   if ((i2 | 0) <= 1 ? (i3 = HEAP32[i5 >> 2] | 0, (i3 & 2 | 0) != 0) : 0) {
    HEAP32[i5 >> 2] = i3 & -3;
    _SDL_RLESurface(i5) | 0;
    i1 = HEAP32[i4 >> 2] | 0;
   }
   if ((i1 | 0) > 0) i2 = i1; else break;
  }
  i1 = HEAP32[i5 >> 2] | 0;
 }
 if (i1 & 2) _SDL_UnRLESurface(i5, 0);
 i1 = i5 + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2) {
  if ((_SDL_SetPixelFormatPalette(i2, 0) | 0) >= 0) _SDL_InvalidateMap(HEAP32[i5 + 52 >> 2] | 0);
  _SDL_FreeFormat(HEAP32[i1 >> 2] | 0);
  HEAP32[i1 >> 2] = 0;
 }
 i1 = i5 + 52 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2) {
  _SDL_FreeBlitMap(i2);
  HEAP32[i1 >> 2] = 0;
 }
 if (!(HEAP32[i5 >> 2] & 1)) _SDL_free(HEAP32[i5 + 20 >> 2] | 0);
 _SDL_free(i5);
 return;
}

function __ZN17GameObjectManager14spawnObstaclesEiiiii(i10, i11, i12, i1, i2, i9) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 var i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, i8 = 0, i13 = 0, d14 = 0.0, d15 = 0.0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i13;
 i3 = HEAP32[i10 >> 2] | 0;
 if ((i3 | 0) <= 0) {
  STACKTOP = i13;
  return;
 }
 i5 = i8 + 4 | 0;
 d6 = +(i11 | 0);
 d7 = +(i12 | 0);
 i4 = i2 + -10 | 0;
 if ((i9 | 0) < 0) {
  i1 = 0;
  do i1 = i1 + 1 | 0; while ((i1 | 0) < (i3 | 0));
  STACKTOP = i13;
  return;
 } else i1 = 0;
 do {
  i2 = 0;
  while (1) {
   d15 = +((_rand() | 0) % (i11 | 0) | 0 | 0);
   d14 = +((_rand() | 0) % (i12 | 0) | 0 | 0);
   HEAPF32[i8 >> 2] = d15;
   HEAPF32[i5 >> 2] = d14;
   if (!(d15 > d6 | d14 > d7) ? __ZN17GameObjectManager13spawnObstacleER5Vec2ff(i10, i8, +(((_rand() | 0) % (i4 | 0) | 0) + 10 | 0)) | 0 : 0) break;
   if ((i2 | 0) < (i9 | 0)) i2 = i2 + 1 | 0; else break;
  }
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) < (HEAP32[i10 >> 2] | 0));
 STACKTOP = i13;
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw(i11, i10, i1, i4, i8, i9, i7, i5) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 if ((1073741806 - i10 | 0) >>> 0 < i1 >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i11);
 if (!(HEAP8[i11 >> 0] & 1)) i6 = i11 + 4 | 0; else i6 = HEAP32[i11 + 8 >> 2] | 0;
 if (i10 >>> 0 < 536870887) {
  i2 = i1 + i10 | 0;
  i3 = i10 << 1;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i2 = i2 >>> 0 < 2 ? 2 : i2 + 4 & -4;
 } else i2 = 1073741807;
 i3 = __Znwj(i2 << 2) | 0;
 if (i8) _wmemcpy(i3, i6, i8) | 0;
 if (i7) _wmemcpy(i3 + (i8 << 2) | 0, i5, i7) | 0;
 i1 = i4 - i9 | 0;
 if ((i1 | 0) != (i8 | 0)) _wmemcpy(i3 + (i7 + i8 << 2) | 0, i6 + (i9 + i8 << 2) | 0, i1 - i8 | 0) | 0;
 if ((i10 | 0) != 1) __ZdlPv(i6);
 HEAP32[i11 + 8 >> 2] = i3;
 HEAP32[i11 >> 2] = i2 | 1;
 i10 = i1 + i7 | 0;
 HEAP32[i11 + 4 >> 2] = i10;
 HEAP32[i3 + (i10 << 2) >> 2] = 0;
 return;
}

function _SDL_AddAudioDevice(i7, i5, i4) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i6 = i8;
 i1 = _SDL_strlen(i5) | 0;
 i2 = _SDL_malloc(i1 + 9 | 0) | 0;
 i3 = (i2 | 0) == 0;
 do if (!i7) if (i3) {
  STACKTOP = i8;
  return;
 } else {
  HEAP32[i2 >> 2] = i4;
  _SDL_strlcpy(i2 + 8 | 0, i5, i1 + 1 | 0) | 0;
  HEAP32[i2 + 4 >> 2] = HEAP32[1561];
  HEAP32[1561] = i2;
  i1 = HEAP32[1559] | 0;
  HEAP32[1559] = i1 + 1;
  break;
 } else if (i3) {
  STACKTOP = i8;
  return;
 } else {
  HEAP32[i2 >> 2] = i4;
  _SDL_strlcpy(i2 + 8 | 0, i5, i1 + 1 | 0) | 0;
  HEAP32[i2 + 4 >> 2] = HEAP32[1562];
  HEAP32[1562] = i2;
  i1 = HEAP32[1560] | 0;
  HEAP32[1560] = i1 + 1;
  break;
 } while (0);
 if ((i1 | 0) == -1) {
  STACKTOP = i8;
  return;
 }
 if ((_SDL_EventState(4352, -1) | 0) << 24 >> 24 != 1) {
  STACKTOP = i8;
  return;
 }
 _SDL_memset(i6, 0, 56) | 0;
 HEAP32[i6 >> 2] = 4352;
 HEAP32[i6 + 8 >> 2] = i1;
 HEAP8[i6 + 12 >> 0] = i7;
 _SDL_PushEvent(i6) | 0;
 STACKTOP = i8;
 return;
}

function _SW_CreateTexture(i1, i7) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i6 + 20 | 0;
 i4 = i6 + 16 | 0;
 i3 = i6 + 12 | 0;
 i2 = i6 + 8 | 0;
 i1 = i6 + 4 | 0;
 if (!(_SDL_PixelFormatEnumToMasks(HEAP32[i7 + 4 >> 2] | 0, i5, i4, i3, i2, i1) | 0)) {
  i7 = _SDL_SetError(48424, i6) | 0;
  STACKTOP = i6;
  return i7 | 0;
 }
 i5 = _SDL_CreateRGBSurface(0, HEAP32[i7 + 12 >> 2] | 0, HEAP32[i7 + 16 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i2 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0;
 i1 = i7 + 68 | 0;
 HEAP32[i1 >> 2] = i5;
 _SDL_SetSurfaceColorMod(i5, HEAP8[i7 + 28 >> 0] | 0, HEAP8[i7 + 29 >> 0] | 0, HEAP8[i7 + 30 >> 0] | 0) | 0;
 _SDL_SetSurfaceAlphaMod(HEAP32[i1 >> 2] | 0, HEAP8[i7 + 31 >> 0] | 0) | 0;
 _SDL_SetSurfaceBlendMode(HEAP32[i1 >> 2] | 0, HEAP32[i7 + 24 >> 2] | 0) | 0;
 if (!(HEAP32[i7 + 8 >> 2] | 0)) _SDL_SetSurfaceRLE(HEAP32[i1 >> 2] | 0, 1) | 0;
 i7 = ((HEAP32[i1 >> 2] | 0) == 0) << 31 >> 31;
 STACKTOP = i6;
 return i7 | 0;
}

function _SDL_GetWindowData(i4, i5) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i7 + 16 | 0;
 i2 = i7 + 8 | 0;
 i1 = HEAP32[3256] | 0;
 if (!i1) {
  _SDL_SetError(41242, i7) | 0;
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 if ((i4 | 0) != 0 ? (HEAP32[i4 >> 2] | 0) == (i1 + 248 | 0) : 0) {
  if ((i5 | 0) != 0 ? (HEAP8[i5 >> 0] | 0) != 0 : 0) {
   i1 = HEAP32[i4 + 132 >> 2] | 0;
   if (!i1) {
    i6 = 0;
    STACKTOP = i7;
    return i6 | 0;
   }
   while (1) {
    i2 = HEAP32[i1 >> 2] | 0;
    if ((i2 | 0) != 0 ? (_SDL_strcmp(i2, i5) | 0) == 0 : 0) break;
    i1 = HEAP32[i1 + 8 >> 2] | 0;
    if (!i1) {
     i1 = 0;
     i6 = 14;
     break;
    }
   }
   if ((i6 | 0) == 14) {
    STACKTOP = i7;
    return i1 | 0;
   }
   i6 = HEAP32[i1 + 4 >> 2] | 0;
   STACKTOP = i7;
   return i6 | 0;
  }
  HEAP32[i3 >> 2] = 41559;
  _SDL_SetError(41366, i3) | 0;
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 _SDL_SetError(41324, i2) | 0;
 i6 = 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZN4Game6updateEv(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i2 = i6;
 i5 = i6 + 56 | 0;
 if (!(_SDL_PollEvent(i2) | 0)) i1 = 0; else {
  i1 = 0;
  do i1 = i1 | (HEAP32[i2 >> 2] | 0) == 256; while ((_SDL_PollEvent(i2) | 0) != 0);
 }
 i2 = _SDL_GetKeyboardState(0) | 0;
 HEAP32[i5 >> 2] = 0;
 i4 = i5 + 4 | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 __ZN11KeyBindings14getKeysPressedEPKhRNSt3__16vectorI6ActionNS2_9allocatorIS4_EEEE(HEAP32[i3 + 20 >> 2] | 0, i2, i5);
 i2 = i3 + 16 | 0;
 i7 = HEAP32[i2 >> 2] | 0;
 __ZN17GameObjectManager9updateAllEfRNSt3__16vectorI6ActionNS0_9allocatorIS2_EEEE(i7, +(__ZN5Clock7restartEv(i3 + 24 | 0) | 0), i5);
 i3 = i1 | (__ZN17GameObjectManager15checkCollisionsEv(HEAP32[i2 >> 2] | 0) | 0);
 i1 = HEAP32[i5 >> 2] | 0;
 if (!i1) {
  STACKTOP = i6;
  return i3 | 0;
 }
 i2 = HEAP32[i4 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) HEAP32[i4 >> 2] = i2 + (~((i2 + -4 - i1 | 0) >>> 2) << 2);
 __ZdlPv(i1);
 STACKTOP = i6;
 return i3 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc(i11, i10, i1, i4, i8, i9, i7, i5) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 if ((-18 - i10 | 0) >>> 0 < i1 >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i11);
 if (!(HEAP8[i11 >> 0] & 1)) i6 = i11 + 1 | 0; else i6 = HEAP32[i11 + 8 >> 2] | 0;
 if (i10 >>> 0 < 2147483623) {
  i2 = i1 + i10 | 0;
  i3 = i10 << 1;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i2 = i2 >>> 0 < 11 ? 11 : i2 + 16 & -16;
 } else i2 = -17;
 i3 = __Znwj(i2) | 0;
 if (i8) _memcpy(i3 | 0, i6 | 0, i8 | 0) | 0;
 if (i7) _memcpy(i3 + i8 | 0, i5 | 0, i7 | 0) | 0;
 i1 = i4 - i9 | 0;
 if ((i1 | 0) != (i8 | 0)) _memcpy(i3 + (i7 + i8) | 0, i6 + (i9 + i8) | 0, i1 - i8 | 0) | 0;
 if ((i10 | 0) != 10) __ZdlPv(i6);
 HEAP32[i11 + 8 >> 2] = i3;
 HEAP32[i11 >> 2] = i2 | 1;
 i10 = i1 + i7 | 0;
 HEAP32[i11 + 4 >> 2] = i10;
 HEAP8[i3 + i10 >> 0] = 0;
 return;
}

function _SDL_TLSSet(i6, i7, i5) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i8;
 if (!i6) {
  HEAP32[i1 >> 2] = 38881;
  i7 = _SDL_SetError(41366, i1) | 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 i1 = _SDL_SYS_GetTLSData() | 0;
 if (i1) {
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 >>> 0 < i6 >>> 0) i3 = 5;
 } else {
  i2 = 0;
  i3 = 5;
 }
 if ((i3 | 0) == 5) {
  i4 = i6 + 4 | 0;
  i1 = _SDL_realloc(i1, (i6 << 3) + 36 | 0) | 0;
  if (!i1) {
   i7 = _SDL_Error(0) | 0;
   STACKTOP = i8;
   return i7 | 0;
  }
  HEAP32[i1 >> 2] = i4;
  if (i2 >>> 0 < i4 >>> 0) {
   i3 = i1 + 4 | 0;
   do {
    HEAP32[i3 + (i2 << 3) >> 2] = 0;
    HEAP32[i3 + (i2 << 3) + 4 >> 2] = 0;
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != (i4 | 0));
  }
  if (_SDL_SYS_SetTLSData(i1) | 0) {
   i7 = -1;
   STACKTOP = i8;
   return i7 | 0;
  }
 }
 i6 = i6 + -1 | 0;
 HEAP32[i1 + 4 + (i6 << 3) >> 2] = i7;
 HEAP32[i1 + 4 + (i6 << 3) + 4 >> 2] = i5;
 i7 = 0;
 STACKTOP = i8;
 return i7 | 0;
}

function _SDL_utf8strlcpy(i5, i6, i1) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = _strlen(i6) | 0;
 i1 = i1 + -1 | 0;
 i1 = i4 >>> 0 < i1 >>> 0 ? i4 : i1;
 if (!i1) {
  i6 = 0;
  i5 = i5 + i6 | 0;
  HEAP8[i5 >> 0] = 0;
  return i6 | 0;
 }
 i3 = i1 + -1 | 0;
 i2 = HEAP8[i6 + i3 >> 0] | 0;
 L4 : do if ((i2 + 64 & 255) >= 53) {
  if (!((i2 & 255) > 191 | i2 << 24 >> 24 > -1 | (i3 | 0) == 0)) {
   L7 : do if ((i2 & -32) << 24 >> 24 == -64) {
    i4 = 2;
    i2 = i3;
   } else while (1) {
    if ((i2 & -16) << 24 >> 24 == -32) {
     i4 = 3;
     i2 = i3;
     break L7;
    }
    if ((i2 + 16 & 255) < 5) {
     i4 = 4;
     i2 = i3;
     break L7;
    }
    i3 = i3 + -1 | 0;
    if (!i3) break L4;
    i2 = HEAP8[i6 + i3 >> 0] | 0;
    if ((i2 & -32) << 24 >> 24 == -64) {
     i4 = 2;
     i2 = i3;
     break;
    }
   } while (0);
   i1 = (i1 - i2 | 0) == (i4 | 0) ? i1 : i2;
  }
 } else i1 = i3; while (0);
 _memcpy(i5 | 0, i6 | 0, i1 | 0) | 0;
 i6 = i1;
 i5 = i5 + i6 | 0;
 HEAP8[i5 >> 0] = 0;
 return i6 | 0;
}

function ___fwritex(i3, i4, i6) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i7 = 0;
 i1 = i6 + 16 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) if (!(___towrite(i6) | 0)) {
  i2 = HEAP32[i1 >> 2] | 0;
  i5 = 4;
 } else i1 = 0; else i5 = 4;
 L4 : do if ((i5 | 0) == 4) {
  i7 = i6 + 20 | 0;
  i5 = HEAP32[i7 >> 2] | 0;
  if ((i2 - i5 | 0) >>> 0 < i4 >>> 0) {
   i1 = FUNCTION_TABLE_iiii[HEAP32[i6 + 36 >> 2] & 63](i6, i3, i4) | 0;
   break;
  }
  L9 : do if ((HEAP8[i6 + 75 >> 0] | 0) > -1) {
   i1 = i4;
   while (1) {
    if (!i1) {
     i2 = i5;
     i1 = 0;
     break L9;
    }
    i2 = i1 + -1 | 0;
    if ((HEAP8[i3 + i2 >> 0] | 0) == 10) break; else i1 = i2;
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[i6 + 36 >> 2] & 63](i6, i3, i1) | 0) >>> 0 < i1 >>> 0) break L4;
   i4 = i4 - i1 | 0;
   i3 = i3 + i1 | 0;
   i2 = HEAP32[i7 >> 2] | 0;
  } else {
   i2 = i5;
   i1 = 0;
  } while (0);
  _memcpy(i2 | 0, i3 | 0, i4 | 0) | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + i4;
  i1 = i1 + i4 | 0;
 } while (0);
 return i1 | 0;
}

function _SDL_HasIntersection(i6, i7) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i8 + 8 | 0;
 i1 = i8;
 do if (i6) {
  if (!i7) {
   HEAP32[i2 >> 2] = 40586;
   _SDL_SetError(41366, i2) | 0;
   i1 = 0;
   break;
  }
  i1 = HEAP32[i6 + 8 >> 2] | 0;
  if (((((i1 | 0) >= 1 ? (i4 = HEAP32[i6 + 12 >> 2] | 0, (i4 | 0) >= 1) : 0) ? (i5 = HEAP32[i7 + 8 >> 2] | 0, (i5 | 0) >= 1) : 0) ? (i3 = HEAP32[i7 + 12 >> 2] | 0, (i3 | 0) >= 1) : 0) ? (i2 = HEAP32[i6 >> 2] | 0, i9 = i1 + i2 | 0, i1 = HEAP32[i7 >> 2] | 0, i5 = i5 + i1 | 0, (((i5 | 0) < (i9 | 0) ? i5 : i9) | 0) > (((i1 | 0) > (i2 | 0) ? i1 : i2) | 0)) : 0) {
   i1 = HEAP32[i6 + 4 >> 2] | 0;
   i6 = i4 + i1 | 0;
   i9 = HEAP32[i7 + 4 >> 2] | 0;
   i7 = i3 + i9 | 0;
   i1 = (((i7 | 0) < (i6 | 0) ? i7 : i6) | 0) > (((i9 | 0) > (i1 | 0) ? i9 : i1) | 0) & 1;
  } else i1 = 0;
 } else {
  HEAP32[i1 >> 2] = 40584;
  _SDL_SetError(41366, i1) | 0;
  i1 = 0;
 } while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function _BlitBto2Key(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i8 = HEAP32[i2 + 24 >> 2] | 0;
 i1 = HEAP32[i2 + 28 >> 2] | 0;
 i13 = HEAP32[i2 + 56 >> 2] | 0;
 i9 = HEAP32[i2 + 48 >> 2] | 0;
 i10 = (HEAP32[i2 + 16 >> 2] | 0) + i8 + ((i8 + 7 | 0) / -8 | 0) | 0;
 i11 = (HEAP32[i2 + 36 >> 2] | 0) / 2 | 0;
 if (!i1) return;
 i12 = (i8 | 0) > 0;
 i3 = HEAP32[i2 + 20 >> 2] | 0;
 i2 = HEAP32[i2 >> 2] | 0;
 while (1) {
  i1 = i1 + -1 | 0;
  if (i12) {
   i4 = 0;
   i6 = 0;
   i7 = i3;
   while (1) {
    if (!(i6 & 7)) {
     i5 = HEAP8[i2 >> 0] | 0;
     i2 = i2 + 1 | 0;
    } else i5 = i4;
    i4 = (i5 & 255) >>> 7 & 255;
    if ((i4 | 0) != (i13 | 0)) HEAP16[i7 >> 1] = HEAP16[i9 + (i4 << 1) >> 1] | 0;
    i6 = i6 + 1 | 0;
    if ((i6 | 0) == (i8 | 0)) break; else {
     i4 = (i5 & 255) << 1 & 255;
     i7 = i7 + 2 | 0;
    }
   }
   i3 = i3 + (i8 << 1) | 0;
  }
  if (!i1) break; else {
   i3 = i3 + (i11 << 1) | 0;
   i2 = i2 + i10 | 0;
  }
 }
 return;
}

function _BlitBto3Key(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i8 = HEAP32[i2 + 24 >> 2] | 0;
 i1 = HEAP32[i2 + 28 >> 2] | 0;
 i13 = HEAP32[i2 + 36 >> 2] | 0;
 i14 = HEAP32[i2 + 56 >> 2] | 0;
 i9 = HEAP32[i2 + 48 >> 2] | 0;
 i10 = (HEAP32[i2 + 16 >> 2] | 0) + i8 + ((i8 + 7 | 0) / -8 | 0) | 0;
 if (!i1) return;
 i11 = (i8 | 0) > 0;
 i12 = i8 * 3 | 0;
 i3 = HEAP32[i2 + 20 >> 2] | 0;
 i2 = HEAP32[i2 >> 2] | 0;
 while (1) {
  i1 = i1 + -1 | 0;
  if (i11) {
   i4 = 0;
   i6 = 0;
   i7 = i3;
   while (1) {
    if (!(i6 & 7)) {
     i5 = HEAP8[i2 >> 0] | 0;
     i2 = i2 + 1 | 0;
    } else i5 = i4;
    i4 = (i5 & 255) >>> 7 & 255;
    if ((i4 | 0) != (i14 | 0)) _SDL_memcpy(i7, i9 + (i4 << 2) | 0, 3) | 0;
    i6 = i6 + 1 | 0;
    if ((i6 | 0) == (i8 | 0)) break; else {
     i4 = (i5 & 255) << 1 & 255;
     i7 = i7 + 3 | 0;
    }
   }
   i3 = i3 + i12 | 0;
  }
  if (!i1) break; else {
   i3 = i3 + i13 | 0;
   i2 = i2 + i10 | 0;
  }
 }
 return;
}

function _GLES2_DestroyTexture(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = i4 + 316 | 0;
 i6 = HEAP32[i2 >> 2] | 0;
 i7 = i1 + 68 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((HEAP32[3491] | 0) != (i1 | 0)) {
  HEAP32[i6 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i4 + 188 >> 2] | 0, i1) | 0) >= 0) {
   HEAP32[3491] = HEAP32[i6 >> 2];
   _GLES2_UpdateViewport(i4) | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   i5 = 4;
  }
 } else {
  i3 = i6;
  i5 = 4;
 }
 if ((i5 | 0) == 4 ? (HEAP32[i3 + 4 >> 2] | 0) != 0 : 0) {
  i1 = i3 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 7]() | 0) != 0);
 }
 if (!i8) return;
 i2 = i6 + 64 | 0;
 FUNCTION_TABLE_vii[HEAP32[i2 >> 2] & 127](1, i8);
 i1 = i8 + 32 | 0;
 if (HEAP32[i1 >> 2] | 0) FUNCTION_TABLE_vii[HEAP32[i2 >> 2] & 127](1, i1);
 i1 = i8 + 36 | 0;
 if (HEAP32[i1 >> 2] | 0) FUNCTION_TABLE_vii[HEAP32[i2 >> 2] & 127](1, i1);
 _SDL_free(HEAP32[i8 + 16 >> 2] | 0);
 _SDL_free(i8);
 HEAP32[i7 >> 2] = 0;
 return;
}

function __ZN17GameObjectManager15checkCollisionsEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i7;
 i2 = HEAP32[i1 + 12 >> 2] | 0;
 i6 = HEAP32[i1 + 16 >> 2] | 0;
 if ((i2 | 0) == (i6 | 0)) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i4 = i1 + 4 | 0;
 L4 : while (1) {
  i3 = __ZN10GameObject11getVerticesEv(HEAP32[i4 >> 2] | 0) | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  i3 = HEAP32[i3 + 4 >> 2] | 0;
  if ((i1 | 0) != (i3 | 0)) do {
   i9 = __ZN10GameObject11getPositionEv(HEAP32[i2 >> 2] | 0) | 0;
   __ZNK5Vec2fmiERKS_(i5, i9, __ZN10GameObject11getPositionEv(HEAP32[i4 >> 2] | 0) | 0);
   d8 = +__ZN5Vec2f6lengthEv(i5);
   i1 = i1 + 8 | 0;
   if (d8 < +__ZN8Obstacle9getRadiusEv(HEAP32[i2 >> 2] | 0)) {
    i1 = 1;
    i2 = 8;
    break L4;
   }
  } while ((i1 | 0) != (i3 | 0));
  i2 = i2 + 8 | 0;
  if ((i2 | 0) == (i6 | 0)) {
   i1 = 0;
   i2 = 8;
   break;
  }
 }
 if ((i2 | 0) == 8) {
  STACKTOP = i7;
  return i1 | 0;
 }
 return 0;
}

function _BlitBto4Key(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i8 = HEAP32[i2 + 24 >> 2] | 0;
 i1 = HEAP32[i2 + 28 >> 2] | 0;
 i13 = HEAP32[i2 + 56 >> 2] | 0;
 i9 = HEAP32[i2 + 48 >> 2] | 0;
 i10 = (HEAP32[i2 + 16 >> 2] | 0) + i8 + ((i8 + 7 | 0) / -8 | 0) | 0;
 i11 = (HEAP32[i2 + 36 >> 2] | 0) / 4 | 0;
 if (!i1) return;
 i12 = (i8 | 0) > 0;
 i3 = HEAP32[i2 + 20 >> 2] | 0;
 i2 = HEAP32[i2 >> 2] | 0;
 while (1) {
  i1 = i1 + -1 | 0;
  if (i12) {
   i4 = 0;
   i6 = 0;
   i7 = i3;
   while (1) {
    if (!(i6 & 7)) {
     i5 = HEAP8[i2 >> 0] | 0;
     i2 = i2 + 1 | 0;
    } else i5 = i4;
    i4 = (i5 & 255) >>> 7 & 255;
    if ((i4 | 0) != (i13 | 0)) HEAP32[i7 >> 2] = HEAP32[i9 + (i4 << 2) >> 2];
    i6 = i6 + 1 | 0;
    if ((i6 | 0) == (i8 | 0)) break; else {
     i4 = (i5 & 255) << 1 & 255;
     i7 = i7 + 4 | 0;
    }
   }
   i3 = i3 + (i8 << 2) | 0;
  }
  if (!i1) break; else {
   i3 = i3 + (i11 << 2) | 0;
   i2 = i2 + i10 | 0;
  }
 }
 return;
}

function _SDL_FirstAudioFormat(i1) {
 i1 = i1 | 0;
 HEAP32[1583] = 0;
 if (i1 << 16 >> 16 != 8) {
  HEAP32[1583] = 1;
  if (i1 << 16 >> 16 != -32760) {
   HEAP32[1583] = 2;
   if (i1 << 16 >> 16 != -32752) {
    HEAP32[1583] = 3;
    if (i1 << 16 >> 16 != -28656) {
     HEAP32[1583] = 4;
     if (i1 << 16 >> 16 != 16) {
      HEAP32[1583] = 5;
      if (i1 << 16 >> 16 != 4112) {
       HEAP32[1583] = 6;
       if (i1 << 16 >> 16 != -32736) {
        HEAP32[1583] = 7;
        if (i1 << 16 >> 16 != -28640) {
         HEAP32[1583] = 8;
         if (i1 << 16 >> 16 != -32480) {
          HEAP32[1583] = 9;
          if (i1 << 16 >> 16 == -28384) i1 = 9; else {
           HEAP32[1583] = 10;
           HEAP32[1584] = 0;
           i1 = 0;
           return i1 | 0;
          }
         } else i1 = 8;
        } else i1 = 7;
       } else i1 = 6;
      } else i1 = 5;
     } else i1 = 4;
    } else i1 = 3;
   } else i1 = 2;
  } else i1 = 1;
 } else i1 = 0;
 HEAP32[1584] = 1;
 i1 = HEAP16[33900 + (i1 * 20 | 0) >> 1] | 0;
 return i1 | 0;
}

function _vsnprintf(i3, i1, i10, i8) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i10 = i10 | 0;
 i8 = i8 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i2 = i11 + 112 | 0;
 i9 = i11;
 i4 = i9;
 i5 = 23212;
 i6 = i4 + 112 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
  i4 = i4 + 4 | 0;
  i5 = i5 + 4 | 0;
 } while ((i4 | 0) < (i6 | 0));
 if ((i1 + -1 | 0) >>> 0 > 2147483646) if (!i1) {
  i1 = 1;
  i7 = 4;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 75;
  i1 = -1;
 } else {
  i2 = i3;
  i7 = 4;
 }
 if ((i7 | 0) == 4) {
  i7 = -2 - i2 | 0;
  i7 = i1 >>> 0 > i7 >>> 0 ? i7 : i1;
  HEAP32[i9 + 48 >> 2] = i7;
  i3 = i9 + 20 | 0;
  HEAP32[i3 >> 2] = i2;
  HEAP32[i9 + 44 >> 2] = i2;
  i1 = i2 + i7 | 0;
  i2 = i9 + 16 | 0;
  HEAP32[i2 >> 2] = i1;
  HEAP32[i9 + 28 >> 2] = i1;
  i1 = _vfprintf(i9, i10, i8) | 0;
  if (i7) {
   i10 = HEAP32[i3 >> 2] | 0;
   HEAP8[i10 + (((i10 | 0) == (HEAP32[i2 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
  }
 }
 STACKTOP = i11;
 return i1 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 i14 = i6 + 8 | 0;
 i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i14 >> 2] | 0) + 20 >> 2] & 127](i14) | 0;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 i12 = HEAP8[i14 >> 0] | 0;
 i13 = (i12 & 1) == 0;
 i2 = i14 + 4 | 0;
 i1 = i13 ? i2 : HEAP32[i14 + 8 >> 2] | 0;
 i2 = i1 + ((i13 ? (i12 & 255) >>> 1 : HEAP32[i2 >> 2] | 0) << 2) | 0;
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i6, i9, i8, i4, i3, i5, i1, i2) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _SDL_ConvertAudio(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i2 + 16 | 0;
 if (!(HEAPU8[i1 >> 0] | HEAPU8[i1 + 1 >> 0] << 8 | HEAPU8[i1 + 2 >> 0] << 16 | HEAPU8[i1 + 3 >> 0] << 24)) {
  _SDL_SetError(36604, i3) | 0;
  i2 = -1;
  STACKTOP = i3;
  return i2 | 0;
 }
 i4 = i2 + 20 | 0;
 i4 = HEAPU8[i4 >> 0] | HEAPU8[i4 + 1 >> 0] << 8 | HEAPU8[i4 + 2 >> 0] << 16 | HEAPU8[i4 + 3 >> 0] << 24;
 i1 = i2 + 24 | 0;
 HEAP8[i1 >> 0] = i4;
 HEAP8[i1 + 1 >> 0] = i4 >> 8;
 HEAP8[i1 + 2 >> 0] = i4 >> 16;
 HEAP8[i1 + 3 >> 0] = i4 >> 24;
 i1 = i2 + 40 | 0;
 i1 = HEAPU8[i1 >> 0] | HEAPU8[i1 + 1 >> 0] << 8 | HEAPU8[i1 + 2 >> 0] << 16 | HEAPU8[i1 + 3 >> 0] << 24;
 if (!i1) {
  i4 = 0;
  STACKTOP = i3;
  return i4 | 0;
 }
 i4 = i2 + 80 | 0;
 HEAP8[i4 >> 0] = 0;
 HEAP8[i4 + 1 >> 0] = 0;
 HEAP8[i4 + 2 >> 0] = 0;
 HEAP8[i4 + 3 >> 0] = 0;
 i4 = i2 + 4 | 0;
 FUNCTION_TABLE_vii[i1 & 127](i2, HEAPU8[i4 >> 0] | HEAPU8[i4 + 1 >> 0] << 8);
 i4 = 0;
 STACKTOP = i3;
 return i4 | 0;
}

function _sift(i3, i13, i10, i1, i11) {
 i3 = i3 | 0;
 i13 = i13 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i11 = i11 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i12 = i14;
 HEAP32[i12 >> 2] = i3;
 L1 : do if ((i1 | 0) > 1) {
  i9 = 0 - i13 | 0;
  i2 = i1;
  i4 = i3;
  i6 = i3;
  i7 = 1;
  while (1) {
   i3 = i4 + i9 | 0;
   i8 = i2 + -2 | 0;
   i5 = i4 + (0 - ((HEAP32[i11 + (i8 << 2) >> 2] | 0) + i13)) | 0;
   if ((FUNCTION_TABLE_iii[i10 & 63](i6, i5) | 0) > -1 ? (FUNCTION_TABLE_iii[i10 & 63](i6, i3) | 0) > -1 : 0) {
    i1 = i7;
    break L1;
   }
   i1 = i7 + 1 | 0;
   i4 = i12 + (i7 << 2) | 0;
   if ((FUNCTION_TABLE_iii[i10 & 63](i5, i3) | 0) > -1) {
    HEAP32[i4 >> 2] = i5;
    i3 = i5;
    i2 = i2 + -1 | 0;
   } else {
    HEAP32[i4 >> 2] = i3;
    i2 = i8;
   }
   if ((i2 | 0) <= 1) break L1;
   i4 = i3;
   i6 = HEAP32[i12 >> 2] | 0;
   i7 = i1;
  }
 } else i1 = 1; while (0);
 _cycle(i13, i12, i1);
 STACKTOP = i14;
 return;
}
function _SDL_AddVideoDisplay(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i10;
 i1 = HEAP32[3256] | 0;
 i1 = _SDL_realloc(HEAP32[i1 + 240 >> 2] | 0, ((HEAP32[i1 + 236 >> 2] | 0) * 68 | 0) + 68 | 0) | 0;
 if (!i1) {
  _SDL_Error(0) | 0;
  i9 = -1;
  STACKTOP = i10;
  return i9 | 0;
 }
 i2 = HEAP32[3256] | 0;
 i8 = i2 + 236 | 0;
 i7 = HEAP32[i8 >> 2] | 0;
 HEAP32[i8 >> 2] = i7 + 1;
 i8 = i1 + (i7 * 68 | 0) | 0;
 i4 = i8;
 i5 = i3;
 i6 = i4 + 68 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
  i4 = i4 + 4 | 0;
  i5 = i5 + 4 | 0;
 } while ((i4 | 0) < (i6 | 0));
 HEAP32[i1 + (i7 * 68 | 0) + 60 >> 2] = i2;
 HEAP32[(HEAP32[3256] | 0) + 240 >> 2] = i1;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!i1) {
  _SDL_itoa(i7, i9, 10) | 0;
  HEAP32[i8 >> 2] = _SDL_strdup(i9) | 0;
  i9 = i7;
  STACKTOP = i10;
  return i9 | 0;
 } else {
  HEAP32[i8 >> 2] = _SDL_strdup(i1) | 0;
  i9 = i7;
  STACKTOP = i10;
  return i9 | 0;
 }
 return 0;
}

function _SDL_RenderDrawLine(i2, i4, i6, i5, i7) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i1 = 0, i3 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i8;
 i1 = i8 + 8 | 0;
 HEAP32[i1 >> 2] = i4;
 HEAP32[i1 + 4 >> 2] = i6;
 HEAP32[i1 + 8 >> 2] = i5;
 HEAP32[i1 + 12 >> 2] = i7;
 if ((i2 | 0) != 0 ? (HEAP32[i2 >> 2] | 0) == 37791 : 0) {
  if (HEAP32[i2 + 192 >> 2] | 0) {
   i7 = 0;
   STACKTOP = i8;
   return i7 | 0;
  }
  if (!(+HEAPF32[i2 + 284 >> 2] != 1.0) ? !(+HEAPF32[i2 + 288 >> 2] != 1.0) : 0) {
   i3 = STACKTOP;
   STACKTOP = STACKTOP + 16 | 0;
   HEAPF32[i3 >> 2] = +(i4 | 0);
   HEAPF32[i3 + 4 >> 2] = +(i6 | 0);
   HEAPF32[i3 + 8 >> 2] = +(i5 | 0);
   HEAPF32[i3 + 12 >> 2] = +(i7 | 0);
   i7 = FUNCTION_TABLE_iiii[HEAP32[i2 + 64 >> 2] & 63](i2, i3, 2) | 0;
   STACKTOP = i8;
   return i7 | 0;
  }
  i7 = _RenderDrawLinesWithRects(i2, i1, 2) | 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 _SDL_SetError(37792, i3) | 0;
 i7 = -1;
 STACKTOP = i8;
 return i7 | 0;
}

function _SDL_GL_LoadLibrary(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i5 + 16 | 0;
 i2 = i5 + 8 | 0;
 i1 = HEAP32[3256] | 0;
 if (!i1) {
  i4 = _SDL_SetError(41242, i5) | 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 do if (!(HEAP32[i1 + 356 >> 2] | 0)) {
  i2 = HEAP32[i1 + 136 >> 2] | 0;
  if (!i2) {
   i4 = _SDL_SetError(41464, i4) | 0;
   STACKTOP = i5;
   return i4 | 0;
  }
  i2 = FUNCTION_TABLE_iii[i2 & 63](i1, i3) | 0;
  i1 = HEAP32[3256] | 0;
  if (i2) {
   i3 = HEAP32[i1 + 144 >> 2] | 0;
   if (!i3) {
    i4 = i2;
    STACKTOP = i5;
    return i4 | 0;
   }
   FUNCTION_TABLE_vi[i3 & 511](i1);
   i4 = i2;
   STACKTOP = i5;
   return i4 | 0;
  }
 } else if (i3) {
  if (!(_SDL_strcmp(i3, i1 + 360 | 0) | 0)) {
   i1 = HEAP32[3256] | 0;
   break;
  }
  i4 = _SDL_SetError(41529, i2) | 0;
  STACKTOP = i5;
  return i4 | 0;
 } while (0);
 i4 = i1 + 356 | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 i4 = 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _Emscripten_HandleMouseFocus(i5, i1, i6) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 i9 = i7 + 16 | 0;
 i4 = i7 + 8 | 0;
 i3 = i7;
 i2 = HEAP32[i1 + 60 >> 2] | 0;
 i1 = HEAP32[i1 + 64 >> 2] | 0;
 i8 = _emscripten_get_pointerlock_status(i9 | 0) | 0;
 if ((HEAP32[i9 >> 2] | 0) == 0 | (i8 | 0) != 0) {
  _emscripten_get_element_css_size(0, i4 | 0, i3 | 0) | 0;
  i9 = HEAP32[i6 + 4 >> 2] | 0;
  _SDL_SendMouseMotion(i9, 0, 0, ~~(+(i2 | 0) * (+(HEAP32[i9 + 24 >> 2] | 0) / +HEAPF64[i4 >> 3])), ~~(+(i1 | 0) * (+(HEAP32[i9 + 28 >> 2] | 0) / +HEAPF64[i3 >> 3]))) | 0;
 }
 if ((i5 | 0) != 33) {
  i9 = 0;
  _SDL_SetMouseFocus(i9);
  i9 = _SDL_EventState(512, -1) | 0;
  i9 = i9 << 24 >> 24 == 1;
  i9 = i9 & 1;
  STACKTOP = i7;
  return i9 | 0;
 }
 i9 = HEAP32[i6 + 4 >> 2] | 0;
 _SDL_SetMouseFocus(i9);
 i9 = _SDL_EventState(512, -1) | 0;
 i9 = i9 << 24 >> 24 == 1;
 i9 = i9 & 1;
 STACKTOP = i7;
 return i9 | 0;
}

function _close_audio_device(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 HEAP32[i2 + 136 >> 2] = 0;
 HEAP32[i2 + 140 >> 2] = 1;
 i1 = HEAP32[i2 + 160 >> 2] | 0;
 if (i1) _SDL_WaitThread(i1, 0);
 i1 = HEAP32[i2 + 156 >> 2] | 0;
 if (i1) _SDL_DestroyMutex(i1);
 _SDL_free(HEAP32[i2 + 152 >> 2] | 0);
 i1 = i2 + 28 | 0;
 if (HEAPU8[i1 >> 0] | HEAPU8[i1 + 1 >> 0] << 8 | HEAPU8[i1 + 2 >> 0] << 16 | HEAPU8[i1 + 3 >> 0] << 24) {
  i1 = i2 + 44 | 0;
  _SDL_free(HEAPU8[i1 >> 0] | HEAPU8[i1 + 1 >> 0] << 8 | HEAPU8[i1 + 2 >> 0] << 16 | HEAPU8[i1 + 3 >> 0] << 24);
 }
 i1 = i2 + 148 | 0;
 if (HEAP32[i1 >> 2] | 0) {
  FUNCTION_TABLE_vi[HEAP32[6180 >> 2] & 511](i2);
  HEAP32[i1 >> 2] = 0;
 }
 i1 = HEAP32[i2 + 168 >> 2] | 0;
 if (i1) do {
  i3 = i1;
  i1 = HEAP32[i1 + 8200 >> 2] | 0;
  _SDL_free(i3);
 } while ((i1 | 0) != 0);
 i1 = HEAP32[i2 + 176 >> 2] | 0;
 if (!i1) {
  _SDL_free(i2);
  return;
 }
 do {
  i3 = i1;
  i1 = HEAP32[i1 + 8200 >> 2] | 0;
  _SDL_free(i3);
 } while ((i1 | 0) != 0);
 _SDL_free(i2);
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 i12 = i6 + 8 | 0;
 i12 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] & 127](i12) | 0;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP8[i12 >> 0] | 0;
 i13 = (i2 & 1) == 0;
 i1 = i13 ? i12 + 1 | 0 : HEAP32[i12 + 8 >> 2] | 0;
 i2 = i1 + (i13 ? (i2 & 255) >>> 1 : HEAP32[i12 + 4 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i6, i9, i8, i4, i3, i5, i1, i2) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _SDL_RenderSetViewport(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i4;
 if ((i2 | 0) != 0 ? (HEAP32[i2 >> 2] | 0) == 37791 : 0) {
  if (!i1) {
   HEAP32[i2 + 212 >> 2] = 0;
   HEAP32[i2 + 216 >> 2] = 0;
   if ((_SDL_GetRendererOutputSize(i2, i2 + 220 | 0, i2 + 224 | 0) | 0) < 0) {
    i3 = -1;
    STACKTOP = i4;
    return i3 | 0;
   }
  } else {
   i5 = i2 + 284 | 0;
   HEAP32[i2 + 212 >> 2] = ~~+_SDL_floor(+(HEAP32[i1 >> 2] | 0) * +HEAPF32[i5 >> 2]);
   i3 = i2 + 288 | 0;
   HEAP32[i2 + 216 >> 2] = ~~+_SDL_floor(+(HEAP32[i1 + 4 >> 2] | 0) * +HEAPF32[i3 >> 2]);
   HEAP32[i2 + 220 >> 2] = ~~+_SDL_ceil(+(HEAP32[i1 + 8 >> 2] | 0) * +HEAPF32[i5 >> 2]);
   HEAP32[i2 + 224 >> 2] = ~~+_SDL_ceil(+(HEAP32[i1 + 12 >> 2] | 0) * +HEAPF32[i3 >> 2]);
  }
  i5 = FUNCTION_TABLE_ii[HEAP32[i2 + 48 >> 2] & 127](i2) | 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 _SDL_SetError(37792, i3) | 0;
 i5 = -1;
 STACKTOP = i4;
 return i5 | 0;
}

function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc(i7, i8, i1, i2, i6, i3, i4) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i5 = i9 + 4 | 0;
 i1 = i9;
 HEAP32[i1 >> 2] = i5 + 100;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc(i7 + 8 | 0, i5, i1, i6, i3, i4);
 i6 = HEAP32[i1 >> 2] | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 if ((i5 | 0) != (i6 | 0)) do {
  i4 = HEAP8[i5 >> 0] | 0;
  do if (i1) {
   i2 = i1 + 24 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i1 + 28 >> 2] | 0)) {
    i8 = (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] & 63](i1, i4 & 255) | 0) == -1;
    i1 = i8 ? 0 : i1;
    break;
   } else {
    HEAP32[i2 >> 2] = i3 + 1;
    HEAP8[i3 >> 0] = i4;
    break;
   }
  } else i1 = 0; while (0);
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) != (i6 | 0));
 STACKTOP = i9;
 return i1 | 0;
}

function _Emscripten_HandleResize(i1, i2, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 var d3 = 0.0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, d9 = 0.0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i7 + 8 | 0;
 i5 = i7;
 i2 = i8 + 4 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((HEAP32[i1 + 48 >> 2] & 4129 | 0) != 32) {
  STACKTOP = i7;
  return 0;
 }
 d4 = +(HEAP32[i1 + 24 >> 2] | 0);
 HEAPF64[i6 >> 3] = d4;
 d3 = +(HEAP32[i1 + 28 >> 2] | 0);
 HEAPF64[i5 >> 3] = d3;
 i1 = i8 + 16 | 0;
 if (HEAP32[i1 >> 2] | 0) {
  _emscripten_get_element_css_size(0, i6 | 0, i5 | 0) | 0;
  d4 = +HEAPF64[i6 >> 3];
  d3 = +HEAPF64[i5 >> 3];
 }
 i8 = i8 + 12 | 0;
 d9 = +HEAPF32[i8 >> 2];
 _emscripten_set_canvas_size(~~(d4 * d9) | 0, ~~(d3 * d9) | 0);
 if ((HEAP32[i1 >> 2] | 0) == 0 ? +HEAPF32[i8 >> 2] != 1.0 : 0) _emscripten_set_element_css_size(0, +(+HEAPF64[i6 >> 3]), +(+HEAPF64[i5 >> 3])) | 0;
 _SDL_SendWindowEvent(HEAP32[i2 >> 2] | 0, 5, ~~+HEAPF64[i6 >> 3], ~~+HEAPF64[i5 >> 3]) | 0;
 STACKTOP = i7;
 return 0;
}

function _SDL_SetKeyboardFocus(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[1851] | 0;
 i3 = (i5 | 0) != 0;
 if (!(i3 | (i1 | 0) == 0)) {
  i1 = 0;
  do {
   if ((HEAP8[7410 + i1 >> 0] | 0) == 1) _SDL_SendKeyboardKey(0, i1) | 0;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != 512);
  i1 = HEAP32[1851] | 0;
 }
 if (!((i1 | 0) == 0 | (i1 | 0) == (i5 | 0))) {
  if (HEAP32[i1 + 48 >> 2] & 16384) {
   _SDL_CaptureMouse(0) | 0;
   i1 = HEAP32[1851] | 0;
  }
  _SDL_SendWindowEvent(i1, 13, 0, 0) | 0;
  if (((_SDL_EventState(771, -1) | 0) << 24 >> 24 != 0 ? (i2 = _SDL_GetVideoDevice() | 0, (i2 | 0) != 0) : 0) ? (i4 = HEAP32[i2 + 188 >> 2] | 0, (i4 | 0) != 0) : 0) FUNCTION_TABLE_vi[i4 & 511](i2);
 }
 HEAP32[1851] = i5;
 if (!i3) return;
 _SDL_SendWindowEvent(i5, 12, 0, 0) | 0;
 if (!((_SDL_EventState(771, -1) | 0) << 24 >> 24)) return;
 i1 = _SDL_GetVideoDevice() | 0;
 if (!i1) return;
 i2 = HEAP32[i1 + 184 >> 2] | 0;
 if (!i2) return;
 FUNCTION_TABLE_vi[i2 & 511](i1);
 return;
}

function _SDL_GetRendererOutputSize(i3, i6, i4) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i8 + 16 | 0;
 i2 = i8 + 8 | 0;
 i1 = i8;
 do if ((i3 | 0) != 0 ? (HEAP32[i3 >> 2] | 0) == 37791 : 0) {
  i1 = HEAP32[i3 + 304 >> 2] | 0;
  if (!i1) {
   i1 = HEAP32[i3 + 8 >> 2] | 0;
   if (i1) {
    i1 = FUNCTION_TABLE_iiii[i1 & 63](i3, i6, i4) | 0;
    break;
   }
   i1 = HEAP32[i3 + 188 >> 2] | 0;
   if (!i1) {
    i1 = _SDL_SetError(37847, i5) | 0;
    break;
   } else {
    _SDL_GetWindowSize(i1, i6, i4);
    i1 = 0;
    break;
   }
  }
  if ((HEAP32[i1 >> 2] | 0) != 37830) {
   _SDL_SetError(37831, i2) | 0;
   i1 = -1;
   break;
  }
  if (i6) HEAP32[i6 >> 2] = HEAP32[i1 + 12 >> 2];
  if (!i4) i1 = 0; else {
   HEAP32[i4 >> 2] = HEAP32[i1 + 16 >> 2];
   i1 = 0;
  }
 } else i7 = 3; while (0);
 if ((i7 | 0) == 3) {
  _SDL_SetError(37792, i1) | 0;
  i1 = -1;
 }
 STACKTOP = i8;
 return i1 | 0;
}

function _Emscripten_CreateWindowFramebuffer(i1, i3, i5, i7, i6) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i2 = 0, i4 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i13 = i4 + 24 | 0;
 i12 = i4 + 20 | 0;
 i11 = i4 + 16 | 0;
 i10 = i4 + 12 | 0;
 i9 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i1 = i4;
 i2 = (HEAP32[i3 + 136 >> 2] | 0) + 8 | 0;
 _SDL_FreeSurface(HEAP32[i2 >> 2] | 0);
 _SDL_PixelFormatEnumToMasks(374740996, i11, i10, i9, i8, i1) | 0;
 _SDL_GetWindowSize(i3, i13, i12);
 i1 = _SDL_CreateRGBSurface(0, HEAP32[i13 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0;
 if (!i1) {
  i13 = -1;
  STACKTOP = i4;
  return i13 | 0;
 }
 HEAP32[i2 >> 2] = i1;
 HEAP32[i5 >> 2] = 374740996;
 HEAP32[i7 >> 2] = HEAP32[i1 + 20 >> 2];
 HEAP32[i6 >> 2] = HEAP32[i1 + 16 >> 2];
 i13 = 0;
 STACKTOP = i4;
 return i13 | 0;
}

function _Emscripten_SetWindowFullscreen(i1, i4, i2, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i8;
 i6 = HEAP32[i4 + 136 >> 2] | 0;
 if (!i6) {
  STACKTOP = i8;
  return;
 }
 if (!i3) {
  _emscripten_exit_fullscreen() | 0;
  STACKTOP = i8;
  return;
 }
 i2 = i4 + 48 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i4 = i3 & 4097;
 i1 = (i4 | 0) == 4097;
 i5 = i1 & 1;
 HEAP32[i7 >> 2] = i1 ? 1 : 2;
 do if (i1) {
  i1 = i7 + 4 | 0;
  if (!(i3 & 8192)) {
   HEAP32[i1 >> 2] = 1;
   break;
  } else {
   HEAP32[i1 >> 2] = 2;
   break;
  }
 } else HEAP32[i7 + 4 >> 2] = 0; while (0);
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 51;
 HEAP32[i7 + 16 >> 2] = i6;
 HEAP32[i6 + 20 >> 2] = i4;
 HEAP32[i6 + 24 >> 2] = i5;
 if ((_emscripten_request_fullscreen_strategy(0, 1, i7 | 0) | 0) >>> 0 <= 1) {
  STACKTOP = i8;
  return;
 }
 HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -4098;
 STACKTOP = i8;
 return;
}

function ___shgetc(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i2 = i6 + 104 | 0;
 i5 = HEAP32[i2 >> 2] | 0;
 if ((i5 | 0) != 0 ? (HEAP32[i6 + 108 >> 2] | 0) >= (i5 | 0) : 0) i7 = 4; else {
  i1 = ___uflow(i6) | 0;
  if ((i1 | 0) >= 0) {
   i4 = HEAP32[i2 >> 2] | 0;
   i2 = i6 + 8 | 0;
   if (i4) {
    i3 = HEAP32[i2 >> 2] | 0;
    i5 = HEAP32[i6 + 4 >> 2] | 0;
    i2 = i3;
    i4 = i4 - (HEAP32[i6 + 108 >> 2] | 0) + -1 | 0;
    if ((i2 - i5 | 0) > (i4 | 0)) HEAP32[i6 + 100 >> 2] = i5 + i4; else i7 = 9;
   } else {
    i3 = HEAP32[i2 >> 2] | 0;
    i2 = i3;
    i7 = 9;
   }
   if ((i7 | 0) == 9) HEAP32[i6 + 100 >> 2] = i2;
   i2 = HEAP32[i6 + 4 >> 2] | 0;
   if (i3) {
    i6 = i6 + 108 | 0;
    HEAP32[i6 >> 2] = i3 + 1 - i2 + (HEAP32[i6 >> 2] | 0);
   }
   i2 = i2 + -1 | 0;
   if ((HEAPU8[i2 >> 0] | 0 | 0) != (i1 | 0)) HEAP8[i2 >> 0] = i1;
  } else i7 = 4;
 }
 if ((i7 | 0) == 4) {
  HEAP32[i6 + 100 >> 2] = 0;
  i1 = -1;
 }
 return i1 | 0;
}

function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc(i6, i7, i1, i2, i5, i3, i4) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 i2 = i8 + 8 | 0;
 i1 = i8;
 HEAP32[i1 >> 2] = i2 + 400;
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc(i6 + 8 | 0, i2, i1, i5, i3, i4);
 i6 = HEAP32[i1 >> 2] | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if ((i2 | 0) != (i6 | 0)) {
  i5 = i2;
  do {
   i2 = HEAP32[i5 >> 2] | 0;
   if (!i1) i1 = 0; else {
    i3 = i1 + 24 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i1 + 28 >> 2] | 0)) i2 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] & 63](i1, i2) | 0; else {
     HEAP32[i3 >> 2] = i4 + 4;
     HEAP32[i4 >> 2] = i2;
    }
    i1 = (i2 | 0) == -1 ? 0 : i1;
   }
   i5 = i5 + 4 | 0;
  } while ((i5 | 0) != (i6 | 0));
 }
 STACKTOP = i8;
 return i1 | 0;
}

function _SDL_DUMMY_CreateWindowFramebuffer(i1, i6, i3, i5, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i2 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i12 = i2 + 24 | 0;
 i11 = i2 + 20 | 0;
 i10 = i2 + 16 | 0;
 i9 = i2 + 12 | 0;
 i8 = i2 + 8 | 0;
 i7 = i2 + 4 | 0;
 i1 = i2;
 _SDL_FreeSurface(_SDL_GetWindowData(i6, 43637) | 0);
 _SDL_PixelFormatEnumToMasks(370546692, i10, i9, i8, i7, i1) | 0;
 _SDL_GetWindowSize(i6, i12, i11);
 i1 = _SDL_CreateRGBSurface(0, HEAP32[i12 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0;
 if (!i1) {
  i12 = -1;
  STACKTOP = i2;
  return i12 | 0;
 }
 _SDL_SetWindowData(i6, 43637, i1) | 0;
 HEAP32[i3 >> 2] = 370546692;
 HEAP32[i5 >> 2] = HEAP32[i1 + 20 >> 2];
 HEAP32[i4 >> 2] = HEAP32[i1 + 16 >> 2];
 i12 = 0;
 STACKTOP = i2;
 return i12 | 0;
}

function _SDL_BlitCopy(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = Math_imul(HEAPU8[(HEAP32[i1 + 44 >> 2] | 0) + 9 >> 0] | 0, HEAP32[i1 + 24 >> 2] | 0) | 0;
 i2 = HEAP32[i1 + 28 >> 2] | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i3 = HEAP32[i1 + 20 >> 2] | 0;
 i6 = HEAP32[i1 + 12 >> 2] | 0;
 i5 = HEAP32[i1 + 32 >> 2] | 0;
 if (i4 >>> 0 < i3 >>> 0) if (i3 >>> 0 < (i4 + (Math_imul(i6, i2) | 0) | 0) >>> 0) i1 = 5; else i1 = 4; else if (i4 >>> 0 < (i3 + (Math_imul(i5, i2) | 0) | 0) >>> 0) i1 = 5; else i1 = 4;
 if ((i1 | 0) == 4) {
  if (!i2) return; else i1 = i4;
  while (1) {
   i2 = i2 + -1 | 0;
   _SDL_memcpy(i3, i1, i7) | 0;
   if (!i2) break; else {
    i3 = i3 + i5 | 0;
    i1 = i1 + i6 | 0;
   }
  }
  return;
 } else if ((i1 | 0) == 5) {
  if (!i2) return; else i1 = i4;
  while (1) {
   i2 = i2 + -1 | 0;
   _SDL_memmove(i3, i1, i7) | 0;
   if (!i2) break; else {
    i3 = i3 + i5 | 0;
    i1 = i1 + i6 | 0;
   }
  }
  return;
 }
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i7, i5) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i8;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i6, i7);
 L1 : do if (HEAP8[i6 >> 0] | 0) {
  i2 = HEAP32[i7 + ((HEAP32[(HEAP32[i7 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
  i3 = i2;
  do if (i2) {
   i4 = i3 + 24 | 0;
   i1 = HEAP32[i4 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 28 >> 2] | 0)) if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 52 >> 2] & 63](i3, i5 & 255) | 0) == -1) break; else break L1; else {
    HEAP32[i4 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = i5;
    break L1;
   }
  } while (0);
  i5 = i7 + ((HEAP32[(HEAP32[i7 >> 2] | 0) + -12 >> 2] | 0) + 16) | 0;
  HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 1;
 } while (0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i6);
 STACKTOP = i8;
 return i7 | 0;
}

function _SDL_GL_CreateContext(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = i5 + 16 | 0;
 i2 = i5 + 8 | 0;
 i1 = HEAP32[3256] | 0;
 if (!i1) {
  _SDL_SetError(41242, i5) | 0;
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 if ((i4 | 0) != 0 ? (HEAP32[i4 >> 2] | 0) == (i1 + 248 | 0) : 0) {
  if (!(HEAP32[i4 + 48 >> 2] & 2)) {
   _SDL_SetError(41647, i3) | 0;
   i4 = 0;
   STACKTOP = i5;
   return i4 | 0;
  }
  i1 = FUNCTION_TABLE_iii[HEAP32[i1 + 148 >> 2] & 63](i1, i4) | 0;
  if (!i1) {
   i4 = 0;
   STACKTOP = i5;
   return i4 | 0;
  }
  HEAP32[(HEAP32[3256] | 0) + 620 >> 2] = i4;
  HEAP32[(HEAP32[3256] | 0) + 624 >> 2] = i1;
  _SDL_TLSSet(HEAP32[(HEAP32[3256] | 0) + 628 >> 2] | 0, i4, 0) | 0;
  _SDL_TLSSet(HEAP32[(HEAP32[3256] | 0) + 632 >> 2] | 0, i1, 0) | 0;
  i4 = i1;
  STACKTOP = i5;
  return i4 | 0;
 }
 _SDL_SetError(41324, i2) | 0;
 i4 = 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _SDL_AllocFormat(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i4;
 i1 = HEAP32[3252] | 0;
 L1 : do if (i1) {
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) break;
   i1 = HEAP32[i1 + 40 >> 2] | 0;
   if (!i1) break L1;
  }
  i3 = i1 + 36 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  i3 = i1;
  STACKTOP = i4;
  return i3 | 0;
 } while (0);
 i1 = _SDL_malloc(44) | 0;
 if (!i1) {
  _SDL_Error(0) | 0;
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 if ((_SDL_InitFormat(i1, i2) | 0) < 0) {
  _SDL_free(i1);
  HEAP32[i3 >> 2] = 40439;
  _SDL_SetError(41366, i3) | 0;
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 if ((i2 | 0) == 0 | (i2 & -268435456 | 0) == 268435456 ? ((i2 >>> 24 & 15) + -1 | 0) >>> 0 < 3 : 0) {
  i3 = i1;
  STACKTOP = i4;
  return i3 | 0;
 }
 HEAP32[i1 + 40 >> 2] = HEAP32[3252];
 HEAP32[3252] = i1;
 i3 = i1;
 STACKTOP = i4;
 return i3 | 0;
}

function _SDL_GameControllerQuit() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[3036] | 0;
 if (i1) do {
  HEAP32[i1 + 4 >> 2] = 0;
  _SDL_JoystickClose(HEAP32[i1 >> 2] | 0);
  i2 = HEAP32[3036] | 0;
  L4 : do if (i2) {
   i3 = 0;
   while (1) {
    if ((i2 | 0) == (i1 | 0)) break;
    i3 = HEAP32[i2 + 896 >> 2] | 0;
    if (!i3) break L4; else {
     i4 = i2;
     i2 = i3;
     i3 = i4;
    }
   }
   i2 = HEAP32[i1 + 896 >> 2] | 0;
   if (!i3) {
    HEAP32[3036] = i2;
    break;
   } else {
    HEAP32[i3 + 896 >> 2] = i2;
    break;
   }
  } while (0);
  _SDL_free(i1);
  i1 = HEAP32[3036] | 0;
 } while ((i1 | 0) != 0);
 i1 = HEAP32[3038] | 0;
 if (!i1) {
  _SDL_DelEventWatch(21, 0);
  return;
 }
 do {
  HEAP32[3038] = HEAP32[i1 + 24 >> 2];
  _SDL_free(HEAP32[i1 + 16 >> 2] | 0);
  _SDL_free(HEAP32[i1 + 20 >> 2] | 0);
  _SDL_free(i1);
  i1 = HEAP32[3038] | 0;
 } while ((i1 | 0) != 0);
 _SDL_DelEventWatch(21, 0);
 return;
}

function _BlitBto2(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = HEAP32[i2 + 24 >> 2] | 0;
 i1 = HEAP32[i2 + 28 >> 2] | 0;
 i11 = (HEAP32[i2 + 36 >> 2] | 0) / 2 | 0;
 i8 = HEAP32[i2 + 48 >> 2] | 0;
 i9 = (HEAP32[i2 + 16 >> 2] | 0) + i7 + ((i7 + 7 | 0) / -8 | 0) | 0;
 if (!i1) return;
 i10 = (i7 | 0) > 0;
 i3 = HEAP32[i2 + 20 >> 2] | 0;
 i2 = HEAP32[i2 >> 2] | 0;
 while (1) {
  i1 = i1 + -1 | 0;
  if (i10) {
   i4 = 0;
   i5 = 0;
   i6 = i3;
   while (1) {
    if (!(i5 & 7)) {
     i4 = HEAP8[i2 >> 0] | 0;
     i2 = i2 + 1 | 0;
    }
    HEAP16[i6 >> 1] = HEAP16[i8 + (((i4 & 255) >>> 7 & 255) << 1) >> 1] | 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i7 | 0)) break; else {
     i4 = (i4 & 255) << 1 & 255;
     i6 = i6 + 2 | 0;
    }
   }
   i3 = i3 + (i7 << 1) | 0;
  }
  if (!i1) break; else {
   i3 = i3 + (i11 << 1) | 0;
   i2 = i2 + i9 | 0;
  }
 }
 return;
}

function _BlitBto4(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = HEAP32[i2 + 24 >> 2] | 0;
 i1 = HEAP32[i2 + 28 >> 2] | 0;
 i11 = (HEAP32[i2 + 36 >> 2] | 0) / 4 | 0;
 i8 = HEAP32[i2 + 48 >> 2] | 0;
 i9 = (HEAP32[i2 + 16 >> 2] | 0) + i7 + ((i7 + 7 | 0) / -8 | 0) | 0;
 if (!i1) return;
 i10 = (i7 | 0) > 0;
 i3 = HEAP32[i2 + 20 >> 2] | 0;
 i2 = HEAP32[i2 >> 2] | 0;
 while (1) {
  i1 = i1 + -1 | 0;
  if (i10) {
   i4 = 0;
   i5 = 0;
   i6 = i3;
   while (1) {
    if (!(i5 & 7)) {
     i4 = HEAP8[i2 >> 0] | 0;
     i2 = i2 + 1 | 0;
    }
    HEAP32[i6 >> 2] = HEAP32[i8 + (((i4 & 255) >>> 7 & 255) << 2) >> 2];
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i7 | 0)) break; else {
     i4 = (i4 & 255) << 1 & 255;
     i6 = i6 + 4 | 0;
    }
   }
   i3 = i3 + (i7 << 2) | 0;
  }
  if (!i1) break; else {
   i3 = i3 + (i11 << 2) | 0;
   i2 = i2 + i9 | 0;
  }
 }
 return;
}

function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji(i1, i6, i7, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i9;
 do if ((i1 | 0) != (i6 | 0)) {
  if ((HEAP8[i1 >> 0] | 0) == 45) {
   HEAP32[i7 >> 2] = 4;
   i1 = 0;
   break;
  }
  i4 = ___errno_location() | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = 0;
  i1 = _strtoull_l(i1, i8, i2, __ZNSt3__16__clocEv() | 0) | 0;
  i2 = tempRet0;
  i3 = HEAP32[i4 >> 2] | 0;
  if (!i3) HEAP32[i4 >> 2] = i5;
  if ((HEAP32[i8 >> 2] | 0) != (i6 | 0)) {
   HEAP32[i7 >> 2] = 4;
   i1 = 0;
   break;
  }
  if (i2 >>> 0 > 0 | (i2 | 0) == 0 & i1 >>> 0 > 65535 | (i3 | 0) == 34) {
   HEAP32[i7 >> 2] = 4;
   i1 = -1;
   break;
  } else {
   i1 = i1 & 65535;
   break;
  }
 } else {
  HEAP32[i7 >> 2] = 4;
  i1 = 0;
 } while (0);
 STACKTOP = i9;
 return i1 | 0;
}

function _SDL_SetPixelFormatPalette(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i5 + 8 | 0;
 if (!i1) {
  i4 = _SDL_SetError(40462, i5) | 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 i3 = (i4 | 0) != 0;
 if (i3 ? (HEAP32[i4 >> 2] | 0) != (1 << (HEAPU8[i1 + 8 >> 0] | 0) | 0) : 0) {
  i4 = _SDL_SetError(40509, i2) | 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 i1 = i1 + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) == (i4 | 0)) {
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 if ((i2 | 0) != 0 ? (i7 = i2 + 12 | 0, i6 = HEAP32[i7 >> 2] | 0, HEAP32[i7 >> 2] = i6 + -1, (i6 | 0) <= 1) : 0) {
  _SDL_free(HEAP32[i2 + 4 >> 2] | 0);
  _SDL_free(i2);
 }
 HEAP32[i1 >> 2] = i4;
 if (!i3) {
  i7 = 0;
  STACKTOP = i5;
  return i7 | 0;
 }
 i7 = i4 + 12 | 0;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 i7 = 0;
 STACKTOP = i5;
 return i7 | 0;
}

function _SDL_GameControllerGetButtonFromString(i1) {
 i1 = i1 | 0;
 if ((i1 | 0) != 0 ? (HEAP8[i1 >> 0] | 0) != 0 : 0) if (_SDL_strcasecmp(i1, 36918) | 0) if (_SDL_strcasecmp(i1, 36920) | 0) if (_SDL_strcasecmp(i1, 36922) | 0) if (_SDL_strcasecmp(i1, 36924) | 0) if (_SDL_strcasecmp(i1, 36926) | 0) if (_SDL_strcasecmp(i1, 36931) | 0) if (_SDL_strcasecmp(i1, 36937) | 0) if (_SDL_strcasecmp(i1, 36943) | 0) if (_SDL_strcasecmp(i1, 36953) | 0) if (_SDL_strcasecmp(i1, 36964) | 0) if (_SDL_strcasecmp(i1, 36977) | 0) if (_SDL_strcasecmp(i1, 36991) | 0) if (_SDL_strcasecmp(i1, 36996) | 0) if (!(_SDL_strcasecmp(i1, 37003) | 0)) i1 = 13; else {
  i1 = (_SDL_strcasecmp(i1, 37010) | 0) == 0;
  return (i1 ? 14 : -1) | 0;
 } else i1 = 12; else i1 = 11; else i1 = 10; else i1 = 9; else i1 = 8; else i1 = 7; else i1 = 6; else i1 = 5; else i1 = 4; else i1 = 3; else i1 = 2; else i1 = 1; else i1 = 0; else i1 = -1;
 return i1 | 0;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(i2, i5, i3, i1, i4) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 HEAP8[i5 + 53 >> 0] = 1;
 do if ((HEAP32[i5 + 4 >> 2] | 0) == (i1 | 0)) {
  HEAP8[i5 + 52 >> 0] = 1;
  i1 = i5 + 16 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (!i2) {
   HEAP32[i1 >> 2] = i3;
   HEAP32[i5 + 24 >> 2] = i4;
   HEAP32[i5 + 36 >> 2] = 1;
   if (!((i4 | 0) == 1 ? (HEAP32[i5 + 48 >> 2] | 0) == 1 : 0)) break;
   HEAP8[i5 + 54 >> 0] = 1;
   break;
  }
  if ((i2 | 0) != (i3 | 0)) {
   i4 = i5 + 36 | 0;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
   HEAP8[i5 + 54 >> 0] = 1;
   break;
  }
  i2 = i5 + 24 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == 2) {
   HEAP32[i2 >> 2] = i4;
   i1 = i4;
  }
  if ((i1 | 0) == 1 ? (HEAP32[i5 + 48 >> 2] | 0) == 1 : 0) HEAP8[i5 + 54 >> 0] = 1;
 } while (0);
 return;
}

function ___strchrnul(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i3 = i4 & 255;
 L1 : do if (!i3) i1 = i1 + (_strlen(i1) | 0) | 0; else {
  if (i1 & 3) {
   i2 = i4 & 255;
   do {
    i5 = HEAP8[i1 >> 0] | 0;
    if (i5 << 24 >> 24 == 0 ? 1 : i5 << 24 >> 24 == i2 << 24 >> 24) break L1;
    i1 = i1 + 1 | 0;
   } while ((i1 & 3 | 0) != 0);
  }
  i3 = Math_imul(i3, 16843009) | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  L10 : do if (!((i2 & -2139062144 ^ -2139062144) & i2 + -16843009)) do {
   i5 = i2 ^ i3;
   if ((i5 & -2139062144 ^ -2139062144) & i5 + -16843009) break L10;
   i1 = i1 + 4 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
  } while (((i2 & -2139062144 ^ -2139062144) & i2 + -16843009 | 0) == 0); while (0);
  i2 = i4 & 255;
  while (1) {
   i5 = HEAP8[i1 >> 0] | 0;
   if (i5 << 24 >> 24 == 0 ? 1 : i5 << 24 >> 24 == i2 << 24 >> 24) break; else i1 = i1 + 1 | 0;
  }
 } while (0);
 return i1 | 0;
}

function _SDL_FreeFormat(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i4;
 if (!i3) {
  HEAP32[i1 >> 2] = 40439;
  _SDL_SetError(41366, i1) | 0;
  STACKTOP = i4;
  return;
 }
 i1 = i3 + 36 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 >> 2] = i2 + -1;
 if ((i2 | 0) > 1) {
  STACKTOP = i4;
  return;
 }
 i1 = HEAP32[3252] | 0;
 L8 : do if ((i1 | 0) != (i3 | 0)) {
  if (i1) {
   i2 = i1;
   do {
    i1 = i2 + 40 | 0;
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) break L8;
   } while ((i2 | 0) != (i3 | 0));
   HEAP32[i1 >> 2] = HEAP32[i3 + 40 >> 2];
  }
 } else HEAP32[3252] = HEAP32[i3 + 40 >> 2]; while (0);
 i1 = HEAP32[i3 + 4 >> 2] | 0;
 if ((i1 | 0) != 0 ? (i5 = i1 + 12 | 0, i2 = HEAP32[i5 >> 2] | 0, HEAP32[i5 >> 2] = i2 + -1, (i2 | 0) <= 1) : 0) {
  _SDL_free(HEAP32[i1 + 4 >> 2] | 0);
  _SDL_free(i1);
 }
 _SDL_free(i3);
 STACKTOP = i4;
 return;
}

function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji(i1, i6, i7, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i9;
 do if ((i1 | 0) != (i6 | 0)) {
  i4 = ___errno_location() | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = 0;
  i1 = _strtoll_l(i1, i8, i2, __ZNSt3__16__clocEv() | 0) | 0;
  i2 = tempRet0;
  i3 = HEAP32[i4 >> 2] | 0;
  if (!i3) HEAP32[i4 >> 2] = i5;
  if ((HEAP32[i8 >> 2] | 0) != (i6 | 0)) {
   HEAP32[i7 >> 2] = 4;
   i2 = 0;
   i1 = 0;
   break;
  }
  if ((i3 | 0) == 34) {
   HEAP32[i7 >> 2] = 4;
   i8 = (i2 | 0) > 0 | (i2 | 0) == 0 & i1 >>> 0 > 0;
   tempRet0 = i8 ? 2147483647 : -2147483648;
   STACKTOP = i9;
   return (i8 ? -1 : 0) | 0;
  }
 } else {
  HEAP32[i7 >> 2] = 4;
  i2 = 0;
  i1 = 0;
 } while (0);
 tempRet0 = i2;
 STACKTOP = i9;
 return i1 | 0;
}

function _Emscripten_CreateDevice(i1) {
 i1 = i1 | 0;
 i1 = _SDL_calloc(1, 656) | 0;
 if (!i1) {
  _SDL_Error(0) | 0;
  i1 = 0;
  return i1 | 0;
 } else {
  _SDL_SetHint(46037, 46070) | 0;
  HEAP32[i1 + 4 >> 2] = 89;
  HEAP32[i1 + 8 >> 2] = 305;
  HEAP32[i1 + 20 >> 2] = 48;
  HEAP32[i1 + 176 >> 2] = 306;
  HEAP32[i1 + 24 >> 2] = 36;
  HEAP32[i1 + 32 >> 2] = 48;
  HEAP32[i1 + 44 >> 2] = 49;
  HEAP32[i1 + 100 >> 2] = 50;
  HEAP32[i1 + 84 >> 2] = 10;
  HEAP32[i1 + 104 >> 2] = 36;
  HEAP32[i1 + 108 >> 2] = 21;
  HEAP32[i1 + 112 >> 2] = 51;
  HEAP32[i1 + 136 >> 2] = 37;
  HEAP32[i1 + 140 >> 2] = 38;
  HEAP32[i1 + 144 >> 2] = 307;
  HEAP32[i1 + 148 >> 2] = 39;
  HEAP32[i1 + 152 >> 2] = 49;
  HEAP32[i1 + 160 >> 2] = 40;
  HEAP32[i1 + 164 >> 2] = 90;
  HEAP32[i1 + 168 >> 2] = 52;
  HEAP32[i1 + 172 >> 2] = 53;
  HEAP32[i1 + 156 >> 2] = 11;
  HEAP32[i1 + 652 >> 2] = 308;
  return i1 | 0;
 }
 return 0;
}

function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji(i1, i6, i7, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i9;
 do if ((i1 | 0) != (i6 | 0)) {
  if ((HEAP8[i1 >> 0] | 0) == 45) {
   HEAP32[i7 >> 2] = 4;
   i1 = 0;
   break;
  }
  i4 = ___errno_location() | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = 0;
  i1 = _strtoull_l(i1, i8, i2, __ZNSt3__16__clocEv() | 0) | 0;
  i2 = tempRet0;
  i3 = HEAP32[i4 >> 2] | 0;
  if (!i3) HEAP32[i4 >> 2] = i5;
  if ((HEAP32[i8 >> 2] | 0) != (i6 | 0)) {
   HEAP32[i7 >> 2] = 4;
   i1 = 0;
   break;
  }
  if (i2 >>> 0 > 0 | (i2 | 0) == 0 & i1 >>> 0 > 4294967295 | (i3 | 0) == 34) {
   HEAP32[i7 >> 2] = 4;
   i1 = -1;
   break;
  } else break;
 } else {
  HEAP32[i7 >> 2] = 4;
  i1 = 0;
 } while (0);
 STACKTOP = i9;
 return i1 | 0;
}

function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji(i1, i6, i7, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i9;
 do if ((i1 | 0) != (i6 | 0)) {
  if ((HEAP8[i1 >> 0] | 0) == 45) {
   HEAP32[i7 >> 2] = 4;
   i1 = 0;
   break;
  }
  i4 = ___errno_location() | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = 0;
  i1 = _strtoull_l(i1, i8, i2, __ZNSt3__16__clocEv() | 0) | 0;
  i2 = tempRet0;
  i3 = HEAP32[i4 >> 2] | 0;
  if (!i3) HEAP32[i4 >> 2] = i5;
  if ((HEAP32[i8 >> 2] | 0) != (i6 | 0)) {
   HEAP32[i7 >> 2] = 4;
   i1 = 0;
   break;
  }
  if (i2 >>> 0 > 0 | (i2 | 0) == 0 & i1 >>> 0 > 4294967295 | (i3 | 0) == 34) {
   HEAP32[i7 >> 2] = 4;
   i1 = -1;
   break;
  } else break;
 } else {
  HEAP32[i7 >> 2] = 4;
  i1 = 0;
 } while (0);
 STACKTOP = i9;
 return i1 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj(i10, i9, i1, i4, i7, i8, i6) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 if ((1073741807 - i9 | 0) >>> 0 < i1 >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i10);
 if (!(HEAP8[i10 >> 0] & 1)) i5 = i10 + 4 | 0; else i5 = HEAP32[i10 + 8 >> 2] | 0;
 if (i9 >>> 0 < 536870887) {
  i2 = i1 + i9 | 0;
  i3 = i9 << 1;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i2 = i2 >>> 0 < 2 ? 2 : i2 + 4 & -4;
 } else i2 = 1073741807;
 i3 = __Znwj(i2 << 2) | 0;
 if (i7) _wmemcpy(i3, i5, i7) | 0;
 i1 = i4 - i8 | 0;
 if ((i1 | 0) != (i7 | 0)) _wmemcpy(i3 + (i6 + i7 << 2) | 0, i5 + (i8 + i7 << 2) | 0, i1 - i7 | 0) | 0;
 if ((i9 | 0) != 1) __ZdlPv(i5);
 HEAP32[i10 + 8 >> 2] = i3;
 HEAP32[i10 >> 2] = i2 | 1;
 return;
}

function _SDL_RWFromFile(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i5 + 8 | 0;
 i2 = i5;
 if (((i3 | 0) != 0 ? (i1 | 0) != 0 & (HEAP8[i3 >> 0] | 0) != 0 : 0) ? (HEAP8[i1 >> 0] | 0) != 0 : 0) {
  i2 = _fopen(i3, i1) | 0;
  if (!i2) {
   HEAP32[i4 >> 2] = i3;
   _SDL_SetError(36850, i4) | 0;
   i4 = 0;
   STACKTOP = i5;
   return i4 | 0;
  }
  i1 = _SDL_malloc(36) | 0;
  if (!i1) {
   _SDL_Error(0) | 0;
   i4 = i1;
   STACKTOP = i5;
   return i4 | 0;
  } else {
   HEAP32[i1 >> 2] = 72;
   HEAP32[i1 + 4 >> 2] = 7;
   HEAP32[i1 + 8 >> 2] = 8;
   HEAP32[i1 + 12 >> 2] = 9;
   HEAP32[i1 + 16 >> 2] = 73;
   HEAP32[i1 + 28 >> 2] = i2;
   HEAP32[i1 + 24 >> 2] = 1;
   HEAP32[i1 + 20 >> 2] = 2;
   i4 = i1;
   STACKTOP = i5;
   return i4 | 0;
  }
 }
 _SDL_SetError(36803, i2) | 0;
 i4 = 0;
 STACKTOP = i5;
 return i4 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(i10, i9, i1, i4, i7, i8, i6) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 if ((-17 - i9 | 0) >>> 0 < i1 >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i10);
 if (!(HEAP8[i10 >> 0] & 1)) i5 = i10 + 1 | 0; else i5 = HEAP32[i10 + 8 >> 2] | 0;
 if (i9 >>> 0 < 2147483623) {
  i2 = i1 + i9 | 0;
  i3 = i9 << 1;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i2 = i2 >>> 0 < 11 ? 11 : i2 + 16 & -16;
 } else i2 = -17;
 i3 = __Znwj(i2) | 0;
 if (i7) _memcpy(i3 | 0, i5 | 0, i7 | 0) | 0;
 i1 = i4 - i8 | 0;
 if ((i1 | 0) != (i7 | 0)) _memcpy(i3 + (i6 + i7) | 0, i5 + (i8 + i7) | 0, i1 - i7 | 0) | 0;
 if ((i9 | 0) != 10) __ZdlPv(i5);
 HEAP32[i10 + 8 >> 2] = i3;
 HEAP32[i10 >> 2] = i2 | 1;
 return;
}

function ___stpcpy(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = i2;
 L1 : do if (!((i3 ^ i1) & 3)) {
  if (i3 & 3) do {
   i3 = HEAP8[i2 >> 0] | 0;
   HEAP8[i1 >> 0] = i3;
   if (!(i3 << 24 >> 24)) break L1;
   i2 = i2 + 1 | 0;
   i1 = i1 + 1 | 0;
  } while ((i2 & 3 | 0) != 0);
  i3 = HEAP32[i2 >> 2] | 0;
  if (!((i3 & -2139062144 ^ -2139062144) & i3 + -16843009)) {
   i4 = i1;
   while (1) {
    i2 = i2 + 4 | 0;
    i1 = i4 + 4 | 0;
    HEAP32[i4 >> 2] = i3;
    i3 = HEAP32[i2 >> 2] | 0;
    if ((i3 & -2139062144 ^ -2139062144) & i3 + -16843009) break; else i4 = i1;
   }
  }
  i4 = 8;
 } else i4 = 8; while (0);
 if ((i4 | 0) == 8) {
  i4 = HEAP8[i2 >> 0] | 0;
  HEAP8[i1 >> 0] = i4;
  if (i4 << 24 >> 24) do {
   i2 = i2 + 1 | 0;
   i1 = i1 + 1 | 0;
   i4 = HEAP8[i2 >> 0] | 0;
   HEAP8[i1 >> 0] = i4;
  } while (i4 << 24 >> 24 != 0);
 }
 return i1 | 0;
}

function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i5, i3, i1, i2, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i6;
 i3 = __ZNKSt3__18ios_base6getlocEv(i3) | 0;
 HEAP32[i7 >> 2] = i3;
 i8 = __ZNKSt3__16locale9use_facetERNS0_2idE(i7, 30376) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 48 >> 2] & 31](i8, 61569, 61601, i1) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i7, 30532) | 0;
 HEAP32[i2 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
 HEAP32[i4 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 127](i5, i1);
 __ZNSt3__114__shared_count16__release_sharedEv(i3) | 0;
 STACKTOP = i6;
 return;
}

function _SDL_CaptureMouse(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6;
 do if (HEAP32[3013] | 0) {
  i2 = _SDL_GetKeyboardFocus() | 0;
  i3 = (i2 | 0) != 0;
  if (i3) i1 = (HEAP32[i2 + 48 >> 2] & 16384 | 0) != 0; else i1 = 0;
  if ((i1 & 1 | 0) != (i4 | 0)) {
   if (!i4) {
    if ((FUNCTION_TABLE_ii[HEAP32[12052 >> 2] & 127](0) | 0) == -1) {
     i1 = -1;
     break;
    }
    i1 = i2 + 48 | 0;
    HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -16385;
    i1 = 0;
    break;
   }
   if (!i3) {
    i1 = _SDL_SetError(36733, i5) | 0;
    break;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[12052 >> 2] & 127](i2) | 0) == -1) i1 = -1; else {
    i1 = i2 + 48 | 0;
    HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 16384;
    i1 = 0;
   }
  } else i1 = 0;
 } else i1 = _SDL_Error(4) | 0; while (0);
 STACKTOP = i6;
 return i1 | 0;
}

function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i5, i3, i1, i2, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i6;
 i3 = __ZNKSt3__18ios_base6getlocEv(i3) | 0;
 HEAP32[i7 >> 2] = i3;
 i8 = __ZNKSt3__16locale9use_facetERNS0_2idE(i7, 30384) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 32 >> 2] & 31](i8, 61569, 61601, i1) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i7, 30524) | 0;
 HEAP8[i2 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
 HEAP8[i4 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 127](i5, i1);
 __ZNSt3__114__shared_count16__release_sharedEv(i3) | 0;
 STACKTOP = i6;
 return;
}

function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji(i1, i5, i6, i2) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8;
 do if ((i1 | 0) != (i5 | 0)) {
  if ((HEAP8[i1 >> 0] | 0) == 45) {
   HEAP32[i6 >> 2] = 4;
   i2 = 0;
   i1 = 0;
   break;
  }
  i3 = ___errno_location() | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = 0;
  i1 = _strtoull_l(i1, i7, i2, __ZNSt3__16__clocEv() | 0) | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  if (!i2) HEAP32[i3 >> 2] = i4;
  if ((HEAP32[i7 >> 2] | 0) != (i5 | 0)) {
   HEAP32[i6 >> 2] = 4;
   i2 = 0;
   i1 = 0;
   break;
  }
  if ((i2 | 0) == 34) {
   HEAP32[i6 >> 2] = 4;
   i2 = -1;
   i1 = -1;
  } else i2 = tempRet0;
 } else {
  HEAP32[i6 >> 2] = 4;
  i2 = 0;
  i1 = 0;
 } while (0);
 tempRet0 = i2;
 STACKTOP = i8;
 return i1 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1, i5, i4, i6) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0;
 L1 : do if ((i1 | 0) != (HEAP32[i5 + 8 >> 2] | 0)) {
  i3 = HEAP32[i1 + 12 >> 2] | 0;
  i2 = i1 + 16 + (i3 << 3) | 0;
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1 + 16 | 0, i5, i4, i6);
  if ((i3 | 0) > 1) {
   i3 = i5 + 54 | 0;
   i1 = i1 + 24 | 0;
   do {
    __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1, i5, i4, i6);
    if (HEAP8[i3 >> 0] | 0) break L1;
    i1 = i1 + 8 | 0;
   } while (i1 >>> 0 < i2 >>> 0);
  }
 } else __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, i5, i4, i6); while (0);
 return;
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i6, i4, i3, i5, i7) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0;
 do if ((i6 | 0) == (HEAP32[i4 + 8 >> 2] | 0)) {
  if ((HEAP32[i4 + 4 >> 2] | 0) == (i3 | 0) ? (i2 = i4 + 28 | 0, (HEAP32[i2 >> 2] | 0) != 1) : 0) HEAP32[i2 >> 2] = i5;
 } else if ((i6 | 0) == (HEAP32[i4 >> 2] | 0)) {
  if ((HEAP32[i4 + 16 >> 2] | 0) != (i3 | 0) ? (i1 = i4 + 20 | 0, (HEAP32[i1 >> 2] | 0) != (i3 | 0)) : 0) {
   HEAP32[i4 + 32 >> 2] = i5;
   HEAP32[i1 >> 2] = i3;
   i7 = i4 + 40 | 0;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
   if ((HEAP32[i4 + 36 >> 2] | 0) == 1 ? (HEAP32[i4 + 24 >> 2] | 0) == 2 : 0) HEAP8[i4 + 54 >> 0] = 1;
   HEAP32[i4 + 44 >> 2] = 4;
   break;
  }
  if ((i5 | 0) == 1) HEAP32[i4 + 32 >> 2] = 1;
 } while (0);
 return;
}

function _GLES2_BindTexture(i5, i1, i9, i8) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i2 = i5 + 316 | 0;
 i7 = HEAP32[i2 >> 2] | 0;
 i4 = HEAP32[i1 + 68 >> 2] | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if ((HEAP32[3491] | 0) != (i1 | 0)) {
  HEAP32[i7 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i5 + 188 >> 2] | 0, i1) | 0) >= 0) {
   HEAP32[3491] = HEAP32[i7 >> 2];
   _GLES2_UpdateViewport(i5) | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   i6 = 4;
  }
 } else {
  i3 = i7;
  i6 = 4;
 }
 if ((i6 | 0) == 4 ? (HEAP32[i3 + 4 >> 2] | 0) != 0 : 0) {
  i1 = i3 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 7]() | 0) != 0);
 }
 FUNCTION_TABLE_vii[HEAP32[i7 + 28 >> 2] & 127](HEAP32[i4 + 4 >> 2] | 0, HEAP32[i4 >> 2] | 0);
 if (i9) HEAPF32[i9 >> 2] = 1.0;
 if (!i8) return 0;
 HEAPF32[i8 >> 2] = 1.0;
 return 0;
}

function __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i1, i3, i6, i5) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i2 = 0, i4 = 0;
 if (i5 & 2048) {
  HEAP8[i1 >> 0] = 43;
  i1 = i1 + 1 | 0;
 }
 if (i5 & 512) {
  HEAP8[i1 >> 0] = 35;
  i1 = i1 + 1 | 0;
 }
 i2 = HEAP8[i3 >> 0] | 0;
 if (i2 << 24 >> 24) {
  i4 = i3;
  while (1) {
   i4 = i4 + 1 | 0;
   i3 = i1 + 1 | 0;
   HEAP8[i1 >> 0] = i2;
   i2 = HEAP8[i4 >> 0] | 0;
   if (!(i2 << 24 >> 24)) {
    i1 = i3;
    break;
   } else i1 = i3;
  }
 }
 L11 : do switch (i5 & 74 | 0) {
 case 64:
  {
   HEAP8[i1 >> 0] = 111;
   break;
  }
 case 8:
  if (!(i5 & 16384)) {
   HEAP8[i1 >> 0] = 120;
   break L11;
  } else {
   HEAP8[i1 >> 0] = 88;
   break L11;
  }
 default:
  if (i6) {
   HEAP8[i1 >> 0] = 100;
   break L11;
  } else {
   HEAP8[i1 >> 0] = 117;
   break L11;
  }
 } while (0);
 return;
}

function _SDL_Generic_SetTLSData(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 i3 = _SDL_ThreadID() | 0;
 i1 = HEAP32[3173] | 0;
 L1 : do if (!i1) i5 = 10; else {
  i2 = 0;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) == (i3 | 0)) {
    i3 = i1;
    break;
   }
   i2 = HEAP32[i1 + 8 >> 2] | 0;
   if (!i2) {
    i5 = 10;
    break L1;
   } else {
    i6 = i1;
    i1 = i2;
    i2 = i6;
   }
  }
  if (i4) {
   HEAP32[i3 + 4 >> 2] = i4;
   break;
  }
  i1 = HEAP32[i3 + 8 >> 2] | 0;
  if (!i2) HEAP32[3173] = i1; else HEAP32[i2 + 8 >> 2] = i1;
  _SDL_free(i3);
 } while (0);
 do if ((i5 | 0) == 10) {
  i1 = _SDL_malloc(12) | 0;
  if (i1) {
   HEAP32[i1 >> 2] = i3;
   HEAP32[i1 + 4 >> 2] = i4;
   HEAP32[i1 + 8 >> 2] = HEAP32[3173];
   HEAP32[3173] = i1;
   break;
  }
  i6 = _SDL_Error(0) | 0;
  return i6 | 0;
 } while (0);
 i6 = 0;
 return i6 | 0;
}

function __ZNSt3__120__shared_ptr_emplaceI17GameObjectManagerNS_9allocatorIS1_EEED0Ev(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 HEAP32[i6 >> 2] = 3124;
 i4 = i6 + 24 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (i1) {
  i5 = i6 + 28 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) {
   i3 = i2;
   while (1) {
    i2 = i3 + -8 | 0;
    HEAP32[i5 >> 2] = i2;
    i3 = HEAP32[i3 + -4 >> 2] | 0;
    if (i3) {
     __ZNSt3__119__shared_weak_count16__release_sharedEv(i3);
     i2 = HEAP32[i5 >> 2] | 0;
    }
    if ((i2 | 0) == (i1 | 0)) break; else i3 = i2;
   }
   i1 = HEAP32[i4 >> 2] | 0;
  }
  __ZdlPv(i1);
 }
 i1 = HEAP32[i6 + 20 >> 2] | 0;
 if (!i1) {
  __ZNSt3__114__shared_countD2Ev(i6);
  __ZdlPv(i6);
  return;
 }
 __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
 __ZNSt3__114__shared_countD2Ev(i6);
 __ZdlPv(i6);
 return;
}

function _SW_UpdateTexture(i1, i2, i3, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = HEAP32[i2 + 68 >> 2] | 0;
 if (HEAP32[i4 >> 2] & 2) _SDL_LockSurface(i4) | 0;
 i7 = i4 + 16 | 0;
 i1 = HEAPU8[(HEAP32[i4 + 4 >> 2] | 0) + 9 >> 0] | 0;
 i5 = Math_imul(HEAP32[i3 + 8 >> 2] | 0, i1) | 0;
 i6 = i3 + 12 | 0;
 if ((HEAP32[i6 >> 2] | 0) > 0) {
  i2 = Math_imul(i1, HEAP32[i3 >> 2] | 0) | 0;
  i2 = (HEAP32[i4 + 20 >> 2] | 0) + (i2 + (Math_imul(HEAP32[i7 >> 2] | 0, HEAP32[i3 + 4 >> 2] | 0) | 0)) | 0;
  i3 = 0;
  i1 = i8;
  while (1) {
   _SDL_memcpy(i2, i1, i5) | 0;
   i3 = i3 + 1 | 0;
   if ((i3 | 0) >= (HEAP32[i6 >> 2] | 0)) break; else {
    i2 = i2 + (HEAP32[i7 >> 2] | 0) | 0;
    i1 = i1 + i9 | 0;
   }
  }
 }
 if (!(HEAP32[i4 >> 2] & 2)) return 0;
 _SDL_UnlockSurface(i4);
 return 0;
}

function __ZNSt3__111__stdoutbufIwE4syncEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i10 + 8 | 0;
 i7 = i10;
 i3 = i1 + 36 | 0;
 i4 = i1 + 40 | 0;
 i5 = i8 + 8 | 0;
 i6 = i8;
 i2 = i1 + 32 | 0;
 L1 : while (1) {
  i1 = HEAP32[i3 >> 2] | 0;
  i1 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i1, HEAP32[i4 >> 2] | 0, i8, i5, i7) | 0;
  i11 = (HEAP32[i7 >> 2] | 0) - i6 | 0;
  if ((_fwrite(i8, 1, i11, HEAP32[i2 >> 2] | 0) | 0) != (i11 | 0)) {
   i1 = -1;
   break;
  }
  switch (i1 | 0) {
  case 1:
   break;
  case 2:
   {
    i1 = -1;
    break L1;
   }
  default:
   {
    i9 = 4;
    break L1;
   }
  }
 }
 if ((i9 | 0) == 4) i1 = ((_fflush(HEAP32[i2 >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = i10;
 return i1 | 0;
}

function __ZNSt3__111__stdoutbufIcE4syncEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i10 + 8 | 0;
 i7 = i10;
 i3 = i1 + 36 | 0;
 i4 = i1 + 40 | 0;
 i5 = i8 + 8 | 0;
 i6 = i8;
 i2 = i1 + 32 | 0;
 L1 : while (1) {
  i1 = HEAP32[i3 >> 2] | 0;
  i1 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i1, HEAP32[i4 >> 2] | 0, i8, i5, i7) | 0;
  i11 = (HEAP32[i7 >> 2] | 0) - i6 | 0;
  if ((_fwrite(i8, 1, i11, HEAP32[i2 >> 2] | 0) | 0) != (i11 | 0)) {
   i1 = -1;
   break;
  }
  switch (i1 | 0) {
  case 1:
   break;
  case 2:
   {
    i1 = -1;
    break L1;
   }
  default:
   {
    i9 = 4;
    break L1;
   }
  }
 }
 if ((i9 | 0) == 4) i1 = ((_fflush(HEAP32[i2 >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = i10;
 return i1 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_(i4, i1, i6) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i7 = 0;
 i5 = i1;
 i2 = i6 - i5 | 0;
 i3 = i2 >> 2;
 if (i3 >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i4);
 if (i3 >>> 0 < 2) {
  HEAP8[i4 >> 0] = i2 >>> 1;
  i4 = i4 + 4 | 0;
 } else {
  i7 = i3 + 4 & -4;
  i2 = __Znwj(i7 << 2) | 0;
  HEAP32[i4 + 8 >> 2] = i2;
  HEAP32[i4 >> 2] = i7 | 1;
  HEAP32[i4 + 4 >> 2] = i3;
  i4 = i2;
 }
 i3 = (i6 - i5 | 0) >>> 2;
 if ((i1 | 0) != (i6 | 0)) {
  i2 = i4;
  while (1) {
   HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
   i1 = i1 + 4 | 0;
   if ((i1 | 0) == (i6 | 0)) break; else i2 = i2 + 4 | 0;
  }
 }
 HEAP32[i4 + (i3 << 2) >> 2] = 0;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(i6, i5, i4) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP8[i6 >> 0] | 0;
 if (!(i1 & 1)) i3 = 10; else {
  i1 = HEAP32[i6 >> 2] | 0;
  i3 = (i1 & -2) + -1 | 0;
  i1 = i1 & 255;
 }
 i2 = (i1 & 1) == 0;
 do if (i3 >>> 0 >= i4 >>> 0) {
  if (i2) i1 = i6 + 1 | 0; else i1 = HEAP32[i6 + 8 >> 2] | 0;
  _memmove(i1 | 0, i5 | 0, i4 | 0) | 0;
  HEAP8[i1 + i4 >> 0] = 0;
  if (!(HEAP8[i6 >> 0] & 1)) {
   HEAP8[i6 >> 0] = i4 << 1;
   break;
  } else {
   HEAP32[i6 + 4 >> 2] = i4;
   break;
  }
 } else {
  if (i2) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i6 + 4 >> 2] | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc(i6, i3, i4 - i3 | 0, i1, 0, i1, i4, i5);
 } while (0);
 return i6 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc(i6, i5, i4) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 if (i5) {
  i1 = HEAP8[i6 >> 0] | 0;
  if (!(i1 & 1)) i2 = 10; else {
   i1 = HEAP32[i6 >> 2] | 0;
   i2 = (i1 & -2) + -1 | 0;
   i1 = i1 & 255;
  }
  if (!(i1 & 1)) i3 = (i1 & 255) >>> 1; else i3 = HEAP32[i6 + 4 >> 2] | 0;
  if ((i2 - i3 | 0) >>> 0 < i5 >>> 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(i6, i2, i5 - i2 + i3 | 0, i3, i3, 0, 0);
   i1 = HEAP8[i6 >> 0] | 0;
  }
  if (!(i1 & 1)) i2 = i6 + 1 | 0; else i2 = HEAP32[i6 + 8 >> 2] | 0;
  _memset(i2 + i3 | 0, i4 | 0, i5 | 0) | 0;
  i1 = i3 + i5 | 0;
  if (!(HEAP8[i6 >> 0] & 1)) HEAP8[i6 >> 0] = i1 << 1; else HEAP32[i6 + 4 >> 2] = i1;
  HEAP8[i2 + i1 >> 0] = 0;
 }
 return i6 | 0;
}

function _SDL_SendAppEvent(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i2 = i3;
 i4 = HEAP32[6380 + ((i1 >>> 8 & 255) << 2) >> 2] | 0;
 if ((i4 | 0) != 0 ? (HEAP32[i4 + ((i1 >>> 5 & 7) << 2) >> 2] & 1 << (i1 & 31) | 0) != 0 : 0) {
  i4 = 0;
  STACKTOP = i3;
  return i4 | 0;
 }
 HEAP32[i2 >> 2] = i1;
 HEAP32[i2 + 4 >> 2] = _SDL_GetTicks() | 0;
 i1 = HEAP32[814] | 0;
 if ((i1 | 0) != 0 ? (FUNCTION_TABLE_iii[i1 & 63](HEAP32[815] | 0, i2) | 0) == 0 : 0) i1 = 0; else {
  i1 = HEAP32[1594] | 0;
  if (i1) do {
   FUNCTION_TABLE_iii[HEAP32[i1 >> 2] & 63](HEAP32[i1 + 4 >> 2] | 0, i2) | 0;
   i1 = HEAP32[i1 + 8 >> 2] | 0;
  } while ((i1 | 0) != 0);
  if ((_SDL_PeepEvents(i2, 1, 0, 0, 0) | 0) < 1) i1 = 0; else {
   _SDL_GestureProcessEvent(i2);
   i1 = 1;
  }
 }
 i4 = i1;
 STACKTOP = i3;
 return i4 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj(i6, i5, i4) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP8[i6 >> 0] | 0;
 if (!(i1 & 1)) i3 = 1; else {
  i1 = HEAP32[i6 >> 2] | 0;
  i3 = (i1 & -2) + -1 | 0;
  i1 = i1 & 255;
 }
 i2 = (i1 & 1) == 0;
 do if (i3 >>> 0 >= i4 >>> 0) {
  if (i2) i1 = i6 + 4 | 0; else i1 = HEAP32[i6 + 8 >> 2] | 0;
  _wmemmove(i1, i5, i4) | 0;
  HEAP32[i1 + (i4 << 2) >> 2] = 0;
  if (!(HEAP8[i6 >> 0] & 1)) {
   HEAP8[i6 >> 0] = i4 << 1;
   break;
  } else {
   HEAP32[i6 + 4 >> 2] = i4;
   break;
  }
 } else {
  if (i2) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i6 + 4 >> 2] | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw(i6, i3, i4 - i3 | 0, i1, 0, i1, i4, i5);
 } while (0);
 return i6 | 0;
}

function __ZN10GameObject6updateEfRNSt3__16vectorI6ActionNS0_9allocatorIS2_EEEE(i2, d8, i1) {
 i2 = i2 | 0;
 d8 = +d8;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i1 = i7 + 32 | 0;
 i10 = i7 + 24 | 0;
 i3 = i7 + 16 | 0;
 i4 = i7 + 8 | 0;
 i5 = i7;
 i9 = i2 + 4 | 0;
 i6 = i2 + 12 | 0;
 __ZNK5Vec2fmlEf(i10, i6, d8);
 __ZNK5Vec2fplERKS_(i1, i9, i10);
 __ZN5Vec2faSERKS_(i9, i1) | 0;
 i1 = HEAP32[i2 + 20 >> 2] | 0;
 i2 = HEAP32[i2 + 24 >> 2] | 0;
 if ((i1 | 0) != (i2 | 0)) do {
  __ZNK5Vec2fmlEf(i4, i6, d8);
  __ZNK5Vec2fplERKS_(i3, i1, i4);
  __ZN5Vec2faSERKS_(i1, i3) | 0;
  i1 = i1 + 8 | 0;
 } while ((i1 | 0) != (i2 | 0));
 __ZNK5Vec2fmlEf(i5, i6, .9919999837875366);
 __ZN5Vec2faSERKS_(i6, i5) | 0;
 __ZN5Vec2f5limitEf(i6, .15000000596046448);
 STACKTOP = i7;
 return;
}

function _Emscripten_HandleKey(i5, i3, i2) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0;
 i4 = i3 + 156 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 if (i2 >>> 0 < 223 ? (i1 = HEAP32[13028 + (i2 << 2) >> 2] | 0, (i1 | 0) != 0) : 0) {
  L4 : do if ((HEAP32[i3 + 64 >> 2] | 0) == 2) switch (i1 | 0) {
  case 225:
   {
    i1 = 229;
    break L4;
   }
  case 224:
   {
    i1 = 228;
    break L4;
   }
  case 226:
   {
    i1 = 230;
    break L4;
   }
  case 227:
   {
    i1 = 231;
    break L4;
   }
  default:
   break L4;
  } while (0);
  _SDL_SendKeyboardKey((i5 | 0) == 2 & 1, i1) | 0;
 }
 i5 = (i5 | 0) == 2;
 i1 = (_SDL_EventState(i5 ? 768 : 769, -1) | 0) << 24 >> 24 == 1 & 1;
 if (!i5) return i1 | 0;
 if ((_SDL_EventState(771, -1) | 0) << 24 >> 24 == 1) return ((HEAP32[i4 >> 2] & -2 | 0) == 8 ? i1 : 0) | 0; else return i1 | 0;
 return 0;
}

function _strncasecmp(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 if (!i3) i1 = 0; else {
  i4 = HEAP8[i2 >> 0] | 0;
  L3 : do if (!(i4 << 24 >> 24)) i2 = 0; else {
   i6 = i4;
   i5 = i4 & 255;
   while (1) {
    i3 = i3 + -1 | 0;
    i4 = HEAP8[i1 >> 0] | 0;
    if (!((i3 | 0) != 0 & i4 << 24 >> 24 != 0)) {
     i2 = i6;
     break L3;
    }
    if (i6 << 24 >> 24 != i4 << 24 >> 24 ? (i6 = _tolower(i5) | 0, (i6 | 0) != (_tolower(HEAPU8[i1 >> 0] | 0) | 0)) : 0) break;
    i2 = i2 + 1 | 0;
    i1 = i1 + 1 | 0;
    i4 = HEAP8[i2 >> 0] | 0;
    if (!(i4 << 24 >> 24)) {
     i2 = 0;
     break L3;
    } else {
     i6 = i4;
     i5 = i4 & 255;
    }
   }
   i2 = HEAP8[i2 >> 0] | 0;
  } while (0);
  i6 = _tolower(i2 & 255) | 0;
  i1 = i6 - (_tolower(HEAPU8[i1 >> 0] | 0) | 0) | 0;
 }
 return i1 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i4, i6) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i1 = HEAP8[i4 >> 0] | 0;
 i2 = (i1 & 1) != 0;
 if (i2) {
  i3 = (HEAP32[i4 >> 2] & -2) + -1 | 0;
  i5 = HEAP32[i4 + 4 >> 2] | 0;
 } else {
  i3 = 1;
  i5 = (i1 & 255) >>> 1;
 }
 if ((i5 | 0) == (i3 | 0)) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj(i4, i3, 1, i3, i3, 0, 0);
  if (!(HEAP8[i4 >> 0] & 1)) i3 = 7; else i3 = 8;
 } else if (i2) i3 = 8; else i3 = 7;
 if ((i3 | 0) == 7) {
  HEAP8[i4 >> 0] = (i5 << 1) + 2;
  i1 = i4 + 4 | 0;
  i2 = i5 + 1 | 0;
 } else if ((i3 | 0) == 8) {
  i1 = HEAP32[i4 + 8 >> 2] | 0;
  i2 = i5 + 1 | 0;
  HEAP32[i4 + 4 >> 2] = i2;
 }
 HEAP32[i1 + (i5 << 2) >> 2] = i6;
 HEAP32[i1 + (i2 << 2) >> 2] = 0;
 return;
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv(i6, i1, i4) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i5 = i7;
 if ((i6 | 0) != (i1 | 0)) if ((i1 | 0) != 0 ? (i3 = ___dynamic_cast(i1, 952, 968, 0) | 0, (i3 | 0) != 0) : 0) {
  i1 = i5;
  i2 = i1 + 56 | 0;
  do {
   HEAP32[i1 >> 2] = 0;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) < (i2 | 0));
  HEAP32[i5 >> 2] = i3;
  HEAP32[i5 + 8 >> 2] = i6;
  HEAP32[i5 + 12 >> 2] = -1;
  HEAP32[i5 + 48 >> 2] = 1;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 63](i3, i5, HEAP32[i4 >> 2] | 0, 1);
  if ((HEAP32[i5 + 24 >> 2] | 0) == 1) {
   HEAP32[i4 >> 2] = HEAP32[i5 + 16 >> 2];
   i1 = 1;
  } else i1 = 0;
 } else i1 = 0; else i1 = 1;
 STACKTOP = i7;
 return i1 | 0;
}

function _wcrtomb(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 do if (i1) {
  if (i3 >>> 0 < 128) {
   HEAP8[i1 >> 0] = i3;
   i1 = 1;
   break;
  }
  if (i3 >>> 0 < 2048) {
   HEAP8[i1 >> 0] = i3 >>> 6 | 192;
   HEAP8[i1 + 1 >> 0] = i3 & 63 | 128;
   i1 = 2;
   break;
  }
  if (i3 >>> 0 < 55296 | (i3 & -8192 | 0) == 57344) {
   HEAP8[i1 >> 0] = i3 >>> 12 | 224;
   HEAP8[i1 + 1 >> 0] = i3 >>> 6 & 63 | 128;
   HEAP8[i1 + 2 >> 0] = i3 & 63 | 128;
   i1 = 3;
   break;
  }
  if ((i3 + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[i1 >> 0] = i3 >>> 18 | 240;
   HEAP8[i1 + 1 >> 0] = i3 >>> 12 & 63 | 128;
   HEAP8[i1 + 2 >> 0] = i3 >>> 6 & 63 | 128;
   HEAP8[i1 + 3 >> 0] = i3 & 63 | 128;
   i1 = 4;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   i1 = -1;
   break;
  }
 } else i1 = 1; while (0);
 return i1 | 0;
}

function _SDL_UpdateWindowSurface(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i6 + 16 | 0;
 i3 = i6 + 8 | 0;
 i2 = i6 + 24 | 0;
 i1 = HEAP32[3256] | 0;
 if (!i1) {
  _SDL_SetError(41242, i6) | 0;
  i5 = -1;
  STACKTOP = i6;
  return i5 | 0;
 }
 if ((i5 | 0) != 0 ? (HEAP32[i5 >> 2] | 0) == (i1 + 248 | 0) : 0) {
  HEAP32[i2 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
  HEAP32[i2 + 8 >> 2] = HEAP32[i5 + 24 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i5 + 28 >> 2];
  if (!(HEAP32[i5 + 108 >> 2] | 0)) {
   i5 = _SDL_SetError(41564, i4) | 0;
   STACKTOP = i6;
   return i5 | 0;
  } else {
   i5 = FUNCTION_TABLE_iiiii[HEAP32[i1 + 108 >> 2] & 31](i1, i5, i2, 1) | 0;
   STACKTOP = i6;
   return i5 | 0;
  }
 }
 _SDL_SetError(41324, i3) | 0;
 i5 = -1;
 STACKTOP = i6;
 return i5 | 0;
}

function __ZNSt3__120__shared_ptr_emplaceI17GameObjectManagerNS_9allocatorIS1_EEED2Ev(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 HEAP32[i6 >> 2] = 3124;
 i4 = i6 + 24 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (i1) {
  i5 = i6 + 28 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) {
   i3 = i2;
   while (1) {
    i2 = i3 + -8 | 0;
    HEAP32[i5 >> 2] = i2;
    i3 = HEAP32[i3 + -4 >> 2] | 0;
    if (i3) {
     __ZNSt3__119__shared_weak_count16__release_sharedEv(i3);
     i2 = HEAP32[i5 >> 2] | 0;
    }
    if ((i2 | 0) == (i1 | 0)) break; else i3 = i2;
   }
   i1 = HEAP32[i4 >> 2] | 0;
  }
  __ZdlPv(i1);
 }
 i1 = HEAP32[i6 + 20 >> 2] | 0;
 if (!i1) {
  __ZNSt3__114__shared_countD2Ev(i6);
  return;
 }
 __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
 __ZNSt3__114__shared_countD2Ev(i6);
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i9 = i7;
 i10 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i11 >> 2] = i10;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i11, 30376) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i10) | 0;
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE(i6, i5 + 16 | 0, i1, i8, i3, i4);
 STACKTOP = i7;
 return HEAP32[i1 >> 2] | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i9 = i7;
 i10 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i11 >> 2] = i10;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i11, 30376) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i10) | 0;
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE(i6, i5 + 24 | 0, i1, i8, i3, i4);
 STACKTOP = i7;
 return HEAP32[i1 >> 2] | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i9 = i7;
 i10 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i11 >> 2] = i10;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i11, 30384) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i10) | 0;
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE(i6, i5 + 16 | 0, i1, i8, i3, i4);
 STACKTOP = i7;
 return HEAP32[i1 >> 2] | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i9 = i7;
 i10 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i11 >> 2] = i10;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i11, 30384) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i10) | 0;
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE(i6, i5 + 24 | 0, i1, i8, i3, i4);
 STACKTOP = i7;
 return HEAP32[i1 >> 2] | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i4, i6) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i1 = HEAP8[i4 >> 0] | 0;
 i2 = (i1 & 1) != 0;
 if (i2) {
  i3 = (HEAP32[i4 >> 2] & -2) + -1 | 0;
  i5 = HEAP32[i4 + 4 >> 2] | 0;
 } else {
  i3 = 10;
  i5 = (i1 & 255) >>> 1;
 }
 if ((i5 | 0) == (i3 | 0)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(i4, i3, 1, i3, i3, 0, 0);
  if (!(HEAP8[i4 >> 0] & 1)) i3 = 7; else i3 = 8;
 } else if (i2) i3 = 8; else i3 = 7;
 if ((i3 | 0) == 7) {
  HEAP8[i4 >> 0] = (i5 << 1) + 2;
  i1 = i4 + 1 | 0;
  i2 = i5 + 1 | 0;
 } else if ((i3 | 0) == 8) {
  i1 = HEAP32[i4 + 8 >> 2] | 0;
  i2 = i5 + 1 | 0;
  HEAP32[i4 + 4 >> 2] = i2;
 }
 HEAP8[i1 + i5 >> 0] = i6;
 HEAP8[i1 + i2 >> 0] = 0;
 return;
}

function _SDL_JoystickClose(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 if (!i3) return;
 i1 = i3 + 44 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 >> 2] = i2 + -1;
 if ((i2 | 0) > 1 | (HEAP32[3041] | 0) == (i3 | 0)) return;
 _SDL_SYS_JoystickClose(i3);
 i1 = HEAP32[3040] | 0;
 L7 : do if (i1) {
  i2 = 0;
  while (1) {
   if ((i1 | 0) == (i3 | 0)) break;
   i2 = HEAP32[i1 + 56 >> 2] | 0;
   if (!i2) break L7; else {
    i4 = i1;
    i1 = i2;
    i2 = i4;
   }
  }
  i1 = HEAP32[i3 + 56 >> 2] | 0;
  if (!i2) {
   HEAP32[3040] = i1;
   break;
  } else {
   HEAP32[i2 + 56 >> 2] = i1;
   break;
  }
 } while (0);
 _SDL_free(HEAP32[i3 + 4 >> 2] | 0);
 _SDL_free(HEAP32[i3 + 12 >> 2] | 0);
 _SDL_free(HEAP32[i3 + 20 >> 2] | 0);
 _SDL_free(HEAP32[i3 + 28 >> 2] | 0);
 _SDL_free(HEAP32[i3 + 36 >> 2] | 0);
 _SDL_free(i3);
 return;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i2, i4, i3, i5, i6) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i7;
 HEAP32[i6 >> 2] = i3;
 i3 = _uselocale(HEAP32[i2 + 8 >> 2] | 0) | 0;
 i2 = _wcrtomb(i1, 0, i4) | 0;
 if (i3) _uselocale(i3) | 0;
 switch (i2 | 0) {
 case 0:
 case -1:
  {
   i1 = 2;
   break;
  }
 default:
  {
   i2 = i2 + -1 | 0;
   if (i2 >>> 0 <= (i5 - (HEAP32[i6 >> 2] | 0) | 0) >>> 0) if (!i2) i1 = 0; else while (1) {
    i4 = HEAP8[i1 >> 0] | 0;
    i5 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i5 + 1;
    HEAP8[i5 >> 0] = i4;
    i2 = i2 + -1 | 0;
    if (!i2) {
     i1 = 0;
     break;
    } else i1 = i1 + 1 | 0;
   } else i1 = 1;
  }
 }
 STACKTOP = i7;
 return i1 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i9 = i7;
 i10 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i11 >> 2] = i10;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i11, 30376) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i10) | 0;
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE(i6, i5 + 20 | 0, i1, i8, i3, i4);
 STACKTOP = i7;
 return HEAP32[i1 >> 2] | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i9 = i7;
 i10 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i11 >> 2] = i10;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i11, 30384) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i10) | 0;
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE(i6, i5 + 20 | 0, i1, i8, i3, i4);
 STACKTOP = i7;
 return HEAP32[i1 >> 2] | 0;
}

function __ZN17GameObjectManager11getInstanceEv() {
 var i1 = 0, i2 = 0, i3 = 0;
 if ((HEAP8[8] | 0) == 0 ? (___cxa_guard_acquire(8) | 0) != 0 : 0) {
  HEAP32[777] = 0;
  HEAP32[778] = 0;
  ___cxa_atexit(259, 3108, ___dso_handle | 0) | 0;
  ___cxa_guard_release(8);
 }
 i1 = HEAP32[777] | 0;
 if (i1) {
  i2 = i1;
  return i2 | 0;
 }
 i3 = __Znwj(36) | 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 >> 2] = 3124;
 i2 = i3 + 12 | 0;
 HEAP32[i2 >> 2] = 20;
 i1 = i3 + 16 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[777] = i2;
 i1 = HEAP32[778] | 0;
 HEAP32[778] = i3;
 if (!i1) {
  i3 = i2;
  return i3 | 0;
 }
 __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
 i3 = HEAP32[777] | 0;
 return i3 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE(i5, i6, i1, i3, i4, i2) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 4 | 0;
 i9 = i7;
 i5 = i5 + 8 | 0;
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] & 127](i5) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i1 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i1, i8, i5, i5 + 288 | 0, i2, i4, 0) | 0) - i5 | 0;
 if ((i1 | 0) < 288) HEAP32[i6 >> 2] = ((i1 | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = i7;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE(i5, i6, i1, i3, i4, i2) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 4 | 0;
 i9 = i7;
 i5 = i5 + 8 | 0;
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] & 127](i5) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i1 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i1, i8, i5, i5 + 288 | 0, i2, i4, 0) | 0) - i5 | 0;
 if ((i1 | 0) < 288) HEAP32[i6 >> 2] = ((i1 | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = i7;
 return;
}

function _SDL_GetTicks() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i4 + 8 | 0;
 i2 = i4;
 do if (!(HEAP32[3485] | 0)) {
  HEAP32[3485] = 1;
  if (!(_clock_gettime(1, 13944) | 0)) {
   HEAP32[3488] = 1;
   break;
  } else {
   _gettimeofday(13956, 0) | 0;
   i3 = 5;
   break;
  }
 } else i3 = 5; while (0);
 if ((i3 | 0) == 5 ? (HEAP32[3488] | 0) == 0 : 0) {
  _gettimeofday(i2 | 0, 0) | 0;
  i3 = (((HEAP32[i2 + 4 >> 2] | 0) - (HEAP32[3490] | 0) | 0) / 1e3 | 0) + (((HEAP32[i2 >> 2] | 0) - (HEAP32[3489] | 0) | 0) * 1e3 | 0) | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 _clock_gettime(1, i1 | 0) | 0;
 i3 = (((HEAP32[i1 + 4 >> 2] | 0) - (HEAP32[3487] | 0) | 0) / 1e6 | 0) + (((HEAP32[i1 >> 2] | 0) - (HEAP32[3486] | 0) | 0) * 1e3 | 0) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _SDL_Delay(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i6 + 8 | 0;
 i5 = i6;
 i8 = (i1 >>> 0) / 1e3 | 0;
 HEAP32[i4 >> 2] = i8;
 i7 = ((i1 >>> 0) % 1e3 | 0) * 1e6 | 0;
 i1 = i4 + 4 | 0;
 HEAP32[i1 >> 2] = i7;
 i2 = ___errno_location() | 0;
 i3 = i5 + 4 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i5 >> 2] = i8;
 HEAP32[i3 >> 2] = i7;
 if (!(_nanosleep(i5 | 0, i4 | 0) | 0)) {
  STACKTOP = i6;
  return;
 }
 while (1) {
  if ((HEAP32[i2 >> 2] | 0) != 4) {
   i1 = 4;
   break;
  }
  i7 = HEAP32[i4 >> 2] | 0;
  i8 = HEAP32[i1 >> 2] | 0;
  HEAP32[i2 >> 2] = 0;
  HEAP32[i5 >> 2] = i7;
  HEAP32[i3 >> 2] = i8;
  if (!(_nanosleep(i5 | 0, i4 | 0) | 0)) {
   i1 = 4;
   break;
  }
 }
 if ((i1 | 0) == 4) {
  STACKTOP = i6;
  return;
 }
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_(i3, i1, i6) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i7 = 0;
 i4 = i1;
 i2 = i6 - i4 | 0;
 if (i2 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i3);
 if (i2 >>> 0 < 11) {
  HEAP8[i3 >> 0] = i2 << 1;
  i5 = i3 + 1 | 0;
 } else {
  i7 = i2 + 16 & -16;
  i5 = __Znwj(i7) | 0;
  HEAP32[i3 + 8 >> 2] = i5;
  HEAP32[i3 >> 2] = i7 | 1;
  HEAP32[i3 + 4 >> 2] = i2;
 }
 i3 = i6 - i4 | 0;
 if ((i1 | 0) != (i6 | 0)) {
  i2 = i5;
  while (1) {
   HEAP8[i2 >> 0] = HEAP8[i1 >> 0] | 0;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) == (i6 | 0)) break; else i2 = i2 + 1 | 0;
  }
 }
 HEAP8[i5 + i3 >> 0] = 0;
 return;
}

function _SDL_SetSurfaceBlendMode(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 if (!i1) {
  i6 = -1;
  return i6 | 0;
 }
 i2 = i1 + 52 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 i4 = i1 + 68 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i3 = i6 & -113;
 HEAP32[i4 >> 2] = i3;
 switch (i5 | 0) {
 case 0:
  {
   i2 = 0;
   break;
  }
 case 1:
  {
   i3 = i3 | 16;
   HEAP32[i4 >> 2] = i3;
   i2 = 0;
   break;
  }
 case 2:
  {
   i3 = i3 | 32;
   HEAP32[i4 >> 2] = i3;
   i2 = 0;
   break;
  }
 case 4:
  {
   i3 = i3 | 64;
   HEAP32[i4 >> 2] = i3;
   i2 = 0;
   break;
  }
 default:
  {
   i5 = _SDL_Error(4) | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   i3 = HEAP32[i1 + 68 >> 2] | 0;
   i2 = i5;
  }
 }
 if ((i3 | 0) == (i6 | 0)) {
  i6 = i2;
  return i6 | 0;
 }
 _SDL_InvalidateMap(i1);
 i6 = i2;
 return i6 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE(i5, i6, i1, i3, i4, i2) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 4 | 0;
 i9 = i7;
 i5 = i5 + 8 | 0;
 i5 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i5 >> 2] >> 2] & 127](i5) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i1 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i1, i8, i5, i5 + 168 | 0, i2, i4, 0) | 0) - i5 | 0;
 if ((i1 | 0) < 168) HEAP32[i6 >> 2] = ((i1 | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = i7;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE(i5, i6, i1, i3, i4, i2) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 4 | 0;
 i9 = i7;
 i5 = i5 + 8 | 0;
 i5 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i5 >> 2] >> 2] & 127](i5) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i1 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i1, i8, i5, i5 + 168 | 0, i2, i4, 0) | 0) - i5 | 0;
 if ((i1 | 0) < 168) HEAP32[i6 >> 2] = ((i1 | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = i7;
 return;
}

function _GLES2_LockTexture(i1, i3, i2, i8, i7) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i5 = HEAP32[i3 + 68 >> 2] | 0;
 i4 = HEAP32[i5 + 16 >> 2] | 0;
 i5 = HEAP32[i5 + 20 >> 2] | 0;
 i6 = Math_imul(HEAP32[i2 + 4 >> 2] | 0, i5) | 0;
 i2 = HEAP32[i2 >> 2] | 0;
 i1 = HEAP32[i3 + 4 >> 2] | 0;
 L1 : do if ((i1 | 0) == 0 | (i1 & -268435456 | 0) == 268435456) i1 = i1 & 255; else {
  if ((i1 | 0) < 1498831189) switch (i1 | 0) {
  case 844715353:
   {
    i1 = 2;
    break L1;
   }
  default:
   {}
  } else switch (i1 | 0) {
  case 1498831189:
   {
    i1 = 2;
    break L1;
   }
  default:
   {}
  }
  i1 = (i1 | 0) == 1431918169 ? 2 : 1;
 } while (0);
 HEAP32[i8 >> 2] = i4 + ((Math_imul(i1, i2) | 0) + i6);
 HEAP32[i7 >> 2] = i5;
 return 0;
}

function _polygonRGBA(i6, i7, i8, i5, i4, i3, i2, i1) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i7 | 0) == 0 | (i8 | 0) == 0 | (i5 | 0) < 3) return -1;
 _SDL_SetRenderDrawBlendMode(i6, i1 << 24 >> 24 != -1 & 1) | 0;
 _SDL_SetRenderDrawColor(i6, i4, i3, i2, i1) | 0;
 i1 = i5 + 1 | 0;
 i2 = _malloc(i1 << 3) | 0;
 if (!i2) return -1;
 if ((i5 | 0) > 0) {
  i3 = 0;
  do {
   HEAP32[i2 + (i3 << 3) >> 2] = HEAP16[i7 + (i3 << 1) >> 1];
   HEAP32[i2 + (i3 << 3) + 4 >> 2] = HEAP16[i8 + (i3 << 1) >> 1];
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != (i5 | 0));
 }
 HEAP32[i2 + (i5 << 3) >> 2] = HEAP16[i7 >> 1];
 HEAP32[i2 + (i5 << 3) + 4 >> 2] = HEAP16[i8 >> 1];
 _SDL_RenderDrawLines(i6, i2, i1) | 0;
 _free(i2);
 return -1;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = HEAP32[i2 >> 2] | 0;
 i6 = i2 + 4 | 0;
 i3 = i1 + 4 | 0;
 i5 = (HEAP32[i6 >> 2] | 0) - i4 | 0;
 i7 = (HEAP32[i3 >> 2] | 0) + (0 - (i5 >> 2) << 2) | 0;
 HEAP32[i3 >> 2] = i7;
 _memcpy(i7 | 0, i4 | 0, i5 | 0) | 0;
 i5 = HEAP32[i2 >> 2] | 0;
 HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i3 >> 2] = i5;
 i5 = i1 + 8 | 0;
 i4 = HEAP32[i6 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i5 >> 2] = i4;
 i5 = i2 + 8 | 0;
 i2 = i1 + 12 | 0;
 i4 = HEAP32[i5 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i2 >> 2] = i4;
 HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
 return;
}

function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i6, i8, i7) {
 i6 = i6 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = i6 + 4 | 0;
 i2 = (HEAP32[i4 >> 2] | 0) != 347;
 i1 = HEAP32[i6 >> 2] | 0;
 i5 = i1;
 i3 = (HEAP32[i7 >> 2] | 0) - i5 | 0;
 i3 = i3 >>> 0 < 2147483647 ? i3 << 1 : -1;
 i5 = (HEAP32[i8 >> 2] | 0) - i5 >> 2;
 i1 = _realloc(i2 ? i1 : 0, i3) | 0;
 if (!i1) __ZSt17__throw_bad_allocv();
 if (!i2) {
  i2 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i1;
  if (i2) {
   FUNCTION_TABLE_vi[HEAP32[i4 >> 2] & 511](i2);
   i1 = HEAP32[i6 >> 2] | 0;
  }
 } else HEAP32[i6 >> 2] = i1;
 HEAP32[i4 >> 2] = 358;
 HEAP32[i8 >> 2] = i1 + (i5 << 2);
 HEAP32[i7 >> 2] = (HEAP32[i6 >> 2] | 0) + (i3 >>> 2 << 2);
 return;
}

function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i6, i8, i7) {
 i6 = i6 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = i6 + 4 | 0;
 i2 = (HEAP32[i4 >> 2] | 0) != 347;
 i1 = HEAP32[i6 >> 2] | 0;
 i5 = i1;
 i3 = (HEAP32[i7 >> 2] | 0) - i5 | 0;
 i3 = i3 >>> 0 < 2147483647 ? i3 << 1 : -1;
 i5 = (HEAP32[i8 >> 2] | 0) - i5 >> 2;
 i1 = _realloc(i2 ? i1 : 0, i3) | 0;
 if (!i1) __ZSt17__throw_bad_allocv();
 if (!i2) {
  i2 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i1;
  if (i2) {
   FUNCTION_TABLE_vi[HEAP32[i4 >> 2] & 511](i2);
   i1 = HEAP32[i6 >> 2] | 0;
  }
 } else HEAP32[i6 >> 2] = i1;
 HEAP32[i4 >> 2] = 358;
 HEAP32[i8 >> 2] = i1 + (i5 << 2);
 HEAP32[i7 >> 2] = (HEAP32[i6 >> 2] | 0) + (i3 >>> 2 << 2);
 return;
}

function __ZN11KeyBindings11getInstanceEv() {
 var i1 = 0, i2 = 0, i3 = 0;
 if ((HEAP8[104] | 0) == 0 ? (___cxa_guard_acquire(104) | 0) != 0 : 0) {
  HEAP32[805] = 0;
  HEAP32[806] = 0;
  ___cxa_atexit(260, 3220, ___dso_handle | 0) | 0;
  ___cxa_guard_release(104);
 }
 i1 = HEAP32[805] | 0;
 if (i1) {
  i2 = i1;
  return i2 | 0;
 }
 i3 = __Znwj(32) | 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 >> 2] = 3236;
 i2 = i3 + 12 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAPF32[i3 + 28 >> 2] = 1.0;
 HEAP32[805] = i2;
 i1 = HEAP32[806] | 0;
 HEAP32[806] = i3;
 if (!i1) {
  i3 = i2;
  return i3 | 0;
 }
 __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
 i3 = HEAP32[805] | 0;
 return i3 | 0;
}

function _SDL_FlushEvent(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 if (!(HEAP32[1587] | 0)) return;
 if (_SDL_LockMutex(HEAP32[1586] | 0) | 0) return;
 i1 = HEAP32[1589] | 0;
 if (i1) do {
  i5 = i1 + 72 | 0;
  i6 = i1;
  i1 = HEAP32[i5 >> 2] | 0;
  i2 = i1;
  if ((HEAP32[i6 >> 2] | 0) == (i7 | 0)) {
   i3 = i6 + 68 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if (!i4) i2 = i1; else {
    HEAP32[i4 + 72 >> 2] = i2;
    i2 = HEAP32[i5 >> 2] | 0;
   }
   if (i2) HEAP32[i2 + 68 >> 2] = i4;
   if ((HEAP32[1589] | 0) == (i6 | 0)) HEAP32[1589] = i2;
   if ((HEAP32[1590] | 0) == (i6 | 0)) HEAP32[1590] = HEAP32[i3 >> 2];
   HEAP32[i5 >> 2] = HEAP32[1591];
   HEAP32[1591] = i6;
   HEAP32[1588] = (HEAP32[1588] | 0) + -1;
  }
 } while ((i1 | 0) != 0);
 return;
}

function _SDL_GL_SwapWindow(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i6 + 24 | 0;
 i3 = i6 + 16 | 0;
 i2 = i6 + 8 | 0;
 i1 = HEAP32[3256] | 0;
 if (!i1) {
  _SDL_SetError(41242, i6) | 0;
  STACKTOP = i6;
  return;
 }
 if ((i5 | 0) != 0 ? (HEAP32[i5 >> 2] | 0) == (i1 + 248 | 0) : 0) {
  if (!(HEAP32[i5 + 48 >> 2] & 2)) {
   _SDL_SetError(41647, i3) | 0;
   STACKTOP = i6;
   return;
  }
  if ((_SDL_TLSGet(HEAP32[i1 + 628 >> 2] | 0) | 0) == (i5 | 0)) {
   i4 = HEAP32[3256] | 0;
   FUNCTION_TABLE_vii[HEAP32[i4 + 168 >> 2] & 127](i4, i5);
   STACKTOP = i6;
   return;
  } else {
   _SDL_SetError(41973, i4) | 0;
   STACKTOP = i6;
   return;
  }
 }
 _SDL_SetError(41324, i2) | 0;
 STACKTOP = i6;
 return;
}

function _SDL_FilterEvents(i7, i8) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = HEAP32[1586] | 0;
 if (!i1) return;
 if (_SDL_LockMutex(i1) | 0) return;
 i1 = HEAP32[1589] | 0;
 if (i1) do {
  i5 = i1 + 72 | 0;
  i6 = i1;
  i1 = HEAP32[i5 >> 2] | 0;
  if (!(FUNCTION_TABLE_iii[i7 & 63](i8, i6) | 0)) {
   i2 = i6 + 68 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if (i3) HEAP32[i3 + 72 >> 2] = HEAP32[i5 >> 2];
   i4 = HEAP32[i5 >> 2] | 0;
   if (i4) HEAP32[i4 + 68 >> 2] = i3;
   if ((HEAP32[1589] | 0) == (i6 | 0)) HEAP32[1589] = i4;
   if ((HEAP32[1590] | 0) == (i6 | 0)) HEAP32[1590] = HEAP32[i2 >> 2];
   HEAP32[i5 >> 2] = HEAP32[1591];
   HEAP32[1591] = i6;
   HEAP32[1588] = (HEAP32[1588] | 0) + -1;
  }
 } while ((i1 | 0) != 0);
 return;
}

function _fputc(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0;
 if ((HEAP32[i6 + 76 >> 2] | 0) >= 0 ? (___lockfile(i6) | 0) != 0 : 0) {
  if ((HEAP8[i6 + 75 >> 0] | 0) != (i5 | 0) ? (i2 = i6 + 20 | 0, i3 = HEAP32[i2 >> 2] | 0, i3 >>> 0 < (HEAP32[i6 + 16 >> 2] | 0) >>> 0) : 0) {
   HEAP32[i2 >> 2] = i3 + 1;
   HEAP8[i3 >> 0] = i5;
   i1 = i5 & 255;
  } else i1 = ___overflow(i6, i5) | 0;
  ___unlockfile(i6);
 } else i7 = 3;
 do if ((i7 | 0) == 3) {
  if ((HEAP8[i6 + 75 >> 0] | 0) != (i5 | 0) ? (i4 = i6 + 20 | 0, i1 = HEAP32[i4 >> 2] | 0, i1 >>> 0 < (HEAP32[i6 + 16 >> 2] | 0) >>> 0) : 0) {
   HEAP32[i4 >> 2] = i1 + 1;
   HEAP8[i1 >> 0] = i5;
   i1 = i5 & 255;
   break;
  }
  i1 = ___overflow(i6, i5) | 0;
 } while (0);
 return i1 | 0;
}

function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 i2 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i6 >> 2] = i2;
 i7 = __ZNKSt3__16locale9use_facetERNS0_2idE(i6, 30376) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 48 >> 2] & 31](i7, 61569, 61595, i1) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i6, 30532) | 0;
 HEAP32[i3 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 127](i4, i1);
 __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
 STACKTOP = i5;
 return;
}

function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 i2 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i6 >> 2] = i2;
 i7 = __ZNKSt3__16locale9use_facetERNS0_2idE(i6, 30384) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2] & 31](i7, 61569, 61595, i1) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i6, 30524) | 0;
 HEAP8[i3 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 127](i4, i1);
 __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
 STACKTOP = i5;
 return;
}

function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i6, i8, i7) {
 i6 = i6 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = i6 + 4 | 0;
 i2 = (HEAP32[i4 >> 2] | 0) != 347;
 i1 = HEAP32[i6 >> 2] | 0;
 i5 = i1;
 i3 = (HEAP32[i7 >> 2] | 0) - i5 | 0;
 i3 = i3 >>> 0 < 2147483647 ? i3 << 1 : -1;
 i5 = (HEAP32[i8 >> 2] | 0) - i5 | 0;
 i1 = _realloc(i2 ? i1 : 0, i3) | 0;
 if (!i1) __ZSt17__throw_bad_allocv();
 if (!i2) {
  i2 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i1;
  if (i2) {
   FUNCTION_TABLE_vi[HEAP32[i4 >> 2] & 511](i2);
   i1 = HEAP32[i6 >> 2] | 0;
  }
 } else HEAP32[i6 >> 2] = i1;
 HEAP32[i4 >> 2] = 358;
 HEAP32[i8 >> 2] = i1 + i5;
 HEAP32[i7 >> 2] = (HEAP32[i6 >> 2] | 0) + i3;
 return;
}

function _SDL_OnWindowFocusGained(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = _SDL_GetMouse() | 0;
 i2 = HEAP32[i5 + 96 >> 2] | 0;
 if ((i2 | 0) != 0 ? (i3 = HEAP32[3256] | 0, i4 = HEAP32[i3 + 88 >> 2] | 0, (i4 | 0) != 0) : 0) FUNCTION_TABLE_iiii[i4 & 63](i3, i5, i2) | 0;
 if ((i1 | 0) != 0 ? (HEAP32[i1 + 76 >> 2] | 0) != 0 : 0) {
  _SDL_SetMouseFocus(i5);
  _SDL_WarpMouseInWindow(i5, (HEAP32[i5 + 24 >> 2] | 0) / 2 | 0, (HEAP32[i5 + 28 >> 2] | 0) / 2 | 0);
 }
 if (!(HEAP32[(HEAP32[3256] | 0) + 96 >> 2] | 0)) return;
 i3 = HEAP32[(_SDL_GetMouse() | 0) + 76 >> 2] | 0;
 i4 = HEAP32[i5 + 48 >> 2] | 0;
 i2 = HEAP32[3256] | 0;
 FUNCTION_TABLE_viii[HEAP32[i2 + 96 >> 2] & 31](i2, i5, ((i4 & 256 | i3 | 0) == 0 | i4 >>> 9 & 1 ^ 1) ^ 1);
 return;
}

function ___overflow(i8, i6) {
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i9;
 i5 = i6 & 255;
 HEAP8[i7 >> 0] = i5;
 i2 = i8 + 16 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!i3) if (!(___towrite(i8) | 0)) {
  i3 = HEAP32[i2 >> 2] | 0;
  i4 = 4;
 } else i1 = -1; else i4 = 4;
 do if ((i4 | 0) == 4) {
  i2 = i8 + 20 | 0;
  i4 = HEAP32[i2 >> 2] | 0;
  if (i4 >>> 0 < i3 >>> 0 ? (i1 = i6 & 255, (i1 | 0) != (HEAP8[i8 + 75 >> 0] | 0)) : 0) {
   HEAP32[i2 >> 2] = i4 + 1;
   HEAP8[i4 >> 0] = i5;
   break;
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[i8 + 36 >> 2] & 63](i8, i7, 1) | 0) == 1) i1 = HEAPU8[i7 >> 0] | 0; else i1 = -1;
 } while (0);
 STACKTOP = i9;
 return i1 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j(i1, i10, i2, i8, i9) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = i8;
 i6 = i1 + 8 | 0;
 L1 : do if ((i2 | 0) == (i8 | 0) | (i9 | 0) == 0) i1 = 0; else {
  i1 = 0;
  i5 = 0;
  while (1) {
   i4 = _uselocale(HEAP32[i6 >> 2] | 0) | 0;
   i3 = _mbrlen(i2, i7 - i2 | 0, i10) | 0;
   if (i4) _uselocale(i4) | 0;
   switch (i3 | 0) {
   case -2:
   case -1:
    break L1;
   case 0:
    {
     i2 = i2 + 1 | 0;
     i3 = 1;
     break;
    }
   default:
    i2 = i2 + i3 | 0;
   }
   i1 = i3 + i1 | 0;
   i5 = i5 + 1 | 0;
   if ((i2 | 0) == (i8 | 0) | i5 >>> 0 >= i9 >>> 0) break L1;
  }
 } while (0);
 return i1 | 0;
}

function _cmpmodes(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 if ((i5 | 0) == (i6 | 0)) {
  i6 = 0;
  return i6 | 0;
 }
 i1 = HEAP32[i5 + 4 >> 2] | 0;
 i2 = HEAP32[i6 + 4 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) {
  i6 = i2 - i1 | 0;
  return i6 | 0;
 }
 i2 = HEAP32[i5 + 8 >> 2] | 0;
 i1 = HEAP32[i6 + 8 >> 2] | 0;
 if ((i1 | 0) != (i2 | 0)) {
  i6 = i1 - i2 | 0;
  return i6 | 0;
 }
 i1 = HEAP32[i5 >> 2] | 0;
 i2 = i1 >>> 8 & 255;
 i4 = HEAP32[i6 >> 2] | 0;
 i3 = i4 >>> 8 & 255;
 if ((i3 | 0) != (i2 | 0)) {
  i6 = i3 - i2 | 0;
  return i6 | 0;
 }
 i2 = i1 >>> 16 & 15;
 i1 = i4 >>> 16 & 15;
 if ((i1 | 0) == (i2 | 0)) return (HEAP32[i6 + 12 >> 2] | 0) - (HEAP32[i5 + 12 >> 2] | 0) | 0;
 i6 = i1 - i2 | 0;
 return i6 | 0;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i3;
 if (HEAP32[i2 + ((HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0) {
  __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_(i1, i2);
  if ((HEAP8[i1 >> 0] | 0) != 0 ? (i4 = HEAP32[i2 + ((HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0, (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 127](i4) | 0) == -1) : 0) {
   i4 = i2 + ((HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) + 16) | 0;
   HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 1;
  }
  __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev(i1);
 }
 STACKTOP = i3;
 return i2 | 0;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i3;
 if (HEAP32[i2 + ((HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i1, i2);
  if ((HEAP8[i1 >> 0] | 0) != 0 ? (i4 = HEAP32[i2 + ((HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0, (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 127](i4) | 0) == -1) : 0) {
   i4 = i2 + ((HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) + 16) | 0;
   HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 1;
  }
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i1);
 }
 STACKTOP = i3;
 return i2 | 0;
}

function _GLES2_SetRenderTarget(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[i1 + 316 >> 2] | 0;
 if (!i2) {
  FUNCTION_TABLE_vii[HEAP32[i1 + 192 >> 2] & 127](36160, HEAP32[i1 + 236 >> 2] | 0);
  i2 = 0;
  STACKTOP = i3;
  return i2 | 0;
 }
 i2 = HEAP32[i2 + 68 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[i1 + 192 >> 2] & 127](36160, HEAP32[(HEAP32[i2 + 40 >> 2] | 0) + 8 >> 2] | 0);
 FUNCTION_TABLE_viiiii[HEAP32[i1 + 196 >> 2] & 7](36160, 36064, HEAP32[i2 + 4 >> 2] | 0, HEAP32[i2 >> 2] | 0, 0);
 if ((FUNCTION_TABLE_ii[HEAP32[i1 + 200 >> 2] & 127](36160) | 0) == 36053) {
  i2 = 0;
  STACKTOP = i3;
  return i2 | 0;
 }
 i2 = _SDL_SetError(47421, i3) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function __ZNSt3__120__shared_ptr_emplaceI17GameObjectManagerNS_9allocatorIS1_EEE16__on_zero_sharedEv(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = i6 + 24 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (i1) {
  i5 = i6 + 28 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) {
   i3 = i2;
   while (1) {
    i2 = i3 + -8 | 0;
    HEAP32[i5 >> 2] = i2;
    i3 = HEAP32[i3 + -4 >> 2] | 0;
    if (i3) {
     __ZNSt3__119__shared_weak_count16__release_sharedEv(i3);
     i2 = HEAP32[i5 >> 2] | 0;
    }
    if ((i2 | 0) == (i1 | 0)) break; else i3 = i2;
   }
   i1 = HEAP32[i4 >> 2] | 0;
  }
  __ZdlPv(i1);
 }
 i1 = HEAP32[i6 + 20 >> 2] | 0;
 if (!i1) return;
 __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
 return;
}

function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2792] | 0) == 0 ? (___cxa_guard_acquire(2792) | 0) != 0 : 0) {
  if ((HEAP8[2800] | 0) == 0 ? (___cxa_guard_acquire(2800) | 0) != 0 : 0) {
   i1 = 33284;
   do {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    i1 = i1 + 12 | 0;
   } while ((i1 | 0) != 33572);
   ___cxa_atexit(355, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(2800);
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(33284, 33572) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(33296, 33584) | 0;
  HEAP32[8399] = 33284;
  ___cxa_guard_release(2792);
 }
 return HEAP32[8399] | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2776] | 0) == 0 ? (___cxa_guard_acquire(2776) | 0) != 0 : 0) {
  if ((HEAP8[2784] | 0) == 0 ? (___cxa_guard_acquire(2784) | 0) != 0 : 0) {
   i1 = 32992;
   do {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    i1 = i1 + 12 | 0;
   } while ((i1 | 0) != 33280);
   ___cxa_atexit(354, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(2784);
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(32992, 63284) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(33004, 63287) | 0;
  HEAP32[8320] = 32992;
  ___cxa_guard_release(2776);
 }
 return HEAP32[8320] | 0;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i1 = i1 + 4 | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i2 = HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0;
 if (((((HEAP32[i3 + (i2 + 24) >> 2] | 0) != 0 ? (HEAP32[i3 + (i2 + 16) >> 2] | 0) == 0 : 0) ? (HEAP32[i3 + (i2 + 4) >> 2] & 8192 | 0) != 0 : 0) ? !(__ZSt18uncaught_exceptionv() | 0) : 0) ? (i3 = HEAP32[i1 >> 2] | 0, i3 = HEAP32[i3 + ((HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0, (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] & 127](i3) | 0) == -1) : 0) {
  i3 = HEAP32[i1 >> 2] | 0;
  i3 = i3 + ((HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0) + 16) | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 1;
 }
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i1 = i1 + 4 | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i2 = HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0;
 if (((((HEAP32[i3 + (i2 + 24) >> 2] | 0) != 0 ? (HEAP32[i3 + (i2 + 16) >> 2] | 0) == 0 : 0) ? (HEAP32[i3 + (i2 + 4) >> 2] & 8192 | 0) != 0 : 0) ? !(__ZSt18uncaught_exceptionv() | 0) : 0) ? (i3 = HEAP32[i1 >> 2] | 0, i3 = HEAP32[i3 + ((HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0, (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] & 127](i3) | 0) == -1) : 0) {
  i3 = HEAP32[i1 >> 2] | 0;
  i3 = i3 + ((HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0) + 16) | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 1;
 }
 return;
}

function _GLES2_UnbindTexture(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i2 = i5 + 316 | 0;
 i7 = HEAP32[i2 >> 2] | 0;
 i4 = HEAP32[i1 + 68 >> 2] | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if ((HEAP32[3491] | 0) != (i1 | 0)) {
  HEAP32[i7 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i5 + 188 >> 2] | 0, i1) | 0) >= 0) {
   HEAP32[3491] = HEAP32[i7 >> 2];
   _GLES2_UpdateViewport(i5) | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   i6 = 4;
  }
 } else {
  i3 = i7;
  i6 = 4;
 }
 if ((i6 | 0) == 4 ? (HEAP32[i3 + 4 >> 2] | 0) != 0 : 0) {
  i1 = i3 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 7]() | 0) != 0);
 }
 FUNCTION_TABLE_vii[HEAP32[i7 + 28 >> 2] & 127](HEAP32[i4 + 4 >> 2] | 0, 0);
 return 0;
}

function _fflush(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 do if (i2) {
  if ((HEAP32[i2 + 76 >> 2] | 0) <= -1) {
   i1 = ___fflush_unlocked(i2) | 0;
   break;
  }
  i3 = (___lockfile(i2) | 0) == 0;
  i1 = ___fflush_unlocked(i2) | 0;
  if (!i3) ___unlockfile(i2);
 } else {
  if (!(HEAP32[5788] | 0)) i1 = 0; else i1 = _fflush(HEAP32[5788] | 0) | 0;
  ___lock(22920);
  i2 = HEAP32[5729] | 0;
  if (i2) do {
   if ((HEAP32[i2 + 76 >> 2] | 0) > -1) i3 = ___lockfile(i2) | 0; else i3 = 0;
   if ((HEAP32[i2 + 20 >> 2] | 0) >>> 0 > (HEAP32[i2 + 28 >> 2] | 0) >>> 0) i1 = ___fflush_unlocked(i2) | 0 | i1;
   if (i3) ___unlockfile(i2);
   i2 = HEAP32[i2 + 56 >> 2] | 0;
  } while ((i2 | 0) != 0);
  ___unlock(22920);
 } while (0);
 return i1 | 0;
}

function _pad(i6, i2, i5, i4, i1) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i3 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i7 = i8;
 do if ((i5 | 0) > (i4 | 0) & (i1 & 73728 | 0) == 0) {
  i1 = i5 - i4 | 0;
  _memset(i7 | 0, i2 | 0, (i1 >>> 0 > 256 ? 256 : i1) | 0) | 0;
  i2 = HEAP32[i6 >> 2] | 0;
  i3 = (i2 & 32 | 0) == 0;
  if (i1 >>> 0 > 255) {
   i4 = i5 - i4 | 0;
   do {
    if (i3) {
     ___fwritex(i7, 256, i6) | 0;
     i2 = HEAP32[i6 >> 2] | 0;
    }
    i1 = i1 + -256 | 0;
    i3 = (i2 & 32 | 0) == 0;
   } while (i1 >>> 0 > 255);
   if (i3) i1 = i4 & 255; else break;
  } else if (!i3) break;
  ___fwritex(i7, i1, i6) | 0;
 } while (0);
 STACKTOP = i8;
 return;
}

function ___remdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i5 | 0;
 i7 = i2 >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i6 = ((i2 | 0) < 0 ? -1 : 0) >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i10 = i4 >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i9 = ((i4 | 0) < 0 ? -1 : 0) >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i1 = _i64Subtract(i7 ^ i1, i6 ^ i2, i7, i6) | 0;
 i2 = tempRet0;
 ___udivmoddi4(i1, i2, _i64Subtract(i10 ^ i3, i9 ^ i4, i10, i9) | 0, tempRet0, i8) | 0;
 i4 = _i64Subtract(HEAP32[i8 >> 2] ^ i7, HEAP32[i8 + 4 >> 2] ^ i6, i7, i6) | 0;
 i3 = tempRet0;
 STACKTOP = i5;
 return (tempRet0 = i3, i4) | 0;
}
function _SDL_TimerQuit() {
 var i1 = 0;
 if (!(HEAP32[3214] | 0)) return;
 HEAP32[3214] = 0;
 if (HEAP32[3174] | 0) {
  _SDL_SemPost(HEAP32[3211] | 0) | 0;
  _SDL_WaitThread(HEAP32[3174] | 0, 0);
  HEAP32[3174] = 0;
 }
 HEAP32[3211] = 0;
 i1 = HEAP32[3215] | 0;
 if (i1) do {
  HEAP32[3215] = HEAP32[i1 + 24 >> 2];
  _SDL_free(i1);
  i1 = HEAP32[3215] | 0;
 } while ((i1 | 0) != 0);
 if (HEAP32[3213] | 0) do {
  i1 = HEAP32[3213] | 0;
  HEAP32[3213] = HEAP32[i1 + 24 >> 2];
  _SDL_free(i1);
 } while ((HEAP32[3213] | 0) != 0);
 i1 = HEAP32[3176] | 0;
 if (i1) do {
  HEAP32[3176] = HEAP32[i1 + 8 >> 2];
  _SDL_free(i1);
  i1 = HEAP32[3176] | 0;
 } while ((i1 | 0) != 0);
 _SDL_DestroyMutex(HEAP32[3177] | 0);
 HEAP32[3177] = 0;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i6, i9, i8, i4, i3, i5, 30952, 30984) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i6, i9, i8, i4, i3, i5, 62978, 62986) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i4, i5, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i6 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i6 + 4 | 0;
 i8 = i6;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i5, i3, 4) | 0;
 if (!(HEAP32[i5 >> 2] & 4)) {
  if ((i1 | 0) < 69) i1 = i1 + 2e3 | 0; else i1 = (i1 + -69 | 0) >>> 0 < 31 ? i1 + 1900 | 0 : i1;
  HEAP32[i7 >> 2] = i1 + -1900;
 }
 STACKTOP = i6;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i4, i5, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i6 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i6 + 4 | 0;
 i8 = i6;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i5, i3, 4) | 0;
 if (!(HEAP32[i5 >> 2] & 4)) {
  if ((i1 | 0) < 69) i1 = i1 + 2e3 | 0; else i1 = (i1 + -69 | 0) >>> 0 < 31 ? i1 + 1900 | 0 : i1;
  HEAP32[i7 >> 2] = i1 + -1900;
 }
 STACKTOP = i6;
 return;
}

function _SDL_AddBasicVideoDisplay(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i3 = i4;
 _SDL_memset(i3, 0, 68) | 0;
 i1 = i3 + 16 | 0;
 if (i2) {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
  HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
 }
 i2 = i3 + 36 | 0;
 HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 i3 = _SDL_AddVideoDisplay(i3) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc(i4, i5, i6, i3, i1, i2) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i10 = i7 + 16 | 0;
 i11 = i7 + 12 | 0;
 i8 = i7;
 i9 = i7 + 8 | 0;
 HEAP32[i11 >> 2] = i10 + 100;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc(i4, i10, i11, i3, i1, i2);
 i2 = i8;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i9 >> 2] = i10;
 i2 = (HEAP32[i6 >> 2] | 0) - i5 >> 2;
 i1 = _uselocale(HEAP32[i4 >> 2] | 0) | 0;
 i2 = _mbsrtowcs(i5, i9, i2, i8) | 0;
 if (i1) _uselocale(i1) | 0;
 HEAP32[i6 >> 2] = i5 + (i2 << 2);
 STACKTOP = i7;
 return;
}

function _cycle(i1, i5, i6) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i2 = i7;
 L1 : do if ((i6 | 0) >= 2 ? (i4 = i5 + (i6 << 2) | 0, HEAP32[i4 >> 2] = i2, (i1 | 0) != 0) : 0) while (1) {
  i3 = i1 >>> 0 > 256 ? 256 : i1;
  _memcpy(i2 | 0, HEAP32[i5 >> 2] | 0, i3 | 0) | 0;
  i2 = 0;
  do {
   i8 = i5 + (i2 << 2) | 0;
   i2 = i2 + 1 | 0;
   _memcpy(HEAP32[i8 >> 2] | 0, HEAP32[i5 + (i2 << 2) >> 2] | 0, i3 | 0) | 0;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i3;
  } while ((i2 | 0) != (i6 | 0));
  if ((i1 | 0) == (i3 | 0)) break L1;
  i1 = i1 - i3 | 0;
  i2 = HEAP32[i4 >> 2] | 0;
 } while (0);
 STACKTOP = i7;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZN11KeyBindings14getKeysPressedEPKhRNSt3__16vectorI6ActionNS2_9allocatorIS4_EEEE(i1, i7, i6) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = HEAP32[i1 + 8 >> 2] | 0;
 if (!i1) return;
 i4 = i6 + 4 | 0;
 i5 = i6 + 8 | 0;
 do {
  i2 = i1;
  do if (HEAP8[i7 + (HEAP32[i2 + 12 >> 2] | 0) >> 0] | 0) {
   i2 = i2 + 8 | 0;
   i3 = HEAP32[i4 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) {
    __ZNSt3__16vectorI6ActionNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i6, i2);
    break;
   } else {
    HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
    HEAP32[i4 >> 2] = i3 + 4;
    break;
   }
  } while (0);
  i1 = HEAP32[i1 >> 2] | 0;
 } while ((i1 | 0) != 0);
 return;
}

function _strcasecmp(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = HEAP8[i2 >> 0] | 0;
 L1 : do if (!(i3 << 24 >> 24)) i2 = 0; else {
  i5 = i3;
  i4 = i3 & 255;
  while (1) {
   i3 = HEAP8[i1 >> 0] | 0;
   if (!(i3 << 24 >> 24)) {
    i2 = i5;
    break L1;
   }
   if (i5 << 24 >> 24 != i3 << 24 >> 24 ? (i5 = _tolower(i4) | 0, (i5 | 0) != (_tolower(HEAPU8[i1 >> 0] | 0) | 0)) : 0) break;
   i2 = i2 + 1 | 0;
   i1 = i1 + 1 | 0;
   i3 = HEAP8[i2 >> 0] | 0;
   if (!(i3 << 24 >> 24)) {
    i2 = 0;
    break L1;
   } else {
    i5 = i3;
    i4 = i3 & 255;
   }
  }
  i2 = HEAP8[i2 >> 0] | 0;
 } while (0);
 i5 = _tolower(i2 & 255) | 0;
 return i5 - (_tolower(HEAPU8[i1 >> 0] | 0) | 0) | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _SDL_CalculateBlit0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((HEAP8[(HEAP32[i1 + 4 >> 2] | 0) + 8 >> 0] | 0) != 1) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = HEAP32[i1 + 52 >> 2] | 0;
 i1 = HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] | 0;
 if ((HEAPU8[i1 + 8 >> 0] | 0) < 8) i1 = 0; else i1 = HEAPU8[i1 + 9 >> 0] | 0;
 switch (HEAP32[i2 + 68 >> 2] & -28673 | 0) {
 case 0:
  {
   i2 = HEAP32[12884 + (i1 << 2) >> 2] | 0;
   return i2 | 0;
  }
 case 256:
  {
   i2 = HEAP32[12904 + (i1 << 2) >> 2] | 0;
   return i2 | 0;
  }
 case 18:
  {
   i2 = i1 >>> 0 > 1 ? 275 : 0;
   return i2 | 0;
  }
 case 274:
  {
   i2 = i1 >>> 0 > 1 ? 276 : 0;
   return i2 | 0;
  }
 default:
  {
   i2 = 0;
   return i2 | 0;
  }
 }
 return 0;
}

function _scalbn(d1, i3) {
 d1 = +d1;
 i3 = i3 | 0;
 var i2 = 0;
 if ((i3 | 0) > 1023) {
  d1 = d1 * 8988465674311579538646525.0e283;
  i2 = i3 + -1023 | 0;
  if ((i2 | 0) > 1023) {
   i2 = i3 + -2046 | 0;
   i2 = (i2 | 0) > 1023 ? 1023 : i2;
   d1 = d1 * 8988465674311579538646525.0e283;
  }
 } else if ((i3 | 0) < -1022) {
  d1 = d1 * 2.2250738585072014e-308;
  i2 = i3 + 1022 | 0;
  if ((i2 | 0) < -1022) {
   i2 = i3 + 2044 | 0;
   i2 = (i2 | 0) < -1022 ? -1022 : i2;
   d1 = d1 * 2.2250738585072014e-308;
  }
 } else i2 = i3;
 i2 = _bitshift64Shl(i2 + 1023 | 0, 0, 52) | 0;
 i3 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = i2;
 HEAP32[tempDoublePtr + 4 >> 2] = i3;
 return +(d1 * +HEAPF64[tempDoublePtr >> 3]);
}

function _SDL_DUMMY_UpdateWindowFramebuffer(i1, i5, i3, i2) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i3 = i4 + 8 | 0;
 i2 = i4 + 16 | 0;
 i1 = _SDL_GetWindowData(i5, 43637) | 0;
 if (!i1) {
  i5 = _SDL_SetError(43655, i4) | 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 if (!(_SDL_getenv(43694) | 0)) {
  i5 = 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 i6 = _SDL_GetWindowID(i5) | 0;
 i5 = (HEAP32[3480] | 0) + 1 | 0;
 HEAP32[3480] = i5;
 HEAP32[i3 >> 2] = i6;
 HEAP32[i3 + 4 >> 2] = i5;
 _SDL_snprintf(i2, 128, 43722, i3) | 0;
 _SDL_SaveBMP_RW(i1, _SDL_RWFromFile(i2, 44569) | 0, 1) | 0;
 i5 = 0;
 STACKTOP = i4;
 return i5 | 0;
}

function ___fseeko_unlocked(i4, i1, i5) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0;
 if ((i5 | 0) == 1) i1 = i1 - (HEAP32[i4 + 8 >> 2] | 0) + (HEAP32[i4 + 4 >> 2] | 0) | 0;
 i3 = i4 + 20 | 0;
 i2 = i4 + 28 | 0;
 if ((HEAP32[i3 >> 2] | 0) >>> 0 > (HEAP32[i2 >> 2] | 0) >>> 0 ? (FUNCTION_TABLE_iiii[HEAP32[i4 + 36 >> 2] & 63](i4, 0, 0) | 0, (HEAP32[i3 >> 2] | 0) == 0) : 0) i1 = -1; else {
  HEAP32[i4 + 16 >> 2] = 0;
  HEAP32[i2 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[i4 + 40 >> 2] & 63](i4, i1, i5) | 0) < 0) i1 = -1; else {
   HEAP32[i4 + 8 >> 2] = 0;
   HEAP32[i4 + 4 >> 2] = 0;
   HEAP32[i4 >> 2] = HEAP32[i4 >> 2] & -17;
   i1 = 0;
  }
 }
 return i1 | 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci(i7, i1, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = i7 + 12 | 0;
 i5 = i7 + 16 | 0;
 L1 : do if ((i6 | 0) > 0) {
  i3 = i1;
  i1 = 0;
  while (1) {
   i2 = HEAP32[i4 >> 2] | 0;
   if (i2 >>> 0 < (HEAP32[i5 >> 2] | 0) >>> 0) {
    HEAP32[i4 >> 2] = i2 + 1;
    i2 = HEAP8[i2 >> 0] | 0;
   } else {
    i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 40 >> 2] & 127](i7) | 0;
    if ((i2 | 0) == -1) break L1;
    i2 = i2 & 255;
   }
   HEAP8[i3 >> 0] = i2;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) < (i6 | 0)) i3 = i3 + 1 | 0; else break;
  }
 } else i1 = 0; while (0);
 return i1 | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi(i7, i1, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i4 = i7 + 24 | 0;
 i5 = i7 + 28 | 0;
 L1 : do if ((i6 | 0) > 0) {
  i3 = i1;
  i1 = 0;
  while (1) {
   i2 = HEAP32[i4 >> 2] | 0;
   if (i2 >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) {
    if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i7 >> 2] | 0) + 52 >> 2] & 63](i7, HEAP32[i3 >> 2] | 0) | 0) == -1) break L1;
   } else {
    i8 = HEAP32[i3 >> 2] | 0;
    HEAP32[i4 >> 2] = i2 + 4;
    HEAP32[i2 >> 2] = i8;
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) < (i6 | 0)) i3 = i3 + 4 | 0; else break;
  }
 } else i1 = 0; while (0);
 return i1 | 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci(i7, i1, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i4 = i7 + 24 | 0;
 i5 = i7 + 28 | 0;
 L1 : do if ((i6 | 0) > 0) {
  i3 = i1;
  i1 = 0;
  while (1) {
   i2 = HEAP32[i4 >> 2] | 0;
   if (i2 >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) {
    if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i7 >> 2] | 0) + 52 >> 2] & 63](i7, HEAPU8[i3 >> 0] | 0) | 0) == -1) break L1;
   } else {
    i8 = HEAP8[i3 >> 0] | 0;
    HEAP32[i4 >> 2] = i2 + 1;
    HEAP8[i2 >> 0] = i8;
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) < (i6 | 0)) i3 = i3 + 1 | 0; else break;
  }
 } else i1 = 0; while (0);
 return i1 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 + -1 | 0) >>> 0 < 12 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 + -1 | 0) >>> 0 < 12 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 L1 : do switch (HEAP32[i2 + 4 >> 2] & 176 | 0) {
 case 16:
  {
   i2 = HEAP8[i1 >> 0] | 0;
   switch (i2 << 24 >> 24) {
   case 43:
   case 45:
    {
     i1 = i1 + 1 | 0;
     break L1;
    }
   default:
    {}
   }
   if ((i3 - i1 | 0) > 1 & i2 << 24 >> 24 == 48) {
    switch (HEAP8[i1 + 1 >> 0] | 0) {
    case 88:
    case 120:
     break;
    default:
     {
      i4 = 7;
      break L1;
     }
    }
    i1 = i1 + 2 | 0;
   } else i4 = 7;
   break;
  }
 case 32:
  {
   i1 = i3;
   break;
  }
 default:
  i4 = 7;
 } while (0);
 return i1 | 0;
}

function _SDL_AllocPalette(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5;
 if ((i4 | 0) < 1) {
  HEAP32[i1 >> 2] = 40454;
  _SDL_SetError(41366, i1) | 0;
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 i1 = _SDL_malloc(16) | 0;
 if (!i1) {
  _SDL_Error(0) | 0;
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 i2 = i4 << 2;
 i3 = _SDL_malloc(i2) | 0;
 HEAP32[i1 + 4 >> 2] = i3;
 if (!i3) {
  _SDL_free(i1);
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 } else {
  HEAP32[i1 >> 2] = i4;
  HEAP32[i1 + 8 >> 2] = 1;
  HEAP32[i1 + 12 >> 2] = 1;
  _SDL_memset(i3, 255, i2) | 0;
  i4 = i1;
  STACKTOP = i5;
  return i4 | 0;
 }
 return 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i4, i7, i3) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i3, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 + -1 | 0) >>> 0 < 31 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i4, i7, i3) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i3, 3) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 366 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i4, i7, i3) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i3, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 + -1 | 0) >>> 0 < 31 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i4, i7, i3) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i3, 3) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 366 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i4 + 4 | 0;
 i5 = i4;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev(i3);
 HEAP32[i3 >> 2] = 28268;
 HEAP32[i3 + 32 >> 2] = i1;
 __ZNSt3__16localeC2ERKS0_(i6, i3 + 4 | 0);
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 30452) | 0;
 __ZNSt3__16localeD2Ev(i5);
 HEAP32[i3 + 36 >> 2] = i1;
 HEAP32[i3 + 40 >> 2] = i2;
 HEAP8[i3 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i1) | 0) & 1;
 STACKTOP = i4;
 return;
}

function __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i4 + 4 | 0;
 i5 = i4;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(i3);
 HEAP32[i3 >> 2] = 28396;
 HEAP32[i3 + 32 >> 2] = i1;
 __ZNSt3__16localeC2ERKS0_(i6, i3 + 4 | 0);
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 30444) | 0;
 __ZNSt3__16localeD2Ev(i5);
 HEAP32[i3 + 36 >> 2] = i1;
 HEAP32[i3 + 40 >> 2] = i2;
 HEAP8[i3 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i1) | 0) & 1;
 STACKTOP = i4;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 13 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1 + -1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 13 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1 + -1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function _frexp(d1, i5) {
 d1 = +d1;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i4 = _bitshift64Lshr(i2 | 0, i3 | 0, 52) | 0;
 i4 = i4 & 2047;
 switch (i4 | 0) {
 case 0:
  {
   if (d1 != 0.0) {
    d1 = +_frexp(d1 * 18446744073709551616.0, i5);
    i2 = (HEAP32[i5 >> 2] | 0) + -64 | 0;
   } else i2 = 0;
   HEAP32[i5 >> 2] = i2;
   break;
  }
 case 2047:
  break;
 default:
  {
   HEAP32[i5 >> 2] = i4 + -1022;
   HEAP32[tempDoublePtr >> 2] = i2;
   HEAP32[tempDoublePtr + 4 >> 2] = i3 & -2146435073 | 1071644672;
   d1 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +d1;
}

function _SDL_SetClipRect(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i4;
 if (!i1) {
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 i1 = i1 + 36 | 0;
 if (!i3) {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
  i3 = 1;
  STACKTOP = i4;
  return i3 | 0;
 } else {
  i3 = _SDL_IntersectRect(i3, i2, i1) | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 return 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi(i7, i1, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = i7 + 12 | 0;
 i5 = i7 + 16 | 0;
 L1 : do if ((i6 | 0) > 0) {
  i3 = i1;
  i1 = 0;
  while (1) {
   i2 = HEAP32[i4 >> 2] | 0;
   if (i2 >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) {
    i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 40 >> 2] & 127](i7) | 0;
    if ((i2 | 0) == -1) break L1;
   } else {
    HEAP32[i4 >> 2] = i2 + 4;
    i2 = HEAP32[i2 >> 2] | 0;
   }
   HEAP32[i3 >> 2] = i2;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) < (i6 | 0)) i3 = i3 + 4 | 0; else break;
  }
 } else i1 = 0; while (0);
 return i1 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 1) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 7 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 61 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 60 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 1) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 7 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 61 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 60 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 24 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 24 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function _ungetc(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 do if ((i1 | 0) != -1) {
  if ((HEAP32[i5 + 76 >> 2] | 0) > -1) i4 = ___lockfile(i5) | 0; else i4 = 0;
  if (!((HEAP32[i5 + 8 >> 2] | 0) == 0 ? (___toread(i5) | 0) != 0 : 0)) i6 = 6;
  if ((i6 | 0) == 6 ? (i2 = i5 + 4 | 0, i3 = HEAP32[i2 >> 2] | 0, i3 >>> 0 > ((HEAP32[i5 + 44 >> 2] | 0) + -8 | 0) >>> 0) : 0) {
   i6 = i3 + -1 | 0;
   HEAP32[i2 >> 2] = i6;
   HEAP8[i6 >> 0] = i1;
   HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -17;
   if (!i4) break;
   ___unlockfile(i5);
   break;
  }
  if (i4) {
   ___unlockfile(i5);
   i1 = -1;
  } else i1 = -1;
 } else i1 = -1; while (0);
 return i1 | 0;
}

function _atoi(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 while (1) {
  i2 = i1 + 1 | 0;
  if (!(_isspace(HEAP8[i1 >> 0] | 0) | 0)) break; else i1 = i2;
 }
 i3 = HEAP8[i1 >> 0] | 0;
 switch (i3 << 24 >> 24 | 0) {
 case 45:
  {
   i4 = 1;
   i5 = 5;
   break;
  }
 case 43:
  {
   i4 = 0;
   i5 = 5;
   break;
  }
 default:
  i4 = 0;
 }
 if ((i5 | 0) == 5) {
  i1 = i2;
  i3 = HEAP8[i2 >> 0] | 0;
 }
 i2 = (i3 << 24 >> 24) + -48 | 0;
 if (i2 >>> 0 < 10) {
  i3 = i1;
  i1 = 0;
  do {
   i3 = i3 + 1 | 0;
   i1 = (i1 * 10 | 0) - i2 | 0;
   i2 = (HEAP8[i3 >> 0] | 0) + -48 | 0;
  } while (i2 >>> 0 < 10);
 } else i1 = 0;
 return ((i4 | 0) != 0 ? i1 : 0 - i1 | 0) | 0;
}

function _dollarDifference(i4, i5, d1) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 d1 = +d1;
 var d2 = 0.0, i3 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, i9 = 0, i10 = 0;
 d2 = d1;
 d1 = 0.0;
 i3 = 0;
 do {
  i10 = i4 + (i3 << 3) | 0;
  d8 = +HEAPF32[i10 >> 2];
  d8 = d8 * +_SDL_cos(d2);
  i9 = i4 + (i3 << 3) + 4 | 0;
  d7 = +HEAPF32[i9 >> 2];
  d7 = d8 - d7 * +_SDL_sin(d2);
  d8 = +HEAPF32[i10 >> 2];
  d8 = d8 * +_SDL_sin(d2);
  d6 = +HEAPF32[i9 >> 2];
  d6 = d8 + d6 * +_SDL_cos(d2);
  d7 = d7 - +HEAPF32[i5 + (i3 << 3) >> 2];
  d6 = d6 - +HEAPF32[i5 + (i3 << 3) + 4 >> 2];
  d1 = d1 + +_SDL_sqrt(d7 * d7 + d6 * d6);
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 64);
 return +(d1 * .015625);
}

function _SDL_GetTouch(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8;
 i6 = HEAP32[3034] | 0;
 L1 : do if ((i6 | 0) > 0) {
  i5 = HEAP32[3035] | 0;
  i1 = 0;
  while (1) {
   i2 = HEAP32[i5 + (i1 << 2) >> 2] | 0;
   i9 = i2;
   if ((HEAP32[i9 >> 2] | 0) == (i3 | 0) ? (HEAP32[i9 + 4 >> 2] | 0) == (i4 | 0) : 0) break;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i6 | 0)) break L1;
  }
  if ((i1 | 0) > -1 & (i1 | 0) < (i6 | 0)) {
   i9 = i2;
   STACKTOP = i8;
   return i9 | 0;
  }
 } while (0);
 _SDL_SetError(36782, i7) | 0;
 i9 = 0;
 STACKTOP = i8;
 return i9 | 0;
}

function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj(i2, i5, i6) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var d1 = 0.0, i3 = 0, i4 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8;
 do if ((i2 | 0) == (i5 | 0)) {
  HEAP32[i6 >> 2] = 4;
  d1 = 0.0;
 } else {
  i3 = ___errno_location() | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = 0;
  d1 = +_strtold_l(i2, i7, __ZNSt3__16__clocEv() | 0);
  i2 = HEAP32[i3 >> 2] | 0;
  if (!i2) HEAP32[i3 >> 2] = i4;
  if ((HEAP32[i7 >> 2] | 0) != (i5 | 0)) {
   HEAP32[i6 >> 2] = 4;
   d1 = 0.0;
   break;
  }
  if ((i2 | 0) == 34) HEAP32[i6 >> 2] = 4;
 } while (0);
 STACKTOP = i8;
 return +d1;
}

function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj(i2, i5, i6) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var d1 = 0.0, i3 = 0, i4 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8;
 do if ((i2 | 0) != (i5 | 0)) {
  i3 = ___errno_location() | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = 0;
  d1 = +_strtold_l(i2, i7, __ZNSt3__16__clocEv() | 0);
  i2 = HEAP32[i3 >> 2] | 0;
  if (!i2) HEAP32[i3 >> 2] = i4;
  if ((HEAP32[i7 >> 2] | 0) != (i5 | 0)) {
   HEAP32[i6 >> 2] = 4;
   d1 = 0.0;
   break;
  }
  if ((i2 | 0) == 34) HEAP32[i6 >> 2] = 4;
 } else {
  HEAP32[i6 >> 2] = 4;
  d1 = 0.0;
 } while (0);
 STACKTOP = i8;
 return +d1;
}

function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj(i2, i5, i6) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var d1 = 0.0, i3 = 0, i4 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8;
 do if ((i2 | 0) != (i5 | 0)) {
  i3 = ___errno_location() | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = 0;
  d1 = +_strtold_l(i2, i7, __ZNSt3__16__clocEv() | 0);
  i2 = HEAP32[i3 >> 2] | 0;
  if (!i2) HEAP32[i3 >> 2] = i4;
  if ((HEAP32[i7 >> 2] | 0) != (i5 | 0)) {
   HEAP32[i6 >> 2] = 4;
   d1 = 0.0;
   break;
  }
  if ((i2 | 0) == 34) HEAP32[i6 >> 2] = 4;
 } else {
  HEAP32[i6 >> 2] = 4;
  d1 = 0.0;
 } while (0);
 STACKTOP = i8;
 return +d1;
}

function _GLES2_RenderPresent(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = i6 + 316 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i4 = HEAP32[i2 >> 2] | 0;
 if ((HEAP32[3491] | 0) != (i4 | 0)) {
  HEAP32[i2 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i6 + 188 >> 2] | 0, i4) | 0) >= 0) {
   HEAP32[3491] = HEAP32[i2 >> 2];
   _GLES2_UpdateViewport(i6) | 0;
   i3 = HEAP32[i1 >> 2] | 0;
   i5 = 4;
  }
 } else {
  i3 = i2;
  i5 = 4;
 }
 if ((i5 | 0) == 4 ? (HEAP32[i3 + 4 >> 2] | 0) != 0 : 0) {
  i1 = i3 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 7]() | 0) != 0);
 }
 _SDL_GL_SwapWindow(HEAP32[i6 + 188 >> 2] | 0);
 return;
}

function ___fflush_unlocked(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = i7 + 20 | 0;
 i5 = i7 + 28 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 > (HEAP32[i5 >> 2] | 0) >>> 0 ? (FUNCTION_TABLE_iiii[HEAP32[i7 + 36 >> 2] & 63](i7, 0, 0) | 0, (HEAP32[i1 >> 2] | 0) == 0) : 0) i1 = -1; else {
  i6 = i7 + 4 | 0;
  i2 = HEAP32[i6 >> 2] | 0;
  i3 = i7 + 8 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if (i2 >>> 0 < i4 >>> 0) FUNCTION_TABLE_iiii[HEAP32[i7 + 40 >> 2] & 63](i7, i2 - i4 | 0, 1) | 0;
  HEAP32[i7 + 16 >> 2] = 0;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  i1 = 0;
 }
 return i1 | 0;
}

function runPostSets() {}
function _memcpy(i1, i4, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if ((i2 | 0) >= 4096) return _emscripten_memcpy_big(i1 | 0, i4 | 0, i2 | 0) | 0;
 i3 = i1 | 0;
 if ((i1 & 3) == (i4 & 3)) {
  while (i1 & 3) {
   if (!i2) return i3 | 0;
   HEAP8[i1 >> 0] = HEAP8[i4 >> 0] | 0;
   i1 = i1 + 1 | 0;
   i4 = i4 + 1 | 0;
   i2 = i2 - 1 | 0;
  }
  while ((i2 | 0) >= 4) {
   HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
   i1 = i1 + 4 | 0;
   i4 = i4 + 4 | 0;
   i2 = i2 - 4 | 0;
  }
 }
 while ((i2 | 0) > 0) {
  HEAP8[i1 >> 0] = HEAP8[i4 >> 0] | 0;
  i1 = i1 + 1 | 0;
  i4 = i4 + 1 | 0;
  i2 = i2 - 1 | 0;
 }
 return i3 | 0;
}

function _SDL_LoadFunction(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i5;
 i1 = _dlsym(i2 | 0, i3 | 0) | 0;
 if (i1) {
  i4 = i1;
  STACKTOP = i5;
  return i4 | 0;
 }
 i6 = (_SDL_strlen(i3) | 0) + 2 | 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i6 | 0) + 15 & -16) | 0;
 HEAP8[i1 >> 0] = 95;
 _SDL_strlcpy(i1 + 1 | 0, i3, i6) | 0;
 i1 = _dlsym(i2 | 0, i1 | 0) | 0;
 if (i1) {
  i6 = i1;
  STACKTOP = i5;
  return i6 | 0;
 }
 i6 = _dlerror() | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i4 + 4 >> 2] = i6;
 _SDL_SetError(43745, i4) | 0;
 i6 = 0;
 STACKTOP = i5;
 return i6 | 0;
}

function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_(i3, i1, i6, i2, i5) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i4 = 0, i7 = 0;
 L1 : do if ((i2 | 0) == (i5 | 0)) i7 = 6; else while (1) {
  if ((i1 | 0) == (i6 | 0)) {
   i1 = -1;
   break L1;
  }
  i3 = HEAP8[i1 >> 0] | 0;
  i4 = HEAP8[i2 >> 0] | 0;
  if (i3 << 24 >> 24 < i4 << 24 >> 24) {
   i1 = -1;
   break L1;
  }
  if (i4 << 24 >> 24 < i3 << 24 >> 24) {
   i1 = 1;
   break L1;
  }
  i1 = i1 + 1 | 0;
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == (i5 | 0)) {
   i7 = 6;
   break;
  }
 } while (0);
 if ((i7 | 0) == 6) i1 = (i1 | 0) != (i6 | 0) & 1;
 return i1 | 0;
}

function _SDL_EGL_MakeCurrent(i1, i4, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i2 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[i1 + 644 >> 2] | 0;
 if (!i1) {
  i4 = _SDL_SetError(40100, i5) | 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 i2 = HEAP32[i1 + 56 >> 2] | 0;
 i1 = HEAP32[i1 + 8 >> 2] | 0;
 if (!((i4 | 0) != 0 & (i3 | 0) != 0)) {
  FUNCTION_TABLE_iiiii[i2 & 31](i1, 0, 0, 0) | 0;
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 if (FUNCTION_TABLE_iiiii[i2 & 31](i1, i4, i4, i3) | 0) {
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 i4 = _SDL_SetError(40123, i5 + 8 | 0) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _strtox(i7, i6, i1) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var d2 = 0.0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i5 = i8;
 i3 = i5;
 i4 = i3 + 112 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 i3 = i5 + 4 | 0;
 HEAP32[i3 >> 2] = i7;
 i4 = i5 + 8 | 0;
 HEAP32[i4 >> 2] = -1;
 HEAP32[i5 + 44 >> 2] = i7;
 HEAP32[i5 + 76 >> 2] = -1;
 ___shlim(i5, 0);
 d2 = +___floatscan(i5, i1, 1);
 i1 = (HEAP32[i3 >> 2] | 0) - (HEAP32[i4 >> 2] | 0) + (HEAP32[i5 + 108 >> 2] | 0) | 0;
 if (i6) HEAP32[i6 >> 2] = (i1 | 0) != 0 ? i7 + i1 | 0 : i7;
 STACKTOP = i8;
 return +d2;
}

function _fopen(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i5 + 16 | 0;
 i2 = i5;
 if (_memchr(58379, HEAP8[i3 >> 0] | 0, 4) | 0) {
  i6 = ___fmodeflags(i3) | 0 | 32768;
  HEAP32[i2 >> 2] = i1;
  HEAP32[i2 + 4 >> 2] = i6;
  HEAP32[i2 + 8 >> 2] = 438;
  i2 = ___syscall_ret(___syscall5(5, i2 | 0) | 0) | 0;
  if ((i2 | 0) >= 0) {
   i1 = ___fdopen(i2, i3) | 0;
   if (!i1) {
    HEAP32[i4 >> 2] = i2;
    ___syscall6(6, i4 | 0) | 0;
    i1 = 0;
   }
  } else i1 = 0;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  i1 = 0;
 }
 STACKTOP = i5;
 return i1 | 0;
}

function _SDL_EGL_GetProcAddress(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 i3 = i1 + 644 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i2 = HEAP32[i1 + 32 >> 2] | 0;
 do if (i2) {
  i1 = FUNCTION_TABLE_ii[i2 & 127](i4) | 0;
  if (!i1) {
   i1 = HEAP32[i3 >> 2] | 0;
   break;
  } else {
   i4 = i1;
   return i4 | 0;
  }
 } while (0);
 i1 = _SDL_LoadFunction(HEAP32[i1 >> 2] | 0, i4) | 0;
 if (i1) {
  i4 = i1;
  return i4 | 0;
 }
 if ((_SDL_strlen(i4) | 0) >>> 0 >= 1023) {
  i4 = 0;
  return i4 | 0;
 }
 HEAP8[39013] = 95;
 _SDL_strlcpy(39014, i4, 1022) | 0;
 i4 = _SDL_LoadFunction(HEAP32[HEAP32[i3 >> 2] >> 2] | 0, 39013) | 0;
 return i4 | 0;
}

function __ZNSt3__16locale5__impD2Ev(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 HEAP32[i5 >> 2] = 30360;
 i3 = i5 + 8 | 0;
 i4 = i5 + 12 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[i4 >> 2] | 0) != (i1 | 0)) {
  i2 = 0;
  do {
   i1 = HEAP32[i1 + (i2 << 2) >> 2] | 0;
   if (i1) __ZNSt3__114__shared_count16__release_sharedEv(i1) | 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i3 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i4 >> 2] | 0) - i1 >> 2 >>> 0);
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i5 + 144 | 0);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev(i3);
 return;
}

function _SDL_SYS_JoystickGetDeviceGUID(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i5;
 i1 = HEAP32[3481] | 0;
 if ((i2 | 0) > 0) while (1) {
  i1 = HEAP32[i1 + 1320 >> 2] | 0;
  if ((i2 | 0) > 1) i2 = i2 + -1 | 0; else break;
 }
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 _SDL_memset(i4, 0, 16) | 0;
 if ((_SDL_strlen(i1) | 0) >>> 0 > 16) i2 = 16; else i2 = _SDL_strlen(i1) | 0;
 _SDL_memcpy(i4, i1, i2) | 0;
 i1 = i4;
 i2 = i3 + 16 | 0;
 do {
  HEAP8[i3 >> 0] = HEAP8[i1 >> 0] | 0;
  i3 = i3 + 1 | 0;
  i1 = i1 + 1 | 0;
 } while ((i3 | 0) < (i2 | 0));
 STACKTOP = i5;
 return;
}

function _vasprintf(i7, i6, i5) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i8;
 i2 = _malloc(240) | 0;
 do if (i2) {
  HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
  i1 = _vsnprintf(i2, 240, i6, i1) | 0;
  if (i1 >>> 0 < 240) {
   i6 = _realloc(i2, i1 + 1 | 0) | 0;
   HEAP32[i7 >> 2] = (i6 | 0) != 0 ? i6 : i2;
   break;
  }
  _free(i2);
  if ((i1 | 0) >= 0 ? (i4 = i1 + 1 | 0, i3 = _malloc(i4) | 0, HEAP32[i7 >> 2] = i3, (i3 | 0) != 0) : 0) i1 = _vsnprintf(i3, i4, i6, i5) | 0; else i1 = -1;
 } else i1 = -1; while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function _SDL_OpenedAudioDeviceDisconnected(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i3 = i4;
 i1 = i2 + 136 | 0;
 if (!(HEAP32[i1 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[6184 >> 2] & 511](i2);
 HEAP32[i1 >> 2] = 0;
 FUNCTION_TABLE_vi[HEAP32[6188 >> 2] & 511](i2);
 if ((_SDL_EventState(4353, -1) | 0) << 24 >> 24 != 1) {
  STACKTOP = i4;
  return;
 }
 _SDL_memset(i3, 0, 56) | 0;
 HEAP32[i3 >> 2] = 4353;
 HEAP32[i3 + 8 >> 2] = HEAP32[i2 >> 2];
 HEAP8[i3 + 12 >> 0] = (HEAP32[i2 + 132 >> 2] | 0) != 0 & 1;
 _SDL_PushEvent(i3) | 0;
 STACKTOP = i4;
 return;
}

function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_(i3, i1, i6, i2, i5) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i4 = 0, i7 = 0;
 L1 : do if ((i2 | 0) == (i5 | 0)) i7 = 6; else while (1) {
  if ((i1 | 0) == (i6 | 0)) {
   i1 = -1;
   break L1;
  }
  i3 = HEAP32[i1 >> 2] | 0;
  i4 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) < (i4 | 0)) {
   i1 = -1;
   break L1;
  }
  if ((i4 | 0) < (i3 | 0)) {
   i1 = 1;
   break L1;
  }
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
  if ((i2 | 0) == (i5 | 0)) {
   i7 = 6;
   break;
  }
 } while (0);
 if ((i7 | 0) == 6) i1 = (i1 | 0) != (i6 | 0) & 1;
 return i1 | 0;
}

function _SDL_GL_SetSwapInterval(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = HEAP32[3256] | 0;
 if (!i1) {
  i3 = _SDL_SetError(41242, i4) | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 if (!(_SDL_TLSGet(HEAP32[i1 + 632 >> 2] | 0) | 0)) {
  i3 = _SDL_SetError(41890, i4 + 8 | 0) | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 i2 = HEAP32[3256] | 0;
 i1 = HEAP32[i2 + 160 >> 2] | 0;
 if (!i1) {
  i3 = _SDL_SetError(41930, i4 + 16 | 0) | 0;
  STACKTOP = i4;
  return i3 | 0;
 } else {
  i3 = FUNCTION_TABLE_iii[i1 & 63](i2, i3) | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 return 0;
}

function _SDL_CalculateBlit1(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 52 >> 2] | 0;
 i1 = HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] | 0;
 if ((HEAPU8[i1 + 8 >> 0] | 0) < 8) i1 = 0; else i1 = HEAPU8[i1 + 9 >> 0] | 0;
 switch (HEAP32[i2 + 68 >> 2] & -28673 | 0) {
 case 0:
  {
   i2 = HEAP32[12924 + (i1 << 2) >> 2] | 0;
   return i2 | 0;
  }
 case 256:
  {
   i2 = HEAP32[12944 + (i1 << 2) >> 2] | 0;
   return i2 | 0;
  }
 case 18:
  {
   i2 = i1 >>> 0 > 1 ? 277 : 0;
   return i2 | 0;
  }
 case 274:
  {
   i2 = i1 >>> 0 > 1 ? 278 : 0;
   return i2 | 0;
  }
 default:
  {
   i2 = 0;
   return i2 | 0;
  }
 }
 return 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 4) | 0;
 if (!(HEAP32[i6 >> 2] & 4)) HEAP32[i7 >> 2] = i1 + -1900;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 4) | 0;
 if (!(HEAP32[i6 >> 2] & 4)) HEAP32[i7 >> 2] = i1 + -1900;
 STACKTOP = i5;
 return;
}

function _SDL_GameControllerGetAxisFromString(i1) {
 i1 = i1 | 0;
 if (!i1) {
  i1 = -1;
  return i1 | 0;
 }
 if (!(HEAP8[i1 >> 0] | 0)) {
  i1 = -1;
  return i1 | 0;
 }
 if (!(_SDL_strcasecmp(i1, 36867) | 0)) {
  i1 = 0;
  return i1 | 0;
 }
 if (!(_SDL_strcasecmp(i1, 36873) | 0)) {
  i1 = 1;
  return i1 | 0;
 }
 if (!(_SDL_strcasecmp(i1, 36879) | 0)) {
  i1 = 2;
  return i1 | 0;
 }
 if (!(_SDL_strcasecmp(i1, 36886) | 0)) {
  i1 = 3;
  return i1 | 0;
 }
 if (!(_SDL_strcasecmp(i1, 36893) | 0)) {
  i1 = 4;
  return i1 | 0;
 } else {
  i1 = (_SDL_strcasecmp(i1, 36905) | 0) == 0;
  return (i1 ? 5 : -1) | 0;
 }
 return 0;
}

function _realloc(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0;
 if (!i3) {
  i3 = _malloc(i2) | 0;
  return i3 | 0;
 }
 if (i2 >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12;
  i3 = 0;
  return i3 | 0;
 }
 i1 = _try_realloc_chunk(i3 + -8 | 0, i2 >>> 0 < 11 ? 16 : i2 + 11 & -8) | 0;
 if (i1) {
  i3 = i1 + 8 | 0;
  return i3 | 0;
 }
 i1 = _malloc(i2) | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 i4 = HEAP32[i3 + -4 >> 2] | 0;
 i4 = (i4 & -8) - ((i4 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy(i1 | 0, i3 | 0, (i4 >>> 0 < i2 >>> 0 ? i4 : i2) | 0) | 0;
 _free(i3);
 i3 = i1;
 return i3 | 0;
}

function ___divdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = i2 >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i9 = ((i2 | 0) < 0 ? -1 : 0) >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i6 = i4 >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i5 = ((i4 | 0) < 0 ? -1 : 0) >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i8 = _i64Subtract(i10 ^ i1, i9 ^ i2, i10, i9) | 0;
 i7 = tempRet0;
 i1 = i6 ^ i10;
 i2 = i5 ^ i9;
 return _i64Subtract((___udivmoddi4(i8, i7, _i64Subtract(i6 ^ i3, i5 ^ i4, i6, i5) | 0, tempRet0, 0) | 0) ^ i1, tempRet0 ^ i2, i1, i2) | 0;
}

function _SDL_DestroyRenderer(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i4;
 if ((i3 | 0) != 0 ? (HEAP32[i3 >> 2] | 0) == 37791 : 0) {
  _SDL_DelEventWatch(22, i3);
  i2 = i3 + 300 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i1) do {
   _SDL_DestroyTexture(i1);
   i1 = HEAP32[i2 >> 2] | 0;
  } while ((i1 | 0) != 0);
  i1 = HEAP32[i3 + 188 >> 2] | 0;
  if (i1) _SDL_SetWindowData(i1, 37632, 0) | 0;
  HEAP32[i3 >> 2] = 0;
  FUNCTION_TABLE_vi[HEAP32[i3 + 92 >> 2] & 511](i3);
  STACKTOP = i4;
  return;
 }
 _SDL_SetError(37792, i1) | 0;
 STACKTOP = i4;
 return;
}

function _getc(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 if ((HEAP32[i3 + 76 >> 2] | 0) >= 0 ? (___lockfile(i3) | 0) != 0 : 0) {
  i1 = i3 + 4 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i3 + 8 >> 2] | 0) >>> 0) {
   HEAP32[i1 >> 2] = i2 + 1;
   i1 = HEAPU8[i2 >> 0] | 0;
  } else i1 = ___uflow(i3) | 0;
 } else i4 = 3;
 do if ((i4 | 0) == 3) {
  i1 = i3 + 4 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i3 + 8 >> 2] | 0) >>> 0) {
   HEAP32[i1 >> 2] = i2 + 1;
   i1 = HEAPU8[i2 >> 0] | 0;
   break;
  } else {
   i1 = ___uflow(i3) | 0;
   break;
  }
 } while (0);
 return i1 | 0;
}

function ___toread(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = i3 + 74 | 0;
 i2 = HEAP8[i1 >> 0] | 0;
 HEAP8[i1 >> 0] = i2 + 255 | i2;
 i1 = i3 + 20 | 0;
 i2 = i3 + 44 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 > (HEAP32[i2 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[i3 + 36 >> 2] & 63](i3, 0, 0) | 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i3 + 28 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (i1 & 20) if (!(i1 & 4)) i1 = -1; else {
  HEAP32[i3 >> 2] = i1 | 32;
  i1 = -1;
 } else {
  i1 = HEAP32[i2 >> 2] | 0;
  HEAP32[i3 + 8 >> 2] = i1;
  HEAP32[i3 + 4 >> 2] = i1;
  i1 = 0;
 }
 return i1 | 0;
}

function __ZN11KeyBindings4bindE6Actioni(i4, i3, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 i1 = __Znwj(16) | 0;
 HEAP32[i1 + 8 >> 2] = i3;
 HEAP32[i1 + 12 >> 2] = i2;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeI6ActioniEENS_22__unordered_map_hasherIS2_S3_13EnumClassHashLb1EEENS_21__unordered_map_equalIS2_S3_NS_8equal_toIS2_EELb1EEENS_9allocatorIS3_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS3_PvEE(i6, i4, i1);
 if (HEAP8[i6 + 4 >> 0] | 0) {
  STACKTOP = i5;
  return;
 }
 __ZdlPv(i1);
 STACKTOP = i5;
 return;
}

function _SDL_SetMouseFocus(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = HEAP32[3016] | 0;
 if ((i1 | 0) == (i2 | 0)) return;
 if (i1) _SDL_SendWindowEvent(i1, 11, 0, 0) | 0;
 HEAP32[3016] = i2;
 if ((i2 | 0) != 0 ? (_SDL_SendWindowEvent(i2, 10, 0, 0) | 0, (HEAP32[3016] | 0) != 0) : 0) i1 = 12120; else i1 = 12116;
 i1 = HEAP32[i1 >> 2] | 0;
 i2 = HEAP32[3007] | 0;
 i3 = (i2 | 0) == 0;
 if ((i1 | 0) != 0 & (HEAP32[3031] | 0) != 0 & (HEAP32[3024] | 0) == 0) {
  if (i3) return;
  FUNCTION_TABLE_ii[i2 & 127](i1) | 0;
  return;
 } else {
  if (i3) return;
  FUNCTION_TABLE_ii[i2 & 127](0) | 0;
  return;
 }
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i5, i4, i3) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP8[i5 >> 0] | 0;
 i2 = (i1 & 1) == 0;
 if (i2) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i5 + 4 >> 2] | 0;
 do if (i1 >>> 0 >= i4 >>> 0) if (i2) {
  HEAP8[i5 + 1 + i4 >> 0] = 0;
  HEAP8[i5 >> 0] = i4 << 1;
  break;
 } else {
  HEAP8[(HEAP32[i5 + 8 >> 2] | 0) + i4 >> 0] = 0;
  HEAP32[i5 + 4 >> 2] = i4;
  break;
 } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc(i5, i4 - i1 | 0, i3) | 0; while (0);
 return;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(i1, i4, i3, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i2 = 0;
 i1 = i4 + 16 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 do if (i2) {
  if ((i2 | 0) != (i3 | 0)) {
   i5 = i4 + 36 | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
   HEAP32[i4 + 24 >> 2] = 2;
   HEAP8[i4 + 54 >> 0] = 1;
   break;
  }
  i1 = i4 + 24 | 0;
  if ((HEAP32[i1 >> 2] | 0) == 2) HEAP32[i1 >> 2] = i5;
 } else {
  HEAP32[i1 >> 2] = i3;
  HEAP32[i4 + 24 >> 2] = i5;
  HEAP32[i4 + 36 >> 2] = 1;
 } while (0);
 return;
}

function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i4 + 4 | 0;
 i5 = i4;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev(i3);
 HEAP32[i3 >> 2] = 28332;
 HEAP32[i3 + 32 >> 2] = i1;
 HEAP32[i3 + 40 >> 2] = i2;
 HEAP32[i3 + 48 >> 2] = -1;
 HEAP8[i3 + 52 >> 0] = 0;
 __ZNSt3__16localeC2ERKS0_(i6, i3 + 4 | 0);
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE(i3, i5);
 __ZNSt3__16localeD2Ev(i5);
 STACKTOP = i4;
 return;
}

function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i4 + 4 | 0;
 i5 = i4;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(i3);
 HEAP32[i3 >> 2] = 28460;
 HEAP32[i3 + 32 >> 2] = i1;
 HEAP32[i3 + 40 >> 2] = i2;
 HEAP32[i3 + 48 >> 2] = -1;
 HEAP8[i3 + 52 >> 0] = 0;
 __ZNSt3__16localeC2ERKS0_(i6, i3 + 4 | 0);
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE(i3, i5);
 __ZNSt3__16localeD2Ev(i5);
 STACKTOP = i4;
 return;
}

function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc(i9, i5, i6, i7, i3, i4) {
 i9 = i9 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i8 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i10;
 HEAP8[i8 >> 0] = 37;
 i1 = i8 + 1 | 0;
 HEAP8[i1 >> 0] = i3;
 i2 = i8 + 2 | 0;
 HEAP8[i2 >> 0] = i4;
 HEAP8[i8 + 3 >> 0] = 0;
 if (i4 << 24 >> 24) {
  HEAP8[i1 >> 0] = i4;
  HEAP8[i2 >> 0] = i3;
 }
 HEAP32[i6 >> 2] = i5 + (_strftime_l(i5 | 0, (HEAP32[i6 >> 2] | 0) - i5 | 0, i8 | 0, i7 | 0, HEAP32[i9 >> 2] | 0) | 0);
 STACKTOP = i10;
 return;
}

function _strtox530(i8, i7, i3, i1, i2) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i6 = i9;
 HEAP32[i6 >> 2] = 0;
 i4 = i6 + 4 | 0;
 HEAP32[i4 >> 2] = i8;
 HEAP32[i6 + 44 >> 2] = i8;
 i5 = i6 + 8 | 0;
 HEAP32[i5 >> 2] = (i8 | 0) < 0 ? -1 : i8 + 2147483647 | 0;
 HEAP32[i6 + 76 >> 2] = -1;
 ___shlim(i6, 0);
 i1 = ___intscan(i6, i3, 1, i1, i2) | 0;
 if (i7) HEAP32[i7 >> 2] = i8 + ((HEAP32[i4 >> 2] | 0) + (HEAP32[i6 + 108 >> 2] | 0) - (HEAP32[i5 >> 2] | 0));
 STACKTOP = i9;
 return i1 | 0;
}

function _SDL_SendKeyboardText(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i2 = i4;
 i1 = HEAP8[i3 >> 0] | 0;
 if ((i1 & 255) < 32 | i1 << 24 >> 24 == 127) {
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 if ((_SDL_EventState(771, -1) | 0) << 24 >> 24 != 1) {
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 HEAP32[i2 >> 2] = 771;
 i1 = HEAP32[1851] | 0;
 if (!i1) i1 = 0; else i1 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[i2 + 8 >> 2] = i1;
 _SDL_utf8strlcpy(i2 + 12 | 0, i3, 32) | 0;
 i3 = (_SDL_PushEvent(i2) | 0) > 0 & 1;
 STACKTOP = i4;
 return i3 | 0;
}

function _Emscripten_InitMouse() {
 var i1 = 0, i2 = 0;
 i1 = _SDL_GetMouse() | 0;
 HEAP32[i1 >> 2] = 41;
 HEAP32[i1 + 8 >> 2] = 78;
 HEAP32[i1 + 16 >> 2] = 302;
 HEAP32[i1 + 20 >> 2] = 1;
 HEAP32[i1 + 4 >> 2] = 79;
 HEAP32[i1 + 28 >> 2] = 80;
 i1 = _SDL_calloc(1, 8) | 0;
 if (!i1) {
  _SDL_Error(0) | 0;
  i2 = i1;
  _SDL_SetDefaultCursor(i2);
  return;
 }
 i2 = _SDL_calloc(1, 4) | 0;
 if (!i2) {
  _SDL_Error(0) | 0;
  _SDL_free(i1);
  i2 = 0;
  _SDL_SetDefaultCursor(i2);
  return;
 } else {
  HEAP32[i2 >> 2] = 43578;
  HEAP32[i1 + 4 >> 2] = i2;
  i2 = i1;
  _SDL_SetDefaultCursor(i2);
  return;
 }
}

function _SDL_GL_GetProcAddress(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = HEAP32[3256] | 0;
 if (!i1) {
  _SDL_SetError(41242, i4) | 0;
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 i2 = HEAP32[i1 + 140 >> 2] | 0;
 if (!i2) {
  _SDL_SetError(41464, i4 + 16 | 0) | 0;
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 if (!(HEAP32[i1 + 356 >> 2] | 0)) {
  _SDL_SetError(41691, i4 + 8 | 0) | 0;
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 } else {
  i3 = FUNCTION_TABLE_iii[i2 & 63](i1, i3) | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 return 0;
}

function __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i4, i5) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0;
 __ZNSt3__114__shared_count12__add_sharedEv(i4);
 i3 = i2 + 8 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[i2 + 12 >> 2] | 0) - i1 >> 2 >>> 0 <= i5 >>> 0) {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj(i3, i5 + 1 | 0);
  i1 = HEAP32[i3 >> 2] | 0;
 }
 i2 = HEAP32[i1 + (i5 << 2) >> 2] | 0;
 if (i2) {
  __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
  i1 = HEAP32[i3 >> 2] | 0;
 }
 HEAP32[i1 + (i5 << 2) >> 2] = i4;
 return;
}

function _SDL_JoystickGetDeviceGUID(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i5;
 i1 = i5 + 8 | 0;
 if ((i3 | 0) >= 0 ? (_SDL_SYS_NumJoysticks() | 0) > (i3 | 0) : 0) {
  _SDL_SYS_JoystickGetDeviceGUID(i2, i3);
  STACKTOP = i5;
  return;
 }
 HEAP32[i4 >> 2] = _SDL_SYS_NumJoysticks() | 0;
 _SDL_SetError(37562, i4) | 0;
 _SDL_memset(i1, 0, 16) | 0;
 i3 = i2;
 i2 = i3 + 16 | 0;
 do {
  HEAP8[i3 >> 0] = HEAP8[i1 >> 0] | 0;
  i3 = i3 + 1 | 0;
  i1 = i1 + 1 | 0;
 } while ((i3 | 0) < (i2 | 0));
 STACKTOP = i5;
 return;
}

function _fmt_u(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 if (i3 >>> 0 > 0 | (i3 | 0) == 0 & i2 >>> 0 > 4294967295) while (1) {
  i4 = ___uremdi3(i2 | 0, i3 | 0, 10, 0) | 0;
  i1 = i1 + -1 | 0;
  HEAP8[i1 >> 0] = i4 | 48;
  i4 = ___udivdi3(i2 | 0, i3 | 0, 10, 0) | 0;
  if (i3 >>> 0 > 9 | (i3 | 0) == 9 & i2 >>> 0 > 4294967295) {
   i2 = i4;
   i3 = tempRet0;
  } else {
   i2 = i4;
   break;
  }
 }
 if (i2) while (1) {
  i1 = i1 + -1 | 0;
  HEAP8[i1 >> 0] = (i2 >>> 0) % 10 | 0 | 48;
  if (i2 >>> 0 < 10) break; else i2 = (i2 >>> 0) / 10 | 0;
 }
 return i1 | 0;
}

function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_(i5, i3, i4, i1) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = i1;
 do if (i3) {
  i2 = i1 + 112 | 0;
  if (i3 >>> 0 < 29 & (HEAP8[i2 >> 0] | 0) == 0) {
   HEAP8[i2 >> 0] = 1;
   break;
  } else {
   i1 = __Znwj(i3 << 2) | 0;
   break;
  }
 } else i1 = 0; while (0);
 HEAP32[i5 >> 2] = i1;
 i4 = i1 + (i4 << 2) | 0;
 HEAP32[i5 + 8 >> 2] = i4;
 HEAP32[i5 + 4 >> 2] = i4;
 HEAP32[i5 + 12 >> 2] = i1 + (i3 << 2);
 return;
}

function _SDL_EGL_UnloadLibrary(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = i1 + 644 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!i1) return;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 if (i2) {
  FUNCTION_TABLE_ii[HEAP32[i1 + 28 >> 2] & 127](i2) | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  HEAP32[i1 + 8 >> 2] = 0;
 }
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 if (i2) {
  _SDL_UnloadObject(i2);
  i1 = HEAP32[i3 >> 2] | 0;
  HEAP32[i1 + 4 >> 2] = 0;
 }
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2) {
  _SDL_UnloadObject(i2);
  i1 = HEAP32[i3 >> 2] | 0;
  HEAP32[i1 >> 2] = 0;
 }
 _SDL_free(i1);
 HEAP32[i3 >> 2] = 0;
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_(i5, i1, i2, i3, i4, i6, i7, i8) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i5 + 4 | 0;
 i1 = i5;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i1 >> 2] = i6;
 i7 = __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i2, i3, i9, i6, i7, i1, 1114111, 0) | 0;
 HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
 STACKTOP = i5;
 return i7 | 0;
}

function _SDL_Generic_GetTLSData() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i4;
 i2 = _SDL_ThreadID() | 0;
 HEAP32[i1 >> 2] = 0;
 _SDL_AtomicLock(i1);
 _SDL_AtomicUnlock(i1);
 i1 = HEAP32[3173] | 0;
 if (!i1) {
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) break;
  i1 = HEAP32[i1 + 8 >> 2] | 0;
  if (!i1) {
   i1 = 0;
   i3 = 5;
   break;
  }
 }
 if ((i3 | 0) == 5) {
  STACKTOP = i4;
  return i1 | 0;
 }
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_(i5, i1, i2, i3, i4, i6, i7, i8) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i5 + 4 | 0;
 i1 = i5;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i1 >> 2] = i6;
 i7 = __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE(i2, i3, i9, i6, i7, i1, 1114111, 0) | 0;
 HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
 STACKTOP = i5;
 return i7 | 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_(i5, i1, i2, i3, i4, i6, i7, i8) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i5 + 4 | 0;
 i1 = i5;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i1 >> 2] = i6;
 i7 = __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i2, i3, i9, i6, i7, i1, 1114111, 0) | 0;
 HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
 STACKTOP = i5;
 return i7 | 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_(i5, i1, i2, i3, i4, i6, i7, i8) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i5 + 4 | 0;
 i1 = i5;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i1 >> 2] = i6;
 i7 = __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE(i2, i3, i9, i6, i7, i1, 1114111, 0) | 0;
 HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
 STACKTOP = i5;
 return i7 | 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i7 = 0;
 i7 = i5 + 4 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 i3 = i1 - i2 >> 2;
 if (i3 >>> 0 >= i4 >>> 0) {
  if (i3 >>> 0 > i4 >>> 0 ? (i6 = i2 + (i4 << 2) | 0, (i1 | 0) != (i6 | 0)) : 0) {
   do i1 = i1 + -4 | 0; while ((i1 | 0) != (i6 | 0));
   HEAP32[i7 >> 2] = i1;
  }
 } else __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj(i5, i4 - i3 | 0);
 return;
}

function _GLES2_UpdateClipRect(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = HEAP32[i2 + 316 >> 2] | 0;
 if ((HEAP32[3491] | 0) != (HEAP32[i1 >> 2] | 0)) return 0;
 if (!(HEAP32[i2 + 276 >> 2] | 0)) {
  FUNCTION_TABLE_vi[HEAP32[i1 + 68 >> 2] & 511](3089);
  return 0;
 } else {
  FUNCTION_TABLE_vi[HEAP32[i1 + 80 >> 2] & 511](3089);
  i3 = HEAP32[i2 + 256 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[i1 + 144 >> 2] & 63](HEAP32[i2 + 244 >> 2] | 0, (HEAP32[i2 + 224 >> 2] | 0) - (HEAP32[i2 + 248 >> 2] | 0) - i3 | 0, HEAP32[i2 + 252 >> 2] | 0, i3);
  return 0;
 }
 return 0;
}

function _Emscripten_VideoInit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i3;
 HEAP32[i2 >> 2] = 370546692;
 HEAP32[i2 + 4 >> 2] = _emscripten_asm_const_0(8) | 0;
 HEAP32[i2 + 8 >> 2] = _emscripten_asm_const_0(9) | 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 if ((_SDL_AddBasicVideoDisplay(i2) | 0) < 0) {
  i2 = -1;
  STACKTOP = i3;
  return i2 | 0;
 }
 _SDL_memset(i2, 0, 20) | 0;
 _SDL_AddDisplayMode(HEAP32[i1 + 240 >> 2] | 0, i2) | 0;
 _Emscripten_InitMouse();
 i2 = 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _strlen(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = i1;
 L1 : do if (!(i4 & 3)) i3 = 4; else {
  i2 = i1;
  i1 = i4;
  while (1) {
   if (!(HEAP8[i2 >> 0] | 0)) break L1;
   i2 = i2 + 1 | 0;
   i1 = i2;
   if (!(i1 & 3)) {
    i1 = i2;
    i3 = 4;
    break;
   }
  }
 } while (0);
 if ((i3 | 0) == 4) {
  while (1) {
   i2 = HEAP32[i1 >> 2] | 0;
   if (!((i2 & -2139062144 ^ -2139062144) & i2 + -16843009)) i1 = i1 + 4 | 0; else break;
  }
  if ((i2 & 255) << 24 >> 24) do i1 = i1 + 1 | 0; while ((HEAP8[i1 >> 0] | 0) != 0);
 }
 return i1 - i4 | 0;
}

function _SDL_GetWindowSize(i5, i4, i2) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i6 + 8 | 0;
 i1 = HEAP32[3256] | 0;
 if (!i1) {
  _SDL_SetError(41242, i6) | 0;
  STACKTOP = i6;
  return;
 }
 if ((i5 | 0) != 0 ? (HEAP32[i5 >> 2] | 0) == (i1 + 248 | 0) : 0) {
  if (i4) HEAP32[i4 >> 2] = HEAP32[i5 + 24 >> 2];
  if (!i2) {
   STACKTOP = i6;
   return;
  }
  HEAP32[i2 >> 2] = HEAP32[i5 + 28 >> 2];
  STACKTOP = i6;
  return;
 }
 _SDL_SetError(41324, i3) | 0;
 STACKTOP = i6;
 return;
}

function _SDL_CreateRGBSurfaceFrom(i8, i9, i6, i5, i7, i4, i3, i2, i1) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = _SDL_CreateRGBSurface(0, 0, 0, i5, i4, i3, i2, i1) | 0;
 if (!i1) return i1 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1;
 HEAP32[i1 + 20 >> 2] = i8;
 HEAP32[i1 + 8 >> 2] = i9;
 HEAP32[i1 + 12 >> 2] = i6;
 HEAP32[i1 + 16 >> 2] = i7;
 HEAP32[i1 + 36 >> 2] = 0;
 HEAP32[i1 + 40 >> 2] = 0;
 HEAP32[i1 + 44 >> 2] = i9;
 HEAP32[i1 + 48 >> 2] = i6;
 return i1 | 0;
}

function _SDL_EGL_SetSwapInterval(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i1 + 644 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) {
  i3 = _SDL_SetError(40193, i4) | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 if ((FUNCTION_TABLE_iii[HEAP32[i2 + 64 >> 2] & 63](HEAP32[i2 + 8 >> 2] | 0, i3) | 0) == 1) {
  HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] = i3;
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 } else {
  i3 = _SDL_SetError(40213, i4 + 8 | 0) | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 return 0;
}

function _trigonColor(i2, i3, i6, i4, i7, i5, i8, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i9 = 0, i10 = 0, i11 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i11 = i9 + 6 | 0;
 i10 = i9;
 HEAP16[i11 >> 1] = i3;
 HEAP16[i11 + 2 >> 1] = i4;
 HEAP16[i11 + 4 >> 1] = i5;
 HEAP16[i10 >> 1] = i6;
 HEAP16[i10 + 2 >> 1] = i7;
 HEAP16[i10 + 4 >> 1] = i8;
 _polygonRGBA(i2, i11, i10, 3, i1 & 255, i1 >>> 8 & 255, i1 >>> 16 & 255, i1 >>> 24 & 255) | 0;
 STACKTOP = i9;
 return -1;
}

function _fclose(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = (HEAP32[i4 >> 2] & 1 | 0) != 0;
 if (!i3) {
  ___lock(22920);
  i2 = HEAP32[i4 + 52 >> 2] | 0;
  i1 = i4 + 56 | 0;
  if (i2) HEAP32[i2 + 56 >> 2] = HEAP32[i1 >> 2];
  i1 = HEAP32[i1 >> 2] | 0;
  if (i1) HEAP32[i1 + 52 >> 2] = i2;
  if ((HEAP32[5729] | 0) == (i4 | 0)) HEAP32[5729] = i1;
  ___unlock(22920);
 }
 i1 = _fflush(i4) | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[i4 + 12 >> 2] & 127](i4) | 0 | i1;
 i2 = HEAP32[i4 + 92 >> 2] | 0;
 if (i2) _free(i2);
 if (!i3) _free(i4);
 return i1 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 if (i3 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 if (i3 >>> 0 < 11) {
  HEAP8[i1 >> 0] = i3 << 1;
  i1 = i1 + 1 | 0;
 } else {
  i5 = i3 + 16 & -16;
  i4 = __Znwj(i5) | 0;
  HEAP32[i1 + 8 >> 2] = i4;
  HEAP32[i1 >> 2] = i5 | 1;
  HEAP32[i1 + 4 >> 2] = i3;
  i1 = i4;
 }
 _memcpy(i1 | 0, i2 | 0, i3 | 0) | 0;
 HEAP8[i1 + i3 >> 0] = 0;
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 if (i3 >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 if (i3 >>> 0 < 2) {
  HEAP8[i1 >> 0] = i3 << 1;
  i1 = i1 + 4 | 0;
 } else {
  i5 = i3 + 4 & -4;
  i4 = __Znwj(i5 << 2) | 0;
  HEAP32[i1 + 8 >> 2] = i4;
  HEAP32[i1 >> 2] = i5 | 1;
  HEAP32[i1 + 4 >> 2] = i3;
  i1 = i4;
 }
 _wmemcpy(i1, i2, i3) | 0;
 HEAP32[i1 + (i3 << 2) >> 2] = 0;
 return;
}

function _SDL_TimerInit() {
 var i1 = 0;
 if (HEAP32[3214] | 0) {
  i1 = 0;
  return i1 | 0;
 }
 i1 = _SDL_CreateMutex() | 0;
 HEAP32[3177] = i1;
 if (!i1) {
  i1 = -1;
  return i1 | 0;
 }
 i1 = _SDL_CreateSemaphore(0) | 0;
 HEAP32[3211] = i1;
 if (!i1) {
  _SDL_DestroyMutex(HEAP32[3177] | 0);
  i1 = -1;
  return i1 | 0;
 }
 HEAP32[3214] = 1;
 i1 = _SDL_CreateThread(77, 38884, 12696) | 0;
 HEAP32[3174] = i1;
 if (!i1) {
  _SDL_TimerQuit();
  i1 = -1;
  return i1 | 0;
 } else {
  _SDL_AtomicSet(12700, 1) | 0;
  i1 = 0;
  return i1 | 0;
 }
 return 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 if (i3 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 if (i3 >>> 0 < 11) {
  HEAP8[i1 >> 0] = i3 << 1;
  i1 = i1 + 1 | 0;
 } else {
  i5 = i3 + 16 & -16;
  i4 = __Znwj(i5) | 0;
  HEAP32[i1 + 8 >> 2] = i4;
  HEAP32[i1 >> 2] = i5 | 1;
  HEAP32[i1 + 4 >> 2] = i3;
  i1 = i4;
 }
 _memset(i1 | 0, i2 | 0, i3 | 0) | 0;
 HEAP8[i1 + i3 >> 0] = 0;
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 if (i3 >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 if (i3 >>> 0 < 2) {
  HEAP8[i1 >> 0] = i3 << 1;
  i1 = i1 + 4 | 0;
 } else {
  i5 = i3 + 4 & -4;
  i4 = __Znwj(i5 << 2) | 0;
  HEAP32[i1 + 8 >> 2] = i4;
  HEAP32[i1 >> 2] = i5 | 1;
  HEAP32[i1 + 4 >> 2] = i3;
  i1 = i4;
 }
 _wmemset(i1, i2, i3) | 0;
 HEAP32[i1 + (i3 << 2) >> 2] = 0;
 return;
}

function __ZNSt3__111__call_onceERVmPvPFvS2_E(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 _pthread_mutex_lock(28900) | 0;
 if ((HEAP32[i2 >> 2] | 0) == 1) do _pthread_cond_wait(28928, 28900) | 0; while ((HEAP32[i2 >> 2] | 0) == 1);
 if (!(HEAP32[i2 >> 2] | 0)) {
  HEAP32[i2 >> 2] = 1;
  _pthread_mutex_unlock(28900) | 0;
  FUNCTION_TABLE_vi[i3 & 511](i1);
  _pthread_mutex_lock(28900) | 0;
  HEAP32[i2 >> 2] = -1;
  _pthread_mutex_unlock(28900) | 0;
  _pthread_cond_broadcast(28928) | 0;
 } else _pthread_mutex_unlock(28900) | 0;
 return;
}

function _SDL_PushEvent(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 HEAP32[i2 + 4 >> 2] = _SDL_GetTicks() | 0;
 i1 = HEAP32[814] | 0;
 if ((i1 | 0) != 0 ? (FUNCTION_TABLE_iii[i1 & 63](HEAP32[815] | 0, i2) | 0) == 0 : 0) {
  i2 = 0;
  return i2 | 0;
 }
 i1 = HEAP32[1594] | 0;
 if (i1) do {
  FUNCTION_TABLE_iii[HEAP32[i1 >> 2] & 63](HEAP32[i1 + 4 >> 2] | 0, i2) | 0;
  i1 = HEAP32[i1 + 8 >> 2] | 0;
 } while ((i1 | 0) != 0);
 if ((_SDL_PeepEvents(i2, 1, 0, 0, 0) | 0) < 1) {
  i2 = -1;
  return i2 | 0;
 }
 _SDL_GestureProcessEvent(i2);
 i2 = 1;
 return i2 | 0;
}

function _memset(i2, i6, i1) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i3 = i2 + i1 | 0;
 if ((i1 | 0) >= 20) {
  i6 = i6 & 255;
  i5 = i2 & 3;
  i7 = i6 | i6 << 8 | i6 << 16 | i6 << 24;
  i4 = i3 & ~3;
  if (i5) {
   i5 = i2 + 4 - i5 | 0;
   while ((i2 | 0) < (i5 | 0)) {
    HEAP8[i2 >> 0] = i6;
    i2 = i2 + 1 | 0;
   }
  }
  while ((i2 | 0) < (i4 | 0)) {
   HEAP32[i2 >> 2] = i7;
   i2 = i2 + 4 | 0;
  }
 }
 while ((i2 | 0) < (i3 | 0)) {
  HEAP8[i2 >> 0] = i6;
  i2 = i2 + 1 | 0;
 }
 return i2 - i1 | 0;
}

function __ZN8ObstacleC2ER5Vec2ffi(i4, i3, d2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 d2 = +d2;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0;
 HEAP32[i4 >> 2] = 3180;
 i6 = i4 + 4 | 0;
 i5 = i4 + 32 | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 HEAP32[i6 + 16 >> 2] = 0;
 HEAP32[i6 + 20 >> 2] = 0;
 HEAP32[i6 + 24 >> 2] = 0;
 HEAP32[i5 >> 2] = -16777216;
 HEAPF32[i4 + 36 >> 2] = 0.0;
 __ZN5Vec2faSERKS_(i6, i3) | 0;
 HEAP32[i4 >> 2] = 3212;
 HEAP32[i5 >> 2] = i1;
 HEAPF32[i4 + 40 >> 2] = d2;
 return;
}

function _SDL_DelEventWatch(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0;
 i1 = HEAP32[1594] | 0;
 if (!i1) return; else i2 = 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) == (i3 | 0) ? (HEAP32[i1 + 4 >> 2] | 0) == (i4 | 0) : 0) {
   i3 = i1;
   break;
  }
  i2 = HEAP32[i1 + 8 >> 2] | 0;
  if (!i2) {
   i5 = 9;
   break;
  } else {
   i6 = i1;
   i1 = i2;
   i2 = i6;
  }
 }
 if ((i5 | 0) == 9) return;
 i1 = HEAP32[i3 + 8 >> 2] | 0;
 if (!i2) HEAP32[1594] = i1; else HEAP32[i2 + 8 >> 2] = i1;
 _SDL_free(i3);
 return;
}

function __ZN17GameObjectManager9updateAllEfRNSt3__16vectorI6ActionNS0_9allocatorIS2_EEEE(i2, d3, i4) {
 i2 = i2 | 0;
 d3 = +d3;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0;
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 3](i1, d3, i4);
 i1 = HEAP32[i2 + 12 >> 2] | 0;
 i2 = HEAP32[i2 + 16 >> 2] | 0;
 if ((i1 | 0) == (i2 | 0)) return;
 do {
  i5 = HEAP32[i1 >> 2] | 0;
  FUNCTION_TABLE_vidi[HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] & 3](i5, d3, i4);
  i1 = i1 + 8 | 0;
 } while ((i1 | 0) != (i2 | 0));
 return;
}

function _SDL_SetSurfaceColorMod(i1, i4, i3, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0;
 if (!i1) {
  i4 = -1;
  return i4 | 0;
 }
 i1 = HEAP32[i1 + 52 >> 2] | 0;
 HEAP8[i1 + 76 >> 0] = i4;
 HEAP8[i1 + 77 >> 0] = i3;
 HEAP8[i1 + 78 >> 0] = i2;
 i6 = i1 + 68 | 0;
 i5 = HEAP32[i6 >> 2] | 0;
 i4 = (i3 & i4) << 24 >> 24 == -1 & i2 << 24 >> 24 == -1 ? i5 & -2 : i5 | 1;
 HEAP32[i6 >> 2] = i4;
 if ((i4 | 0) == (i5 | 0)) {
  i6 = 0;
  return i6 | 0;
 }
 _SDL_InvalidateMap(i1);
 i6 = 0;
 return i6 | 0;
}

function _SDL_JoystickEventState(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((i1 | 0) == -1) i2 = 0; else {
  _SDL_EventState(1536, i1) | 0;
  _SDL_EventState(1537, i1) | 0;
  _SDL_EventState(1538, i1) | 0;
  _SDL_EventState(1539, i1) | 0;
  _SDL_EventState(1540, i1) | 0;
  _SDL_EventState(1541, i1) | 0;
  _SDL_EventState(1542, i1) | 0;
  i2 = i1;
  return i2 | 0;
 }
 do {
  i1 = _SDL_EventState(HEAP32[12172 + (i2 << 2) >> 2] | 0, -1) | 0;
  i2 = i2 + 1 | 0;
 } while (i1 << 24 >> 24 != 1 & i2 >>> 0 < 7);
 i2 = i1 & 255;
 return i2 | 0;
}

function _SDL_Error(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 switch (i1 | 0) {
 case 0:
  {
   _SDL_SetError(36371, i2) | 0;
   break;
  }
 case 1:
  {
   _SDL_SetError(36385, i2 + 8 | 0) | 0;
   break;
  }
 case 2:
  {
   _SDL_SetError(36415, i2 + 16 | 0) | 0;
   break;
  }
 case 3:
  {
   _SDL_SetError(36443, i2 + 24 | 0) | 0;
   break;
  }
 case 4:
  {
   _SDL_SetError(36471, i2 + 32 | 0) | 0;
   break;
  }
 default:
  _SDL_SetError(36503, i2 + 40 | 0) | 0;
 }
 STACKTOP = i2;
 return -1;
}

function _Emscripten_SetWindowSize(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, d6 = 0.0;
 i2 = HEAP32[i5 + 136 >> 2] | 0;
 if (!i2) return;
 i3 = i5 + 24 | 0;
 i4 = i2 + 12 | 0;
 d6 = +HEAPF32[i4 >> 2];
 i1 = i5 + 28 | 0;
 _emscripten_set_canvas_size(~~(+(HEAP32[i3 >> 2] | 0) * d6) | 0, ~~(d6 * +(HEAP32[i1 >> 2] | 0)) | 0);
 if (HEAP32[i2 + 16 >> 2] | 0) return;
 if (!(+HEAPF32[i4 >> 2] != 1.0)) return;
 _emscripten_set_element_css_size(0, +(+(HEAP32[i3 >> 2] | 0)), +(+(HEAP32[i1 >> 2] | 0))) | 0;
 return;
}

function _strerror(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = 0;
 while (1) {
  if ((HEAPU8[56206 + i2 >> 0] | 0) == (i1 | 0)) {
   i3 = 2;
   break;
  }
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == 87) {
   i2 = 87;
   i1 = 56294;
   i3 = 5;
   break;
  }
 }
 if ((i3 | 0) == 2) if (!i2) i1 = 56294; else {
  i1 = 56294;
  i3 = 5;
 }
 if ((i3 | 0) == 5) while (1) {
  i3 = i1;
  while (1) {
   i1 = i3 + 1 | 0;
   if (!(HEAP8[i3 >> 0] | 0)) break; else i3 = i1;
  }
  i2 = i2 + -1 | 0;
  if (!i2) break; else i3 = 5;
 }
 return i1 | 0;
}

function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = HEAP32[i4 + 4 >> 2] | 0;
 i3 = i4 + 8 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) != (i2 | 0)) {
  do i1 = i1 + -4 | 0; while ((i1 | 0) != (i2 | 0));
  HEAP32[i3 >> 2] = i1;
 }
 i2 = HEAP32[i4 >> 2] | 0;
 do if (i2) {
  i1 = HEAP32[i4 + 16 >> 2] | 0;
  if ((i1 | 0) == (i2 | 0)) {
   HEAP8[i1 + 112 >> 0] = 0;
   break;
  } else {
   __ZdlPv(i2);
   break;
  }
 } while (0);
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i5, i3, i2, i1, i4, i6) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 if ((i5 | 0) == (HEAP32[i3 + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, i3, i2, i1, i4); else {
  i5 = HEAP32[i5 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] & 15](i5, i3, i2, i1, i4, i6);
 }
 return;
}

function _SDL_GetRenderDriverInfo(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i4;
 if (i3 >>> 0 > 1) {
  HEAP32[i2 >> 2] = 1;
  i3 = _SDL_SetError(37595, i2) | 0;
  STACKTOP = i4;
  return i3 | 0;
 } else {
  i2 = (HEAP32[12200 + (i3 << 2) >> 2] | 0) + 4 | 0;
  i3 = i1 + 84 | 0;
  do {
   HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
   i1 = i1 + 4 | 0;
   i2 = i2 + 4 | 0;
  } while ((i1 | 0) < (i3 | 0));
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 return 0;
}

function __ZN17GameObjectManager11spawnPlayerER5Vec2f(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0;
 i1 = i3 + 4 | 0;
 if (HEAP32[i1 >> 2] | 0) return;
 i4 = __Znwj(52) | 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 >> 2] = 3088;
 i5 = i4 + 12 | 0;
 __ZN13PlayerVehicleC2ER5Vec2fi(i5, i2, -16776961);
 HEAP32[i1 >> 2] = i5;
 i3 = i3 + 8 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = i4;
 if (!i1) return;
 __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
 return;
}

function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi(i4, i1, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 L1 : do if (!(HEAP8[i4 + 44 >> 0] | 0)) if ((i3 | 0) > 0) {
  i2 = i1;
  i1 = 0;
  while (1) {
   if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] & 63](i4, HEAP32[i2 >> 2] | 0) | 0) == -1) break L1;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) < (i3 | 0)) i2 = i2 + 4 | 0; else break;
  }
 } else i1 = 0; else i1 = _fwrite(i1, 4, i3, HEAP32[i4 + 32 >> 2] | 0) | 0; while (0);
 return i1 | 0;
}

function __ZNSt3__111__stdoutbufIcE6xsputnEPKci(i4, i1, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 L1 : do if (!(HEAP8[i4 + 44 >> 0] | 0)) if ((i3 | 0) > 0) {
  i2 = i1;
  i1 = 0;
  while (1) {
   if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] & 63](i4, HEAPU8[i2 >> 0] | 0) | 0) == -1) break L1;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) < (i3 | 0)) i2 = i2 + 1 | 0; else break;
  }
 } else i1 = 0; else i1 = _fwrite(i1, 1, i3, HEAP32[i4 + 32 >> 2] | 0) | 0; while (0);
 return i1 | 0;
}

function _SDL_GestureAddTouch(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = _SDL_realloc(HEAP32[818] | 0, ((HEAP32[816] | 0) * 8232 | 0) + 8232 | 0) | 0;
 if (!i3) {
  i3 = _SDL_Error(0) | 0;
  return i3 | 0;
 } else {
  HEAP32[818] = i3;
  _SDL_memset(i3 + ((HEAP32[816] | 0) * 8232 | 0) | 0, 0, 8232) | 0;
  i3 = HEAP32[816] | 0;
  i4 = (HEAP32[818] | 0) + (i3 * 8232 | 0) | 0;
  HEAP32[i4 >> 2] = i1;
  HEAP32[i4 + 4 >> 2] = i2;
  HEAP32[816] = i3 + 1;
  i3 = 0;
  return i3 | 0;
 }
 return 0;
}

function _SDL_PollEvent(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 L1 : while (1) {
  i1 = _SDL_GetVideoDevice() | 0;
  if (i1) FUNCTION_TABLE_vi[HEAP32[i1 + 176 >> 2] & 511](i1);
  if (!((HEAP32[1601] | 0) != 0 ? (_SDL_JoystickEventState(-1) | 0) == 0 : 0)) _SDL_JoystickUpdate();
  switch (_SDL_PeepEvents(i2, 1, 2, 0, 65535) | 0) {
  case 1:
   break L1;
  case 0:
  case -1:
   {
    i1 = 0;
    i3 = 9;
    break L1;
   }
  default:
   {}
  }
 }
 if ((i3 | 0) == 9) return i1 | 0;
 i3 = 1;
 return i3 | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i7, i5, i4, i3, i6, i8) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0;
 i2 = HEAP32[i7 + 4 >> 2] | 0;
 i1 = i2 >> 8;
 if (i2 & 1) i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + i1 >> 2] | 0;
 i7 = HEAP32[i7 >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] & 15](i7, i5, i4, i3 + i1 | 0, (i2 & 2 | 0) != 0 ? i6 : 2, i8);
 return;
}

function __ZNSt3__120__shared_ptr_emplaceI13PlayerVehicleNS_9allocatorIS1_EEED0Ev(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 HEAP32[i4 >> 2] = 3088;
 HEAP32[i4 + 12 >> 2] = 3180;
 i1 = HEAP32[i4 + 32 >> 2] | 0;
 if (!i1) {
  __ZNSt3__114__shared_countD2Ev(i4);
  __ZdlPv(i4);
  return;
 }
 i2 = i4 + 36 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) != (i1 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -8 - i1 | 0) >>> 3) << 3);
 __ZdlPv(i1);
 __ZNSt3__114__shared_countD2Ev(i4);
 __ZdlPv(i4);
 return;
}

function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt(i1, i6, i5, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = (i5 - i6 | 0) >>> 2;
 if ((i6 | 0) != (i5 | 0)) {
  i3 = i6;
  while (1) {
   i1 = HEAP32[i3 >> 2] | 0;
   if (i1 >>> 0 < 128) i1 = HEAPU16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + (i1 << 1) >> 1] | 0; else i1 = 0;
   HEAP16[i2 >> 1] = i1;
   i3 = i3 + 4 | 0;
   if ((i3 | 0) == (i5 | 0)) break; else i2 = i2 + 2 | 0;
  }
 }
 return i6 + (i4 << 2) | 0;
}

function ___stdio_seek(i1, i2, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5;
 i3 = i5 + 20 | 0;
 HEAP32[i6 >> 2] = HEAP32[i1 + 60 >> 2];
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = i2;
 HEAP32[i6 + 12 >> 2] = i3;
 HEAP32[i6 + 16 >> 2] = i4;
 if ((___syscall_ret(___syscall140(140, i6 | 0) | 0) | 0) < 0) {
  HEAP32[i3 >> 2] = -1;
  i1 = -1;
 } else i1 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i5;
 return i1 | 0;
}

function _SDL_SetRenderDrawColor(i5, i4, i3, i2, i1) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i7;
 if ((i5 | 0) != 0 ? (HEAP32[i5 >> 2] | 0) == 37791 : 0) {
  HEAP8[i5 + 308 >> 0] = i4;
  HEAP8[i5 + 309 >> 0] = i3;
  HEAP8[i5 + 310 >> 0] = i2;
  HEAP8[i5 + 311 >> 0] = i1;
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 _SDL_SetError(37792, i6) | 0;
 i6 = -1;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNSt3__120__shared_ptr_emplaceI8ObstacleNS_9allocatorIS1_EEED0Ev(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 HEAP32[i4 >> 2] = 3152;
 HEAP32[i4 + 12 >> 2] = 3180;
 i1 = HEAP32[i4 + 32 >> 2] | 0;
 if (!i1) {
  __ZNSt3__114__shared_countD2Ev(i4);
  __ZdlPv(i4);
  return;
 }
 i2 = i4 + 36 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) != (i1 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -8 - i1 | 0) >>> 3) << 3);
 __ZdlPv(i1);
 __ZNSt3__114__shared_countD2Ev(i4);
 __ZdlPv(i4);
 return;
}

function __ZNSt3__120__shared_ptr_emplaceI11KeyBindingsNS_9allocatorIS1_EEED0Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 HEAP32[i2 >> 2] = 3236;
 i1 = HEAP32[i2 + 20 >> 2] | 0;
 if (i1) do {
  i3 = i1;
  i1 = HEAP32[i1 >> 2] | 0;
  __ZdlPv(i3);
 } while ((i1 | 0) != 0);
 i3 = i2 + 12 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = 0;
 if (!i1) {
  __ZNSt3__114__shared_countD2Ev(i2);
  __ZdlPv(i2);
  return;
 }
 __ZdlPv(i1);
 __ZNSt3__114__shared_countD2Ev(i2);
 __ZdlPv(i2);
 return;
}

function _DUMMY_VideoInit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i3;
 HEAP32[i2 >> 2] = 370546692;
 HEAP32[i2 + 4 >> 2] = 1024;
 HEAP32[i2 + 8 >> 2] = 768;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 if ((_SDL_AddBasicVideoDisplay(i2) | 0) < 0) {
  i2 = -1;
  STACKTOP = i3;
  return i2 | 0;
 }
 _SDL_memset(i2, 0, 20) | 0;
 _SDL_AddDisplayMode(HEAP32[i1 + 240 >> 2] | 0, i2) | 0;
 i2 = 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _SDL_GetRendererInfo(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i4;
 if ((i3 | 0) != 0 ? (HEAP32[i3 >> 2] | 0) == 37791 : 0) {
  i2 = i3 + 104 | 0;
  i3 = i1 + 84 | 0;
  do {
   HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
   i1 = i1 + 4 | 0;
   i2 = i2 + 4 | 0;
  } while ((i1 | 0) < (i3 | 0));
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 _SDL_SetError(37792, i2) | 0;
 i3 = -1;
 STACKTOP = i4;
 return i3 | 0;
}

function _Emscripten_UpdateWindowFramebuffer(i1, i4, i3, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[(HEAP32[i4 + 136 >> 2] | 0) + 8 >> 2] | 0;
 if (!i1) {
  i4 = _SDL_SetError(42078, i2) | 0;
  STACKTOP = i2;
  return i4 | 0;
 } else {
  _emscripten_asm_const_3(0, HEAP32[i1 + 8 >> 2] | 0, HEAP32[i1 + 12 >> 2] | 0, HEAP32[i1 + 20 >> 2] | 0) | 0;
  i4 = 0;
  STACKTOP = i2;
  return i4 | 0;
 }
 return 0;
}

function _wmemmove(i4, i3, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (i1 | 0) == 0;
 if (i4 - i3 >> 2 >>> 0 < i1 >>> 0) {
  if (!i2) do {
   i1 = i1 + -1 | 0;
   HEAP32[i4 + (i1 << 2) >> 2] = HEAP32[i3 + (i1 << 2) >> 2];
  } while ((i1 | 0) != 0);
 } else if (!i2) {
  i2 = i3;
  i3 = i4;
  while (1) {
   i1 = i1 + -1 | 0;
   HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
   if (!i1) break; else {
    i2 = i2 + 4 | 0;
    i3 = i3 + 4 | 0;
   }
  }
 }
 return i4 | 0;
}

function _SDL_GetHint(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i1 = _SDL_getenv(i3) | 0;
 i2 = HEAP32[1528] | 0;
 if (!i2) {
  i4 = i1;
  return i4 | 0;
 }
 while (1) {
  if (!(_SDL_strcmp(i3, HEAP32[i2 >> 2] | 0) | 0)) break;
  i2 = HEAP32[i2 + 16 >> 2] | 0;
  if (!i2) {
   i4 = 7;
   break;
  }
 }
 if ((i4 | 0) == 7) return i1 | 0;
 if ((i1 | 0) != 0 ? (HEAP32[i2 + 8 >> 2] | 0) != 2 : 0) {
  i4 = i1;
  return i4 | 0;
 }
 i4 = HEAP32[i2 + 4 >> 2] | 0;
 return i4 | 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 if (i2 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i3);
 i1 = i3 + 128 | 0;
 if (i2 >>> 0 < 29 & (HEAP8[i1 >> 0] | 0) == 0) {
  HEAP8[i1 >> 0] = 1;
  i1 = i3 + 16 | 0;
 } else i1 = __Znwj(i2 << 2) | 0;
 HEAP32[i3 + 4 >> 2] = i1;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i3 + 8 >> 2] = i1 + (i2 << 2);
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i6, i4, i3, i5, i7) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0;
 i2 = HEAP32[i6 + 4 >> 2] | 0;
 i1 = i2 >> 8;
 if (i2 & 1) i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + i1 >> 2] | 0;
 i6 = HEAP32[i6 >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] & 7](i6, i4, i3 + i1 | 0, (i2 & 2 | 0) != 0 ? i5 : 2, i7);
 return;
}

function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = HEAP32[i4 >> 2] | 0;
 do if (i2) {
  i3 = i4 + 4 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if ((i1 | 0) != (i2 | 0)) {
   do i1 = i1 + -4 | 0; while ((i1 | 0) != (i2 | 0));
   HEAP32[i3 >> 2] = i1;
  }
  if ((i4 + 16 | 0) == (i2 | 0)) {
   HEAP8[i4 + 128 >> 0] = 0;
   break;
  } else {
   __ZdlPv(i2);
   break;
  }
 } while (0);
 return;
}

function __ZN17GameObjectManager9renderAllEP12SDL_Renderer(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0;
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[HEAP32[i1 >> 2] >> 2] & 127](i1, i3);
 i1 = HEAP32[i2 + 12 >> 2] | 0;
 i2 = HEAP32[i2 + 16 >> 2] | 0;
 if ((i1 | 0) == (i2 | 0)) return;
 do {
  i4 = HEAP32[i1 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[HEAP32[i4 >> 2] >> 2] & 127](i4, i3);
  i1 = i1 + 8 | 0;
 } while ((i1 | 0) != (i2 | 0));
 return;
}

function __ZNSt3__120__shared_ptr_emplaceI13PlayerVehicleNS_9allocatorIS1_EEED2Ev(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 HEAP32[i4 >> 2] = 3088;
 HEAP32[i4 + 12 >> 2] = 3180;
 i1 = HEAP32[i4 + 32 >> 2] | 0;
 if (!i1) {
  __ZNSt3__114__shared_countD2Ev(i4);
  return;
 }
 i2 = i4 + 36 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) != (i1 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -8 - i1 | 0) >>> 3) << 3);
 __ZdlPv(i1);
 __ZNSt3__114__shared_countD2Ev(i4);
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 if ((i4 | 0) == (HEAP32[i2 + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, i2, i1, i3); else {
  i4 = HEAP32[i4 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 63](i4, i2, i1, i3);
 }
 return;
}

function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 30452) | 0;
 i3 = i2 + 36 | 0;
 HEAP32[i3 >> 2] = i4;
 i1 = i2 + 44 | 0;
 HEAP32[i1 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 127](i4) | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 HEAP8[i2 + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 127](i3) | 0) & 1;
 return;
}

function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 30444) | 0;
 i3 = i2 + 36 | 0;
 HEAP32[i3 >> 2] = i4;
 i1 = i2 + 44 | 0;
 HEAP32[i1 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 127](i4) | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 HEAP8[i2 + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 127](i3) | 0) & 1;
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i6, i4, i3, i5) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0;
 i2 = HEAP32[i6 + 4 >> 2] | 0;
 i1 = i2 >> 8;
 if (i2 & 1) i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + i1 >> 2] | 0;
 i6 = HEAP32[i6 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] & 63](i6, i4, i3 + i1 | 0, (i2 & 2 | 0) != 0 ? i5 : 2);
 return;
}

function _SDL_GetWindowFlags(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i4 + 8 | 0;
 i1 = HEAP32[3256] | 0;
 if (!i1) {
  _SDL_SetError(41242, i4) | 0;
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 if ((i3 | 0) != 0 ? (HEAP32[i3 >> 2] | 0) == (i1 + 248 | 0) : 0) {
  i3 = HEAP32[i3 + 48 >> 2] | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 _SDL_SetError(41324, i2) | 0;
 i3 = 0;
 STACKTOP = i4;
 return i3 | 0;
}

function __ZNSt3__120__shared_ptr_emplaceI8ObstacleNS_9allocatorIS1_EEED2Ev(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 HEAP32[i4 >> 2] = 3152;
 HEAP32[i4 + 12 >> 2] = 3180;
 i1 = HEAP32[i4 + 32 >> 2] | 0;
 if (!i1) {
  __ZNSt3__114__shared_countD2Ev(i4);
  return;
 }
 i2 = i4 + 36 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) != (i1 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -8 - i1 | 0) >>> 3) << 3);
 __ZdlPv(i1);
 __ZNSt3__114__shared_countD2Ev(i4);
 return;
}

function _stdio_size(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 i1 = i4 + 4 | 0;
 i2 = FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 31](i4, 0, 0, 1) | 0;
 i3 = tempRet0;
 if ((i3 | 0) < 0) {
  i3 = -1;
  i4 = -1;
  tempRet0 = i3;
  return i4 | 0;
 }
 i5 = FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 31](i4, 0, 0, 2) | 0;
 i6 = tempRet0;
 FUNCTION_TABLE_iiiii[HEAP32[i1 >> 2] & 31](i4, i2, i3, 0) | 0;
 i3 = i6;
 i4 = i5;
 tempRet0 = i3;
 return i4 | 0;
}

function ___towrite(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = i2 + 74 | 0;
 i3 = HEAP8[i1 >> 0] | 0;
 HEAP8[i1 >> 0] = i3 + 255 | i3;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!(i1 & 8)) {
  HEAP32[i2 + 8 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
  i1 = HEAP32[i2 + 44 >> 2] | 0;
  HEAP32[i2 + 28 >> 2] = i1;
  HEAP32[i2 + 20 >> 2] = i1;
  HEAP32[i2 + 16 >> 2] = i1 + (HEAP32[i2 + 48 >> 2] | 0);
  i1 = 0;
 } else {
  HEAP32[i2 >> 2] = i1 | 32;
  i1 = -1;
 }
 return i1 | 0;
}

function ___stdout_write(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i4 = i5;
 HEAP32[i2 + 36 >> 2] = 3;
 if ((HEAP32[i2 >> 2] & 64 | 0) == 0 ? (HEAP32[i4 >> 2] = HEAP32[i2 + 60 >> 2], HEAP32[i4 + 4 >> 2] = 21505, HEAP32[i4 + 8 >> 2] = i5 + 12, (___syscall54(54, i4 | 0) | 0) != 0) : 0) HEAP8[i2 + 75 >> 0] = -1;
 i4 = ___stdio_write(i2, i1, i3) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _SDL_GetWindowID(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i4 + 8 | 0;
 i1 = HEAP32[3256] | 0;
 if (!i1) {
  _SDL_SetError(41242, i4) | 0;
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 if ((i3 | 0) != 0 ? (HEAP32[i3 >> 2] | 0) == (i1 + 248 | 0) : 0) {
  i3 = HEAP32[i3 + 4 >> 2] | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 _SDL_SetError(41324, i2) | 0;
 i3 = 0;
 STACKTOP = i4;
 return i3 | 0;
}

function __ZNSt3__120__shared_ptr_emplaceI11KeyBindingsNS_9allocatorIS1_EEED2Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 HEAP32[i2 >> 2] = 3236;
 i1 = HEAP32[i2 + 20 >> 2] | 0;
 if (i1) do {
  i3 = i1;
  i1 = HEAP32[i1 >> 2] | 0;
  __ZdlPv(i3);
 } while ((i1 | 0) != 0);
 i3 = i2 + 12 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = 0;
 if (!i1) {
  __ZNSt3__114__shared_countD2Ev(i2);
  return;
 }
 __ZdlPv(i1);
 __ZNSt3__114__shared_countD2Ev(i2);
 return;
}

function _SDL_SYS_JoystickQuit() {
 var i1 = 0, i2 = 0;
 i1 = HEAP32[3481] | 0;
 if (i1) do {
  i2 = i1;
  i1 = HEAP32[i1 + 1320 >> 2] | 0;
  _SDL_free(HEAP32[i2 + 8 >> 2] | 0);
  _SDL_free(HEAP32[i2 + 4 >> 2] | 0);
  _SDL_free(i2);
 } while ((i1 | 0) != 0);
 HEAP32[3483] = 0;
 HEAP32[3481] = 0;
 HEAP32[3484] = 0;
 HEAP32[3482] = 0;
 _emscripten_set_gamepadconnected_callback(0, 0, 0) | 0;
 _emscripten_set_gamepaddisconnected_callback(0, 0, 0) | 0;
 return;
}

function copyTempDouble(i1) {
 i1 = i1 | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[i1 >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[i1 + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[i1 + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[i1 + 3 >> 0];
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[i1 + 4 >> 0];
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[i1 + 5 >> 0];
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[i1 + 6 >> 0];
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[i1 + 7 >> 0];
}

function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_(i2, i4, i1, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 L1 : do if ((i1 | 0) == (i3 | 0)) i1 = i3; else while (1) {
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 >>> 0 >= 128) break L1;
  if (!((HEAP16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + (i2 << 1) >> 1] & i4) << 16 >> 16)) break L1;
  i1 = i1 + 4 | 0;
  if ((i1 | 0) == (i3 | 0)) {
   i1 = i3;
   break;
  }
 } while (0);
 return i1 | 0;
}

function _memcmp(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0;
 L1 : do if (!i1) i1 = 0; else {
  i5 = i1;
  i4 = i2;
  while (1) {
   i2 = HEAP8[i4 >> 0] | 0;
   i1 = HEAP8[i3 >> 0] | 0;
   if (i2 << 24 >> 24 != i1 << 24 >> 24) break;
   i5 = i5 + -1 | 0;
   if (!i5) {
    i1 = 0;
    break L1;
   } else {
    i4 = i4 + 1 | 0;
    i3 = i3 + 1 | 0;
   }
  }
  i1 = (i2 & 255) - (i1 & 255) | 0;
 } while (0);
 return i1 | 0;
}

function __ZNSt3__113__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_(i3, i4, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = HEAP32[i2 >> 2] | 0;
 i1 = i3;
 i2 = i4 - i3 >> 2;
 L1 : while (1) {
  while (1) {
   if (!i2) break L1;
   i3 = (i2 | 0) / 2 | 0;
   if ((HEAP32[i1 + (i3 << 2) >> 2] | 0) >>> 0 < i5 >>> 0) break; else i2 = i3;
  }
  i1 = i1 + (i3 + 1 << 2) | 0;
  i2 = i2 + -1 - i3 | 0;
 }
 return i1 | 0;
}

function _vsscanf(i4, i3, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i2 = i6;
 i5 = i2;
 i7 = i5 + 112 | 0;
 do {
  HEAP32[i5 >> 2] = 0;
  i5 = i5 + 4 | 0;
 } while ((i5 | 0) < (i7 | 0));
 HEAP32[i2 + 32 >> 2] = 52;
 HEAP32[i2 + 44 >> 2] = i4;
 HEAP32[i2 + 76 >> 2] = -1;
 HEAP32[i2 + 84 >> 2] = i4;
 i7 = _vfscanf(i2, i3, i1) | 0;
 STACKTOP = i6;
 return i7 | 0;
}

function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc(i1, i7, i6, i5, i4) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 i3 = (i6 - i7 | 0) >>> 2;
 if ((i7 | 0) != (i6 | 0)) {
  i2 = i7;
  i1 = i4;
  while (1) {
   i4 = HEAP32[i2 >> 2] | 0;
   HEAP8[i1 >> 0] = i4 >>> 0 < 128 ? i4 & 255 : i5;
   i2 = i2 + 4 | 0;
   if ((i2 | 0) == (i6 | 0)) break; else i1 = i1 + 1 | 0;
  }
 }
 return i7 + (i3 << 2) | 0;
}

function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_(i2, i4, i1, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 L1 : do if ((i1 | 0) == (i3 | 0)) i1 = i3; else while (1) {
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 >>> 0 < 128 ? (HEAP16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + (i2 << 1) >> 1] & i4) << 16 >> 16 != 0 : 0) break L1;
  i1 = i1 + 4 | 0;
  if ((i1 | 0) == (i3 | 0)) {
   i1 = i3;
   break;
  }
 } while (0);
 return i1 | 0;
}

function ___string_read(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = i2 + 84 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i7 = i3 + 256 | 0;
 i5 = _memchr(i6, 0, i7) | 0;
 i5 = (i5 | 0) == 0 ? i7 : i5 - i6 | 0;
 i3 = i5 >>> 0 < i3 >>> 0 ? i5 : i3;
 _memcpy(i1 | 0, i6 | 0, i3 | 0) | 0;
 HEAP32[i2 + 4 >> 2] = i6 + i3;
 i1 = i6 + i5 | 0;
 HEAP32[i2 + 8 >> 2] = i1;
 HEAP32[i4 >> 2] = i1;
 return i3 | 0;
}

function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw(i1, i5, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 i3 = (i4 - i5 | 0) >>> 2;
 if ((i5 | 0) != (i4 | 0)) {
  i2 = i5;
  do {
   i1 = HEAP32[i2 >> 2] | 0;
   if (i1 >>> 0 < 128) i1 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + (i1 << 2) >> 2] | 0;
   HEAP32[i2 >> 2] = i1;
   i2 = i2 + 4 | 0;
  } while ((i2 | 0) != (i4 | 0));
 }
 return i5 + (i3 << 2) | 0;
}

function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw(i1, i5, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 i3 = (i4 - i5 | 0) >>> 2;
 if ((i5 | 0) != (i4 | 0)) {
  i2 = i5;
  do {
   i1 = HEAP32[i2 >> 2] | 0;
   if (i1 >>> 0 < 128) i1 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + (i1 << 2) >> 2] | 0;
   HEAP32[i2 >> 2] = i1;
   i2 = i2 + 4 | 0;
  } while ((i2 | 0) != (i4 | 0));
 }
 return i5 + (i3 << 2) | 0;
}

function __ZNSt3__18ios_base4initEPv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 HEAP32[i2 + 24 >> 2] = i1;
 HEAP32[i2 + 16 >> 2] = (i1 | 0) == 0 & 1;
 HEAP32[i2 + 20 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 4098;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 6;
 i3 = i2 + 28 | 0;
 i1 = i2 + 32 | 0;
 i2 = i1 + 40 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 __ZNSt3__16localeC2Ev(i3);
 return;
}

function ___fmodeflags(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = (_strchr(i1, 43) | 0) == 0;
 i2 = HEAP8[i1 >> 0] | 0;
 i3 = i3 ? i2 << 24 >> 24 != 114 & 1 : 2;
 i4 = (_strchr(i1, 120) | 0) == 0;
 i3 = i4 ? i3 : i3 | 128;
 i1 = (_strchr(i1, 101) | 0) == 0;
 i1 = i1 ? i3 : i3 | 524288;
 i1 = i2 << 24 >> 24 == 114 ? i1 : i1 | 64;
 i1 = i2 << 24 >> 24 == 119 ? i1 | 512 : i1;
 return (i2 << 24 >> 24 == 97 ? i1 | 1024 : i1) | 0;
}

function _SDL_RenderClear(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 if ((i1 | 0) != 0 ? (HEAP32[i1 >> 2] | 0) == 37791 : 0) {
  if (HEAP32[i1 + 192 >> 2] | 0) {
   i2 = 0;
   STACKTOP = i3;
   return i2 | 0;
  }
  i2 = FUNCTION_TABLE_ii[HEAP32[i1 + 56 >> 2] & 127](i1) | 0;
  STACKTOP = i3;
  return i2 | 0;
 }
 _SDL_SetError(37792, i2) | 0;
 i2 = -1;
 STACKTOP = i3;
 return i2 | 0;
}

function _GLES2_UnlockTexture(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i3;
 i4 = HEAP32[i2 + 68 >> 2] | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i2 + 16 >> 2];
 _GLES2_UpdateTexture(i1, i2, i5, HEAP32[i4 + 16 >> 2] | 0, HEAP32[i4 + 20 >> 2] | 0) | 0;
 STACKTOP = i3;
 return;
}

function _strcmp(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = HEAP8[i4 >> 0] | 0;
 i1 = HEAP8[i2 >> 0] | 0;
 if (i3 << 24 >> 24 == 0 ? 1 : i3 << 24 >> 24 != i1 << 24 >> 24) i2 = i3; else {
  do {
   i4 = i4 + 1 | 0;
   i2 = i2 + 1 | 0;
   i3 = HEAP8[i4 >> 0] | 0;
   i1 = HEAP8[i2 >> 0] | 0;
  } while (!(i3 << 24 >> 24 == 0 ? 1 : i3 << 24 >> 24 != i1 << 24 >> 24));
  i2 = i3;
 }
 return (i2 & 255) - (i1 & 255) | 0;
}

function _SDL_FillRects(i4, i6, i3, i2) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (i6) if ((i3 | 0) > 0) {
  i5 = 0;
  i1 = 0;
  do {
   i1 = (_SDL_FillRect(i4, i6 + (i5 << 4) | 0, i2) | 0) + i1 | 0;
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != (i3 | 0));
 } else i1 = 0; else i1 = _SDL_SetError(40366, i7) | 0;
 STACKTOP = i7;
 return i1 | 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP8[i2 + 128 >> 0] = 0;
 if (i1) {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj(i2, i1);
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj(i2, i1);
 }
 return;
}

function _SDL_FreePalette(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 if (!i1) {
  HEAP32[i2 >> 2] = 40446;
  _SDL_SetError(41366, i2) | 0;
  STACKTOP = i3;
  return;
 }
 i4 = i1 + 12 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = i2 + -1;
 if ((i2 | 0) > 1) {
  STACKTOP = i3;
  return;
 }
 _SDL_free(HEAP32[i1 + 4 >> 2] | 0);
 _SDL_free(i1);
 STACKTOP = i3;
 return;
}

function _DUMMY_CreateDevice(i1) {
 i1 = i1 | 0;
 i1 = _SDL_calloc(1, 656) | 0;
 if (!i1) {
  _SDL_Error(0) | 0;
  _SDL_free(0);
  i1 = 0;
  return i1 | 0;
 } else {
  HEAP32[i1 + 4 >> 2] = 91;
  HEAP32[i1 + 8 >> 2] = 310;
  HEAP32[i1 + 20 >> 2] = 50;
  HEAP32[i1 + 176 >> 2] = 311;
  HEAP32[i1 + 104 >> 2] = 37;
  HEAP32[i1 + 108 >> 2] = 23;
  HEAP32[i1 + 112 >> 2] = 54;
  HEAP32[i1 + 652 >> 2] = 312;
  return i1 | 0;
 }
 return 0;
}

function _Emscripten_HandleCanvasResize(i1, i2, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3 + 8 | 0;
 i1 = i3;
 if (!(HEAP32[i4 + 24 >> 2] | 0)) {
  STACKTOP = i3;
  return 0;
 }
 _emscripten_get_element_css_size(0, i2 | 0, i1 | 0) | 0;
 _SDL_SendWindowEvent(HEAP32[i4 + 4 >> 2] | 0, 5, ~~+HEAPF64[i2 >> 3], ~~+HEAPF64[i1 >> 3]) | 0;
 STACKTOP = i3;
 return 0;
}

function _SDL_SetDefaultCursor(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[3029] = i1;
 if (HEAP32[3030] | 0) return;
 if (!i1) i1 = 0; else HEAP32[3030] = i1;
 i2 = HEAP32[3007] | 0;
 i3 = (i2 | 0) == 0;
 if ((i1 | 0) != 0 & (HEAP32[3031] | 0) != 0 & (HEAP32[3024] | 0) == 0) {
  if (i3) return;
  FUNCTION_TABLE_ii[i2 & 127](i1) | 0;
  return;
 } else {
  if (i3) return;
  FUNCTION_TABLE_ii[i2 & 127](0) | 0;
  return;
 }
}

function _SDL_FreeBlitMap(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 if (!i2) return;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i1 | 0) != 0 ? (i4 = i1 + 56 | 0, i3 = HEAP32[i4 >> 2] | 0, HEAP32[i4 >> 2] = i3 + -1, (i3 | 0) < 2) : 0) _SDL_FreeSurface(i1);
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 84 >> 2] = 0;
 HEAP32[i2 + 80 >> 2] = 0;
 i4 = i2 + 64 | 0;
 _SDL_free(HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 _SDL_free(i2);
 return;
}

function _SDL_WasInit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i1 = (i1 | 0) == 0 ? 29233 : i1;
 i4 = 32 - (Math_clz32(i1 | 0) | 0) | 0;
 if ((i4 | 0) > 0) {
  i2 = i1;
  i3 = 0;
  i1 = 0;
 } else {
  i4 = 0;
  return i4 | 0;
 }
 while (1) {
  if ((i2 & 1 | 0) != 0 ? (HEAP8[35261 + i3 >> 0] | 0) != 0 : 0) i1 = i1 | 1 << i3;
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == (i4 | 0)) break; else i2 = i2 >>> 1;
 }
 return i1 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!(HEAP8[i1 >> 0] & 1)) {
  HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i2, HEAP32[i1 + 8 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0);
 return;
}

function _Emscripten_HandleFullscreenChange(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!(HEAP32[i2 >> 2] | 0)) {
  i3 = (HEAP32[i3 + 4 >> 2] | 0) + 48 | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] & -4098;
  return 0;
 } else {
  i1 = i3 + 20 | 0;
  i3 = (HEAP32[i3 + 4 >> 2] | 0) + 48 | 0;
  i2 = HEAP32[i3 >> 2] | HEAP32[i1 >> 2];
  HEAP32[i1 >> 2] = 0;
  HEAP32[i3 >> 2] = i2 | 1;
  return 0;
 }
 return 0;
}

function _DISKAUD_CloseDevice(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = i1 + 184 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!i1) return;
 _SDL_free(HEAP32[i1 + 4 >> 2] | 0);
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i1 + 4 >> 2] = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2) {
  FUNCTION_TABLE_ii[HEAP32[i2 + 16 >> 2] & 127](i2) | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  HEAP32[i1 >> 2] = 0;
 }
 _SDL_free(i1);
 HEAP32[i3 >> 2] = 0;
 return;
}

function _SDL_GetWindowFromID(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[3256] | 0;
 if (!i1) {
  i2 = 0;
  return i2 | 0;
 }
 i1 = HEAP32[i1 + 244 >> 2] | 0;
 if (!i1) {
  i2 = 0;
  return i2 | 0;
 }
 while (1) {
  if ((HEAP32[i1 + 4 >> 2] | 0) == (i2 | 0)) {
   i2 = 5;
   break;
  }
  i1 = HEAP32[i1 + 144 >> 2] | 0;
  if (!i1) {
   i1 = 0;
   i2 = 5;
   break;
  }
 }
 if ((i2 | 0) == 5) return i1 | 0;
 return 0;
}

function ___ftello_unlocked(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 if (!(HEAP32[i2 >> 2] & 128)) i1 = 1; else i1 = (HEAP32[i2 + 20 >> 2] | 0) >>> 0 > (HEAP32[i2 + 28 >> 2] | 0) >>> 0 ? 2 : 1;
 i1 = FUNCTION_TABLE_iiii[HEAP32[i2 + 40 >> 2] & 63](i2, 0, i1) | 0;
 if ((i1 | 0) >= 0) i1 = i1 - (HEAP32[i2 + 8 >> 2] | 0) + (HEAP32[i2 + 4 >> 2] | 0) + (HEAP32[i2 + 20 >> 2] | 0) - (HEAP32[i2 + 28 >> 2] | 0) | 0;
 return i1 | 0;
}

function _SW_LockTexture(i4, i5, i3, i2, i1) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i6 = 0;
 i6 = HEAP32[i5 + 68 >> 2] | 0;
 i5 = HEAP32[i6 + 16 >> 2] | 0;
 i4 = Math_imul(i5, HEAP32[i3 + 4 >> 2] | 0) | 0;
 HEAP32[i2 >> 2] = (HEAP32[i6 + 20 >> 2] | 0) + ((Math_imul(HEAPU8[(HEAP32[i6 + 4 >> 2] | 0) + 9 >> 0] | 0, HEAP32[i3 >> 2] | 0) | 0) + i4);
 HEAP32[i1 >> 2] = i5;
 return 0;
}

function _SDL_SetSurfaceAlphaMod(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 if (!i1) {
  i2 = -1;
  return i2 | 0;
 }
 i1 = HEAP32[i1 + 52 >> 2] | 0;
 HEAP8[i1 + 79 >> 0] = i2;
 i4 = i1 + 68 | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 i2 = i2 << 24 >> 24 == -1 ? i3 & -3 : i3 | 2;
 HEAP32[i4 >> 2] = i2;
 if ((i2 | 0) == (i3 | 0)) {
  i4 = 0;
  return i4 | 0;
 }
 _SDL_InvalidateMap(i1);
 i4 = 0;
 return i4 | 0;
}

function _Emscripten_FiniMouse() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = _SDL_GetMouse() | 0;
 i2 = i1 + 96 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3) {
  i4 = HEAP32[i3 + 4 >> 2] | 0;
  if (i4) _SDL_free(i4);
  _SDL_free(i3);
 }
 HEAP32[i2 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 return;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i1 = i1 + 8 | 0;
 i2 = _uselocale(HEAP32[i1 >> 2] | 0) | 0;
 i3 = _mbtowc(0, 0, 4) | 0;
 if (i2) _uselocale(i2) | 0;
 if (!i3) {
  i1 = HEAP32[i1 >> 2] | 0;
  if (i1) {
   i1 = _uselocale(i1) | 0;
   if (!i1) i1 = 0; else {
    _uselocale(i1) | 0;
    i1 = 0;
   }
  } else i1 = 1;
 } else i1 = -1;
 return i1 | 0;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 HEAP8[i3 >> 0] = 0;
 HEAP32[i3 + 4 >> 2] = i2;
 i1 = HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0;
 if (!(HEAP32[i2 + (i1 + 16) >> 2] | 0)) {
  i1 = HEAP32[i2 + (i1 + 72) >> 2] | 0;
  if (i1) __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(i1) | 0;
  HEAP8[i3 >> 0] = 1;
 }
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 HEAP8[i3 >> 0] = 0;
 HEAP32[i3 + 4 >> 2] = i2;
 i1 = HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0;
 if (!(HEAP32[i2 + (i1 + 16) >> 2] | 0)) {
  i1 = HEAP32[i2 + (i1 + 72) >> 2] | 0;
  if (i1) __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i1) | 0;
  HEAP8[i3 >> 0] = 1;
 }
 return;
}

function _SDL_InvalidateMap(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 if (!i2) return;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i1 | 0) != 0 ? (i4 = i1 + 56 | 0, i3 = HEAP32[i4 >> 2] | 0, HEAP32[i4 >> 2] = i3 + -1, (i3 | 0) < 2) : 0) _SDL_FreeSurface(i1);
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 84 >> 2] = 0;
 HEAP32[i2 + 80 >> 2] = 0;
 i4 = i2 + 64 | 0;
 _SDL_free(HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 return;
}

function _SDL_QuitQuit() {
 var i1 = 0, i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i1 = i2;
 _sigaction(2, 0, i1 | 0) | 0;
 if ((HEAP32[i1 >> 2] | 0) == 270) {
  HEAP32[i1 >> 2] = 0;
  _sigaction(2, i1 | 0, 0) | 0;
 }
 _sigaction(15, 0, i1 | 0) | 0;
 if ((HEAP32[i1 >> 2] | 0) != 270) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i1 >> 2] = 0;
 _sigaction(15, i1 | 0, 0) | 0;
 STACKTOP = i2;
 return;
}

function __Znwj(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (i1 | 0) == 0 ? 1 : i1;
 i1 = _malloc(i2) | 0;
 L1 : do if (!i1) {
  while (1) {
   i1 = __ZSt15get_new_handlerv() | 0;
   if (!i1) break;
   FUNCTION_TABLE_v[i1 & 15]();
   i1 = _malloc(i2) | 0;
   if (i1) break L1;
  }
  i2 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i2 >> 2] = 22744;
  ___cxa_throw(i2 | 0, 920, 166);
 } while (0);
 return i1 | 0;
}

function ___muldsi3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = i1 & 65535;
 i5 = i2 & 65535;
 i3 = Math_imul(i5, i6) | 0;
 i4 = i1 >>> 16;
 i1 = (i3 >>> 16) + (Math_imul(i5, i4) | 0) | 0;
 i5 = i2 >>> 16;
 i2 = Math_imul(i5, i6) | 0;
 return (tempRet0 = (i1 >>> 16) + (Math_imul(i5, i4) | 0) + (((i1 & 65535) + i2 | 0) >>> 16) | 0, i1 + i2 << 16 | i3 & 65535 | 0) | 0;
}

function _copysign(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 var i3 = 0, i4 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i4 = HEAP32[tempDoublePtr >> 2] | 0;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = d2;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | i3 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = i4;
 HEAP32[tempDoublePtr + 4 >> 2] = i3;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function _SDL_QuitInit() {
 var i1 = 0, i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i1 = i2;
 _sigaction(2, 0, i1 | 0) | 0;
 if (!(HEAP32[i1 >> 2] | 0)) {
  HEAP32[i1 >> 2] = 270;
  _sigaction(2, i1 | 0, 0) | 0;
 }
 _sigaction(15, 0, i1 | 0) | 0;
 if (HEAP32[i1 >> 2] | 0) {
  STACKTOP = i2;
  return 0;
 }
 HEAP32[i1 >> 2] = 270;
 _sigaction(15, i1 | 0, 0) | 0;
 STACKTOP = i2;
 return 0;
}

function __ZSt9terminatev() {
 var i1 = 0, i2 = 0;
 i1 = ___cxa_get_globals_fast() | 0;
 if (((i1 | 0) != 0 ? (i2 = HEAP32[i1 >> 2] | 0, (i2 | 0) != 0) : 0) ? (i1 = i2 + 48 | 0, (HEAP32[i1 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[i1 + 4 >> 2] | 0) == 1129074247 : 0) : 0) __ZSt11__terminatePFvvE(HEAP32[i2 + 12 >> 2] | 0);
 i2 = HEAP32[5683] | 0;
 HEAP32[5683] = i2 + 0;
 __ZSt11__terminatePFvvE(i2);
}

function __ZNSt3__18ios_base16__call_callbacksENS0_5eventE(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP32[i5 + 40 >> 2] | 0;
 i2 = i5 + 32 | 0;
 i3 = i5 + 36 | 0;
 if (i1) do {
  i1 = i1 + -1 | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i2 >> 2] | 0) + (i1 << 2) >> 2] & 31](i4, i5, HEAP32[(HEAP32[i3 >> 2] | 0) + (i1 << 2) >> 2] | 0);
 } while ((i1 | 0) != 0);
 return;
}

function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 if ((i1 | 0) != (i3 | 0)) {
  i2 = i1;
  do {
   i1 = HEAP8[i2 >> 0] | 0;
   if (i1 << 24 >> 24 > -1) i1 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + (i1 << 24 >> 24 << 2) >> 2] & 255;
   HEAP8[i2 >> 0] = i1;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i3 | 0));
 }
 return i3 | 0;
}

function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 if ((i1 | 0) != (i3 | 0)) {
  i2 = i1;
  do {
   i1 = HEAP8[i2 >> 0] | 0;
   if (i1 << 24 >> 24 > -1) i1 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + (i1 << 24 >> 24 << 2) >> 2] & 255;
   HEAP8[i2 >> 0] = i1;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i3 | 0));
 }
 return i3 | 0;
}

function _fwrite(i2, i5, i1, i3) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i6 = 0;
 i4 = Math_imul(i1, i5) | 0;
 if ((HEAP32[i3 + 76 >> 2] | 0) > -1) {
  i6 = (___lockfile(i3) | 0) == 0;
  i2 = ___fwritex(i2, i4, i3) | 0;
  if (!i6) ___unlockfile(i3);
 } else i2 = ___fwritex(i2, i4, i3) | 0;
 if ((i2 | 0) != (i4 | 0)) i1 = (i2 >>> 0) / (i5 >>> 0) | 0;
 return i1 | 0;
}

function _SDL_WarpMouseInWindow(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0;
 i2 = (i1 | 0) == 0 ? HEAP32[3016] | 0 : i1;
 if (!i2) return;
 i1 = HEAP32[3010] | 0;
 if (i1) {
  FUNCTION_TABLE_viii[i1 & 31](i2, i3, i4);
  return;
 }
 i1 = HEAP32[3015] | 0;
 if (!(_SDL_UpdateMouseFocus(i2, i3, i4) | 0)) return;
 _SDL_PrivateSendMouseMotion(i2, i1, 0, i3, i4) | 0;
 return;
}

function _Emscripten_CreateCursor(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = _SDL_calloc(1, 8) | 0;
 if (!i1) {
  _SDL_Error(0) | 0;
  i3 = i1;
  return i3 | 0;
 }
 i2 = _SDL_calloc(1, 4) | 0;
 if (!i2) {
  _SDL_Error(0) | 0;
  _SDL_free(i1);
  i3 = 0;
  return i3 | 0;
 } else {
  HEAP32[i2 >> 2] = 43578;
  HEAP32[i1 + 4 >> 2] = i2;
  i3 = i1;
  return i3 | 0;
 }
 return 0;
}

function _SDL_AddEventWatch(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = _SDL_malloc(12) | 0;
 if (!i3) return;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i3 + 4 >> 2] = i2;
 HEAP32[i3 + 8 >> 2] = 0;
 i1 = HEAP32[1594] | 0;
 if (!i1) {
  HEAP32[1594] = i3;
  return;
 } else i2 = i1;
 do {
  i1 = i2 + 8 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
 } while ((i2 | 0) != 0);
 HEAP32[i1 >> 2] = i3;
 return;
}

function _SDL_RenderPresent(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 if ((i1 | 0) != 0 ? (HEAP32[i1 >> 2] | 0) == 37791 : 0) {
  if (HEAP32[i1 + 192 >> 2] | 0) {
   STACKTOP = i3;
   return;
  }
  FUNCTION_TABLE_vi[HEAP32[i1 + 84 >> 2] & 511](i1);
  STACKTOP = i3;
  return;
 }
 _SDL_SetError(37792, i2) | 0;
 STACKTOP = i3;
 return;
}

function _DISKAUD_PlayDevice(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = i1 + 184 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i3 = FUNCTION_TABLE_iiiii[HEAP32[i4 + 12 >> 2] & 31](i4, HEAP32[i3 + 4 >> 2] | 0, 1, HEAP32[i3 + 8 >> 2] | 0) | 0;
 if ((i3 | 0) == (HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] | 0)) return;
 _SDL_OpenedAudioDeviceDisconnected(i1);
 return;
}

function dynCall_viiiiiiiiiii(i12, i1, i4, i5, i6, i7, i8, i9, i10, i11, i2, i3) {
 i12 = i12 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 FUNCTION_TABLE_viiiiiiiiiii[i12 & 7](i1 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0, i9 | 0, i10 | 0, i11 | 0, i2 | 0, i3 | 0);
}

function _SDL_SetSurfaceRLE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 if (!i1) {
  i2 = -1;
  return i2 | 0;
 }
 i1 = HEAP32[i1 + 52 >> 2] | 0;
 i4 = i1 + 68 | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 i2 = (i2 | 0) == 0 ? i3 & -4097 : i3 | 4096;
 HEAP32[i4 >> 2] = i2;
 if ((i2 | 0) == (i3 | 0)) {
  i4 = 0;
  return i4 | 0;
 }
 _SDL_InvalidateMap(i1);
 i4 = 0;
 return i4 | 0;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i5, i3, i2, i1, i4, i6) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 if ((i5 | 0) == (HEAP32[i3 + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, i3, i2, i1, i4);
 return;
}

function _memmove(i1, i4, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if ((i4 | 0) < (i1 | 0) & (i1 | 0) < (i4 + i2 | 0)) {
  i3 = i1;
  i4 = i4 + i2 | 0;
  i1 = i1 + i2 | 0;
  while ((i2 | 0) > 0) {
   i1 = i1 - 1 | 0;
   i4 = i4 - 1 | 0;
   i2 = i2 - 1 | 0;
   HEAP8[i1 >> 0] = HEAP8[i4 >> 0] | 0;
  }
  i1 = i3;
 } else _memcpy(i1, i4, i2) | 0;
 return i1 | 0;
}

function _SDL_EGL_DeleteContext(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i1 = i1 + 644 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!((i3 | 0) != 0 & (i2 | 0) != 0)) return;
 FUNCTION_TABLE_iiiii[HEAP32[i2 + 56 >> 2] & 31](HEAP32[i2 + 8 >> 2] | 0, 0, 0, 0) | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 FUNCTION_TABLE_iii[HEAP32[i2 + 44 >> 2] & 63](HEAP32[i2 + 8 >> 2] | 0, i3) | 0;
 return;
}

function __ZN5Vec2f5limitEf(i3, d4) {
 i3 = i3 | 0;
 d4 = +d4;
 var d1 = 0.0, d2 = 0.0;
 d1 = +HEAPF32[i3 >> 2];
 if (!(d1 > d4)) {
  d2 = -d4;
  if (d1 < d2) HEAPF32[i3 >> 2] = d2;
 } else HEAPF32[i3 >> 2] = d4;
 i3 = i3 + 4 | 0;
 d2 = +HEAPF32[i3 >> 2];
 if (d2 > d4) {
  HEAPF32[i3 >> 2] = d4;
  return;
 }
 d1 = -d4;
 if (!(d2 < d1)) return;
 HEAPF32[i3 >> 2] = d1;
 return;
}

function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i5, i4, i1, i3, i2) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i6;
 HEAP32[i7 >> 2] = i2;
 i2 = _uselocale(i1) | 0;
 i1 = _vsnprintf(i5, i4, i3, i7) | 0;
 if (i2) _uselocale(i2) | 0;
 STACKTOP = i6;
 return i1 | 0;
}

function __ZNSt3__120__shared_ptr_emplaceI13PlayerVehicleNS_9allocatorIS1_EEE16__on_zero_sharedEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[i1 + 12 >> 2] = 3180;
 i3 = HEAP32[i1 + 32 >> 2] | 0;
 if (!i3) return;
 i1 = i1 + 36 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (i3 | 0)) HEAP32[i1 >> 2] = i2 + (~((i2 + -8 - i3 | 0) >>> 3) << 3);
 __ZdlPv(i3);
 return;
}

function _Emscripten_HandleMouseButton(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i1 = HEAP16[i1 + 40 >> 1] | 0;
 if ((i1 & 65535) >= 3) {
  i3 = 0;
  return i3 | 0;
 }
 i2 = (i2 | 0) == 5;
 _SDL_SendMouseButton(HEAP32[i3 + 4 >> 2] | 0, 0, i2 & 1, (i1 & 255) + 1 << 24 >> 24) | 0;
 i3 = (_SDL_EventState(i2 & 1, -1) | 0) << 24 >> 24 == 1 & 1;
 return i3 | 0;
}

function __ZNSt3__120__shared_ptr_emplaceI11KeyBindingsNS_9allocatorIS1_EEE16__on_zero_sharedEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = HEAP32[i2 + 20 >> 2] | 0;
 if (i1) do {
  i3 = i1;
  i1 = HEAP32[i1 >> 2] | 0;
  __ZdlPv(i3);
 } while ((i1 | 0) != 0);
 i3 = i2 + 12 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = 0;
 if (!i1) return;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 30452) | 0;
 HEAP32[i2 + 36 >> 2] = i1;
 HEAP8[i2 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i1) | 0) & 1;
 return;
}

function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 30444) | 0;
 HEAP32[i2 + 36 >> 2] = i1;
 HEAP8[i2 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i1) | 0) & 1;
 return;
}

function _llvm_cttz_i32(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP8[cttz_i8 + (i2 & 255) >> 0] | 0;
 if ((i1 | 0) < 8) return i1 | 0;
 i1 = HEAP8[cttz_i8 + (i2 >> 8 & 255) >> 0] | 0;
 if ((i1 | 0) < 8) return i1 + 8 | 0;
 i1 = HEAP8[cttz_i8 + (i2 >> 16 & 255) >> 0] | 0;
 if ((i1 | 0) < 8) return i1 + 16 | 0;
 return (HEAP8[cttz_i8 + (i2 >>> 24) >> 0] | 0) + 24 | 0;
}

function __ZNSt3__16locale2id5__getEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i3;
 if ((HEAP32[i2 >> 2] | 0) != -1) {
  HEAP32[i1 >> 2] = i2;
  HEAP32[i1 + 4 >> 2] = 348;
  HEAP32[i1 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(i2, i1, 349);
 }
 STACKTOP = i3;
 return (HEAP32[i2 + 4 >> 2] | 0) + -1 | 0;
}

function __ZNSt3__120__shared_ptr_emplaceI8ObstacleNS_9allocatorIS1_EEE16__on_zero_sharedEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[i1 + 12 >> 2] = 3180;
 i3 = HEAP32[i1 + 32 >> 2] | 0;
 if (!i3) return;
 i1 = i1 + 36 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (i3 | 0)) HEAP32[i1 >> 2] = i2 + (~((i2 + -8 - i3 | 0) >>> 3) << 3);
 __ZdlPv(i3);
 return;
}

function _SDL_GL_GetSwapInterval() {
 var i1 = 0, i2 = 0;
 i1 = HEAP32[3256] | 0;
 if (!i1) {
  i2 = 0;
  return i2 | 0;
 }
 if (!(_SDL_TLSGet(HEAP32[i1 + 632 >> 2] | 0) | 0)) {
  i2 = 0;
  return i2 | 0;
 }
 i1 = HEAP32[3256] | 0;
 i2 = HEAP32[i1 + 164 >> 2] | 0;
 if (!i2) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = FUNCTION_TABLE_ii[i2 & 127](i1) | 0;
 return i2 | 0;
}

function ___cxa_can_catch(i1, i2, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i5;
 HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 i1 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 63](i1, i2, i3) | 0;
 if (i1) HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 STACKTOP = i5;
 return i1 & 1 | 0;
}

function _calloc(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 if (i3) {
  i2 = Math_imul(i1, i3) | 0;
  if ((i1 | i3) >>> 0 > 65535) i2 = ((i2 >>> 0) / (i3 >>> 0) | 0 | 0) == (i1 | 0) ? i2 : -1;
 } else i2 = 0;
 i1 = _malloc(i2) | 0;
 if (!i1) return i1 | 0;
 if (!(HEAP32[i1 + -4 >> 2] & 3)) return i1 | 0;
 _memset(i1 | 0, 0, i2 | 0) | 0;
 return i1 | 0;
}

function _Emscripten_DestroyWindow(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i1 = i1 + 136 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) return;
 _Emscripten_UnregisterEventHandlers(i2);
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3) {
  _SDL_EGL_DestroySurface(i4, i3);
  HEAP32[i2 >> 2] = 0;
 }
 _SDL_free(HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 return;
}

function _SDL_UpdateWindowGrab(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 if (!(HEAP32[(HEAP32[3256] | 0) + 96 >> 2] | 0)) return;
 i3 = HEAP32[(_SDL_GetMouse() | 0) + 76 >> 2] | 0;
 i2 = HEAP32[i1 + 48 >> 2] | 0;
 i4 = HEAP32[3256] | 0;
 FUNCTION_TABLE_viii[HEAP32[i4 + 96 >> 2] & 31](i4, i1, ((i3 | i2 & 256 | 0) == 0 | i2 >>> 9 & 1 ^ 1) ^ 1);
 return;
}

function _SDL_SetRenderDrawBlendMode(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i4;
 if ((i2 | 0) != 0 ? (HEAP32[i2 >> 2] | 0) == 37791 : 0) {
  HEAP32[i2 + 312 >> 2] = i1;
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 _SDL_SetError(37792, i3) | 0;
 i3 = -1;
 STACKTOP = i4;
 return i3 | 0;
}

function __ZNKSt3__120__time_get_c_storageIwE3__xEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2816] | 0) == 0 ? (___cxa_guard_acquire(2816) | 0) != 0 : 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(33648, 33612, _wcslen(33612) | 0);
  ___cxa_atexit(357, 33648, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2816);
 }
 return 33648;
}

function __ZNKSt3__120__time_get_c_storageIwE3__rEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2864] | 0) == 0 ? (___cxa_guard_acquire(2864) | 0) != 0 : 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(33888, 33840, _wcslen(33840) | 0);
  ___cxa_atexit(357, 33888, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2864);
 }
 return 33888;
}

function __ZNKSt3__120__time_get_c_storageIwE3__cEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2848] | 0) == 0 ? (___cxa_guard_acquire(2848) | 0) != 0 : 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(33816, 33732, _wcslen(33732) | 0);
  ___cxa_atexit(357, 33816, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2848);
 }
 return 33816;
}

function __ZNKSt3__120__time_get_c_storageIwE3__XEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2832] | 0) == 0 ? (___cxa_guard_acquire(2832) | 0) != 0 : 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(33708, 33672, _wcslen(33672) | 0);
  ___cxa_atexit(357, 33708, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2832);
 }
 return 33708;
}

function _SDL_CalculatePitch(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 i1 = Math_imul(HEAPU8[i2 + 9 >> 0] | 0, HEAP32[i1 + 8 >> 2] | 0) | 0;
 switch (HEAPU8[i2 + 8 >> 0] | 0 | 0) {
 case 1:
  {
   i1 = (i1 + 7 | 0) / 8 | 0;
   break;
  }
 case 4:
  {
   i1 = (i1 + 1 | 0) / 2 | 0;
   break;
  }
 default:
  {}
 }
 return i1 + 3 & -4 | 0;
}

function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = i2 + 4 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i3 + 4 >> 2] | 0;
 i2 = (HEAP32[i2 >> 2] | 0) + (i3 >> 1) | 0;
 if (i3 & 1) i1 = HEAP32[(HEAP32[i2 >> 2] | 0) + i1 >> 2] | 0;
 FUNCTION_TABLE_vi[i1 & 511](i2);
 return;
}

function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i4, i1, i3, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = i2;
 i2 = _uselocale(i1) | 0;
 i1 = _vasprintf(i4, i3, i6) | 0;
 if (i2) _uselocale(i2) | 0;
 STACKTOP = i5;
 return i1 | 0;
}

function _Emscripten_GLES_GetDrawableSize(i1, i4, i3, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i4 + 136 >> 2] | 0;
 if (!i1) return;
 if (i3) HEAP32[i3 >> 2] = ~~(+(HEAP32[i4 + 24 >> 2] | 0) * +HEAPF32[i1 + 12 >> 2]);
 if (!i2) return;
 HEAP32[i2 >> 2] = ~~(+(HEAP32[i4 + 28 >> 2] | 0) * +HEAPF32[i1 + 12 >> 2]);
 return;
}

function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc(i3, i2, i5, i4, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 if ((i2 | 0) != (i5 | 0)) while (1) {
  i3 = HEAP8[i2 >> 0] | 0;
  HEAP8[i1 >> 0] = i3 << 24 >> 24 > -1 ? i3 : i4;
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == (i5 | 0)) break; else i1 = i1 + 1 | 0;
 }
 return i5 | 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = i1 + 4 | 0;
 i1 = i2;
 i2 = HEAP32[i3 >> 2] | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = (HEAP32[i3 >> 2] | 0) + 4 | 0;
  HEAP32[i3 >> 2] = i2;
  i1 = i1 + -1 | 0;
 } while ((i1 | 0) != 0);
 return;
}

function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z(i4, i1, i3, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = i2;
 i2 = _uselocale(i1) | 0;
 i1 = _vsscanf(i4, i3, i6) | 0;
 if (i2) _uselocale(i2) | 0;
 STACKTOP = i5;
 return i1 | 0;
}

function __ZNKSt3__17collateIwE7do_hashEPKwS3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 if ((i2 | 0) == (i3 | 0)) i1 = 0; else {
  i1 = 0;
  do {
   i1 = (HEAP32[i2 >> 2] | 0) + (i1 << 4) | 0;
   i4 = i1 & -268435456;
   i1 = (i4 >>> 24 | i4) ^ i1;
   i2 = i2 + 4 | 0;
  } while ((i2 | 0) != (i3 | 0));
 }
 return i1 | 0;
}

function __ZNKSt3__17collateIcE7do_hashEPKcS3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 if ((i2 | 0) == (i3 | 0)) i1 = 0; else {
  i1 = 0;
  do {
   i1 = (HEAP8[i2 >> 0] | 0) + (i1 << 4) | 0;
   i4 = i1 & -268435456;
   i1 = (i4 >>> 24 | i4) ^ i1;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i3 | 0));
 }
 return i1 | 0;
}

function __ZNSt3__18ios_base4InitD2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(27316) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(27484) | 0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(27656) | 0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(27824) | 0;
 return;
}

function _SDL_HasAltiVec() {
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 i1 = HEAP32[1585] | 0;
 if ((i1 | 0) == -1) {
  HEAP32[1585] = 0;
  HEAP32[i2 >> 2] = 0;
  i1 = HEAP32[1585] | 0;
  if (HEAP32[i2 >> 2] | 0) {
   i1 = i1 | 2;
   HEAP32[1585] = i1;
  }
 }
 STACKTOP = i3;
 return i1 >>> 1 & 1 | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE3__rEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2856] | 0) == 0 ? (___cxa_guard_acquire(2856) | 0) != 0 : 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(33828, 63329, 11);
  ___cxa_atexit(356, 33828, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2856);
 }
 return 33828;
}

function __ZNKSt3__120__time_get_c_storageIcE3__cEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2840] | 0) == 0 ? (___cxa_guard_acquire(2840) | 0) != 0 : 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(33720, 63308, 20);
  ___cxa_atexit(356, 33720, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2840);
 }
 return 33720;
}

function ___uflow(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i3;
 if ((HEAP32[i2 + 8 >> 2] | 0) == 0 ? (___toread(i2) | 0) != 0 : 0) i1 = -1; else if ((FUNCTION_TABLE_iiii[HEAP32[i2 + 32 >> 2] & 63](i2, i1, 1) | 0) == 1) i1 = HEAPU8[i1 >> 0] | 0; else i1 = -1;
 STACKTOP = i3;
 return i1 | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE3__xEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2808] | 0) == 0 ? (___cxa_guard_acquire(2808) | 0) != 0 : 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(33600, 63290, 8);
  ___cxa_atexit(356, 33600, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2808);
 }
 return 33600;
}

function __ZNKSt3__120__time_get_c_storageIcE3__XEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2824] | 0) == 0 ? (___cxa_guard_acquire(2824) | 0) != 0 : 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(33660, 63299, 8);
  ___cxa_atexit(356, 33660, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2824);
 }
 return 33660;
}

function _SDL_Has3DNow() {
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 i1 = HEAP32[1585] | 0;
 if ((i1 | 0) == -1) {
  HEAP32[1585] = 0;
  HEAP32[i2 >> 2] = 0;
  i1 = HEAP32[1585] | 0;
  if (HEAP32[i2 >> 2] | 0) {
   i1 = i1 | 2;
   HEAP32[1585] = i1;
  }
 }
 STACKTOP = i3;
 return i1 >>> 3 & 1 | 0;
}

function _SDL_HasSSE2() {
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 i1 = HEAP32[1585] | 0;
 if ((i1 | 0) == -1) {
  HEAP32[1585] = 0;
  HEAP32[i2 >> 2] = 0;
  i1 = HEAP32[1585] | 0;
  if (HEAP32[i2 >> 2] | 0) {
   i1 = i1 | 2;
   HEAP32[1585] = i1;
  }
 }
 STACKTOP = i3;
 return i1 >>> 5 & 1 | 0;
}

function __ZN13PlayerVehicle6renderEP12SDL_Renderer(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = HEAP32[i2 + 20 >> 2] | 0;
 _trigonColor(i1, ~~+HEAPF32[i3 >> 2], ~~+HEAPF32[i3 + 4 >> 2], ~~+HEAPF32[i3 + 8 >> 2], ~~+HEAPF32[i3 + 12 >> 2], ~~+HEAPF32[i3 + 16 >> 2], ~~+HEAPF32[i3 + 20 >> 2], HEAP32[i2 + 32 >> 2] | 0) | 0;
 return;
}

function _SDL_HasSSE() {
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 i1 = HEAP32[1585] | 0;
 if ((i1 | 0) == -1) {
  HEAP32[1585] = 0;
  HEAP32[i2 >> 2] = 0;
  i1 = HEAP32[1585] | 0;
  if (HEAP32[i2 >> 2] | 0) {
   i1 = i1 | 2;
   HEAP32[1585] = i1;
  }
 }
 STACKTOP = i3;
 return i1 >>> 4 & 1 | 0;
}

function _SDL_HasMMX() {
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 i1 = HEAP32[1585] | 0;
 if ((i1 | 0) == -1) {
  HEAP32[1585] = 0;
  HEAP32[i2 >> 2] = 0;
  i1 = HEAP32[1585] | 0;
  if (HEAP32[i2 >> 2] | 0) {
   i1 = i1 | 2;
   HEAP32[1585] = i1;
  }
 }
 STACKTOP = i3;
 return i1 >>> 2 & 1 | 0;
}

function ___shlim(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 HEAP32[i3 + 104 >> 2] = i4;
 i1 = HEAP32[i3 + 4 >> 2] | 0;
 i2 = HEAP32[i3 + 8 >> 2] | 0;
 i5 = i2 - i1 | 0;
 HEAP32[i3 + 108 >> 2] = i5;
 if ((i4 | 0) != 0 & (i5 | 0) > (i4 | 0)) HEAP32[i3 + 100 >> 2] = i1 + i4; else HEAP32[i3 + 100 >> 2] = i2;
 return;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 if ((i4 | 0) == (HEAP32[i2 + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, i2, i1, i3);
 return;
}

function __ZN4Game6renderEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + 12 | 0;
 _SDL_SetRenderDrawColor(HEAP32[i2 >> 2] | 0, -1, -1, -1, -1) | 0;
 _SDL_RenderClear(HEAP32[i2 >> 2] | 0) | 0;
 __ZN17GameObjectManager9renderAllEP12SDL_Renderer(HEAP32[i1 + 16 >> 2] | 0, HEAP32[i2 >> 2] | 0);
 _SDL_RenderPresent(HEAP32[i2 >> 2] | 0);
 return;
}

function _rand() {
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = 1048;
 i2 = ___muldi3(HEAP32[i2 >> 2] | 0, HEAP32[i2 + 4 >> 2] | 0, 1284865837, 1481765933) | 0;
 i2 = _i64Add(i2 | 0, tempRet0 | 0, 1, 0) | 0;
 i1 = tempRet0;
 i3 = 1048;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i3 + 4 >> 2] = i1;
 i1 = _bitshift64Lshr(i2 | 0, i1 | 0, 33) | 0;
 return i1 | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj(i5, i6, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 i6 = i5 + 8 | 0;
 HEAP32[i6 >> 2] = -1;
 HEAP32[i6 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj(i5, i6, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 i6 = i5 + 8 | 0;
 HEAP32[i6 >> 2] = -1;
 HEAP32[i6 + 4 >> 2] = -1;
 return;
}

function dynCall_iiiiiiiiii(i10, i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i10 = i10 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 return FUNCTION_TABLE_iiiiiiiiii[i10 & 1](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0, i9 | 0) | 0;
}

function _emscripten_glCompressedTexSubImage2D__wrapper(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 _emscripten_glCompressedTexSubImage2D(i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0, i9 | 0);
}

function _Emscripten_ShowCursor(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 if (!(_SDL_GetMouseFocus() | 0)) return 0;
 if ((i2 | 0) != 0 ? (i1 = HEAP32[i2 + 4 >> 2] | 0, (i1 | 0) != 0) : 0) {
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) return 0;
  _emscripten_asm_const_1(1, i1 | 0) | 0;
  return 0;
 }
 _emscripten_asm_const_0(2);
 return 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 29048;
 __ZNSt3__16localeC2Ev(i1 + 4 | 0);
 i1 = i1 + 8 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 28984;
 __ZNSt3__16localeC2Ev(i1 + 4 | 0);
 i1 = i1 + 8 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 return;
}

function _SDL_GL_GetCurrentContext() {
 var i1 = 0, i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[3256] | 0;
 if (!i1) {
  _SDL_SetError(41242, i2) | 0;
  i1 = 0;
  STACKTOP = i2;
  return i1 | 0;
 } else {
  i1 = _SDL_TLSGet(HEAP32[i1 + 632 >> 2] | 0) | 0;
  STACKTOP = i2;
  return i1 | 0;
 }
 return 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) i1 = -1; else {
  i2 = i1 + 12 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  HEAP32[i2 >> 2] = i1 + 4;
  i1 = HEAP32[i1 >> 2] | 0;
 }
 return i1 | 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) i1 = -1; else {
  i2 = i1 + 12 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  HEAP32[i2 >> 2] = i1 + 1;
  i1 = HEAPU8[i1 >> 0] | 0;
 }
 return i1 | 0;
}

function _SDL_LogOutput(i4, i1, i3, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i4;
 i5 = HEAP32[5785] | 0;
 HEAP32[i1 >> 2] = HEAP32[22704 + (i3 << 2) >> 2];
 HEAP32[i1 + 4 >> 2] = i2;
 _fprintf(i5, 52335, i1) | 0;
 STACKTOP = i4;
 return;
}

function _SDL_DestroyWindowTexture(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = _SDL_SetWindowData(i2, 48261, 0) | 0;
 if (!i2) return;
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 if (i1) _SDL_DestroyTexture(i1);
 i1 = HEAP32[i2 >> 2] | 0;
 if (i1) _SDL_DestroyRenderer(i1);
 _SDL_free(HEAP32[i2 + 8 >> 2] | 0);
 _SDL_free(i2);
 return;
}

function _SDL_CreateMutex() {
 var i1 = 0, i2 = 0;
 i1 = _SDL_malloc(12) | 0;
 if (!i1) {
  _SDL_Error(0) | 0;
  return i1 | 0;
 }
 i2 = _SDL_CreateSemaphore(1) | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 if (i2) {
  i2 = i1;
  return i2 | 0;
 }
 _SDL_free(i1);
 i2 = 0;
 return i2 | 0;
}

function _SDL_AllocBlitMap() {
 var i1 = 0, i2 = 0;
 i1 = _SDL_calloc(1, 88) | 0;
 if (!i1) {
  _SDL_Error(0) | 0;
  i1 = 0;
  return i1 | 0;
 } else {
  i2 = i1 + 76 | 0;
  HEAP8[i2 >> 0] = -1;
  HEAP8[i2 + 1 >> 0] = -1 >> 8;
  HEAP8[i2 + 2 >> 0] = -1 >> 16;
  HEAP8[i2 + 3 >> 0] = -1 >> 24;
  return i1 | 0;
 }
 return 0;
}

function dynCall_viiiiiiiii(i10, i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i10 = i10 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 FUNCTION_TABLE_viiiiiiiii[i10 & 15](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0, i9 | 0);
}

function _sn_write(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 i4 = i1 + 20 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i1 = (HEAP32[i1 + 16 >> 2] | 0) - i5 | 0;
 i1 = i1 >>> 0 > i2 >>> 0 ? i2 : i1;
 _memcpy(i5 | 0, i3 | 0, i1 | 0) | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i1;
 return i2 | 0;
}

function _SDL_EGL_GetSwapInterval(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[i1 + 644 >> 2] | 0;
 if (!i1) {
  i1 = _SDL_SetError(40193, i2) | 0;
  STACKTOP = i2;
  return i1 | 0;
 } else {
  i1 = HEAP32[i1 + 16 >> 2] | 0;
  STACKTOP = i2;
  return i1 | 0;
 }
 return 0;
}

function __ZNSt3__18ios_baseD2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 29272;
 __ZNSt3__18ios_base16__call_callbacksENS0_5eventE(i1, 0);
 __ZNSt3__16localeD2Ev(i1 + 28 | 0);
 _free(HEAP32[i1 + 32 >> 2] | 0);
 _free(HEAP32[i1 + 36 >> 2] | 0);
 _free(HEAP32[i1 + 48 >> 2] | 0);
 _free(HEAP32[i1 + 60 >> 2] | 0);
 return;
}

function _SDL_GL_DeleteContext(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[3256] | 0;
 if (!((i2 | 0) != 0 & (i1 | 0) != 0)) return;
 if ((_SDL_TLSGet(HEAP32[i1 + 632 >> 2] | 0) | 0) == (i2 | 0)) _SDL_GL_MakeCurrent(0, 0) | 0;
 i1 = HEAP32[3256] | 0;
 FUNCTION_TABLE_vii[HEAP32[i1 + 172 >> 2] & 127](i1, i2);
 return;
}

function _SDL_SendMouseMotion(i3, i1, i2, i4, i5) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 if (!((i3 | 0) == 0 | (i2 | 0) != 0) ? (_SDL_UpdateMouseFocus(i3, i4, i5) | 0) == 0 : 0) {
  i5 = 0;
  return i5 | 0;
 }
 i5 = _SDL_PrivateSendMouseMotion(i3, i1, i2, i4, i5) | 0;
 return i5 | 0;
}

function _SDL_GetColorKey(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i1) {
  i2 = -1;
  return i2 | 0;
 }
 i1 = HEAP32[i1 + 52 >> 2] | 0;
 if (!(HEAP32[i1 + 68 >> 2] & 256)) {
  i2 = -1;
  return i2 | 0;
 }
 if (!i2) {
  i2 = 0;
  return i2 | 0;
 }
 HEAP32[i2 >> 2] = HEAP32[i1 + 72 >> 2];
 i2 = 0;
 return i2 | 0;
}

function __ZNSt3__15ctypeIcEC2EPKtbj(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i4 + 4 >> 2] = i1 + -1;
 HEAP32[i4 >> 2] = 30400;
 i1 = i4 + 8 | 0;
 HEAP32[i1 >> 2] = i3;
 HEAP8[i4 + 12 >> 0] = i2 & 1;
 if (!i3) HEAP32[i1 >> 2] = HEAP32[(___ctype_b_loc() | 0) >> 2];
 return;
}

function _Emscripten_GLES_MakeCurrent(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 if ((i3 | 0) != 0 & (i2 | 0) != 0) {
  i3 = _SDL_EGL_MakeCurrent(i1, HEAP32[HEAP32[i3 + 136 >> 2] >> 2] | 0, i2) | 0;
  return i3 | 0;
 } else {
  i3 = _SDL_EGL_MakeCurrent(i1, 0, 0) | 0;
  return i3 | 0;
 }
 return 0;
}

function _emscripten_glTexSubImage2D__wrapper(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 _emscripten_glTexSubImage2D(i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0, i9 | 0);
}

function _SDL_TouchQuit() {
 var i1 = 0, i2 = 0;
 i1 = HEAP32[3034] | 0;
 if (i1) do {
  i1 = i1 + -1 | 0;
  i2 = HEAP32[(HEAP32[3035] | 0) + (i1 << 2) >> 2] | 0;
  _SDL_DelTouch(HEAP32[i2 >> 2] | 0, HEAP32[i2 + 4 >> 2] | 0);
 } while ((i1 | 0) != 0);
 _SDL_free(HEAP32[3035] | 0);
 HEAP32[3035] = 0;
 return;
}

function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = _catopen((HEAP8[i2 >> 0] & 1) == 0 ? i2 + 1 | 0 : HEAP32[i2 + 8 >> 2] | 0, 1) | 0;
 return i3 >>> ((i3 | 0) != (-1 | 0) & 1) | 0;
}

function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = _catopen((HEAP8[i2 >> 0] & 1) == 0 ? i2 + 1 | 0 : HEAP32[i2 + 8 >> 2] | 0, 1) | 0;
 return i3 >>> ((i3 | 0) != (-1 | 0) & 1) | 0;
}

function _emscripten_glTexImage2D__wrapper(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 _emscripten_glTexImage2D(i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0, i9 | 0);
}

function _SDL_LockSurface(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = i2 + 28 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!i1) if (!(HEAP32[i2 >> 2] & 2)) i1 = 0; else {
  _SDL_UnRLESurface(i2, 1);
  HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 2;
  i1 = HEAP32[i3 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i1 + 1;
 return 0;
}

function _SDL_EGL_CreateSurface(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (_SDL_EGL_ChooseConfig(i1) | 0) {
  i2 = 0;
  return i2 | 0;
 }
 i1 = HEAP32[i1 + 644 >> 2] | 0;
 i2 = FUNCTION_TABLE_iiiii[HEAP32[i1 + 48 >> 2] & 31](HEAP32[i1 + 8 >> 2] | 0, HEAP32[i1 + 12 >> 2] | 0, i2, 0) | 0;
 return i2 | 0;
}

function ___uremdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6 | 0;
 ___udivmoddi4(i1, i2, i3, i4, i5) | 0;
 STACKTOP = i6;
 return (tempRet0 = HEAP32[i5 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj(i3, i4, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = i3 + 8 | 0;
 HEAP32[i4 >> 2] = -1;
 HEAP32[i4 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj(i3, i4, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = i3 + 8 | 0;
 HEAP32[i4 >> 2] = -1;
 HEAP32[i4 + 4 >> 2] = -1;
 return;
}

function dynCall_iiiiiiiii(i9, i1, i2, i3, i4, i5, i6, i7, i8) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 return FUNCTION_TABLE_iiiiiiiii[i9 & 31](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0) | 0;
}

function _SDL_UnlockSurface(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = i3 + 28 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) return;
 HEAP32[i1 >> 2] = i2 + -1;
 if ((i2 | 0) > 1) return;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!(i1 & 2)) return;
 HEAP32[i3 >> 2] = i1 & -3;
 _SDL_RLESurface(i3) | 0;
 return;
}

function _SDL_SW_DestroyYUVTexture(i1) {
 i1 = i1 | 0;
 if (!i1) return;
 _SDL_free(HEAP32[i1 + 16 >> 2] | 0);
 _SDL_free(HEAP32[i1 + 20 >> 2] | 0);
 _SDL_free(HEAP32[i1 + 24 >> 2] | 0);
 _SDL_FreeSurface(HEAP32[i1 + 56 >> 2] | 0);
 _SDL_FreeSurface(HEAP32[i1 + 60 >> 2] | 0);
 _SDL_free(i1);
 return;
}

function ___fseeko(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 if ((HEAP32[i3 + 76 >> 2] | 0) > -1) {
  i4 = (___lockfile(i3) | 0) == 0;
  i1 = ___fseeko_unlocked(i3, i1, i2) | 0;
  if (!i4) ___unlockfile(i3);
 } else i1 = ___fseeko_unlocked(i3, i1, i2) | 0;
 return i1 | 0;
}

function _emscripten_glCompressedTexImage2D__wrapper(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 _emscripten_glCompressedTexImage2D(i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0);
}

function _SDL_CalculateAudioSpec(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP16[i1 + 4 >> 1] | 0;
 HEAP8[i1 + 7 >> 0] = i2 << 16 >> 16 == 8 ? -128 : 0;
 i2 = Math_imul((i2 & 65535) >>> 3 & 31, HEAPU8[i1 + 6 >> 0] | 0) | 0;
 HEAP32[i1 + 12 >> 2] = Math_imul(i2, HEAPU16[i1 + 8 >> 1] | 0) | 0;
 return;
}

function _stdio_write(i1, i4, i5, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = i1 + 28 | 0;
 i1 = _fwrite(i4, i5, i3, HEAP32[i2 >> 2] | 0) | 0;
 if (i1) return i1 | 0;
 if (!(_ferror(HEAP32[i2 >> 2] | 0) | 0)) return i1 | 0;
 _SDL_Error(2) | 0;
 return i1 | 0;
}

function _SDL_TLSGet(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = _SDL_SYS_GetTLSData() | 0;
 if ((i2 | 0) == 0 | (i1 | 0) == 0) {
  i2 = 0;
  return i2 | 0;
 }
 if ((HEAP32[i1 >> 2] | 0) >>> 0 < i2 >>> 0) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = HEAP32[i1 + 4 + (i2 + -1 << 3) >> 2] | 0;
 return i2 | 0;
}

function _stdio_read(i1, i4, i5, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = i1 + 28 | 0;
 i1 = _fread(i4, i5, i3, HEAP32[i2 >> 2] | 0) | 0;
 if (i1) return i1 | 0;
 if (!(_ferror(HEAP32[i2 >> 2] | 0) | 0)) return i1 | 0;
 _SDL_Error(1) | 0;
 return i1 | 0;
}

function __ZNSt3__114__shared_count16__release_sharedEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = i1 + 4 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = i2 + -1;
 if (!i2) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 511](i1);
  i1 = 1;
 } else i1 = 0;
 return i1 | 0;
}

function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc(i3, i2, i4, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 if ((i2 | 0) != (i4 | 0)) while (1) {
  HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == (i4 | 0)) break; else i1 = i1 + 1 | 0;
 }
 return i4 | 0;
}

function _GLES2_WindowEvent(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 switch (HEAP8[i1 + 12 >> 0] | 0) {
 case 2:
 case 1:
 case 6:
  {
   HEAP32[3491] = 0;
   return;
  }
 case 7:
  {
   FUNCTION_TABLE_v[HEAP32[(HEAP32[i2 + 316 >> 2] | 0) + 88 >> 2] & 15]();
   return;
  }
 default:
  return;
 }
}

function _Emscripten_CloseDevice(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = i1 + 184 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!i1) return;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2) {
  _SDL_free(i2);
  i1 = HEAP32[i3 >> 2] | 0;
  HEAP32[i1 >> 2] = 0;
 }
 _SDL_free(i1);
 HEAP32[i3 >> 2] = 0;
 return;
}

function _emscripten_glCopyTexSubImage2D__wrapper(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 _emscripten_glCopyTexSubImage2D(i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0);
}

function __ZNKSt3__17collateIwE12do_transformEPKwS3_(i3, i4, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_(i3, i2, i1);
 return;
}

function __ZNKSt3__17collateIcE12do_transformEPKcS3_(i3, i4, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_(i3, i2, i1);
 return;
}

function _stdio_seek(i2, i3, i1, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i1 = i2 + 28 | 0;
 if (!(___fseeko(HEAP32[i1 >> 2] | 0, i3, i4) | 0)) i1 = ___ftello(HEAP32[i1 >> 2] | 0) | 0; else i1 = _SDL_Error(3) | 0;
 tempRet0 = ((i1 | 0) < 0) << 31 >> 31;
 return i1 | 0;
}

function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw(i3, i2, i4, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 if ((i2 | 0) != (i4 | 0)) while (1) {
  HEAP32[i1 >> 2] = HEAP8[i2 >> 0];
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == (i4 | 0)) break; else i1 = i1 + 4 | 0;
 }
 return i4 | 0;
}

function _SDL_snprintf(i3, i2, i1, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = i4;
 i4 = _vsnprintf(i3, i2, (i1 | 0) == 0 ? 62969 : i1, i6) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function dynCall_viiiiiiii(i9, i1, i2, i3, i4, i5, i6, i7, i8) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 FUNCTION_TABLE_viiiiiiii[i9 & 3](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0);
}

function __ZNSt3__18numpunctIwEC2Ej(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 + 4 >> 2] = i1 + -1;
 HEAP32[i2 >> 2] = 30588;
 HEAP32[i2 + 8 >> 2] = 46;
 HEAP32[i2 + 12 >> 2] = 44;
 i2 = i2 + 16 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 return;
}

function _emscripten_glCopyTexImage2D__wrapper(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 _emscripten_glCopyTexImage2D(i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0);
}

function __ZNSt3__18numpunctIcEC2Ej(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 + 4 >> 2] = i1 + -1;
 HEAP32[i2 >> 2] = 30548;
 HEAP8[i2 + 8 >> 0] = 46;
 HEAP8[i2 + 9 >> 0] = 44;
 i2 = i2 + 12 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 return;
}

function _SW_UpdateClipRect(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[HEAP32[i2 + 316 >> 2] >> 2] | 0;
 if (!i1) return 0;
 if (!(HEAP32[i2 + 276 >> 2] | 0)) {
  _SDL_SetClipRect(i1, 0) | 0;
  return 0;
 } else {
  _SDL_SetClipRect(i1, i2 + 244 | 0) | 0;
  return 0;
 }
 return 0;
}

function ___muldi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = i1;
 i6 = i3;
 i3 = ___muldsi3(i5, i6) | 0;
 i1 = tempRet0;
 return (tempRet0 = (Math_imul(i2, i6) | 0) + (Math_imul(i4, i5) | 0) + i1 | i1 & 0, i3 | 0 | 0) | 0;
}

function __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i1) {
 i1 = i1 | 0;
 switch (HEAP32[i1 + 4 >> 2] & 74 | 0) {
 case 64:
  {
   i1 = 8;
   break;
  }
 case 8:
  {
   i1 = 16;
   break;
  }
 case 0:
  {
   i1 = 0;
   break;
  }
 default:
  i1 = 10;
 }
 return i1 | 0;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_(i6, i1, i4, i2, i5, i7, i3, i8) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i8 >> 2] = i7;
 return 3;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_(i6, i1, i4, i2, i5, i7, i3, i8) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i8 >> 2] = i7;
 return 3;
}

function __ZN5Clock7restartEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = i1 + 4 | 0;
 if (!(HEAP8[i3 >> 0] | 0)) i2 = 0; else {
  i2 = _SDL_GetTicks() | 0;
  i2 = i2 - (HEAP32[i1 >> 2] | 0) | 0;
 }
 HEAP8[i3 >> 0] = 1;
 HEAP32[i1 >> 2] = _SDL_GetTicks() | 0;
 return i2 | 0;
}

function _wmemcpy(i4, i2, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 if (i1) {
  i3 = i4;
  while (1) {
   i1 = i1 + -1 | 0;
   HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
   if (!i1) break; else {
    i2 = i2 + 4 | 0;
    i3 = i3 + 4 | 0;
   }
  }
 }
 return i4 | 0;
}

function _Emscripten_SetRelativeMouseMode(i1) {
 i1 = i1 | 0;
 if (!i1) {
  if ((_emscripten_exit_pointerlock() | 0) > -1) {
   i1 = 0;
   return i1 | 0;
  }
 } else if ((_emscripten_request_pointerlock(0, 1) | 0) > -1) {
  i1 = 0;
  return i1 | 0;
 }
 i1 = -1;
 return i1 | 0;
}

function _Emscripten_HandleFocus(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 if ((i1 | 0) == 12) _SDL_ResetKeyboard();
 _SDL_SendWindowEvent(HEAP32[i2 + 4 >> 2] | 0, (i1 | 0) == 13 ? 12 : 13, 0, 0) | 0;
 return (_SDL_EventState(512, -1) | 0) << 24 >> 24 == 1 | 0;
}

function ___cxa_get_globals_fast() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(_pthread_once(22884, 5) | 0)) {
  i2 = _pthread_getspecific(HEAP32[5720] | 0) | 0;
  STACKTOP = i1;
  return i2 | 0;
 } else _abort_message(52773, i1);
 return 0;
}

function _SDL_strlcpy(i2, i4, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 i1 = _strlen(i4) | 0;
 if (!i3) return i1 | 0;
 i3 = i3 + -1 | 0;
 i3 = i1 >>> 0 < i3 >>> 0 ? i1 : i3;
 _memcpy(i2 | 0, i4 | 0, i3 | 0) | 0;
 HEAP8[i2 + i3 >> 0] = 0;
 return i1 | 0;
}

function dynCall_iiiiiiii(i8, i1, i2, i3, i4, i5, i6, i7) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 return FUNCTION_TABLE_iiiiiiii[i8 & 15](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0) | 0;
}

function _SDL_NextAudioFormat() {
 var i1 = 0, i2 = 0;
 i1 = HEAP32[1583] | 0;
 i2 = HEAP32[1584] | 0;
 if ((i1 | 0) == 10 | (i2 | 0) == 10) {
  i2 = 0;
  return i2 | 0;
 }
 HEAP32[1584] = i2 + 1;
 i2 = HEAP16[33900 + (i1 * 20 | 0) + (i2 << 1) >> 1] | 0;
 return i2 | 0;
}

function _RemovePendingSizeChangedEvents(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (((HEAP32[i1 >> 2] | 0) == 512 ? (HEAP8[i1 + 12 >> 0] | 0) == 6 : 0) ? (HEAP32[i1 + 8 >> 2] | 0) == (HEAP32[i2 + 8 >> 2] | 0) : 0) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = 1;
 return i2 | 0;
}

function _SDL_WriteLE32(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = i2;
 i2 = FUNCTION_TABLE_iiiii[HEAP32[i1 + 12 >> 2] & 31](i1, i4, 4, 1) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _SDL_WriteLE16(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP16[i4 >> 1] = i2;
 i2 = FUNCTION_TABLE_iiiii[HEAP32[i1 + 12 >> 2] & 31](i1, i4, 2, 1) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function dynCall_iiiiidii(i8, i1, i2, i3, i4, d5, i6, i7) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 i6 = i6 | 0;
 i7 = i7 | 0;
 return FUNCTION_TABLE_iiiiidii[i8 & 3](i1 | 0, i2 | 0, i3 | 0, i4 | 0, +d5, i6 | 0, i7 | 0) | 0;
}

function _RemovePendingResizedEvents(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (((HEAP32[i1 >> 2] | 0) == 512 ? (HEAP8[i1 + 12 >> 0] | 0) == 5 : 0) ? (HEAP32[i1 + 8 >> 2] | 0) == (HEAP32[i2 + 8 >> 2] | 0) : 0) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = 1;
 return i2 | 0;
}

function _emscripten_glGetActiveUniform__wrapper(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 _emscripten_glGetActiveUniform(i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0);
}

function _snprintf(i3, i2, i1, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = i4;
 i4 = _vsnprintf(i3, i2, i1, i6) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _emscripten_glGetActiveAttrib__wrapper(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 _emscripten_glGetActiveAttrib(i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0);
}

function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 _free(i1);
 if (!(_pthread_setspecific(HEAP32[5720] | 0, 0) | 0)) {
  STACKTOP = i2;
  return;
 } else _abort_message(52927, i2);
}

function _RemovePendingMoveEvents(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (((HEAP32[i1 >> 2] | 0) == 512 ? (HEAP8[i1 + 12 >> 0] | 0) == 4 : 0) ? (HEAP32[i1 + 8 >> 2] | 0) == (HEAP32[i2 + 8 >> 2] | 0) : 0) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = 1;
 return i2 | 0;
}

function dynCall_viiiiiii(i8, i1, i2, i3, i4, i5, i6, i7) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 FUNCTION_TABLE_viiiiiii[i8 & 7](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0);
}

function __ZNSt3__119__shared_weak_count14__release_weakEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = i1 + 8 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = i2 + -1;
 if (!i2) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 511](i1);
 return;
}

function _Emscripten_HandleWheel(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 _SDL_SendMouseWheel(HEAP32[i2 + 4 >> 2] | 0, 0, ~~+HEAPF64[i3 + 72 >> 3], ~~-+HEAPF64[i3 + 80 >> 3], 0) | 0;
 return (_SDL_EventState(1027, -1) | 0) << 24 >> 24 == 1 | 0;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE(i2, i3, i4, 1114111, 0) | 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE(i2, i3, i4, 1114111, 0) | 0;
}

function __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(30264) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(30228) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(30192) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(30156) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(29864) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(29832) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(29800) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(29708) | 0);
 return;
}

function _stdio_close(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!i1) {
  i2 = 0;
  return i2 | 0;
 }
 if ((HEAP32[i1 + 24 >> 2] | 0) != 0 ? (_fclose(HEAP32[i1 + 28 >> 2] | 0) | 0) != 0 : 0) i2 = _SDL_Error(2) | 0; else i2 = 0;
 _SDL_free(i1);
 return i2 | 0;
}

function __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(29616) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(29556) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(29496) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(29424) | 0);
 return;
}

function _emscripten_glReadPixels__wrapper(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 _emscripten_glReadPixels(i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0);
}

function _SDL_JoystickQuit() {
 var i1 = 0;
 i1 = HEAP32[3040] | 0;
 if (i1) do {
  HEAP32[i1 + 44 >> 2] = 1;
  _SDL_JoystickClose(i1);
  i1 = HEAP32[3040] | 0;
 } while ((i1 | 0) != 0);
 _SDL_SYS_JoystickQuit();
 _SDL_QuitSubSystem(16384);
 return;
}

function ___stdio_close(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = HEAP32[i1 + 60 >> 2];
 i1 = ___syscall_ret(___syscall6(6, i3 | 0) | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function __ZNSt3__16locale8__globalEv() {
 if ((HEAP8[2704] | 0) == 0 ? (___cxa_guard_acquire(2704) | 0) != 0 : 0) {
  __ZNSt3__16locale5__imp11make_globalEv() | 0;
  HEAP32[7789] = 31152;
  ___cxa_guard_release(2704);
 }
 return HEAP32[7789] | 0;
}

function __ZNSt3__16locale7classicEv() {
 if ((HEAP8[2536] | 0) == 0 ? (___cxa_guard_acquire(2536) | 0) != 0 : 0) {
  __ZNSt3__16locale5__imp12make_classicEv() | 0;
  HEAP32[7787] = 31144;
  ___cxa_guard_release(2536);
 }
 return HEAP32[7787] | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 8 >> 2] | 0;
 if (i1) {
  i1 = _uselocale(i1) | 0;
  if (!i1) i1 = 4; else {
   _uselocale(i1) | 0;
   i1 = 4;
  }
 } else i1 = 1;
 return i1 | 0;
}

function __ZNK5Vec2fplERKS_(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var d4 = 0.0;
 d4 = +HEAPF32[i3 + 4 >> 2] + +HEAPF32[i2 + 4 >> 2];
 HEAPF32[i1 >> 2] = +HEAPF32[i3 >> 2] + +HEAPF32[i2 >> 2];
 HEAPF32[i1 + 4 >> 2] = d4;
 return;
}

function __ZNK5Vec2fmiERKS_(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var d4 = 0.0;
 d4 = +HEAPF32[i3 + 4 >> 2] - +HEAPF32[i2 + 4 >> 2];
 HEAPF32[i1 >> 2] = +HEAPF32[i3 >> 2] - +HEAPF32[i2 >> 2];
 HEAPF32[i1 + 4 >> 2] = d4;
 return;
}

function copyTempFloat(i1) {
 i1 = i1 | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[i1 >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[i1 + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[i1 + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[i1 + 3 >> 0];
}

function dynCall_iiiiiii(i7, i1, i2, i3, i4, i5, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 return FUNCTION_TABLE_iiiiiii[i7 & 63](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0) | 0;
}

function _emscripten_glVertexAttribPointer__wrapper(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 _emscripten_glVertexAttribPointer(i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0);
}

function _SDL_ConvertSurfaceFormat(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = _SDL_AllocFormat(i1) | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 i3 = _SDL_ConvertSurface(i3, i1, i2) | 0;
 _SDL_FreeFormat(i1);
 return i3 | 0;
}

function _bitshift64Ashr(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  tempRet0 = i2 >> i1;
  return i3 >>> i1 | (i2 & (1 << i1) - 1) << 32 - i1;
 }
 tempRet0 = (i2 | 0) < 0 ? -1 : 0;
 return i2 >> i1 - 32 | 0;
}

function _newlocale(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 if (((HEAP8[i3 >> 0] | 0) != 0 ? (_strcmp(i3, 62956) | 0) != 0 : 0) ? (_strcmp(i3, 58373) | 0) != 0 : 0) i1 = 0; else if (!i1) i1 = _calloc(1, 4) | 0;
 return i1 | 0;
}

function _SW_SetRenderTarget(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 316 >> 2] | 0;
 if (!i2) {
  HEAP32[i1 >> 2] = HEAP32[i1 + 4 >> 2];
  return 0;
 } else {
  HEAP32[i1 >> 2] = HEAP32[i2 + 68 >> 2];
  return 0;
 }
 return 0;
}

function _emscripten_glDrawRangeElements__wrapper(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 _emscripten_glDrawRangeElements(i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0);
}

function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 >> 2] = 30468;
 i1 = i1 + 8 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (__ZNSt3__16__clocEv() | 0)) _freelocale(HEAP32[i1 >> 2] | 0);
 return;
}

function __ZNKSt3__15ctypeIwE5do_isEtw(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 >>> 0 < 128) i1 = (HEAP16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + (i1 << 1) >> 1] & i2) << 16 >> 16 != 0; else i1 = 0;
 return i1 | 0;
}

function _SDL_sscanf(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 i3 = _vsscanf(i2, i1, i5) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _SDL_EGL_DestroySurface(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 644 >> 2] | 0;
 if (!((i2 | 0) != 0 & (i1 | 0) != 0)) return;
 FUNCTION_TABLE_iii[HEAP32[i1 + 52 >> 2] & 63](HEAP32[i1 + 8 >> 2] | 0, i2) | 0;
 return;
}

function _fprintf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 i3 = _vfprintf(i1, i2, i5) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function dynCall_iiiiiid(i7, i1, i2, i3, i4, i5, d6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 d6 = +d6;
 return FUNCTION_TABLE_iiiiiid[i7 & 3](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, +d6) | 0;
}

function _SDL_LogError(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 _SDL_LogMessageV(i1, 5, i2, i5);
 STACKTOP = i4;
 return;
}

function _sscanf(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 i3 = _vsscanf(i2, i1, i5) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj(i2, i1, _wcslen(i1) | 0) | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(i2, i1, _strlen(i1) | 0) | 0;
}

function _SDL_LogInfo(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 _SDL_LogMessageV(i1, 3, i2, i5);
 STACKTOP = i4;
 return;
}

function dynCall_viiiiii(i7, i1, i2, i3, i4, i5, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 FUNCTION_TABLE_viiiiii[i7 & 15](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0);
}

function _SDL_JoystickInit() {
 var i1 = 0;
 _SDL_AddHintCallback(37525, 9, 0);
 if ((_SDL_InitSubSystem(16384) | 0) < 0) {
  i1 = -1;
  return i1 | 0;
 }
 i1 = _SDL_SYS_JoystickInit() | 0;
 i1 = (i1 | 0) < 0 ? i1 : 0;
 return i1 | 0;
}

function _SDL_AtomicLock(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 >> 2] = 1;
 if (!i2) return;
 do {
  _SDL_Delay(0);
  i2 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 >> 2] = 1;
 } while ((i2 | 0) != 0);
 return;
}

function _wmemset(i4, i3, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 if (i1) {
  i2 = i4;
  while (1) {
   i1 = i1 + -1 | 0;
   HEAP32[i2 >> 2] = i3;
   if (!i1) break; else i2 = i2 + 4 | 0;
  }
 }
 return i4 | 0;
}

function _bitshift64Shl(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  tempRet0 = i2 << i1 | (i3 & (1 << i1) - 1 << 32 - i1) >>> 32 - i1;
  return i3 << i1;
 }
 tempRet0 = i3 << i1 - 32;
 return 0;
}

function b9(i1, i2, i4, i5, i6, i7, i8, i9, i10, i11, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i3 = i3 | 0;
 abort(9);
}

function _abort_message(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 >> 2] = i2;
 i2 = HEAP32[5785] | 0;
 _vfprintf(i2, i1, i3) | 0;
 _fputc(10, i2) | 0;
 _abort();
}

function _SDL_JoystickAllowBackgroundEventsChanged(i4, i2, i3, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) != 0 ? (HEAP8[i1 >> 0] | 0) == 49 : 0) i1 = 1; else i1 = 0;
 HEAP32[3042] = i1;
 return;
}

function _ferror(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((HEAP32[i1 + 76 >> 2] | 0) > -1) {
  i2 = (___lockfile(i1) | 0) == 0;
  i1 = (HEAP32[i1 >> 2] | 0) >>> 5 & 1;
 } else i1 = (HEAP32[i1 >> 2] | 0) >>> 5 & 1;
 return i1 | 0;
}

function _bitshift64Lshr(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  tempRet0 = i2 >>> i1;
  return i3 >>> i1 | (i2 & (1 << i1) - 1) << 32 - i1;
 }
 tempRet0 = 0;
 return i2 >>> i1 - 32 | 0;
}

function __ZNKSt3__18ios_base6getlocEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 __ZNSt3__16localeC2ERKS0_(i2, i1 + 28 | 0);
 STACKTOP = i3;
 return HEAP32[i2 >> 2] | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var i1 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(_pthread_key_create(22880, 317) | 0)) {
  STACKTOP = i1;
  return;
 } else _abort_message(52877, i1);
}

function _emscripten_glGetFramebufferAttachmentParameteriv__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glGetFramebufferAttachmentParameteriv(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _emscripten_glDrawElementsInstanced__wrapper(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 _emscripten_glDrawElementsInstanced(i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0);
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j(i5, i1, i3, i2, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i2 - i3 | 0;
 return (i5 >>> 0 < i4 >>> 0 ? i5 : i4) | 0;
}

function _Emscripten_Init(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 4 >> 2] = 22;
 HEAP32[i1 + 32 >> 2] = 309;
 HEAP32[i1 + 64 >> 2] = 1;
 HEAP32[i1 + 56 >> 2] = 1;
 HEAP32[i1 + 52 >> 2] = 1;
 return _emscripten_asm_const_0(3) | 0;
}

function _DISKAUD_Init(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 4 >> 2] = 24;
 HEAP32[i1 + 12 >> 2] = 313;
 HEAP32[i1 + 16 >> 2] = 314;
 HEAP32[i1 + 24 >> 2] = 92;
 HEAP32[i1 + 32 >> 2] = 315;
 HEAP32[i1 + 72 >> 2] = 1;
 return 1;
}

function _emscripten_glFramebufferTexture2D__wrapper(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 _emscripten_glFramebufferTexture2D(i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0);
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(30508) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(30516) | 0);
 return;
}

function __ZNSt3__16__clocEv() {
 if ((HEAP8[2216] | 0) == 0 ? (___cxa_guard_acquire(2216) | 0) != 0 : 0) {
  HEAP32[7737] = _newlocale(2147483647, 62956, 0) | 0;
  ___cxa_guard_release(2216);
 }
 return HEAP32[7737] | 0;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(30452) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(30444) | 0);
 return;
}

function __ZNKSt3__16locale9use_facetERNS0_2idE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 i2 = __ZNSt3__16locale2id5__getEv(i2) | 0;
 return HEAP32[(HEAP32[i1 + 8 >> 2] | 0) + (i2 << 2) >> 2] | 0;
}

function __ZNKSt3__15ctypeIcE10do_tolowerEc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 << 24 >> 24 > -1) i1 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + (i1 << 24 >> 24 << 2) >> 2] & 255;
 return i1 | 0;
}

function _circleColor(i3, i4, i5, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return _ellipseRGBA(i3, i4, i5, i2, i2, i1 & 255, i1 >>> 8 & 255, i1 >>> 16 & 255, i1 >>> 24 & 255) | 0;
}

function _SDL_SYS_JoystickClose(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = i3 + 40 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2) {
  HEAP32[i2 + 16 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
 }
 HEAP32[i3 + 48 >> 2] = 1;
 return;
}

function ___ftello(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((HEAP32[i1 + 76 >> 2] | 0) > -1) {
  i2 = (___lockfile(i1) | 0) == 0;
  i1 = ___ftello_unlocked(i1) | 0;
 } else i1 = ___ftello_unlocked(i1) | 0;
 return i1 | 0;
}

function dynCall_iiiiii(i6, i1, i2, i3, i4, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return FUNCTION_TABLE_iiiiii[i6 & 63](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0) | 0;
}

function __ZN8Obstacle6renderEP12SDL_Renderer(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _circleColor(i1, ~~+HEAPF32[i2 + 4 >> 2], ~~+HEAPF32[i2 + 8 >> 2], ~~+HEAPF32[i2 + 40 >> 2], HEAP32[i2 + 32 >> 2] | 0) | 0;
 return;
}

function __ZNKSt3__15ctypeIcE10do_toupperEc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 << 24 >> 24 > -1) i1 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + ((i1 & 255) << 2) >> 2] & 255;
 return i1 | 0;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(30120) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(30056) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(29992) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(29928) | 0);
 return;
}

function dynCall_iiiiid(i6, i1, i2, i3, i4, d5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 return FUNCTION_TABLE_iiiiid[i6 & 7](i1 | 0, i2 | 0, i3 | 0, i4 | 0, +d5) | 0;
}

function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function _SDL_WaitThread(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!i2) return;
 if (i1) HEAP32[i1 >> 2] = HEAP32[i2 + 8 >> 2];
 i1 = HEAP32[i2 + 792 >> 2] | 0;
 if (i1) _SDL_free(i1);
 _SDL_free(i2);
 return;
}

function _free_bits_at_bottom(i1) {
 i1 = i1 | 0;
 if (!i1) {
  i1 = 32;
  return i1 | 0;
 }
 if (!(i1 & 1)) return (_free_bits_at_bottom(i1 >>> 1) | 0) + 1 | 0; else {
  i1 = 0;
  return i1 | 0;
 }
 return 0;
}

function __ZNSt3__16locale5__imp11make_globalEv() {
 var i1 = 0;
 i1 = HEAP32[(__ZNSt3__16locale7classicEv() | 0) >> 2] | 0;
 HEAP32[7788] = i1;
 __ZNSt3__114__shared_count12__add_sharedEv(i1);
 return 31152;
}

function __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(30532) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(30524) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(30344) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(30304) | 0);
 return;
}

function __ZNK5Vec2fmlEf(i1, i3, d2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 d2 = +d2;
 var d4 = 0.0;
 d4 = +HEAPF32[i3 + 4 >> 2] * d2;
 HEAPF32[i1 >> 2] = +HEAPF32[i3 >> 2] * d2;
 HEAPF32[i1 + 4 >> 2] = d4;
 return;
}

function _SW_SetTextureColorMod(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _SDL_SetSurfaceColorMod(HEAP32[i2 + 68 >> 2] | 0, HEAP8[i2 + 28 >> 0] | 0, HEAP8[i2 + 29 >> 0] | 0, HEAP8[i2 + 30 >> 0] | 0) | 0;
}

function __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(29352) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(29312) | 0);
 return;
}

function dynCall_viiiii(i6, i1, i2, i3, i4, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 FUNCTION_TABLE_viiiii[i6 & 7](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0);
}

function _emscripten_glShaderBinary__wrapper(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 _emscripten_glShaderBinary(i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0);
}

function __ZNSt3__16localeC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[(__ZNSt3__16locale8__globalEv() | 0) >> 2] | 0;
 HEAP32[i1 >> 2] = i2;
 __ZNSt3__114__shared_count12__add_sharedEv(i2);
 return;
}

function __ZNSt3__119__shared_weak_count16__release_sharedEv(i1) {
 i1 = i1 | 0;
 if (__ZNSt3__114__shared_count16__release_sharedEv(i1) | 0) __ZNSt3__119__shared_weak_count14__release_weakEv(i1);
 return;
}

function __ZNKSt3__18numpunctIwE12do_falsenameEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(i1, 31180, _wcslen(31180) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(30376) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(30384) | 0);
 return;
}

function __ZNKSt3__18numpunctIwE11do_truenameEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(i1, 31160, _wcslen(31160) | 0);
 return;
}

function _SW_CreateRenderer(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = _SDL_GetWindowSurface(i2) | 0;
 if (!i1) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = _SW_CreateRendererForSurface(i1) | 0;
 return i2 | 0;
}

function _Emscripten_HandleVisibilityChange(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 _SDL_SendWindowEvent(HEAP32[i2 + 4 >> 2] | 0, (HEAP32[i3 >> 2] | 0) != 0 ? 2 : 1, 0, 0) | 0;
 return 0;
}

function _emscripten_glGetShaderPrecisionFormat__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glGetShaderPrecisionFormat(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _SDL_AudioUnlockDevice_Default(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((HEAP32[i1 + 160 >> 2] | 0) != 0 ? (i2 = _SDL_ThreadID() | 0, (i2 | 0) == (HEAP32[i1 + 164 >> 2] | 0)) : 0) return;
 return;
}

function _emscripten_glFramebufferRenderbuffer__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glFramebufferRenderbuffer(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function __ZNSt3__15ctypeIcED2Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 HEAP32[i2 >> 2] = 30400;
 i1 = HEAP32[i2 + 8 >> 2] | 0;
 if ((i1 | 0) != 0 ? (HEAP8[i2 + 12 >> 0] | 0) != 0 : 0) __ZdaPv(i1);
 return;
}

function __ZNKSt3__15ctypeIwE10do_toupperEw(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 >>> 0 < 128) i1 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + (i1 << 2) >> 2] | 0;
 return i1 | 0;
}

function __ZNKSt3__15ctypeIwE10do_tolowerEw(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 >>> 0 < 128) i1 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + (i1 << 2) >> 2] | 0;
 return i1 | 0;
}

function _SDL_TicksInit() {
 if (HEAP32[3485] | 0) return;
 HEAP32[3485] = 1;
 if (!(_clock_gettime(1, 13944) | 0)) {
  HEAP32[3488] = 1;
  return;
 } else {
  _gettimeofday(13956, 0) | 0;
  return;
 }
}

function _SDL_AudioLockDevice_Default(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((HEAP32[i1 + 160 >> 2] | 0) != 0 ? (i2 = _SDL_ThreadID() | 0, (i2 | 0) == (HEAP32[i1 + 164 >> 2] | 0)) : 0) return;
 return;
}

function b27(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 abort(27);
 return 0;
}

function _emscripten_glUniform4i__wrapper(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 _emscripten_glUniform4i(i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0);
}

function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i3, i1, i4, i2, i5) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 HEAP32[i5 >> 2] = i4;
 return 3;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i3, i1, i4, i2, i5) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 HEAP32[i5 >> 2] = i4;
 return 3;
}

function dynCall_vdddddd(i7, d1, d2, d3, d4, d5, d6) {
 i7 = i7 | 0;
 d1 = +d1;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 d5 = +d5;
 d6 = +d6;
 FUNCTION_TABLE_vdddddd[i7 & 1](+d1, +d2, +d3, +d4, +d5, +d6);
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i3, i1, i4, i2, i5) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 HEAP32[i5 >> 2] = i4;
 return 3;
}

function _SW_WindowEvent(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 316 >> 2] | 0;
 if ((HEAP8[i2 + 12 >> 0] | 0) != 6) return;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 return;
}

function _Emscripten_DestroyWindowFramebuffer(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = (HEAP32[i2 + 136 >> 2] | 0) + 8 | 0;
 _SDL_FreeSurface(HEAP32[i2 >> 2] | 0);
 HEAP32[i2 >> 2] = 0;
 return;
}

function _eglChooseConfig__wrapper(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return _eglChooseConfig(i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0) | 0;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw(i1, 1, 45);
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw(i1, 1, 45);
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc(i1, 1, 45);
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc(i1, 1, 45);
 return;
}

function _emscripten_glStencilFuncSeparate__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glStencilFuncSeparate(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _emscripten_glRenderbufferStorage__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glRenderbufferStorage(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _emscripten_glDrawArraysInstanced__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glDrawArraysInstanced(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _i64Subtract(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = i2 - i4 - (i3 >>> 0 > i1 >>> 0 | 0) >>> 0;
 return (tempRet0 = i4, i1 - i3 >>> 0 | 0) | 0;
}

function __ZNSt3__110shared_ptrI17GameObjectManagerED2Ev(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 if (!i1) return;
 __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
 return;
}

function _emscripten_glGetAttachedShaders__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glGetAttachedShaders(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function ___strdup(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i2 = (_strlen(i3) | 0) + 1 | 0;
 i1 = _malloc(i2) | 0;
 if (!i1) i1 = 0; else _memcpy(i1 | 0, i3 | 0, i2 | 0) | 0;
 return i1 | 0;
}

function _SDL_OnWindowEnter(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP32[3256] | 0;
 i2 = HEAP32[i1 + 116 >> 2] | 0;
 if (!i2) return;
 FUNCTION_TABLE_vii[i2 & 127](i1, i3);
 return;
}

function _SDL_EGL_SwapBuffers(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 644 >> 2] | 0;
 FUNCTION_TABLE_iii[HEAP32[i1 + 60 >> 2] & 63](HEAP32[i1 + 8 >> 2] | 0, i2) | 0;
 return;
}

function dynCall_iiiii(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return FUNCTION_TABLE_iiiii[i5 & 31](i1 | 0, i2 | 0, i3 | 0, i4 | 0) | 0;
}

function _emscripten_glStencilOpSeparate__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glStencilOpSeparate(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _emscripten_glGetProgramInfoLog__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glGetProgramInfoLog(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _emscripten_glBlendFuncSeparate__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glBlendFuncSeparate(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _DUMMY_Available() {
 var i1 = 0;
 i1 = _SDL_getenv(44653) | 0;
 if ((i1 | 0) != 0 ? (_SDL_strcmp(i1, 44490) | 0) == 0 : 0) {
  i1 = 1;
  return i1 | 0;
 }
 i1 = 0;
 return i1 | 0;
}

function b22(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 abort(22);
}

function __ZNKSt3__18numpunctIcE12do_falsenameEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i1, 63063, 5);
 return;
}

function _SDL_ResetKeyboard() {
 var i1 = 0;
 i1 = 0;
 do {
  if ((HEAP8[7410 + i1 >> 0] | 0) == 1) _SDL_SendKeyboardKey(0, i1) | 0;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 512);
 return;
}

function _i64Add(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i3 = i1 + i3 >>> 0;
 return (tempRet0 = i2 + i4 + (i3 >>> 0 < i1 >>> 0 | 0) >>> 0, i3 | 0) | 0;
}

function _emscripten_glUniformMatrix4fv__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glUniformMatrix4fv(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _emscripten_glUniformMatrix3fv__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glUniformMatrix3fv(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _emscripten_glUniformMatrix2fv__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glUniformMatrix2fv(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _emscripten_glGetShaderInfoLog__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glGetShaderInfoLog(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + ((HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 4) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + ((HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 4) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + ((HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 8) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + ((HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 8) | 0);
 return;
}

function __ZNKSt3__18numpunctIcE11do_truenameEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i1, 63058, 4);
 return;
}

function __ZNSt3__110shared_ptrI11KeyBindingsED2Ev(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 if (!i1) return;
 __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
 return;
}

function __ZNKSt3__18numpunctIwE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i1, i2 + 16 | 0);
 return;
}

function __ZNKSt3__18numpunctIcE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i1, i2 + 12 | 0);
 return;
}

function _emscripten_glVertexAttrib4f__wrapper(i1, d2, d3, d4, d5) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 d5 = +d5;
 _emscripten_glVertexAttrib4f(i1 | 0, +d2, +d3, +d4, +d5);
}

function _emscripten_glTexCoordPointer__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glTexCoordPointer(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _emscripten_glGetShaderSource__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glGetShaderSource(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _emscripten_glFrustum__wrapper(d1, d2, d3, d4, d5, d6) {
 d1 = +d1;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 d5 = +d5;
 d6 = +d6;
 _emscripten_glFrustum(+d1, +d2, +d3, +d4, +d5, +d6);
}

function _eglCreateWindowSurface__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return _eglCreateWindowSurface(i1 | 0, i2 | 0, i3 | 0, i4 | 0) | 0;
}

function __ZNSt3__110__time_putD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (__ZNSt3__16__clocEv() | 0)) _freelocale(HEAP32[i1 >> 2] | 0);
 return;
}

function _SDL_SYS_CreateThread(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = _SDL_SetError(43801, i1) | 0;
 STACKTOP = i1;
 return i2 | 0;
}

function dynCall_vidddd(i6, i1, d2, d3, d4, d5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 d5 = +d5;
 FUNCTION_TABLE_vidddd[i6 & 3](i1 | 0, +d2, +d3, +d4, +d5);
}

function b20(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 abort(20);
 return 0;
}

function _emscripten_glVertexPointer__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glVertexPointer(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _emscripten_glGetRenderbufferParameteriv__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glGetRenderbufferParameteriv(i1 | 0, i2 | 0, i3 | 0);
}

function _emscripten_glGetInfoLogARB__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glGetInfoLogARB(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _emscripten_glBufferSubData__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glBufferSubData(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _SDL_SemWaitTimeout(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = _SDL_SetError(43767, i1) | 0;
 STACKTOP = i1;
 return i2 | 0;
}

function __ZNSt3__16localeC2ERKS0_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 HEAP32[i2 >> 2] = i1;
 __ZNSt3__114__shared_count12__add_sharedEv(i1);
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function _emscripten_glShaderSource__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glShaderSource(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _emscripten_glDrawElements__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glDrawElements(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _emscripten_glColorPointer__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glColorPointer(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function dynCall_viiii(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 FUNCTION_TABLE_viiii[i5 & 63](i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function _SW_UpdateViewport(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[HEAP32[i2 + 316 >> 2] >> 2] | 0;
 if (!i1) return 0;
 _SDL_SetClipRect(i1, i2 + 212 | 0) | 0;
 return 0;
}

function _eglGetConfigAttrib__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return _eglGetConfigAttrib(i1 | 0, i2 | 0, i3 | 0, i4 | 0) | 0;
}

function _emscripten_glUniform4f__wrapper(i1, d2, d3, d4, d5) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 d5 = +d5;
 _emscripten_glUniform4f(i1 | 0, +d2, +d3, +d4, +d5);
}

function _emscripten_glGetVertexAttribPointerv__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glGetVertexAttribPointerv(i1 | 0, i2 | 0, i3 | 0);
}

function _emscripten_glGetObjectParameterivARB__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glGetObjectParameterivARB(i1 | 0, i2 | 0, i3 | 0);
}

function _emscripten_glBufferData__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glBufferData(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNSt3__18numpunctIwED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 30588;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 16 | 0);
 return;
}

function __ZNSt3__18numpunctIcED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 30548;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 12 | 0);
 return;
}

function _uselocale(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = (_pthread_self() | 0) + 176 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i3) HEAP32[i1 >> 2] = i3;
 return i2 | 0;
}

function _emscripten_glUniform3i__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glUniform3i(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _emscripten_glColorMask__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glColorMask(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _SDL_GetMouseState(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (i1) HEAP32[i1 >> 2] = HEAP32[3017];
 if (i2) HEAP32[i2 >> 2] = HEAP32[3018];
 return HEAP32[3023] | 0;
}

function _eglCreateContext__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return _eglCreateContext(i1 | 0, i2 | 0, i3 | 0, i4 | 0) | 0;
}

function __ZN5Vec2f6lengthEv(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0;
 d3 = +HEAPF32[i1 >> 2];
 d2 = +HEAPF32[i1 + 4 >> 2];
 return +(+Math_sqrt(+(d3 * d3 + d2 * d2)));
}

function _SDL_OnWindowResized(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 108 >> 2] = 0;
 _SDL_SendWindowEvent(i1, 6, HEAP32[i1 + 24 >> 2] | 0, HEAP32[i1 + 28 >> 2] | 0) | 0;
 return;
}

function _emscripten_glViewport__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glViewport(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function b15(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 abort(15);
}

function __ZSt11__terminatePFvvE(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 FUNCTION_TABLE_v[i1 & 15]();
 _abort_message(52837, i2);
}

function _emscripten_glScissor__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _emscripten_glScissor(i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _emscripten_glGetBufferParameteriv__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glGetBufferParameteriv(i1 | 0, i2 | 0, i3 | 0);
}

function _SDL_SemWait(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = _SDL_SetError(43767, i2) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _SDL_SemPost(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = _SDL_SetError(43767, i2) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _eglMakeCurrent__wrapper(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return _eglMakeCurrent(i1 | 0, i2 | 0, i3 | 0, i4 | 0) | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 29048;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 28984;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__110__time_putD2Ev(i1 + 8 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__110__time_putD2Ev(i1 + 8 | 0);
 __ZdlPv(i1);
 return;
}

function _emscripten_glVertexAttrib3f__wrapper(i1, d2, d3, d4) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 _emscripten_glVertexAttrib3f(i1 | 0, +d2, +d3, +d4);
}

function _emscripten_glBindAttribLocation__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glBindAttribLocation(i1 | 0, i2 | 0, i3 | 0);
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i1) {
 i1 = i1 | 0;
 if (HEAP8[i1 >> 0] & 1) __ZdlPv(HEAP32[i1 + 8 >> 2] | 0);
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1) {
 i1 = i1 | 0;
 if (HEAP8[i1 >> 0] & 1) __ZdlPv(HEAP32[i1 + 8 >> 2] | 0);
 return;
}

function _emscripten_glGetVertexAttribiv__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glGetVertexAttribiv(i1 | 0, i2 | 0, i3 | 0);
}

function _emscripten_glGetVertexAttribfv__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glGetVertexAttribfv(i1 | 0, i2 | 0, i3 | 0);
}

function _emscripten_glGetTexParameteriv__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glGetTexParameteriv(i1 | 0, i2 | 0, i3 | 0);
}

function _emscripten_glGetTexParameterfv__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glGetTexParameterfv(i1 | 0, i2 | 0, i3 | 0);
}

function _Emscripten_FreeCursor(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 if (!i2) return;
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 if (i1) _SDL_free(i1);
 _SDL_free(i2);
 return;
}

function dynCall_iiii(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return FUNCTION_TABLE_iiii[i4 & 63](i1 | 0, i2 | 0, i3 | 0) | 0;
}

function b0(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 abort(0);
 return 0;
}

function _SDL_vsnprintf(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return _vsnprintf(i4, i3, (i2 | 0) == 0 ? 62969 : i2, i1) | 0;
}

function b26(i1, i2, i3, i4, d5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 i6 = i6 | 0;
 i7 = i7 | 0;
 abort(26);
 return 0;
}

function __ZN5Vec2faSERKS_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 return i2 | 0;
}

function _SW_SetTextureBlendMode(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _SDL_SetSurfaceBlendMode(HEAP32[i2 + 68 >> 2] | 0, HEAP32[i2 + 24 >> 2] | 0) | 0;
}

function dynCall_viddd(i5, i1, d2, d3, d4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 FUNCTION_TABLE_viddd[i5 & 3](i1 | 0, +d2, +d3, +d4);
}

function __ZNSt3__16locale5facet16__on_zero_sharedEv(i1) {
 i1 = i1 | 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 return;
}

function __ZNSt3__16locale2id6__initEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[7593] | 0;
 HEAP32[7593] = i2 + 1;
 HEAP32[i1 + 4 >> 2] = i2 + 1;
 return;
}

function _strchr(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i2 = ___strchrnul(i2, i1) | 0;
 return ((HEAP8[i2 >> 0] | 0) == (i1 & 255) << 24 >> 24 ? i2 : 0) | 0;
}

function _emscripten_glTexParameteriv__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glTexParameteriv(i1 | 0, i2 | 0, i3 | 0);
}

function _emscripten_glTexParameterfv__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glTexParameterfv(i1 | 0, i2 | 0, i3 | 0);
}

function _SW_SetTextureAlphaMod(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _SDL_SetSurfaceAlphaMod(HEAP32[i2 + 68 >> 2] | 0, HEAP8[i2 + 31 >> 0] | 0) | 0;
}

function _SDL_AudioDetectDevices_Default() {
 _SDL_AddAudioDevice(0, 52308, 1);
 if (!(HEAP32[1552] | 0)) return;
 _SDL_AddAudioDevice(1, 52280, 2);
 return;
}

function _Emscripten_GLES_CreateContext(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _SDL_EGL_CreateContext(i1, HEAP32[HEAP32[i2 + 136 >> 2] >> 2] | 0) | 0;
}

function _emscripten_glUniform3f__wrapper(i1, d2, d3, d4) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 _emscripten_glUniform3f(i1 | 0, +d2, +d3, +d4);
}

function _emscripten_glTexParameteri__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glTexParameteri(i1 | 0, i2 | 0, i3 | 0);
}

function _emscripten_glNormalPointer__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glNormalPointer(i1 | 0, i2 | 0, i3 | 0);
}

function ___syscall_ret(i1) {
 i1 = i1 | 0;
 if (i1 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - i1;
  i1 = -1;
 }
 return i1 | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 29048;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 28984;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 return;
}

function _SDL_CreateSemaphore(i1) {
 i1 = i1 | 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 _SDL_SetError(43767, i1) | 0;
 STACKTOP = i1;
 return 0;
}

function dynCall_vdddd(i5, d1, d2, d3, d4) {
 i5 = i5 | 0;
 d1 = +d1;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 FUNCTION_TABLE_vdddd[i5 & 3](+d1, +d2, +d3, +d4);
}

function _wcslen(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = i2;
 while (1) if (!(HEAP32[i1 >> 2] | 0)) break; else i1 = i1 + 4 | 0;
 return i1 - i2 >> 2 | 0;
}

function _emscripten_glGetUniformiv__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glGetUniformiv(i1 | 0, i2 | 0, i3 | 0);
}

function _emscripten_glGetUniformfv__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glGetUniformfv(i1 | 0, i2 | 0, i3 | 0);
}

function _emscripten_glGetProgramiv__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glGetProgramiv(i1 | 0, i2 | 0, i3 | 0);
}

function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__110__time_putD2Ev(i1 + 8 | 0);
 return;
}

function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__110__time_putD2Ev(i1 + 8 | 0);
 return;
}

function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv(i1) {
 i1 = i1 | 0;
 i1 = i1 + 16 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1;
 return;
}

function b21(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 abort(21);
}

function ___errno_location() {
 var i1 = 0;
 if (!(HEAP32[5723] | 0)) i1 = 23168; else i1 = HEAP32[(_pthread_self() | 0) + 60 >> 2] | 0;
 return i1 | 0;
}

function _SDL_StartEventLoop() {
 _SDL_EventState(771, 0) | 0;
 _SDL_EventState(770, 0) | 0;
 _SDL_EventState(513, 0) | 0;
 HEAP32[1587] = 1;
 return 0;
}

function _emscripten_glStencilFunc__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glStencilFunc(i1 | 0, i2 | 0, i3 | 0);
}

function _emscripten_glGetShaderiv__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glGetShaderiv(i1 | 0, i2 | 0, i3 | 0);
}

function _emscripten_glClearColor__wrapper(d1, d2, d3, d4) {
 d1 = +d1;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 _emscripten_glClearColor(+d1, +d2, +d3, +d4);
}

function _emscripten_glBlendColor__wrapper(d1, d2, d3, d4) {
 d1 = +d1;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 _emscripten_glBlendColor(+d1, +d2, +d3, +d4);
}

function __ZSt17__throw_bad_allocv() {
 var i1 = 0;
 i1 = ___cxa_allocate_exception(4) | 0;
 __ZNSt9bad_allocC2Ev(i1);
 ___cxa_throw(i1 | 0, 920, 166);
}

function dynCall_viii(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 FUNCTION_TABLE_viii[i4 & 31](i1 | 0, i2 | 0, i3 | 0);
}

function _emscripten_glGetUniformLocation__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _emscripten_glGetUniformLocation(i1 | 0, i2 | 0) | 0;
}

function _Emscripten_GLES_SwapWindow(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _SDL_EGL_SwapBuffers(i1, HEAP32[HEAP32[i2 + 136 >> 2] >> 2] | 0);
 return;
}

function _emscripten_glUniform4iv__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glUniform4iv(i1 | 0, i2 | 0, i3 | 0);
}

function _emscripten_glUniform4fv__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glUniform4fv(i1 | 0, i2 | 0, i3 | 0);
}

function _emscripten_glUniform3iv__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glUniform3iv(i1 | 0, i2 | 0, i3 | 0);
}

function _emscripten_glUniform3fv__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glUniform3fv(i1 | 0, i2 | 0, i3 | 0);
}

function _emscripten_glUniform2iv__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glUniform2iv(i1 | 0, i2 | 0, i3 | 0);
}

function _emscripten_glUniform2fv__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glUniform2fv(i1 | 0, i2 | 0, i3 | 0);
}

function _emscripten_glUniform1iv__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glUniform1iv(i1 | 0, i2 | 0, i3 | 0);
}

function _emscripten_glUniform1fv__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glUniform1fv(i1 | 0, i2 | 0, i3 | 0);
}

function _emscripten_glTexParameterf__wrapper(i1, i2, d3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 _emscripten_glTexParameterf(i1 | 0, i2 | 0, +d3);
}

function _emscripten_glDrawArrays__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glDrawArrays(i1 | 0, i2 | 0, i3 | 0);
}

function __ZNSt3__120__shared_ptr_emplaceI17GameObjectManagerNS_9allocatorIS1_EEE21__on_zero_shared_weakEv(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function _emscripten_glGetAttribLocation__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _emscripten_glGetAttribLocation(i1 | 0, i2 | 0) | 0;
}

function _SDL_getenv(i1) {
 i1 = i1 | 0;
 if ((i1 | 0) != 0 ? (_SDL_strlen(i1) | 0) != 0 : 0) i1 = _getenv(i1 | 0) | 0; else i1 = 0;
 return i1 | 0;
}

function _SDL_DUMMY_DestroyWindowFramebuffer(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _SDL_FreeSurface(_SDL_SetWindowData(i2, 43637, 0) | 0);
 return;
}
function stackAlloc(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + i1 | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return i2 | 0;
}

function _emscripten_glUniform2i__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glUniform2i(i1 | 0, i2 | 0, i3 | 0);
}

function _emscripten_glStencilOp__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _emscripten_glStencilOp(i1 | 0, i2 | 0, i3 | 0);
}

function _emscripten_glVertexAttrib2f__wrapper(i1, d2, d3) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 _emscripten_glVertexAttrib2f(i1 | 0, +d2, +d3);
}

function _emscripten_glRotatef__wrapper(d1, d2, d3, d4) {
 d1 = +d1;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 _emscripten_glRotatef(+d1, +d2, +d3, +d4);
}

function _emscripten_glBlendEquationSeparate__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glBlendEquationSeparate(i1 | 0, i2 | 0);
}

function __ZNSt3__18ios_base5clearEj(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 + 16 >> 2] = (HEAP32[i2 + 24 >> 2] | 0) == 0 | i1;
 return;
}

function __ZNSt3__120__shared_ptr_emplaceI13PlayerVehicleNS_9allocatorIS1_EEE21__on_zero_shared_weakEv(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function _SDL_OnWindowRestored(i1) {
 i1 = i1 | 0;
 if ((HEAP32[i1 + 48 >> 2] & 69 | 0) != 5) return;
 _SDL_UpdateFullscreenMode(i1, 1);
 return;
}

function _SDL_AtomicAdd(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 >> 2] = i3 + i2;
 return i3 | 0;
}

function ___cxa_is_pointer_type(i1) {
 i1 = i1 | 0;
 if (!i1) i1 = 0; else i1 = (___dynamic_cast(i1, 952, 1e3, 0) | 0) != 0;
 return i1 & 1 | 0;
}

function __ZNSt3__114__shared_count12__add_sharedEv(i1) {
 i1 = i1 | 0;
 i1 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 return;
}

function __ZNKSt3__15ctypeIwE9do_narrowEwc(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (i1 >>> 0 < 128 ? i1 & 255 : i2) | 0;
}

function dynCall_viid(i4, i1, i2, d3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 FUNCTION_TABLE_viid[i4 & 1](i1 | 0, i2 | 0, +d3);
}

function dynCall_vidi(i4, i1, d2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 i3 = i3 | 0;
 FUNCTION_TABLE_vidi[i4 & 3](i1 | 0, +d2, i3 | 0);
}

function b7(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 abort(7);
 return 0;
}

function _strtoull_l(i4, i3, i1, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = _strtoull(i4, i3, i1) | 0;
 return i4 | 0;
}

function __ZNSt3__120__shared_ptr_emplaceI11KeyBindingsNS_9allocatorIS1_EEE21__on_zero_shared_weakEv(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__111__stdoutbufIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__111__stdoutbufIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__15ctypeIcE9do_narrowEcc(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (i1 << 24 >> 24 > -1 ? i1 : i2) | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return i3 | 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return i3 | 0;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 4 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 4 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 8 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 8 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__110__stdinbufIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__110__stdinbufIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _SDL_OnWindowShown(i1) {
 i1 = i1 | 0;
 if ((HEAP32[i1 + 48 >> 2] & 69 | 0) != 5) return;
 _SDL_UpdateFullscreenMode(i1, 1);
 return;
}

function _strtoll_l(i4, i3, i1, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = _strtoll(i4, i3, i1) | 0;
 return i4 | 0;
}

function _isxdigit(i1) {
 i1 = i1 | 0;
 if ((i1 + -48 | 0) >>> 0 < 10) i1 = 1; else i1 = ((i1 | 32) + -97 | 0) >>> 0 < 6;
 return i1 & 1 | 0;
}

function _getpix_24(i1) {
 i1 = i1 | 0;
 return (HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0) | (HEAPU8[i1 + 2 >> 0] | 0) << 16 | 0;
}

function _emscripten_glVertexAttribDivisor__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glVertexAttribDivisor(i1 | 0, i2 | 0);
}

function _emscripten_glStencilMaskSeparate__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glStencilMaskSeparate(i1 | 0, i2 | 0);
}

function _emscripten_glDeleteRenderbuffers__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glDeleteRenderbuffers(i1 | 0, i2 | 0);
}

function _SW_RenderPresent(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 188 >> 2] | 0;
 if (!i1) return;
 _SDL_UpdateWindowSurface(i1) | 0;
 return;
}

function _Emscripten_SetWindowTitle(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_asm_const_1(10, HEAP32[i2 + 8 >> 2] | 0) | 0;
 return;
}

function b1(i1, i2, i3, i4, i5, d6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 d6 = +d6;
 abort(1);
 return 0;
}

function _eglInitialize__wrapper(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return _eglInitialize(i1 | 0, i2 | 0, i3 | 0) | 0;
}

function _SDL_AtomicSet(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 >> 2] = i2;
 return i3 | 0;
}

function _strtoll(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = _strtox530(i3, i2, i1, 0, -2147483648) | 0;
 return i3 | 0;
}

function _emscripten_glDeleteVertexArrays__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glDeleteVertexArrays(i1 | 0, i2 | 0);
}

function _emscripten_glDeleteFramebuffers__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glDeleteFramebuffers(i1 | 0, i2 | 0);
}

function ___udivdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return ___udivmoddi4(i1, i2, i3, i4, 0) | 0;
}

function __ZNSt3__120__shared_ptr_emplaceI8ObstacleNS_9allocatorIS1_EEE21__on_zero_shared_weakEv(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function _SDL_AudioOpenDevice_Default(i1, i3, i2, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 return _SDL_Error(4) | 0;
}

function dynCall_vidd(i4, i1, d2, d3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 FUNCTION_TABLE_vidd[i4 & 3](i1 | 0, +d2, +d3);
}

function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i1) {
 i1 = i1 | 0;
 ___assert_fail(52980, 53009, 1164, 52752);
}

function _Emscripten_GLES_DeleteContext(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _glClear(17664);
 _SDL_EGL_DeleteContext(i1, i2);
 return;
}

function _SDL_memset(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 _memset(i2 | 0, i1 & 255 | 0, i3 | 0) | 0;
 return i2 | 0;
}

function _emscripten_glUniform2f__wrapper(i1, d2, d3) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 _emscripten_glUniform2f(i1 | 0, +d2, +d3);
}

function _emscripten_glGenRenderbuffers__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glGenRenderbuffers(i1 | 0, i2 | 0);
}

function _emscripten_glBindRenderbuffer__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glBindRenderbuffer(i1 | 0, i2 | 0);
}

function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i1) {
 i1 = i1 | 0;
 ___assert_fail(52633, 52656, 303, 52752);
}

function b16(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 abort(16);
}

function _llvm_bswap_i32(i1) {
 i1 = i1 | 0;
 return (i1 & 255) << 24 | (i1 >> 8 & 255) << 16 | (i1 >> 16 & 255) << 8 | i1 >>> 24 | 0;
}

function dynCall_iii(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_iii[i3 & 63](i1 | 0, i2 | 0) | 0;
}

function _mbrlen(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 return _mbrtowc(0, i2, i1, (i3 | 0) != 0 ? i3 : 23204) | 0;
}

function _emscripten_glVertexAttrib4fv__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glVertexAttrib4fv(i1 | 0, i2 | 0);
}

function _emscripten_glVertexAttrib3fv__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glVertexAttrib3fv(i1 | 0, i2 | 0);
}

function _emscripten_glVertexAttrib2fv__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glVertexAttrib2fv(i1 | 0, i2 | 0);
}

function _emscripten_glVertexAttrib1fv__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glVertexAttrib1fv(i1 | 0, i2 | 0);
}

function _emscripten_glGenVertexArrays__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glGenVertexArrays(i1 | 0, i2 | 0);
}

function _emscripten_glGenFramebuffers__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glGenFramebuffers(i1 | 0, i2 | 0);
}

function _emscripten_glBindFramebuffer__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glBindFramebuffer(i1 | 0, i2 | 0);
}

function __ZNSt3__16localeD2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i1 >> 2] | 0) | 0;
 return;
}

function _strtoull(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = _strtox530(i3, i2, i1, -1, -1) | 0;
 return i3 | 0;
}

function _emscripten_glCheckFramebufferStatus__wrapper(i1) {
 i1 = i1 | 0;
 return _emscripten_glCheckFramebufferStatus(i1 | 0) | 0;
}

function _SDL_memmove(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 _memmove(i1 | 0, i3 | 0, i2 | 0) | 0;
 return i1 | 0;
}

function _emscripten_glDeleteTextures__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glDeleteTextures(i1 | 0, i2 | 0);
}

function _emscripten_glBindProgramARB__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glBindProgramARB(i1 | 0, i2 | 0);
}

function _SDL_memcpy(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 _memcpy(i1 | 0, i3 | 0, i2 | 0) | 0;
 return i1 | 0;
}

function _emscripten_glDeleteBuffers__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glDeleteBuffers(i1 | 0, i2 | 0);
}

function __ZNSt3__16locale5__imp12make_classicEv() {
 __ZNSt3__16locale5__impC2Ej(2544, 1);
 HEAP32[7786] = 2544;
 return 31144;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 4 | 0);
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 4 | 0);
 return;
}

function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 8 | 0);
 return;
}

function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 8 | 0);
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv(i1) {
 i1 = i1 | 0;
 return 2;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv(i1) {
 i1 = i1 | 0;
 return 2;
}

function b24(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 abort(24);
 return 0;
}

function _emscripten_glDetachShader__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glDetachShader(i1 | 0, i2 | 0);
}

function _emscripten_glAttachShader__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glAttachShader(i1 | 0, i2 | 0);
}

function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function _SDL_qsort(i1, i3, i4, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 _qsort(i1, i3, i4, i2);
 return;
}

function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return;
}

function _emscripten_glVertexAttrib1f__wrapper(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 _emscripten_glVertexAttrib1f(i1 | 0, +d2);
}

function _emscripten_glSampleCoverage__wrapper(d1, i2) {
 d1 = +d1;
 i2 = i2 | 0;
 _emscripten_glSampleCoverage(+d1, i2 | 0);
}

function _emscripten_glPixelStorei__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glPixelStorei(i1 | 0, i2 | 0);
}

function _emscripten_glGetPointerv__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glGetPointerv(i1 | 0, i2 | 0);
}

function _emscripten_glGetIntegerv__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glGetIntegerv(i1 | 0, i2 | 0);
}

function _emscripten_glGetBooleanv__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glGetBooleanv(i1 | 0, i2 | 0);
}

function _emscripten_glGenTextures__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glGenTextures(i1 | 0, i2 | 0);
}

function _emscripten_glDrawBuffers__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glDrawBuffers(i1 | 0, i2 | 0);
}

function _emscripten_glDisableVertexAttribArray__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glDisableVertexAttribArray(i1 | 0);
}

function _emscripten_glBindTexture__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glBindTexture(i1 | 0, i2 | 0);
}

function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __GLOBAL__I_000101() {
 __ZNSt3__18ios_base4InitC2Ev(0);
 ___cxa_atexit(346, 60989, ___dso_handle | 0) | 0;
 return;
}

function b33(i1, i2, i3, i4, d5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 abort(33);
 return 0;
}

function __ZNSt3__110__stdinbufIwE9underflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__110__stdinbufIwE9__getcharEb(i1, 0) | 0;
}

function __ZNSt3__110__stdinbufIcE9underflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__110__stdinbufIcE9__getcharEb(i1, 0) | 0;
}

function dynCall_vii(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 FUNCTION_TABLE_vii[i3 & 127](i1 | 0, i2 | 0);
}

function _wctomb(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i1) i1 = 0; else i1 = _wcrtomb(i1, i2, 0) | 0;
 return i1 | 0;
}

function _srand(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = 1048;
 HEAP32[i2 >> 2] = i1 + -1;
 HEAP32[i2 + 4 >> 2] = 0;
 return;
}

function _emscripten_glGenBuffers__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glGenBuffers(i1 | 0, i2 | 0);
}

function _emscripten_glEnableVertexAttribArray__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glEnableVertexAttribArray(i1 | 0);
}

function _emscripten_glBindBuffer__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glBindBuffer(i1 | 0, i2 | 0);
}

function _eglDestroySurface__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _eglDestroySurface(i1 | 0, i2 | 0) | 0;
}

function _eglDestroyContext__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _eglDestroyContext(i1 | 0, i2 | 0) | 0;
}

function _emscripten_glUniform1i__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glUniform1i(i1 | 0, i2 | 0);
}

function _emscripten_glGetFloatv__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glGetFloatv(i1 | 0, i2 | 0);
}

function _emscripten_glBlendFunc__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glBlendFunc(i1 | 0, i2 | 0);
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return -1;
}

function __ZN5Clock5startEv(i1) {
 i1 = i1 | 0;
 HEAP8[i1 + 4 >> 0] = 1;
 HEAP32[i1 >> 2] = _SDL_GetTicks() | 0;
 return;
}

function _DISKAUD_WaitDevice(i1) {
 i1 = i1 | 0;
 _SDL_Delay(HEAP32[(HEAP32[i1 + 184 >> 2] | 0) + 12 >> 2] | 0);
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return -1;
}

function __ZNSt3__110__stdinbufIwE5uflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__110__stdinbufIwE9__getcharEb(i1, 1) | 0;
}

function __ZNSt3__110__stdinbufIcE5uflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__110__stdinbufIcE9__getcharEb(i1, 1) | 0;
}

function __ZNKSt3__119__shared_weak_count13__get_deleterERKSt9type_info(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return 0;
}

function _SW_DestroyTexture(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _SDL_FreeSurface(HEAP32[i2 + 68 >> 2] | 0);
 return;
}

function _SDL_strncasecmp(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 return _strncasecmp(i2, i3, i1) | 0;
}

function _eglSwapInterval__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _eglSwapInterval(i1 | 0, i2 | 0) | 0;
}

function _emscripten_glPolygonOffset__wrapper(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 _emscripten_glPolygonOffset(+d1, +d2);
}

function b28(d1, d2, d3, d4, d5, d6) {
 d1 = +d1;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 d5 = +d5;
 d6 = +d6;
 abort(28);
}

function _emscripten_glIsRenderbuffer__wrapper(i1) {
 i1 = i1 | 0;
 return _emscripten_glIsRenderbuffer(i1 | 0) | 0;
}

function _eglSwapBuffers__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _eglSwapBuffers(i1 | 0, i2 | 0) | 0;
}

function dynCall_vid(i3, i1, d2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 FUNCTION_TABLE_vid[i3 & 3](i1 | 0, +d2);
}

function dynCall_vdi(i3, d1, i2) {
 i3 = i3 | 0;
 d1 = +d1;
 i2 = i2 | 0;
 FUNCTION_TABLE_vdi[i3 & 1](+d1, i2 | 0);
}

function _emscripten_glUniform1f__wrapper(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 _emscripten_glUniform1f(i1 | 0, +d2);
}

function _emscripten_glClientActiveTexture__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glClientActiveTexture(i1 | 0);
}

function _Emscripten_WarpMouse(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _SDL_Error(4) | 0;
 return;
}

function setThrew(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!__THREW__) {
  __THREW__ = i1;
  threwValue = i2;
 }
}

function b4(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 abort(4);
}

function _tolower(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (_isupper(i1) | 0) == 0;
 return (i2 ? i1 : i1 | 32) | 0;
}

function _emscripten_glIsFramebuffer__wrapper(i1) {
 i1 = i1 | 0;
 return _emscripten_glIsFramebuffer(i1 | 0) | 0;
}

function _DUMMYAUD_OpenDevice(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 return 0;
}

function _mbsinit(i1) {
 i1 = i1 | 0;
 if (!i1) i1 = 1; else i1 = (HEAP32[i1 >> 2] | 0) == 0;
 return i1 & 1 | 0;
}

function _emscripten_glDepthRangef__wrapper(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 _emscripten_glDepthRangef(+d1, +d2);
}

function _do_read(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 return ___string_read(i2, i1, i3) | 0;
}

function __ZSt15get_new_handlerv() {
 var i1 = 0;
 i1 = HEAP32[5689] | 0;
 HEAP32[5689] = i1 + 0;
 return i1 | 0;
}

function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__16locale5__impD0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__16locale5__impD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __Z14emscriptenLoopPv(i1) {
 i1 = i1 | 0;
 __ZN4Game6updateEv(i1) | 0;
 __ZN4Game6renderEv(i1);
 return;
}

function _emscripten_glCreateShader__wrapper(i1) {
 i1 = i1 | 0;
 return _emscripten_glCreateShader(i1 | 0) | 0;
}

function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function _SW_DestroyRenderer(i1) {
 i1 = i1 | 0;
 _SDL_free(HEAP32[i1 + 316 >> 2] | 0);
 _SDL_free(i1);
 return;
}

function _emscripten_glHint__wrapper(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_glHint(i1 | 0, i2 | 0);
}

function _emscripten_glEnableClientState__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glEnableClientState(i1 | 0);
}

function _emscripten_glDepthRange__wrapper(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 _emscripten_glDepthRange(+d1, +d2);
}

function __ZNSt3__18numpunctIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18numpunctIwED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__18numpunctIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18numpunctIcED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function dynCall_vdd(i3, d1, d2) {
 i3 = i3 | 0;
 d1 = +d1;
 d2 = +d2;
 FUNCTION_TABLE_vdd[i3 & 3](+d1, +d2);
}

function b11(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(11);
 return 0;
}

function _SDL_memcmp(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 return _memcmp(i2, i3, i1) | 0;
}

function _SDL_itoa(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return _SDL_ltoa(i3, i2, i1) | 0;
}

function _SDL_SetHint(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _SDL_SetHintWithPriority(i1, i2, 1) | 0;
}

function _SDL_HandleSIG(i1) {
 i1 = i1 | 0;
 _signal(i1 | 0, 270) | 0;
 _SDL_SendAppEvent(256) | 0;
 return;
}

function _DUMMYAUD_Init(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 4 >> 2] = 25;
 HEAP32[i1 + 64 >> 2] = 1;
 return 1;
}

function _DISKAUD_GetDeviceBuf(i1) {
 i1 = i1 | 0;
 return HEAP32[(HEAP32[i1 + 184 >> 2] | 0) + 4 >> 2] | 0;
}

function _strtold_l(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return +(+_strtox(i3, i2, 2));
}

function _emscripten_glValidateProgram__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glValidateProgram(i1 | 0);
}

function _emscripten_glDeleteObjectARB__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glDeleteObjectARB(i1 | 0);
}

function _emscripten_glBindVertexArray__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glBindVertexArray(i1 | 0);
}

function _catgets(i1, i4, i2, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return i3 | 0;
}

function dynCall_ii(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_ii[i2 & 127](i1 | 0) | 0;
}

function _emscripten_glIsTexture__wrapper(i1) {
 i1 = i1 | 0;
 return _emscripten_glIsTexture(i1 | 0) | 0;
}

function _emscripten_glIsProgram__wrapper(i1) {
 i1 = i1 | 0;
 return _emscripten_glIsProgram(i1 | 0) | 0;
}

function _emscripten_glIsEnabled__wrapper(i1) {
 i1 = i1 | 0;
 return _emscripten_glIsEnabled(i1 | 0) | 0;
}

function _emscripten_glGetString__wrapper(i1) {
 i1 = i1 | 0;
 return _emscripten_glGetString(i1 | 0) | 0;
}

function ___clang_call_terminate(i1) {
 i1 = i1 | 0;
 ___cxa_begin_catch(i1 | 0) | 0;
 __ZSt9terminatev();
}

function __ZNKSt3__18numpunctIwE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 12 >> 2] | 0;
}

function __ZNKSt3__15ctypeIwE8do_widenEc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return i1 << 24 >> 24 | 0;
}

function _emscripten_glGenerateMipmap__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glGenerateMipmap(i1 | 0);
}

function __ZNSt3__18ios_baseD0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__15ctypeIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__15ctypeIcED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__18numpunctIwE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 8 >> 2] | 0;
}

function _emscripten_glIsShader__wrapper(i1) {
 i1 = i1 | 0;
 return _emscripten_glIsShader(i1 | 0) | 0;
}

function _emscripten_glIsBuffer__wrapper(i1) {
 i1 = i1 | 0;
 return _emscripten_glIsBuffer(i1 | 0) | 0;
}

function __ZNKSt3__18numpunctIcE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return HEAP8[i1 + 9 >> 0] | 0;
}

function __ZNKSt3__18numpunctIcE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return HEAP8[i1 + 8 >> 0] | 0;
}
function b19(i1, d2, d3, d4, d5) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 d5 = +d5;
 abort(19);
}

function _emscripten_glDeleteProgram__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glDeleteProgram(i1 | 0);
}

function _emscripten_glCompileShader__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glCompileShader(i1 | 0);
}

function _emscripten_glBlendEquation__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glBlendEquation(i1 | 0);
}

function _emscripten_glActiveTexture__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glActiveTexture(i1 | 0);
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv(i1) {
 i1 = i1 | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv(i1) {
 i1 = i1 | 0;
 return -1;
}

function _cleanup392(i1) {
 i1 = i1 | 0;
 if (!(HEAP32[i1 + 68 >> 2] | 0)) ___unlockfile(i1);
 return;
}

function _cleanup387(i1) {
 i1 = i1 | 0;
 if (!(HEAP32[i1 + 68 >> 2] | 0)) ___unlockfile(i1);
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function _Emscripten_SetDisplayMode(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return 0;
}

function _emscripten_glDeleteShader__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glDeleteShader(i1 | 0);
}

function _emscripten_glClearStencil__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glClearStencil(i1 | 0);
}

function establishStackSpace(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 STACKTOP = i1;
 STACK_MAX = i2;
}

function _emscripten_glStencilMask__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glStencilMask(i1 | 0);
}

function _emscripten_glLoadMatrixf__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glLoadMatrixf(i1 | 0);
}

function _emscripten_glLinkProgram__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glLinkProgram(i1 | 0);
}

function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}

function __ZN5ClockC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP8[i1 + 4 >> 0] = 0;
 return;
}

function b34(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(34);
}

function _isspace(i1) {
 i1 = i1 | 0;
 return ((i1 | 0) == 32 | (i1 + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function _emscripten_glUseProgram__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glUseProgram(i1 | 0);
}

function _emscripten_glReleaseShaderCompiler__wrapper() {
 _emscripten_glReleaseShaderCompiler();
}

function _emscripten_glMatrixMode__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glMatrixMode(i1 | 0);
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function _DUMMY_SetDisplayMode(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return 0;
}

function _isdigit_l(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (i1 + -48 | 0) >>> 0 < 10 | 0;
}

function _eglGetProcAddress__wrapper(i1) {
 i1 = i1 | 0;
 return _eglGetProcAddress(i1 | 0) | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 1;
}

function _SDL_UnloadObject(i1) {
 i1 = i1 | 0;
 if (!i1) return;
 _dlclose(i1 | 0) | 0;
 return;
}

function _SDL_GetKeyboardState(i1) {
 i1 = i1 | 0;
 if (i1) HEAP32[i1 >> 2] = 512;
 return 7410;
}

function dynCall_vi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_vi[i2 & 511](i1 | 0);
}

function _emscripten_glFrontFace__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glFrontFace(i1 | 0);
}

function _emscripten_glDepthMask__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glDepthMask(i1 | 0);
}

function _emscripten_glDepthFunc__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glDepthFunc(i1 | 0);
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function _SDL_strcasecmp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _strcasecmp(i1, i2) | 0;
}

function _SDL_OnWindowMinimized(i1) {
 i1 = i1 | 0;
 _SDL_UpdateFullscreenMode(i1, 0);
 return;
}

function _strcpy(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 ___stpcpy(i1, i2) | 0;
 return i1 | 0;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 return 4;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 return 4;
}

function __ZNKSt3__15ctypeIcE8do_widenEc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return i1 | 0;
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function _emscripten_glCullFace__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glCullFace(i1 | 0);
}

function _emscripten_glClearDepthf__wrapper(d1) {
 d1 = +d1;
 _emscripten_glClearDepthf(+d1);
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 return 1;
}

function _emscripten_glCreateProgram__wrapper() {
 return _emscripten_glCreateProgram() | 0;
}

function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__117__widen_from_utf8ILj32EED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 127;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 127;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 127;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 127;
}

function _SDL_OnWindowHidden(i1) {
 i1 = i1 | 0;
 _SDL_UpdateFullscreenMode(i1, 0);
 return;
}

function b14(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(14);
 return 0;
}

function _emscripten_glDisable__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glDisable(i1 | 0);
}

function _emscripten_glClearDepth__wrapper(d1) {
 d1 = +d1;
 _emscripten_glClearDepth(+d1);
}

function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 return 1;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__18messagesIwE8do_closeEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return;
}

function __ZNKSt3__18messagesIcE8do_closeEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return;
}

function b10(i1, d2, d3, d4) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 abort(10);
}

function _emscripten_glLineWidth__wrapper(d1) {
 d1 = +d1;
 _emscripten_glLineWidth(+d1);
}

function _emscripten_glEnable__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glEnable(i1 | 0);
}

function __ZN8Obstacle9getRadiusEv(i1) {
 i1 = i1 | 0;
 return +(+HEAPF32[i1 + 40 >> 2]);
}

function _SDL_realloc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _realloc(i1, i2) | 0;
}

function _SDL_SYS_SetTLSData(i1) {
 i1 = i1 | 0;
 return _SDL_Generic_SetTLSData(i1) | 0;
}

function _SDL_DestroyMutex(i1) {
 i1 = i1 | 0;
 if (!i1) return;
 _SDL_free(i1);
 return;
}

function _eglWaitNative__wrapper(i1) {
 i1 = i1 | 0;
 return _eglWaitNative(i1 | 0) | 0;
}

function _eglGetDisplay__wrapper(i1) {
 i1 = i1 | 0;
 return _eglGetDisplay(i1 | 0) | 0;
}

function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function _Blit_RGB565_RGBA8888(i1) {
 i1 = i1 | 0;
 _Blit_RGB565_32(i1, 16416);
 return;
}

function _Blit_RGB565_BGRA8888(i1) {
 i1 = i1 | 0;
 _Blit_RGB565_32(i1, 14368);
 return;
}

function _Blit_RGB565_ARGB8888(i1) {
 i1 = i1 | 0;
 _Blit_RGB565_32(i1, 20512);
 return;
}

function _Blit_RGB565_ABGR8888(i1) {
 i1 = i1 | 0;
 _Blit_RGB565_32(i1, 18464);
 return;
}

function dynCall_vd(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 FUNCTION_TABLE_vd[i2 & 3](+d1);
}

function _emscripten_glClear__wrapper(i1) {
 i1 = i1 | 0;
 _emscripten_glClear(i1 | 0);
}

function _SDL_strcmp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _strcmp(i1, i2) | 0;
}

function _SDL_strchr(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return _strchr(i2, i1) | 0;
}

function _SDL_calloc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _calloc(i1, i2) | 0;
}

function b29(d1, d2, d3, d4) {
 d1 = +d1;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 abort(29);
}

function _eglTerminate__wrapper(i1) {
 i1 = i1 | 0;
 return _eglTerminate(i1 | 0) | 0;
}

function _isxdigit_l(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _isxdigit(i1) | 0;
}

function __ZNSt3__110moneypunctIwLb1EED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__110moneypunctIwLb0EED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__110moneypunctIcLb1EED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__110moneypunctIcLb0EED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function _SDL_atan2(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 return +(+Math_atan2(+d1, +d2));
}

function _Emscripten_VideoQuit(i1) {
 i1 = i1 | 0;
 _Emscripten_FiniMouse();
 return;
}

function __ZNSt9bad_allocC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 22744;
 return;
}

function _SDL_abs(i1) {
 i1 = i1 | 0;
 return ((i1 | 0) > -1 ? i1 : 0 - i1 | 0) | 0;
}

function _emscripten_glGetError__wrapper() {
 return _emscripten_glGetError() | 0;
}

function _eglBindAPI__wrapper(i1) {
 i1 = i1 | 0;
 return _eglBindAPI(i1 | 0) | 0;
}

function _copysignl(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 return +(+_copysign(d1, d2));
}

function _scalbnl(d2, i1) {
 d2 = +d2;
 i1 = i1 | 0;
 return +(+_scalbn(d2, i1));
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZN10GameObject11getVerticesEv(i1) {
 i1 = i1 | 0;
 return i1 + 20 | 0;
}

function b17(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(17);
}

function __ZN10GameObject11getPositionEv(i1) {
 i1 = i1 | 0;
 return i1 + 4 | 0;
}

function _frexpl(d2, i1) {
 d2 = +d2;
 i1 = i1 | 0;
 return +(+_frexp(d2, i1));
}

function _emscripten_glLoadIdentity__wrapper() {
 _emscripten_glLoadIdentity();
}

function __ZNSt3__16locale5facetD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function dynCall_i(i1) {
 i1 = i1 | 0;
 return FUNCTION_TABLE_i[i1 & 7]() | 0;
}

function __ZNSt3__18messagesIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__18messagesIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function _Emscripten_DeleteDevice(i1) {
 i1 = i1 | 0;
 _SDL_free(i1);
 return;
}

function b18(i1, i2, d3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 abort(18);
}

function b12(i1, d2, i3) {
 i1 = i1 | 0;
 d2 = +d2;
 i3 = i3 | 0;
 abort(12);
}

function __ZNSt3__17collateIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__17collateIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function _SDL_KeyboardInit() {
 _SDL_memcpy(7924, 9972, 2048) | 0;
 return 0;
}

function _SDL_AtomicUnlock(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 0;
 return;
}

function _isupper(i1) {
 i1 = i1 | 0;
 return (i1 + -65 | 0) >>> 0 < 26 | 0;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__15ctypeIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__121__throw_runtime_errorEPKc(i1) {
 i1 = i1 | 0;
 return;
}

function _SDL_TLSCreate() {
 return (_SDL_AtomicAdd(12688, 1) | 0) + 1 | 0;
}

function b13(i1, d2, d3) {
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 abort(13);
}

function _fmodl(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 return +(+_fmod(d1, d2));
}

function _SDL_Init(i1) {
 i1 = i1 | 0;
 return _SDL_InitSubSystem(i1) | 0;
}

function b23(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(23);
 return 0;
}

function _getpix_16(i1) {
 i1 = i1 | 0;
 return HEAPU16[i1 >> 1] | 0 | 0;
}

function _SW_UnlockTexture(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function _SDL_AudioGetPendingBytes_Default(i1) {
 i1 = i1 | 0;
 return 0;
}

function _DUMMY_DeleteDevice(i1) {
 i1 = i1 | 0;
 _SDL_free(i1);
 return;
}

function __ZNSt9bad_allocD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function _SDL_AudioFreeDeviceHandle_Default(i1) {
 i1 = i1 | 0;
 return;
}

function _getpix_8(i1) {
 i1 = i1 | 0;
 return HEAPU8[i1 >> 0] | 0 | 0;
}

function _catopen(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return -1 | 0;
}

function __ZNSt3__110moneypunctIwLb1EED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__110moneypunctIwLb0EED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__110moneypunctIcLb1EED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__110moneypunctIcLb0EED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function _SDL_SYS_GetTLSData() {
 return _SDL_Generic_GetTLSData() | 0;
}

function _SDL_AudioGetDeviceBuf_Default(i1) {
 i1 = i1 | 0;
 return 0;
}

function dynCall_v(i1) {
 i1 = i1 | 0;
 FUNCTION_TABLE_v[i1 & 15]();
}

function _getpix_32(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 >> 2] | 0;
}

function __ZNSt3__114__shared_countD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNKSt9bad_alloc4whatEv(i1) {
 i1 = i1 | 0;
 return 52822;
}

function _emscripten_glFinish__wrapper() {
 _emscripten_glFinish();
}

function _SDL_strdup(i1) {
 i1 = i1 | 0;
 return ___strdup(i1) | 0;
}

function _SDL_NumJoysticks() {
 return _SDL_SYS_NumJoysticks() | 0;
}

function _SDL_AudioCloseDevice_Default(i1) {
 i1 = i1 | 0;
 return;
}

function _SDL_AudioWaitDevice_Default(i1) {
 i1 = i1 | 0;
 return;
}

function _SDL_AudioThreadInit_Default(i1) {
 i1 = i1 | 0;
 return;
}

function _SDL_AudioPlayDevice_Default(i1) {
 i1 = i1 | 0;
 return;
}

function _emscripten_glFlush__wrapper() {
 _emscripten_glFlush();
}

function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual();
}

function __ZNSt3__16locale5facetD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__112__do_nothingEPv(i1) {
 i1 = i1 | 0;
 return;
}

function _SDL_strlen(i1) {
 i1 = i1 | 0;
 return _strlen(i1) | 0;
}

function _SDL_malloc(i1) {
 i1 = i1 | 0;
 return _malloc(i1) | 0;
}

function _SDL_floor(d1) {
 d1 = +d1;
 return +(+Math_floor(+d1));
}

function __ZNSt3__18messagesIwED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__18messagesIcED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function _SDL_AudioWaitDone_Default(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__17collateIwED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__17collateIcED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function _SDL_sqrt(d1) {
 d1 = +d1;
 return +(+Math_sqrt(+d1));
}

function _SDL_ceil(d1) {
 d1 = +d1;
 return +(+Math_ceil(+d1));
}

function _SDL_fabs(d1) {
 d1 = +d1;
 return +(+Math_abs(+d1));
}

function _SDL_SendQuit() {
 return _SDL_SendAppEvent(256) | 0;
}

function _freelocale(i1) {
 i1 = i1 | 0;
 _free(i1);
 return;
}

function _SDL_sin(d1) {
 d1 = +d1;
 return +(+Math_sin(+d1));
}

function _SDL_cos(d1) {
 d1 = +d1;
 return +(+Math_cos(+d1));
}

function _SDL_atoi(i1) {
 i1 = i1 | 0;
 return _atoi(i1) | 0;
}

function b6(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(6);
}

function _SDL_SYS_NumJoysticks() {
 return HEAP32[3484] | 0;
}

function _SDL_GetKeyboardFocus() {
 return HEAP32[1851] | 0;
}

function _Emscripten_PumpEvents(i1) {
 i1 = i1 | 0;
 return;
}

function b32(d1, i2) {
 d1 = +d1;
 i2 = i2 | 0;
 abort(32);
}

function __ZdaPv(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function _SDL_free(i1) {
 i1 = i1 | 0;
 _free(i1);
 return;
}

function _SDL_DestroySemaphore(i1) {
 i1 = i1 | 0;
 return;
}

function _eglWaitGL__wrapper() {
 return _eglWaitGL() | 0;
}

function __ZNSt9type_infoD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt9exceptionD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt9bad_allocD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function _SDL_GetVideoDevice() {
 return HEAP32[3256] | 0;
}

function stackRestore(i1) {
 i1 = i1 | 0;
 STACKTOP = i1;
}

function b3(i1, d2) {
 i1 = i1 | 0;
 d2 = +d2;
 abort(3);
}

function __ZdlPv(i1) {
 i1 = i1 | 0;
 _free(i1);
 return;
}

function _SDL_SYS_WaitThread(i1) {
 i1 = i1 | 0;
 return;
}

function _SDL_MouseInit() {
 HEAP32[3031] = 1;
 return 0;
}

function _SDL_GetMouseFocus() {
 return HEAP32[3016] | 0;
}

function setTempRet0(i1) {
 i1 = i1 | 0;
 tempRet0 = i1;
}

function b30(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 abort(30);
}

function _SDL_UnlockMutex(i1) {
 i1 = i1 | 0;
 return 0;
}

function _SDL_OnWindowLeave(i1) {
 i1 = i1 | 0;
 return;
}

function _DUMMY_PumpEvents(i1) {
 i1 = i1 | 0;
 return;
}

function _SDL_LockMutex(i1) {
 i1 = i1 | 0;
 return 0;
}

function _SDL_ClearError() {
 HEAP32[32] = 0;
 return;
}

function _DUMMY_VideoQuit(i1) {
 i1 = i1 | 0;
 return;
}

function b8(i1) {
 i1 = i1 | 0;
 abort(8);
 return 0;
}

function _SDL_AudioDeinitialize_Default() {
 return;
}

function ___unlockfile(i1) {
 i1 = i1 | 0;
 return;
}

function ___lockfile(i1) {
 i1 = i1 | 0;
 return 0;
}

function __GLOBAL__sub_I_iostream_cpp() {
 return;
}

function _catclose(i1) {
 i1 = i1 | 0;
 return 0;
}

function ___ctype_toupper_loc() {
 return 23164;
}

function ___ctype_tolower_loc() {
 return 23160;
}

function _SDL_GetNumRenderDrivers() {
 return 2;
}

function getTempRet0() {
 return tempRet0 | 0;
}

function _SDL_SYS_JoystickDetect() {
 return;
}

function _Emscripten_Available() {
 return 1;
}

function stackSave() {
 return STACKTOP | 0;
}

function b5(i1) {
 i1 = i1 | 0;
 abort(5);
}

function ___ctype_b_loc() {
 return 23156;
}

function _SDL_GetMouse() {
 return 12020;
}

function b25() {
 abort(25);
 return 0;
}

function b2(d1) {
 d1 = +d1;
 abort(2);
}

function _SDL_KeyboardQuit() {
 return;
}

function _SDL_TouchInit() {
 return 0;
}

function _SDL_ThreadID() {
 return 0;
}

function b31() {
 abort(31);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,_SDL_BlendFillRect_RGB888,_SDL_BlendFillRect_ARGB8888,_SDL_BlendFillRect_RGB,_SDL_BlendFillRect_RGBA,_SDL_BlendFillRect_RGB555,_SDL_BlendFillRect_RGB565,b0,b0,b0];
var FUNCTION_TABLE_iiiiiid = [b1,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b1];
var FUNCTION_TABLE_vd = [b2,_emscripten_glClearDepth__wrapper,_emscripten_glClearDepthf__wrapper,_emscripten_glLineWidth__wrapper];
var FUNCTION_TABLE_vid = [b3,_emscripten_glUniform1f__wrapper,_emscripten_glVertexAttrib1f__wrapper,b3];
var FUNCTION_TABLE_viiiii = [b4,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,_emscripten_glUniform4i__wrapper,_emscripten_glFramebufferTexture2D__wrapper,_emscripten_glShaderBinary__wrapper,_emscripten_glDrawElementsInstanced__wrapper];
var FUNCTION_TABLE_vi = [b5,__ZNSt3__120__shared_ptr_emplaceI13PlayerVehicleNS_9allocatorIS1_EEED2Ev,__ZNSt3__120__shared_ptr_emplaceI13PlayerVehicleNS_9allocatorIS1_EEED0Ev,__ZNSt3__120__shared_ptr_emplaceI13PlayerVehicleNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__120__shared_ptr_emplaceI13PlayerVehicleNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__120__shared_ptr_emplaceI17GameObjectManagerNS_9allocatorIS1_EEED2Ev,__ZNSt3__120__shared_ptr_emplaceI17GameObjectManagerNS_9allocatorIS1_EEED0Ev,__ZNSt3__120__shared_ptr_emplaceI17GameObjectManagerNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__120__shared_ptr_emplaceI17GameObjectManagerNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__120__shared_ptr_emplaceI8ObstacleNS_9allocatorIS1_EEED2Ev,__ZNSt3__120__shared_ptr_emplaceI8ObstacleNS_9allocatorIS1_EEED0Ev,__ZNSt3__120__shared_ptr_emplaceI8ObstacleNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__120__shared_ptr_emplaceI8ObstacleNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__120__shared_ptr_emplaceI11KeyBindingsNS_9allocatorIS1_EEED2Ev,__ZNSt3__120__shared_ptr_emplaceI11KeyBindingsNS_9allocatorIS1_EEED0Ev,__ZNSt3__120__shared_ptr_emplaceI11KeyBindingsNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__120__shared_ptr_emplaceI11KeyBindingsNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,_SDL_Blit_RGB888_RGB888_Scale,_SDL_Blit_RGB888_RGB888_Blend,_SDL_Blit_RGB888_RGB888_Blend_Scale,_SDL_Blit_RGB888_RGB888_Modulate,_SDL_Blit_RGB888_RGB888_Modulate_Scale,_SDL_Blit_RGB888_RGB888_Modulate_Blend,_SDL_Blit_RGB888_RGB888_Modulate_Blend_Scale,_SDL_Blit_RGB888_BGR888_Scale,_SDL_Blit_RGB888_BGR888_Blend,_SDL_Blit_RGB888_BGR888_Blend_Scale,_SDL_Blit_RGB888_BGR888_Modulate,_SDL_Blit_RGB888_BGR888_Modulate_Scale
,_SDL_Blit_RGB888_BGR888_Modulate_Blend,_SDL_Blit_RGB888_BGR888_Modulate_Blend_Scale,_SDL_Blit_RGB888_ARGB8888_Scale,_SDL_Blit_RGB888_ARGB8888_Blend,_SDL_Blit_RGB888_ARGB8888_Blend_Scale,_SDL_Blit_RGB888_ARGB8888_Modulate,_SDL_Blit_RGB888_ARGB8888_Modulate_Scale,_SDL_Blit_RGB888_ARGB8888_Modulate_Blend,_SDL_Blit_RGB888_ARGB8888_Modulate_Blend_Scale,_SDL_Blit_BGR888_RGB888_Scale,_SDL_Blit_BGR888_RGB888_Blend,_SDL_Blit_BGR888_RGB888_Blend_Scale,_SDL_Blit_BGR888_RGB888_Modulate,_SDL_Blit_BGR888_RGB888_Modulate_Scale,_SDL_Blit_BGR888_RGB888_Modulate_Blend,_SDL_Blit_BGR888_RGB888_Modulate_Blend_Scale,_SDL_Blit_BGR888_BGR888_Scale,_SDL_Blit_BGR888_BGR888_Blend,_SDL_Blit_BGR888_BGR888_Blend_Scale,_SDL_Blit_BGR888_BGR888_Modulate,_SDL_Blit_BGR888_BGR888_Modulate_Scale,_SDL_Blit_BGR888_BGR888_Modulate_Blend,_SDL_Blit_BGR888_BGR888_Modulate_Blend_Scale,_SDL_Blit_BGR888_ARGB8888_Scale,_SDL_Blit_BGR888_ARGB8888_Blend,_SDL_Blit_BGR888_ARGB8888_Blend_Scale,_SDL_Blit_BGR888_ARGB8888_Modulate,_SDL_Blit_BGR888_ARGB8888_Modulate_Scale,_SDL_Blit_BGR888_ARGB8888_Modulate_Blend,_SDL_Blit_BGR888_ARGB8888_Modulate_Blend_Scale
,_SDL_Blit_ARGB8888_RGB888_Scale,_SDL_Blit_ARGB8888_RGB888_Blend,_SDL_Blit_ARGB8888_RGB888_Blend_Scale,_SDL_Blit_ARGB8888_RGB888_Modulate,_SDL_Blit_ARGB8888_RGB888_Modulate_Scale,_SDL_Blit_ARGB8888_RGB888_Modulate_Blend,_SDL_Blit_ARGB8888_RGB888_Modulate_Blend_Scale,_SDL_Blit_ARGB8888_BGR888_Scale,_SDL_Blit_ARGB8888_BGR888_Blend,_SDL_Blit_ARGB8888_BGR888_Blend_Scale,_SDL_Blit_ARGB8888_BGR888_Modulate,_SDL_Blit_ARGB8888_BGR888_Modulate_Scale,_SDL_Blit_ARGB8888_BGR888_Modulate_Blend,_SDL_Blit_ARGB8888_BGR888_Modulate_Blend_Scale,_SDL_Blit_ARGB8888_ARGB8888_Scale,_SDL_Blit_ARGB8888_ARGB8888_Blend,_SDL_Blit_ARGB8888_ARGB8888_Blend_Scale,_SDL_Blit_ARGB8888_ARGB8888_Modulate,_SDL_Blit_ARGB8888_ARGB8888_Modulate_Scale,_SDL_Blit_ARGB8888_ARGB8888_Modulate_Blend,_SDL_Blit_ARGB8888_ARGB8888_Modulate_Blend_Scale,_SDL_Blit_RGBA8888_RGB888_Scale,_SDL_Blit_RGBA8888_RGB888_Blend,_SDL_Blit_RGBA8888_RGB888_Blend_Scale,_SDL_Blit_RGBA8888_RGB888_Modulate,_SDL_Blit_RGBA8888_RGB888_Modulate_Scale,_SDL_Blit_RGBA8888_RGB888_Modulate_Blend,_SDL_Blit_RGBA8888_RGB888_Modulate_Blend_Scale,_SDL_Blit_RGBA8888_BGR888_Scale,_SDL_Blit_RGBA8888_BGR888_Blend
,_SDL_Blit_RGBA8888_BGR888_Blend_Scale,_SDL_Blit_RGBA8888_BGR888_Modulate,_SDL_Blit_RGBA8888_BGR888_Modulate_Scale,_SDL_Blit_RGBA8888_BGR888_Modulate_Blend,_SDL_Blit_RGBA8888_BGR888_Modulate_Blend_Scale,_SDL_Blit_RGBA8888_ARGB8888_Scale,_SDL_Blit_RGBA8888_ARGB8888_Blend,_SDL_Blit_RGBA8888_ARGB8888_Blend_Scale,_SDL_Blit_RGBA8888_ARGB8888_Modulate,_SDL_Blit_RGBA8888_ARGB8888_Modulate_Scale,_SDL_Blit_RGBA8888_ARGB8888_Modulate_Blend,_SDL_Blit_RGBA8888_ARGB8888_Modulate_Blend_Scale,_SDL_Blit_ABGR8888_RGB888_Scale,_SDL_Blit_ABGR8888_RGB888_Blend,_SDL_Blit_ABGR8888_RGB888_Blend_Scale,_SDL_Blit_ABGR8888_RGB888_Modulate,_SDL_Blit_ABGR8888_RGB888_Modulate_Scale,_SDL_Blit_ABGR8888_RGB888_Modulate_Blend,_SDL_Blit_ABGR8888_RGB888_Modulate_Blend_Scale,_SDL_Blit_ABGR8888_BGR888_Scale,_SDL_Blit_ABGR8888_BGR888_Blend,_SDL_Blit_ABGR8888_BGR888_Blend_Scale,_SDL_Blit_ABGR8888_BGR888_Modulate,_SDL_Blit_ABGR8888_BGR888_Modulate_Scale,_SDL_Blit_ABGR8888_BGR888_Modulate_Blend,_SDL_Blit_ABGR8888_BGR888_Modulate_Blend_Scale,_SDL_Blit_ABGR8888_ARGB8888_Scale,_SDL_Blit_ABGR8888_ARGB8888_Blend,_SDL_Blit_ABGR8888_ARGB8888_Blend_Scale,_SDL_Blit_ABGR8888_ARGB8888_Modulate
,_SDL_Blit_ABGR8888_ARGB8888_Modulate_Scale,_SDL_Blit_ABGR8888_ARGB8888_Modulate_Blend,_SDL_Blit_ABGR8888_ARGB8888_Modulate_Blend_Scale,_SDL_Blit_BGRA8888_RGB888_Scale,_SDL_Blit_BGRA8888_RGB888_Blend,_SDL_Blit_BGRA8888_RGB888_Blend_Scale,_SDL_Blit_BGRA8888_RGB888_Modulate,_SDL_Blit_BGRA8888_RGB888_Modulate_Scale,_SDL_Blit_BGRA8888_RGB888_Modulate_Blend,_SDL_Blit_BGRA8888_RGB888_Modulate_Blend_Scale,_SDL_Blit_BGRA8888_BGR888_Scale,_SDL_Blit_BGRA8888_BGR888_Blend,_SDL_Blit_BGRA8888_BGR888_Blend_Scale,_SDL_Blit_BGRA8888_BGR888_Modulate,_SDL_Blit_BGRA8888_BGR888_Modulate_Scale,_SDL_Blit_BGRA8888_BGR888_Modulate_Blend,_SDL_Blit_BGRA8888_BGR888_Modulate_Blend_Scale,_SDL_Blit_BGRA8888_ARGB8888_Scale,_SDL_Blit_BGRA8888_ARGB8888_Blend,_SDL_Blit_BGRA8888_ARGB8888_Blend_Scale,_SDL_Blit_BGRA8888_ARGB8888_Modulate,_SDL_Blit_BGRA8888_ARGB8888_Modulate_Scale,_SDL_Blit_BGRA8888_ARGB8888_Modulate_Blend,_SDL_Blit_BGRA8888_ARGB8888_Modulate_Blend_Scale,_BlitBto1,_BlitBto2,_BlitBto3,_BlitBto4,_BlitBto1Key,_BlitBto2Key
,_BlitBto3Key,_BlitBto4Key,_Blit1to1,_Blit1to2,_Blit1to3,_Blit1to4,_Blit1to1Key,_Blit1to2Key,_Blit1to3Key,_Blit1to4Key,_BlitNtoN,_Blit_RGB565_ARGB8888,_Blit_RGB565_ABGR8888,_Blit_RGB565_RGBA8888,_Blit_RGB565_BGRA8888,_Blit_RGB888_RGB565,_Blit_RGB888_RGB555,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__111__stdoutbufIwED0Ev,__ZNSt3__110__stdinbufIwED0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__111__stdoutbufIcED0Ev
,__ZNSt3__110__stdinbufIcED0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__17collateIcED2Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,__ZNSt3__17collateIwED2Ev,__ZNSt3__17collateIwED0Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev
,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__110moneypunctIcLb0EED2Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,__ZNSt3__110moneypunctIcLb1EED2Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,__ZNSt3__110moneypunctIwLb0EED2Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,__ZNSt3__110moneypunctIwLb1EED2Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18messagesIcED2Ev,__ZNSt3__18messagesIcED0Ev
,__ZNSt3__18messagesIwED2Ev,__ZNSt3__18messagesIwED0Ev,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,__ZNSt3__110shared_ptrI17GameObjectManagerED2Ev,__ZNSt3__110shared_ptrI11KeyBindingsED2Ev,__Z14emscriptenLoopPv,_SDL_AudioThreadInit_Default,_SDL_AudioWaitDevice_Default,_SDL_AudioPlayDevice_Default,_SDL_AudioWaitDone_Default,_SDL_AudioCloseDevice_Default,_SDL_AudioLockDevice_Default,_SDL_AudioUnlockDevice_Default
,_SDL_AudioFreeDeviceHandle_Default,_SDL_HandleSIG,_SW_RenderPresent,_SW_DestroyRenderer,_SDL_BlitCopy,_SDL_Blit_Slow,_BlitBtoNAlpha,_BlitBtoNAlphaKey,_Blit1toNAlpha,_Blit1toNAlphaKey,_BlitARGBto555PixelAlpha,_BlitNtoNPixelAlpha,_BlitARGBto565PixelAlpha,_Blit555to555SurfaceAlpha,_BlitNtoNSurfaceAlpha,_Blit565to565SurfaceAlpha,_BlitNto1SurfaceAlphaKey,_BlitNtoNSurfaceAlphaKey,_BlitNto1PixelAlpha,_BlitRGBtoRGBPixelAlpha,_BlitNto1SurfaceAlpha,_BlitRGBtoRGBSurfaceAlpha,_BlitNtoNCopyAlpha,_Blit_RGB888_index8,_Blit_RGB101010_index8,_BlitNto1,_Blit2101010toN,_BlitNto2101010,_Blit4to4MaskAlpha,_Blit2to2Key
,_BlitNto1Key,_BlitNtoNKeyCopyAlpha,_BlitNtoNKey,_Emscripten_FreeCursor,_GLES2_RenderPresent,_GLES2_DestroyRenderer,_Emscripten_VideoQuit,_Emscripten_PumpEvents,_SDL_EGL_UnloadLibrary,_Emscripten_DeleteDevice,_Emscripten_CloseDevice,_DUMMY_VideoQuit,_DUMMY_PumpEvents,_DUMMY_DeleteDevice,_DISKAUD_WaitDevice,_DISKAUD_PlayDevice,_DISKAUD_CloseDevice,_HandleAudioProcess,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,_emscripten_glDeleteShader__wrapper,_emscripten_glCompileShader__wrapper,_emscripten_glDeleteProgram__wrapper,_emscripten_glLinkProgram__wrapper,_emscripten_glUseProgram__wrapper,_emscripten_glValidateProgram__wrapper,_emscripten_glDeleteObjectARB__wrapper,_emscripten_glEnableClientState__wrapper,_emscripten_glClientActiveTexture__wrapper,_emscripten_glBindVertexArray__wrapper,_emscripten_glMatrixMode__wrapper,_emscripten_glLoadMatrixf__wrapper,_emscripten_glEnableVertexAttribArray__wrapper,_emscripten_glDisableVertexAttribArray__wrapper,_emscripten_glDepthFunc__wrapper,_emscripten_glEnable__wrapper,_emscripten_glDisable__wrapper,_emscripten_glFrontFace__wrapper,_emscripten_glCullFace__wrapper,_emscripten_glClear__wrapper,_emscripten_glClearStencil__wrapper,_emscripten_glDepthMask__wrapper,_emscripten_glStencilMask__wrapper,_emscripten_glGenerateMipmap__wrapper,_emscripten_glActiveTexture__wrapper,_emscripten_glBlendEquation__wrapper,_cleanup387,_cleanup392,__ZNSt3__18ios_base4InitD2Ev,__ZNSt3__112__do_nothingEPv,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,___cxx_global_array_dtor,___cxx_global_array_dtor46,___cxx_global_array_dtor61,___cxx_global_array_dtor85,___cxx_global_array_dtor109,___cxx_global_array_dtor112,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev,_free
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_vii = [b6,__ZN13PlayerVehicle6renderEP12SDL_Renderer,__ZN8Obstacle6renderEP12SDL_Renderer,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv
,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__18messagesIcE8do_closeEi,__ZNKSt3__18messagesIwE8do_closeEi,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,_SW_WindowEvent,_SW_UnlockTexture,_SW_DestroyTexture,_SDL_DestroyWindowTexture,_GLES2_WindowEvent,_GLES2_UnlockTexture,_GLES2_DestroyTexture,_Emscripten_SetWindowTitle,_Emscripten_SetWindowSize,_Emscripten_DestroyWindow,_Emscripten_DestroyWindowFramebuffer,_Emscripten_GLES_SwapWindow,_Emscripten_GLES_DeleteContext,_SDL_DUMMY_DestroyWindowFramebuffer,_emscripten_glPixelStorei__wrapper,_emscripten_glGetIntegerv__wrapper,_emscripten_glGetFloatv__wrapper,_emscripten_glGetBooleanv__wrapper,_emscripten_glGenTextures__wrapper,_emscripten_glDeleteTextures__wrapper,_emscripten_glBindTexture__wrapper,_emscripten_glGenBuffers__wrapper,_emscripten_glDeleteBuffers__wrapper,_emscripten_glGenRenderbuffers__wrapper,_emscripten_glDeleteRenderbuffers__wrapper,_emscripten_glBindRenderbuffer__wrapper,_emscripten_glUniform1i__wrapper,_emscripten_glBindBuffer__wrapper,_emscripten_glVertexAttrib1fv__wrapper,_emscripten_glVertexAttrib2fv__wrapper,_emscripten_glVertexAttrib3fv__wrapper,_emscripten_glVertexAttrib4fv__wrapper,_emscripten_glAttachShader__wrapper,_emscripten_glDetachShader__wrapper,_emscripten_glBindFramebuffer__wrapper,_emscripten_glGenFramebuffers__wrapper,_emscripten_glDeleteFramebuffers__wrapper,_emscripten_glBindProgramARB__wrapper,_emscripten_glGetPointerv__wrapper,_emscripten_glGenVertexArrays__wrapper,_emscripten_glDeleteVertexArrays__wrapper,_emscripten_glVertexAttribDivisor__wrapper,_emscripten_glBlendFunc__wrapper,_emscripten_glBlendEquationSeparate__wrapper,_emscripten_glStencilMaskSeparate__wrapper,_emscripten_glHint__wrapper,_emscripten_glDrawBuffers__wrapper,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiiiii = [b7,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_ii = [b8,_Emscripten_CreateDevice,_Emscripten_Init,_DUMMY_CreateDevice,_DISKAUD_Init,_DUMMYAUD_Init,_getpix_8,_getpix_16,_getpix_24,_getpix_32,__ZNKSt9bad_alloc4whatEv,___stdio_close,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv
,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv
,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,_SDL_AudioGetPendingBytes_Default,_SDL_AudioGetDeviceBuf_Default,_stdio_size,_stdio_close,_SW_UpdateViewport,_SW_UpdateClipRect,_SW_RenderClear,_SDL_TimerThread,_Emscripten_ShowCursor,_Emscripten_CreateSystemCursor,_Emscripten_SetRelativeMouseMode,_eglGetDisplay__wrapper,_eglTerminate__wrapper,_eglGetProcAddress__wrapper,_eglWaitNative__wrapper,_eglBindAPI__wrapper,_GLES2_UpdateViewport,_GLES2_UpdateClipRect,_GLES2_RenderClear
,_Emscripten_VideoInit,_SDL_EGL_GetSwapInterval,_DUMMY_VideoInit,_DISKAUD_GetDeviceBuf,_emscripten_glGetString__wrapper,_emscripten_glIsTexture__wrapper,_emscripten_glIsBuffer__wrapper,_emscripten_glIsRenderbuffer__wrapper,_emscripten_glCreateShader__wrapper,_emscripten_glIsShader__wrapper,_emscripten_glIsProgram__wrapper,_emscripten_glIsFramebuffer__wrapper,_emscripten_glCheckFramebufferStatus__wrapper,_emscripten_glIsEnabled__wrapper,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viiiiiiiiiii = [b9,_SDL_BlendLine_RGB565,_SDL_BlendLine_RGB2,_SDL_BlendLine_RGB555,_SDL_BlendLine_ARGB8888,_SDL_BlendLine_RGB888,_SDL_BlendLine_RGBA4,_SDL_BlendLine_RGB4];
var FUNCTION_TABLE_viddd = [b10,_emscripten_glUniform3f__wrapper,_emscripten_glVertexAttrib3f__wrapper,b10];
var FUNCTION_TABLE_iiiii = [b11,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,_SDL_AudioOpenDevice_Default,_stdio_seek,_stdio_read,_stdio_write,_SW_RenderCopy,_SDL_RLEBlit,_SDL_RLEAlphaBlit,_SDL_SoftBlit,_SDL_UpdateWindowTexture,_eglGetConfigAttrib__wrapper,_eglCreateContext__wrapper,_eglCreateWindowSurface__wrapper,_eglMakeCurrent__wrapper,_GLES2_RenderCopy,_GLES2_BindTexture,_Emscripten_UpdateWindowFramebuffer,_Emscripten_OpenDevice,_SDL_DUMMY_UpdateWindowFramebuffer,_DISKAUD_OpenDevice,_DUMMYAUD_OpenDevice,b11,b11,b11
,b11,b11,b11];
var FUNCTION_TABLE_vidi = [b12,__ZN10GameObject6updateEfRNSt3__16vectorI6ActionNS0_9allocatorIS2_EEEE,__ZN13PlayerVehicle6updateEfRNSt3__16vectorI6ActionNS0_9allocatorIS2_EEEE,b12];
var FUNCTION_TABLE_vidd = [b13,_emscripten_glUniform2f__wrapper,_emscripten_glVertexAttrib2f__wrapper,b13];
var FUNCTION_TABLE_iiii = [b14,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_sn_write,___stdio_write,___stdio_seek,___stdio_read,___stdout_write,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,__ZNKSt3__17collateIcE7do_hashEPKcS3_,__ZNKSt3__17collateIwE7do_hashEPKwS3_,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__15ctypeIcE9do_narrowEcc,__ZNKSt3__15ctypeIwE5do_isEtw,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__15ctypeIwE9do_narrowEwc,_SW_GetOutputSize,_SW_RenderDrawPoints,_SW_RenderDrawLines
,_SW_RenderFillRects,_Emscripten_HandleMouseMove,_Emscripten_HandleMouseButton,_Emscripten_HandleMouseFocus,_Emscripten_HandleWheel,_Emscripten_HandleFocus,_Emscripten_HandleTouch,_Emscripten_HandleKey,_Emscripten_HandleKeyPress,_Emscripten_HandleFullscreenChange,_Emscripten_HandleResize,_Emscripten_HandleVisibilityChange,_Emscripten_CreateCursor,_eglInitialize__wrapper,_Emscripten_JoyStickConnected,_Emscripten_JoyStickDisconnected,_GLES2_RenderDrawPoints,_GLES2_RenderDrawLines,_GLES2_RenderFillRects,_Emscripten_SetDisplayMode,_Emscripten_GLES_MakeCurrent,_DUMMY_SetDisplayMode,_Emscripten_HandleCanvasResize,_do_read,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14];
var FUNCTION_TABLE_viiiiiiii = [b15,_emscripten_glCompressedTexImage2D__wrapper,_emscripten_glCopyTexImage2D__wrapper,_emscripten_glCopyTexSubImage2D__wrapper];
var FUNCTION_TABLE_viiiiii = [b16,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,_emscripten_glDrawRangeElements__wrapper,_emscripten_glVertexAttribPointer__wrapper,b16,b16,b16,b16,b16,b16];
var FUNCTION_TABLE_viii = [b17,_Emscripten_WarpMouse,_emscripten_glGetTexParameterfv__wrapper,_emscripten_glGetTexParameteriv__wrapper,_emscripten_glTexParameterfv__wrapper,_emscripten_glTexParameteriv__wrapper,_emscripten_glGetBufferParameteriv__wrapper,_emscripten_glGetRenderbufferParameteriv__wrapper,_emscripten_glGetUniformfv__wrapper,_emscripten_glGetUniformiv__wrapper,_emscripten_glGetVertexAttribfv__wrapper,_emscripten_glGetVertexAttribiv__wrapper,_emscripten_glGetVertexAttribPointerv__wrapper,_emscripten_glUniform2i__wrapper,_emscripten_glUniform1iv__wrapper,_emscripten_glUniform2iv__wrapper,_emscripten_glUniform3iv__wrapper,_emscripten_glUniform4iv__wrapper,_emscripten_glUniform1fv__wrapper,_emscripten_glUniform2fv__wrapper,_emscripten_glUniform3fv__wrapper,_emscripten_glUniform4fv__wrapper,_emscripten_glGetShaderiv__wrapper,_emscripten_glGetProgramiv__wrapper,_emscripten_glBindAttribLocation__wrapper,_emscripten_glGetObjectParameterivARB__wrapper,_emscripten_glNormalPointer__wrapper,_emscripten_glDrawArrays__wrapper,_emscripten_glTexParameteri__wrapper,_emscripten_glStencilFunc__wrapper,_emscripten_glStencilOp__wrapper,b17];
var FUNCTION_TABLE_viid = [b18,_emscripten_glTexParameterf__wrapper];
var FUNCTION_TABLE_vidddd = [b19,_emscripten_glUniform4f__wrapper,_emscripten_glVertexAttrib4f__wrapper,b19];
var FUNCTION_TABLE_iiiiiiiii = [b20,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,_SDL_BlendPoint_RGB888,_SDL_BlendPoint_ARGB8888,_SDL_BlendPoint_RGB,_SDL_BlendPoint_RGBA,_SDL_BlendPoint_RGB555,_SDL_BlendPoint_RGB565,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20];
var FUNCTION_TABLE_viiiiiii = [b21,_SDL_DrawLine2,_SDL_DrawLine1,_SDL_DrawLine4,_emscripten_glReadPixels__wrapper,_emscripten_glGetActiveUniform__wrapper,_emscripten_glGetActiveAttrib__wrapper,b21];
var FUNCTION_TABLE_viiiiiiiii = [b22,_Color16DitherYV12Mod1X,_Color16DitherYV12Mod2X,_Color24DitherYV12Mod1X,_Color24DitherYV12Mod2X,_Color32DitherYV12Mod1X,_Color32DitherYV12Mod2X,_Color16DitherYUY2Mod1X,_Color16DitherYUY2Mod2X,_Color24DitherYUY2Mod1X,_Color24DitherYUY2Mod2X,_Color32DitherYUY2Mod1X,_Color32DitherYUY2Mod2X,_emscripten_glCompressedTexSubImage2D__wrapper,_emscripten_glTexImage2D__wrapper,_emscripten_glTexSubImage2D__wrapper];
var FUNCTION_TABLE_iii = [b23,__ZNKSt3__119__shared_weak_count13__get_deleterERKSt9type_info,_GLES2_CreateRenderer,_SW_CreateRenderer,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__111__stdoutbufIwE8overflowEj,__ZNSt3__110__stdinbufIwE9pbackfailEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__111__stdoutbufIcE8overflowEi,__ZNSt3__110__stdinbufIcE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNKSt3__15ctypeIcE10do_toupperEc,__ZNKSt3__15ctypeIcE10do_tolowerEc,__ZNKSt3__15ctypeIcE8do_widenEc,__ZNKSt3__15ctypeIwE10do_toupperEw,__ZNKSt3__15ctypeIwE10do_tolowerEw,__ZNKSt3__15ctypeIwE8do_widenEc,_RemovePendingResizedEvents,_RemovePendingSizeChangedEvents,_RemovePendingMoveEvents,_SDL_GameControllerEventWatcher,_SDL_RendererEventWatch,_SW_CreateTexture,_SW_SetTextureColorMod,_SW_SetTextureAlphaMod,_SW_SetTextureBlendMode,_SW_SetRenderTarget,_cmpmodes
,_eglDestroyContext__wrapper,_eglDestroySurface__wrapper,_eglSwapBuffers__wrapper,_eglSwapInterval__wrapper,_GLES2_CreateTexture,_GLES2_SetRenderTarget,_GLES2_UnbindTexture,_Emscripten_CreateWindow,_Emscripten_GLES_LoadLibrary,_SDL_EGL_GetProcAddress,_Emscripten_GLES_CreateContext,_SDL_EGL_SetSwapInterval,_emscripten_glGetUniformLocation__wrapper,_emscripten_glGetAttribLocation__wrapper,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23];
var FUNCTION_TABLE_iiiiii = [b24,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,_SW_UpdateTexture,_SW_LockTexture,_SW_RenderReadPixels,_copy_transl_565,_copy_transl_555,_copy_opaque_16,_copy_32,_uncopy_opaque_16
,_uncopy_32,_uncopy_transl_16,_SDL_CreateWindowTexture,_eglChooseConfig__wrapper,_GLES2_UpdateTexture,_GLES2_LockTexture,_GLES2_RenderReadPixels,_Emscripten_CreateWindowFramebuffer,_SDL_DUMMY_CreateWindowFramebuffer,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24];
var FUNCTION_TABLE_i = [b25,_Emscripten_Available,_DUMMY_Available,_eglWaitGL__wrapper,_emscripten_glCreateProgram__wrapper,_emscripten_glGetError__wrapper,b25,b25];
var FUNCTION_TABLE_iiiiidii = [b26,_SW_RenderCopyEx,_GLES2_RenderCopyEx,b26];
var FUNCTION_TABLE_iiiiiiiiii = [b27,_GLES2_UpdateTextureYUV];
var FUNCTION_TABLE_vdddddd = [b28,_emscripten_glFrustum__wrapper];
var FUNCTION_TABLE_vdddd = [b29,_emscripten_glRotatef__wrapper,_emscripten_glClearColor__wrapper,_emscripten_glBlendColor__wrapper];
var FUNCTION_TABLE_vdd = [b30,_emscripten_glDepthRange__wrapper,_emscripten_glDepthRangef__wrapper,_emscripten_glPolygonOffset__wrapper];
var FUNCTION_TABLE_v = [b31,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,_SDL_AudioDetectDevices_Default,_SDL_AudioDeinitialize_Default,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,_emscripten_glLoadIdentity__wrapper,_emscripten_glReleaseShaderCompiler__wrapper,_emscripten_glFinish__wrapper,_emscripten_glFlush__wrapper,b31,b31,b31,b31,b31,b31];
var FUNCTION_TABLE_vdi = [b32,_emscripten_glSampleCoverage__wrapper];
var FUNCTION_TABLE_iiiiid = [b33,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b33,b33,b33];
var FUNCTION_TABLE_viiii = [b34,_SDL_LogOutput,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__17collateIcE12do_transformEPKcS3_,__ZNKSt3__17collateIwE12do_transformEPKwS3_,_SDL_JoystickAllowBackgroundEventsChanged,_Emscripten_SetWindowFullscreen,_Emscripten_GLES_GetDrawableSize,_emscripten_glBufferData__wrapper,_emscripten_glBufferSubData__wrapper,_emscripten_glUniform3i__wrapper,_emscripten_glUniformMatrix2fv__wrapper,_emscripten_glUniformMatrix3fv__wrapper,_emscripten_glUniformMatrix4fv__wrapper,_emscripten_glGetAttachedShaders__wrapper,_emscripten_glShaderSource__wrapper,_emscripten_glGetShaderSource__wrapper,_emscripten_glGetShaderInfoLog__wrapper,_emscripten_glGetShaderPrecisionFormat__wrapper,_emscripten_glGetProgramInfoLog__wrapper,_emscripten_glFramebufferRenderbuffer__wrapper,_emscripten_glGetFramebufferAttachmentParameteriv__wrapper,_emscripten_glGetInfoLogARB__wrapper,_emscripten_glVertexPointer__wrapper,_emscripten_glTexCoordPointer__wrapper,_emscripten_glColorPointer__wrapper,_emscripten_glDrawElements__wrapper,_emscripten_glDrawArraysInstanced__wrapper,_emscripten_glViewport__wrapper,_emscripten_glScissor__wrapper,_emscripten_glColorMask__wrapper,_emscripten_glRenderbufferStorage__wrapper,_emscripten_glBlendFuncSeparate__wrapper,_emscripten_glStencilFuncSeparate__wrapper,_emscripten_glStencilOpSeparate__wrapper,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34];

  return { ___cxa_can_catch: ___cxa_can_catch, _fflush: _fflush, _main: _main, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, _strstr: _strstr, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _llvm_bswap_i32: _llvm_bswap_i32, _bitshift64Lshr: _bitshift64Lshr, _free: _free, _emscripten_GetProcAddress: _emscripten_GetProcAddress, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, __GLOBAL__I_000101: __GLOBAL__I_000101, __GLOBAL__sub_I_iostream_cpp: __GLOBAL__sub_I_iostream_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_vd: dynCall_vd, dynCall_vid: dynCall_vid, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_viiiiiiiiiii: dynCall_viiiiiiiiiii, dynCall_viddd: dynCall_viddd, dynCall_iiiii: dynCall_iiiii, dynCall_vidi: dynCall_vidi, dynCall_vidd: dynCall_vidd, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viii: dynCall_viii, dynCall_viid: dynCall_viid, dynCall_vidddd: dynCall_vidddd, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_i: dynCall_i, dynCall_iiiiidii: dynCall_iiiiidii, dynCall_iiiiiiiiii: dynCall_iiiiiiiiii, dynCall_vdddddd: dynCall_vdddddd, dynCall_vdddd: dynCall_vdddd, dynCall_vdd: dynCall_vdd, dynCall_v: dynCall_v, dynCall_vdi: dynCall_vdi, dynCall_iiiiid: dynCall_iiiiid, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _main = Module["_main"] = asm["_main"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _strstr = Module["_strstr"] = asm["_strstr"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var __GLOBAL__sub_I_iostream_cpp = Module["__GLOBAL__sub_I_iostream_cpp"] = asm["__GLOBAL__sub_I_iostream_cpp"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _free = Module["_free"] = asm["_free"];
var _emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] = asm["_emscripten_GetProcAddress"];
var __GLOBAL__I_000101 = Module["__GLOBAL__I_000101"] = asm["__GLOBAL__I_000101"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_vd = Module["dynCall_vd"] = asm["dynCall_vd"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viiiiiiiiiii = Module["dynCall_viiiiiiiiiii"] = asm["dynCall_viiiiiiiiiii"];
var dynCall_viddd = Module["dynCall_viddd"] = asm["dynCall_viddd"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_vidi = Module["dynCall_vidi"] = asm["dynCall_vidi"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_vidddd = Module["dynCall_vidddd"] = asm["dynCall_vidddd"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiiidii = Module["dynCall_iiiiidii"] = asm["dynCall_iiiiidii"];
var dynCall_iiiiiiiiii = Module["dynCall_iiiiiiiiii"] = asm["dynCall_iiiiiiiiii"];
var dynCall_vdddddd = Module["dynCall_vdddddd"] = asm["dynCall_vdddddd"];
var dynCall_vdddd = Module["dynCall_vdddd"] = asm["dynCall_vdddd"];
var dynCall_vdd = Module["dynCall_vdd"] = asm["dynCall_vdd"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vdi = Module["dynCall_vdi"] = asm["dynCall_vdi"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
Runtime.stackAlloc = asm["stackAlloc"];
Runtime.stackSave = asm["stackSave"];
Runtime.stackRestore = asm["stackRestore"];
Runtime.establishStackSpace = asm["establishStackSpace"];
Runtime.setTempRet0 = asm["setTempRet0"];
Runtime.getTempRet0 = asm["getTempRet0"];
if (memoryInitializer) {
 if (typeof Module["locateFile"] === "function") {
  memoryInitializer = Module["locateFile"](memoryInitializer);
 } else if (Module["memoryInitializerPrefixURL"]) {
  memoryInitializer = Module["memoryInitializerPrefixURL"] + memoryInitializer;
 }
 if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
  var data = Module["readBinary"](memoryInitializer);
  HEAPU8.set(data, Runtime.GLOBAL_BASE);
 } else {
  addRunDependency("memory initializer");
  var applyMemoryInitializer = (function(data) {
   if (data.byteLength) data = new Uint8Array(data);
   HEAPU8.set(data, Runtime.GLOBAL_BASE);
   removeRunDependency("memory initializer");
  });
  function doBrowserLoad() {
   Browser.asyncLoad(memoryInitializer, applyMemoryInitializer, (function() {
    throw "could not load memory initializer " + memoryInitializer;
   }));
  }
  var request = Module["memoryInitializerRequest"];
  if (request) {
   function useRequest() {
    if (request.status !== 200 && request.status !== 0) {
     console.warn("a problem seems to have happened with Module.memoryInitializerRequest, status: " + request.status + ", retrying " + memoryInitializer);
     doBrowserLoad();
     return;
    }
    applyMemoryInitializer(request.response);
   }
   if (request.response) {
    setTimeout(useRequest, 0);
   } else {
    request.addEventListener("load", useRequest);
   }
  } else {
   doBrowserLoad();
  }
 }
}
function ExitStatus(status) {
 this.name = "ExitStatus";
 this.message = "Program terminated with exit(" + status + ")";
 this.status = status;
}
ExitStatus.prototype = new Error;
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
 if (!Module["calledRun"]) run();
 if (!Module["calledRun"]) dependenciesFulfilled = runCaller;
};
Module["callMain"] = Module.callMain = function callMain(args) {
 assert(runDependencies == 0, "cannot call main when async dependencies remain! (listen on __ATMAIN__)");
 assert(__ATPRERUN__.length == 0, "cannot call main when preRun functions remain to be called");
 args = args || [];
 ensureInitRuntime();
 var argc = args.length + 1;
 function pad() {
  for (var i = 0; i < 4 - 1; i++) {
   argv.push(0);
  }
 }
 var argv = [ allocate(intArrayFromString(Module["thisProgram"]), "i8", ALLOC_NORMAL) ];
 pad();
 for (var i = 0; i < argc - 1; i = i + 1) {
  argv.push(allocate(intArrayFromString(args[i]), "i8", ALLOC_NORMAL));
  pad();
 }
 argv.push(0);
 argv = allocate(argv, "i32", ALLOC_NORMAL);
 try {
  var ret = Module["_main"](argc, argv, 0);
  exit(ret, true);
 } catch (e) {
  if (e instanceof ExitStatus) {
   return;
  } else if (e == "SimulateInfiniteLoop") {
   Module["noExitRuntime"] = true;
   return;
  } else {
   if (e && typeof e === "object" && e.stack) Module.printErr("exception thrown: " + [ e, e.stack ]);
   throw e;
  }
 } finally {
  calledMain = true;
 }
};
function run(args) {
 args = args || Module["arguments"];
 if (preloadStartTime === null) preloadStartTime = Date.now();
 if (runDependencies > 0) {
  return;
 }
 preRun();
 if (runDependencies > 0) return;
 if (Module["calledRun"]) return;
 function doRun() {
  if (Module["calledRun"]) return;
  Module["calledRun"] = true;
  if (ABORT) return;
  ensureInitRuntime();
  preMain();
  if (Module["onRuntimeInitialized"]) Module["onRuntimeInitialized"]();
  if (Module["_main"] && shouldRunNow) Module["callMain"](args);
  postRun();
 }
 if (Module["setStatus"]) {
  Module["setStatus"]("Running...");
  setTimeout((function() {
   setTimeout((function() {
    Module["setStatus"]("");
   }), 1);
   doRun();
  }), 1);
 } else {
  doRun();
 }
}
Module["run"] = Module.run = run;
function exit(status, implicit) {
 if (implicit && Module["noExitRuntime"]) {
  return;
 }
 if (Module["noExitRuntime"]) {} else {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;
  exitRuntime();
  if (Module["onExit"]) Module["onExit"](status);
 }
 if (ENVIRONMENT_IS_NODE) {
  process["stdout"]["once"]("drain", (function() {
   process["exit"](status);
  }));
  console.log(" ");
  setTimeout((function() {
   process["exit"](status);
  }), 500);
 } else if (ENVIRONMENT_IS_SHELL && typeof quit === "function") {
  quit(status);
 }
 throw new ExitStatus(status);
}
Module["exit"] = Module.exit = exit;
var abortDecorators = [];
function abort(what) {
 if (what !== undefined) {
  Module.print(what);
  Module.printErr(what);
  what = JSON.stringify(what);
 } else {
  what = "";
 }
 ABORT = true;
 EXITSTATUS = 1;
 var extra = "\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";
 var output = "abort(" + what + ") at " + stackTrace() + extra;
 if (abortDecorators) {
  abortDecorators.forEach((function(decorator) {
   output = decorator(output, what);
  }));
 }
 throw output;
}
Module["abort"] = Module.abort = abort;
if (Module["preInit"]) {
 if (typeof Module["preInit"] == "function") Module["preInit"] = [ Module["preInit"] ];
 while (Module["preInit"].length > 0) {
  Module["preInit"].pop()();
 }
}
var shouldRunNow = true;
if (Module["noInitialRun"]) {
 shouldRunNow = false;
}
run();




